
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  080134c8  080134c8  000234c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014148  08014148  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08014148  08014148  00024148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014150  08014150  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014150  08014150  00024150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014154  08014154  00024154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08014158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c68  20000228  08014380  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e90  08014380  00032e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff6d  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bad  00000000  00000000  000501c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00054d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001810  00000000  00000000  000567d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1ea  00000000  00000000  00057fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc75  00000000  00000000  000851d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75a7  00000000  00000000  000b0e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001983ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082dc  00000000  00000000  00198440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080134ac 	.word	0x080134ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	080134ac 	.word	0x080134ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f006 fb32 	bl	80076c0 <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000048c 	.word	0x2000048c

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f006 fb1a 	bl	80076c0 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000048c 	.word	0x2000048c

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f004 fddb 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f004 fdd5 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f004 fdcf 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f004 fdc9 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f004 fdc3 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f004 fdbd 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f004 fdb7 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f004 fdb1 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f004 fdab 	bl	8005c58 <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f004 fda5 	bl	8005c58 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	20000262 	.word	0x20000262
 800125c:	20000260 	.word	0x20000260
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	20000244 	.word	0x20000244

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000025e 	.word	0x2000025e

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f00f f805 	bl	80102fc <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	2000024c 	.word	0x2000024c
 8001358:	2000025e 	.word	0x2000025e
 800135c:	20000244 	.word	0x20000244
 8001360:	20000262 	.word	0x20000262

08001364 <readBNO055>:
// モジュール名 readBNO055
// 処理概要     指定レジスタの読み出し
// 引数         reg:レジスタアドレス
// 戻り値       読み出したデータ
/////////////////////////////////////////////////////////////////////
uint8_t readBNO055(uint8_t reg) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_buf[1], tx_buf[1] = {reg};
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	723b      	strb	r3, [r7, #8]
    uint8_t rx_num = 1, tx_num = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	2301      	movs	r3, #1
 8001378:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	b29b      	uxth	r3, r3
 800137e:	f107 0208 	add.w	r2, r7, #8
 8001382:	2164      	movs	r1, #100	; 0x64
 8001384:	9100      	str	r1, [sp, #0]
 8001386:	2150      	movs	r1, #80	; 0x50
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <readBNO055+0x48>)
 800138a:	f006 f999 	bl	80076c0 <HAL_I2C_Master_Transmit>
    I2C_BNO055_READ
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	b29b      	uxth	r3, r3
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	2164      	movs	r1, #100	; 0x64
 8001398:	9100      	str	r1, [sp, #0]
 800139a:	2151      	movs	r1, #81	; 0x51
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <readBNO055+0x48>)
 800139e:	f006 fa8d 	bl	80078bc <HAL_I2C_Master_Receive>

    return rx_buf[0];
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000048c 	.word	0x2000048c

080013b0 <readBNO055AxisData>:
// モジュール名 readBNO055
// 処理概要     指定レジスタの読み出し
// 引数         reg:レジスタアドレス
// 戻り値       読み出したデータ
/////////////////////////////////////////////////////////////////////
void readBNO055AxisData(uint8_t reg, uint8_t *rx_buf ) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[1] = {reg};
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	733b      	strb	r3, [r7, #12]
    uint8_t rx_num = 6, tx_num = 1;
 80013c0:	2306      	movs	r3, #6
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	2301      	movs	r3, #1
 80013c6:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f107 020c 	add.w	r2, r7, #12
 80013d0:	2164      	movs	r1, #100	; 0x64
 80013d2:	9100      	str	r1, [sp, #0]
 80013d4:	2150      	movs	r1, #80	; 0x50
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <readBNO055AxisData+0x48>)
 80013d8:	f006 f972 	bl	80076c0 <HAL_I2C_Master_Transmit>
    I2C_BNO055_READ
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	2151      	movs	r1, #81	; 0x51
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <readBNO055AxisData+0x48>)
 80013ea:	f006 fa67 	bl	80078bc <HAL_I2C_Master_Receive>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000048c 	.word	0x2000048c

080013fc <writeBNO055>:
// モジュール名 writeBNO055
// 処理概要     指定レジスタへ書き込み
// 引数         reg:レジスタアドレス data: 書き込むデータ
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void writeBNO055(uint8_t reg, uint8_t data) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
    uint8_t rx_buf[1], tx_buf[1] = {reg, data};
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	723b      	strb	r3, [r7, #8]
    uint8_t rx_num = 1, tx_num = 2;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	2302      	movs	r3, #2
 8001416:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	b29b      	uxth	r3, r3
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	2164      	movs	r1, #100	; 0x64
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	2150      	movs	r1, #80	; 0x50
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <writeBNO055+0x38>)
 8001428:	f006 f94a 	bl	80076c0 <HAL_I2C_Master_Transmit>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000048c 	.word	0x2000048c

08001438 <initBNO055>:
// モジュール名 initBNO055
// 処理概要     指定レジスタへ書き込み
// 引数         reg:レジスタアドレス data: 書き込むデータ
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void initBNO055(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    if(readBNO055(BNO055_CHIP_ID_ADDR) == BNO055_CHIP_ID) {
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ff91 	bl	8001364 <readBNO055>
 8001442:	4603      	mov	r3, r0
 8001444:	2ba0      	cmp	r3, #160	; 0xa0
 8001446:	d116      	bne.n	8001476 <initBNO055+0x3e>
        // コンフィグ設定
        writeBNO055(BNO055_PAGE_ID_ADDR, 0x01); // ページ1に変更
 8001448:	2101      	movs	r1, #1
 800144a:	2007      	movs	r0, #7
 800144c:	f7ff ffd6 	bl	80013fc <writeBNO055>

        // 加速
        writeBNO055(BNO055_ACC_CONFIG_ADDR, 0x17);    // 16G 250Hz
 8001450:	2117      	movs	r1, #23
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff ffd2 	bl	80013fc <writeBNO055>
        // ジャイロ
        writeBNO055(BNO055_GYR_CONFIG_0_ADDR, 0x08);  // 2000dps 230Hz 
 8001458:	2108      	movs	r1, #8
 800145a:	200a      	movs	r0, #10
 800145c:	f7ff ffce 	bl	80013fc <writeBNO055>

        // モード変更
        writeBNO055(BNO055_PAGE_ID_ADDR, 0x00);     // ページ0に変更
 8001460:	2100      	movs	r1, #0
 8001462:	2007      	movs	r0, #7
 8001464:	f7ff ffca 	bl	80013fc <writeBNO055>
        writeBNO055(BNO055_OPR_MODE_ADDR, 0x05);    // ノーマルモード
 8001468:	2105      	movs	r1, #5
 800146a:	203d      	movs	r0, #61	; 0x3d
 800146c:	f7ff ffc6 	bl	80013fc <writeBNO055>
        HAL_Delay(50);    //変更まで待つ
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f004 fbf1 	bl	8005c58 <HAL_Delay>
    }
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <getBNO055Gyro>:
// モジュール名 getGyro
// 処理概要     角速度の取得
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getBNO055Gyro(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
    int16_t x,y,z;
    readBNO055AxisData(BNO055_GYRO_DATA_X_LSB_ADDR, rawGyroVal);
 8001482:	492b      	ldr	r1, [pc, #172]	; (8001530 <getBNO055Gyro+0xb4>)
 8001484:	2014      	movs	r0, #20
 8001486:	f7ff ff93 	bl	80013b0 <readBNO055AxisData>
    x = (int16_t)( rawGyroVal[1] * 0x100 + rawGyroVal[0] );
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <getBNO055Gyro+0xb4>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	b29b      	uxth	r3, r3
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <getBNO055Gyro+0xb4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	80fb      	strh	r3, [r7, #6]
    y = (int16_t)( rawGyroVal[3] * 0x100 + rawGyroVal[2] );
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <getBNO055Gyro+0xb4>)
 80014a2:	78db      	ldrb	r3, [r3, #3]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <getBNO055Gyro+0xb4>)
 80014ac:	789b      	ldrb	r3, [r3, #2]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	80bb      	strh	r3, [r7, #4]
    z = (int16_t)( rawGyroVal[5] * 0x100 + rawGyroVal[4] );
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <getBNO055Gyro+0xb4>)
 80014b8:	795b      	ldrb	r3, [r3, #5]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <getBNO055Gyro+0xb4>)
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	807b      	strh	r3, [r7, #2]
    gyroValX = ((double)x) / GYROLSB;
 80014cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f847 	bl	8000564 <__aeabi_i2d>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <getBNO055Gyro+0xb8>)
 80014dc:	f7ff f9d6 	bl	800088c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4914      	ldr	r1, [pc, #80]	; (8001538 <getBNO055Gyro+0xbc>)
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]
    gyroValY = ((double)y) / GYROLSB;
 80014ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f838 	bl	8000564 <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <getBNO055Gyro+0xb8>)
 80014fa:	f7ff f9c7 	bl	800088c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <getBNO055Gyro+0xc0>)
 8001504:	e9c1 2300 	strd	r2, r3, [r1]
    gyroValZ = ((double)z) / GYROLSB;   
 8001508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f829 	bl	8000564 <__aeabi_i2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <getBNO055Gyro+0xb8>)
 8001518:	f7ff f9b8 	bl	800088c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <getBNO055Gyro+0xc4>)
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002b0 	.word	0x200002b0
 8001534:	40300000 	.word	0x40300000
 8001538:	20000268 	.word	0x20000268
 800153c:	20000270 	.word	0x20000270
 8001540:	20000278 	.word	0x20000278
 8001544:	00000000 	.word	0x00000000

08001548 <calcDegrees>:
// モジュール名 calcDegrees
// 処理概要     角度の計算
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void calcDegrees(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    angleX += gyroValX * 0.0056;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <calcDegrees+0x98>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	a321      	add	r3, pc, #132	; (adr r3, 80015d8 <calcDegrees+0x90>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f86e 	bl	8000638 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <calcDegrees+0x9c>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe feaf 	bl	80002cc <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	491c      	ldr	r1, [pc, #112]	; (80015e4 <calcDegrees+0x9c>)
 8001574:	e9c1 2300 	strd	r2, r3, [r1]
    angleY += gyroValY * 0.0056;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <calcDegrees+0xa0>)
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	a316      	add	r3, pc, #88	; (adr r3, 80015d8 <calcDegrees+0x90>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f858 	bl	8000638 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <calcDegrees+0xa4>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe99 	bl	80002cc <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4913      	ldr	r1, [pc, #76]	; (80015ec <calcDegrees+0xa4>)
 80015a0:	e9c1 2300 	strd	r2, r3, [r1]
    angleZ += gyroValZ * 0.0056;   
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <calcDegrees+0xa8>)
 80015a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015aa:	a30b      	add	r3, pc, #44	; (adr r3, 80015d8 <calcDegrees+0x90>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f842 	bl	8000638 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <calcDegrees+0xac>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe fe83 	bl	80002cc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <calcDegrees+0xac>)
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	8db8bac7 	.word	0x8db8bac7
 80015dc:	3f76f006 	.word	0x3f76f006
 80015e0:	20000268 	.word	0x20000268
 80015e4:	20000298 	.word	0x20000298
 80015e8:	20000270 	.word	0x20000270
 80015ec:	200002a0 	.word	0x200002a0
 80015f0:	20000278 	.word	0x20000278
 80015f4:	200002a8 	.word	0x200002a8

080015f8 <readINA260>:
// 処理概要     データ受信
// 引数         reg:レジスタのアドレス
// 戻り値       読み取ったデータ(16bit)
//////////////////////////////////////////////////////////////////////////
uint16_t readINA260( uint16_t addr, uint8_t reg )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	4613      	mov	r3, r2
 8001606:	717b      	strb	r3, [r7, #5]
    uint8_t rx_buf[2], tx_buf[1] = { reg };
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	723b      	strb	r3, [r7, #8]
	I2C_INA260_SEND
 800160c:	f107 0208 	add.w	r2, r7, #8
 8001610:	88f9      	ldrh	r1, [r7, #6]
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <readINA260+0x58>)
 800161a:	f006 f851 	bl	80076c0 <HAL_I2C_Master_Transmit>
    I2C_INA260_READ
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	b299      	uxth	r1, r3
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <readINA260+0x58>)
 8001632:	f006 f943 	bl	80078bc <HAL_I2C_Master_Receive>

    return (uint16_t)( rx_buf[0] * 0x100 + rx_buf[1] );
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	b29b      	uxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b29a      	uxth	r2, r3
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	b29b      	uxth	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b29b      	uxth	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000048c 	.word	0x2000048c

08001654 <writeINA260>:
// 処理概要     データ受信
// 引数         reg:レジスタのアドレス
// 戻り値       読み取ったデータ(16bit)
//////////////////////////////////////////////////////////////////////////
void writeINA260( uint16_t addr, uint8_t reg, uint16_t data )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	460b      	mov	r3, r1
 8001660:	717b      	strb	r3, [r7, #5]
 8001662:	4613      	mov	r3, r2
 8001664:	807b      	strh	r3, [r7, #2]
    uint8_t rx_buf[2], tx_buf[2] = { reg, data};
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	723b      	strb	r3, [r7, #8]
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	727b      	strb	r3, [r7, #9]
	I2C_INA260_SEND2
 8001670:	f107 0208 	add.w	r2, r7, #8
 8001674:	88f9      	ldrh	r1, [r7, #6]
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2302      	movs	r3, #2
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <writeINA260+0x38>)
 800167e:	f006 f81f 	bl	80076c0 <HAL_I2C_Master_Transmit>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000048c 	.word	0x2000048c

08001690 <initINA260>:
// モジュール名 initINA260
// 処理概要     INA260の初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void initINA260( void ) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    // Current  conversion time = 8.244 ms
    // Vbus     conversion time = 1.1 ms
    writeINA260( INA260_SLAVEADDRESS_R, 0x00, 0x6b27 );
 8001694:	f646 3227 	movw	r2, #27431	; 0x6b27
 8001698:	2100      	movs	r1, #0
 800169a:	2080      	movs	r0, #128	; 0x80
 800169c:	f7ff ffda 	bl	8001654 <writeINA260>
    HAL_Delay(50);
 80016a0:	2032      	movs	r0, #50	; 0x32
 80016a2:	f004 fad9 	bl	8005c58 <HAL_Delay>
	writeINA260( INA260_SLAVEADDRESS_L, 0x00, 0x6b27 );
 80016a6:	f646 3227 	movw	r2, #27431	; 0x6b27
 80016aa:	2100      	movs	r1, #0
 80016ac:	2088      	movs	r0, #136	; 0x88
 80016ae:	f7ff ffd1 	bl	8001654 <writeINA260>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <getCurrent>:
// 処理概要     電流値の取得
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void getCurrent( void )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
    int16_t rawCurrentR, rawCurrentL;
    
    // Rawデータ取得
    rawCurrentR = readINA260(INA260_SLAVEADDRESS_R, 0x01);
 80016be:	2101      	movs	r1, #1
 80016c0:	2080      	movs	r0, #128	; 0x80
 80016c2:	f7ff ff99 	bl	80015f8 <readINA260>
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
	if (rawCurrentR > 32767) rawCurrentR = ~rawCurrentR+0x8000;     // 2の補数計算(16bitの半分を超えたとき)
    rawCurrentL = readINA260(INA260_SLAVEADDRESS_L, 0x01);
 80016ca:	2101      	movs	r1, #1
 80016cc:	2088      	movs	r0, #136	; 0x88
 80016ce:	f7ff ff93 	bl	80015f8 <readINA260>
 80016d2:	4603      	mov	r3, r0
 80016d4:	80bb      	strh	r3, [r7, #4]
	if (rawCurrentL > 32767) rawCurrentL = ~rawCurrentL+0x8000;  // 2の補数計算(16bitの半分を超えたとき)

    CurrntR = LSB_CURRENT * rawCurrentR;
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff42 	bl	8000564 <__aeabi_i2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <getCurrent+0x64>)
 80016e6:	f7fe ffa7 	bl	8000638 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	490c      	ldr	r1, [pc, #48]	; (8001720 <getCurrent+0x68>)
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
    CurrntL = LSB_CURRENT * rawCurrentL;
 80016f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff33 	bl	8000564 <__aeabi_i2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <getCurrent+0x64>)
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4905      	ldr	r1, [pc, #20]	; (8001724 <getCurrent+0x6c>)
 800170e:	e9c1 2300 	strd	r2, r3, [r1]
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	3ff40000 	.word	0x3ff40000
 8001720:	200002c0 	.word	0x200002c0
 8001724:	200002b8 	.word	0x200002b8

08001728 <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	// Encoder count
	int16_t val;

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800172c:	213c      	movs	r1, #60	; 0x3c
 800172e:	4832      	ldr	r0, [pc, #200]	; (80017f8 <systemInit+0xd0>)
 8001730:	f008 fa88 	bl	8009c44 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001734:	213c      	movs	r1, #60	; 0x3c
 8001736:	4831      	ldr	r0, [pc, #196]	; (80017fc <systemInit+0xd4>)
 8001738:	f008 fa84 	bl	8009c44 <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *)analogVal, 12) != HAL_OK)	Error_Handler();
 800173c:	220c      	movs	r2, #12
 800173e:	4930      	ldr	r1, [pc, #192]	; (8001800 <systemInit+0xd8>)
 8001740:	4830      	ldr	r0, [pc, #192]	; (8001804 <systemInit+0xdc>)
 8001742:	f004 fc4f 	bl	8005fe4 <HAL_ADC_Start_DMA>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <systemInit+0x28>
 800174c:	f002 f830 	bl	80037b0 <Error_Handler>

	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 8001750:	2100      	movs	r1, #0
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <systemInit+0xe0>)
 8001754:	f008 f908 	bl	8009968 <HAL_TIM_PWM_Start>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <systemInit+0x3a>
 800175e:	f002 f827 	bl	80037b0 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 8001762:	2104      	movs	r1, #4
 8001764:	4828      	ldr	r0, [pc, #160]	; (8001808 <systemInit+0xe0>)
 8001766:	f008 f8ff 	bl	8009968 <HAL_TIM_PWM_Start>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <systemInit+0x4c>
 8001770:	f002 f81e 	bl	80037b0 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 8001774:	2108      	movs	r1, #8
 8001776:	4824      	ldr	r0, [pc, #144]	; (8001808 <systemInit+0xe0>)
 8001778:	f008 f8f6 	bl	8009968 <HAL_TIM_PWM_Start>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <systemInit+0x5e>
 8001782:	f002 f815 	bl	80037b0 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 8001786:	210c      	movs	r1, #12
 8001788:	481f      	ldr	r0, [pc, #124]	; (8001808 <systemInit+0xe0>)
 800178a:	f008 f8ed 	bl	8009968 <HAL_TIM_PWM_Start>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <systemInit+0x70>
 8001794:	f002 f80c 	bl	80037b0 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 8001798:	2100      	movs	r1, #0
 800179a:	481c      	ldr	r0, [pc, #112]	; (800180c <systemInit+0xe4>)
 800179c:	f008 f8e4 	bl	8009968 <HAL_TIM_PWM_Start>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <systemInit+0x82>
 80017a6:	f002 f803 	bl	80037b0 <Error_Handler>

	// MAX22201 sleep mode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <systemInit+0xe0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <systemInit+0xe0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <systemInit+0xe0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <systemInit+0xe0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <systemInit+0xe4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 80017da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017de:	f004 fa3b 	bl	8005c58 <HAL_Delay>

	intiLcd();  	// character display initialize
 80017e2:	f7ff fc59 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize
	initINA260();	// Current sensor initialize
 80017e6:	f7ff ff53 	bl	8001690 <initINA260>
	initBNO055();	// BNO055(IMU) initialize
 80017ea:	f7ff fe25 	bl	8001438 <initBNO055>

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <systemInit+0xe8>)
 80017f0:	f007 fffa 	bl	80097e8 <HAL_TIM_Base_Start_IT>
	// 	val = readINA260(0x01);
	// 	if (val > 32767) val = ~val+0x8000;
	// 	lcdRowPrintf(LOWROW, "   %5d",val);
	// 	HAL_Delay(500);
	// }
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000620 	.word	0x20000620
 80017fc:	20000668 	.word	0x20000668
 8001800:	200002cc 	.word	0x200002cc
 8001804:	2000039c 	.word	0x2000039c
 8001808:	20000590 	.word	0x20000590
 800180c:	200005d8 	.word	0x200005d8
 8001810:	200006b0 	.word	0x200006b0

08001814 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 8001814:	b598      	push	{r3, r4, r7, lr}
 8001816:	af00      	add	r7, sp, #0

	
	switch (pattern) {
 8001818:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <systemLoop+0x25c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b66      	cmp	r3, #102	; 0x66
 800181e:	f000 80f6 	beq.w	8001a0e <systemLoop+0x1fa>
 8001822:	2b66      	cmp	r3, #102	; 0x66
 8001824:	f300 811b 	bgt.w	8001a5e <systemLoop+0x24a>
 8001828:	2b65      	cmp	r3, #101	; 0x65
 800182a:	f000 80c9 	beq.w	80019c0 <systemLoop+0x1ac>
 800182e:	2b65      	cmp	r3, #101	; 0x65
 8001830:	f300 8115 	bgt.w	8001a5e <systemLoop+0x24a>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <systemLoop+0x2a>
 8001838:	2b0b      	cmp	r3, #11
 800183a:	d021      	beq.n	8001880 <systemLoop+0x6c>
			// 	}
			// }
			break;
    
      	default:
        	break;
 800183c:	e10f      	b.n	8001a5e <systemLoop+0x24a>
			setup();
 800183e:	f002 f8f9 	bl	8003a34 <setup>
			if (start) {
 8001842:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <systemLoop+0x260>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 810b 	beq.w	8001a62 <systemLoop+0x24e>
				lcdRowPrintf(UPROW, "ready   ");
 800184c:	498a      	ldr	r1, [pc, #552]	; (8001a78 <systemLoop+0x264>)
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fd30 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 8001854:	4989      	ldr	r1, [pc, #548]	; (8001a7c <systemLoop+0x268>)
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff fd2c 	bl	80012b4 <lcdRowPrintf>
				HAL_Delay(5000);
 800185c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001860:	f004 f9fa 	bl	8005c58 <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 8001864:	4986      	ldr	r1, [pc, #536]	; (8001a80 <systemLoop+0x26c>)
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff fd24 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 800186c:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <systemLoop+0x270>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
				cntRun = 0;
 8001872:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <systemLoop+0x274>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
				pattern = 1;
 8001878:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <systemLoop+0x25c>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
			break;
 800187e:	e0f0      	b.n	8001a62 <systemLoop+0x24e>
			if (!modeCurve) {
 8001880:	4b82      	ldr	r3, [pc, #520]	; (8001a8c <systemLoop+0x278>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10f      	bne.n	80018a8 <systemLoop+0x94>
				targetSpeed = paramSpeed[INDEX_STRAIGHT]*PALSE_MILLIMETER/10;
 8001888:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <systemLoop+0x27c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe64 	bl	8000564 <__aeabi_i2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	497c      	ldr	r1, [pc, #496]	; (8001a94 <systemLoop+0x280>)
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
 80018a6:	e00e      	b.n	80018c6 <systemLoop+0xb2>
				targetSpeed = paramSpeed[INDEX_CURVE]*PALSE_MILLIMETER/10;
 80018a8:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <systemLoop+0x27c>)
 80018aa:	78db      	ldrb	r3, [r3, #3]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe54 	bl	8000564 <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4974      	ldr	r1, [pc, #464]	; (8001a94 <systemLoop+0x280>)
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <systemLoop+0x284>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <systemLoop+0x288>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f002 f86a 	bl	80039b0 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <systemLoop+0x28c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
			if ((lSensor[0] + lSensor[1] + lSensor[10] + lSensor[11]) < 6000) {
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <systemLoop+0x290>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <systemLoop+0x290>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a6c      	ldr	r2, [pc, #432]	; (8001aa4 <systemLoop+0x290>)
 80018f4:	8a92      	ldrh	r2, [r2, #20]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a6a      	ldr	r2, [pc, #424]	; (8001aa4 <systemLoop+0x290>)
 80018fa:	8ad2      	ldrh	r2, [r2, #22]
 80018fc:	4413      	add	r3, r2
 80018fe:	f241 726f 	movw	r2, #5999	; 0x176f
 8001902:	4293      	cmp	r3, r2
 8001904:	dc03      	bgt.n	800190e <systemLoop+0xfa>
				encCross2 = encTotalN;
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <systemLoop+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a67      	ldr	r2, [pc, #412]	; (8001aa8 <systemLoop+0x294>)
 800190c:	6013      	str	r3, [r2, #0]
			if (encTotalN - encCross2 >= encMM (200) ) {
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <systemLoop+0x270>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <systemLoop+0x294>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1ad4      	subs	r4, r2, r3
 8001918:	20c8      	movs	r0, #200	; 0xc8
 800191a:	f000 f945 	bl	8001ba8 <encMM>
 800191e:	4603      	mov	r3, r0
 8001920:	429c      	cmp	r4, r3
 8001922:	db1c      	blt.n	800195e <systemLoop+0x14a>
				if (checkMarker() == RIGHTMARKER) {
 8001924:	f001 ff76 	bl	8003814 <checkMarker>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d117      	bne.n	800195e <systemLoop+0x14a>
					if (SGmarker == 0) {
 800192e:	4b5f      	ldr	r3, [pc, #380]	; (8001aac <systemLoop+0x298>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <systemLoop+0x12a>
						SGmarker = STARTMARKER;
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <systemLoop+0x298>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e00f      	b.n	800195e <systemLoop+0x14a>
					} else if (SGmarker == STARTMARKER && encTotalN > encMM(500)) {
 800193e:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <systemLoop+0x298>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10b      	bne.n	800195e <systemLoop+0x14a>
 8001946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800194a:	f000 f92d 	bl	8001ba8 <encMM>
 800194e:	4602      	mov	r2, r0
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <systemLoop+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	da02      	bge.n	800195e <systemLoop+0x14a>
						SGmarker = GOALMARKER;
 8001958:	4b54      	ldr	r3, [pc, #336]	; (8001aac <systemLoop+0x298>)
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
			if (angleSensor < paramAngle[INDEX_ANGLE_CURVE] && angleSensor > -paramAngle[INDEX_ANGLE_CURVE]) {
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <systemLoop+0x29c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdfe 	bl	8000564 <__aeabi_i2d>
 8001968:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <systemLoop+0x2a0>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7ff f8f3 	bl	8000b58 <__aeabi_dcmpgt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d011      	beq.n	800199c <systemLoop+0x188>
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <systemLoop+0x29c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	425b      	negs	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdf0 	bl	8000564 <__aeabi_i2d>
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <systemLoop+0x2a0>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7ff f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <systemLoop+0x188>
				modeCurve = 0;
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <systemLoop+0x278>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <systemLoop+0x18e>
				modeCurve = 1;
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <systemLoop+0x278>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
			if (SGmarker == GOALMARKER) {
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <systemLoop+0x298>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d15d      	bne.n	8001a66 <systemLoop+0x252>
				goalTime = cntRun;
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <systemLoop+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <systemLoop+0x2a4>)
 80019b0:	6013      	str	r3, [r2, #0]
				enc1 = 0;
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <systemLoop+0x2a8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
				pattern = 101;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <systemLoop+0x25c>)
 80019ba:	2265      	movs	r2, #101	; 0x65
 80019bc:	701a      	strb	r2, [r3, #0]
			break;
 80019be:	e052      	b.n	8001a66 <systemLoop+0x252>
			targetSpeed = paramSpeed[INDEX_STOP]*PALSE_MILLIMETER/10;
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <systemLoop+0x27c>)
 80019c2:	789b      	ldrb	r3, [r3, #2]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdc8 	bl	8000564 <__aeabi_i2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	492e      	ldr	r1, [pc, #184]	; (8001a94 <systemLoop+0x280>)
 80019da:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <systemLoop+0x284>)
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <systemLoop+0x288>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f001 ffde 	bl	80039b0 <motorPwmOutSynth>
			if (enc1 >= encMM(500)) {
 80019f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f8:	f000 f8d6 	bl	8001ba8 <encMM>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <systemLoop+0x2a8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dc31      	bgt.n	8001a6a <systemLoop+0x256>
				pattern = 102;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <systemLoop+0x25c>)
 8001a08:	2266      	movs	r2, #102	; 0x66
 8001a0a:	701a      	strb	r2, [r3, #0]
			break;
 8001a0c:	e02d      	b.n	8001a6a <systemLoop+0x256>
			targetSpeed = 0;
 8001a0e:	4921      	ldr	r1, [pc, #132]	; (8001a94 <systemLoop+0x280>)
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <systemLoop+0x2ac>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <systemLoop+0x21c>
 8001a26:	2100      	movs	r1, #0
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f001 ffc1 	bl	80039b0 <motorPwmOutSynth>
 8001a2e:	e006      	b.n	8001a3e <systemLoop+0x22a>
			else                  motorPwmOutSynth( 0, speedPwm );
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <systemLoop+0x288>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	4619      	mov	r1, r3
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f001 ffb9 	bl	80039b0 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <systemLoop+0x28c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(UPROW, "TIME    ");
 8001a46:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <systemLoop+0x2b0>)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fc33 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "  %5ds",goalTime);
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <systemLoop+0x2a4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	491c      	ldr	r1, [pc, #112]	; (8001ac8 <systemLoop+0x2b4>)
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fc2c 	bl	80012b4 <lcdRowPrintf>
			break;
 8001a5c:	e006      	b.n	8001a6c <systemLoop+0x258>
        	break;
 8001a5e:	bf00      	nop
 8001a60:	e004      	b.n	8001a6c <systemLoop+0x258>
			break;
 8001a62:	bf00      	nop
 8001a64:	e002      	b.n	8001a6c <systemLoop+0x258>
			break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <systemLoop+0x258>
			break;
 8001a6a:	bf00      	nop
    } // switch case
}
 8001a6c:	bf00      	nop
 8001a6e:	bd98      	pop	{r3, r4, r7, pc}
 8001a70:	200002c8 	.word	0x200002c8
 8001a74:	20002bd0 	.word	0x20002bd0
 8001a78:	080134c8 	.word	0x080134c8
 8001a7c:	080134d4 	.word	0x080134d4
 8001a80:	080134e0 	.word	0x080134e0
 8001a84:	200002fc 	.word	0x200002fc
 8001a88:	20002bec 	.word	0x20002bec
 8001a8c:	200002c9 	.word	0x200002c9
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20002bf8 	.word	0x20002bf8
 8001a98:	2000038a 	.word	0x2000038a
 8001a9c:	20002bf4 	.word	0x20002bf4
 8001aa0:	200005d8 	.word	0x200005d8
 8001aa4:	20000338 	.word	0x20000338
 8001aa8:	20002bcc 	.word	0x20002bcc
 8001aac:	20002bbc 	.word	0x20002bbc
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000380 	.word	0x20000380
 8001ab8:	200002e4 	.word	0x200002e4
 8001abc:	20000300 	.word	0x20000300
 8001ac0:	200002f0 	.word	0x200002f0
 8001ac4:	080134ec 	.word	0x080134ec
 8001ac8:	080134f8 	.word	0x080134f8

08001acc <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <getEncoder+0xb0>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <getEncoder+0xb4>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <getEncoder+0xb8>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <getEncoder+0xbc>)
 8001aec:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <getEncoder+0xc0>)
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <getEncoder+0xc4>)
 8001afc:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <getEncoder+0xbc>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <getEncoder+0xc4>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	0fda      	lsrs	r2, r3, #31
 8001b10:	4413      	add	r3, r2
 8001b12:	105b      	asrs	r3, r3, #1
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <getEncoder+0xc8>)
 8001b18:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <getEncoder+0xbc>)
 8001b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <getEncoder+0xcc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <getEncoder+0xcc>)
 8001b2a:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <getEncoder+0xc4>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <getEncoder+0xd0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <getEncoder+0xd0>)
 8001b3c:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <getEncoder+0xc8>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <getEncoder+0xd4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <getEncoder+0xd4>)
 8001b4e:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <getEncoder+0xc8>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <getEncoder+0xd8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <getEncoder+0xd8>)
 8001b60:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <getEncoder+0xb8>)
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <getEncoder+0xc0>)
 8001b6a:	88bb      	ldrh	r3, [r7, #4]
 8001b6c:	8013      	strh	r3, [r2, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	40000400 	.word	0x40000400
 8001b84:	200002e8 	.word	0x200002e8
 8001b88:	200002ec 	.word	0x200002ec
 8001b8c:	200002ea 	.word	0x200002ea
 8001b90:	200002ee 	.word	0x200002ee
 8001b94:	200002f0 	.word	0x200002f0
 8001b98:	200002f4 	.word	0x200002f4
 8001b9c:	200002f8 	.word	0x200002f8
 8001ba0:	200002fc 	.word	0x200002fc
 8001ba4:	20000300 	.word	0x20000300

08001ba8 <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bfb8      	it	lt
 8001bba:	425b      	neglt	r3, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bde:	4802      	ldr	r0, [pc, #8]	; (8001be8 <SELECT+0x14>)
 8001be0:	f005 fc10 	bl	8007404 <HAL_GPIO_WritePin>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40020400 	.word	0x40020400

08001bec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf6:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DESELECT+0x14>)
 8001bf8:	f005 fc04 	bl	8007404 <HAL_GPIO_WritePin>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40020400 	.word	0x40020400

08001c04 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8001c0e:	bf00      	nop
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <SPI_TxByte+0x30>)
 8001c12:	f007 fcc0 	bl	8009596 <HAL_SPI_GetState>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d1f9      	bne.n	8001c10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8001c1c:	1df9      	adds	r1, r7, #7
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	2201      	movs	r2, #1
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <SPI_TxByte+0x30>)
 8001c26:	f007 f9d8 	bl	8008fda <HAL_SPI_Transmit>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000538 	.word	0x20000538

08001c38 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001c3e:	23ff      	movs	r3, #255	; 0xff
 8001c40:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8001c46:	bf00      	nop
 8001c48:	4809      	ldr	r0, [pc, #36]	; (8001c70 <SPI_RxByte+0x38>)
 8001c4a:	f007 fca4 	bl	8009596 <HAL_SPI_GetState>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1f9      	bne.n	8001c48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8001c54:	1dba      	adds	r2, r7, #6
 8001c56:	1df9      	adds	r1, r7, #7
 8001c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <SPI_RxByte+0x38>)
 8001c62:	f007 faf6 	bl	8009252 <HAL_SPI_TransmitReceive>
  
  return data;
 8001c66:	79bb      	ldrb	r3, [r7, #6]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000538 	.word	0x20000538

08001c74 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001c7c:	f7ff ffdc 	bl	8001c38 <SPI_RxByte>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	701a      	strb	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <SD_ReadyWait+0x34>)
 8001c98:	2232      	movs	r2, #50	; 0x32
 8001c9a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001c9c:	f7ff ffcc 	bl	8001c38 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001ca0:	f7ff ffca 	bl	8001c38 <SPI_RxByte>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d004      	beq.n	8001cb8 <SD_ReadyWait+0x28>
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SD_ReadyWait+0x34>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f3      	bne.n	8001ca0 <SD_ReadyWait+0x10>
  
  return res;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20002be3 	.word	0x20002be3

08001cc8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001cce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001cd2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001cd4:	f7ff ff8a 	bl	8001bec <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e005      	b.n	8001cea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001cde:	20ff      	movs	r0, #255	; 0xff
 8001ce0:	f7ff ff90 	bl	8001c04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	ddf6      	ble.n	8001cde <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001cf0:	f7ff ff70 	bl	8001bd4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001cf4:	2340      	movs	r3, #64	; 0x40
 8001cf6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001d08:	2395      	movs	r3, #149	; 0x95
 8001d0a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e009      	b.n	8001d26 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001d12:	1d3a      	adds	r2, r7, #4
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff72 	bl	8001c04 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	ddf2      	ble.n	8001d12 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001d2c:	e002      	b.n	8001d34 <SD_PowerOn+0x6c>
  {
    Count--;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001d34:	f7ff ff80 	bl	8001c38 <SPI_RxByte>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d002      	beq.n	8001d44 <SD_PowerOn+0x7c>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f4      	bne.n	8001d2e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001d44:	f7ff ff52 	bl	8001bec <DESELECT>
  SPI_TxByte(0XFF);
 8001d48:	20ff      	movs	r0, #255	; 0xff
 8001d4a:	f7ff ff5b 	bl	8001c04 <SPI_TxByte>
  
  PowerFlag = 1;
 8001d4e:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <SD_PowerOn+0x94>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000305 	.word	0x20000305

08001d60 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <SD_PowerOff+0x14>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	20000305 	.word	0x20000305

08001d78 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <SD_CheckPower+0x14>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000305 	.word	0x20000305

08001d90 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <SD_RxDataBlock+0x68>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001da0:	f7ff ff4a 	bl	8001c38 <SPI_RxByte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2bff      	cmp	r3, #255	; 0xff
 8001dac:	d104      	bne.n	8001db8 <SD_RxDataBlock+0x28>
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <SD_RxDataBlock+0x68>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f3      	bne.n	8001da0 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2bfe      	cmp	r3, #254	; 0xfe
 8001dbc:	d001      	beq.n	8001dc2 <SD_RxDataBlock+0x32>
    return FALSE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e016      	b.n	8001df0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff53 	bl	8001c74 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff4d 	bl	8001c74 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	3b02      	subs	r3, #2
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ed      	bne.n	8001dc2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001de6:	f7ff ff27 	bl	8001c38 <SPI_RxByte>
  SPI_RxByte();
 8001dea:	f7ff ff25 	bl	8001c38 <SPI_RxByte>
  
  return TRUE;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20002be2 	.word	0x20002be2

08001dfc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001e0c:	f7ff ff40 	bl	8001c90 <SD_ReadyWait>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d001      	beq.n	8001e1a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e040      	b.n	8001e9c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fef1 	bl	8001c04 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2bfd      	cmp	r3, #253	; 0xfd
 8001e26:	d031      	beq.n	8001e8c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fee5 	bl	8001c04 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fede 	bl	8001c04 <SPI_TxByte>
    } while (--wc);
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	73bb      	strb	r3, [r7, #14]
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1eb      	bne.n	8001e2c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001e54:	f7ff fef0 	bl	8001c38 <SPI_RxByte>
    SPI_RxByte();
 8001e58:	f7ff feee 	bl	8001c38 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001e5c:	e00b      	b.n	8001e76 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001e5e:	f7ff feeb 	bl	8001c38 <SPI_RxByte>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d006      	beq.n	8001e7e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	3301      	adds	r3, #1
 8001e74:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d9f0      	bls.n	8001e5e <SD_TxDataBlock+0x62>
 8001e7c:	e000      	b.n	8001e80 <SD_TxDataBlock+0x84>
        break;
 8001e7e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001e80:	bf00      	nop
 8001e82:	f7ff fed9 	bl	8001c38 <SPI_RxByte>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0fa      	beq.n	8001e82 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d101      	bne.n	8001e9a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001eb0:	f7ff feee 	bl	8001c90 <SD_ReadyWait>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2bff      	cmp	r3, #255	; 0xff
 8001eb8:	d001      	beq.n	8001ebe <SD_SendCmd+0x1a>
    return 0xFF;
 8001eba:	23ff      	movs	r3, #255	; 0xff
 8001ebc:	e040      	b.n	8001f40 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe9f 	bl	8001c04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	0e1b      	lsrs	r3, r3, #24
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fe99 	bl	8001c04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe93 	bl	8001c04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe8d 	bl	8001c04 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fe88 	bl	8001c04 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d101      	bne.n	8001f02 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001efe:	2395      	movs	r3, #149	; 0x95
 8001f00:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b48      	cmp	r3, #72	; 0x48
 8001f06:	d101      	bne.n	8001f0c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001f08:	2387      	movs	r3, #135	; 0x87
 8001f0a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fe78 	bl	8001c04 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b4c      	cmp	r3, #76	; 0x4c
 8001f18:	d101      	bne.n	8001f1e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001f1a:	f7ff fe8d 	bl	8001c38 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001f1e:	230a      	movs	r3, #10
 8001f20:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001f22:	f7ff fe89 	bl	8001c38 <SPI_RxByte>
 8001f26:	4603      	mov	r3, r0
 8001f28:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001f2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da05      	bge.n	8001f3e <SD_SendCmd+0x9a>
 8001f32:	7bbb      	ldrb	r3, [r7, #14]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	73bb      	strb	r3, [r7, #14]
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f1      	bne.n	8001f22 <SD_SendCmd+0x7e>

  return res;
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d5      	b.n	8002108 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <SD_disk_initialize+0x1c8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <SD_disk_initialize+0x2a>
    return Stat;        
 8001f6a:	4b69      	ldr	r3, [pc, #420]	; (8002110 <SD_disk_initialize+0x1c8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e0ca      	b.n	8002108 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001f72:	f7ff fea9 	bl	8001cc8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001f76:	f7ff fe2d 	bl	8001bd4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2040      	movs	r0, #64	; 0x40
 8001f82:	f7ff ff8f 	bl	8001ea4 <SD_SendCmd>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 80a5 	bne.w	80020d8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <SD_disk_initialize+0x1cc>)
 8001f90:	2264      	movs	r2, #100	; 0x64
 8001f92:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001f98:	2048      	movs	r0, #72	; 0x48
 8001f9a:	f7ff ff83 	bl	8001ea4 <SD_SendCmd>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d158      	bne.n	8002056 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e00c      	b.n	8001fc4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001faa:	7bfc      	ldrb	r4, [r7, #15]
 8001fac:	f7ff fe44 	bl	8001c38 <SPI_RxByte>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f104 0310 	add.w	r3, r4, #16
 8001fb8:	443b      	add	r3, r7
 8001fba:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d9ef      	bls.n	8001faa <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001fca:	7abb      	ldrb	r3, [r7, #10]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	f040 8083 	bne.w	80020d8 <SD_disk_initialize+0x190>
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
 8001fd4:	2baa      	cmp	r3, #170	; 0xaa
 8001fd6:	d17f      	bne.n	80020d8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2077      	movs	r0, #119	; 0x77
 8001fdc:	f7ff ff62 	bl	8001ea4 <SD_SendCmd>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d807      	bhi.n	8001ff6 <SD_disk_initialize+0xae>
 8001fe6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fea:	2069      	movs	r0, #105	; 0x69
 8001fec:	f7ff ff5a 	bl	8001ea4 <SD_SendCmd>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <SD_disk_initialize+0x1cc>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1eb      	bne.n	8001fd8 <SD_disk_initialize+0x90>
 8002000:	e000      	b.n	8002004 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002002:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <SD_disk_initialize+0x1cc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d064      	beq.n	80020d8 <SD_disk_initialize+0x190>
 800200e:	2100      	movs	r1, #0
 8002010:	207a      	movs	r0, #122	; 0x7a
 8002012:	f7ff ff47 	bl	8001ea4 <SD_SendCmd>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d15d      	bne.n	80020d8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e00c      	b.n	800203c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002022:	7bfc      	ldrb	r4, [r7, #15]
 8002024:	f7ff fe08 	bl	8001c38 <SPI_RxByte>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	f104 0310 	add.w	r3, r4, #16
 8002030:	443b      	add	r3, r7
 8002032:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	3301      	adds	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d9ef      	bls.n	8002022 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002042:	7a3b      	ldrb	r3, [r7, #8]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SD_disk_initialize+0x108>
 800204c:	2306      	movs	r3, #6
 800204e:	e000      	b.n	8002052 <SD_disk_initialize+0x10a>
 8002050:	2302      	movs	r3, #2
 8002052:	73bb      	strb	r3, [r7, #14]
 8002054:	e040      	b.n	80020d8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002056:	2100      	movs	r1, #0
 8002058:	2077      	movs	r0, #119	; 0x77
 800205a:	f7ff ff23 	bl	8001ea4 <SD_SendCmd>
 800205e:	4603      	mov	r3, r0
 8002060:	2b01      	cmp	r3, #1
 8002062:	d808      	bhi.n	8002076 <SD_disk_initialize+0x12e>
 8002064:	2100      	movs	r1, #0
 8002066:	2069      	movs	r0, #105	; 0x69
 8002068:	f7ff ff1c 	bl	8001ea4 <SD_SendCmd>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	d801      	bhi.n	8002076 <SD_disk_initialize+0x12e>
 8002072:	2302      	movs	r3, #2
 8002074:	e000      	b.n	8002078 <SD_disk_initialize+0x130>
 8002076:	2301      	movs	r3, #1
 8002078:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d10e      	bne.n	800209e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002080:	2100      	movs	r1, #0
 8002082:	2077      	movs	r0, #119	; 0x77
 8002084:	f7ff ff0e 	bl	8001ea4 <SD_SendCmd>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d80e      	bhi.n	80020ac <SD_disk_initialize+0x164>
 800208e:	2100      	movs	r1, #0
 8002090:	2069      	movs	r0, #105	; 0x69
 8002092:	f7ff ff07 	bl	8001ea4 <SD_SendCmd>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800209c:	e00d      	b.n	80020ba <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800209e:	2100      	movs	r1, #0
 80020a0:	2041      	movs	r0, #65	; 0x41
 80020a2:	f7ff feff 	bl	8001ea4 <SD_SendCmd>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <SD_disk_initialize+0x1cc>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e1      	bne.n	800207a <SD_disk_initialize+0x132>
 80020b6:	e000      	b.n	80020ba <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80020b8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <SD_disk_initialize+0x1cc>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <SD_disk_initialize+0x18c>
 80020c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c8:	2050      	movs	r0, #80	; 0x50
 80020ca:	f7ff feeb 	bl	8001ea4 <SD_SendCmd>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <SD_disk_initialize+0x1d0>)
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80020de:	f7ff fd85 	bl	8001bec <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80020e2:	f7ff fda9 	bl	8001c38 <SPI_RxByte>
  
  if (type) 
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <SD_disk_initialize+0x1c8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SD_disk_initialize+0x1c8>)
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e001      	b.n	8002102 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80020fe:	f7ff fe2f 	bl	8001d60 <SD_PowerOff>
  }
  
  return Stat;
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <SD_disk_initialize+0x1c8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	2000001a 	.word	0x2000001a
 8002114:	20002be2 	.word	0x20002be2
 8002118:	20000304 	.word	0x20000304

0800211c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <SD_disk_status+0x14>
    return STA_NOINIT; 
 800212c:	2301      	movs	r3, #1
 800212e:	e002      	b.n	8002136 <SD_disk_status+0x1a>
  
  return Stat;
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SD_disk_status+0x28>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2db      	uxtb	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000001a 	.word	0x2000001a

08002148 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <SD_disk_read+0x1c>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <SD_disk_read+0x20>
    return RES_PARERR;
 8002164:	2304      	movs	r3, #4
 8002166:	e051      	b.n	800220c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <SD_disk_read+0xcc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002176:	2303      	movs	r3, #3
 8002178:	e048      	b.n	800220c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <SD_disk_read+0xd0>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	025b      	lsls	r3, r3, #9
 800218a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800218c:	f7ff fd22 	bl	8001bd4 <SELECT>
  
  if (count == 1) 
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d111      	bne.n	80021ba <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	2051      	movs	r0, #81	; 0x51
 800219a:	f7ff fe83 	bl	8001ea4 <SD_SendCmd>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d129      	bne.n	80021f8 <SD_disk_read+0xb0>
 80021a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f7ff fdf1 	bl	8001d90 <SD_RxDataBlock>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d021      	beq.n	80021f8 <SD_disk_read+0xb0>
      count = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	e01e      	b.n	80021f8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	2052      	movs	r0, #82	; 0x52
 80021be:	f7ff fe71 	bl	8001ea4 <SD_SendCmd>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d117      	bne.n	80021f8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80021c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021cc:	68b8      	ldr	r0, [r7, #8]
 80021ce:	f7ff fddf 	bl	8001d90 <SD_RxDataBlock>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021de:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ed      	bne.n	80021c8 <SD_disk_read+0x80>
 80021ec:	e000      	b.n	80021f0 <SD_disk_read+0xa8>
          break;
 80021ee:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80021f0:	2100      	movs	r1, #0
 80021f2:	204c      	movs	r0, #76	; 0x4c
 80021f4:	f7ff fe56 	bl	8001ea4 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80021f8:	f7ff fcf8 	bl	8001bec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80021fc:	f7ff fd1c 	bl	8001c38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000001a 	.word	0x2000001a
 8002218:	20000304 	.word	0x20000304

0800221c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <SD_disk_write+0x1c>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <SD_disk_write+0x20>
    return RES_PARERR;
 8002238:	2304      	movs	r3, #4
 800223a:	e06b      	b.n	8002314 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <SD_disk_write+0x100>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800224a:	2303      	movs	r3, #3
 800224c:	e062      	b.n	8002314 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <SD_disk_write+0x100>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SD_disk_write+0x44>
    return RES_WRPRT;
 800225c:	2302      	movs	r3, #2
 800225e:	e059      	b.n	8002314 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <SD_disk_write+0x104>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002272:	f7ff fcaf 	bl	8001bd4 <SELECT>
  
  if (count == 1) 
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d110      	bne.n	800229e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	2058      	movs	r0, #88	; 0x58
 8002280:	f7ff fe10 	bl	8001ea4 <SD_SendCmd>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13a      	bne.n	8002300 <SD_disk_write+0xe4>
 800228a:	21fe      	movs	r1, #254	; 0xfe
 800228c:	68b8      	ldr	r0, [r7, #8]
 800228e:	f7ff fdb5 	bl	8001dfc <SD_TxDataBlock>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d033      	beq.n	8002300 <SD_disk_write+0xe4>
      count = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	e030      	b.n	8002300 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <SD_disk_write+0x104>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80022aa:	2100      	movs	r1, #0
 80022ac:	2077      	movs	r0, #119	; 0x77
 80022ae:	f7ff fdf9 	bl	8001ea4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	2057      	movs	r0, #87	; 0x57
 80022b6:	f7ff fdf5 	bl	8001ea4 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	2059      	movs	r0, #89	; 0x59
 80022be:	f7ff fdf1 	bl	8001ea4 <SD_SendCmd>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11b      	bne.n	8002300 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80022c8:	21fc      	movs	r1, #252	; 0xfc
 80022ca:	68b8      	ldr	r0, [r7, #8]
 80022cc:	f7ff fd96 	bl	8001dfc <SD_TxDataBlock>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022dc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ee      	bne.n	80022c8 <SD_disk_write+0xac>
 80022ea:	e000      	b.n	80022ee <SD_disk_write+0xd2>
          break;
 80022ec:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80022ee:	21fd      	movs	r1, #253	; 0xfd
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fd83 	bl	8001dfc <SD_TxDataBlock>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <SD_disk_write+0xe4>
      {        
        count = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002300:	f7ff fc74 	bl	8001bec <DESELECT>
  SPI_RxByte();
 8002304:	f7ff fc98 	bl	8001c38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000001a 	.word	0x2000001a
 8002320:	20000304 	.word	0x20000304

08002324 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	603a      	str	r2, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	460b      	mov	r3, r1
 8002332:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800233e:	2304      	movs	r3, #4
 8002340:	e11b      	b.n	800257a <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d129      	bne.n	80023a2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d017      	beq.n	8002386 <SD_disk_ioctl+0x62>
 8002356:	2b02      	cmp	r3, #2
 8002358:	dc1f      	bgt.n	800239a <SD_disk_ioctl+0x76>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <SD_disk_ioctl+0x40>
 800235e:	2b01      	cmp	r3, #1
 8002360:	d00b      	beq.n	800237a <SD_disk_ioctl+0x56>
 8002362:	e01a      	b.n	800239a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002364:	f7ff fd08 	bl	8001d78 <SD_CheckPower>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800236e:	f7ff fcf7 	bl	8001d60 <SD_PowerOff>
      res = RES_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002378:	e0fd      	b.n	8002576 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800237a:	f7ff fca5 	bl	8001cc8 <SD_PowerOn>
      res = RES_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002384:	e0f7      	b.n	8002576 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	1c5c      	adds	r4, r3, #1
 800238a:	f7ff fcf5 	bl	8001d78 <SD_CheckPower>
 800238e:	4603      	mov	r3, r0
 8002390:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002398:	e0ed      	b.n	8002576 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800239a:	2304      	movs	r3, #4
 800239c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023a0:	e0e9      	b.n	8002576 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <SD_disk_ioctl+0x260>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0e2      	b.n	800257a <SD_disk_ioctl+0x256>
    
    SELECT();
 80023b4:	f7ff fc0e 	bl	8001bd4 <SELECT>
    
    switch (ctrl) 
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	2b0d      	cmp	r3, #13
 80023bc:	f200 80cc 	bhi.w	8002558 <SD_disk_ioctl+0x234>
 80023c0:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <SD_disk_ioctl+0xa4>)
 80023c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c6:	bf00      	nop
 80023c8:	080024c3 	.word	0x080024c3
 80023cc:	08002401 	.word	0x08002401
 80023d0:	080024b3 	.word	0x080024b3
 80023d4:	08002559 	.word	0x08002559
 80023d8:	08002559 	.word	0x08002559
 80023dc:	08002559 	.word	0x08002559
 80023e0:	08002559 	.word	0x08002559
 80023e4:	08002559 	.word	0x08002559
 80023e8:	08002559 	.word	0x08002559
 80023ec:	08002559 	.word	0x08002559
 80023f0:	08002559 	.word	0x08002559
 80023f4:	080024d5 	.word	0x080024d5
 80023f8:	080024f9 	.word	0x080024f9
 80023fc:	0800251d 	.word	0x0800251d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002400:	2100      	movs	r1, #0
 8002402:	2049      	movs	r0, #73	; 0x49
 8002404:	f7ff fd4e 	bl	8001ea4 <SD_SendCmd>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 80a8 	bne.w	8002560 <SD_disk_ioctl+0x23c>
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2110      	movs	r1, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fcba 	bl	8001d90 <SD_RxDataBlock>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 809e 	beq.w	8002560 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002424:	7b3b      	ldrb	r3, [r7, #12]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10e      	bne.n	800244c <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800242e:	7d7b      	ldrb	r3, [r7, #21]
 8002430:	b29a      	uxth	r2, r3
 8002432:	7d3b      	ldrb	r3, [r7, #20]
 8002434:	b29b      	uxth	r3, r3
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	4413      	add	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	029a      	lsls	r2, r3, #10
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e02e      	b.n	80024aa <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800244c:	7c7b      	ldrb	r3, [r7, #17]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	b2da      	uxtb	r2, r3
 8002454:	7dbb      	ldrb	r3, [r7, #22]
 8002456:	09db      	lsrs	r3, r3, #7
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4413      	add	r3, r2
 800245c:	b2da      	uxtb	r2, r3
 800245e:	7d7b      	ldrb	r3, [r7, #21]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f003 0306 	and.w	r3, r3, #6
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	b2db      	uxtb	r3, r3
 800246e:	3302      	adds	r3, #2
 8002470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002474:	7d3b      	ldrb	r3, [r7, #20]
 8002476:	099b      	lsrs	r3, r3, #6
 8002478:	b2db      	uxtb	r3, r3
 800247a:	b29a      	uxth	r2, r3
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b29b      	uxth	r3, r3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	7cbb      	ldrb	r3, [r7, #18]
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	b29b      	uxth	r3, r3
 800248e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002492:	b29b      	uxth	r3, r3
 8002494:	4413      	add	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800249c:	8bfa      	ldrh	r2, [r7, #30]
 800249e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a2:	3b09      	subs	r3, #9
 80024a4:	409a      	lsls	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80024b0:	e056      	b.n	8002560 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024c0:	e055      	b.n	800256e <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80024c2:	f7ff fbe5 	bl	8001c90 <SD_ReadyWait>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2bff      	cmp	r3, #255	; 0xff
 80024ca:	d14b      	bne.n	8002564 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024d2:	e047      	b.n	8002564 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024d4:	2100      	movs	r1, #0
 80024d6:	2049      	movs	r0, #73	; 0x49
 80024d8:	f7ff fce4 	bl	8001ea4 <SD_SendCmd>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d142      	bne.n	8002568 <SD_disk_ioctl+0x244>
 80024e2:	2110      	movs	r1, #16
 80024e4:	6a38      	ldr	r0, [r7, #32]
 80024e6:	f7ff fc53 	bl	8001d90 <SD_RxDataBlock>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03b      	beq.n	8002568 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024f6:	e037      	b.n	8002568 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024f8:	2100      	movs	r1, #0
 80024fa:	204a      	movs	r0, #74	; 0x4a
 80024fc:	f7ff fcd2 	bl	8001ea4 <SD_SendCmd>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d132      	bne.n	800256c <SD_disk_ioctl+0x248>
 8002506:	2110      	movs	r1, #16
 8002508:	6a38      	ldr	r0, [r7, #32]
 800250a:	f7ff fc41 	bl	8001d90 <SD_RxDataBlock>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02b      	beq.n	800256c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800251a:	e027      	b.n	800256c <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800251c:	2100      	movs	r1, #0
 800251e:	207a      	movs	r0, #122	; 0x7a
 8002520:	f7ff fcc0 	bl	8001ea4 <SD_SendCmd>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002530:	e00b      	b.n	800254a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002532:	6a3c      	ldr	r4, [r7, #32]
 8002534:	1c63      	adds	r3, r4, #1
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	f7ff fb7e 	bl	8001c38 <SPI_RxByte>
 800253c:	4603      	mov	r3, r0
 800253e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002544:	3301      	adds	r3, #1
 8002546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800254a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800254e:	2b03      	cmp	r3, #3
 8002550:	d9ef      	bls.n	8002532 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002558:	2304      	movs	r3, #4
 800255a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800255e:	e006      	b.n	800256e <SD_disk_ioctl+0x24a>
      break;
 8002560:	bf00      	nop
 8002562:	e004      	b.n	800256e <SD_disk_ioctl+0x24a>
      break;
 8002564:	bf00      	nop
 8002566:	e002      	b.n	800256e <SD_disk_ioctl+0x24a>
      break;
 8002568:	bf00      	nop
 800256a:	e000      	b.n	800256e <SD_disk_ioctl+0x24a>
      break;
 800256c:	bf00      	nop
    }
    
    DESELECT();
 800256e:	f7ff fb3d 	bl	8001bec <DESELECT>
    SPI_RxByte();
 8002572:	f7ff fb61 	bl	8001c38 <SPI_RxByte>
  }
  
  return res;
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800257a:	4618      	mov	r0, r3
 800257c:	372c      	adds	r7, #44	; 0x2c
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	2000001a 	.word	0x2000001a

08002588 <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <ledOut+0x22>
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a2:	4817      	ldr	r0, [pc, #92]	; (8002600 <ledOut+0x78>)
 80025a4:	f004 ff2e 	bl	8007404 <HAL_GPIO_WritePin>
 80025a8:	e005      	b.n	80025b6 <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <ledOut+0x78>)
 80025b2:	f004 ff27 	bl	8007404 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <ledOut+0x44>
 80025c0:	2200      	movs	r2, #0
 80025c2:	2110      	movs	r1, #16
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <ledOut+0x7c>)
 80025c6:	f004 ff1d 	bl	8007404 <HAL_GPIO_WritePin>
 80025ca:	e004      	b.n	80025d6 <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2110      	movs	r1, #16
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <ledOut+0x7c>)
 80025d2:	f004 ff17 	bl	8007404 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <ledOut+0x64>
 80025e0:	2200      	movs	r2, #0
 80025e2:	2120      	movs	r1, #32
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <ledOut+0x7c>)
 80025e6:	f004 ff0d 	bl	8007404 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80025ea:	e004      	b.n	80025f6 <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2120      	movs	r1, #32
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <ledOut+0x7c>)
 80025f2:	f004 ff07 	bl	8007404 <HAL_GPIO_WritePin>
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400

08002608 <cmpareLSensorsList>:
// モジュール名 cmpareLSensorsList
// 処理概要  	構造体のvalueを比較する qsort関数に渡す比較用の関数（昇順）
// 引数     	n1 n2
// 戻り値    	1:n1>n2 0:n1<n2
/////////////////////////////////////////////////////////////////////
int cmpareLSensorsList(const void *n1, const void *n2) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    if (((lSensors *)n1)->value > ((lSensors *)n2)->value) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	885a      	ldrh	r2, [r3, #2]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	429a      	cmp	r2, r3
 800261c:	d901      	bls.n	8002622 <cmpareLSensorsList+0x1a>
        return 1;
 800261e:	2301      	movs	r3, #1
 8002620:	e009      	b.n	8002636 <cmpareLSensorsList+0x2e>
    } else if (((lSensors *)n1)->value < ((lSensors *)n2)->value) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	885a      	ldrh	r2, [r3, #2]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	885b      	ldrh	r3, [r3, #2]
 800262a:	429a      	cmp	r2, r3
 800262c:	d202      	bcs.n	8002634 <cmpareLSensorsList+0x2c>
        return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e000      	b.n	8002636 <cmpareLSensorsList+0x2e>
    }
    return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for ( i=0;i<NUM_SENSORS;i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	e036      	b.n	80026be <getLineSensor+0x7a>
		lSensorInt[i] += analogVal[i];
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <getLineSensor+0x90>)
 8002654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	491f      	ldr	r1, [pc, #124]	; (80026d8 <getLineSensor+0x94>)
 800265c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002660:	4619      	mov	r1, r3
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	440a      	add	r2, r1
 8002666:	491b      	ldr	r1, [pc, #108]	; (80026d4 <getLineSensor+0x90>)
 8002668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		cntls++;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <getLineSensor+0x98>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <getLineSensor+0x98>)
 8002676:	801a      	strh	r2, [r3, #0]

		if (cntls > 16) {
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <getLineSensor+0x98>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d91b      	bls.n	80026b8 <getLineSensor+0x74>
			lSensor[i] = lSensorInt[i]>>4;		// 平均値算出
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <getLineSensor+0x90>)
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	091a      	lsrs	r2, r3, #4
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	b291      	uxth	r1, r2
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <getLineSensor+0x9c>)
 8002690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensorsList[i].value = lSensor[i];	// 構造体に格納
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4911      	ldr	r1, [pc, #68]	; (80026e0 <getLineSensor+0x9c>)
 800269a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800269e:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <getLineSensor+0xa0>)
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	460a      	mov	r2, r1
 80026a6:	805a      	strh	r2, [r3, #2]
			lSensorInt[i] = 0;					// 積算値リセット
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <getLineSensor+0x90>)
 80026ac:	2100      	movs	r1, #0
 80026ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			cntls = 0;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <getLineSensor+0x98>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	3301      	adds	r3, #1
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b0b      	cmp	r3, #11
 80026c2:	d9c5      	bls.n	8002650 <getLineSensor+0xc>
		}
	}
		
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000308 	.word	0x20000308
 80026d8:	200002cc 	.word	0x200002cc
 80026dc:	20000388 	.word	0x20000388
 80026e0:	20000338 	.word	0x20000338
 80026e4:	20000350 	.word	0x20000350

080026e8 <getAngleSensor>:
// モジュール名 getAngleSensor
// 処理概要  	ラインセンサのAD値からステア角を算出する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getAngleSensor(void) {
 80026e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ec:	b08c      	sub	sp, #48	; 0x30
 80026ee:	af00      	add	r7, sp, #0
	uint16_t index, sen1, sen2;
	double nsen1, nsen2, phi, dthita;

	// 昇順ソート
	qsort(lSensorsList, NUM_SENSORS, sizeof(lSensors), cmpareLSensorsList);
 80026f0:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <getAngleSensor+0x248>)
 80026f2:	2204      	movs	r2, #4
 80026f4:	210c      	movs	r1, #12
 80026f6:	488f      	ldr	r0, [pc, #572]	; (8002934 <getAngleSensor+0x24c>)
 80026f8:	f00c fdc6 	bl	800f288 <qsort>
	index = lSensorsList[0].index;
 80026fc:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <getAngleSensor+0x24c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if (index !=0 && index != NUM_SENSORS -1 ) {
 8002702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80f1 	beq.w	80028ec <getAngleSensor+0x204>
 800270a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800270c:	2b0b      	cmp	r3, #11
 800270e:	f000 80ed 	beq.w	80028ec <getAngleSensor+0x204>
		// 白線に一番近いセンサの両隣のセンサ値を取得
		sen1 = lSensor[index-1];
 8002712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002714:	3b01      	subs	r3, #1
 8002716:	4a88      	ldr	r2, [pc, #544]	; (8002938 <getAngleSensor+0x250>)
 8002718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800271c:	843b      	strh	r3, [r7, #32]
		sen2 = lSensor[index+1];
 800271e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002720:	3301      	adds	r3, #1
 8002722:	4a85      	ldr	r2, [pc, #532]	; (8002938 <getAngleSensor+0x250>)
 8002724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002728:	83fb      	strh	r3, [r7, #30]
		// 正規化
		nsen1 = (double)sen1 / (sen1 + sen2);
 800272a:	8c3b      	ldrh	r3, [r7, #32]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff09 	bl	8000544 <__aeabi_ui2d>
 8002732:	4680      	mov	r8, r0
 8002734:	4689      	mov	r9, r1
 8002736:	8c3a      	ldrh	r2, [r7, #32]
 8002738:	8bfb      	ldrh	r3, [r7, #30]
 800273a:	4413      	add	r3, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd ff11 	bl	8000564 <__aeabi_i2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4640      	mov	r0, r8
 8002748:	4649      	mov	r1, r9
 800274a:	f7fe f89f 	bl	800088c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	e9c7 2304 	strd	r2, r3, [r7, #16]
		nsen2 = (double)sen2 / (sen1 + sen2);
 8002756:	8bfb      	ldrh	r3, [r7, #30]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fef3 	bl	8000544 <__aeabi_ui2d>
 800275e:	4680      	mov	r8, r0
 8002760:	4689      	mov	r9, r1
 8002762:	8c3a      	ldrh	r2, [r7, #32]
 8002764:	8bfb      	ldrh	r3, [r7, #30]
 8002766:	4413      	add	r3, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fefb 	bl	8000564 <__aeabi_i2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4640      	mov	r0, r8
 8002774:	4649      	mov	r1, r9
 8002776:	f7fe f889 	bl	800088c <__aeabi_ddiv>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (index >= NUM_SENSORS/2) phi = atan( (nsen1 - nsen2)/1 );		// 偏角φ計算
 8002782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002784:	2b05      	cmp	r3, #5
 8002786:	d912      	bls.n	80027ae <getAngleSensor+0xc6>
 8002788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002790:	f7fd fd9a 	bl	80002c8 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	ec43 2b17 	vmov	d7, r2, r3
 800279c:	eeb0 0a47 	vmov.f32	s0, s14
 80027a0:	eef0 0a67 	vmov.f32	s1, s15
 80027a4:	f010 fcd8 	bl	8013158 <atan>
 80027a8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80027ac:	e011      	b.n	80027d2 <getAngleSensor+0xea>
		else 						phi = atan( (nsen2 - nsen1)/1 );		// 偏角φ計算
 80027ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b6:	f7fd fd87 	bl	80002c8 <__aeabi_dsub>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	ec43 2b17 	vmov	d7, r2, r3
 80027c2:	eeb0 0a47 	vmov.f32	s0, s14
 80027c6:	eef0 0a67 	vmov.f32	s1, s15
 80027ca:	f010 fcc5 	bl	8013158 <atan>
 80027ce:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		dthita = (phi*THITA_SENSOR* (M_PI/180.0)/2) / (M_PI/4);	// 微小角度dθ計算
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b59      	ldr	r3, [pc, #356]	; (800293c <getAngleSensor+0x254>)
 80027d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027dc:	f7fd ff2c 	bl	8000638 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	a34b      	add	r3, pc, #300	; (adr r3, 8002918 <getAngleSensor+0x230>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd ff23 	bl	8000638 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002802:	f7fe f843 	bl	800088c <__aeabi_ddiv>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	a344      	add	r3, pc, #272	; (adr r3, 8002920 <getAngleSensor+0x238>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fe f83a 	bl	800088c <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	e9c7 2300 	strd	r2, r3, [r7]

		// センサ角度と微小角度を足す
		if (index >= NUM_SENSORS/2) angleSensor = ( (index-5.5)*THITA_SENSOR * (M_PI/180.0)) + dthita;
 8002820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002822:	2b05      	cmp	r3, #5
 8002824:	d928      	bls.n	8002878 <getAngleSensor+0x190>
 8002826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe9b 	bl	8000564 <__aeabi_i2d>
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <getAngleSensor+0x258>)
 8002834:	f7fd fd48 	bl	80002c8 <__aeabi_dsub>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <getAngleSensor+0x254>)
 8002846:	f7fd fef7 	bl	8000638 <__aeabi_dmul>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	a331      	add	r3, pc, #196	; (adr r3, 8002918 <getAngleSensor+0x230>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fd feee 	bl	8000638 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002868:	f7fd fd30 	bl	80002cc <__adddf3>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4934      	ldr	r1, [pc, #208]	; (8002944 <getAngleSensor+0x25c>)
 8002872:	e9c1 2300 	strd	r2, r3, [r1]
 8002876:	e02c      	b.n	80028d2 <getAngleSensor+0x1ea>
		else 						angleSensor = -( ( (5.5-index)*THITA_SENSOR * (M_PI/180.0)) + dthita );
 8002878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe72 	bl	8000564 <__aeabi_i2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	492d      	ldr	r1, [pc, #180]	; (8002940 <getAngleSensor+0x258>)
 800288a:	f7fd fd1d 	bl	80002c8 <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <getAngleSensor+0x254>)
 800289c:	f7fd fecc 	bl	8000638 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	a31b      	add	r3, pc, #108	; (adr r3, 8002918 <getAngleSensor+0x230>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fec3 	bl	8000638 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028be:	f7fd fd05 	bl	80002cc <__adddf3>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4614      	mov	r4, r2
 80028c8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <getAngleSensor+0x25c>)
 80028ce:	e9c3 4500 	strd	r4, r5, [r3]
		angleSensor = angleSensor*(180.0/M_PI);		// 弧度法に変換
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <getAngleSensor+0x25c>)
 80028d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028d8:	a313      	add	r3, pc, #76	; (adr r3, 8002928 <getAngleSensor+0x240>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fd feab 	bl	8000638 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4917      	ldr	r1, [pc, #92]	; (8002944 <getAngleSensor+0x25c>)
 80028e8:	e9c1 2300 	strd	r2, r3, [r1]
		
	}

	// インデックスを初期化
	for (int i = 0; i < NUM_SENSORS; i ++) lSensorsList[i].index = i;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	e008      	b.n	8002904 <getAngleSensor+0x21c>
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	b2d9      	uxtb	r1, r3
 80028f6:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <getAngleSensor+0x24c>)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	3301      	adds	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	2b0b      	cmp	r3, #11
 8002908:	ddf3      	ble.n	80028f2 <getAngleSensor+0x20a>
	
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	; 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002916:	bf00      	nop
 8002918:	a2529d39 	.word	0xa2529d39
 800291c:	3f91df46 	.word	0x3f91df46
 8002920:	54442d18 	.word	0x54442d18
 8002924:	3fe921fb 	.word	0x3fe921fb
 8002928:	1a63c1f8 	.word	0x1a63c1f8
 800292c:	404ca5dc 	.word	0x404ca5dc
 8002930:	08002609 	.word	0x08002609
 8002934:	20000350 	.word	0x20000350
 8002938:	20000338 	.word	0x20000338
 800293c:	40260000 	.word	0x40260000
 8002940:	40160000 	.word	0x40160000
 8002944:	20000380 	.word	0x20000380

08002948 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
	int32_t iP, iD, iI, iRet;
	int32_t Dev, Dif, kp, ki, kd;
	
	//サーボモータ用PWM値計算
	if (angleSensor > paramAngle[INDEX_ANGLE_CURVE]) {
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <motorControlTrace+0x1c0>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fe06 	bl	8000564 <__aeabi_i2d>
 8002958:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <motorControlTrace+0x1c4>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fe f8dd 	bl	8000b1c <__aeabi_dcmplt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <motorControlTrace+0x42>
		kp = kp1Curve_buff;
 8002968:	4b69      	ldr	r3, [pc, #420]	; (8002b10 <motorControlTrace+0x1c8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 800296e:	4b69      	ldr	r3, [pc, #420]	; (8002b14 <motorControlTrace+0x1cc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <motorControlTrace+0x1d0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	617b      	str	r3, [r7, #20]
		Dev = lSensor[5] - lSensor[8];
 800297a:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <motorControlTrace+0x1d4>)
 800297c:	895b      	ldrh	r3, [r3, #10]
 800297e:	461a      	mov	r2, r3
 8002980:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <motorControlTrace+0x1d4>)
 8002982:	8a1b      	ldrh	r3, [r3, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	e02e      	b.n	80029e8 <motorControlTrace+0xa0>
	} else if (angleSensor < -paramAngle[INDEX_ANGLE_CURVE]) {
 800298a:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <motorControlTrace+0x1c0>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	425b      	negs	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fde7 	bl	8000564 <__aeabi_i2d>
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <motorControlTrace+0x1c4>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fe f8dc 	bl	8000b58 <__aeabi_dcmpgt>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <motorControlTrace+0x80>
		kp = kp1Curve_buff;
 80029a6:	4b5a      	ldr	r3, [pc, #360]	; (8002b10 <motorControlTrace+0x1c8>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <motorControlTrace+0x1cc>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <motorControlTrace+0x1d0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	617b      	str	r3, [r7, #20]
		Dev = lSensor[3] - lSensor[6];
 80029b8:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <motorControlTrace+0x1d4>)
 80029ba:	88db      	ldrh	r3, [r3, #6]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <motorControlTrace+0x1d4>)
 80029c0:	899b      	ldrh	r3, [r3, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	e00f      	b.n	80029e8 <motorControlTrace+0xa0>
	} else {
		kp = kp1_buff;
 80029c8:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <motorControlTrace+0x1d8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	61fb      	str	r3, [r7, #28]
		ki = ki1_buff;
 80029ce:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <motorControlTrace+0x1dc>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	61bb      	str	r3, [r7, #24]
		kd = kd1_buff;
 80029d4:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <motorControlTrace+0x1e0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
		Dev = lSensor[4] - lSensor[7];
 80029da:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <motorControlTrace+0x1d4>)
 80029dc:	891b      	ldrh	r3, [r3, #8]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b4e      	ldr	r3, [pc, #312]	; (8002b1c <motorControlTrace+0x1d4>)
 80029e2:	89db      	ldrh	r3, [r3, #14]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	623b      	str	r3, [r7, #32]
	// kp = kp1_buff;
	// ki = ki1_buff;
	// kd = kd1_buff;
	// Dev = lSensor[4] - lSensor[7];
	// I成分積算
	Int += (double)Dev * 0.001;
 80029e8:	6a38      	ldr	r0, [r7, #32]
 80029ea:	f7fd fdbb 	bl	8000564 <__aeabi_i2d>
 80029ee:	a340      	add	r3, pc, #256	; (adr r3, 8002af0 <motorControlTrace+0x1a8>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fe20 	bl	8000638 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fc61 	bl	80002cc <__adddf3>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4947      	ldr	r1, [pc, #284]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a10:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8002a14:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1a:	a337      	add	r3, pc, #220	; (adr r3, 8002af8 <motorControlTrace+0x1b0>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fe f89a 	bl	8000b58 <__aeabi_dcmpgt>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <motorControlTrace+0xf0>
 8002a2a:	4940      	ldr	r1, [pc, #256]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a2c:	a332      	add	r3, pc, #200	; (adr r3, 8002af8 <motorControlTrace+0x1b0>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	e9c1 2300 	strd	r2, r3, [r1]
 8002a36:	e010      	b.n	8002a5a <motorControlTrace+0x112>
	else if ( Int < -10000 ) Int = -10000;
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3e:	a330      	add	r3, pc, #192	; (adr r3, 8002b00 <motorControlTrace+0x1b8>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fe f86a 	bl	8000b1c <__aeabi_dcmplt>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <motorControlTrace+0x112>
 8002a4e:	4937      	ldr	r1, [pc, #220]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a50:	a32b      	add	r3, pc, #172	; (adr r3, 8002b00 <motorControlTrace+0x1b8>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <motorControlTrace+0x1e8>)
 8002a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

	iP = (int32_t)kp1_buff * Dev;	// 比例
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <motorControlTrace+0x1d8>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	60fb      	str	r3, [r7, #12]
	iI = (double)ki1_buff * Int;	// 積分
 8002a76:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <motorControlTrace+0x1dc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd62 	bl	8000544 <__aeabi_ui2d>
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <motorControlTrace+0x1e4>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fd fdd7 	bl	8000638 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f881 	bl	8000b98 <__aeabi_d2iz>
 8002a96:	4603      	mov	r3, r0
 8002a98:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd1_buff * Dif;	// 微分
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <motorControlTrace+0x1e0>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4413      	add	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	119b      	asrs	r3, r3, #6
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac0:	dd02      	ble.n	8002ac8 <motorControlTrace+0x180>
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002ace:	da01      	bge.n	8002ad4 <motorControlTrace+0x18c>
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <motorControlTrace+0x1ec>)
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
	
	tracePwm = iRet;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <motorControlTrace+0x1f0>)
 8002ada:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <motorControlTrace+0x1e8>)
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	bf00      	nop
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	f3af 8000 	nop.w
 8002af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002af4:	3f50624d 	.word	0x3f50624d
 8002af8:	00000000 	.word	0x00000000
 8002afc:	40c38800 	.word	0x40c38800
 8002b00:	00000000 	.word	0x00000000
 8002b04:	c0c38800 	.word	0xc0c38800
 8002b08:	20000010 	.word	0x20000010
 8002b0c:	20000380 	.word	0x20000380
 8002b10:	2000001d 	.word	0x2000001d
 8002b14:	20000399 	.word	0x20000399
 8002b18:	2000001e 	.word	0x2000001e
 8002b1c:	20000338 	.word	0x20000338
 8002b20:	2000001b 	.word	0x2000001b
 8002b24:	20000398 	.word	0x20000398
 8002b28:	2000001c 	.word	0x2000001c
 8002b2c:	20000390 	.word	0x20000390
 8002b30:	2000038c 	.word	0x2000038c
 8002b34:	fffffc18 	.word	0xfffffc18
 8002b38:	2000038a 	.word	0x2000038a

08002b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b40:	f003 f818 	bl	8005b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b44:	f000 f824 	bl	8002b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b48:	f000 fcb2 	bl	80034b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b4c:	f000 fc90 	bl	8003470 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b50:	f000 f890 	bl	8002c74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b54:	f000 f9da 	bl	8002f0c <MX_I2C1_Init>
  MX_SPI2_Init();
 8002b58:	f000 fa06 	bl	8002f68 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002b5c:	f000 fa70 	bl	8003040 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b60:	f000 fb26 	bl	80031b0 <MX_TIM2_Init>
  MX_UART5_Init();
 8002b64:	f000 fc5a 	bl	800341c <MX_UART5_Init>
  MX_TIM3_Init();
 8002b68:	f000 fb7a 	bl	8003260 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b6c:	f000 fbcc 	bl	8003308 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002b70:	f000 fa30 	bl	8002fd4 <MX_SPI3_Init>
  MX_TIM6_Init();
 8002b74:	f000 fc1c 	bl	80033b0 <MX_TIM6_Init>
  MX_ADC2_Init();
 8002b78:	f000 f968 	bl	8002e4c <MX_ADC2_Init>
  MX_FATFS_Init();
 8002b7c:	f008 f8fc 	bl	800ad78 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8002b80:	f7fe fdd2 	bl	8001728 <systemInit>
  initMicroSD();
 8002b84:	f000 fd6c 	bl	8003660 <initMicroSD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8002b88:	f7fe fe44 	bl	8001814 <systemLoop>
 8002b8c:	e7fc      	b.n	8002b88 <main+0x4c>
	...

08002b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b094      	sub	sp, #80	; 0x50
 8002b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	2234      	movs	r2, #52	; 0x34
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00b fc2a 	bl	800e3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <SystemClock_Config+0xdc>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <SystemClock_Config+0xdc>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc4:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <SystemClock_Config+0xdc>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <SystemClock_Config+0xe0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <SystemClock_Config+0xe0>)
 8002bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <SystemClock_Config+0xe0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002c00:	2306      	movs	r3, #6
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c04:	23b4      	movs	r3, #180	; 0xb4
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c10:	2302      	movs	r3, #2
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f005 feb7 	bl	800898c <HAL_RCC_OscConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c24:	f000 fdc4 	bl	80037b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c28:	f005 fb9c 	bl	8008364 <HAL_PWREx_EnableOverDrive>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c32:	f000 fdbd 	bl	80037b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c36:	230f      	movs	r3, #15
 8002c38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	2105      	movs	r1, #5
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 fbd5 	bl	8008404 <HAL_RCC_ClockConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002c60:	f000 fda6 	bl	80037b0 <Error_Handler>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3750      	adds	r7, #80	; 0x50
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000

08002c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c86:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002c88:	4a6f      	ldr	r2, [pc, #444]	; (8002e48 <MX_ADC1_Init+0x1d4>)
 8002c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c8c:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c94:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cb8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002cc4:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cca:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cd8:	485a      	ldr	r0, [pc, #360]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cda:	f002 ffe1 	bl	8005ca0 <HAL_ADC_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002ce4:	f000 fd64 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002ce8:	230b      	movs	r3, #11
 8002cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cec:	2301      	movs	r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4852      	ldr	r0, [pc, #328]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002cfa:	f003 faa5 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002d04:	f000 fd54 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002d08:	230c      	movs	r3, #12
 8002d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d10:	463b      	mov	r3, r7
 8002d12:	4619      	mov	r1, r3
 8002d14:	484b      	ldr	r0, [pc, #300]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002d16:	f003 fa97 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002d20:	f000 fd46 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d24:	230d      	movs	r3, #13
 8002d26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4844      	ldr	r0, [pc, #272]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002d32:	f003 fa89 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002d3c:	f000 fd38 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d44:	2304      	movs	r3, #4
 8002d46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	483d      	ldr	r0, [pc, #244]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002d4e:	f003 fa7b 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002d58:	f000 fd2a 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d60:	2305      	movs	r3, #5
 8002d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d64:	463b      	mov	r3, r7
 8002d66:	4619      	mov	r1, r3
 8002d68:	4836      	ldr	r0, [pc, #216]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002d6a:	f003 fa6d 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002d74:	f000 fd1c 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d80:	463b      	mov	r3, r7
 8002d82:	4619      	mov	r1, r3
 8002d84:	482f      	ldr	r0, [pc, #188]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002d86:	f003 fa5f 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002d90:	f000 fd0e 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d94:	2303      	movs	r3, #3
 8002d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002d98:	2307      	movs	r3, #7
 8002d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4828      	ldr	r0, [pc, #160]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002da2:	f003 fa51 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8002dac:	f000 fd00 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002db0:	2304      	movs	r3, #4
 8002db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002db4:	2308      	movs	r3, #8
 8002db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002db8:	463b      	mov	r3, r7
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4821      	ldr	r0, [pc, #132]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002dbe:	f003 fa43 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8002dc8:	f000 fcf2 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002dd0:	2309      	movs	r3, #9
 8002dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	481a      	ldr	r0, [pc, #104]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002dda:	f003 fa35 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8002de4:	f000 fce4 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002de8:	2306      	movs	r3, #6
 8002dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002dec:	230a      	movs	r3, #10
 8002dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df0:	463b      	mov	r3, r7
 8002df2:	4619      	mov	r1, r3
 8002df4:	4813      	ldr	r0, [pc, #76]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002df6:	f003 fa27 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002e00:	f000 fcd6 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e04:	2307      	movs	r3, #7
 8002e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002e08:	230b      	movs	r3, #11
 8002e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480c      	ldr	r0, [pc, #48]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002e12:	f003 fa19 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8002e1c:	f000 fcc8 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e20:	230e      	movs	r3, #14
 8002e22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002e24:	230c      	movs	r3, #12
 8002e26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e28:	463b      	mov	r3, r7
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_ADC1_Init+0x1d0>)
 8002e2e:	f003 fa0b 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8002e38:	f000 fcba 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	2000039c 	.word	0x2000039c
 8002e48:	40012000 	.word	0x40012000

08002e4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e52:	463b      	mov	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <MX_ADC2_Init+0xb8>)
 8002e62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <MX_ADC2_Init+0xbc>)
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002eac:	4814      	ldr	r0, [pc, #80]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002eae:	f002 fef7 	bl	8005ca0 <HAL_ADC_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002eb8:	f000 fc7a 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ebc:	230a      	movs	r3, #10
 8002ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002ece:	f003 f9bb 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002ed8:	f000 fc6a 	bl	80037b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002edc:	230f      	movs	r3, #15
 8002ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_ADC2_Init+0xb4>)
 8002eea:	f003 f9ad 	bl	8006248 <HAL_ADC_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002ef4:	f000 fc5c 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200003e4 	.word	0x200003e4
 8002f04:	40012100 	.word	0x40012100
 8002f08:	0f000001 	.word	0x0f000001

08002f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f12:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <MX_I2C1_Init+0x54>)
 8002f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <MX_I2C1_Init+0x58>)
 8002f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f48:	4804      	ldr	r0, [pc, #16]	; (8002f5c <MX_I2C1_Init+0x50>)
 8002f4a:	f004 fa75 	bl	8007438 <HAL_I2C_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f54:	f000 fc2c 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000048c 	.word	0x2000048c
 8002f60:	40005400 	.word	0x40005400
 8002f64:	00061a80 	.word	0x00061a80

08002f68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <MX_SPI2_Init+0x68>)
 8002f70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f88:	2202      	movs	r2, #2
 8002f8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002f9c:	2228      	movs	r2, #40	; 0x28
 8002f9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fb8:	4804      	ldr	r0, [pc, #16]	; (8002fcc <MX_SPI2_Init+0x64>)
 8002fba:	f005 ff85 	bl	8008ec8 <HAL_SPI_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002fc4:	f000 fbf4 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200004e0 	.word	0x200004e0
 8002fd0:	40003800 	.word	0x40003800

08002fd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <MX_SPI3_Init+0x64>)
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <MX_SPI3_Init+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <MX_SPI3_Init+0x64>)
 8002fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <MX_SPI3_Init+0x64>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_SPI3_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_SPI3_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_SPI3_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_SPI3_Init+0x64>)
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_SPI3_Init+0x64>)
 8003008:	2208      	movs	r2, #8
 800300a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <MX_SPI3_Init+0x64>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_SPI3_Init+0x64>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <MX_SPI3_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_SPI3_Init+0x64>)
 8003020:	220a      	movs	r2, #10
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <MX_SPI3_Init+0x64>)
 8003026:	f005 ff4f 	bl	8008ec8 <HAL_SPI_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003030:	f000 fbbe 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000538 	.word	0x20000538
 800303c:	40003c00 	.word	0x40003c00

08003040 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b092      	sub	sp, #72	; 0x48
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	615a      	str	r2, [r3, #20]
 8003062:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2220      	movs	r2, #32
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f00b f9c4 	bl	800e3f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003072:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <MX_TIM1_Init+0x16c>)
 8003074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8003076:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003078:	220b      	movs	r2, #11
 800307a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <MX_TIM1_Init+0x168>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8003082:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003084:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003088:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <MX_TIM1_Init+0x168>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003096:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800309c:	4842      	ldr	r0, [pc, #264]	; (80031a8 <MX_TIM1_Init+0x168>)
 800309e:	f006 fc13 	bl	80098c8 <HAL_TIM_PWM_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80030a8:	f000 fb82 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030b8:	4619      	mov	r1, r3
 80030ba:	483b      	ldr	r0, [pc, #236]	; (80031a8 <MX_TIM1_Init+0x168>)
 80030bc:	f007 fab8 	bl	800a630 <HAL_TIMEx_MasterConfigSynchronization>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80030c6:	f000 fb73 	bl	80037b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ca:	2360      	movs	r3, #96	; 0x60
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	2200      	movs	r2, #0
 80030ec:	4619      	mov	r1, r3
 80030ee:	482e      	ldr	r0, [pc, #184]	; (80031a8 <MX_TIM1_Init+0x168>)
 80030f0:	f006 ff3e 	bl	8009f70 <HAL_TIM_PWM_ConfigChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80030fa:	f000 fb59 	bl	80037b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003102:	2204      	movs	r2, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4828      	ldr	r0, [pc, #160]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003108:	f006 ff32 	bl	8009f70 <HAL_TIM_PWM_ConfigChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003112:	f000 fb4d 	bl	80037b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	2208      	movs	r2, #8
 800311c:	4619      	mov	r1, r3
 800311e:	4822      	ldr	r0, [pc, #136]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003120:	f006 ff26 	bl	8009f70 <HAL_TIM_PWM_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800312a:	f000 fb41 	bl	80037b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0208 	bic.w	r2, r2, #8
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800313e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003142:	220c      	movs	r2, #12
 8003144:	4619      	mov	r1, r3
 8003146:	4818      	ldr	r0, [pc, #96]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003148:	f006 ff12 	bl	8009f70 <HAL_TIM_PWM_ConfigChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003152:	f000 fb2d 	bl	80037b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <MX_TIM1_Init+0x168>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <MX_TIM1_Init+0x168>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003164:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800317a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4807      	ldr	r0, [pc, #28]	; (80031a8 <MX_TIM1_Init+0x168>)
 800318a:	f007 facd 	bl	800a728 <HAL_TIMEx_ConfigBreakDeadTime>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003194:	f000 fb0c 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <MX_TIM1_Init+0x168>)
 800319a:	f001 ff55 	bl	8005048 <HAL_TIM_MspPostInit>

}
 800319e:	bf00      	nop
 80031a0:	3748      	adds	r7, #72	; 0x48
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000590 	.word	0x20000590
 80031ac:	40010000 	.word	0x40010000

080031b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b6:	f107 0320 	add.w	r3, r7, #32
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	611a      	str	r2, [r3, #16]
 80031ce:	615a      	str	r2, [r3, #20]
 80031d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <MX_TIM2_Init+0xac>)
 80031d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <MX_TIM2_Init+0xac>)
 80031dc:	220b      	movs	r2, #11
 80031de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <MX_TIM2_Init+0xac>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 335;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <MX_TIM2_Init+0xac>)
 80031e8:	f240 124f 	movw	r2, #335	; 0x14f
 80031ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <MX_TIM2_Init+0xac>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <MX_TIM2_Init+0xac>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031fa:	4818      	ldr	r0, [pc, #96]	; (800325c <MX_TIM2_Init+0xac>)
 80031fc:	f006 fb64 	bl	80098c8 <HAL_TIM_PWM_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003206:	f000 fad3 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800320a:	2320      	movs	r3, #32
 800320c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003212:	f107 0320 	add.w	r3, r7, #32
 8003216:	4619      	mov	r1, r3
 8003218:	4810      	ldr	r0, [pc, #64]	; (800325c <MX_TIM2_Init+0xac>)
 800321a:	f007 fa09 	bl	800a630 <HAL_TIMEx_MasterConfigSynchronization>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003224:	f000 fac4 	bl	80037b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003228:	2360      	movs	r3, #96	; 0x60
 800322a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	4619      	mov	r1, r3
 800323e:	4807      	ldr	r0, [pc, #28]	; (800325c <MX_TIM2_Init+0xac>)
 8003240:	f006 fe96 	bl	8009f70 <HAL_TIM_PWM_ConfigChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800324a:	f000 fab1 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <MX_TIM2_Init+0xac>)
 8003250:	f001 fefa 	bl	8005048 <HAL_TIM_MspPostInit>

}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200005d8 	.word	0x200005d8

08003260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f00b f8c2 	bl	800e3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MX_TIM3_Init+0xa0>)
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <MX_TIM3_Init+0xa4>)
 8003280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_TIM3_Init+0xa0>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_TIM3_Init+0xa0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032a2:	2303      	movs	r3, #3
 80032a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80032b6:	2302      	movs	r3, #2
 80032b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ba:	2301      	movs	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4619      	mov	r1, r3
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <MX_TIM3_Init+0xa0>)
 80032ce:	f006 fc13 	bl	8009af8 <HAL_TIM_Encoder_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032d8:	f000 fa6a 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4805      	ldr	r0, [pc, #20]	; (8003300 <MX_TIM3_Init+0xa0>)
 80032ea:	f007 f9a1 	bl	800a630 <HAL_TIMEx_MasterConfigSynchronization>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80032f4:	f000 fa5c 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	3730      	adds	r7, #48	; 0x30
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000620 	.word	0x20000620
 8003304:	40000400 	.word	0x40000400

08003308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f00b f86e 	bl	800e3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003324:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <MX_TIM4_Init+0xa4>)
 8003328:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <MX_TIM4_Init+0xa0>)
 800332c:	2200      	movs	r2, #0
 800332e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800334a:	2303      	movs	r3, #3
 800334c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003352:	2301      	movs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003366:	2300      	movs	r3, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	4619      	mov	r1, r3
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003376:	f006 fbbf 	bl	8009af8 <HAL_TIM_Encoder_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003380:	f000 fa16 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_TIM4_Init+0xa0>)
 8003392:	f007 f94d 	bl	800a630 <HAL_TIMEx_MasterConfigSynchronization>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800339c:	f000 fa08 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033a0:	bf00      	nop
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000668 	.word	0x20000668
 80033ac:	40000800 	.word	0x40000800

080033b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b6:	463b      	mov	r3, r7
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <MX_TIM6_Init+0x64>)
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <MX_TIM6_Init+0x68>)
 80033c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <MX_TIM6_Init+0x64>)
 80033c6:	220b      	movs	r2, #11
 80033c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_TIM6_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <MX_TIM6_Init+0x64>)
 80033d2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80033d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <MX_TIM6_Init+0x64>)
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033de:	480d      	ldr	r0, [pc, #52]	; (8003414 <MX_TIM6_Init+0x64>)
 80033e0:	f006 f9b2 	bl	8009748 <HAL_TIM_Base_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80033ea:	f000 f9e1 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033f6:	463b      	mov	r3, r7
 80033f8:	4619      	mov	r1, r3
 80033fa:	4806      	ldr	r0, [pc, #24]	; (8003414 <MX_TIM6_Init+0x64>)
 80033fc:	f007 f918 	bl	800a630 <HAL_TIMEx_MasterConfigSynchronization>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003406:	f000 f9d3 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200006b0 	.word	0x200006b0
 8003418:	40001000 	.word	0x40001000

0800341c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <MX_UART5_Init+0x4c>)
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <MX_UART5_Init+0x50>)
 8003424:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <MX_UART5_Init+0x4c>)
 8003428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800342c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <MX_UART5_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <MX_UART5_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <MX_UART5_Init+0x4c>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <MX_UART5_Init+0x4c>)
 8003442:	220c      	movs	r2, #12
 8003444:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <MX_UART5_Init+0x4c>)
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <MX_UART5_Init+0x4c>)
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_UART5_Init+0x4c>)
 8003454:	f007 f9ce 	bl	800a7f4 <HAL_UART_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800345e:	f000 f9a7 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200006f8 	.word	0x200006f8
 800346c:	40005000 	.word	0x40005000

08003470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <MX_DMA_Init+0x3c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <MX_DMA_Init+0x3c>)
 8003480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <MX_DMA_Init+0x3c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	2038      	movs	r0, #56	; 0x38
 8003498:	f003 fa61 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800349c:	2038      	movs	r0, #56	; 0x38
 800349e:	f003 fa7a 	bl	8006996 <HAL_NVIC_EnableIRQ>

}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800

080034b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <MX_GPIO_Init+0x18c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a5b      	ldr	r2, [pc, #364]	; (800363c <MX_GPIO_Init+0x18c>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <MX_GPIO_Init+0x18c>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b55      	ldr	r3, [pc, #340]	; (800363c <MX_GPIO_Init+0x18c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a54      	ldr	r2, [pc, #336]	; (800363c <MX_GPIO_Init+0x18c>)
 80034ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b52      	ldr	r3, [pc, #328]	; (800363c <MX_GPIO_Init+0x18c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4b4e      	ldr	r3, [pc, #312]	; (800363c <MX_GPIO_Init+0x18c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a4d      	ldr	r2, [pc, #308]	; (800363c <MX_GPIO_Init+0x18c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <MX_GPIO_Init+0x18c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <MX_GPIO_Init+0x18c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a46      	ldr	r2, [pc, #280]	; (800363c <MX_GPIO_Init+0x18c>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b44      	ldr	r3, [pc, #272]	; (800363c <MX_GPIO_Init+0x18c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <MX_GPIO_Init+0x18c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a3f      	ldr	r2, [pc, #252]	; (800363c <MX_GPIO_Init+0x18c>)
 8003540:	f043 0308 	orr.w	r3, r3, #8
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b3d      	ldr	r3, [pc, #244]	; (800363c <MX_GPIO_Init+0x18c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 8003552:	2200      	movs	r2, #0
 8003554:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003558:	4839      	ldr	r0, [pc, #228]	; (8003640 <MX_GPIO_Init+0x190>)
 800355a:	f003 ff53 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800355e:	2201      	movs	r2, #1
 8003560:	f243 0130 	movw	r1, #12336	; 0x3030
 8003564:	4837      	ldr	r0, [pc, #220]	; (8003644 <MX_GPIO_Init+0x194>)
 8003566:	f003 ff4d 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800356a:	2201      	movs	r2, #1
 800356c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003570:	4835      	ldr	r0, [pc, #212]	; (8003648 <MX_GPIO_Init+0x198>)
 8003572:	f003 ff47 	bl	8007404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 8003576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	482d      	ldr	r0, [pc, #180]	; (8003640 <MX_GPIO_Init+0x190>)
 800358c:	f003 fd8e 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 8003590:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4825      	ldr	r0, [pc, #148]	; (8003640 <MX_GPIO_Init+0x190>)
 80035aa:	f003 fd7f 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80035ae:	2302      	movs	r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4820      	ldr	r0, [pc, #128]	; (8003644 <MX_GPIO_Init+0x194>)
 80035c2:	f003 fd73 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 80035c6:	2304      	movs	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	481a      	ldr	r0, [pc, #104]	; (8003644 <MX_GPIO_Init+0x194>)
 80035da:	f003 fd67 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 80035de:	f243 0330 	movw	r3, #12336	; 0x3030
 80035e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	4813      	ldr	r0, [pc, #76]	; (8003644 <MX_GPIO_Init+0x194>)
 80035f8:	f003 fd58 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 80035fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	480b      	ldr	r0, [pc, #44]	; (8003640 <MX_GPIO_Init+0x190>)
 8003612:	f003 fd4b 	bl	80070ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8003616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361c:	2301      	movs	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <MX_GPIO_Init+0x198>)
 8003630:	f003 fd3c 	bl	80070ac <HAL_GPIO_Init>

}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	40020800 	.word	0x40020800
 8003644:	40020400 	.word	0x40020400
 8003648:	40020000 	.word	0x40020000

0800364c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  getLineSensor();
 8003654:	f7fe fff6 	bl	8002644 <getLineSensor>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <initMicroSD>:

void initMicroSD(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  fresult = f_mount(&fs, "", 0);
 8003664:	2200      	movs	r2, #0
 8003666:	4941      	ldr	r1, [pc, #260]	; (800376c <initMicroSD+0x10c>)
 8003668:	4841      	ldr	r0, [pc, #260]	; (8003770 <initMicroSD+0x110>)
 800366a:	f009 fe3f 	bl	800d2ec <f_mount>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <initMicroSD+0x114>)
 8003674:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) printf ("error in mounting SD CARD...\r\n");
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <initMicroSD+0x114>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <initMicroSD+0x26>
 800367e:	483e      	ldr	r0, [pc, #248]	; (8003778 <initMicroSD+0x118>)
 8003680:	f00b fdc2 	bl	800f208 <puts>
 8003684:	e002      	b.n	800368c <initMicroSD+0x2c>
	else printf("SD CARD mounted successfully...\r\n");
 8003686:	483d      	ldr	r0, [pc, #244]	; (800377c <initMicroSD+0x11c>)
 8003688:	f00b fdbe 	bl	800f208 <puts>
	f_getfree("", &fre_clust, &pfs);
 800368c:	4a3c      	ldr	r2, [pc, #240]	; (8003780 <initMicroSD+0x120>)
 800368e:	493d      	ldr	r1, [pc, #244]	; (8003784 <initMicroSD+0x124>)
 8003690:	4836      	ldr	r0, [pc, #216]	; (800376c <initMicroSD+0x10c>)
 8003692:	f00a fbd8 	bl	800de46 <f_getfree>
	total = (uint32_t)((pfs -> n_fatent - 2) * pfs -> csize * 0.5);
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <initMicroSD+0x120>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	3b02      	subs	r3, #2
 800369e:	4a38      	ldr	r2, [pc, #224]	; (8003780 <initMicroSD+0x120>)
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	8952      	ldrh	r2, [r2, #10]
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff4b 	bl	8000544 <__aeabi_ui2d>
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <initMicroSD+0x128>)
 80036b4:	f7fc ffc0 	bl	8000638 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd fa92 	bl	8000be8 <__aeabi_d2uiz>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a31      	ldr	r2, [pc, #196]	; (800378c <initMicroSD+0x12c>)
 80036c8:	6013      	str	r3, [r2, #0]
	printf("SD_SIZE: \t%lu\r\n", total);
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <initMicroSD+0x12c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4619      	mov	r1, r3
 80036d0:	482f      	ldr	r0, [pc, #188]	; (8003790 <initMicroSD+0x130>)
 80036d2:	f00b fd13 	bl	800f0fc <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize*0.5);
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <initMicroSD+0x120>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	895b      	ldrh	r3, [r3, #10]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <initMicroSD+0x124>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc ff2c 	bl	8000544 <__aeabi_ui2d>
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <initMicroSD+0x128>)
 80036f2:	f7fc ffa1 	bl	8000638 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd fa73 	bl	8000be8 <__aeabi_d2uiz>
 8003702:	4603      	mov	r3, r0
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <initMicroSD+0x134>)
 8003706:	6013      	str	r3, [r2, #0]
	printf("SD free space: \t%lu\r\n", free_space);
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <initMicroSD+0x134>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	4822      	ldr	r0, [pc, #136]	; (8003798 <initMicroSD+0x138>)
 8003710:	f00b fcf4 	bl	800f0fc <iprintf>
	fresult = f_open(&fil, "test_file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003714:	2213      	movs	r2, #19
 8003716:	4921      	ldr	r1, [pc, #132]	; (800379c <initMicroSD+0x13c>)
 8003718:	4821      	ldr	r0, [pc, #132]	; (80037a0 <initMicroSD+0x140>)
 800371a:	f009 fe2d 	bl	800d378 <f_open>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <initMicroSD+0x114>)
 8003724:	701a      	strb	r2, [r3, #0]
	fresult = f_puts("TEST!!!\r\n", &fil);
 8003726:	491e      	ldr	r1, [pc, #120]	; (80037a0 <initMicroSD+0x140>)
 8003728:	481e      	ldr	r0, [pc, #120]	; (80037a4 <initMicroSD+0x144>)
 800372a:	f00a fcf5 	bl	800e118 <f_puts>
 800372e:	4603      	mov	r3, r0
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <initMicroSD+0x114>)
 8003734:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8003736:	481a      	ldr	r0, [pc, #104]	; (80037a0 <initMicroSD+0x140>)
 8003738:	f00a fb5b 	bl	800ddf2 <f_close>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <initMicroSD+0x114>)
 8003742:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, "file1.txt", FA_READ);
 8003744:	2201      	movs	r2, #1
 8003746:	4918      	ldr	r1, [pc, #96]	; (80037a8 <initMicroSD+0x148>)
 8003748:	4815      	ldr	r0, [pc, #84]	; (80037a0 <initMicroSD+0x140>)
 800374a:	f009 fe15 	bl	800d378 <f_open>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <initMicroSD+0x114>)
 8003754:	701a      	strb	r2, [r3, #0]
	f_gets(buffer, sizeof(buffer), &fil);
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <initMicroSD+0x140>)
 8003758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800375c:	4813      	ldr	r0, [pc, #76]	; (80037ac <initMicroSD+0x14c>)
 800375e:	f00a fc27 	bl	800dfb0 <f_gets>
	f_close(&fil);
 8003762:	480f      	ldr	r0, [pc, #60]	; (80037a0 <initMicroSD+0x140>)
 8003764:	f00a fb45 	bl	800ddf2 <f_close>
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}
 800376c:	08013500 	.word	0x08013500
 8003770:	2000073c 	.word	0x2000073c
 8003774:	200027a8 	.word	0x200027a8
 8003778:	08013504 	.word	0x08013504
 800377c:	08013524 	.word	0x08013524
 8003780:	20002bac 	.word	0x20002bac
 8003784:	20002bb0 	.word	0x20002bb0
 8003788:	3fe00000 	.word	0x3fe00000
 800378c:	20002bb4 	.word	0x20002bb4
 8003790:	08013548 	.word	0x08013548
 8003794:	20002bb8 	.word	0x20002bb8
 8003798:	08013558 	.word	0x08013558
 800379c:	08013570 	.word	0x08013570
 80037a0:	20001778 	.word	0x20001778
 80037a4:	08013580 	.word	0x08013580
 80037a8:	0801358c 	.word	0x0801358c
 80037ac:	200027ac 	.word	0x200027ac

080037b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b4:	b672      	cpsid	i
}
 80037b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <Error_Handler+0x8>
	...

080037bc <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 80037c2:	2301      	movs	r3, #1
 80037c4:	71bb      	strb	r3, [r7, #6]
 80037c6:	2301      	movs	r3, #1
 80037c8:	717b      	strb	r3, [r7, #5]
 80037ca:	2300      	movs	r3, #0
 80037cc:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 80037ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037d2:	480e      	ldr	r0, [pc, #56]	; (800380c <getMarkerSensor+0x50>)
 80037d4:	f003 fdfe 	bl	80073d4 <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 80037dc:	2102      	movs	r1, #2
 80037de:	480c      	ldr	r0, [pc, #48]	; (8003810 <getMarkerSensor+0x54>)
 80037e0:	f003 fdf8 	bl	80073d4 <HAL_GPIO_ReadPin>
 80037e4:	4603      	mov	r3, r0
 80037e6:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += RIGHTMARKER;
 80037e8:	79bb      	ldrb	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <getMarkerSensor+0x38>
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	3301      	adds	r3, #1
 80037f2:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += LEFTMARKER;
 80037f4:	797b      	ldrb	r3, [r7, #5]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <getMarkerSensor+0x44>
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	3302      	adds	r3, #2
 80037fe:	71fb      	strb	r3, [r7, #7]

	return ret;
 8003800:	79fb      	ldrb	r3, [r7, #7]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020800 	.word	0x40020800
 8003810:	40020400 	.word	0x40020400

08003814 <checkMarker>:
// モジュール名 checkMarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkMarker( void ) {
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	71fb      	strb	r3, [r7, #7]

	if (encTotalN - encCross >= encMM(40)) encCross = 0;
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <checkMarker+0xa8>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <checkMarker+0xac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1ad4      	subs	r4, r2, r3
 8003828:	2028      	movs	r0, #40	; 0x28
 800382a:	f7fe f9bd 	bl	8001ba8 <encMM>
 800382e:	4603      	mov	r3, r0
 8003830:	429c      	cmp	r4, r3
 8003832:	db02      	blt.n	800383a <checkMarker+0x26>
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <checkMarker+0xac>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

	if ( getMarkerSensor() != 0) {
 800383a:	f7ff ffbf 	bl	80037bc <getMarkerSensor>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d035      	beq.n	80038b0 <checkMarker+0x9c>
		if (encMarker == 0) {
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <checkMarker+0xb0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <checkMarker+0x4e>
			mark = getMarkerSensor();
 800384c:	f7ff ffb6 	bl	80037bc <getMarkerSensor>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <checkMarker+0xb4>)
 8003856:	601a      	str	r2, [r3, #0]
			encMarker = encTotalN;
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <checkMarker+0xa8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <checkMarker+0xb0>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e026      	b.n	80038b0 <checkMarker+0x9c>
		} else if (encTotalN - encMarker <= encth && encTotalN - encCross <= encMM(40)) {
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <checkMarker+0xa8>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <checkMarker+0xb0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <checkMarker+0xb8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	dc0a      	bgt.n	800388a <checkMarker+0x76>
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <checkMarker+0xa8>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <checkMarker+0xac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	1ad4      	subs	r4, r2, r3
 800387e:	2028      	movs	r0, #40	; 0x28
 8003880:	f7fe f992 	bl	8001ba8 <encMM>
 8003884:	4603      	mov	r3, r0
 8003886:	429c      	cmp	r4, r3
 8003888:	dd12      	ble.n	80038b0 <checkMarker+0x9c>
			// if (mark != getMarkerSensor()) {
			// 	ret = 0;
			// 	encMarker = 0;
			// 	encCross = encTotalN;
			// }
		} else if (encTotalN - encMarker >= encth) {
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <checkMarker+0xa8>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <checkMarker+0xb0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1ad2      	subs	r2, r2, r3
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <checkMarker+0xb8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	db09      	blt.n	80038b0 <checkMarker+0x9c>
			ret = getMarkerSensor();
 800389c:	f7ff ff8e 	bl	80037bc <getMarkerSensor>
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
			encMarker = 0;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <checkMarker+0xb0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
			mark = 0;
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <checkMarker+0xb4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
		}
	}

	return ret;
 80038b0:	79fb      	ldrb	r3, [r7, #7]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200002fc 	.word	0x200002fc
 80038c0:	20002bc8 	.word	0x20002bc8
 80038c4:	20002bc0 	.word	0x20002bc0
 80038c8:	20002bc4 	.word	0x20002bc4
 80038cc:	20000020 	.word	0x20000020

080038d0 <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	80fb      	strh	r3, [r7, #6]
 80038dc:	4613      	mov	r3, r2
 80038de:	80bb      	strh	r3, [r7, #4]

    if (abs(pwmL) < 10) {
 80038e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bfb8      	it	lt
 80038e8:	425b      	neglt	r3, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	d808      	bhi.n	8003902 <motorPwmOut+0x32>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <motorPwmOut+0xdc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 10);
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <motorPwmOut+0xdc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	220a      	movs	r2, #10
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003900:	e01e      	b.n	8003940 <motorPwmOut+0x70>
    } else if (pwmL > 0) {
 8003902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	dd09      	ble.n	800391e <motorPwmOut+0x4e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <motorPwmOut+0xdc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <motorPwmOut+0xdc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
 800391c:	e010      	b.n	8003940 <motorPwmOut+0x70>
    } else if (pwmL < 0){
 800391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	da0c      	bge.n	8003940 <motorPwmOut+0x70>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfb8      	it	lt
 800392e:	425b      	neglt	r3, r3
 8003930:	b29a      	uxth	r2, r3
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <motorPwmOut+0xdc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <motorPwmOut+0xdc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (abs(pwmR) < 10) {
 8003940:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	bfb8      	it	lt
 8003948:	425b      	neglt	r3, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b09      	cmp	r3, #9
 800394e:	d808      	bhi.n	8003962 <motorPwmOut+0x92>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 10);
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <motorPwmOut+0xdc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	220a      	movs	r2, #10
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <motorPwmOut+0xdc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
    } else if (pwmR < 0) {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
    }

}
 8003960:	e01e      	b.n	80039a0 <motorPwmOut+0xd0>
    } else if (pwmR > 0) {
 8003962:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	dd09      	ble.n	800397e <motorPwmOut+0xae>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwmR);
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <motorPwmOut+0xdc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <motorPwmOut+0xdc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800397c:	e010      	b.n	80039a0 <motorPwmOut+0xd0>
    } else if (pwmR < 0) {
 800397e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0c      	bge.n	80039a0 <motorPwmOut+0xd0>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <motorPwmOut+0xdc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
 800398e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfb8      	it	lt
 8003996:	425b      	neglt	r3, r3
 8003998:	b29a      	uxth	r2, r3
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <motorPwmOut+0xdc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000590 	.word	0x20000590

080039b0 <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	460a      	mov	r2, r1
 80039ba:	80fb      	strh	r3, [r7, #6]
 80039bc:	4613      	mov	r3, r2
 80039be:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 80039c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dd14      	ble.n	80039f2 <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 80039c8:	88ba      	ldrh	r2, [r7, #4]
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	425b      	neglt	r3, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 80039dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfb8      	it	lt
 80039e4:	425b      	neglt	r3, r3
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	88bb      	ldrh	r3, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	81bb      	strh	r3, [r7, #12]
 80039f0:	e013      	b.n	8003a1a <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 80039f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bfb8      	it	lt
 80039fa:	425b      	neglt	r3, r3
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8003a06:	88ba      	ldrh	r2, [r7, #4]
 8003a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	425b      	neglt	r3, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 8003a1a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003a1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff53 	bl	80038d0 <motorPwmOut>
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af02      	add	r7, sp, #8
	uint8_t cnt_led, sd_sw;
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	switch ( swValRotary ) {
 8003a3a:	4baa      	ldr	r3, [pc, #680]	; (8003ce4 <setup+0x2b0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	f200 86b2 	bhi.w	80047a8 <setup+0xd74>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <setup+0x18>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003bbd 	.word	0x08003bbd
 8003a58:	08003db3 	.word	0x08003db3
 8003a5c:	08003f2f 	.word	0x08003f2f
 8003a60:	080040bf 	.word	0x080040bf
 8003a64:	08004261 	.word	0x08004261
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8003a68:	2102      	movs	r1, #2
 8003a6a:	489f      	ldr	r0, [pc, #636]	; (8003ce8 <setup+0x2b4>)
 8003a6c:	f000 fefa 	bl	8004864 <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8003a70:	499e      	ldr	r1, [pc, #632]	; (8003cec <setup+0x2b8>)
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fd fc1e 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8003a78:	499d      	ldr	r1, [pc, #628]	; (8003cf0 <setup+0x2bc>)
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f7fd fc1a 	bl	80012b4 <lcdRowPrintf>
			break;
 8003a80:	f000 bea9 	b.w	80047d6 <setup+0xda2>
		//------------------------------------------------------------------
		// パラメータ調整(通常トレース)
		//------------------------------------------------------------------
		case 0x1:
			dataTuningLR( &pattern_parameter1, 1 );
 8003a84:	2101      	movs	r1, #1
 8003a86:	489b      	ldr	r0, [pc, #620]	; (8003cf4 <setup+0x2c0>)
 8003a88:	f000 ffa6 	bl	80049d8 <dataTuningLR>
			
			if ( pattern_parameter1 == 6 ) pattern_parameter1 = 1;
 8003a8c:	4b99      	ldr	r3, [pc, #612]	; (8003cf4 <setup+0x2c0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d103      	bne.n	8003a9c <setup+0x68>
 8003a94:	4b97      	ldr	r3, [pc, #604]	; (8003cf4 <setup+0x2c0>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e006      	b.n	8003aaa <setup+0x76>
			else if ( pattern_parameter1 == 0 ) pattern_parameter1 = 5;
 8003a9c:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <setup+0x2c0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <setup+0x76>
 8003aa4:	4b93      	ldr	r3, [pc, #588]	; (8003cf4 <setup+0x2c0>)
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_parameter1 ) {
 8003aaa:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <setup+0x2c0>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	f200 8685 	bhi.w	80047c0 <setup+0xd8c>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <setup+0x88>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ad1 	.word	0x08003ad1
 8003ac0:	08003b03 	.word	0x08003b03
 8003ac4:	08003b35 	.word	0x08003b35
 8003ac8:	08003b67 	.word	0x08003b67
 8003acc:	08003b99 	.word	0x08003b99
				case 1:
					// 通常走行速度
					lcdRowPrintf(UPROW, "STRAIGHT");
 8003ad0:	4989      	ldr	r1, [pc, #548]	; (8003cf8 <setup+0x2c4>)
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fd fbee 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STRAIGHT] / 10);
 8003ad8:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <setup+0x2c8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd31 	bl	8000544 <__aeabi_ui2d>
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	4b86      	ldr	r3, [pc, #536]	; (8003d00 <setup+0x2cc>)
 8003ae8:	f7fc fed0 	bl	800088c <__aeabi_ddiv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4984      	ldr	r1, [pc, #528]	; (8003d04 <setup+0x2d0>)
 8003af2:	2001      	movs	r0, #1
 8003af4:	f7fd fbde 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STRAIGHT], 1 );
 8003af8:	2101      	movs	r1, #1
 8003afa:	4880      	ldr	r0, [pc, #512]	; (8003cfc <setup+0x2c8>)
 8003afc:	f000 fee8 	bl	80048d0 <dataTuningUD>
					break;
 8003b00:	e05a      	b.n	8003bb8 <setup+0x184>
				case 2:
					// 停止速度
					lcdRowPrintf(UPROW, "CURVE   ");
 8003b02:	4981      	ldr	r1, [pc, #516]	; (8003d08 <setup+0x2d4>)
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fd fbd5 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVE] / 10);
 8003b0a:	4b7c      	ldr	r3, [pc, #496]	; (8003cfc <setup+0x2c8>)
 8003b0c:	78db      	ldrb	r3, [r3, #3]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fd18 	bl	8000544 <__aeabi_ui2d>
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <setup+0x2cc>)
 8003b1a:	f7fc feb7 	bl	800088c <__aeabi_ddiv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4978      	ldr	r1, [pc, #480]	; (8003d04 <setup+0x2d0>)
 8003b24:	2001      	movs	r0, #1
 8003b26:	f7fd fbc5 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVE], 1 );
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4877      	ldr	r0, [pc, #476]	; (8003d0c <setup+0x2d8>)
 8003b2e:	f000 fecf 	bl	80048d0 <dataTuningUD>
					break;
 8003b32:	e041      	b.n	8003bb8 <setup+0x184>
				case 3:
					// カーブブレーキ
					lcdRowPrintf(UPROW, "BRAKE   ");
 8003b34:	4976      	ldr	r1, [pc, #472]	; (8003d10 <setup+0x2dc>)
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fd fbbc 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVEBREAK] / 10);
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <setup+0x2c8>)
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fcff 	bl	8000544 <__aeabi_ui2d>
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <setup+0x2cc>)
 8003b4c:	f7fc fe9e 	bl	800088c <__aeabi_ddiv>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	496b      	ldr	r1, [pc, #428]	; (8003d04 <setup+0x2d0>)
 8003b56:	2001      	movs	r0, #1
 8003b58:	f7fd fbac 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVEBREAK], 1 );
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	486d      	ldr	r0, [pc, #436]	; (8003d14 <setup+0x2e0>)
 8003b60:	f000 feb6 	bl	80048d0 <dataTuningUD>
					break;
 8003b64:	e028      	b.n	8003bb8 <setup+0x184>
				case 4:
					// 停止速度
					lcdRowPrintf(UPROW, "STOP    ");
 8003b66:	496c      	ldr	r1, [pc, #432]	; (8003d18 <setup+0x2e4>)
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fd fba3 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STOP] / 10);
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <setup+0x2c8>)
 8003b70:	789b      	ldrb	r3, [r3, #2]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fce6 	bl	8000544 <__aeabi_ui2d>
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <setup+0x2cc>)
 8003b7e:	f7fc fe85 	bl	800088c <__aeabi_ddiv>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	495f      	ldr	r1, [pc, #380]	; (8003d04 <setup+0x2d0>)
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f7fd fb93 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STOP], 1 );
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4862      	ldr	r0, [pc, #392]	; (8003d1c <setup+0x2e8>)
 8003b92:	f000 fe9d 	bl	80048d0 <dataTuningUD>
					break;
 8003b96:	e00f      	b.n	8003bb8 <setup+0x184>
				case 5:
					lcdRowPrintf(UPROW, "ANGLECUR");
 8003b98:	4961      	ldr	r1, [pc, #388]	; (8003d20 <setup+0x2ec>)
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7fd fb8a 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "    %4d", paramAngle[INDEX_ANGLE_CURVE]);
 8003ba0:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <setup+0x2f0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4960      	ldr	r1, [pc, #384]	; (8003d28 <setup+0x2f4>)
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fd fb83 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramAngle[INDEX_ANGLE_CURVE], 1 );
 8003bae:	2101      	movs	r1, #1
 8003bb0:	485c      	ldr	r0, [pc, #368]	; (8003d24 <setup+0x2f0>)
 8003bb2:	f000 fe8d 	bl	80048d0 <dataTuningUD>
					break;
 8003bb6:	bf00      	nop
				
			}
			break;
 8003bb8:	f000 be02 	b.w	80047c0 <setup+0xd8c>
		//------------------------------------------------------------------
		// ゲイン調整(直線トレース)
		//------------------------------------------------------------------
		case 0x2:
			lcdRowPrintf(UPROW, "kp ki kd");
 8003bbc:	495b      	ldr	r1, [pc, #364]	; (8003d2c <setup+0x2f8>)
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7fd fb78 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	485a      	ldr	r0, [pc, #360]	; (8003d30 <setup+0x2fc>)
 8003bc8:	f000 fe4c 	bl	8004864 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8003bcc:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <setup+0x2fc>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10c      	bne.n	8003bee <setup+0x1ba>
				motorPwmOutSynth( tracePwm, 0 );
 8003bd4:	4b57      	ldr	r3, [pc, #348]	; (8003d34 <setup+0x300>)
 8003bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fee7 	bl	80039b0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <setup+0x304>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34
 8003bec:	e007      	b.n	8003bfe <setup+0x1ca>
			} else {
				motorPwmOutSynth( 0, 0 );
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff fedd 	bl	80039b0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003bf6:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <setup+0x304>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8003bfe:	2101      	movs	r1, #1
 8003c00:	484e      	ldr	r0, [pc, #312]	; (8003d3c <setup+0x308>)
 8003c02:	f000 fee9 	bl	80049d8 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <setup+0x308>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d103      	bne.n	8003c16 <setup+0x1e2>
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	; (8003d3c <setup+0x308>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e006      	b.n	8003c24 <setup+0x1f0>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <setup+0x308>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <setup+0x1f0>
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <setup+0x308>)
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <setup+0x308>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	f000 8097 	beq.w	8003d5c <setup+0x328>
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	f300 85c8 	bgt.w	80047c4 <setup+0xd90>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d003      	beq.n	8003c40 <setup+0x20c>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d02a      	beq.n	8003c92 <setup+0x25e>
					}
					
					dataTuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 8003c3c:	f000 bdc2 	b.w	80047c4 <setup+0xd90>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <setup+0x30c>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c48:	d302      	bcc.n	8003c50 <setup+0x21c>
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <setup+0x30c>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <setup+0x30c>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2bf9      	cmp	r3, #249	; 0xf9
 8003c56:	d809      	bhi.n	8003c6c <setup+0x238>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 8003c58:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <setup+0x310>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <setup+0x314>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	493a      	ldr	r1, [pc, #232]	; (8003d4c <setup+0x318>)
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7fd fb25 	bl	80012b4 <lcdRowPrintf>
 8003c6a:	e00d      	b.n	8003c88 <setup+0x254>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8003c6c:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <setup+0x31c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <setup+0x310>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <setup+0x314>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4934      	ldr	r1, [pc, #208]	; (8003d54 <setup+0x320>)
 8003c82:	2001      	movs	r0, #1
 8003c84:	f7fd fb16 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1_buff, 1 );
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4831      	ldr	r0, [pc, #196]	; (8003d50 <setup+0x31c>)
 8003c8c:	f000 fe20 	bl	80048d0 <dataTuningUD>
					break;
 8003c90:	e08d      	b.n	8003dae <setup+0x37a>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <setup+0x30c>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c9a:	d302      	bcc.n	8003ca2 <setup+0x26e>
 8003c9c:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <setup+0x30c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003ca2:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <setup+0x30c>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	2bf9      	cmp	r3, #249	; 0xf9
 8003ca8:	d809      	bhi.n	8003cbe <setup+0x28a>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <setup+0x31c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <setup+0x314>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4928      	ldr	r1, [pc, #160]	; (8003d58 <setup+0x324>)
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f7fd fafc 	bl	80012b4 <lcdRowPrintf>
 8003cbc:	e00d      	b.n	8003cda <setup+0x2a6>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <setup+0x31c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <setup+0x310>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <setup+0x314>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4920      	ldr	r1, [pc, #128]	; (8003d54 <setup+0x320>)
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f7fd faed 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1_buff, 1 );
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4819      	ldr	r0, [pc, #100]	; (8003d44 <setup+0x310>)
 8003cde:	f000 fdf7 	bl	80048d0 <dataTuningUD>
					break;
 8003ce2:	e064      	b.n	8003dae <setup+0x37a>
 8003ce4:	20002be5 	.word	0x20002be5
 8003ce8:	20002bd0 	.word	0x20002bd0
 8003cec:	08013598 	.word	0x08013598
 8003cf0:	080135a4 	.word	0x080135a4
 8003cf4:	20000028 	.word	0x20000028
 8003cf8:	080135b0 	.word	0x080135b0
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	40240000 	.word	0x40240000
 8003d04:	080135bc 	.word	0x080135bc
 8003d08:	080135c8 	.word	0x080135c8
 8003d0c:	20000007 	.word	0x20000007
 8003d10:	080135d4 	.word	0x080135d4
 8003d14:	20000005 	.word	0x20000005
 8003d18:	080135e0 	.word	0x080135e0
 8003d1c:	20000006 	.word	0x20000006
 8003d20:	080135ec 	.word	0x080135ec
 8003d24:	20000010 	.word	0x20000010
 8003d28:	080135f8 	.word	0x080135f8
 8003d2c:	08013600 	.word	0x08013600
 8003d30:	20002be0 	.word	0x20002be0
 8003d34:	2000038a 	.word	0x2000038a
 8003d38:	200005d8 	.word	0x200005d8
 8003d3c:	20000029 	.word	0x20000029
 8003d40:	20002bd2 	.word	0x20002bd2
 8003d44:	20000398 	.word	0x20000398
 8003d48:	2000001c 	.word	0x2000001c
 8003d4c:	0801360c 	.word	0x0801360c
 8003d50:	2000001b 	.word	0x2000001b
 8003d54:	08013618 	.word	0x08013618
 8003d58:	08013624 	.word	0x08013624
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003d5c:	4b9b      	ldr	r3, [pc, #620]	; (8003fcc <setup+0x598>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d64:	d302      	bcc.n	8003d6c <setup+0x338>
 8003d66:	4b99      	ldr	r3, [pc, #612]	; (8003fcc <setup+0x598>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003d6c:	4b97      	ldr	r3, [pc, #604]	; (8003fcc <setup+0x598>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	2bf9      	cmp	r3, #249	; 0xf9
 8003d72:	d809      	bhi.n	8003d88 <setup+0x354>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <setup+0x59c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b96      	ldr	r3, [pc, #600]	; (8003fd4 <setup+0x5a0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	4996      	ldr	r1, [pc, #600]	; (8003fd8 <setup+0x5a4>)
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fd fa97 	bl	80012b4 <lcdRowPrintf>
 8003d86:	e00d      	b.n	8003da4 <setup+0x370>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8003d88:	4b91      	ldr	r3, [pc, #580]	; (8003fd0 <setup+0x59c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b91      	ldr	r3, [pc, #580]	; (8003fd4 <setup+0x5a0>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <setup+0x5a8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4990      	ldr	r1, [pc, #576]	; (8003fe0 <setup+0x5ac>)
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7fd fa88 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1_buff, 1 );
 8003da4:	2101      	movs	r1, #1
 8003da6:	488d      	ldr	r0, [pc, #564]	; (8003fdc <setup+0x5a8>)
 8003da8:	f000 fd92 	bl	80048d0 <dataTuningUD>
					break;
 8003dac:	bf00      	nop
			break;
 8003dae:	f000 bd09 	b.w	80047c4 <setup+0xd90>
		//------------------------------------------------------------------
		// ゲイン調整(カーブトレース)
		//------------------------------------------------------------------
		case 0x3:
			lcdRowPrintf(UPROW, "kp ki kd");
 8003db2:	498c      	ldr	r1, [pc, #560]	; (8003fe4 <setup+0x5b0>)
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fd fa7d 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8003dba:	2102      	movs	r1, #2
 8003dbc:	488a      	ldr	r0, [pc, #552]	; (8003fe8 <setup+0x5b4>)
 8003dbe:	f000 fd51 	bl	8004864 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8003dc2:	4b89      	ldr	r3, [pc, #548]	; (8003fe8 <setup+0x5b4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10c      	bne.n	8003de4 <setup+0x3b0>
				motorPwmOutSynth( tracePwm, 0 );
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <setup+0x5b8>)
 8003dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fdec 	bl	80039b0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <setup+0x5bc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
 8003de2:	e007      	b.n	8003df4 <setup+0x3c0>
			} else {
				motorPwmOutSynth( 0, 0 );
 8003de4:	2100      	movs	r1, #0
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7ff fde2 	bl	80039b0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003dec:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <setup+0x5bc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8003df4:	2101      	movs	r1, #1
 8003df6:	487f      	ldr	r0, [pc, #508]	; (8003ff4 <setup+0x5c0>)
 8003df8:	f000 fdee 	bl	80049d8 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8003dfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <setup+0x5c0>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d103      	bne.n	8003e0c <setup+0x3d8>
 8003e04:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <setup+0x5c0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e006      	b.n	8003e1a <setup+0x3e6>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8003e0c:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <setup+0x5c0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <setup+0x3e6>
 8003e14:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <setup+0x5c0>)
 8003e16:	2203      	movs	r2, #3
 8003e18:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <setup+0x5c0>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d05a      	beq.n	8003ed8 <setup+0x4a4>
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	f300 84d0 	bgt.w	80047c8 <setup+0xd94>
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d003      	beq.n	8003e34 <setup+0x400>
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d02a      	beq.n	8003e86 <setup+0x452>
					}
					
					dataTuningUD ( &kd1Curve_buff, 1 );
					break;
			}
			break;
 8003e30:	f000 bcca 	b.w	80047c8 <setup+0xd94>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003e34:	4b65      	ldr	r3, [pc, #404]	; (8003fcc <setup+0x598>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e3c:	d302      	bcc.n	8003e44 <setup+0x410>
 8003e3e:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <setup+0x598>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <setup+0x598>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	2bf9      	cmp	r3, #249	; 0xf9
 8003e4a:	d809      	bhi.n	8003e60 <setup+0x42c>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1Curve_buff, kd1Curve_buff);
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <setup+0x5c4>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <setup+0x5c8>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	496a      	ldr	r1, [pc, #424]	; (8004000 <setup+0x5cc>)
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7fd fa2b 	bl	80012b4 <lcdRowPrintf>
 8003e5e:	e00d      	b.n	8003e7c <setup+0x448>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <setup+0x5d0>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <setup+0x5c4>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <setup+0x5c8>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	460b      	mov	r3, r1
 8003e74:	495a      	ldr	r1, [pc, #360]	; (8003fe0 <setup+0x5ac>)
 8003e76:	2001      	movs	r0, #1
 8003e78:	f7fd fa1c 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1Curve_buff, 1 );
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4861      	ldr	r0, [pc, #388]	; (8004004 <setup+0x5d0>)
 8003e80:	f000 fd26 	bl	80048d0 <dataTuningUD>
					break;
 8003e84:	e051      	b.n	8003f2a <setup+0x4f6>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003e86:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <setup+0x598>)
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e8e:	d302      	bcc.n	8003e96 <setup+0x462>
 8003e90:	4b4e      	ldr	r3, [pc, #312]	; (8003fcc <setup+0x598>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003e96:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <setup+0x598>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2bf9      	cmp	r3, #249	; 0xf9
 8003e9c:	d809      	bhi.n	8003eb2 <setup+0x47e>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1Curve_buff, kd1Curve_buff);
 8003e9e:	4b59      	ldr	r3, [pc, #356]	; (8004004 <setup+0x5d0>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b55      	ldr	r3, [pc, #340]	; (8003ffc <setup+0x5c8>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4957      	ldr	r1, [pc, #348]	; (8004008 <setup+0x5d4>)
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7fd fa02 	bl	80012b4 <lcdRowPrintf>
 8003eb0:	e00d      	b.n	8003ece <setup+0x49a>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <setup+0x5d0>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	; (8003ff8 <setup+0x5c4>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <setup+0x5c8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4946      	ldr	r1, [pc, #280]	; (8003fe0 <setup+0x5ac>)
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7fd f9f3 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1Curve_buff, 1 );
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4849      	ldr	r0, [pc, #292]	; (8003ff8 <setup+0x5c4>)
 8003ed2:	f000 fcfd 	bl	80048d0 <dataTuningUD>
					break;
 8003ed6:	e028      	b.n	8003f2a <setup+0x4f6>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <setup+0x598>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ee0:	d302      	bcc.n	8003ee8 <setup+0x4b4>
 8003ee2:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <setup+0x598>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003ee8:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <setup+0x598>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	2bf9      	cmp	r3, #249	; 0xf9
 8003eee:	d809      	bhi.n	8003f04 <setup+0x4d0>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1Curve_buff, ki1Curve_buff);
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <setup+0x5d0>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <setup+0x5c4>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <setup+0x5a4>)
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7fd f9d9 	bl	80012b4 <lcdRowPrintf>
 8003f02:	e00d      	b.n	8003f20 <setup+0x4ec>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8003f04:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <setup+0x5d0>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <setup+0x5c4>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <setup+0x5c8>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	460b      	mov	r3, r1
 8003f18:	4931      	ldr	r1, [pc, #196]	; (8003fe0 <setup+0x5ac>)
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f7fd f9ca 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1Curve_buff, 1 );
 8003f20:	2101      	movs	r1, #1
 8003f22:	4836      	ldr	r0, [pc, #216]	; (8003ffc <setup+0x5c8>)
 8003f24:	f000 fcd4 	bl	80048d0 <dataTuningUD>
					break;
 8003f28:	bf00      	nop
			break;
 8003f2a:	f000 bc4d 	b.w	80047c8 <setup+0xd94>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x4:
			lcdRowPrintf(UPROW, "kp ki kd");
 8003f2e:	492d      	ldr	r1, [pc, #180]	; (8003fe4 <setup+0x5b0>)
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fd f9bf 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			dataTuningLR( &pattern_gain, 1 );
 8003f36:	2101      	movs	r1, #1
 8003f38:	482e      	ldr	r0, [pc, #184]	; (8003ff4 <setup+0x5c0>)
 8003f3a:	f000 fd4d 	bl	80049d8 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <setup+0x5c0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d103      	bne.n	8003f4e <setup+0x51a>
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <setup+0x5c0>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e006      	b.n	8003f5c <setup+0x528>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <setup+0x5c0>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <setup+0x528>
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <setup+0x5c0>)
 8003f58:	2203      	movs	r2, #3
 8003f5a:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <setup+0x5c0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	f000 8082 	beq.w	800406a <setup+0x636>
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	f300 8430 	bgt.w	80047cc <setup+0xd98>
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d003      	beq.n	8003f78 <setup+0x544>
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d051      	beq.n	8004018 <setup+0x5e4>
					}
					
					dataTuningUD ( &kd3_buff, 1 );
					break;
			}
			break;
 8003f74:	f000 bc2a 	b.w	80047cc <setup+0xd98>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003f78:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <setup+0x598>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f80:	d302      	bcc.n	8003f88 <setup+0x554>
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <setup+0x598>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <setup+0x598>)
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	2bf9      	cmp	r3, #249	; 0xf9
 8003f8e:	d809      	bhi.n	8003fa4 <setup+0x570>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <setup+0x5d8>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <setup+0x5dc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	4919      	ldr	r1, [pc, #100]	; (8004000 <setup+0x5cc>)
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fd f989 	bl	80012b4 <lcdRowPrintf>
 8003fa2:	e00d      	b.n	8003fc0 <setup+0x58c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <setup+0x5e0>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <setup+0x5d8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <setup+0x5dc>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4909      	ldr	r1, [pc, #36]	; (8003fe0 <setup+0x5ac>)
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f7fd f97a 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp2_buff, 1 );
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4814      	ldr	r0, [pc, #80]	; (8004014 <setup+0x5e0>)
 8003fc4:	f000 fc84 	bl	80048d0 <dataTuningUD>
					break;
 8003fc8:	e078      	b.n	80040bc <setup+0x688>
 8003fca:	bf00      	nop
 8003fcc:	20002bd2 	.word	0x20002bd2
 8003fd0:	2000001b 	.word	0x2000001b
 8003fd4:	20000398 	.word	0x20000398
 8003fd8:	08013630 	.word	0x08013630
 8003fdc:	2000001c 	.word	0x2000001c
 8003fe0:	08013618 	.word	0x08013618
 8003fe4:	08013600 	.word	0x08013600
 8003fe8:	20002be0 	.word	0x20002be0
 8003fec:	2000038a 	.word	0x2000038a
 8003ff0:	200005d8 	.word	0x200005d8
 8003ff4:	20000029 	.word	0x20000029
 8003ff8:	20000399 	.word	0x20000399
 8003ffc:	2000001e 	.word	0x2000001e
 8004000:	0801360c 	.word	0x0801360c
 8004004:	2000001d 	.word	0x2000001d
 8004008:	08013624 	.word	0x08013624
 800400c:	20000031 	.word	0x20000031
 8004010:	20002c19 	.word	0x20002c19
 8004014:	20000030 	.word	0x20000030
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004018:	4b97      	ldr	r3, [pc, #604]	; (8004278 <setup+0x844>)
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004020:	d302      	bcc.n	8004028 <setup+0x5f4>
 8004022:	4b95      	ldr	r3, [pc, #596]	; (8004278 <setup+0x844>)
 8004024:	2200      	movs	r2, #0
 8004026:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8004028:	4b93      	ldr	r3, [pc, #588]	; (8004278 <setup+0x844>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	2bf9      	cmp	r3, #249	; 0xf9
 800402e:	d809      	bhi.n	8004044 <setup+0x610>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8004030:	4b92      	ldr	r3, [pc, #584]	; (800427c <setup+0x848>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	4b92      	ldr	r3, [pc, #584]	; (8004280 <setup+0x84c>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4992      	ldr	r1, [pc, #584]	; (8004284 <setup+0x850>)
 800403c:	2001      	movs	r0, #1
 800403e:	f7fd f939 	bl	80012b4 <lcdRowPrintf>
 8004042:	e00d      	b.n	8004060 <setup+0x62c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8004044:	4b8d      	ldr	r3, [pc, #564]	; (800427c <setup+0x848>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <setup+0x854>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <setup+0x84c>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	460b      	mov	r3, r1
 8004058:	498c      	ldr	r1, [pc, #560]	; (800428c <setup+0x858>)
 800405a:	2001      	movs	r0, #1
 800405c:	f7fd f92a 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki2_buff, 1 );
 8004060:	2101      	movs	r1, #1
 8004062:	4889      	ldr	r0, [pc, #548]	; (8004288 <setup+0x854>)
 8004064:	f000 fc34 	bl	80048d0 <dataTuningUD>
					break;
 8004068:	e028      	b.n	80040bc <setup+0x688>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800406a:	4b83      	ldr	r3, [pc, #524]	; (8004278 <setup+0x844>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004072:	d302      	bcc.n	800407a <setup+0x646>
 8004074:	4b80      	ldr	r3, [pc, #512]	; (8004278 <setup+0x844>)
 8004076:	2200      	movs	r2, #0
 8004078:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800407a:	4b7f      	ldr	r3, [pc, #508]	; (8004278 <setup+0x844>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	2bf9      	cmp	r3, #249	; 0xf9
 8004080:	d809      	bhi.n	8004096 <setup+0x662>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 8004082:	4b7e      	ldr	r3, [pc, #504]	; (800427c <setup+0x848>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b7f      	ldr	r3, [pc, #508]	; (8004288 <setup+0x854>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	4980      	ldr	r1, [pc, #512]	; (8004290 <setup+0x85c>)
 800408e:	2001      	movs	r0, #1
 8004090:	f7fd f910 	bl	80012b4 <lcdRowPrintf>
 8004094:	e00d      	b.n	80040b2 <setup+0x67e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8004096:	4b79      	ldr	r3, [pc, #484]	; (800427c <setup+0x848>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	4b7a      	ldr	r3, [pc, #488]	; (8004288 <setup+0x854>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	4b77      	ldr	r3, [pc, #476]	; (8004280 <setup+0x84c>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	460b      	mov	r3, r1
 80040aa:	4978      	ldr	r1, [pc, #480]	; (800428c <setup+0x858>)
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7fd f901 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd3_buff, 1 );
 80040b2:	2101      	movs	r1, #1
 80040b4:	4877      	ldr	r0, [pc, #476]	; (8004294 <setup+0x860>)
 80040b6:	f000 fc0b 	bl	80048d0 <dataTuningUD>
					break;
 80040ba:	bf00      	nop
			break;
 80040bc:	e386      	b.n	80047cc <setup+0xd98>
		//------------------------------------------------------------------
		// ゲイン調整(角速度)
		//------------------------------------------------------------------
		case 0x5:
			lcdRowPrintf(UPROW, "kp ki kd");
 80040be:	4976      	ldr	r1, [pc, #472]	; (8004298 <setup+0x864>)
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fd f8f7 	bl	80012b4 <lcdRowPrintf>
			
			anglevelocity = 0;
 80040c6:	4975      	ldr	r1, [pc, #468]	; (800429c <setup+0x868>)
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9c1 2300 	strd	r2, r3, [r1]
			targetSpeed = 0;
 80040d4:	4972      	ldr	r1, [pc, #456]	; (80042a0 <setup+0x86c>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9c1 2300 	strd	r2, r3, [r1]
			data_select( &trace_test, SW_PUSH );
 80040e2:	2102      	movs	r1, #2
 80040e4:	486f      	ldr	r0, [pc, #444]	; (80042a4 <setup+0x870>)
 80040e6:	f000 fbbd 	bl	8004864 <data_select>
			// PUSHでトレースON/OFF
//			if ( cntEmc1 > 500 ) {
//				motorPwmOutSynth( 0, 0 );
//			} else
			if ( trace_test == 1 ) {
 80040ea:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <setup+0x870>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10b      	bne.n	800410a <setup+0x6d6>
				motorPwmOutSynth( yawPwm, speedPwm );
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <setup+0x874>)
 80040f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <setup+0x878>)
 80040fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7ff fc54 	bl	80039b0 <motorPwmOutSynth>
 8004108:	e003      	b.n	8004112 <setup+0x6de>
			} else {
				motorPwmOutSynth( 0, 0 );
 800410a:	2100      	movs	r1, #0
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff fc4f 	bl	80039b0 <motorPwmOutSynth>
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8004112:	2101      	movs	r1, #1
 8004114:	4866      	ldr	r0, [pc, #408]	; (80042b0 <setup+0x87c>)
 8004116:	f000 fc5f 	bl	80049d8 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 800411a:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <setup+0x87c>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d103      	bne.n	800412a <setup+0x6f6>
 8004122:	4b63      	ldr	r3, [pc, #396]	; (80042b0 <setup+0x87c>)
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e006      	b.n	8004138 <setup+0x704>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 800412a:	4b61      	ldr	r3, [pc, #388]	; (80042b0 <setup+0x87c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <setup+0x704>
 8004132:	4b5f      	ldr	r3, [pc, #380]	; (80042b0 <setup+0x87c>)
 8004134:	2203      	movs	r2, #3
 8004136:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8004138:	4b5d      	ldr	r3, [pc, #372]	; (80042b0 <setup+0x87c>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d061      	beq.n	8004204 <setup+0x7d0>
 8004140:	2b03      	cmp	r3, #3
 8004142:	f300 8345 	bgt.w	80047d0 <setup+0xd9c>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d002      	beq.n	8004150 <setup+0x71c>
 800414a:	2b02      	cmp	r3, #2
 800414c:	d02d      	beq.n	80041aa <setup+0x776>
					}
					
					dataTuningUD ( &kd3_buff, 1 );
					break;
			}
			break;
 800414e:	e33f      	b.n	80047d0 <setup+0xd9c>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004150:	4b49      	ldr	r3, [pc, #292]	; (8004278 <setup+0x844>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004158:	d302      	bcc.n	8004160 <setup+0x72c>
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <setup+0x844>)
 800415c:	2200      	movs	r2, #0
 800415e:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 8004160:	4b45      	ldr	r3, [pc, #276]	; (8004278 <setup+0x844>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	2bf9      	cmp	r3, #249	; 0xf9
 8004166:	d80d      	bhi.n	8004184 <setup+0x750>
 8004168:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <setup+0x870>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <setup+0x750>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki3_buff, kd3_buff);
 8004170:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <setup+0x880>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <setup+0x860>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	494f      	ldr	r1, [pc, #316]	; (80042b8 <setup+0x884>)
 800417c:	2001      	movs	r0, #1
 800417e:	f7fd f899 	bl	80012b4 <lcdRowPrintf>
 8004182:	e00d      	b.n	80041a0 <setup+0x76c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 8004184:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <setup+0x888>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <setup+0x880>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	4b40      	ldr	r3, [pc, #256]	; (8004294 <setup+0x860>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	460b      	mov	r3, r1
 8004198:	493c      	ldr	r1, [pc, #240]	; (800428c <setup+0x858>)
 800419a:	2001      	movs	r0, #1
 800419c:	f7fd f88a 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp3_buff, 1 );
 80041a0:	2101      	movs	r1, #1
 80041a2:	4846      	ldr	r0, [pc, #280]	; (80042bc <setup+0x888>)
 80041a4:	f000 fb94 	bl	80048d0 <dataTuningUD>
					break;
 80041a8:	e059      	b.n	800425e <setup+0x82a>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80041aa:	4b33      	ldr	r3, [pc, #204]	; (8004278 <setup+0x844>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041b2:	d302      	bcc.n	80041ba <setup+0x786>
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <setup+0x844>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <setup+0x844>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	2bf9      	cmp	r3, #249	; 0xf9
 80041c0:	d80d      	bhi.n	80041de <setup+0x7aa>
 80041c2:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <setup+0x870>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <setup+0x7aa>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp3_buff, kd3_buff);
 80041ca:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <setup+0x888>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <setup+0x860>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	492b      	ldr	r1, [pc, #172]	; (8004284 <setup+0x850>)
 80041d6:	2001      	movs	r0, #1
 80041d8:	f7fd f86c 	bl	80012b4 <lcdRowPrintf>
 80041dc:	e00d      	b.n	80041fa <setup+0x7c6>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <setup+0x888>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <setup+0x880>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <setup+0x860>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	460b      	mov	r3, r1
 80041f2:	4926      	ldr	r1, [pc, #152]	; (800428c <setup+0x858>)
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7fd f85d 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki3_buff, 1 );
 80041fa:	2101      	movs	r1, #1
 80041fc:	482d      	ldr	r0, [pc, #180]	; (80042b4 <setup+0x880>)
 80041fe:	f000 fb67 	bl	80048d0 <dataTuningUD>
					break;
 8004202:	e02c      	b.n	800425e <setup+0x82a>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <setup+0x844>)
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800420c:	d302      	bcc.n	8004214 <setup+0x7e0>
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <setup+0x844>)
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <setup+0x844>)
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	2bf9      	cmp	r3, #249	; 0xf9
 800421a:	d80d      	bhi.n	8004238 <setup+0x804>
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <setup+0x870>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <setup+0x804>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp3_buff, ki3_buff);
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <setup+0x888>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <setup+0x880>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	4918      	ldr	r1, [pc, #96]	; (8004290 <setup+0x85c>)
 8004230:	2001      	movs	r0, #1
 8004232:	f7fd f83f 	bl	80012b4 <lcdRowPrintf>
 8004236:	e00d      	b.n	8004254 <setup+0x820>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <setup+0x888>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <setup+0x880>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <setup+0x860>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	460b      	mov	r3, r1
 800424c:	490f      	ldr	r1, [pc, #60]	; (800428c <setup+0x858>)
 800424e:	2001      	movs	r0, #1
 8004250:	f7fd f830 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd3_buff, 1 );
 8004254:	2101      	movs	r1, #1
 8004256:	480f      	ldr	r0, [pc, #60]	; (8004294 <setup+0x860>)
 8004258:	f000 fb3a 	bl	80048d0 <dataTuningUD>
					break;
 800425c:	bf00      	nop
			break;
 800425e:	e2b7      	b.n	80047d0 <setup+0xd9c>
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x6:
			dataTuningLR( &pattern_sensors, 1 );
 8004260:	2101      	movs	r1, #1
 8004262:	4817      	ldr	r0, [pc, #92]	; (80042c0 <setup+0x88c>)
 8004264:	f000 fbb8 	bl	80049d8 <dataTuningLR>
			
			if ( pattern_sensors == 11 ) pattern_sensors = 1;
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <setup+0x88c>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b0b      	cmp	r3, #11
 800426e:	d129      	bne.n	80042c4 <setup+0x890>
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <setup+0x88c>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e02c      	b.n	80042d2 <setup+0x89e>
 8004278:	20002bd2 	.word	0x20002bd2
 800427c:	20000030 	.word	0x20000030
 8004280:	20002c19 	.word	0x20002c19
 8004284:	08013624 	.word	0x08013624
 8004288:	20000031 	.word	0x20000031
 800428c:	08013618 	.word	0x08013618
 8004290:	08013630 	.word	0x08013630
 8004294:	20000034 	.word	0x20000034
 8004298:	08013600 	.word	0x08013600
 800429c:	20002c20 	.word	0x20002c20
 80042a0:	20002bf8 	.word	0x20002bf8
 80042a4:	20002be0 	.word	0x20002be0
 80042a8:	20002c30 	.word	0x20002c30
 80042ac:	20002bf4 	.word	0x20002bf4
 80042b0:	20000029 	.word	0x20000029
 80042b4:	20000033 	.word	0x20000033
 80042b8:	0801360c 	.word	0x0801360c
 80042bc:	20000032 	.word	0x20000032
 80042c0:	20000024 	.word	0x20000024
			else if ( pattern_sensors == 0 ) pattern_sensors = 10;
 80042c4:	4ba9      	ldr	r3, [pc, #676]	; (800456c <setup+0xb38>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <setup+0x89e>
 80042cc:	4ba7      	ldr	r3, [pc, #668]	; (800456c <setup+0xb38>)
 80042ce:	220a      	movs	r2, #10
 80042d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80042d2:	4ba7      	ldr	r3, [pc, #668]	; (8004570 <setup+0xb3c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042da:	635a      	str	r2, [r3, #52]	; 0x34

			switch( pattern_sensors ) {
 80042dc:	4ba3      	ldr	r3, [pc, #652]	; (800456c <setup+0xb38>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	f200 8276 	bhi.w	80047d4 <setup+0xda0>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <setup+0x8bc>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004361 	.word	0x08004361
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	080043df 	.word	0x080043df
 8004300:	080043f9 	.word	0x080043f9
 8004304:	0800444b 	.word	0x0800444b
 8004308:	08004553 	.word	0x08004553
 800430c:	08004661 	.word	0x08004661
 8004310:	08004743 	.word	0x08004743
 8004314:	08004771 	.word	0x08004771
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 8004318:	4996      	ldr	r1, [pc, #600]	; (8004574 <setup+0xb40>)
 800431a:	2000      	movs	r0, #0
 800431c:	f7fc ffca 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 8004320:	4995      	ldr	r1, [pc, #596]	; (8004578 <setup+0xb44>)
 8004322:	2001      	movs	r0, #1
 8004324:	f7fc ffc6 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8004328:	2300      	movs	r3, #0
 800432a:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 800432c:	4b93      	ldr	r3, [pc, #588]	; (800457c <setup+0xb48>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f040 822f 	bne.w	8004794 <setup+0xd60>
						cnt_led = 0x00;
 8004336:	2300      	movs	r3, #0
 8004338:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 800433a:	e00a      	b.n	8004352 <setup+0x91e>
							ledOut( cnt_led );
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe f922 	bl	8002588 <ledOut>
							cnt_led++;
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	3301      	adds	r3, #1
 8004348:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 800434a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800434e:	f001 fc83 	bl	8005c58 <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d9f1      	bls.n	800433c <setup+0x908>
						}
						ledOut( 0 );
 8004358:	2000      	movs	r0, #0
 800435a:	f7fe f915 	bl	8002588 <ledOut>
					}
					break;
 800435e:	e219      	b.n	8004794 <setup+0xd60>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 8004360:	4b87      	ldr	r3, [pc, #540]	; (8004580 <setup+0xb4c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	4987      	ldr	r1, [pc, #540]	; (8004584 <setup+0xb50>)
 8004368:	2000      	movs	r0, #0
 800436a:	f7fc ffa3 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 800436e:	4b86      	ldr	r3, [pc, #536]	; (8004588 <setup+0xb54>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4985      	ldr	r1, [pc, #532]	; (800458c <setup+0xb58>)
 8004376:	2001      	movs	r0, #1
 8004378:	f7fc ff9c 	bl	80012b4 <lcdRowPrintf>

					if(swValTact == SW_PUSH) encTotalN = 0;
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <setup+0xb48>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	f040 8209 	bne.w	8004798 <setup+0xd64>
 8004386:	4b80      	ldr	r3, [pc, #512]	; (8004588 <setup+0xb54>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
					break;
 800438c:	e204      	b.n	8004798 <setup+0xd64>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 800438e:	4980      	ldr	r1, [pc, #512]	; (8004590 <setup+0xb5c>)
 8004390:	2000      	movs	r0, #0
 8004392:	f7fc ff8f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <setup+0xb60>)
 8004398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800439c:	461a      	mov	r2, r3
 800439e:	497e      	ldr	r1, [pc, #504]	; (8004598 <setup+0xb64>)
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7fc ff87 	bl	80012b4 <lcdRowPrintf>
					// モータ回転
					dataTuningUD ( &motorTestPwm, 100 );
 80043a6:	2164      	movs	r1, #100	; 0x64
 80043a8:	487a      	ldr	r0, [pc, #488]	; (8004594 <setup+0xb60>)
 80043aa:	f000 fa91 	bl	80048d0 <dataTuningUD>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <setup+0xb68>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10a      	bne.n	80043cc <setup+0x998>
 80043b6:	4b77      	ldr	r3, [pc, #476]	; (8004594 <setup+0xb60>)
 80043b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043bc:	4a75      	ldr	r2, [pc, #468]	; (8004594 <setup+0xb60>)
 80043be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fa83 	bl	80038d0 <motorPwmOut>
 80043ca:	e003      	b.n	80043d4 <setup+0x9a0>
					else motorPwmOut(0, 0);
 80043cc:	2100      	movs	r1, #0
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7ff fa7e 	bl	80038d0 <motorPwmOut>
										
					data_select( &motor_test, SW_PUSH );
 80043d4:	2102      	movs	r1, #2
 80043d6:	4871      	ldr	r0, [pc, #452]	; (800459c <setup+0xb68>)
 80043d8:	f000 fa44 	bl	8004864 <data_select>
					break;
 80043dc:	e1e3      	b.n	80047a6 <setup+0xd72>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 80043de:	4970      	ldr	r1, [pc, #448]	; (80045a0 <setup+0xb6c>)
 80043e0:	2000      	movs	r0, #0
 80043e2:	f7fc ff67 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkerSensor());
 80043e6:	f7ff f9e9 	bl	80037bc <getMarkerSensor>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	496d      	ldr	r1, [pc, #436]	; (80045a4 <setup+0xb70>)
 80043f0:	2001      	movs	r0, #1
 80043f2:	f7fc ff5f 	bl	80012b4 <lcdRowPrintf>
					break;
 80043f6:	e1d6      	b.n	80047a6 <setup+0xd72>

				case 5:
					// 電流センサ
					lcdRowPrintf(UPROW, "   %3.0fmA", CurrntR);
 80043f8:	4b6b      	ldr	r3, [pc, #428]	; (80045a8 <setup+0xb74>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	496b      	ldr	r1, [pc, #428]	; (80045ac <setup+0xb78>)
 8004400:	2000      	movs	r0, #0
 8004402:	f7fc ff57 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.0fmA", CurrntL);
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <setup+0xb7c>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	4967      	ldr	r1, [pc, #412]	; (80045ac <setup+0xb78>)
 800440e:	2001      	movs	r0, #1
 8004410:	f7fc ff50 	bl	80012b4 <lcdRowPrintf>

					motorTestPwm = 80;
 8004414:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <setup+0xb60>)
 8004416:	2250      	movs	r2, #80	; 0x50
 8004418:	801a      	strh	r2, [r3, #0]
					data_select( &motor_test, SW_PUSH );
 800441a:	2102      	movs	r1, #2
 800441c:	485f      	ldr	r0, [pc, #380]	; (800459c <setup+0xb68>)
 800441e:	f000 fa21 	bl	8004864 <data_select>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 8004422:	4b5e      	ldr	r3, [pc, #376]	; (800459c <setup+0xb68>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10a      	bne.n	8004440 <setup+0xa0c>
 800442a:	4b5a      	ldr	r3, [pc, #360]	; (8004594 <setup+0xb60>)
 800442c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004430:	4a58      	ldr	r2, [pc, #352]	; (8004594 <setup+0xb60>)
 8004432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fa49 	bl	80038d0 <motorPwmOut>
					else motorPwmOut(0, 0);
					break;
 800443e:	e1b2      	b.n	80047a6 <setup+0xd72>
					else motorPwmOut(0, 0);
 8004440:	2100      	movs	r1, #0
 8004442:	2000      	movs	r0, #0
 8004444:	f7ff fa44 	bl	80038d0 <motorPwmOut>
					break;
 8004448:	e1ad      	b.n	80047a6 <setup+0xd72>

				case 6:
					// ラインセンサ
					dataTuningUD( &pattern_sensor_line, 1 );
 800444a:	2101      	movs	r1, #1
 800444c:	4859      	ldr	r0, [pc, #356]	; (80045b4 <setup+0xb80>)
 800444e:	f000 fa3f 	bl	80048d0 <dataTuningUD>
					if ( pattern_sensor_line == 7 ) pattern_sensor_line = 1;
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <setup+0xb80>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b07      	cmp	r3, #7
 8004458:	d103      	bne.n	8004462 <setup+0xa2e>
 800445a:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <setup+0xb80>)
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e006      	b.n	8004470 <setup+0xa3c>
					else if ( pattern_sensor_line == 0 ) pattern_sensor_line = 6;
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <setup+0xb80>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <setup+0xa3c>
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <setup+0xb80>)
 800446c:	2206      	movs	r2, #6
 800446e:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_line ) {
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <setup+0xb80>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	3b01      	subs	r3, #1
 8004476:	2b05      	cmp	r3, #5
 8004478:	f200 8190 	bhi.w	800479c <setup+0xd68>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <setup+0xa50>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	0800449d 	.word	0x0800449d
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044f7 	.word	0x080044f7
 8004494:	08004515 	.word	0x08004515
 8004498:	08004533 	.word	0x08004533
						case 1:
							lcdRowPrintf(UPROW, "L1  %4d",lSensor[0]);
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <setup+0xb84>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4946      	ldr	r1, [pc, #280]	; (80045bc <setup+0xb88>)
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7fc ff05 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L2  %4d",lSensor[1]);
 80044aa:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <setup+0xb84>)
 80044ac:	885b      	ldrh	r3, [r3, #2]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4943      	ldr	r1, [pc, #268]	; (80045c0 <setup+0xb8c>)
 80044b2:	2001      	movs	r0, #1
 80044b4:	f7fc fefe 	bl	80012b4 <lcdRowPrintf>
							break;
 80044b8:	e04a      	b.n	8004550 <setup+0xb1c>

						case 2:
							lcdRowPrintf(UPROW, "L3  %4d",lSensor[2]);
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <setup+0xb84>)
 80044bc:	889b      	ldrh	r3, [r3, #4]
 80044be:	461a      	mov	r2, r3
 80044c0:	4940      	ldr	r1, [pc, #256]	; (80045c4 <setup+0xb90>)
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fc fef6 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L4  %4d",lSensor[3]);
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <setup+0xb84>)
 80044ca:	88db      	ldrh	r3, [r3, #6]
 80044cc:	461a      	mov	r2, r3
 80044ce:	493e      	ldr	r1, [pc, #248]	; (80045c8 <setup+0xb94>)
 80044d0:	2001      	movs	r0, #1
 80044d2:	f7fc feef 	bl	80012b4 <lcdRowPrintf>
							break;
 80044d6:	e03b      	b.n	8004550 <setup+0xb1c>
						case 3:
							lcdRowPrintf(UPROW, "L5  %4d",lSensor[4]);
 80044d8:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <setup+0xb84>)
 80044da:	891b      	ldrh	r3, [r3, #8]
 80044dc:	461a      	mov	r2, r3
 80044de:	493b      	ldr	r1, [pc, #236]	; (80045cc <setup+0xb98>)
 80044e0:	2000      	movs	r0, #0
 80044e2:	f7fc fee7 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L6  %4d",lSensor[5]);
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <setup+0xb84>)
 80044e8:	895b      	ldrh	r3, [r3, #10]
 80044ea:	461a      	mov	r2, r3
 80044ec:	4938      	ldr	r1, [pc, #224]	; (80045d0 <setup+0xb9c>)
 80044ee:	2001      	movs	r0, #1
 80044f0:	f7fc fee0 	bl	80012b4 <lcdRowPrintf>
							break;
 80044f4:	e02c      	b.n	8004550 <setup+0xb1c>
						
						case 4:
							lcdRowPrintf(UPROW, "R1  %4d",lSensor[11]);
 80044f6:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <setup+0xb84>)
 80044f8:	8adb      	ldrh	r3, [r3, #22]
 80044fa:	461a      	mov	r2, r3
 80044fc:	4935      	ldr	r1, [pc, #212]	; (80045d4 <setup+0xba0>)
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fc fed8 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R2  %4d",lSensor[10]);
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <setup+0xb84>)
 8004506:	8a9b      	ldrh	r3, [r3, #20]
 8004508:	461a      	mov	r2, r3
 800450a:	4933      	ldr	r1, [pc, #204]	; (80045d8 <setup+0xba4>)
 800450c:	2001      	movs	r0, #1
 800450e:	f7fc fed1 	bl	80012b4 <lcdRowPrintf>
							break;
 8004512:	e01d      	b.n	8004550 <setup+0xb1c>

						case 5:
							lcdRowPrintf(UPROW, "R3  %4d",lSensor[9]);
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <setup+0xb84>)
 8004516:	8a5b      	ldrh	r3, [r3, #18]
 8004518:	461a      	mov	r2, r3
 800451a:	4930      	ldr	r1, [pc, #192]	; (80045dc <setup+0xba8>)
 800451c:	2000      	movs	r0, #0
 800451e:	f7fc fec9 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R4  %4d",lSensor[8]);
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <setup+0xb84>)
 8004524:	8a1b      	ldrh	r3, [r3, #16]
 8004526:	461a      	mov	r2, r3
 8004528:	492d      	ldr	r1, [pc, #180]	; (80045e0 <setup+0xbac>)
 800452a:	2001      	movs	r0, #1
 800452c:	f7fc fec2 	bl	80012b4 <lcdRowPrintf>
							break;
 8004530:	e00e      	b.n	8004550 <setup+0xb1c>

						case 6:
							lcdRowPrintf(UPROW, "R5  %4d",lSensor[7]);
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <setup+0xb84>)
 8004534:	89db      	ldrh	r3, [r3, #14]
 8004536:	461a      	mov	r2, r3
 8004538:	492a      	ldr	r1, [pc, #168]	; (80045e4 <setup+0xbb0>)
 800453a:	2000      	movs	r0, #0
 800453c:	f7fc feba 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R6  %4d",lSensor[6]);
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <setup+0xb84>)
 8004542:	899b      	ldrh	r3, [r3, #12]
 8004544:	461a      	mov	r2, r3
 8004546:	4928      	ldr	r1, [pc, #160]	; (80045e8 <setup+0xbb4>)
 8004548:	2001      	movs	r0, #1
 800454a:	f7fc feb3 	bl	80012b4 <lcdRowPrintf>
							break;
 800454e:	bf00      	nop
					}
					break;
 8004550:	e124      	b.n	800479c <setup+0xd68>
				case 7:
					// 加速度
					dataTuningUD( &pattern_sensor_accele, 1 );
 8004552:	2101      	movs	r1, #1
 8004554:	4825      	ldr	r0, [pc, #148]	; (80045ec <setup+0xbb8>)
 8004556:	f000 f9bb 	bl	80048d0 <dataTuningUD>
					if ( pattern_sensor_accele == 4 ) pattern_sensor_accele = 1;
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <setup+0xbb8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d146      	bne.n	80045f0 <setup+0xbbc>
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <setup+0xbb8>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e049      	b.n	80045fe <setup+0xbca>
 800456a:	bf00      	nop
 800456c:	20000024 	.word	0x20000024
 8004570:	200005d8 	.word	0x200005d8
 8004574:	0801363c 	.word	0x0801363c
 8004578:	080135a4 	.word	0x080135a4
 800457c:	20002be4 	.word	0x20002be4
 8004580:	200002f4 	.word	0x200002f4
 8004584:	08013648 	.word	0x08013648
 8004588:	200002fc 	.word	0x200002fc
 800458c:	08013650 	.word	0x08013650
 8004590:	08013658 	.word	0x08013658
 8004594:	2000002a 	.word	0x2000002a
 8004598:	08013664 	.word	0x08013664
 800459c:	20002bdf 	.word	0x20002bdf
 80045a0:	08013670 	.word	0x08013670
 80045a4:	0801367c 	.word	0x0801367c
 80045a8:	200002c0 	.word	0x200002c0
 80045ac:	08013688 	.word	0x08013688
 80045b0:	200002b8 	.word	0x200002b8
 80045b4:	20000025 	.word	0x20000025
 80045b8:	20000338 	.word	0x20000338
 80045bc:	08013694 	.word	0x08013694
 80045c0:	0801369c 	.word	0x0801369c
 80045c4:	080136a4 	.word	0x080136a4
 80045c8:	080136ac 	.word	0x080136ac
 80045cc:	080136b4 	.word	0x080136b4
 80045d0:	080136bc 	.word	0x080136bc
 80045d4:	080136c4 	.word	0x080136c4
 80045d8:	080136cc 	.word	0x080136cc
 80045dc:	080136d4 	.word	0x080136d4
 80045e0:	080136dc 	.word	0x080136dc
 80045e4:	080136e4 	.word	0x080136e4
 80045e8:	080136ec 	.word	0x080136ec
 80045ec:	20000026 	.word	0x20000026
					else if ( pattern_sensor_accele == 0 ) pattern_sensor_accele = 3;
 80045f0:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <setup+0xdac>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <setup+0xbca>
 80045f8:	4b79      	ldr	r3, [pc, #484]	; (80047e0 <setup+0xdac>)
 80045fa:	2203      	movs	r2, #3
 80045fc:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_accele ) {
 80045fe:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <setup+0xdac>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d01f      	beq.n	8004646 <setup+0xc12>
 8004606:	2b03      	cmp	r3, #3
 8004608:	f300 80ca 	bgt.w	80047a0 <setup+0xd6c>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <setup+0xbe2>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d00c      	beq.n	800462e <setup+0xbfa>
						case 3:
							lcdRowPrintf(UPROW, "Z accele");
							lcdRowPrintf(LOWROW, "    %4.0f",acceleValZ);
							break;
					}
					break;
 8004614:	e0c4      	b.n	80047a0 <setup+0xd6c>
							lcdRowPrintf(UPROW, "X accele");
 8004616:	4973      	ldr	r1, [pc, #460]	; (80047e4 <setup+0xdb0>)
 8004618:	2000      	movs	r0, #0
 800461a:	f7fc fe4b 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleValX);
 800461e:	4b72      	ldr	r3, [pc, #456]	; (80047e8 <setup+0xdb4>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	4971      	ldr	r1, [pc, #452]	; (80047ec <setup+0xdb8>)
 8004626:	2001      	movs	r0, #1
 8004628:	f7fc fe44 	bl	80012b4 <lcdRowPrintf>
							break;
 800462c:	e017      	b.n	800465e <setup+0xc2a>
							lcdRowPrintf(UPROW, "Y accele");
 800462e:	4970      	ldr	r1, [pc, #448]	; (80047f0 <setup+0xdbc>)
 8004630:	2000      	movs	r0, #0
 8004632:	f7fc fe3f 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleValY);
 8004636:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <setup+0xdc0>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	496b      	ldr	r1, [pc, #428]	; (80047ec <setup+0xdb8>)
 800463e:	2001      	movs	r0, #1
 8004640:	f7fc fe38 	bl	80012b4 <lcdRowPrintf>
							break;
 8004644:	e00b      	b.n	800465e <setup+0xc2a>
							lcdRowPrintf(UPROW, "Z accele");
 8004646:	496c      	ldr	r1, [pc, #432]	; (80047f8 <setup+0xdc4>)
 8004648:	2000      	movs	r0, #0
 800464a:	f7fc fe33 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleValZ);
 800464e:	4b6b      	ldr	r3, [pc, #428]	; (80047fc <setup+0xdc8>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	4965      	ldr	r1, [pc, #404]	; (80047ec <setup+0xdb8>)
 8004656:	2001      	movs	r0, #1
 8004658:	f7fc fe2c 	bl	80012b4 <lcdRowPrintf>
							break;
 800465c:	bf00      	nop
					break;
 800465e:	e09f      	b.n	80047a0 <setup+0xd6c>
				case 8:
					// 角速度
					dataTuningUD( &pattern_sensor_gyro, 1 );
 8004660:	2101      	movs	r1, #1
 8004662:	4867      	ldr	r0, [pc, #412]	; (8004800 <setup+0xdcc>)
 8004664:	f000 f934 	bl	80048d0 <dataTuningUD>
					if ( pattern_sensor_gyro == 7 ) pattern_sensor_gyro = 1;
 8004668:	4b65      	ldr	r3, [pc, #404]	; (8004800 <setup+0xdcc>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b07      	cmp	r3, #7
 800466e:	d103      	bne.n	8004678 <setup+0xc44>
 8004670:	4b63      	ldr	r3, [pc, #396]	; (8004800 <setup+0xdcc>)
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e006      	b.n	8004686 <setup+0xc52>
					else if ( pattern_sensor_gyro == 0 ) pattern_sensor_gyro = 6;
 8004678:	4b61      	ldr	r3, [pc, #388]	; (8004800 <setup+0xdcc>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <setup+0xc52>
 8004680:	4b5f      	ldr	r3, [pc, #380]	; (8004800 <setup+0xdcc>)
 8004682:	2206      	movs	r2, #6
 8004684:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_gyro ) {
 8004686:	4b5e      	ldr	r3, [pc, #376]	; (8004800 <setup+0xdcc>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	2b05      	cmp	r3, #5
 800468e:	f200 8089 	bhi.w	80047a4 <setup+0xd70>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <setup+0xc64>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046e1 	.word	0x080046e1
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004711 	.word	0x08004711
 80046ac:	08004729 	.word	0x08004729
						case 1:
							lcdRowPrintf(UPROW, "X gyro  ");
 80046b0:	4954      	ldr	r1, [pc, #336]	; (8004804 <setup+0xdd0>)
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fc fdfe 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",gyroValX);
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <setup+0xdd4>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	494b      	ldr	r1, [pc, #300]	; (80047ec <setup+0xdb8>)
 80046c0:	2001      	movs	r0, #1
 80046c2:	f7fc fdf7 	bl	80012b4 <lcdRowPrintf>
							break;
 80046c6:	e03b      	b.n	8004740 <setup+0xd0c>
						case 2:
							lcdRowPrintf(UPROW, "Y gyro  ");
 80046c8:	4950      	ldr	r1, [pc, #320]	; (800480c <setup+0xdd8>)
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fc fdf2 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",gyroValY);
 80046d0:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <setup+0xddc>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	4945      	ldr	r1, [pc, #276]	; (80047ec <setup+0xdb8>)
 80046d8:	2001      	movs	r0, #1
 80046da:	f7fc fdeb 	bl	80012b4 <lcdRowPrintf>
							break;
 80046de:	e02f      	b.n	8004740 <setup+0xd0c>
						case 3:
							lcdRowPrintf(UPROW, "Z gyro  ");
 80046e0:	494c      	ldr	r1, [pc, #304]	; (8004814 <setup+0xde0>)
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fc fde6 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",gyroValZ);
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <setup+0xde4>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	493f      	ldr	r1, [pc, #252]	; (80047ec <setup+0xdb8>)
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fc fddf 	bl	80012b4 <lcdRowPrintf>
							break;
 80046f6:	e023      	b.n	8004740 <setup+0xd0c>
						case 4:
							lcdRowPrintf(UPROW, "X angle ");
 80046f8:	4948      	ldr	r1, [pc, #288]	; (800481c <setup+0xde8>)
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fc fdda 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angleX);
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <setup+0xdec>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	4939      	ldr	r1, [pc, #228]	; (80047ec <setup+0xdb8>)
 8004708:	2001      	movs	r0, #1
 800470a:	f7fc fdd3 	bl	80012b4 <lcdRowPrintf>
							break;
 800470e:	e017      	b.n	8004740 <setup+0xd0c>
						case 5:
							lcdRowPrintf(UPROW, "Y angle ");
 8004710:	4944      	ldr	r1, [pc, #272]	; (8004824 <setup+0xdf0>)
 8004712:	2000      	movs	r0, #0
 8004714:	f7fc fdce 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angleY);
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <setup+0xdf4>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	4933      	ldr	r1, [pc, #204]	; (80047ec <setup+0xdb8>)
 8004720:	2001      	movs	r0, #1
 8004722:	f7fc fdc7 	bl	80012b4 <lcdRowPrintf>
							break;
 8004726:	e00b      	b.n	8004740 <setup+0xd0c>
						case 6:
							lcdRowPrintf(UPROW, "Z angle ");
 8004728:	4940      	ldr	r1, [pc, #256]	; (800482c <setup+0xdf8>)
 800472a:	2000      	movs	r0, #0
 800472c:	f7fc fdc2 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angleZ);
 8004730:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <setup+0xdfc>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	492d      	ldr	r1, [pc, #180]	; (80047ec <setup+0xdb8>)
 8004738:	2001      	movs	r0, #1
 800473a:	f7fc fdbb 	bl	80012b4 <lcdRowPrintf>
							break;
 800473e:	bf00      	nop
					}
					break;
 8004740:	e030      	b.n	80047a4 <setup+0xd70>
				case 9:
					// PID出力のPWM
					targetSpeed = 120;
 8004742:	493c      	ldr	r1, [pc, #240]	; (8004834 <setup+0xe00>)
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <setup+0xe04>)
 800474a:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <setup+0xe08>)
 8004750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004754:	461a      	mov	r2, r3
 8004756:	493a      	ldr	r1, [pc, #232]	; (8004840 <setup+0xe0c>)
 8004758:	2000      	movs	r0, #0
 800475a:	f7fc fdab 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",yawPwm);
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <setup+0xe10>)
 8004760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004764:	461a      	mov	r2, r3
 8004766:	4938      	ldr	r1, [pc, #224]	; (8004848 <setup+0xe14>)
 8004768:	2001      	movs	r0, #1
 800476a:	f7fc fda3 	bl	80012b4 <lcdRowPrintf>
					break;
 800476e:	e01a      	b.n	80047a6 <setup+0xd72>
				case 10:
					// 仮想センサ角度
					targetSpeed = 120;
 8004770:	4930      	ldr	r1, [pc, #192]	; (8004834 <setup+0xe00>)
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b30      	ldr	r3, [pc, #192]	; (8004838 <setup+0xe04>)
 8004778:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "Anglesen");
 800477c:	4933      	ldr	r1, [pc, #204]	; (800484c <setup+0xe18>)
 800477e:	2000      	movs	r0, #0
 8004780:	f7fc fd98 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.1lf", angleSensor);
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <setup+0xe1c>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	4932      	ldr	r1, [pc, #200]	; (8004854 <setup+0xe20>)
 800478c:	2001      	movs	r0, #1
 800478e:	f7fc fd91 	bl	80012b4 <lcdRowPrintf>
					// lcdRowPrintf(LOWROW, "      %2d", angleSensor);
					break;
 8004792:	e008      	b.n	80047a6 <setup+0xd72>
					break;
 8004794:	bf00      	nop
 8004796:	e01d      	b.n	80047d4 <setup+0xda0>
					break;
 8004798:	bf00      	nop
 800479a:	e01b      	b.n	80047d4 <setup+0xda0>
					break;
 800479c:	bf00      	nop
 800479e:	e019      	b.n	80047d4 <setup+0xda0>
					break;
 80047a0:	bf00      	nop
 80047a2:	e017      	b.n	80047d4 <setup+0xda0>
					break;
 80047a4:	bf00      	nop
			} // switch
			break;
 80047a6:	e015      	b.n	80047d4 <setup+0xda0>

	default:
		lcdRowPrintf(UPROW, "%#x     ", swValRotary);
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <setup+0xe24>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	492b      	ldr	r1, [pc, #172]	; (800485c <setup+0xe28>)
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fc fd7f 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 80047b6:	492a      	ldr	r1, [pc, #168]	; (8004860 <setup+0xe2c>)
 80047b8:	2001      	movs	r0, #1
 80047ba:	f7fc fd7b 	bl	80012b4 <lcdRowPrintf>
		break;
 80047be:	e00a      	b.n	80047d6 <setup+0xda2>
			break;
 80047c0:	bf00      	nop
 80047c2:	e008      	b.n	80047d6 <setup+0xda2>
			break;
 80047c4:	bf00      	nop
 80047c6:	e006      	b.n	80047d6 <setup+0xda2>
			break;
 80047c8:	bf00      	nop
 80047ca:	e004      	b.n	80047d6 <setup+0xda2>
			break;
 80047cc:	bf00      	nop
 80047ce:	e002      	b.n	80047d6 <setup+0xda2>
			break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <setup+0xda2>
			break;
 80047d4:	bf00      	nop
	} // switch
	// } // cntSW
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000026 	.word	0x20000026
 80047e4:	080136f4 	.word	0x080136f4
 80047e8:	20000280 	.word	0x20000280
 80047ec:	08013700 	.word	0x08013700
 80047f0:	0801370c 	.word	0x0801370c
 80047f4:	20000288 	.word	0x20000288
 80047f8:	08013718 	.word	0x08013718
 80047fc:	20000290 	.word	0x20000290
 8004800:	20000027 	.word	0x20000027
 8004804:	08013724 	.word	0x08013724
 8004808:	20000268 	.word	0x20000268
 800480c:	08013730 	.word	0x08013730
 8004810:	20000270 	.word	0x20000270
 8004814:	0801373c 	.word	0x0801373c
 8004818:	20000278 	.word	0x20000278
 800481c:	08013748 	.word	0x08013748
 8004820:	20000298 	.word	0x20000298
 8004824:	08013754 	.word	0x08013754
 8004828:	200002a0 	.word	0x200002a0
 800482c:	08013760 	.word	0x08013760
 8004830:	200002a8 	.word	0x200002a8
 8004834:	20002bf8 	.word	0x20002bf8
 8004838:	405e0000 	.word	0x405e0000
 800483c:	2000038a 	.word	0x2000038a
 8004840:	0801376c 	.word	0x0801376c
 8004844:	20002c30 	.word	0x20002c30
 8004848:	08013774 	.word	0x08013774
 800484c:	0801377c 	.word	0x0801377c
 8004850:	20000380 	.word	0x20000380
 8004854:	08013788 	.word	0x08013788
 8004858:	20002be5 	.word	0x20002be5
 800485c:	08013794 	.word	0x08013794
 8004860:	080137a0 	.word	0x080137a0

08004864 <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <data_select+0x64>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	429a      	cmp	r2, r3
 8004878:	d11d      	bne.n	80048b6 <data_select+0x52>
		if ( *data == 1 && push == 0) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10a      	bne.n	8004898 <data_select+0x34>
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <data_select+0x68>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <data_select+0x34>
			push = 1;
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <data_select+0x68>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
			*data = 0;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 8004896:	e011      	b.n	80048bc <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <data_select+0x58>
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <data_select+0x68>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <data_select+0x58>
			push = 1;
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <data_select+0x68>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
			*data = 1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
}
 80048b4:	e002      	b.n	80048bc <data_select+0x58>
		push = 0;
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <data_select+0x68>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	20002be4 	.word	0x20002be4
 80048cc:	20002bde 	.word	0x20002bde

080048d0 <dataTuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( void *data, uint8_t add )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <dataTuningUD+0xf8>)
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	2b31      	cmp	r3, #49	; 0x31
 80048e6:	d968      	bls.n	80049ba <dataTuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 80048e8:	4b38      	ldr	r3, [pc, #224]	; (80049cc <dataTuningUD+0xfc>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d003      	beq.n	80048f8 <dataTuningUD+0x28>
 80048f0:	4b36      	ldr	r3, [pc, #216]	; (80049cc <dataTuningUD+0xfc>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d155      	bne.n	80049a4 <dataTuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <dataTuningUD+0x100>)
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <dataTuningUD+0x100>)
 8004902:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004904:	4b31      	ldr	r3, [pc, #196]	; (80049cc <dataTuningUD+0xfc>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d123      	bne.n	8004954 <dataTuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 800490c:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <dataTuningUD+0x100>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	2b13      	cmp	r3, #19
 8004912:	d90b      	bls.n	800492c <dataTuningUD+0x5c>
					*data2 += add;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800491a:	b29a      	uxth	r2, r3
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	b29b      	uxth	r3, r3
 8004920:	4413      	add	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	b21a      	sxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800492a:	e042      	b.n	80049b2 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <dataTuningUD+0x104>)
 800492e:	f993 3000 	ldrsb.w	r3, [r3]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13d      	bne.n	80049b2 <dataTuningUD+0xe2>
					pushUD = 1;
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <dataTuningUD+0x104>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004942:	b29a      	uxth	r2, r3
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	b29b      	uxth	r3, r3
 8004948:	4413      	add	r3, r2
 800494a:	b29b      	uxth	r3, r3
 800494c:	b21a      	sxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004952:	e02e      	b.n	80049b2 <dataTuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <dataTuningUD+0xfc>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d12a      	bne.n	80049b2 <dataTuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 800495c:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <dataTuningUD+0x100>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b13      	cmp	r3, #19
 8004962:	d90b      	bls.n	800497c <dataTuningUD+0xac>
					*data2 -= add;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800496a:	b29a      	uxth	r2, r3
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	b29b      	uxth	r3, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	b21a      	sxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800497a:	e01a      	b.n	80049b2 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 800497c:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <dataTuningUD+0x104>)
 800497e:	f993 3000 	ldrsb.w	r3, [r3]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d115      	bne.n	80049b2 <dataTuningUD+0xe2>
					pushUD = 1;
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <dataTuningUD+0x104>)
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004992:	b29a      	uxth	r2, r3
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	b29b      	uxth	r3, r3
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	b29b      	uxth	r3, r3
 800499c:	b21a      	sxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80049a2:	e006      	b.n	80049b2 <dataTuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <dataTuningUD+0x104>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <dataTuningUD+0x100>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	e000      	b.n	80049b4 <dataTuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 80049b2:	bf00      	nop
		}
		cntSetup2 = 0;
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <dataTuningUD+0xf8>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	801a      	strh	r2, [r3, #0]
	}
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20002bd4 	.word	0x20002bd4
 80049cc:	20002be4 	.word	0x20002be4
 80049d0:	20002bd8 	.word	0x20002bd8
 80049d4:	20002bdd 	.word	0x20002bdd

080049d8 <dataTuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( void *data, uint8_t add )
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 80049e8:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <dataTuningLR+0xf8>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	2b31      	cmp	r3, #49	; 0x31
 80049ee:	d968      	bls.n	8004ac2 <dataTuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 80049f0:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <dataTuningLR+0xfc>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d003      	beq.n	8004a00 <dataTuningLR+0x28>
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <dataTuningLR+0xfc>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d155      	bne.n	8004aac <dataTuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <dataTuningLR+0x100>)
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <dataTuningLR+0x100>)
 8004a0a:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004a0c:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <dataTuningLR+0xfc>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d123      	bne.n	8004a5c <dataTuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <dataTuningLR+0x100>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b13      	cmp	r3, #19
 8004a1a:	d90b      	bls.n	8004a34 <dataTuningLR+0x5c>
					*data2 += add;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b21a      	sxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004a32:	e042      	b.n	8004aba <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8004a34:	4b29      	ldr	r3, [pc, #164]	; (8004adc <dataTuningLR+0x104>)
 8004a36:	f993 3000 	ldrsb.w	r3, [r3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d13d      	bne.n	8004aba <dataTuningLR+0xe2>
					pushLR = 1;
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <dataTuningLR+0x104>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	b21a      	sxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004a5a:	e02e      	b.n	8004aba <dataTuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <dataTuningLR+0xfc>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d12a      	bne.n	8004aba <dataTuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8004a64:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <dataTuningLR+0x100>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	2b13      	cmp	r3, #19
 8004a6a:	d90b      	bls.n	8004a84 <dataTuningLR+0xac>
					*data2 -= add;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	b21a      	sxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004a82:	e01a      	b.n	8004aba <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <dataTuningLR+0x104>)
 8004a86:	f993 3000 	ldrsb.w	r3, [r3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d115      	bne.n	8004aba <dataTuningLR+0xe2>
					pushLR = 1;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <dataTuningLR+0x104>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b21a      	sxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004aaa:	e006      	b.n	8004aba <dataTuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <dataTuningLR+0x104>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <dataTuningLR+0x100>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e000      	b.n	8004abc <dataTuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 8004aba:	bf00      	nop
		}
		cntSetup3 = 0;
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <dataTuningLR+0xf8>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	801a      	strh	r2, [r3, #0]
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20002bd6 	.word	0x20002bd6
 8004ad4:	20002be4 	.word	0x20002be4
 8004ad8:	20002bda 	.word	0x20002bda
 8004adc:	20002bdc 	.word	0x20002bdc

08004ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_MspInit+0x4c>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <HAL_MspInit+0x4c>)
 8004af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af4:	6453      	str	r3, [r2, #68]	; 0x44
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_MspInit+0x4c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_MspInit+0x4c>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <HAL_MspInit+0x4c>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_MspInit+0x4c>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b1e:	2007      	movs	r0, #7
 8004b20:	f001 ff12 	bl	8006948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 031c 	add.w	r3, r7, #28
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a53      	ldr	r2, [pc, #332]	; (8004c9c <HAL_ADC_MspInit+0x16c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d172      	bne.n	8004c38 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	4b52      	ldr	r3, [pc, #328]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6453      	str	r3, [r2, #68]	; 0x44
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a4a      	ldr	r2, [pc, #296]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	4b44      	ldr	r3, [pc, #272]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a43      	ldr	r2, [pc, #268]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004ba6:	233f      	movs	r3, #63	; 0x3f
 8004ba8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004baa:	2303      	movs	r3, #3
 8004bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	483a      	ldr	r0, [pc, #232]	; (8004ca4 <HAL_ADC_MspInit+0x174>)
 8004bba:	f002 fa77 	bl	80070ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004bbe:	23ff      	movs	r3, #255	; 0xff
 8004bc0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	f107 031c 	add.w	r3, r7, #28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4835      	ldr	r0, [pc, #212]	; (8004ca8 <HAL_ADC_MspInit+0x178>)
 8004bd2:	f002 fa6b 	bl	80070ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004bd6:	4b35      	ldr	r3, [pc, #212]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004bd8:	4a35      	ldr	r2, [pc, #212]	; (8004cb0 <HAL_ADC_MspInit+0x180>)
 8004bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004bdc:	4b33      	ldr	r3, [pc, #204]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be2:	4b32      	ldr	r3, [pc, #200]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be8:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c1a:	4824      	ldr	r0, [pc, #144]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c1c:	f001 fed6 	bl	80069cc <HAL_DMA_Init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004c26:	f7fe fdc3 	bl	80037b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_ADC_MspInit+0x17c>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004c36:	e02c      	b.n	8004c92 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_ADC_MspInit+0x184>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d127      	bne.n	8004c92 <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c50:	6453      	str	r3, [r2, #68]	; 0x44
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_ADC_MspInit+0x170>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8004c7a:	2331      	movs	r3, #49	; 0x31
 8004c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c86:	f107 031c 	add.w	r3, r7, #28
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <HAL_ADC_MspInit+0x174>)
 8004c8e:	f002 fa0d 	bl	80070ac <HAL_GPIO_Init>
}
 8004c92:	bf00      	nop
 8004c94:	3730      	adds	r7, #48	; 0x30
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40012000 	.word	0x40012000
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40020800 	.word	0x40020800
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	2000042c 	.word	0x2000042c
 8004cb0:	40026410 	.word	0x40026410
 8004cb4:	40012100 	.word	0x40012100

08004cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_I2C_MspInit+0x84>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d12c      	bne.n	8004d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfc:	2312      	movs	r3, #18
 8004cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d08:	2304      	movs	r3, #4
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4619      	mov	r1, r3
 8004d12:	480c      	ldr	r0, [pc, #48]	; (8004d44 <HAL_I2C_MspInit+0x8c>)
 8004d14:	f002 f9ca 	bl	80070ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d26:	6413      	str	r3, [r2, #64]	; 0x40
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_I2C_MspInit+0x88>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d34:	bf00      	nop
 8004d36:	3728      	adds	r7, #40	; 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40005400 	.word	0x40005400
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40020400 	.word	0x40020400

08004d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	; 0x30
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	f107 031c 	add.w	r3, r7, #28
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
 8004d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a42      	ldr	r2, [pc, #264]	; (8004e70 <HAL_SPI_MspInit+0x128>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d12d      	bne.n	8004dc6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8004da2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da8:	2302      	movs	r3, #2
 8004daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db0:	2303      	movs	r3, #3
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004db4:	2305      	movs	r3, #5
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db8:	f107 031c 	add.w	r3, r7, #28
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	482e      	ldr	r0, [pc, #184]	; (8004e78 <HAL_SPI_MspInit+0x130>)
 8004dc0:	f002 f974 	bl	80070ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004dc4:	e04f      	b.n	8004e66 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <HAL_SPI_MspInit+0x134>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d14a      	bne.n	8004e66 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	6413      	str	r3, [r2, #64]	; 0x40
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004e12:	f043 0304 	orr.w	r3, r3, #4
 8004e16:	6313      	str	r3, [r2, #48]	; 0x30
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_SPI_MspInit+0x12c>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e24:	2301      	movs	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e30:	2303      	movs	r3, #3
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004e34:	2307      	movs	r3, #7
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e38:	f107 031c 	add.w	r3, r7, #28
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	480e      	ldr	r0, [pc, #56]	; (8004e78 <HAL_SPI_MspInit+0x130>)
 8004e40:	f002 f934 	bl	80070ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e52:	2303      	movs	r3, #3
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e56:	2306      	movs	r3, #6
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e5a:	f107 031c 	add.w	r3, r7, #28
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <HAL_SPI_MspInit+0x138>)
 8004e62:	f002 f923 	bl	80070ac <HAL_GPIO_Init>
}
 8004e66:	bf00      	nop
 8004e68:	3730      	adds	r7, #48	; 0x30
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40003800 	.word	0x40003800
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40003c00 	.word	0x40003c00
 8004e80:	40020800 	.word	0x40020800

08004e84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_TIM_PWM_MspInit+0x70>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004eb2:	e01a      	b.n	8004eea <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d115      	bne.n	8004eea <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_TIM_PWM_MspInit+0x74>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	201c      	movs	r0, #28
 8004ee0:	f001 fd3d 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ee4:	201c      	movs	r0, #28
 8004ee6:	f001 fd56 	bl	8006996 <HAL_NVIC_EnableIRQ>
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40023800 	.word	0x40023800

08004efc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 031c 	add.w	r3, r7, #28
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a32      	ldr	r2, [pc, #200]	; (8004fe4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d12c      	bne.n	8004f78 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4a:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f56:	23c0      	movs	r3, #192	; 0xc0
 8004f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	2300      	movs	r3, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f66:	2302      	movs	r3, #2
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6a:	f107 031c 	add.w	r3, r7, #28
 8004f6e:	4619      	mov	r1, r3
 8004f70:	481e      	ldr	r0, [pc, #120]	; (8004fec <HAL_TIM_Encoder_MspInit+0xf0>)
 8004f72:	f002 f89b 	bl	80070ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f76:	e030      	b.n	8004fda <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d12b      	bne.n	8004fda <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	4b18      	ldr	r3, [pc, #96]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	6313      	str	r3, [r2, #48]	; 0x30
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fba:	23c0      	movs	r3, #192	; 0xc0
 8004fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fce:	f107 031c 	add.w	r3, r7, #28
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004fd6:	f002 f869 	bl	80070ac <HAL_GPIO_Init>
}
 8004fda:	bf00      	nop
 8004fdc:	3730      	adds	r7, #48	; 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40020800 	.word	0x40020800
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40020400 	.word	0x40020400

08004ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <HAL_TIM_Base_MspInit+0x48>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d115      	bne.n	8005036 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <HAL_TIM_Base_MspInit+0x4c>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <HAL_TIM_Base_MspInit+0x4c>)
 8005014:	f043 0310 	orr.w	r3, r3, #16
 8005018:	6413      	str	r3, [r2, #64]	; 0x40
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_TIM_Base_MspInit+0x4c>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	2036      	movs	r0, #54	; 0x36
 800502c:	f001 fc97 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005030:	2036      	movs	r0, #54	; 0x36
 8005032:	f001 fcb0 	bl	8006996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40001000 	.word	0x40001000
 8005044:	40023800 	.word	0x40023800

08005048 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a25      	ldr	r2, [pc, #148]	; (80050fc <HAL_TIM_MspPostInit+0xb4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d11f      	bne.n	80050aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a23      	ldr	r2, [pc, #140]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005086:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800508a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508c:	2302      	movs	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	4818      	ldr	r0, [pc, #96]	; (8005104 <HAL_TIM_MspPostInit+0xbc>)
 80050a4:	f002 f802 	bl	80070ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80050a8:	e023      	b.n	80050f2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d11e      	bne.n	80050f2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6313      	str	r3, [r2, #48]	; 0x30
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <HAL_TIM_MspPostInit+0xb8>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80050d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d6:	2302      	movs	r3, #2
 80050d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050e2:	2301      	movs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	4619      	mov	r1, r3
 80050ec:	4805      	ldr	r0, [pc, #20]	; (8005104 <HAL_TIM_MspPostInit+0xbc>)
 80050ee:	f001 ffdd 	bl	80070ac <HAL_GPIO_Init>
}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40023800 	.word	0x40023800
 8005104:	40020000 	.word	0x40020000

08005108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <HAL_UART_MspInit+0xc0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d14a      	bne.n	80051c0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	4a26      	ldr	r2, [pc, #152]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005138:	6413      	str	r3, [r2, #64]	; 0x40
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_UART_MspInit+0xc4>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_UART_MspInit+0xc4>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_UART_MspInit+0xc4>)
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	6313      	str	r3, [r2, #48]	; 0x30
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_UART_MspInit+0xc4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800517e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005184:	2302      	movs	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518c:	2303      	movs	r3, #3
 800518e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005190:	2308      	movs	r3, #8
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4619      	mov	r1, r3
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <HAL_UART_MspInit+0xc8>)
 800519c:	f001 ff86 	bl	80070ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051a0:	2304      	movs	r3, #4
 80051a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80051b0:	2308      	movs	r3, #8
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4619      	mov	r1, r3
 80051ba:	4806      	ldr	r0, [pc, #24]	; (80051d4 <HAL_UART_MspInit+0xcc>)
 80051bc:	f001 ff76 	bl	80070ac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80051c0:	bf00      	nop
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40005000 	.word	0x40005000
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40020800 	.word	0x40020800
 80051d4:	40020c00 	.word	0x40020c00

080051d8 <SDTimer_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void){
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <SDTimer_Handler+0x40>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <SDTimer_Handler+0x1c>
		Timer1--;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <SDTimer_Handler+0x40>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <SDTimer_Handler+0x40>)
 80051f2:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <SDTimer_Handler+0x44>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d006      	beq.n	800520c <SDTimer_Handler+0x34>
		Timer2--;
 80051fe:	4b07      	ldr	r3, [pc, #28]	; (800521c <SDTimer_Handler+0x44>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <SDTimer_Handler+0x44>)
 800520a:	701a      	strb	r2, [r3, #0]
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20002be2 	.word	0x20002be2
 800521c:	20002be3 	.word	0x20002be3

08005220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005224:	e7fe      	b.n	8005224 <NMI_Handler+0x4>

08005226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800522a:	e7fe      	b.n	800522a <HardFault_Handler+0x4>

0800522c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005230:	e7fe      	b.n	8005230 <MemManage_Handler+0x4>

08005232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005236:	e7fe      	b.n	8005236 <BusFault_Handler+0x4>

08005238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800523c:	e7fe      	b.n	800523c <UsageFault_Handler+0x4>

0800523e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <SysTick_Handler+0x30>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	3301      	adds	r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b08      	ldr	r3, [pc, #32]	; (8005298 <SysTick_Handler+0x30>)
 8005278:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <SysTick_Handler+0x30>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b09      	cmp	r3, #9
 8005282:	d904      	bls.n	800528e <SysTick_Handler+0x26>
    FatFsCnt = 0;
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <SysTick_Handler+0x30>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 800528a:	f7ff ffa5 	bl	80051d8 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800528e:	f000 fcc3 	bl	8005c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20002be1 	.word	0x20002be1

0800529c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <TIM2_IRQHandler+0x10>)
 80052a2:	f004 fd5d 	bl	8009d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200005d8 	.word	0x200005d8

080052b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80052b4:	4802      	ldr	r0, [pc, #8]	; (80052c0 <TIM6_DAC_IRQHandler+0x10>)
 80052b6:	f004 fd53 	bl	8009d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200006b0 	.word	0x200006b0

080052c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052c8:	4802      	ldr	r0, [pc, #8]	; (80052d4 <DMA2_Stream0_IRQHandler+0x10>)
 80052ca:	f001 fc85 	bl	8006bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2000042c 	.word	0x2000042c

080052d8 <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary( uint16_t ad ) {
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d902      	bls.n	80052f6 <getSWrotary+0x1e>
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e0b6      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 80052fc:	d807      	bhi.n	800530e <getSWrotary+0x36>
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	f640 6245 	movw	r2, #3653	; 0xe45
 8005304:	4293      	cmp	r3, r2
 8005306:	d902      	bls.n	800530e <getSWrotary+0x36>
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e0aa      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8005314:	d207      	bcs.n	8005326 <getSWrotary+0x4e>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	f640 22ba 	movw	r2, #2746	; 0xaba
 800531c:	4293      	cmp	r3, r2
 800531e:	d902      	bls.n	8005326 <getSWrotary+0x4e>
 8005320:	2302      	movs	r3, #2
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e09e      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800532c:	d206      	bcs.n	800533c <getSWrotary+0x64>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8005334:	d302      	bcc.n	800533c <getSWrotary+0x64>
 8005336:	2303      	movs	r3, #3
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e093      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	f640 1237 	movw	r2, #2359	; 0x937
 8005342:	4293      	cmp	r3, r2
 8005344:	d807      	bhi.n	8005356 <getSWrotary+0x7e>
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	f640 1206 	movw	r2, #2310	; 0x906
 800534c:	4293      	cmp	r3, r2
 800534e:	d902      	bls.n	8005356 <getSWrotary+0x7e>
 8005350:	2304      	movs	r3, #4
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e086      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f640 02a6 	movw	r2, #2214	; 0x8a6
 800535c:	4293      	cmp	r3, r2
 800535e:	d807      	bhi.n	8005370 <getSWrotary+0x98>
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	f640 0274 	movw	r2, #2164	; 0x874
 8005366:	4293      	cmp	r3, r2
 8005368:	d902      	bls.n	8005370 <getSWrotary+0x98>
 800536a:	2305      	movs	r3, #5
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e079      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	f240 7242 	movw	r2, #1858	; 0x742
 8005376:	4293      	cmp	r3, r2
 8005378:	d807      	bhi.n	800538a <getSWrotary+0xb2>
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	f240 7211 	movw	r2, #1809	; 0x711
 8005380:	4293      	cmp	r3, r2
 8005382:	d902      	bls.n	800538a <getSWrotary+0xb2>
 8005384:	2306      	movs	r3, #6
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e06c      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8005390:	d207      	bcs.n	80053a2 <getSWrotary+0xca>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f240 62b6 	movw	r2, #1718	; 0x6b6
 8005398:	4293      	cmp	r3, r2
 800539a:	d902      	bls.n	80053a2 <getSWrotary+0xca>
 800539c:	2307      	movs	r3, #7
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e060      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	f240 6259 	movw	r2, #1625	; 0x659
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d806      	bhi.n	80053ba <getSWrotary+0xe2>
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 80053b2:	d902      	bls.n	80053ba <getSWrotary+0xe2>
 80053b4:	2308      	movs	r3, #8
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e054      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	f240 6213 	movw	r2, #1555	; 0x613
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d806      	bhi.n	80053d2 <getSWrotary+0xfa>
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80053ca:	d302      	bcc.n	80053d2 <getSWrotary+0xfa>
 80053cc:	2309      	movs	r3, #9
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e048      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	f240 525c 	movw	r2, #1372	; 0x55c
 80053d8:	4293      	cmp	r3, r2
 80053da:	d807      	bhi.n	80053ec <getSWrotary+0x114>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	f240 522d 	movw	r2, #1325	; 0x52d
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d902      	bls.n	80053ec <getSWrotary+0x114>
 80053e6:	230a      	movs	r3, #10
 80053e8:	73fb      	strb	r3, [r7, #15]
 80053ea:	e03b      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	f240 522a 	movw	r2, #1322	; 0x52a
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d807      	bhi.n	8005406 <getSWrotary+0x12e>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d902      	bls.n	8005406 <getSWrotary+0x12e>
 8005400:	230b      	movs	r3, #11
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e02e      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f240 42ec 	movw	r2, #1260	; 0x4ec
 800540c:	4293      	cmp	r3, r2
 800540e:	d807      	bhi.n	8005420 <getSWrotary+0x148>
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005416:	4293      	cmp	r3, r2
 8005418:	d902      	bls.n	8005420 <getSWrotary+0x148>
 800541a:	230c      	movs	r3, #12
 800541c:	73fb      	strb	r3, [r7, #15]
 800541e:	e021      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 8005426:	d807      	bhi.n	8005438 <getSWrotary+0x160>
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	f240 428a 	movw	r2, #1162	; 0x48a
 800542e:	4293      	cmp	r3, r2
 8005430:	d902      	bls.n	8005438 <getSWrotary+0x160>
 8005432:	230d      	movs	r3, #13
 8005434:	73fb      	strb	r3, [r7, #15]
 8005436:	e015      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800543e:	d207      	bcs.n	8005450 <getSWrotary+0x178>
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	f240 4222 	movw	r2, #1058	; 0x422
 8005446:	4293      	cmp	r3, r2
 8005448:	d902      	bls.n	8005450 <getSWrotary+0x178>
 800544a:	230e      	movs	r3, #14
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e009      	b.n	8005464 <getSWrotary+0x18c>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8005456:	d805      	bhi.n	8005464 <getSWrotary+0x18c>
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 800545e:	d901      	bls.n	8005464 <getSWrotary+0x18c>
 8005460:	230f      	movs	r3, #15
 8005462:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact( uint16_t ad ) {
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = SW_NONE;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005486:	4293      	cmp	r3, r2
 8005488:	d902      	bls.n	8005490 <getSWtact+0x1e>
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	e037      	b.n	8005500 <getSWtact+0x8e>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8005496:	4293      	cmp	r3, r2
 8005498:	d807      	bhi.n	80054aa <getSWtact+0x38>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	f640 422c 	movw	r2, #3116	; 0xc2c
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d902      	bls.n	80054aa <getSWtact+0x38>
 80054a4:	2305      	movs	r3, #5
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e02a      	b.n	8005500 <getSWtact+0x8e>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	f640 32dd 	movw	r2, #3037	; 0xbdd
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d807      	bhi.n	80054c4 <getSWtact+0x52>
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	f640 222b 	movw	r2, #2603	; 0xa2b
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d902      	bls.n	80054c4 <getSWtact+0x52>
 80054be:	2304      	movs	r3, #4
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	e01d      	b.n	8005500 <getSWtact+0x8e>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	f640 1256 	movw	r2, #2390	; 0x956
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d807      	bhi.n	80054de <getSWtact+0x6c>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	f240 729e 	movw	r2, #1950	; 0x79e
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d902      	bls.n	80054de <getSWtact+0x6c>
 80054d8:	2303      	movs	r3, #3
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e010      	b.n	8005500 <getSWtact+0x8e>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80054e4:	d207      	bcs.n	80054f6 <getSWtact+0x84>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d902      	bls.n	80054f6 <getSWtact+0x84>
 80054f0:	2302      	movs	r3, #2
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	e004      	b.n	8005500 <getSWtact+0x8e>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b95      	cmp	r3, #149	; 0x95
 80054fa:	d801      	bhi.n	8005500 <getSWtact+0x8e>
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
	return 1;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_kill>:

int _kill(int pid, int sig)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005528:	f008 ff3c 	bl	800e3a4 <__errno>
 800552c:	4603      	mov	r3, r0
 800552e:	2216      	movs	r2, #22
 8005530:	601a      	str	r2, [r3, #0]
	return -1;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <_exit>:

void _exit (int status)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005546:	f04f 31ff 	mov.w	r1, #4294967295
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ffe7 	bl	800551e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005550:	e7fe      	b.n	8005550 <_exit+0x12>

08005552 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e00a      	b.n	800557a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005564:	f3af 8000 	nop.w
 8005568:	4601      	mov	r1, r0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	60ba      	str	r2, [r7, #8]
 8005570:	b2ca      	uxtb	r2, r1
 8005572:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3301      	adds	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	dbf0      	blt.n	8005564 <_read+0x12>
	}

return len;
 8005582:	687b      	ldr	r3, [r7, #4]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e009      	b.n	80055b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	60ba      	str	r2, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3301      	adds	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	dbf1      	blt.n	800559e <_write+0x12>
	}
	return len;
 80055ba:	687b      	ldr	r3, [r7, #4]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <_close>:

int _close(int file)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	return -1;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055ec:	605a      	str	r2, [r3, #4]
	return 0;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <_isatty>:

int _isatty(int file)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	return 1;
 8005604:	2301      	movs	r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
	return 0;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005634:	4a14      	ldr	r2, [pc, #80]	; (8005688 <_sbrk+0x5c>)
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <_sbrk+0x60>)
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <_sbrk+0x64>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <_sbrk+0x64>)
 800564a:	4a12      	ldr	r2, [pc, #72]	; (8005694 <_sbrk+0x68>)
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <_sbrk+0x64>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d207      	bcs.n	800566c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800565c:	f008 fea2 	bl	800e3a4 <__errno>
 8005660:	4603      	mov	r3, r0
 8005662:	220c      	movs	r2, #12
 8005664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	e009      	b.n	8005680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <_sbrk+0x64>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <_sbrk+0x64>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <_sbrk+0x64>)
 800567c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20020000 	.word	0x20020000
 800568c:	00000400 	.word	0x00000400
 8005690:	20002be8 	.word	0x20002be8
 8005694:	20002e90 	.word	0x20002e90

08005698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <SystemInit+0x20>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	4a05      	ldr	r2, [pc, #20]	; (80056b8 <SystemInit+0x20>)
 80056a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	cntRun++;
 80056c4:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	4a43      	ldr	r2, [pc, #268]	; (80057d8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80056cc:	6013      	str	r3, [r2, #0]
    cnt5ms++;
 80056ce:	4b43      	ldr	r3, [pc, #268]	; (80057dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	4a41      	ldr	r2, [pc, #260]	; (80057dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80056d6:	6013      	str	r3, [r2, #0]
    // if (trace_test == 1 || (pattern > 10 && pattern < 100) ) {
    //     if (abs(yawPwm) > 400) {
    //         cntEmc1++;
    //     }
    // }
    if (pattern < 10 ||	 pattern > 100) {
 80056d8:	4b41      	ldr	r3, [pc, #260]	; (80057e0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d903      	bls.n	80056e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b64      	cmp	r3, #100	; 0x64
 80056e6:	d917      	bls.n	8005718 <HAL_TIM_PeriodElapsedCallback+0x5c>
        cntSW++;
 80056e8:	4b3e      	ldr	r3, [pc, #248]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	4b3c      	ldr	r3, [pc, #240]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80056f2:	801a      	strh	r2, [r3, #0]
        cntSetup1++;
 80056f4:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80056fe:	801a      	strh	r2, [r3, #0]
        cntSetup2++;
 8005700:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 800570a:	801a      	strh	r2, [r3, #0]
        cntSetup3++;
 800570c:	4b38      	ldr	r3, [pc, #224]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005716:	801a      	strh	r2, [r3, #0]
    }

    // スイッチの入力を取得
    if( cntSW >= 100 ) {
 8005718:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	2b63      	cmp	r3, #99	; 0x63
 800571e:	d928      	bls.n	8005772 <HAL_TIM_PeriodElapsedCallback+0xb6>
        HAL_ADC_Start(&hadc2);
 8005720:	4834      	ldr	r0, [pc, #208]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005722:	f000 fb01 	bl	8005d28 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc2, 1);
 8005726:	2101      	movs	r1, #1
 8005728:	4832      	ldr	r0, [pc, #200]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800572a:	f000 fbcf 	bl	8005ecc <HAL_ADC_PollForConversion>
        swValTact = getSWtact(HAL_ADC_GetValue(&hadc2));
 800572e:	4831      	ldr	r0, [pc, #196]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005730:	f000 fd68 	bl	8006204 <HAL_ADC_GetValue>
 8005734:	4603      	mov	r3, r0
 8005736:	b29b      	uxth	r3, r3
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fe9a 	bl	8005472 <getSWtact>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005744:	701a      	strb	r2, [r3, #0]

        HAL_ADC_Start(&hadc2);
 8005746:	482b      	ldr	r0, [pc, #172]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005748:	f000 faee 	bl	8005d28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1);
 800574c:	2101      	movs	r1, #1
 800574e:	4829      	ldr	r0, [pc, #164]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005750:	f000 fbbc 	bl	8005ecc <HAL_ADC_PollForConversion>
        swValRotary = getSWrotary(HAL_ADC_GetValue(&hadc2));
 8005754:	4827      	ldr	r0, [pc, #156]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005756:	f000 fd55 	bl	8006204 <HAL_ADC_GetValue>
 800575a:	4603      	mov	r3, r0
 800575c:	b29b      	uxth	r3, r3
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fdba 	bl	80052d8 <getSWrotary>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x140>)
 800576a:	701a      	strb	r2, [r3, #0]
        // HAL_ADC_Stop(&hadc2);
        cntSW = 0;
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800576e:	2200      	movs	r2, #0
 8005770:	801a      	strh	r2, [r3, #0]
    }
    if (modeLCD == 1) lcdShowProcess();   // LCD
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_TIM_PeriodElapsedCallback+0xc2>
 800577a:	f7fb fcff 	bl	800117c <lcdShowProcess>
    

    switch(cnt5ms) {
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	2b04      	cmp	r3, #4
 8005786:	d81a      	bhi.n	80057be <HAL_TIM_PeriodElapsedCallback+0x102>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057bf 	.word	0x080057bf
 800579c:	080057bf 	.word	0x080057bf
 80057a0:	080057b7 	.word	0x080057b7
        case 1:

            break;
        case 2:
            getCurrent();               // 電流計測
 80057a4:	f7fb ff88 	bl	80016b8 <getCurrent>
            // getBNO055Acceleration();    // 加速度取得       
            getBNO055Gyro();    // 角速度取得
 80057a8:	f7fb fe68 	bl	800147c <getBNO055Gyro>
            calcDegrees();
 80057ac:	f7fb fecc 	bl	8001548 <calcDegrees>
            motorControlYaw();
 80057b0:	f000 f8ee 	bl	8005990 <motorControlYaw>
            break;
 80057b4:	e004      	b.n	80057c0 <HAL_TIM_PeriodElapsedCallback+0x104>
        case 3:
            break;
        case 4:
            break;
        case 5:
            cnt5ms = 0;
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
            break;
 80057bc:	e000      	b.n	80057c0 <HAL_TIM_PeriodElapsedCallback+0x104>
        default:
            break;
 80057be:	bf00      	nop
    //     printf("acceleValX %d\t acceleValY %d\t acceleValZ %d\n",acceleValX, acceleValY, acceleValZ);
        
    // }

    // 仮想センサステア計算
    getAngleSensor();
 80057c0:	f7fc ff92 	bl	80026e8 <getAngleSensor>
    // Encoder
    getEncoder();
 80057c4:	f7fc f982 	bl	8001acc <getEncoder>
    // PWM
    motorControlTrace();
 80057c8:	f7fd f8be 	bl	8002948 <motorControlTrace>
    motorControlSpeed();
 80057cc:	f000 f81c 	bl	8005808 <motorControlSpeed>
    
    
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20002bec 	.word	0x20002bec
 80057dc:	20002bf0 	.word	0x20002bf0
 80057e0:	200002c8 	.word	0x200002c8
 80057e4:	20002be6 	.word	0x20002be6
 80057e8:	20002bd2 	.word	0x20002bd2
 80057ec:	20002bd4 	.word	0x20002bd4
 80057f0:	20002bd6 	.word	0x20002bd6
 80057f4:	200003e4 	.word	0x200003e4
 80057f8:	20002be4 	.word	0x20002be4
 80057fc:	20002be5 	.word	0x20002be5
 8005800:	20000002 	.word	0x20000002
 8005804:	00000000 	.word	0x00000000

08005808 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 800580e:	4b54      	ldr	r3, [pc, #336]	; (8005960 <motorControlSpeed+0x158>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	4610      	mov	r0, r2
 8005816:	4619      	mov	r1, r3
 8005818:	f7fb f9be 	bl	8000b98 <__aeabi_d2iz>
 800581c:	4603      	mov	r3, r0
 800581e:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 8005820:	4b50      	ldr	r3, [pc, #320]	; (8005964 <motorControlSpeed+0x15c>)
 8005822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005826:	61bb      	str	r3, [r7, #24]

	// デモモードのときゲイン変更
	if ( demo ) {
 8005828:	4b4f      	ldr	r3, [pc, #316]	; (8005968 <motorControlSpeed+0x160>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 8005830:	4b4e      	ldr	r3, [pc, #312]	; (800596c <motorControlSpeed+0x164>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8005838:	4b4d      	ldr	r3, [pc, #308]	; (8005970 <motorControlSpeed+0x168>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8005840:	4b4c      	ldr	r3, [pc, #304]	; (8005974 <motorControlSpeed+0x16c>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005848:	e00b      	b.n	8005862 <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 800584a:	4b48      	ldr	r3, [pc, #288]	; (800596c <motorControlSpeed+0x164>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8005852:	4b47      	ldr	r3, [pc, #284]	; (8005970 <motorControlSpeed+0x168>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 800585a:	4b46      	ldr	r3, [pc, #280]	; (8005974 <motorControlSpeed+0x16c>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 800586a:	69f8      	ldr	r0, [r7, #28]
 800586c:	f7fa fe7a 	bl	8000564 <__aeabi_i2d>
 8005870:	4b41      	ldr	r3, [pc, #260]	; (8005978 <motorControlSpeed+0x170>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fb f947 	bl	8000b08 <__aeabi_dcmpeq>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <motorControlSpeed+0x86>
 8005880:	493e      	ldr	r1, [pc, #248]	; (800597c <motorControlSpeed+0x174>)
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 800588e:	6978      	ldr	r0, [r7, #20]
 8005890:	f7fa fe68 	bl	8000564 <__aeabi_i2d>
 8005894:	a330      	add	r3, pc, #192	; (adr r3, 8005958 <motorControlSpeed+0x150>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fecd 	bl	8000638 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4b35      	ldr	r3, [pc, #212]	; (800597c <motorControlSpeed+0x174>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fd0e 	bl	80002cc <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4931      	ldr	r1, [pc, #196]	; (800597c <motorControlSpeed+0x174>)
 80058b6:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <motorControlSpeed+0x178>)
 80058bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058c0:	461a      	mov	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;		// 比例
 80058c8:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 80058d4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fe43 	bl	8000564 <__aeabi_i2d>
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <motorControlSpeed+0x174>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fea8 	bl	8000638 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4610      	mov	r0, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fb f952 	bl	8000b98 <__aeabi_d2iz>
 80058f4:	4603      	mov	r3, r0
 80058f6:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;		// 微分
 80058f8:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	105b      	asrs	r3, r3, #1
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591c:	dd02      	ble.n	8005924 <motorControlSpeed+0x11c>
 800591e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800592a:	da01      	bge.n	8005930 <motorControlSpeed+0x128>
 800592c:	4b15      	ldr	r3, [pc, #84]	; (8005984 <motorControlSpeed+0x17c>)
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	b21a      	sxth	r2, r3
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <motorControlSpeed+0x180>)
 8005936:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	b21a      	sxth	r2, r3
 800593c:	4b10      	ldr	r3, [pc, #64]	; (8005980 <motorControlSpeed+0x178>)
 800593e:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 8005940:	69f8      	ldr	r0, [r7, #28]
 8005942:	f7fa fe0f 	bl	8000564 <__aeabi_i2d>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	490b      	ldr	r1, [pc, #44]	; (8005978 <motorControlSpeed+0x170>)
 800594c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005950:	bf00      	nop
 8005952:	3728      	adds	r7, #40	; 0x28
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	d2f1a9fc 	.word	0xd2f1a9fc
 800595c:	3f50624d 	.word	0x3f50624d
 8005960:	20002bf8 	.word	0x20002bf8
 8005964:	200002f0 	.word	0x200002f0
 8005968:	20002c18 	.word	0x20002c18
 800596c:	20000030 	.word	0x20000030
 8005970:	20000031 	.word	0x20000031
 8005974:	20002c19 	.word	0x20002c19
 8005978:	20002c08 	.word	0x20002c08
 800597c:	20002c10 	.word	0x20002c10
 8005980:	20002c00 	.word	0x20002c00
 8005984:	fffffc18 	.word	0xfffffc18
 8005988:	20002bf4 	.word	0x20002bf4
 800598c:	00000000 	.word	0x00000000

08005990 <motorControlYaw>:
// モジュール名 motorControlYaw
// 処理概要     角速度制御時のPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlYaw(void) {
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b08c      	sub	sp, #48	; 0x30
 8005994:	af00      	add	r7, sp, #0
	double iP, iD, iI;
	int32_t Dev, Dif, kp, ki, kd, iRet;
	
	//サーボモータ用PWM値計算
	kp = kp3_buff;
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <motorControlYaw+0x170>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
	ki = ki3_buff;
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <motorControlYaw+0x174>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
	kd = kd3_buff;
 80059a2:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <motorControlYaw+0x178>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	623b      	str	r3, [r7, #32]
	Dev = (gyroValZ - (int32_t)anglevelocity);	// 目標値-現在値
 80059a8:	4b58      	ldr	r3, [pc, #352]	; (8005b0c <motorControlYaw+0x17c>)
 80059aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80059ae:	4b58      	ldr	r3, [pc, #352]	; (8005b10 <motorControlYaw+0x180>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fb f8ee 	bl	8000b98 <__aeabi_d2iz>
 80059bc:	4603      	mov	r3, r0
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fa fdd0 	bl	8000564 <__aeabi_i2d>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4620      	mov	r0, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	f7fa fc7c 	bl	80002c8 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	f7fb f8de 	bl	8000b98 <__aeabi_d2iz>
 80059dc:	4603      	mov	r3, r0
 80059de:	61fb      	str	r3, [r7, #28]
	// I成分積算
	Int3 += (double)Dev * 0.005;
 80059e0:	69f8      	ldr	r0, [r7, #28]
 80059e2:	f7fa fdbf 	bl	8000564 <__aeabi_i2d>
 80059e6:	a344      	add	r3, pc, #272	; (adr r3, 8005af8 <motorControlYaw+0x168>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fe24 	bl	8000638 <__aeabi_dmul>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <motorControlYaw+0x184>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fc65 	bl	80002cc <__adddf3>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4943      	ldr	r1, [pc, #268]	; (8005b14 <motorControlYaw+0x184>)
 8005a08:	e9c1 2300 	strd	r2, r3, [r1]
	// if ( Int3 > 5000 ) Int3 = 5000;		// I成分リミット
	// else if ( Int3 < -5000 ) Int3 = -5000;
	Dif = ( Dev - angleZBefore ) * 1;	// dゲイン1/1000倍
 8005a0c:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <motorControlYaw+0x188>)
 8005a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a12:	461a      	mov	r2, r3
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]

	iP = (double)kp * Dev;	// 比例
 8005a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1c:	f7fa fda2 	bl	8000564 <__aeabi_i2d>
 8005a20:	4604      	mov	r4, r0
 8005a22:	460d      	mov	r5, r1
 8005a24:	69f8      	ldr	r0, [r7, #28]
 8005a26:	f7fa fd9d 	bl	8000564 <__aeabi_i2d>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4629      	mov	r1, r5
 8005a32:	f7fa fe01 	bl	8000638 <__aeabi_dmul>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	iI = (double)ki * Int3;	// 積分
 8005a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a40:	f7fa fd90 	bl	8000564 <__aeabi_i2d>
 8005a44:	4b33      	ldr	r3, [pc, #204]	; (8005b14 <motorControlYaw+0x184>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fdf5 	bl	8000638 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	iD = (double)kd * Dif;	// 微分
 8005a56:	6a38      	ldr	r0, [r7, #32]
 8005a58:	f7fa fd84 	bl	8000564 <__aeabi_i2d>
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	69b8      	ldr	r0, [r7, #24]
 8005a62:	f7fa fd7f 	bl	8000564 <__aeabi_i2d>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fa fde3 	bl	8000638 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9c7 2300 	strd	r2, r3, [r7]
	iRet = (int32_t)iP + iI + iD;
 8005a7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a7e:	f7fb f88b 	bl	8000b98 <__aeabi_d2iz>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fa fd6d 	bl	8000564 <__aeabi_i2d>
 8005a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8e:	f7fa fc1d 	bl	80002cc <__adddf3>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9e:	f7fa fc15 	bl	80002cc <__adddf3>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f7fb f875 	bl	8000b98 <__aeabi_d2iz>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	iRet = iRet >> 2;				// PWMを0～100近傍に収める
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	109b      	asrs	r3, r3, #2
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005abe:	dd02      	ble.n	8005ac6 <motorControlYaw+0x136>
 8005ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ( iRet <  -1000 ) iRet = -1000;
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005acc:	da01      	bge.n	8005ad2 <motorControlYaw+0x142>
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <motorControlYaw+0x18c>)
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	yawPwm = iRet;
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	b21a      	sxth	r2, r3
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <motorControlYaw+0x190>)
 8005ad8:	801a      	strh	r2, [r3, #0]
	angleZBefore = Dev;				// 次回はこの値が1ms前の値となる
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <motorControlYaw+0x188>)
 8005ae0:	801a      	strh	r2, [r3, #0]
	anglevelocityBefore = gyroValZ;
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <motorControlYaw+0x17c>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	490e      	ldr	r1, [pc, #56]	; (8005b24 <motorControlYaw+0x194>)
 8005aea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005aee:	bf00      	nop
 8005af0:	3730      	adds	r7, #48	; 0x30
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}
 8005af6:	bf00      	nop
 8005af8:	47ae147b 	.word	0x47ae147b
 8005afc:	3f747ae1 	.word	0x3f747ae1
 8005b00:	20000032 	.word	0x20000032
 8005b04:	20000033 	.word	0x20000033
 8005b08:	20000034 	.word	0x20000034
 8005b0c:	20000278 	.word	0x20000278
 8005b10:	20002c20 	.word	0x20002c20
 8005b14:	20002c38 	.word	0x20002c38
 8005b18:	20002c32 	.word	0x20002c32
 8005b1c:	fffffc18 	.word	0xfffffc18
 8005b20:	20002c30 	.word	0x20002c30
 8005b24:	20002c28 	.word	0x20002c28

08005b28 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b28:	480c      	ldr	r0, [pc, #48]	; (8005b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b2a:	490d      	ldr	r1, [pc, #52]	; (8005b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b30:	e002      	b.n	8005b38 <LoopCopyDataInit>

08005b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b36:	3304      	adds	r3, #4

08005b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b3c:	d3f9      	bcc.n	8005b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b40:	4c0a      	ldr	r4, [pc, #40]	; (8005b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b44:	e001      	b.n	8005b4a <LoopFillZerobss>

08005b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b48:	3204      	adds	r2, #4

08005b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b4c:	d3fb      	bcc.n	8005b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b4e:	f7ff fda3 	bl	8005698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b52:	f008 fc2d 	bl	800e3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b56:	f7fc fff1 	bl	8002b3c <main>
  bx  lr    
 8005b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8005b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b60:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8005b64:	08014158 	.word	0x08014158
  ldr r2, =_sbss
 8005b68:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8005b6c:	20002e90 	.word	0x20002e90

08005b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b70:	e7fe      	b.n	8005b70 <ADC_IRQHandler>
	...

08005b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b78:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <HAL_Init+0x40>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <HAL_Init+0x40>)
 8005b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_Init+0x40>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <HAL_Init+0x40>)
 8005b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b90:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_Init+0x40>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <HAL_Init+0x40>)
 8005b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b9c:	2003      	movs	r0, #3
 8005b9e:	f000 fed3 	bl	8006948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f000 f808 	bl	8005bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ba8:	f7fe ff9a 	bl	8004ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40023c00 	.word	0x40023c00

08005bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_InitTick+0x54>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_InitTick+0x58>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 feeb 	bl	80069b2 <HAL_SYSTICK_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e00e      	b.n	8005c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b0f      	cmp	r3, #15
 8005bea:	d80a      	bhi.n	8005c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bec:	2200      	movs	r2, #0
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	f000 feb3 	bl	800695e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bf8:	4a06      	ldr	r2, [pc, #24]	; (8005c14 <HAL_InitTick+0x5c>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2000002c 	.word	0x2000002c
 8005c10:	2000003c 	.word	0x2000003c
 8005c14:	20000038 	.word	0x20000038

08005c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <HAL_IncTick+0x20>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_IncTick+0x24>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4413      	add	r3, r2
 8005c28:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <HAL_IncTick+0x24>)
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	2000003c 	.word	0x2000003c
 8005c3c:	20002c40 	.word	0x20002c40

08005c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return uwTick;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <HAL_GetTick+0x14>)
 8005c46:	681b      	ldr	r3, [r3, #0]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20002c40 	.word	0x20002c40

08005c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c60:	f7ff ffee 	bl	8005c40 <HAL_GetTick>
 8005c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d005      	beq.n	8005c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <HAL_Delay+0x44>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c7e:	bf00      	nop
 8005c80:	f7ff ffde 	bl	8005c40 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d8f7      	bhi.n	8005c80 <HAL_Delay+0x28>
  {
  }
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000003c 	.word	0x2000003c

08005ca0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e033      	b.n	8005d1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fe ff36 	bl	8004b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ce6:	f023 0302 	bic.w	r3, r3, #2
 8005cea:	f043 0202 	orr.w	r2, r3, #2
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fbda 	bl	80064ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d0e:	e001      	b.n	8005d14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_ADC_Start+0x1a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0b2      	b.n	8005ea8 <HAL_ADC_Start+0x180>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d018      	beq.n	8005d8a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d68:	4b52      	ldr	r3, [pc, #328]	; (8005eb4 <HAL_ADC_Start+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a52      	ldr	r2, [pc, #328]	; (8005eb8 <HAL_ADC_Start+0x190>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9a      	lsrs	r2, r3, #18
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d7c:	e002      	b.n	8005d84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f9      	bne.n	8005d7e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d17a      	bne.n	8005e8e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd6:	d106      	bne.n	8005de6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f023 0206 	bic.w	r2, r3, #6
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
 8005de4:	e002      	b.n	8005dec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005df4:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_ADC_Start+0x194>)
 8005df6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d12a      	bne.n	8005e64 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_ADC_Start+0x198>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d015      	beq.n	8005e44 <HAL_ADC_Start+0x11c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <HAL_ADC_Start+0x19c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d105      	bne.n	8005e2e <HAL_ADC_Start+0x106>
 8005e22:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <HAL_ADC_Start+0x194>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <HAL_ADC_Start+0x1a0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d136      	bne.n	8005ea6 <HAL_ADC_Start+0x17e>
 8005e38:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_ADC_Start+0x194>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d130      	bne.n	8005ea6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d129      	bne.n	8005ea6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	e020      	b.n	8005ea6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_ADC_Start+0x198>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d11b      	bne.n	8005ea6 <HAL_ADC_Start+0x17e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d114      	bne.n	8005ea6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	e00b      	b.n	8005ea6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0210 	orr.w	r2, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	2000002c 	.word	0x2000002c
 8005eb8:	431bde83 	.word	0x431bde83
 8005ebc:	40012300 	.word	0x40012300
 8005ec0:	40012000 	.word	0x40012000
 8005ec4:	40012100 	.word	0x40012100
 8005ec8:	40012200 	.word	0x40012200

08005ecc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee8:	d113      	bne.n	8005f12 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef8:	d10b      	bne.n	8005f12 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e063      	b.n	8005fda <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f12:	f7ff fe95 	bl	8005c40 <HAL_GetTick>
 8005f16:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f18:	e021      	b.n	8005f5e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d01d      	beq.n	8005f5e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <HAL_ADC_PollForConversion+0x6c>
 8005f28:	f7ff fe8a 	bl	8005c40 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d212      	bcs.n	8005f5e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d00b      	beq.n	8005f5e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e03d      	b.n	8005fda <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d1d6      	bne.n	8005f1a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0212 	mvn.w	r2, #18
 8005f74:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d123      	bne.n	8005fd8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11f      	bne.n	8005fd8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d111      	bne.n	8005fd8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_ADC_Start_DMA+0x1e>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e0e9      	b.n	80061d6 <HAL_ADC_Start_DMA+0x1f2>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d018      	beq.n	800604a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006028:	4b6d      	ldr	r3, [pc, #436]	; (80061e0 <HAL_ADC_Start_DMA+0x1fc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6d      	ldr	r2, [pc, #436]	; (80061e4 <HAL_ADC_Start_DMA+0x200>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0c9a      	lsrs	r2, r3, #18
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800603c:	e002      	b.n	8006044 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3b01      	subs	r3, #1
 8006042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f9      	bne.n	800603e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d107      	bne.n	800606a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 80a1 	bne.w	80061bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d106      	bne.n	80060c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f023 0206 	bic.w	r2, r3, #6
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	645a      	str	r2, [r3, #68]	; 0x44
 80060c6:	e002      	b.n	80060ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060d6:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <HAL_ADC_Start_DMA+0x204>)
 80060d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	4a43      	ldr	r2, [pc, #268]	; (80061ec <HAL_ADC_Start_DMA+0x208>)
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	4a42      	ldr	r2, [pc, #264]	; (80061f0 <HAL_ADC_Start_DMA+0x20c>)
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <HAL_ADC_Start_DMA+0x210>)
 80060f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800610a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	334c      	adds	r3, #76	; 0x4c
 8006126:	4619      	mov	r1, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f000 fcfc 	bl	8006b28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	2b00      	cmp	r3, #0
 800613a:	d12a      	bne.n	8006192 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <HAL_ADC_Start_DMA+0x214>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d015      	beq.n	8006172 <HAL_ADC_Start_DMA+0x18e>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2c      	ldr	r2, [pc, #176]	; (80061fc <HAL_ADC_Start_DMA+0x218>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d105      	bne.n	800615c <HAL_ADC_Start_DMA+0x178>
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <HAL_ADC_Start_DMA+0x204>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <HAL_ADC_Start_DMA+0x21c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d136      	bne.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
 8006166:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <HAL_ADC_Start_DMA+0x204>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b00      	cmp	r3, #0
 8006170:	d130      	bne.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d129      	bne.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	e020      	b.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <HAL_ADC_Start_DMA+0x214>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d11b      	bne.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d114      	bne.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	e00b      	b.n	80061d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0210 	orr.w	r2, r3, #16
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061cc:	f043 0201 	orr.w	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	2000002c 	.word	0x2000002c
 80061e4:	431bde83 	.word	0x431bde83
 80061e8:	40012300 	.word	0x40012300
 80061ec:	080066a5 	.word	0x080066a5
 80061f0:	0800675f 	.word	0x0800675f
 80061f4:	0800677b 	.word	0x0800677b
 80061f8:	40012000 	.word	0x40012000
 80061fc:	40012100 	.word	0x40012100
 8006200:	40012200 	.word	0x40012200

08006204 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_ADC_ConfigChannel+0x1c>
 8006260:	2302      	movs	r3, #2
 8006262:	e113      	b.n	800648c <HAL_ADC_ConfigChannel+0x244>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b09      	cmp	r3, #9
 8006272:	d925      	bls.n	80062c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68d9      	ldr	r1, [r3, #12]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	3b1e      	subs	r3, #30
 800628a:	2207      	movs	r2, #7
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	43da      	mvns	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	400a      	ands	r2, r1
 8006298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68d9      	ldr	r1, [r3, #12]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4618      	mov	r0, r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	4403      	add	r3, r0
 80062b2:	3b1e      	subs	r3, #30
 80062b4:	409a      	lsls	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e022      	b.n	8006306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6919      	ldr	r1, [r3, #16]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	2207      	movs	r2, #7
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43da      	mvns	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	400a      	ands	r2, r1
 80062e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6919      	ldr	r1, [r3, #16]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	4618      	mov	r0, r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4403      	add	r3, r0
 80062fc:	409a      	lsls	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b06      	cmp	r3, #6
 800630c:	d824      	bhi.n	8006358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	3b05      	subs	r3, #5
 8006320:	221f      	movs	r2, #31
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43da      	mvns	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	400a      	ands	r2, r1
 800632e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	4618      	mov	r0, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	3b05      	subs	r3, #5
 800634a:	fa00 f203 	lsl.w	r2, r0, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	635a      	str	r2, [r3, #52]	; 0x34
 8006356:	e04c      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d824      	bhi.n	80063aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	3b23      	subs	r3, #35	; 0x23
 8006372:	221f      	movs	r2, #31
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	43da      	mvns	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	400a      	ands	r2, r1
 8006380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	4618      	mov	r0, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	3b23      	subs	r3, #35	; 0x23
 800639c:	fa00 f203 	lsl.w	r2, r0, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
 80063a8:	e023      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	3b41      	subs	r3, #65	; 0x41
 80063bc:	221f      	movs	r2, #31
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43da      	mvns	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	400a      	ands	r2, r1
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4618      	mov	r0, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	3b41      	subs	r3, #65	; 0x41
 80063e6:	fa00 f203 	lsl.w	r2, r0, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063f2:	4b29      	ldr	r3, [pc, #164]	; (8006498 <HAL_ADC_ConfigChannel+0x250>)
 80063f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_ADC_ConfigChannel+0x254>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10f      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1d8>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b12      	cmp	r3, #18
 8006406:	d10b      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <HAL_ADC_ConfigChannel+0x254>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d12b      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x23a>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <HAL_ADC_ConfigChannel+0x258>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <HAL_ADC_ConfigChannel+0x1f4>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b11      	cmp	r3, #17
 800643a:	d122      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <HAL_ADC_ConfigChannel+0x258>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <HAL_ADC_ConfigChannel+0x25c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <HAL_ADC_ConfigChannel+0x260>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	0c9a      	lsrs	r2, r3, #18
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006474:	e002      	b.n	800647c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	3b01      	subs	r3, #1
 800647a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f9      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40012300 	.word	0x40012300
 800649c:	40012000 	.word	0x40012000
 80064a0:	10000012 	.word	0x10000012
 80064a4:	2000002c 	.word	0x2000002c
 80064a8:	431bde83 	.word	0x431bde83

080064ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064b4:	4b79      	ldr	r3, [pc, #484]	; (800669c <ADC_Init+0x1f0>)
 80064b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6859      	ldr	r1, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	021a      	lsls	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6899      	ldr	r1, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	4a58      	ldr	r2, [pc, #352]	; (80066a0 <ADC_Init+0x1f4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	e00f      	b.n	80065aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0202 	bic.w	r2, r2, #2
 80065b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6899      	ldr	r1, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7e1b      	ldrb	r3, [r3, #24]
 80065c4:	005a      	lsls	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01b      	beq.n	8006610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80065f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	3b01      	subs	r3, #1
 8006604:	035a      	lsls	r2, r3, #13
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	e007      	b.n	8006620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800661e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	3b01      	subs	r3, #1
 800663c:	051a      	lsls	r2, r3, #20
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6899      	ldr	r1, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006662:	025a      	lsls	r2, r3, #9
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	029a      	lsls	r2, r3, #10
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40012300 	.word	0x40012300
 80066a0:	0f000001 	.word	0x0f000001

080066a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d13c      	bne.n	8006738 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d12b      	bne.n	8006730 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d127      	bne.n	8006730 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d006      	beq.n	80066fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d119      	bne.n	8006730 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0220 	bic.w	r2, r2, #32
 800670a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	f043 0201 	orr.w	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7fc ff8b 	bl	800364c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006736:	e00e      	b.n	8006756 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fd74 	bl	8006232 <HAL_ADC_ErrorCallback>
}
 800674a:	e004      	b.n	8006756 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fd56 	bl	800621e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2240      	movs	r2, #64	; 0x40
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f043 0204 	orr.w	r2, r3, #4
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff fd49 	bl	8006232 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <__NVIC_SetPriorityGrouping+0x44>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067c4:	4013      	ands	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067da:	4a04      	ldr	r2, [pc, #16]	; (80067ec <__NVIC_SetPriorityGrouping+0x44>)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	60d3      	str	r3, [r2, #12]
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	e000ed00 	.word	0xe000ed00

080067f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <__NVIC_GetPriorityGrouping+0x18>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	f003 0307 	and.w	r3, r3, #7
}
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	db0b      	blt.n	8006836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	f003 021f 	and.w	r2, r3, #31
 8006824:	4907      	ldr	r1, [pc, #28]	; (8006844 <__NVIC_EnableIRQ+0x38>)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2001      	movs	r0, #1
 800682e:	fa00 f202 	lsl.w	r2, r0, r2
 8006832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	e000e100 	.word	0xe000e100

08006848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006858:	2b00      	cmp	r3, #0
 800685a:	db0a      	blt.n	8006872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	b2da      	uxtb	r2, r3
 8006860:	490c      	ldr	r1, [pc, #48]	; (8006894 <__NVIC_SetPriority+0x4c>)
 8006862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006866:	0112      	lsls	r2, r2, #4
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	440b      	add	r3, r1
 800686c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006870:	e00a      	b.n	8006888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4908      	ldr	r1, [pc, #32]	; (8006898 <__NVIC_SetPriority+0x50>)
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	3b04      	subs	r3, #4
 8006880:	0112      	lsls	r2, r2, #4
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	440b      	add	r3, r1
 8006886:	761a      	strb	r2, [r3, #24]
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	e000e100 	.word	0xe000e100
 8006898:	e000ed00 	.word	0xe000ed00

0800689c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800689c:	b480      	push	{r7}
 800689e:	b089      	sub	sp, #36	; 0x24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f1c3 0307 	rsb	r3, r3, #7
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	bf28      	it	cs
 80068ba:	2304      	movcs	r3, #4
 80068bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d902      	bls.n	80068cc <NVIC_EncodePriority+0x30>
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3b03      	subs	r3, #3
 80068ca:	e000      	b.n	80068ce <NVIC_EncodePriority+0x32>
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068d0:	f04f 32ff 	mov.w	r2, #4294967295
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43da      	mvns	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	401a      	ands	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068e4:	f04f 31ff 	mov.w	r1, #4294967295
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	43d9      	mvns	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f4:	4313      	orrs	r3, r2
         );
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	; 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3b01      	subs	r3, #1
 8006910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006914:	d301      	bcc.n	800691a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006916:	2301      	movs	r3, #1
 8006918:	e00f      	b.n	800693a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <SysTick_Config+0x40>)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006922:	210f      	movs	r1, #15
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	f7ff ff8e 	bl	8006848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <SysTick_Config+0x40>)
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006932:	4b04      	ldr	r3, [pc, #16]	; (8006944 <SysTick_Config+0x40>)
 8006934:	2207      	movs	r2, #7
 8006936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	e000e010 	.word	0xe000e010

08006948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff29 	bl	80067a8 <__NVIC_SetPriorityGrouping>
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	4603      	mov	r3, r0
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800696c:	2300      	movs	r3, #0
 800696e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006970:	f7ff ff3e 	bl	80067f0 <__NVIC_GetPriorityGrouping>
 8006974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	6978      	ldr	r0, [r7, #20]
 800697c:	f7ff ff8e 	bl	800689c <NVIC_EncodePriority>
 8006980:	4602      	mov	r2, r0
 8006982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006986:	4611      	mov	r1, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ff5d 	bl	8006848 <__NVIC_SetPriority>
}
 800698e:	bf00      	nop
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	4603      	mov	r3, r0
 800699e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff ff31 	bl	800680c <__NVIC_EnableIRQ>
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff ffa2 	bl	8006904 <SysTick_Config>
 80069c0:	4603      	mov	r3, r0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069d8:	f7ff f932 	bl	8005c40 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e099      	b.n	8006b1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a08:	e00f      	b.n	8006a2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a0a:	f7ff f919 	bl	8005c40 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	d908      	bls.n	8006a2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2203      	movs	r2, #3
 8006a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e078      	b.n	8006b1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e8      	bne.n	8006a0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <HAL_DMA_Init+0x158>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d107      	bne.n	8006a94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d117      	bne.n	8006aee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00e      	beq.n	8006aee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa6f 	bl	8006fb4 <DMA_CheckFifoParam>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2240      	movs	r2, #64	; 0x40
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006aea:	2301      	movs	r3, #1
 8006aec:	e016      	b.n	8006b1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa26 	bl	8006f48 <DMA_CalcBaseAndBitshift>
 8006afc:	4603      	mov	r3, r0
 8006afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b04:	223f      	movs	r2, #63	; 0x3f
 8006b06:	409a      	lsls	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	f010803f 	.word	0xf010803f

08006b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_DMA_Start_IT+0x26>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e040      	b.n	8006bd0 <HAL_DMA_Start_IT+0xa8>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d12f      	bne.n	8006bc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f9b8 	bl	8006eec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	223f      	movs	r2, #63	; 0x3f
 8006b82:	409a      	lsls	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0216 	orr.w	r2, r2, #22
 8006b96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0208 	orr.w	r2, r2, #8
 8006bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e005      	b.n	8006bce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006be4:	4b8e      	ldr	r3, [pc, #568]	; (8006e20 <HAL_DMA_IRQHandler+0x248>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a8e      	ldr	r2, [pc, #568]	; (8006e24 <HAL_DMA_IRQHandler+0x24c>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	0a9b      	lsrs	r3, r3, #10
 8006bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	2208      	movs	r2, #8
 8006c04:	409a      	lsls	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01a      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d013      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0204 	bic.w	r2, r2, #4
 8006c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	2208      	movs	r2, #8
 8006c32:	409a      	lsls	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3c:	f043 0201 	orr.w	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c48:	2201      	movs	r2, #1
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	2201      	movs	r2, #1
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	f043 0202 	orr.w	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7e:	2204      	movs	r2, #4
 8006c80:	409a      	lsls	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d012      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca8:	f043 0204 	orr.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d043      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d03c      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	409a      	lsls	r2, r3
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d018      	beq.n	8006d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d024      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	e01f      	b.n	8006d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
 8006d18:	e016      	b.n	8006d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0208 	bic.w	r2, r2, #8
 8006d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 808f 	beq.w	8006e78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8087 	beq.w	8006e78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	2220      	movs	r2, #32
 8006d70:	409a      	lsls	r2, r3
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d136      	bne.n	8006df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0216 	bic.w	r2, r2, #22
 8006d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <HAL_DMA_IRQHandler+0x1da>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0208 	bic.w	r2, r2, #8
 8006dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	223f      	movs	r2, #63	; 0x3f
 8006dc8:	409a      	lsls	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d07e      	beq.n	8006ee4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
        }
        return;
 8006dee:	e079      	b.n	8006ee4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01d      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
 8006e1c:	e02c      	b.n	8006e78 <HAL_DMA_IRQHandler+0x2a0>
 8006e1e:	bf00      	nop
 8006e20:	2000002c 	.word	0x2000002c
 8006e24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d023      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
 8006e38:	e01e      	b.n	8006e78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10f      	bne.n	8006e68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0210 	bic.w	r2, r2, #16
 8006e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d032      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d022      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2205      	movs	r2, #5
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d307      	bcc.n	8006ec0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f2      	bne.n	8006ea4 <HAL_DMA_IRQHandler+0x2cc>
 8006ebe:	e000      	b.n	8006ec2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ec0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
 8006ee2:	e000      	b.n	8006ee6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006ee4:	bf00      	nop
    }
  }
}
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d108      	bne.n	8006f2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f2a:	e007      	b.n	8006f3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]
}
 8006f3c:	bf00      	nop
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	3b10      	subs	r3, #16
 8006f58:	4a14      	ldr	r2, [pc, #80]	; (8006fac <DMA_CalcBaseAndBitshift+0x64>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	091b      	lsrs	r3, r3, #4
 8006f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d909      	bls.n	8006f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	1d1a      	adds	r2, r3, #4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	659a      	str	r2, [r3, #88]	; 0x58
 8006f88:	e007      	b.n	8006f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	aaaaaaab 	.word	0xaaaaaaab
 8006fb0:	0801380c 	.word	0x0801380c

08006fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11f      	bne.n	800700e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d856      	bhi.n	8007082 <DMA_CheckFifoParam+0xce>
 8006fd4:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <DMA_CheckFifoParam+0x28>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006fff 	.word	0x08006fff
 8006fe4:	08006fed 	.word	0x08006fed
 8006fe8:	08007083 	.word	0x08007083
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d046      	beq.n	8007086 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ffc:	e043      	b.n	8007086 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007006:	d140      	bne.n	800708a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800700c:	e03d      	b.n	800708a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007016:	d121      	bne.n	800705c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d837      	bhi.n	800708e <DMA_CheckFifoParam+0xda>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <DMA_CheckFifoParam+0x70>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007035 	.word	0x08007035
 8007028:	0800703b 	.word	0x0800703b
 800702c:	08007035 	.word	0x08007035
 8007030:	0800704d 	.word	0x0800704d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
      break;
 8007038:	e030      	b.n	800709c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d025      	beq.n	8007092 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800704a:	e022      	b.n	8007092 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007054:	d11f      	bne.n	8007096 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800705a:	e01c      	b.n	8007096 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d903      	bls.n	800706a <DMA_CheckFifoParam+0xb6>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d003      	beq.n	8007070 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007068:	e018      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	e015      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
      break;
 8007080:	e00b      	b.n	800709a <DMA_CheckFifoParam+0xe6>
      break;
 8007082:	bf00      	nop
 8007084:	e00a      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;
 8007086:	bf00      	nop
 8007088:	e008      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;
 800708a:	bf00      	nop
 800708c:	e006      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;
 800708e:	bf00      	nop
 8007090:	e004      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;   
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <DMA_CheckFifoParam+0xe8>
      break;
 800709a:	bf00      	nop
    }
  } 
  
  return status; 
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop

080070ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80070be:	2300      	movs	r3, #0
 80070c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	e165      	b.n	8007394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070c8:	2201      	movs	r2, #1
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4013      	ands	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	f040 8154 	bne.w	800738e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d005      	beq.n	80070fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d130      	bne.n	8007160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	2203      	movs	r2, #3
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	43db      	mvns	r3, r3
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	4013      	ands	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	4313      	orrs	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007134:	2201      	movs	r2, #1
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	091b      	lsrs	r3, r3, #4
 800714a:	f003 0201 	and.w	r2, r3, #1
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	2b03      	cmp	r3, #3
 800716a:	d017      	beq.n	800719c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	2203      	movs	r2, #3
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	43db      	mvns	r3, r3
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4013      	ands	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d123      	bne.n	80071f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	08da      	lsrs	r2, r3, #3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3208      	adds	r2, #8
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	220f      	movs	r2, #15
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	4013      	ands	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4313      	orrs	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	08da      	lsrs	r2, r3, #3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3208      	adds	r2, #8
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	2203      	movs	r2, #3
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	43db      	mvns	r3, r3
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	4013      	ands	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f003 0203 	and.w	r2, r3, #3
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	4313      	orrs	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80ae 	beq.w	800738e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	4b5d      	ldr	r3, [pc, #372]	; (80073ac <HAL_GPIO_Init+0x300>)
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	4a5c      	ldr	r2, [pc, #368]	; (80073ac <HAL_GPIO_Init+0x300>)
 800723c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007240:	6453      	str	r3, [r2, #68]	; 0x44
 8007242:	4b5a      	ldr	r3, [pc, #360]	; (80073ac <HAL_GPIO_Init+0x300>)
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800724e:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_GPIO_Init+0x304>)
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	089b      	lsrs	r3, r3, #2
 8007254:	3302      	adds	r3, #2
 8007256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	220f      	movs	r2, #15
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43db      	mvns	r3, r3
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4013      	ands	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a4f      	ldr	r2, [pc, #316]	; (80073b4 <HAL_GPIO_Init+0x308>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d025      	beq.n	80072c6 <HAL_GPIO_Init+0x21a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a4e      	ldr	r2, [pc, #312]	; (80073b8 <HAL_GPIO_Init+0x30c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01f      	beq.n	80072c2 <HAL_GPIO_Init+0x216>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a4d      	ldr	r2, [pc, #308]	; (80073bc <HAL_GPIO_Init+0x310>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d019      	beq.n	80072be <HAL_GPIO_Init+0x212>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a4c      	ldr	r2, [pc, #304]	; (80073c0 <HAL_GPIO_Init+0x314>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_GPIO_Init+0x20e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a4b      	ldr	r2, [pc, #300]	; (80073c4 <HAL_GPIO_Init+0x318>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00d      	beq.n	80072b6 <HAL_GPIO_Init+0x20a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a4a      	ldr	r2, [pc, #296]	; (80073c8 <HAL_GPIO_Init+0x31c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <HAL_GPIO_Init+0x206>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a49      	ldr	r2, [pc, #292]	; (80073cc <HAL_GPIO_Init+0x320>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_GPIO_Init+0x202>
 80072aa:	2306      	movs	r3, #6
 80072ac:	e00c      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072ae:	2307      	movs	r3, #7
 80072b0:	e00a      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072b2:	2305      	movs	r3, #5
 80072b4:	e008      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072b6:	2304      	movs	r3, #4
 80072b8:	e006      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072ba:	2303      	movs	r3, #3
 80072bc:	e004      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072be:	2302      	movs	r3, #2
 80072c0:	e002      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_GPIO_Init+0x21c>
 80072c6:	2300      	movs	r3, #0
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	f002 0203 	and.w	r2, r2, #3
 80072ce:	0092      	lsls	r2, r2, #2
 80072d0:	4093      	lsls	r3, r2
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072d8:	4935      	ldr	r1, [pc, #212]	; (80073b0 <HAL_GPIO_Init+0x304>)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	089b      	lsrs	r3, r3, #2
 80072de:	3302      	adds	r3, #2
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072e6:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <HAL_GPIO_Init+0x324>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	43db      	mvns	r3, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4013      	ands	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800730a:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <HAL_GPIO_Init+0x324>)
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <HAL_GPIO_Init+0x324>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	43db      	mvns	r3, r3
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	4013      	ands	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007334:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <HAL_GPIO_Init+0x324>)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800733a:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <HAL_GPIO_Init+0x324>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	43db      	mvns	r3, r3
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	4013      	ands	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_GPIO_Init+0x324>)
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <HAL_GPIO_Init+0x324>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	43db      	mvns	r3, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4013      	ands	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007388:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <HAL_GPIO_Init+0x324>)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	f67f ae96 	bls.w	80070c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800
 80073b0:	40013800 	.word	0x40013800
 80073b4:	40020000 	.word	0x40020000
 80073b8:	40020400 	.word	0x40020400
 80073bc:	40020800 	.word	0x40020800
 80073c0:	40020c00 	.word	0x40020c00
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40021400 	.word	0x40021400
 80073cc:	40021800 	.word	0x40021800
 80073d0:	40013c00 	.word	0x40013c00

080073d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e001      	b.n	80073f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
 8007410:	4613      	mov	r3, r2
 8007412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007414:	787b      	ldrb	r3, [r7, #1]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007420:	e003      	b.n	800742a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	041a      	lsls	r2, r3, #16
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	619a      	str	r2, [r3, #24]
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e12b      	b.n	80076a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fd fc2a 	bl	8004cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800748a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800749a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800749c:	f001 f8a4 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 80074a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4a81      	ldr	r2, [pc, #516]	; (80076ac <HAL_I2C_Init+0x274>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d807      	bhi.n	80074bc <HAL_I2C_Init+0x84>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a80      	ldr	r2, [pc, #512]	; (80076b0 <HAL_I2C_Init+0x278>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	bf94      	ite	ls
 80074b4:	2301      	movls	r3, #1
 80074b6:	2300      	movhi	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	e006      	b.n	80074ca <HAL_I2C_Init+0x92>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a7d      	ldr	r2, [pc, #500]	; (80076b4 <HAL_I2C_Init+0x27c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bf94      	ite	ls
 80074c4:	2301      	movls	r3, #1
 80074c6:	2300      	movhi	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e0e7      	b.n	80076a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4a78      	ldr	r2, [pc, #480]	; (80076b8 <HAL_I2C_Init+0x280>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	0c9b      	lsrs	r3, r3, #18
 80074dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a6a      	ldr	r2, [pc, #424]	; (80076ac <HAL_I2C_Init+0x274>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d802      	bhi.n	800750c <HAL_I2C_Init+0xd4>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3301      	adds	r3, #1
 800750a:	e009      	b.n	8007520 <HAL_I2C_Init+0xe8>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	4a69      	ldr	r2, [pc, #420]	; (80076bc <HAL_I2C_Init+0x284>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	3301      	adds	r3, #1
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	430b      	orrs	r3, r1
 8007526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	495c      	ldr	r1, [pc, #368]	; (80076ac <HAL_I2C_Init+0x274>)
 800753c:	428b      	cmp	r3, r1
 800753e:	d819      	bhi.n	8007574 <HAL_I2C_Init+0x13c>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	1e59      	subs	r1, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	fbb1 f3f3 	udiv	r3, r1, r3
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007554:	400b      	ands	r3, r1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_I2C_Init+0x138>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1e59      	subs	r1, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	fbb1 f3f3 	udiv	r3, r1, r3
 8007568:	3301      	adds	r3, #1
 800756a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800756e:	e051      	b.n	8007614 <HAL_I2C_Init+0x1dc>
 8007570:	2304      	movs	r3, #4
 8007572:	e04f      	b.n	8007614 <HAL_I2C_Init+0x1dc>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d111      	bne.n	80075a0 <HAL_I2C_Init+0x168>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1e58      	subs	r0, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	440b      	add	r3, r1
 800758a:	fbb0 f3f3 	udiv	r3, r0, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e012      	b.n	80075c6 <HAL_I2C_Init+0x18e>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1e58      	subs	r0, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6859      	ldr	r1, [r3, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	0099      	lsls	r1, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b6:	3301      	adds	r3, #1
 80075b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_I2C_Init+0x196>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e022      	b.n	8007614 <HAL_I2C_Init+0x1dc>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10e      	bne.n	80075f4 <HAL_I2C_Init+0x1bc>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1e58      	subs	r0, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	440b      	add	r3, r1
 80075e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80075e8:	3301      	adds	r3, #1
 80075ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	e00f      	b.n	8007614 <HAL_I2C_Init+0x1dc>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	1e58      	subs	r0, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	0099      	lsls	r1, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	fbb0 f3f3 	udiv	r3, r0, r3
 800760a:	3301      	adds	r3, #1
 800760c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	6809      	ldr	r1, [r1, #0]
 8007618:	4313      	orrs	r3, r2
 800761a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6911      	ldr	r1, [r2, #16]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68d2      	ldr	r2, [r2, #12]
 800764e:	4311      	orrs	r1, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	430b      	orrs	r3, r1
 8007656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	000186a0 	.word	0x000186a0
 80076b0:	001e847f 	.word	0x001e847f
 80076b4:	003d08ff 	.word	0x003d08ff
 80076b8:	431bde83 	.word	0x431bde83
 80076bc:	10624dd3 	.word	0x10624dd3

080076c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	461a      	mov	r2, r3
 80076cc:	460b      	mov	r3, r1
 80076ce:	817b      	strh	r3, [r7, #10]
 80076d0:	4613      	mov	r3, r2
 80076d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076d4:	f7fe fab4 	bl	8005c40 <HAL_GetTick>
 80076d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	f040 80e0 	bne.w	80078a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	2319      	movs	r3, #25
 80076ee:	2201      	movs	r2, #1
 80076f0:	4970      	ldr	r1, [pc, #448]	; (80078b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fc58 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076fe:	2302      	movs	r3, #2
 8007700:	e0d3      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_I2C_Master_Transmit+0x50>
 800770c:	2302      	movs	r3, #2
 800770e:	e0cc      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d007      	beq.n	8007736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2221      	movs	r2, #33	; 0x21
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2210      	movs	r2, #16
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	893a      	ldrh	r2, [r7, #8]
 8007766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a50      	ldr	r2, [pc, #320]	; (80078b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007778:	8979      	ldrh	r1, [r7, #10]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6a3a      	ldr	r2, [r7, #32]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fac2 	bl	8007d08 <I2C_MasterRequestWrite>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e08d      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800778e:	2300      	movs	r3, #0
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077a4:	e066      	b.n	8007874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	6a39      	ldr	r1, [r7, #32]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fcd2 	bl	8008154 <I2C_WaitOnTXEFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d107      	bne.n	80077ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e06b      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	781a      	ldrb	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b04      	cmp	r3, #4
 800780e:	d11b      	bne.n	8007848 <HAL_I2C_Master_Transmit+0x188>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d017      	beq.n	8007848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	6a39      	ldr	r1, [r7, #32]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fcc2 	bl	80081d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	2b04      	cmp	r3, #4
 800785e:	d107      	bne.n	8007870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800786e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e01a      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d194      	bne.n	80077a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	00100002 	.word	0x00100002
 80078b8:	ffff0000 	.word	0xffff0000

080078bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	817b      	strh	r3, [r7, #10]
 80078cc:	4613      	mov	r3, r2
 80078ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078d0:	f7fe f9b6 	bl	8005c40 <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b20      	cmp	r3, #32
 80078e0:	f040 820b 	bne.w	8007cfa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	2319      	movs	r3, #25
 80078ea:	2201      	movs	r2, #1
 80078ec:	497c      	ldr	r1, [pc, #496]	; (8007ae0 <HAL_I2C_Master_Receive+0x224>)
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fb5a 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
 80078fc:	e1fe      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_I2C_Master_Receive+0x50>
 8007908:	2302      	movs	r3, #2
 800790a:	e1f7      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b01      	cmp	r3, #1
 8007920:	d007      	beq.n	8007932 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0201 	orr.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2222      	movs	r2, #34	; 0x22
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2210      	movs	r2, #16
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	893a      	ldrh	r2, [r7, #8]
 8007962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a5c      	ldr	r2, [pc, #368]	; (8007ae4 <HAL_I2C_Master_Receive+0x228>)
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007974:	8979      	ldrh	r1, [r7, #10]
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fa46 	bl	8007e0c <I2C_MasterRequestRead>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e1b8      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d113      	bne.n	80079ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007992:	2300      	movs	r3, #0
 8007994:	623b      	str	r3, [r7, #32]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e18c      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d11b      	bne.n	80079fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e16c      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d11b      	bne.n	8007a3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	e14c      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a60:	e138      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	f200 80f1 	bhi.w	8007c4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d123      	bne.n	8007abc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fbed 	bl	8008258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e139      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007aba:	e10b      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d14e      	bne.n	8007b62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	2200      	movs	r2, #0
 8007acc:	4906      	ldr	r1, [pc, #24]	; (8007ae8 <HAL_I2C_Master_Receive+0x22c>)
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fa6a 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e10e      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
 8007ade:	bf00      	nop
 8007ae0:	00100002 	.word	0x00100002
 8007ae4:	ffff0000 	.word	0xffff0000
 8007ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b60:	e0b8      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4966      	ldr	r1, [pc, #408]	; (8007d04 <HAL_I2C_Master_Receive+0x448>)
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fa1b 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0bf      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	494f      	ldr	r1, [pc, #316]	; (8007d04 <HAL_I2C_Master_Receive+0x448>)
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f9ed 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e091      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c4c:	e042      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fb00 	bl	8008258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e04c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d118      	bne.n	8007cd4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f47f aec2 	bne.w	8007a62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
  }
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	; 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	00010004 	.word	0x00010004

08007d08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	460b      	mov	r3, r1
 8007d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d006      	beq.n	8007d32 <I2C_MasterRequestWrite+0x2a>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d003      	beq.n	8007d32 <I2C_MasterRequestWrite+0x2a>
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d30:	d108      	bne.n	8007d44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e00b      	b.n	8007d5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	2b12      	cmp	r3, #18
 8007d4a:	d107      	bne.n	8007d5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f91d 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00d      	beq.n	8007d90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d82:	d103      	bne.n	8007d8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e035      	b.n	8007dfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d98:	d108      	bne.n	8007dac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d9a:	897b      	ldrh	r3, [r7, #10]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007da8:	611a      	str	r2, [r3, #16]
 8007daa:	e01b      	b.n	8007de4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007dac:	897b      	ldrh	r3, [r7, #10]
 8007dae:	11db      	asrs	r3, r3, #7
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0306 	and.w	r3, r3, #6
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f063 030f 	orn	r3, r3, #15
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	490e      	ldr	r1, [pc, #56]	; (8007e04 <I2C_MasterRequestWrite+0xfc>)
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f943 	bl	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e010      	b.n	8007dfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dda:	897b      	ldrh	r3, [r7, #10]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	4907      	ldr	r1, [pc, #28]	; (8007e08 <I2C_MasterRequestWrite+0x100>)
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f933 	bl	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	00010008 	.word	0x00010008
 8007e08:	00010002 	.word	0x00010002

08007e0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d006      	beq.n	8007e46 <I2C_MasterRequestRead+0x3a>
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d003      	beq.n	8007e46 <I2C_MasterRequestRead+0x3a>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e44:	d108      	bne.n	8007e58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	e00b      	b.n	8007e70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	2b11      	cmp	r3, #17
 8007e5e:	d107      	bne.n	8007e70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f893 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e96:	d103      	bne.n	8007ea0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e079      	b.n	8007f98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eac:	d108      	bne.n	8007ec0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007eae:	897b      	ldrh	r3, [r7, #10]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	611a      	str	r2, [r3, #16]
 8007ebe:	e05f      	b.n	8007f80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ec0:	897b      	ldrh	r3, [r7, #10]
 8007ec2:	11db      	asrs	r3, r3, #7
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f003 0306 	and.w	r3, r3, #6
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f063 030f 	orn	r3, r3, #15
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	4930      	ldr	r1, [pc, #192]	; (8007fa0 <I2C_MasterRequestRead+0x194>)
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f8b9 	bl	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e054      	b.n	8007f98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007eee:	897b      	ldrh	r3, [r7, #10]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4929      	ldr	r1, [pc, #164]	; (8007fa4 <I2C_MasterRequestRead+0x198>)
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 f8a9 	bl	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e044      	b.n	8007f98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f831 	bl	8007fa8 <I2C_WaitOnFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5a:	d103      	bne.n	8007f64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e017      	b.n	8007f98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f68:	897b      	ldrh	r3, [r7, #10]
 8007f6a:	11db      	asrs	r3, r3, #7
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0306 	and.w	r3, r3, #6
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f063 030e 	orn	r3, r3, #14
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <I2C_MasterRequestRead+0x198>)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f865 	bl	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	00010008 	.word	0x00010008
 8007fa4:	00010002 	.word	0x00010002

08007fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fb8:	e025      	b.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc0:	d021      	beq.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc2:	f7fd fe3d 	bl	8005c40 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d302      	bcc.n	8007fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d116      	bne.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f043 0220 	orr.w	r2, r3, #32
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e023      	b.n	800804e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10d      	bne.n	800802c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	43da      	mvns	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	e00c      	b.n	8008046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	43da      	mvns	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4013      	ands	r3, r2
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	bf0c      	ite	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	2300      	movne	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	429a      	cmp	r2, r3
 800804a:	d0b6      	beq.n	8007fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008064:	e051      	b.n	800810a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008074:	d123      	bne.n	80080be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800808e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f043 0204 	orr.w	r2, r3, #4
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e046      	b.n	800814c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d021      	beq.n	800810a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c6:	f7fd fdbb 	bl	8005c40 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d116      	bne.n	800810a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e020      	b.n	800814c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10c      	bne.n	800812e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	43da      	mvns	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4013      	ands	r3, r2
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf14      	ite	ne
 8008126:	2301      	movne	r3, #1
 8008128:	2300      	moveq	r3, #0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	e00b      	b.n	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	43da      	mvns	r2, r3
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4013      	ands	r3, r2
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	bf14      	ite	ne
 8008140:	2301      	movne	r3, #1
 8008142:	2300      	moveq	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d18d      	bne.n	8008066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008160:	e02d      	b.n	80081be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f8ce 	bl	8008304 <I2C_IsAcknowledgeFailed>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e02d      	b.n	80081ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d021      	beq.n	80081be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fd fd61 	bl	8005c40 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d116      	bne.n	80081be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e007      	b.n	80081ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d1ca      	bne.n	8008162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081e2:	e02d      	b.n	8008240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f88d 	bl	8008304 <I2C_IsAcknowledgeFailed>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e02d      	b.n	8008250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d021      	beq.n	8008240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fc:	f7fd fd20 	bl	8005c40 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d116      	bne.n	8008240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e007      	b.n	8008250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b04      	cmp	r3, #4
 800824c:	d1ca      	bne.n	80081e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008264:	e042      	b.n	80082ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b10      	cmp	r3, #16
 8008272:	d119      	bne.n	80082a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0210 	mvn.w	r2, #16
 800827c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e029      	b.n	80082fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a8:	f7fd fcca 	bl	8005c40 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d302      	bcc.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d116      	bne.n	80082ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e007      	b.n	80082fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d1b5      	bne.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831a:	d11b      	bne.n	8008354 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008324:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	f043 0204 	orr.w	r2, r3, #4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e000      	b.n	8008356 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800836e:	2300      	movs	r3, #0
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	4b20      	ldr	r3, [pc, #128]	; (80083f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800837c:	6413      	str	r3, [r2, #64]	; 0x40
 800837e:	4b1d      	ldr	r3, [pc, #116]	; (80083f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800838c:	2201      	movs	r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008390:	f7fd fc56 	bl	8005c40 <HAL_GetTick>
 8008394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008396:	e009      	b.n	80083ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008398:	f7fd fc52 	bl	8005c40 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a6:	d901      	bls.n	80083ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e01f      	b.n	80083ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083ac:	4b13      	ldr	r3, [pc, #76]	; (80083fc <HAL_PWREx_EnableOverDrive+0x98>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d1ee      	bne.n	8008398 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083bc:	2201      	movs	r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083c0:	f7fd fc3e 	bl	8005c40 <HAL_GetTick>
 80083c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083c6:	e009      	b.n	80083dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083c8:	f7fd fc3a 	bl	8005c40 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d6:	d901      	bls.n	80083dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e007      	b.n	80083ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083dc:	4b07      	ldr	r3, [pc, #28]	; (80083fc <HAL_PWREx_EnableOverDrive+0x98>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e8:	d1ee      	bne.n	80083c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40023800 	.word	0x40023800
 80083f8:	420e0040 	.word	0x420e0040
 80083fc:	40007000 	.word	0x40007000
 8008400:	420e0044 	.word	0x420e0044

08008404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e0cc      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008418:	4b68      	ldr	r3, [pc, #416]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d90c      	bls.n	8008440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008426:	4b65      	ldr	r3, [pc, #404]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800842e:	4b63      	ldr	r3, [pc, #396]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d001      	beq.n	8008440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e0b8      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d020      	beq.n	800848e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008458:	4b59      	ldr	r3, [pc, #356]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4a58      	ldr	r2, [pc, #352]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 800845e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008470:	4b53      	ldr	r3, [pc, #332]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	4a52      	ldr	r2, [pc, #328]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800847a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800847c:	4b50      	ldr	r3, [pc, #320]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	494d      	ldr	r1, [pc, #308]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 800848a:	4313      	orrs	r3, r2
 800848c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d044      	beq.n	8008524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d107      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084a2:	4b47      	ldr	r3, [pc, #284]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d119      	bne.n	80084e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e07f      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d003      	beq.n	80084c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d107      	bne.n	80084d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c2:	4b3f      	ldr	r3, [pc, #252]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e06f      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084d2:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e067      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084e2:	4b37      	ldr	r3, [pc, #220]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f023 0203 	bic.w	r2, r3, #3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	4934      	ldr	r1, [pc, #208]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084f4:	f7fd fba4 	bl	8005c40 <HAL_GetTick>
 80084f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084fa:	e00a      	b.n	8008512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084fc:	f7fd fba0 	bl	8005c40 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	f241 3288 	movw	r2, #5000	; 0x1388
 800850a:	4293      	cmp	r3, r2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e04f      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008512:	4b2b      	ldr	r3, [pc, #172]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 020c 	and.w	r2, r3, #12
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	429a      	cmp	r2, r3
 8008522:	d1eb      	bne.n	80084fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008524:	4b25      	ldr	r3, [pc, #148]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d20c      	bcs.n	800854c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008532:	4b22      	ldr	r3, [pc, #136]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800853a:	4b20      	ldr	r3, [pc, #128]	; (80085bc <HAL_RCC_ClockConfig+0x1b8>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d001      	beq.n	800854c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e032      	b.n	80085b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	4916      	ldr	r1, [pc, #88]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	4313      	orrs	r3, r2
 8008568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	490e      	ldr	r1, [pc, #56]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008586:	4313      	orrs	r3, r2
 8008588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800858a:	f000 f855 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 800858e:	4602      	mov	r2, r0
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	091b      	lsrs	r3, r3, #4
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	490a      	ldr	r1, [pc, #40]	; (80085c4 <HAL_RCC_ClockConfig+0x1c0>)
 800859c:	5ccb      	ldrb	r3, [r1, r3]
 800859e:	fa22 f303 	lsr.w	r3, r2, r3
 80085a2:	4a09      	ldr	r2, [pc, #36]	; (80085c8 <HAL_RCC_ClockConfig+0x1c4>)
 80085a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085a6:	4b09      	ldr	r3, [pc, #36]	; (80085cc <HAL_RCC_ClockConfig+0x1c8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fd fb04 	bl	8005bb8 <HAL_InitTick>

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40023c00 	.word	0x40023c00
 80085c0:	40023800 	.word	0x40023800
 80085c4:	080137f4 	.word	0x080137f4
 80085c8:	2000002c 	.word	0x2000002c
 80085cc:	20000038 	.word	0x20000038

080085d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085d4:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80085d6:	681b      	ldr	r3, [r3, #0]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	2000002c 	.word	0x2000002c

080085e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085ec:	f7ff fff0 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 80085f0:	4602      	mov	r2, r0
 80085f2:	4b05      	ldr	r3, [pc, #20]	; (8008608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	0a9b      	lsrs	r3, r3, #10
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	4903      	ldr	r1, [pc, #12]	; (800860c <HAL_RCC_GetPCLK1Freq+0x24>)
 80085fe:	5ccb      	ldrb	r3, [r1, r3]
 8008600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008604:	4618      	mov	r0, r3
 8008606:	bd80      	pop	{r7, pc}
 8008608:	40023800 	.word	0x40023800
 800860c:	08013804 	.word	0x08013804

08008610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008614:	f7ff ffdc 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 8008618:	4602      	mov	r2, r0
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	0b5b      	lsrs	r3, r3, #13
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	4903      	ldr	r1, [pc, #12]	; (8008634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800862c:	4618      	mov	r0, r3
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40023800 	.word	0x40023800
 8008634:	08013804 	.word	0x08013804

08008638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800863c:	b0a6      	sub	sp, #152	; 0x98
 800863e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800865e:	4bc8      	ldr	r3, [pc, #800]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 030c 	and.w	r3, r3, #12
 8008666:	2b0c      	cmp	r3, #12
 8008668:	f200 817e 	bhi.w	8008968 <HAL_RCC_GetSysClockFreq+0x330>
 800866c:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <HAL_RCC_GetSysClockFreq+0x3c>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	080086a9 	.word	0x080086a9
 8008678:	08008969 	.word	0x08008969
 800867c:	08008969 	.word	0x08008969
 8008680:	08008969 	.word	0x08008969
 8008684:	080086b1 	.word	0x080086b1
 8008688:	08008969 	.word	0x08008969
 800868c:	08008969 	.word	0x08008969
 8008690:	08008969 	.word	0x08008969
 8008694:	080086b9 	.word	0x080086b9
 8008698:	08008969 	.word	0x08008969
 800869c:	08008969 	.word	0x08008969
 80086a0:	08008969 	.word	0x08008969
 80086a4:	08008823 	.word	0x08008823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086a8:	4bb6      	ldr	r3, [pc, #728]	; (8008984 <HAL_RCC_GetSysClockFreq+0x34c>)
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80086ae:	e15f      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086b0:	4bb5      	ldr	r3, [pc, #724]	; (8008988 <HAL_RCC_GetSysClockFreq+0x350>)
 80086b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80086b6:	e15b      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086b8:	4bb1      	ldr	r3, [pc, #708]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086c4:	4bae      	ldr	r3, [pc, #696]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d031      	beq.n	8008734 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086d0:	4bab      	ldr	r3, [pc, #684]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	099b      	lsrs	r3, r3, #6
 80086d6:	2200      	movs	r2, #0
 80086d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	663b      	str	r3, [r7, #96]	; 0x60
 80086e4:	2300      	movs	r3, #0
 80086e6:	667b      	str	r3, [r7, #100]	; 0x64
 80086e8:	4ba7      	ldr	r3, [pc, #668]	; (8008988 <HAL_RCC_GetSysClockFreq+0x350>)
 80086ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80086ee:	462a      	mov	r2, r5
 80086f0:	fb03 f202 	mul.w	r2, r3, r2
 80086f4:	2300      	movs	r3, #0
 80086f6:	4621      	mov	r1, r4
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	4413      	add	r3, r2
 80086fe:	4aa2      	ldr	r2, [pc, #648]	; (8008988 <HAL_RCC_GetSysClockFreq+0x350>)
 8008700:	4621      	mov	r1, r4
 8008702:	fba1 1202 	umull	r1, r2, r1, r2
 8008706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008708:	460a      	mov	r2, r1
 800870a:	67ba      	str	r2, [r7, #120]	; 0x78
 800870c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800870e:	4413      	add	r3, r2
 8008710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008716:	2200      	movs	r2, #0
 8008718:	65bb      	str	r3, [r7, #88]	; 0x58
 800871a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800871c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008720:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008724:	f7f8 fad0 	bl	8000cc8 <__aeabi_uldivmod>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4613      	mov	r3, r2
 800872e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008732:	e064      	b.n	80087fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008734:	4b92      	ldr	r3, [pc, #584]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	099b      	lsrs	r3, r3, #6
 800873a:	2200      	movs	r2, #0
 800873c:	653b      	str	r3, [r7, #80]	; 0x50
 800873e:	657a      	str	r2, [r7, #84]	; 0x54
 8008740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	64bb      	str	r3, [r7, #72]	; 0x48
 8008748:	2300      	movs	r3, #0
 800874a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800874c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008750:	4622      	mov	r2, r4
 8008752:	462b      	mov	r3, r5
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f04f 0100 	mov.w	r1, #0
 800875c:	0159      	lsls	r1, r3, #5
 800875e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008762:	0150      	lsls	r0, r2, #5
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4621      	mov	r1, r4
 800876a:	1a51      	subs	r1, r2, r1
 800876c:	6139      	str	r1, [r7, #16]
 800876e:	4629      	mov	r1, r5
 8008770:	eb63 0301 	sbc.w	r3, r3, r1
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008782:	4659      	mov	r1, fp
 8008784:	018b      	lsls	r3, r1, #6
 8008786:	4651      	mov	r1, sl
 8008788:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800878c:	4651      	mov	r1, sl
 800878e:	018a      	lsls	r2, r1, #6
 8008790:	4651      	mov	r1, sl
 8008792:	ebb2 0801 	subs.w	r8, r2, r1
 8008796:	4659      	mov	r1, fp
 8008798:	eb63 0901 	sbc.w	r9, r3, r1
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b0:	4690      	mov	r8, r2
 80087b2:	4699      	mov	r9, r3
 80087b4:	4623      	mov	r3, r4
 80087b6:	eb18 0303 	adds.w	r3, r8, r3
 80087ba:	60bb      	str	r3, [r7, #8]
 80087bc:	462b      	mov	r3, r5
 80087be:	eb49 0303 	adc.w	r3, r9, r3
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087d0:	4629      	mov	r1, r5
 80087d2:	028b      	lsls	r3, r1, #10
 80087d4:	4621      	mov	r1, r4
 80087d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087da:	4621      	mov	r1, r4
 80087dc:	028a      	lsls	r2, r1, #10
 80087de:	4610      	mov	r0, r2
 80087e0:	4619      	mov	r1, r3
 80087e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087e6:	2200      	movs	r2, #0
 80087e8:	643b      	str	r3, [r7, #64]	; 0x40
 80087ea:	647a      	str	r2, [r7, #68]	; 0x44
 80087ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087f0:	f7f8 fa6a 	bl	8000cc8 <__aeabi_uldivmod>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4613      	mov	r3, r2
 80087fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087fe:	4b60      	ldr	r3, [pc, #384]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	3301      	adds	r3, #1
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8008810:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008818:	fbb2 f3f3 	udiv	r3, r2, r3
 800881c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008820:	e0a6      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008822:	4b57      	ldr	r3, [pc, #348]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800882e:	4b54      	ldr	r3, [pc, #336]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02a      	beq.n	8008890 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800883a:	4b51      	ldr	r3, [pc, #324]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	099b      	lsrs	r3, r3, #6
 8008840:	2200      	movs	r2, #0
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
 8008844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800884c:	2100      	movs	r1, #0
 800884e:	4b4e      	ldr	r3, [pc, #312]	; (8008988 <HAL_RCC_GetSysClockFreq+0x350>)
 8008850:	fb03 f201 	mul.w	r2, r3, r1
 8008854:	2300      	movs	r3, #0
 8008856:	fb00 f303 	mul.w	r3, r0, r3
 800885a:	4413      	add	r3, r2
 800885c:	4a4a      	ldr	r2, [pc, #296]	; (8008988 <HAL_RCC_GetSysClockFreq+0x350>)
 800885e:	fba0 1202 	umull	r1, r2, r0, r2
 8008862:	677a      	str	r2, [r7, #116]	; 0x74
 8008864:	460a      	mov	r2, r1
 8008866:	673a      	str	r2, [r7, #112]	; 0x70
 8008868:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800886a:	4413      	add	r3, r2
 800886c:	677b      	str	r3, [r7, #116]	; 0x74
 800886e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008872:	2200      	movs	r2, #0
 8008874:	633b      	str	r3, [r7, #48]	; 0x30
 8008876:	637a      	str	r2, [r7, #52]	; 0x34
 8008878:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800887c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008880:	f7f8 fa22 	bl	8000cc8 <__aeabi_uldivmod>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4613      	mov	r3, r2
 800888a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800888e:	e05b      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008890:	4b3b      	ldr	r3, [pc, #236]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	099b      	lsrs	r3, r3, #6
 8008896:	2200      	movs	r2, #0
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
 800889a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	623b      	str	r3, [r7, #32]
 80088a4:	2300      	movs	r3, #0
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
 80088a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	f04f 0000 	mov.w	r0, #0
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	0159      	lsls	r1, r3, #5
 80088ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088be:	0150      	lsls	r0, r2, #5
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4641      	mov	r1, r8
 80088c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80088ca:	4649      	mov	r1, r9
 80088cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088e4:	ebb2 040a 	subs.w	r4, r2, sl
 80088e8:	eb63 050b 	sbc.w	r5, r3, fp
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	00eb      	lsls	r3, r5, #3
 80088f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088fa:	00e2      	lsls	r2, r4, #3
 80088fc:	4614      	mov	r4, r2
 80088fe:	461d      	mov	r5, r3
 8008900:	4643      	mov	r3, r8
 8008902:	18e3      	adds	r3, r4, r3
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	464b      	mov	r3, r9
 8008908:	eb45 0303 	adc.w	r3, r5, r3
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	f04f 0300 	mov.w	r3, #0
 8008916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800891a:	4629      	mov	r1, r5
 800891c:	028b      	lsls	r3, r1, #10
 800891e:	4621      	mov	r1, r4
 8008920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008924:	4621      	mov	r1, r4
 8008926:	028a      	lsls	r2, r1, #10
 8008928:	4610      	mov	r0, r2
 800892a:	4619      	mov	r1, r3
 800892c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008930:	2200      	movs	r2, #0
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	61fa      	str	r2, [r7, #28]
 8008936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800893a:	f7f8 f9c5 	bl	8000cc8 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4613      	mov	r3, r2
 8008944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <HAL_RCC_GetSysClockFreq+0x348>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	0f1b      	lsrs	r3, r3, #28
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8008956:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800895a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008966:	e003      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <HAL_RCC_GetSysClockFreq+0x34c>)
 800896a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800896e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8008974:	4618      	mov	r0, r3
 8008976:	3798      	adds	r7, #152	; 0x98
 8008978:	46bd      	mov	sp, r7
 800897a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800
 8008984:	00f42400 	.word	0x00f42400
 8008988:	00b71b00 	.word	0x00b71b00

0800898c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e28d      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8083 	beq.w	8008ab2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089ac:	4b94      	ldr	r3, [pc, #592]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 030c 	and.w	r3, r3, #12
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d019      	beq.n	80089ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80089b8:	4b91      	ldr	r3, [pc, #580]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d106      	bne.n	80089d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80089c4:	4b8e      	ldr	r3, [pc, #568]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d0:	d00c      	beq.n	80089ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089d2:	4b8b      	ldr	r3, [pc, #556]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d112      	bne.n	8008a04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089de:	4b88      	ldr	r3, [pc, #544]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ea:	d10b      	bne.n	8008a04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ec:	4b84      	ldr	r3, [pc, #528]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d05b      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x124>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d157      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e25a      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0c:	d106      	bne.n	8008a1c <HAL_RCC_OscConfig+0x90>
 8008a0e:	4b7c      	ldr	r3, [pc, #496]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a7b      	ldr	r2, [pc, #492]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e01d      	b.n	8008a58 <HAL_RCC_OscConfig+0xcc>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a24:	d10c      	bne.n	8008a40 <HAL_RCC_OscConfig+0xb4>
 8008a26:	4b76      	ldr	r3, [pc, #472]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a75      	ldr	r2, [pc, #468]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4b73      	ldr	r3, [pc, #460]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a72      	ldr	r2, [pc, #456]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	e00b      	b.n	8008a58 <HAL_RCC_OscConfig+0xcc>
 8008a40:	4b6f      	ldr	r3, [pc, #444]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a6e      	ldr	r2, [pc, #440]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	4b6c      	ldr	r3, [pc, #432]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a6b      	ldr	r2, [pc, #428]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d013      	beq.n	8008a88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fd f8ee 	bl	8005c40 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a68:	f7fd f8ea 	bl	8005c40 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b64      	cmp	r3, #100	; 0x64
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e21f      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a7a:	4b61      	ldr	r3, [pc, #388]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0xdc>
 8008a86:	e014      	b.n	8008ab2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fd f8da 	bl	8005c40 <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a90:	f7fd f8d6 	bl	8005c40 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b64      	cmp	r3, #100	; 0x64
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e20b      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aa2:	4b57      	ldr	r3, [pc, #348]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x104>
 8008aae:	e000      	b.n	8008ab2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d06f      	beq.n	8008b9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008abe:	4b50      	ldr	r3, [pc, #320]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 030c 	and.w	r3, r3, #12
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d017      	beq.n	8008afa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008aca:	4b4d      	ldr	r3, [pc, #308]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d105      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ad6:	4b4a      	ldr	r3, [pc, #296]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ae2:	4b47      	ldr	r3, [pc, #284]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008aea:	2b0c      	cmp	r3, #12
 8008aec:	d11c      	bne.n	8008b28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aee:	4b44      	ldr	r3, [pc, #272]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d116      	bne.n	8008b28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008afa:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <HAL_RCC_OscConfig+0x186>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d001      	beq.n	8008b12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e1d3      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b12:	4b3b      	ldr	r3, [pc, #236]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4937      	ldr	r1, [pc, #220]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b26:	e03a      	b.n	8008b9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d020      	beq.n	8008b72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b30:	4b34      	ldr	r3, [pc, #208]	; (8008c04 <HAL_RCC_OscConfig+0x278>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b36:	f7fd f883 	bl	8005c40 <HAL_GetTick>
 8008b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b3c:	e008      	b.n	8008b50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b3e:	f7fd f87f 	bl	8005c40 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d901      	bls.n	8008b50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e1b4      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b50:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0f0      	beq.n	8008b3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b5c:	4b28      	ldr	r3, [pc, #160]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	4925      	ldr	r1, [pc, #148]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	600b      	str	r3, [r1, #0]
 8008b70:	e015      	b.n	8008b9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <HAL_RCC_OscConfig+0x278>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b78:	f7fd f862 	bl	8005c40 <HAL_GetTick>
 8008b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b7e:	e008      	b.n	8008b92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b80:	f7fd f85e 	bl	8005c40 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e193      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b92:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1f0      	bne.n	8008b80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d036      	beq.n	8008c18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d016      	beq.n	8008be0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <HAL_RCC_OscConfig+0x27c>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb8:	f7fd f842 	bl	8005c40 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bc0:	f7fd f83e 	bl	8005c40 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e173      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <HAL_RCC_OscConfig+0x274>)
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x234>
 8008bde:	e01b      	b.n	8008c18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008be0:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <HAL_RCC_OscConfig+0x27c>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be6:	f7fd f82b 	bl	8005c40 <HAL_GetTick>
 8008bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bec:	e00e      	b.n	8008c0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bee:	f7fd f827 	bl	8005c40 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d907      	bls.n	8008c0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e15c      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
 8008c00:	40023800 	.word	0x40023800
 8008c04:	42470000 	.word	0x42470000
 8008c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c0c:	4b8a      	ldr	r3, [pc, #552]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1ea      	bne.n	8008bee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 8097 	beq.w	8008d54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c26:	2300      	movs	r3, #0
 8008c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c2a:	4b83      	ldr	r3, [pc, #524]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10f      	bne.n	8008c56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	4b7f      	ldr	r3, [pc, #508]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	4a7e      	ldr	r2, [pc, #504]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c44:	6413      	str	r3, [r2, #64]	; 0x40
 8008c46:	4b7c      	ldr	r3, [pc, #496]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c4e:	60bb      	str	r3, [r7, #8]
 8008c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c52:	2301      	movs	r3, #1
 8008c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c56:	4b79      	ldr	r3, [pc, #484]	; (8008e3c <HAL_RCC_OscConfig+0x4b0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d118      	bne.n	8008c94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c62:	4b76      	ldr	r3, [pc, #472]	; (8008e3c <HAL_RCC_OscConfig+0x4b0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a75      	ldr	r2, [pc, #468]	; (8008e3c <HAL_RCC_OscConfig+0x4b0>)
 8008c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c6e:	f7fc ffe7 	bl	8005c40 <HAL_GetTick>
 8008c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c74:	e008      	b.n	8008c88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c76:	f7fc ffe3 	bl	8005c40 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e118      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c88:	4b6c      	ldr	r3, [pc, #432]	; (8008e3c <HAL_RCC_OscConfig+0x4b0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0f0      	beq.n	8008c76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d106      	bne.n	8008caa <HAL_RCC_OscConfig+0x31e>
 8008c9c:	4b66      	ldr	r3, [pc, #408]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca0:	4a65      	ldr	r2, [pc, #404]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca8:	e01c      	b.n	8008ce4 <HAL_RCC_OscConfig+0x358>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b05      	cmp	r3, #5
 8008cb0:	d10c      	bne.n	8008ccc <HAL_RCC_OscConfig+0x340>
 8008cb2:	4b61      	ldr	r3, [pc, #388]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	4a60      	ldr	r2, [pc, #384]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cb8:	f043 0304 	orr.w	r3, r3, #4
 8008cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cbe:	4b5e      	ldr	r3, [pc, #376]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc2:	4a5d      	ldr	r2, [pc, #372]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cca:	e00b      	b.n	8008ce4 <HAL_RCC_OscConfig+0x358>
 8008ccc:	4b5a      	ldr	r3, [pc, #360]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd0:	4a59      	ldr	r2, [pc, #356]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cd2:	f023 0301 	bic.w	r3, r3, #1
 8008cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd8:	4b57      	ldr	r3, [pc, #348]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cdc:	4a56      	ldr	r2, [pc, #344]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008cde:	f023 0304 	bic.w	r3, r3, #4
 8008ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d015      	beq.n	8008d18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cec:	f7fc ffa8 	bl	8005c40 <HAL_GetTick>
 8008cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cf2:	e00a      	b.n	8008d0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf4:	f7fc ffa4 	bl	8005c40 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e0d7      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d0a:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0ee      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x368>
 8008d16:	e014      	b.n	8008d42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d18:	f7fc ff92 	bl	8005c40 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d20:	f7fc ff8e 	bl	8005c40 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e0c1      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d36:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1ee      	bne.n	8008d20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d105      	bne.n	8008d54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d48:	4b3b      	ldr	r3, [pc, #236]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	4a3a      	ldr	r2, [pc, #232]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 80ad 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d5e:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 030c 	and.w	r3, r3, #12
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d060      	beq.n	8008e2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d145      	bne.n	8008dfe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d72:	4b33      	ldr	r3, [pc, #204]	; (8008e40 <HAL_RCC_OscConfig+0x4b4>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7fc ff62 	bl	8005c40 <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d80:	f7fc ff5e 	bl	8005c40 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e093      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d92:	4b29      	ldr	r3, [pc, #164]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69da      	ldr	r2, [r3, #28]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	019b      	lsls	r3, r3, #6
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	3b01      	subs	r3, #1
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	061b      	lsls	r3, r3, #24
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	071b      	lsls	r3, r3, #28
 8008dca:	491b      	ldr	r1, [pc, #108]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dd0:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <HAL_RCC_OscConfig+0x4b4>)
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd6:	f7fc ff33 	bl	8005c40 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ddc:	e008      	b.n	8008df0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dde:	f7fc ff2f 	bl	8005c40 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e064      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0f0      	beq.n	8008dde <HAL_RCC_OscConfig+0x452>
 8008dfc:	e05c      	b.n	8008eb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <HAL_RCC_OscConfig+0x4b4>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e04:	f7fc ff1c 	bl	8005c40 <HAL_GetTick>
 8008e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e0a:	e008      	b.n	8008e1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e0c:	f7fc ff18 	bl	8005c40 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e04d      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_RCC_OscConfig+0x4ac>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f0      	bne.n	8008e0c <HAL_RCC_OscConfig+0x480>
 8008e2a:	e045      	b.n	8008eb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e040      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40007000 	.word	0x40007000
 8008e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e44:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <HAL_RCC_OscConfig+0x538>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d030      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d129      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d122      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e74:	4013      	ands	r3, r2
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d119      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d10f      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d107      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d001      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e000      	b.n	8008eba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40023800 	.word	0x40023800

08008ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e07b      	b.n	8008fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eea:	d009      	beq.n	8008f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
 8008ef2:	e005      	b.n	8008f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fb ff14 	bl	8004d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	ea42 0103 	orr.w	r1, r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	f003 0104 	and.w	r1, r3, #4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f003 0210 	and.w	r2, r3, #16
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_SPI_Transmit+0x22>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e126      	b.n	800924a <HAL_SPI_Transmit+0x270>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009004:	f7fc fe1c 	bl	8005c40 <HAL_GetTick>
 8009008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d002      	beq.n	8009020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800901a:	2302      	movs	r3, #2
 800901c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800901e:	e10b      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <HAL_SPI_Transmit+0x52>
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009030:	e102      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2203      	movs	r2, #3
 8009036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	88fa      	ldrh	r2, [r7, #6]
 800904a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009078:	d10f      	bne.n	800909a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	d007      	beq.n	80090b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090c0:	d14b      	bne.n	800915a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <HAL_SPI_Transmit+0xf6>
 80090ca:	8afb      	ldrh	r3, [r7, #22]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d13e      	bne.n	800914e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	1c9a      	adds	r2, r3, #2
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090f4:	e02b      	b.n	800914e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b02      	cmp	r3, #2
 8009102:	d112      	bne.n	800912a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	881a      	ldrh	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	1c9a      	adds	r2, r3, #2
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	86da      	strh	r2, [r3, #54]	; 0x36
 8009128:	e011      	b.n	800914e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800912a:	f7fc fd89 	bl	8005c40 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d803      	bhi.n	8009142 <HAL_SPI_Transmit+0x168>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d102      	bne.n	8009148 <HAL_SPI_Transmit+0x16e>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800914c:	e074      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1ce      	bne.n	80090f6 <HAL_SPI_Transmit+0x11c>
 8009158:	e04c      	b.n	80091f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_SPI_Transmit+0x18e>
 8009162:	8afb      	ldrh	r3, [r7, #22]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d140      	bne.n	80091ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800918e:	e02c      	b.n	80091ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b02      	cmp	r3, #2
 800919c:	d113      	bne.n	80091c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80091c4:	e011      	b.n	80091ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091c6:	f7fc fd3b 	bl	8005c40 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d803      	bhi.n	80091de <HAL_SPI_Transmit+0x204>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091dc:	d102      	bne.n	80091e4 <HAL_SPI_Transmit+0x20a>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091e8:	e026      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1cd      	bne.n	8009190 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fa63 	bl	80096c4 <SPI_EndRxTxTransaction>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e000      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009248:	7ffb      	ldrb	r3, [r7, #31]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b08c      	sub	sp, #48	; 0x30
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009260:	2301      	movs	r3, #1
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_SPI_TransmitReceive+0x26>
 8009274:	2302      	movs	r3, #2
 8009276:	e18a      	b.n	800958e <HAL_SPI_TransmitReceive+0x33c>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009280:	f7fc fcde 	bl	8005c40 <HAL_GetTick>
 8009284:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800928c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800929a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d00f      	beq.n	80092c2 <HAL_SPI_TransmitReceive+0x70>
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092a8:	d107      	bne.n	80092ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d103      	bne.n	80092ba <HAL_SPI_TransmitReceive+0x68>
 80092b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d003      	beq.n	80092c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
 80092bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092c0:	e15b      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_SPI_TransmitReceive+0x82>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_SPI_TransmitReceive+0x82>
 80092ce:	887b      	ldrh	r3, [r7, #2]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092da:	e14e      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	d003      	beq.n	80092f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2205      	movs	r2, #5
 80092ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	887a      	ldrh	r2, [r7, #2]
 8009300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	887a      	ldrh	r2, [r7, #2]
 8009306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	887a      	ldrh	r2, [r7, #2]
 8009312:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	887a      	ldrh	r2, [r7, #2]
 8009318:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	d007      	beq.n	8009344 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800934c:	d178      	bne.n	8009440 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <HAL_SPI_TransmitReceive+0x10a>
 8009356:	8b7b      	ldrh	r3, [r7, #26]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d166      	bne.n	800942a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009360:	881a      	ldrh	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	1c9a      	adds	r2, r3, #2
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009380:	e053      	b.n	800942a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b02      	cmp	r3, #2
 800938e:	d11b      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x176>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d016      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x176>
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d113      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a4:	881a      	ldrh	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	1c9a      	adds	r2, r3, #2
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d119      	bne.n	800940a <HAL_SPI_TransmitReceive+0x1b8>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d014      	beq.n	800940a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	b292      	uxth	r2, r2
 80093ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009406:	2301      	movs	r3, #1
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800940a:	f7fc fc19 	bl	8005c40 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009416:	429a      	cmp	r2, r3
 8009418:	d807      	bhi.n	800942a <HAL_SPI_TransmitReceive+0x1d8>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d003      	beq.n	800942a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009428:	e0a7      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1a6      	bne.n	8009382 <HAL_SPI_TransmitReceive+0x130>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1a1      	bne.n	8009382 <HAL_SPI_TransmitReceive+0x130>
 800943e:	e07c      	b.n	800953a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_SPI_TransmitReceive+0x1fc>
 8009448:	8b7b      	ldrh	r3, [r7, #26]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d16b      	bne.n	8009526 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009474:	e057      	b.n	8009526 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b02      	cmp	r3, #2
 8009482:	d11c      	bne.n	80094be <HAL_SPI_TransmitReceive+0x26c>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d017      	beq.n	80094be <HAL_SPI_TransmitReceive+0x26c>
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	2b01      	cmp	r3, #1
 8009492:	d114      	bne.n	80094be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d119      	bne.n	8009500 <HAL_SPI_TransmitReceive+0x2ae>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d014      	beq.n	8009500 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	3b01      	subs	r3, #1
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094fc:	2301      	movs	r3, #1
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009500:	f7fc fb9e 	bl	8005c40 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800950c:	429a      	cmp	r2, r3
 800950e:	d803      	bhi.n	8009518 <HAL_SPI_TransmitReceive+0x2c6>
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d102      	bne.n	800951e <HAL_SPI_TransmitReceive+0x2cc>
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009524:	e029      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1a2      	bne.n	8009476 <HAL_SPI_TransmitReceive+0x224>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d19d      	bne.n	8009476 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800953a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f8c0 	bl	80096c4 <SPI_EndRxTxTransaction>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2220      	movs	r2, #32
 8009554:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009556:	e010      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	e000      	b.n	800957a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009578:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800958a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800958e:	4618      	mov	r0, r3
 8009590:	3730      	adds	r7, #48	; 0x30
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a4:	b2db      	uxtb	r3, r3
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	4613      	mov	r3, r2
 80095c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80095c4:	f7fc fb3c 	bl	8005c40 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4413      	add	r3, r2
 80095d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80095d4:	f7fc fb34 	bl	8005c40 <HAL_GetTick>
 80095d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80095da:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	015b      	lsls	r3, r3, #5
 80095e0:	0d1b      	lsrs	r3, r3, #20
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	fb02 f303 	mul.w	r3, r2, r3
 80095e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095ea:	e054      	b.n	8009696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d050      	beq.n	8009696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095f4:	f7fc fb24 	bl	8005c40 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	429a      	cmp	r2, r3
 8009602:	d902      	bls.n	800960a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d13d      	bne.n	8009686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009622:	d111      	bne.n	8009648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962c:	d004      	beq.n	8009638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009636:	d107      	bne.n	8009648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009650:	d10f      	bne.n	8009672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e017      	b.n	80096b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	3b01      	subs	r3, #1
 8009694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4013      	ands	r3, r2
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	461a      	mov	r2, r3
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d19b      	bne.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	2000002c 	.word	0x2000002c

080096c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096d0:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <SPI_EndRxTxTransaction+0x7c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1b      	ldr	r2, [pc, #108]	; (8009744 <SPI_EndRxTxTransaction+0x80>)
 80096d6:	fba2 2303 	umull	r2, r3, r2, r3
 80096da:	0d5b      	lsrs	r3, r3, #21
 80096dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096e0:	fb02 f303 	mul.w	r3, r2, r3
 80096e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ee:	d112      	bne.n	8009716 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	2180      	movs	r1, #128	; 0x80
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff ff5a 	bl	80095b4 <SPI_WaitFlagStateUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f043 0220 	orr.w	r2, r3, #32
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e00f      	b.n	8009736 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3b01      	subs	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972c:	2b80      	cmp	r3, #128	; 0x80
 800972e:	d0f2      	beq.n	8009716 <SPI_EndRxTxTransaction+0x52>
 8009730:	e000      	b.n	8009734 <SPI_EndRxTxTransaction+0x70>
        break;
 8009732:	bf00      	nop
  }

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	2000002c 	.word	0x2000002c
 8009744:	165e9f81 	.word	0x165e9f81

08009748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e041      	b.n	80097de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fb fc42 	bl	8004ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f000 fcdc 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d001      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e04e      	b.n	800989e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a23      	ldr	r2, [pc, #140]	; (80098ac <HAL_TIM_Base_Start_IT+0xc4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d022      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982a:	d01d      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d111      	bne.n	800988c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b06      	cmp	r3, #6
 8009878:	d010      	beq.n	800989c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	e007      	b.n	800989c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40000800 	.word	0x40000800
 80098b8:	40000c00 	.word	0x40000c00
 80098bc:	40010400 	.word	0x40010400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40001800 	.word	0x40001800

080098c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e041      	b.n	800995e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fb fac8 	bl	8004e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f000 fc1c 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <HAL_TIM_PWM_Start+0x24>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b01      	cmp	r3, #1
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	e022      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b04      	cmp	r3, #4
 8009990:	d109      	bne.n	80099a6 <HAL_TIM_PWM_Start+0x3e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b01      	cmp	r3, #1
 800999c:	bf14      	ite	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	2300      	moveq	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	e015      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d109      	bne.n	80099c0 <HAL_TIM_PWM_Start+0x58>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	bf14      	ite	ne
 80099b8:	2301      	movne	r3, #1
 80099ba:	2300      	moveq	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	e008      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	bf14      	ite	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	2300      	moveq	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e07c      	b.n	8009ad4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <HAL_TIM_PWM_Start+0x82>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e8:	e013      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d104      	bne.n	80099fa <HAL_TIM_PWM_Start+0x92>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099f8:	e00b      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d104      	bne.n	8009a0a <HAL_TIM_PWM_Start+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a08:	e003      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2201      	movs	r2, #1
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fde2 	bl	800a5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a2d      	ldr	r2, [pc, #180]	; (8009adc <HAL_TIM_PWM_Start+0x174>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_TIM_PWM_Start+0xcc>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a2c      	ldr	r2, [pc, #176]	; (8009ae0 <HAL_TIM_PWM_Start+0x178>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d101      	bne.n	8009a38 <HAL_TIM_PWM_Start+0xd0>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_TIM_PWM_Start+0xd2>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a22      	ldr	r2, [pc, #136]	; (8009adc <HAL_TIM_PWM_Start+0x174>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d022      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a60:	d01d      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <HAL_TIM_PWM_Start+0x17c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d018      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1d      	ldr	r2, [pc, #116]	; (8009ae8 <HAL_TIM_PWM_Start+0x180>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <HAL_TIM_PWM_Start+0x184>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00e      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <HAL_TIM_PWM_Start+0x178>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <HAL_TIM_PWM_Start+0x188>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a16      	ldr	r2, [pc, #88]	; (8009af4 <HAL_TIM_PWM_Start+0x18c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d111      	bne.n	8009ac2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f003 0307 	and.w	r3, r3, #7
 8009aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b06      	cmp	r3, #6
 8009aae:	d010      	beq.n	8009ad2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac0:	e007      	b.n	8009ad2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40000400 	.word	0x40000400
 8009ae8:	40000800 	.word	0x40000800
 8009aec:	40000c00 	.word	0x40000c00
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40001800 	.word	0x40001800

08009af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e097      	b.n	8009c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d106      	bne.n	8009b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fb f9eb 	bl	8004efc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6812      	ldr	r2, [r2, #0]
 8009b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f000 faf9 	bl	800a144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009b98:	f023 030c 	bic.w	r3, r3, #12
 8009b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	011a      	lsls	r2, r3, #4
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	031b      	lsls	r3, r3, #12
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	4313      	orrs	r3, r2
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d110      	bne.n	8009c96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d102      	bne.n	8009c80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d001      	beq.n	8009c84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e069      	b.n	8009d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c94:	e031      	b.n	8009cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d110      	bne.n	8009cbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d102      	bne.n	8009ca8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ca2:	7b3b      	ldrb	r3, [r7, #12]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d001      	beq.n	8009cac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e055      	b.n	8009d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cbc:	e01d      	b.n	8009cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d108      	bne.n	8009cd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d105      	bne.n	8009cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cca:	7b7b      	ldrb	r3, [r7, #13]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d102      	bne.n	8009cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cd0:	7b3b      	ldrb	r3, [r7, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d001      	beq.n	8009cda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e03e      	b.n	8009d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2202      	movs	r2, #2
 8009cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_TIM_Encoder_Start+0xc4>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d008      	beq.n	8009d18 <HAL_TIM_Encoder_Start+0xd4>
 8009d06:	e00f      	b.n	8009d28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fc67 	bl	800a5e4 <TIM_CCxChannelCmd>
      break;
 8009d16:	e016      	b.n	8009d46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	2104      	movs	r1, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fc5f 	bl	800a5e4 <TIM_CCxChannelCmd>
      break;
 8009d26:	e00e      	b.n	8009d46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fc57 	bl	800a5e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fc50 	bl	800a5e4 <TIM_CCxChannelCmd>
      break;
 8009d44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0201 	orr.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d122      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d11b      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0202 	mvn.w	r2, #2
 8009d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f9b0 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009da8:	e005      	b.n	8009db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f9a2 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9b3 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d122      	bne.n	8009e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d11b      	bne.n	8009e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f06f 0204 	mvn.w	r2, #4
 8009de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2202      	movs	r2, #2
 8009de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f986 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009dfc:	e005      	b.n	8009e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f978 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f989 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	2b08      	cmp	r3, #8
 8009e1c:	d122      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 0308 	and.w	r3, r3, #8
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d11b      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f06f 0208 	mvn.w	r2, #8
 8009e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f95c 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009e50:	e005      	b.n	8009e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f94e 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f95f 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f003 0310 	and.w	r3, r3, #16
 8009e6e:	2b10      	cmp	r3, #16
 8009e70:	d122      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b10      	cmp	r3, #16
 8009e7e:	d11b      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0210 	mvn.w	r2, #16
 8009e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f932 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009ea4:	e005      	b.n	8009eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f924 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f935 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d107      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0201 	mvn.w	r2, #1
 8009edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7fb fbec 	bl	80056bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eee:	2b80      	cmp	r3, #128	; 0x80
 8009ef0:	d10e      	bne.n	8009f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efc:	2b80      	cmp	r3, #128	; 0x80
 8009efe:	d107      	bne.n	8009f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fc68 	bl	800a7e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1a:	2b40      	cmp	r3, #64	; 0x40
 8009f1c:	d10e      	bne.n	8009f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	d107      	bne.n	8009f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f8fa 	bl	800a130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d10e      	bne.n	8009f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f003 0320 	and.w	r3, r3, #32
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d107      	bne.n	8009f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f06f 0220 	mvn.w	r2, #32
 8009f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fc32 	bl	800a7cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e0ae      	b.n	800a0ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	f200 809f 	bhi.w	800a0dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fd9 	.word	0x08009fd9
 8009fa8:	0800a0dd 	.word	0x0800a0dd
 8009fac:	0800a0dd 	.word	0x0800a0dd
 8009fb0:	0800a0dd 	.word	0x0800a0dd
 8009fb4:	0800a019 	.word	0x0800a019
 8009fb8:	0800a0dd 	.word	0x0800a0dd
 8009fbc:	0800a0dd 	.word	0x0800a0dd
 8009fc0:	0800a0dd 	.word	0x0800a0dd
 8009fc4:	0800a05b 	.word	0x0800a05b
 8009fc8:	0800a0dd 	.word	0x0800a0dd
 8009fcc:	0800a0dd 	.word	0x0800a0dd
 8009fd0:	0800a0dd 	.word	0x0800a0dd
 8009fd4:	0800a09b 	.word	0x0800a09b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f950 	bl	800a284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0208 	orr.w	r2, r2, #8
 8009ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699a      	ldr	r2, [r3, #24]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0204 	bic.w	r2, r2, #4
 800a002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6999      	ldr	r1, [r3, #24]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691a      	ldr	r2, [r3, #16]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	619a      	str	r2, [r3, #24]
      break;
 800a016:	e064      	b.n	800a0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f9a0 	bl	800a364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6999      	ldr	r1, [r3, #24]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	021a      	lsls	r2, r3, #8
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	619a      	str	r2, [r3, #24]
      break;
 800a058:	e043      	b.n	800a0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68b9      	ldr	r1, [r7, #8]
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f9f5 	bl	800a450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69da      	ldr	r2, [r3, #28]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0208 	orr.w	r2, r2, #8
 800a074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0204 	bic.w	r2, r2, #4
 800a084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69d9      	ldr	r1, [r3, #28]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	61da      	str	r2, [r3, #28]
      break;
 800a098:	e023      	b.n	800a0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fa49 	bl	800a538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69d9      	ldr	r1, [r3, #28]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	021a      	lsls	r2, r3, #8
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	61da      	str	r2, [r3, #28]
      break;
 800a0da:	e002      	b.n	800a0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a40      	ldr	r2, [pc, #256]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3d      	ldr	r2, [pc, #244]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3b      	ldr	r2, [pc, #236]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3a      	ldr	r2, [pc, #232]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d02b      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d027      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2c      	ldr	r2, [pc, #176]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d023      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2b      	ldr	r2, [pc, #172]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d01f      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2a      	ldr	r2, [pc, #168]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d01b      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a29      	ldr	r2, [pc, #164]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d017      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a28      	ldr	r2, [pc, #160]	; (800a26c <TIM_Base_SetConfig+0x128>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d013      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a27      	ldr	r2, [pc, #156]	; (800a270 <TIM_Base_SetConfig+0x12c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00f      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a26      	ldr	r2, [pc, #152]	; (800a274 <TIM_Base_SetConfig+0x130>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d00b      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a25      	ldr	r2, [pc, #148]	; (800a278 <TIM_Base_SetConfig+0x134>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d007      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a24      	ldr	r2, [pc, #144]	; (800a27c <TIM_Base_SetConfig+0x138>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d003      	beq.n	800a1f6 <TIM_Base_SetConfig+0xb2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a23      	ldr	r2, [pc, #140]	; (800a280 <TIM_Base_SetConfig+0x13c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d108      	bne.n	800a208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a0a      	ldr	r2, [pc, #40]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d003      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a0c      	ldr	r2, [pc, #48]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d103      	bne.n	800a244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	615a      	str	r2, [r3, #20]
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014400 	.word	0x40014400
 800a274:	40014800 	.word	0x40014800
 800a278:	40001800 	.word	0x40001800
 800a27c:	40001c00 	.word	0x40001c00
 800a280:	40002000 	.word	0x40002000

0800a284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f023 0201 	bic.w	r2, r3, #1
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0302 	bic.w	r3, r3, #2
 800a2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a20      	ldr	r2, [pc, #128]	; (800a35c <TIM_OC1_SetConfig+0xd8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d003      	beq.n	800a2e8 <TIM_OC1_SetConfig+0x64>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <TIM_OC1_SetConfig+0xdc>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d10c      	bne.n	800a302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f023 0308 	bic.w	r3, r3, #8
 800a2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f023 0304 	bic.w	r3, r3, #4
 800a300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a15      	ldr	r2, [pc, #84]	; (800a35c <TIM_OC1_SetConfig+0xd8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d003      	beq.n	800a312 <TIM_OC1_SetConfig+0x8e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a14      	ldr	r2, [pc, #80]	; (800a360 <TIM_OC1_SetConfig+0xdc>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d111      	bne.n	800a336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	621a      	str	r2, [r3, #32]
}
 800a350:	bf00      	nop
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	40010000 	.word	0x40010000
 800a360:	40010400 	.word	0x40010400

0800a364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f023 0210 	bic.w	r2, r3, #16
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f023 0320 	bic.w	r3, r3, #32
 800a3ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a22      	ldr	r2, [pc, #136]	; (800a448 <TIM_OC2_SetConfig+0xe4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_OC2_SetConfig+0x68>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a21      	ldr	r2, [pc, #132]	; (800a44c <TIM_OC2_SetConfig+0xe8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d10d      	bne.n	800a3e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a17      	ldr	r2, [pc, #92]	; (800a448 <TIM_OC2_SetConfig+0xe4>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d003      	beq.n	800a3f8 <TIM_OC2_SetConfig+0x94>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a16      	ldr	r2, [pc, #88]	; (800a44c <TIM_OC2_SetConfig+0xe8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d113      	bne.n	800a420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	4313      	orrs	r3, r2
 800a412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40010000 	.word	0x40010000
 800a44c:	40010400 	.word	0x40010400

0800a450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4313      	orrs	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a21      	ldr	r2, [pc, #132]	; (800a530 <TIM_OC3_SetConfig+0xe0>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d003      	beq.n	800a4b6 <TIM_OC3_SetConfig+0x66>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a20      	ldr	r2, [pc, #128]	; (800a534 <TIM_OC3_SetConfig+0xe4>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d10d      	bne.n	800a4d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a16      	ldr	r2, [pc, #88]	; (800a530 <TIM_OC3_SetConfig+0xe0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d003      	beq.n	800a4e2 <TIM_OC3_SetConfig+0x92>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	; (800a534 <TIM_OC3_SetConfig+0xe4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d113      	bne.n	800a50a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	621a      	str	r2, [r3, #32]
}
 800a524:	bf00      	nop
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	40010000 	.word	0x40010000
 800a534:	40010400 	.word	0x40010400

0800a538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	031b      	lsls	r3, r3, #12
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a12      	ldr	r2, [pc, #72]	; (800a5dc <TIM_OC4_SetConfig+0xa4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d003      	beq.n	800a5a0 <TIM_OC4_SetConfig+0x68>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a11      	ldr	r2, [pc, #68]	; (800a5e0 <TIM_OC4_SetConfig+0xa8>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d109      	bne.n	800a5b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	019b      	lsls	r3, r3, #6
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40010000 	.word	0x40010000
 800a5e0:	40010400 	.word	0x40010400

0800a5e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f003 031f 	and.w	r3, r3, #31
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	43db      	mvns	r3, r3
 800a606:	401a      	ands	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a1a      	ldr	r2, [r3, #32]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f003 031f 	and.w	r3, r3, #31
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	fa01 f303 	lsl.w	r3, r1, r3
 800a61c:	431a      	orrs	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	621a      	str	r2, [r3, #32]
}
 800a622:	bf00      	nop
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a644:	2302      	movs	r3, #2
 800a646:	e05a      	b.n	800a6fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a21      	ldr	r2, [pc, #132]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d022      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a694:	d01d      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a1d      	ldr	r2, [pc, #116]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d018      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a1b      	ldr	r2, [pc, #108]	; (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d013      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a1a      	ldr	r2, [pc, #104]	; (800a718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00e      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a18      	ldr	r2, [pc, #96]	; (800a71c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d009      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a17      	ldr	r2, [pc, #92]	; (800a720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d004      	beq.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a15      	ldr	r2, [pc, #84]	; (800a724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d10c      	bne.n	800a6ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40010000 	.word	0x40010000
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40010400 	.word	0x40010400
 800a720:	40014000 	.word	0x40014000
 800a724:	40001800 	.word	0x40001800

0800a728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a740:	2302      	movs	r3, #2
 800a742:	e03d      	b.n	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4313      	orrs	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e03f      	b.n	800a886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fa fc74 	bl	8005108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2224      	movs	r2, #36	; 0x24
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f829 	bl	800a890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a84c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	695a      	ldr	r2, [r3, #20]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a85c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a86c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a894:	b0c0      	sub	sp, #256	; 0x100
 800a896:	af00      	add	r7, sp, #0
 800a898:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ac:	68d9      	ldr	r1, [r3, #12]
 800a8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	ea40 0301 	orr.w	r3, r0, r1
 800a8b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a8e8:	f021 010c 	bic.w	r1, r1, #12
 800a8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90a:	6999      	ldr	r1, [r3, #24]
 800a90c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	ea40 0301 	orr.w	r3, r0, r1
 800a916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4b8f      	ldr	r3, [pc, #572]	; (800ab5c <UART_SetConfig+0x2cc>)
 800a920:	429a      	cmp	r2, r3
 800a922:	d005      	beq.n	800a930 <UART_SetConfig+0xa0>
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4b8d      	ldr	r3, [pc, #564]	; (800ab60 <UART_SetConfig+0x2d0>)
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d104      	bne.n	800a93a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a930:	f7fd fe6e 	bl	8008610 <HAL_RCC_GetPCLK2Freq>
 800a934:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a938:	e003      	b.n	800a942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a93a:	f7fd fe55 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800a93e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a94c:	f040 810c 	bne.w	800ab68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a954:	2200      	movs	r2, #0
 800a956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a95a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a95e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	1891      	adds	r1, r2, r2
 800a968:	65b9      	str	r1, [r7, #88]	; 0x58
 800a96a:	415b      	adcs	r3, r3
 800a96c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a96e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a972:	4621      	mov	r1, r4
 800a974:	eb12 0801 	adds.w	r8, r2, r1
 800a978:	4629      	mov	r1, r5
 800a97a:	eb43 0901 	adc.w	r9, r3, r1
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	f04f 0300 	mov.w	r3, #0
 800a986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a98a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a98e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a992:	4690      	mov	r8, r2
 800a994:	4699      	mov	r9, r3
 800a996:	4623      	mov	r3, r4
 800a998:	eb18 0303 	adds.w	r3, r8, r3
 800a99c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	eb49 0303 	adc.w	r3, r9, r3
 800a9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9be:	460b      	mov	r3, r1
 800a9c0:	18db      	adds	r3, r3, r3
 800a9c2:	653b      	str	r3, [r7, #80]	; 0x50
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	eb42 0303 	adc.w	r3, r2, r3
 800a9ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a9cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a9d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a9d4:	f7f6 f978 	bl	8000cc8 <__aeabi_uldivmod>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4b61      	ldr	r3, [pc, #388]	; (800ab64 <UART_SetConfig+0x2d4>)
 800a9de:	fba3 2302 	umull	r2, r3, r3, r2
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	011c      	lsls	r4, r3, #4
 800a9e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a9f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	1891      	adds	r1, r2, r2
 800a9fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa00:	415b      	adcs	r3, r3
 800aa02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa08:	4641      	mov	r1, r8
 800aa0a:	eb12 0a01 	adds.w	sl, r2, r1
 800aa0e:	4649      	mov	r1, r9
 800aa10:	eb43 0b01 	adc.w	fp, r3, r1
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa28:	4692      	mov	sl, r2
 800aa2a:	469b      	mov	fp, r3
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	eb1a 0303 	adds.w	r3, sl, r3
 800aa32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa36:	464b      	mov	r3, r9
 800aa38:	eb4b 0303 	adc.w	r3, fp, r3
 800aa3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa54:	460b      	mov	r3, r1
 800aa56:	18db      	adds	r3, r3, r3
 800aa58:	643b      	str	r3, [r7, #64]	; 0x40
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	eb42 0303 	adc.w	r3, r2, r3
 800aa60:	647b      	str	r3, [r7, #68]	; 0x44
 800aa62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa6a:	f7f6 f92d 	bl	8000cc8 <__aeabi_uldivmod>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4611      	mov	r1, r2
 800aa74:	4b3b      	ldr	r3, [pc, #236]	; (800ab64 <UART_SetConfig+0x2d4>)
 800aa76:	fba3 2301 	umull	r2, r3, r3, r1
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	2264      	movs	r2, #100	; 0x64
 800aa7e:	fb02 f303 	mul.w	r3, r2, r3
 800aa82:	1acb      	subs	r3, r1, r3
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aa8a:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <UART_SetConfig+0x2d4>)
 800aa8c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa98:	441c      	add	r4, r3
 800aa9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aaa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aaa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	1891      	adds	r1, r2, r2
 800aab2:	63b9      	str	r1, [r7, #56]	; 0x38
 800aab4:	415b      	adcs	r3, r3
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aabc:	4641      	mov	r1, r8
 800aabe:	1851      	adds	r1, r2, r1
 800aac0:	6339      	str	r1, [r7, #48]	; 0x30
 800aac2:	4649      	mov	r1, r9
 800aac4:	414b      	adcs	r3, r1
 800aac6:	637b      	str	r3, [r7, #52]	; 0x34
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aad4:	4659      	mov	r1, fp
 800aad6:	00cb      	lsls	r3, r1, #3
 800aad8:	4651      	mov	r1, sl
 800aada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aade:	4651      	mov	r1, sl
 800aae0:	00ca      	lsls	r2, r1, #3
 800aae2:	4610      	mov	r0, r2
 800aae4:	4619      	mov	r1, r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	4642      	mov	r2, r8
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	eb42 0303 	adc.w	r3, r2, r3
 800aaf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab10:	460b      	mov	r3, r1
 800ab12:	18db      	adds	r3, r3, r3
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab16:	4613      	mov	r3, r2
 800ab18:	eb42 0303 	adc.w	r3, r2, r3
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab26:	f7f6 f8cf 	bl	8000cc8 <__aeabi_uldivmod>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <UART_SetConfig+0x2d4>)
 800ab30:	fba3 1302 	umull	r1, r3, r3, r2
 800ab34:	095b      	lsrs	r3, r3, #5
 800ab36:	2164      	movs	r1, #100	; 0x64
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	3332      	adds	r3, #50	; 0x32
 800ab42:	4a08      	ldr	r2, [pc, #32]	; (800ab64 <UART_SetConfig+0x2d4>)
 800ab44:	fba2 2303 	umull	r2, r3, r2, r3
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	f003 0207 	and.w	r2, r3, #7
 800ab4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4422      	add	r2, r4
 800ab56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab58:	e105      	b.n	800ad66 <UART_SetConfig+0x4d6>
 800ab5a:	bf00      	nop
 800ab5c:	40011000 	.word	0x40011000
 800ab60:	40011400 	.word	0x40011400
 800ab64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ab7a:	4642      	mov	r2, r8
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	1891      	adds	r1, r2, r2
 800ab80:	6239      	str	r1, [r7, #32]
 800ab82:	415b      	adcs	r3, r3
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
 800ab86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	1854      	adds	r4, r2, r1
 800ab8e:	4649      	mov	r1, r9
 800ab90:	eb43 0501 	adc.w	r5, r3, r1
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	00eb      	lsls	r3, r5, #3
 800ab9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aba2:	00e2      	lsls	r2, r4, #3
 800aba4:	4614      	mov	r4, r2
 800aba6:	461d      	mov	r5, r3
 800aba8:	4643      	mov	r3, r8
 800abaa:	18e3      	adds	r3, r4, r3
 800abac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abb0:	464b      	mov	r3, r9
 800abb2:	eb45 0303 	adc.w	r3, r5, r3
 800abb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800abd6:	4629      	mov	r1, r5
 800abd8:	008b      	lsls	r3, r1, #2
 800abda:	4621      	mov	r1, r4
 800abdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abe0:	4621      	mov	r1, r4
 800abe2:	008a      	lsls	r2, r1, #2
 800abe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800abe8:	f7f6 f86e 	bl	8000cc8 <__aeabi_uldivmod>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4b60      	ldr	r3, [pc, #384]	; (800ad74 <UART_SetConfig+0x4e4>)
 800abf2:	fba3 2302 	umull	r2, r3, r3, r2
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	011c      	lsls	r4, r3, #4
 800abfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac0c:	4642      	mov	r2, r8
 800ac0e:	464b      	mov	r3, r9
 800ac10:	1891      	adds	r1, r2, r2
 800ac12:	61b9      	str	r1, [r7, #24]
 800ac14:	415b      	adcs	r3, r3
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	1851      	adds	r1, r2, r1
 800ac20:	6139      	str	r1, [r7, #16]
 800ac22:	4649      	mov	r1, r9
 800ac24:	414b      	adcs	r3, r1
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	f04f 0300 	mov.w	r3, #0
 800ac30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac34:	4659      	mov	r1, fp
 800ac36:	00cb      	lsls	r3, r1, #3
 800ac38:	4651      	mov	r1, sl
 800ac3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac3e:	4651      	mov	r1, sl
 800ac40:	00ca      	lsls	r2, r1, #3
 800ac42:	4610      	mov	r0, r2
 800ac44:	4619      	mov	r1, r3
 800ac46:	4603      	mov	r3, r0
 800ac48:	4642      	mov	r2, r8
 800ac4a:	189b      	adds	r3, r3, r2
 800ac4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac50:	464b      	mov	r3, r9
 800ac52:	460a      	mov	r2, r1
 800ac54:	eb42 0303 	adc.w	r3, r2, r3
 800ac58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac66:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ac74:	4649      	mov	r1, r9
 800ac76:	008b      	lsls	r3, r1, #2
 800ac78:	4641      	mov	r1, r8
 800ac7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac7e:	4641      	mov	r1, r8
 800ac80:	008a      	lsls	r2, r1, #2
 800ac82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ac86:	f7f6 f81f 	bl	8000cc8 <__aeabi_uldivmod>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4b39      	ldr	r3, [pc, #228]	; (800ad74 <UART_SetConfig+0x4e4>)
 800ac90:	fba3 1302 	umull	r1, r3, r3, r2
 800ac94:	095b      	lsrs	r3, r3, #5
 800ac96:	2164      	movs	r1, #100	; 0x64
 800ac98:	fb01 f303 	mul.w	r3, r1, r3
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	011b      	lsls	r3, r3, #4
 800aca0:	3332      	adds	r3, #50	; 0x32
 800aca2:	4a34      	ldr	r2, [pc, #208]	; (800ad74 <UART_SetConfig+0x4e4>)
 800aca4:	fba2 2303 	umull	r2, r3, r2, r3
 800aca8:	095b      	lsrs	r3, r3, #5
 800acaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acae:	441c      	add	r4, r3
 800acb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acb4:	2200      	movs	r2, #0
 800acb6:	673b      	str	r3, [r7, #112]	; 0x70
 800acb8:	677a      	str	r2, [r7, #116]	; 0x74
 800acba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acbe:	4642      	mov	r2, r8
 800acc0:	464b      	mov	r3, r9
 800acc2:	1891      	adds	r1, r2, r2
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	415b      	adcs	r3, r3
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acce:	4641      	mov	r1, r8
 800acd0:	1851      	adds	r1, r2, r1
 800acd2:	6039      	str	r1, [r7, #0]
 800acd4:	4649      	mov	r1, r9
 800acd6:	414b      	adcs	r3, r1
 800acd8:	607b      	str	r3, [r7, #4]
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	f04f 0300 	mov.w	r3, #0
 800ace2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ace6:	4659      	mov	r1, fp
 800ace8:	00cb      	lsls	r3, r1, #3
 800acea:	4651      	mov	r1, sl
 800acec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acf0:	4651      	mov	r1, sl
 800acf2:	00ca      	lsls	r2, r1, #3
 800acf4:	4610      	mov	r0, r2
 800acf6:	4619      	mov	r1, r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	4642      	mov	r2, r8
 800acfc:	189b      	adds	r3, r3, r2
 800acfe:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad00:	464b      	mov	r3, r9
 800ad02:	460a      	mov	r2, r1
 800ad04:	eb42 0303 	adc.w	r3, r2, r3
 800ad08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	663b      	str	r3, [r7, #96]	; 0x60
 800ad14:	667a      	str	r2, [r7, #100]	; 0x64
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad22:	4649      	mov	r1, r9
 800ad24:	008b      	lsls	r3, r1, #2
 800ad26:	4641      	mov	r1, r8
 800ad28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad2c:	4641      	mov	r1, r8
 800ad2e:	008a      	lsls	r2, r1, #2
 800ad30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad34:	f7f5 ffc8 	bl	8000cc8 <__aeabi_uldivmod>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <UART_SetConfig+0x4e4>)
 800ad3e:	fba3 1302 	umull	r1, r3, r3, r2
 800ad42:	095b      	lsrs	r3, r3, #5
 800ad44:	2164      	movs	r1, #100	; 0x64
 800ad46:	fb01 f303 	mul.w	r3, r1, r3
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	3332      	adds	r3, #50	; 0x32
 800ad50:	4a08      	ldr	r2, [pc, #32]	; (800ad74 <UART_SetConfig+0x4e4>)
 800ad52:	fba2 2303 	umull	r2, r3, r2, r3
 800ad56:	095b      	lsrs	r3, r3, #5
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4422      	add	r2, r4
 800ad64:	609a      	str	r2, [r3, #8]
}
 800ad66:	bf00      	nop
 800ad68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad72:	bf00      	nop
 800ad74:	51eb851f 	.word	0x51eb851f

0800ad78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ad7c:	4904      	ldr	r1, [pc, #16]	; (800ad90 <MX_FATFS_Init+0x18>)
 800ad7e:	4805      	ldr	r0, [pc, #20]	; (800ad94 <MX_FATFS_Init+0x1c>)
 800ad80:	f003 fa3a 	bl	800e1f8 <FATFS_LinkDriver>
 800ad84:	4603      	mov	r3, r0
 800ad86:	461a      	mov	r2, r3
 800ad88:	4b03      	ldr	r3, [pc, #12]	; (800ad98 <MX_FATFS_Init+0x20>)
 800ad8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad8c:	bf00      	nop
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20002c48 	.word	0x20002c48
 800ad94:	20000040 	.word	0x20000040
 800ad98:	20002c44 	.word	0x20002c44

0800ad9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ada0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
    return SD_disk_initialize(pdrv);
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	4618      	mov	r0, r3
 800adba:	f7f7 f8c5 	bl	8001f48 <SD_disk_initialize>
 800adbe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
    return SD_disk_status(pdrv);
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	4618      	mov	r0, r3
 800add6:	f7f7 f9a1 	bl	800211c <SD_disk_status>
 800adda:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 800adf4:	7bf8      	ldrb	r0, [r7, #15]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	f7f7 f9a4 	bl	8002148 <SD_disk_read>
 800ae00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 800ae1a:	7bf8      	ldrb	r0, [r7, #15]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	f7f7 f9fb 	bl	800221c <SD_disk_write>
 800ae26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	603a      	str	r2, [r7, #0]
 800ae3a:	71fb      	strb	r3, [r7, #7]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ae40:	79b9      	ldrb	r1, [r7, #6]
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f7 fa6c 	bl	8002324 <SD_disk_ioctl>
 800ae4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <disk_status+0x30>)
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	79fa      	ldrb	r2, [r7, #7]
 800ae70:	4905      	ldr	r1, [pc, #20]	; (800ae88 <disk_status+0x30>)
 800ae72:	440a      	add	r2, r1
 800ae74:	7a12      	ldrb	r2, [r2, #8]
 800ae76:	4610      	mov	r0, r2
 800ae78:	4798      	blx	r3
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20002e74 	.word	0x20002e74

0800ae8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <disk_initialize+0x48>)
 800ae9e:	5cd3      	ldrb	r3, [r2, r3]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d111      	bne.n	800aec8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	4a0b      	ldr	r2, [pc, #44]	; (800aed4 <disk_initialize+0x48>)
 800aea8:	2101      	movs	r1, #1
 800aeaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <disk_initialize+0x48>)
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	79fa      	ldrb	r2, [r7, #7]
 800aeba:	4906      	ldr	r1, [pc, #24]	; (800aed4 <disk_initialize+0x48>)
 800aebc:	440a      	add	r2, r1
 800aebe:	7a12      	ldrb	r2, [r2, #8]
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20002e74 	.word	0x20002e74

0800aed8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aed8:	b590      	push	{r4, r7, lr}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	4a0a      	ldr	r2, [pc, #40]	; (800af14 <disk_read+0x3c>)
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	689c      	ldr	r4, [r3, #8]
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	4a07      	ldr	r2, [pc, #28]	; (800af14 <disk_read+0x3c>)
 800aef8:	4413      	add	r3, r2
 800aefa:	7a18      	ldrb	r0, [r3, #8]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	47a0      	blx	r4
 800af04:	4603      	mov	r3, r0
 800af06:	75fb      	strb	r3, [r7, #23]
  return res;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd90      	pop	{r4, r7, pc}
 800af12:	bf00      	nop
 800af14:	20002e74 	.word	0x20002e74

0800af18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	4a0a      	ldr	r2, [pc, #40]	; (800af54 <disk_write+0x3c>)
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	68dc      	ldr	r4, [r3, #12]
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	4a07      	ldr	r2, [pc, #28]	; (800af54 <disk_write+0x3c>)
 800af38:	4413      	add	r3, r2
 800af3a:	7a18      	ldrb	r0, [r3, #8]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	47a0      	blx	r4
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]
  return res;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	371c      	adds	r7, #28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd90      	pop	{r4, r7, pc}
 800af52:	bf00      	nop
 800af54:	20002e74 	.word	0x20002e74

0800af58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	603a      	str	r2, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
 800af64:	460b      	mov	r3, r1
 800af66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	4a09      	ldr	r2, [pc, #36]	; (800af90 <disk_ioctl+0x38>)
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	79fa      	ldrb	r2, [r7, #7]
 800af76:	4906      	ldr	r1, [pc, #24]	; (800af90 <disk_ioctl+0x38>)
 800af78:	440a      	add	r2, r1
 800af7a:	7a10      	ldrb	r0, [r2, #8]
 800af7c:	79b9      	ldrb	r1, [r7, #6]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	4798      	blx	r3
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]
  return res;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20002e74 	.word	0x20002e74

0800af94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3301      	adds	r3, #1
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	021b      	lsls	r3, r3, #8
 800afa8:	b21a      	sxth	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b21b      	sxth	r3, r3
 800afb0:	4313      	orrs	r3, r2
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800afb6:	89fb      	ldrh	r3, [r7, #14]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3303      	adds	r3, #3
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	3202      	adds	r2, #2
 800afdc:	7812      	ldrb	r2, [r2, #0]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	3201      	adds	r2, #1
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	4313      	orrs	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
	return rv;
 800affc:	68fb      	ldr	r3, [r7, #12]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	887a      	ldrh	r2, [r7, #2]
 800b01e:	b2d2      	uxtb	r2, r2
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	887b      	ldrh	r3, [r7, #2]
 800b024:	0a1b      	lsrs	r3, r3, #8
 800b026:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	887a      	ldrh	r2, [r7, #2]
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	0a1b      	lsrs	r3, r3, #8
 800b05a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	b2d2      	uxtb	r2, r2
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	0a1b      	lsrs	r3, r3, #8
 800b07e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	607a      	str	r2, [r7, #4]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00d      	beq.n	800b0ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	1c53      	adds	r3, r2, #1
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	1c59      	adds	r1, r3, #1
 800b0bc:	6179      	str	r1, [r7, #20]
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	607b      	str	r3, [r7, #4]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1f1      	bne.n	800b0b2 <mem_cpy+0x1a>
	}
}
 800b0ce:	bf00      	nop
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b0da:	b480      	push	{r7}
 800b0dc:	b087      	sub	sp, #28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	617a      	str	r2, [r7, #20]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	607b      	str	r3, [r7, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f3      	bne.n	800b0ea <mem_set+0x10>
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	371c      	adds	r7, #28
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b110:	b480      	push	{r7}
 800b112:	b089      	sub	sp, #36	; 0x24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	61fa      	str	r2, [r7, #28]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4619      	mov	r1, r3
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	61ba      	str	r2, [r7, #24]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	1acb      	subs	r3, r1, r3
 800b13c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3b01      	subs	r3, #1
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <mem_cmp+0x40>
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0eb      	beq.n	800b128 <mem_cmp+0x18>

	return r;
 800b150:	697b      	ldr	r3, [r7, #20]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3724      	adds	r7, #36	; 0x24
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b168:	e002      	b.n	800b170 <chk_chr+0x12>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3301      	adds	r3, #1
 800b16e:	607b      	str	r3, [r7, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <chk_chr+0x26>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	4293      	cmp	r3, r2
 800b182:	d1f2      	bne.n	800b16a <chk_chr+0xc>
	return *str;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	781b      	ldrb	r3, [r3, #0]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60bb      	str	r3, [r7, #8]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	e029      	b.n	800b1fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b1a8:	4a27      	ldr	r2, [pc, #156]	; (800b248 <chk_lock+0xb4>)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	011b      	lsls	r3, r3, #4
 800b1ae:	4413      	add	r3, r2
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01d      	beq.n	800b1f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1b6:	4a24      	ldr	r2, [pc, #144]	; (800b248 <chk_lock+0xb4>)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	4413      	add	r3, r2
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d116      	bne.n	800b1f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b1c8:	4a1f      	ldr	r2, [pc, #124]	; (800b248 <chk_lock+0xb4>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	4413      	add	r3, r2
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d10c      	bne.n	800b1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1dc:	4a1a      	ldr	r2, [pc, #104]	; (800b248 <chk_lock+0xb4>)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d102      	bne.n	800b1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1f0:	e007      	b.n	800b202 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d9d2      	bls.n	800b1a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d109      	bne.n	800b21c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <chk_lock+0x80>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d101      	bne.n	800b218 <chk_lock+0x84>
 800b214:	2300      	movs	r3, #0
 800b216:	e010      	b.n	800b23a <chk_lock+0xa6>
 800b218:	2312      	movs	r3, #18
 800b21a:	e00e      	b.n	800b23a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d108      	bne.n	800b234 <chk_lock+0xa0>
 800b222:	4a09      	ldr	r2, [pc, #36]	; (800b248 <chk_lock+0xb4>)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	4413      	add	r3, r2
 800b22a:	330c      	adds	r3, #12
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b232:	d101      	bne.n	800b238 <chk_lock+0xa4>
 800b234:	2310      	movs	r3, #16
 800b236:	e000      	b.n	800b23a <chk_lock+0xa6>
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	20002c54 	.word	0x20002c54

0800b24c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b252:	2300      	movs	r3, #0
 800b254:	607b      	str	r3, [r7, #4]
 800b256:	e002      	b.n	800b25e <enq_lock+0x12>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3301      	adds	r3, #1
 800b25c:	607b      	str	r3, [r7, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d806      	bhi.n	800b272 <enq_lock+0x26>
 800b264:	4a09      	ldr	r2, [pc, #36]	; (800b28c <enq_lock+0x40>)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	011b      	lsls	r3, r3, #4
 800b26a:	4413      	add	r3, r2
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1f2      	bne.n	800b258 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b02      	cmp	r3, #2
 800b276:	bf14      	ite	ne
 800b278:	2301      	movne	r3, #1
 800b27a:	2300      	moveq	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20002c54 	.word	0x20002c54

0800b290 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	e01f      	b.n	800b2e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b2a0:	4a41      	ldr	r2, [pc, #260]	; (800b3a8 <inc_lock+0x118>)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	4413      	add	r3, r2
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d113      	bne.n	800b2da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b2b2:	4a3d      	ldr	r2, [pc, #244]	; (800b3a8 <inc_lock+0x118>)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	4413      	add	r3, r2
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d109      	bne.n	800b2da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2c6:	4a38      	ldr	r2, [pc, #224]	; (800b3a8 <inc_lock+0x118>)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d006      	beq.n	800b2e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d9dc      	bls.n	800b2a0 <inc_lock+0x10>
 800b2e6:	e000      	b.n	800b2ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d132      	bne.n	800b356 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e002      	b.n	800b2fc <inc_lock+0x6c>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d806      	bhi.n	800b310 <inc_lock+0x80>
 800b302:	4a29      	ldr	r2, [pc, #164]	; (800b3a8 <inc_lock+0x118>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	4413      	add	r3, r2
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1f2      	bne.n	800b2f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b02      	cmp	r3, #2
 800b314:	d101      	bne.n	800b31a <inc_lock+0x8a>
 800b316:	2300      	movs	r3, #0
 800b318:	e040      	b.n	800b39c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	4922      	ldr	r1, [pc, #136]	; (800b3a8 <inc_lock+0x118>)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	440b      	add	r3, r1
 800b326:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	491e      	ldr	r1, [pc, #120]	; (800b3a8 <inc_lock+0x118>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	440b      	add	r3, r1
 800b334:	3304      	adds	r3, #4
 800b336:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	695a      	ldr	r2, [r3, #20]
 800b33c:	491a      	ldr	r1, [pc, #104]	; (800b3a8 <inc_lock+0x118>)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	011b      	lsls	r3, r3, #4
 800b342:	440b      	add	r3, r1
 800b344:	3308      	adds	r3, #8
 800b346:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b348:	4a17      	ldr	r2, [pc, #92]	; (800b3a8 <inc_lock+0x118>)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	011b      	lsls	r3, r3, #4
 800b34e:	4413      	add	r3, r2
 800b350:	330c      	adds	r3, #12
 800b352:	2200      	movs	r2, #0
 800b354:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <inc_lock+0xe0>
 800b35c:	4a12      	ldr	r2, [pc, #72]	; (800b3a8 <inc_lock+0x118>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	4413      	add	r3, r2
 800b364:	330c      	adds	r3, #12
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <inc_lock+0xe0>
 800b36c:	2300      	movs	r3, #0
 800b36e:	e015      	b.n	800b39c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d108      	bne.n	800b388 <inc_lock+0xf8>
 800b376:	4a0c      	ldr	r2, [pc, #48]	; (800b3a8 <inc_lock+0x118>)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	4413      	add	r3, r2
 800b37e:	330c      	adds	r3, #12
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	e001      	b.n	800b38c <inc_lock+0xfc>
 800b388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b38c:	4906      	ldr	r1, [pc, #24]	; (800b3a8 <inc_lock+0x118>)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	440b      	add	r3, r1
 800b394:	330c      	adds	r3, #12
 800b396:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20002c54 	.word	0x20002c54

0800b3ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	607b      	str	r3, [r7, #4]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d825      	bhi.n	800b40c <dec_lock+0x60>
		n = Files[i].ctr;
 800b3c0:	4a17      	ldr	r2, [pc, #92]	; (800b420 <dec_lock+0x74>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	011b      	lsls	r3, r3, #4
 800b3c6:	4413      	add	r3, r2
 800b3c8:	330c      	adds	r3, #12
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3ce:	89fb      	ldrh	r3, [r7, #14]
 800b3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d4:	d101      	bne.n	800b3da <dec_lock+0x2e>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3da:	89fb      	ldrh	r3, [r7, #14]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <dec_lock+0x3a>
 800b3e0:	89fb      	ldrh	r3, [r7, #14]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3e6:	4a0e      	ldr	r2, [pc, #56]	; (800b420 <dec_lock+0x74>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	4413      	add	r3, r2
 800b3ee:	330c      	adds	r3, #12
 800b3f0:	89fa      	ldrh	r2, [r7, #14]
 800b3f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <dec_lock+0x5a>
 800b3fa:	4a09      	ldr	r2, [pc, #36]	; (800b420 <dec_lock+0x74>)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	4413      	add	r3, r2
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	737b      	strb	r3, [r7, #13]
 800b40a:	e001      	b.n	800b410 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b40c:	2302      	movs	r3, #2
 800b40e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b410:	7b7b      	ldrb	r3, [r7, #13]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20002c54 	.word	0x20002c54

0800b424 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e010      	b.n	800b454 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b432:	4a0d      	ldr	r2, [pc, #52]	; (800b468 <clear_lock+0x44>)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	4413      	add	r3, r2
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d105      	bne.n	800b44e <clear_lock+0x2a>
 800b442:	4a09      	ldr	r2, [pc, #36]	; (800b468 <clear_lock+0x44>)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	4413      	add	r3, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3301      	adds	r3, #1
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d9eb      	bls.n	800b432 <clear_lock+0xe>
	}
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	20002c54 	.word	0x20002c54

0800b46c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	78db      	ldrb	r3, [r3, #3]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d034      	beq.n	800b4ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b484:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7858      	ldrb	r0, [r3, #1]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b490:	2301      	movs	r3, #1
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	f7ff fd40 	bl	800af18 <disk_write>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	73fb      	strb	r3, [r7, #15]
 800b4a2:	e022      	b.n	800b4ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	1ad2      	subs	r2, r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d217      	bcs.n	800b4ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	789b      	ldrb	r3, [r3, #2]
 800b4be:	613b      	str	r3, [r7, #16]
 800b4c0:	e010      	b.n	800b4e4 <sync_window+0x78>
					wsect += fs->fsize;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	7858      	ldrb	r0, [r3, #1]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	f7ff fd1d 	bl	800af18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d8eb      	bhi.n	800b4c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d01b      	beq.n	800b544 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ffad 	bl	800b46c <sync_window>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d113      	bne.n	800b544 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	7858      	ldrb	r0, [r3, #1]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b526:	2301      	movs	r3, #1
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	f7ff fcd5 	bl	800aed8 <disk_read>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d004      	beq.n	800b53e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b534:	f04f 33ff 	mov.w	r3, #4294967295
 800b538:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff ff87 	bl	800b46c <sync_window>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d159      	bne.n	800b61c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d149      	bne.n	800b604 <sync_fs+0xb4>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d145      	bne.n	800b604 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	899b      	ldrh	r3, [r3, #12]
 800b582:	461a      	mov	r2, r3
 800b584:	2100      	movs	r1, #0
 800b586:	f7ff fda8 	bl	800b0da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	333c      	adds	r3, #60	; 0x3c
 800b58e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b592:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fd37 	bl	800b00a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	333c      	adds	r3, #60	; 0x3c
 800b5a0:	4921      	ldr	r1, [pc, #132]	; (800b628 <sync_fs+0xd8>)
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fd4c 	bl	800b040 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	333c      	adds	r3, #60	; 0x3c
 800b5ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b5b0:	491e      	ldr	r1, [pc, #120]	; (800b62c <sync_fs+0xdc>)
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fd44 	bl	800b040 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	333c      	adds	r3, #60	; 0x3c
 800b5bc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7ff fd3a 	bl	800b040 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	333c      	adds	r3, #60	; 0x3c
 800b5d0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4610      	mov	r0, r2
 800b5dc:	f7ff fd30 	bl	800b040 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7858      	ldrb	r0, [r3, #1]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f7ff fc8d 	bl	800af18 <disk_write>
			fs->fsi_flag = 0;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2200      	movs	r2, #0
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fca3 	bl	800af58 <disk_ioctl>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <sync_fs+0xcc>
 800b618:	2301      	movs	r3, #1
 800b61a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	41615252 	.word	0x41615252
 800b62c:	61417272 	.word	0x61417272

0800b630 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	3b02      	subs	r3, #2
 800b63e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	3b02      	subs	r3, #2
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d301      	bcc.n	800b650 <clust2sect+0x20>
 800b64c:	2300      	movs	r3, #0
 800b64e:	e008      	b.n	800b662 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	895b      	ldrh	r3, [r3, #10]
 800b654:	461a      	mov	r2, r3
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	fb03 f202 	mul.w	r2, r3, r2
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b660:	4413      	add	r3, r2
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b086      	sub	sp, #24
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d904      	bls.n	800b68e <get_fat+0x20>
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d302      	bcc.n	800b694 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b68e:	2301      	movs	r3, #1
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	e0bb      	b.n	800b80c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b694:	f04f 33ff 	mov.w	r3, #4294967295
 800b698:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	f000 8083 	beq.w	800b7aa <get_fat+0x13c>
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	f300 80a7 	bgt.w	800b7f8 <get_fat+0x18a>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d002      	beq.n	800b6b4 <get_fat+0x46>
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d056      	beq.n	800b760 <get_fat+0xf2>
 800b6b2:	e0a1      	b.n	800b7f8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	085b      	lsrs	r3, r3, #1
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	899b      	ldrh	r3, [r3, #12]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6d2:	4413      	add	r3, r2
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6938      	ldr	r0, [r7, #16]
 800b6d8:	f7ff ff0c 	bl	800b4f4 <move_window>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f040 808d 	bne.w	800b7fe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	60fa      	str	r2, [r7, #12]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	8992      	ldrh	r2, [r2, #12]
 800b6ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6f2:	fb01 f202 	mul.w	r2, r1, r2
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b700:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	899b      	ldrh	r3, [r3, #12]
 800b70a:	4619      	mov	r1, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b712:	4413      	add	r3, r2
 800b714:	4619      	mov	r1, r3
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f7ff feec 	bl	800b4f4 <move_window>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d16f      	bne.n	800b802 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	899b      	ldrh	r3, [r3, #12]
 800b726:	461a      	mov	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b72e:	fb01 f202 	mul.w	r2, r1, r2
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	4413      	add	r3, r2
 800b738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	461a      	mov	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4313      	orrs	r3, r2
 800b744:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <get_fat+0xe8>
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	091b      	lsrs	r3, r3, #4
 800b754:	e002      	b.n	800b75c <get_fat+0xee>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b75c:	617b      	str	r3, [r7, #20]
			break;
 800b75e:	e055      	b.n	800b80c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	899b      	ldrh	r3, [r3, #12]
 800b768:	085b      	lsrs	r3, r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4619      	mov	r1, r3
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	fbb3 f3f1 	udiv	r3, r3, r1
 800b774:	4413      	add	r3, r2
 800b776:	4619      	mov	r1, r3
 800b778:	6938      	ldr	r0, [r7, #16]
 800b77a:	f7ff febb 	bl	800b4f4 <move_window>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d140      	bne.n	800b806 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	8992      	ldrh	r2, [r2, #12]
 800b792:	fbb3 f0f2 	udiv	r0, r3, r2
 800b796:	fb00 f202 	mul.w	r2, r0, r2
 800b79a:	1a9b      	subs	r3, r3, r2
 800b79c:	440b      	add	r3, r1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fbf8 	bl	800af94 <ld_word>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	617b      	str	r3, [r7, #20]
			break;
 800b7a8:	e030      	b.n	800b80c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	089b      	lsrs	r3, r3, #2
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7be:	4413      	add	r3, r2
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6938      	ldr	r0, [r7, #16]
 800b7c4:	f7ff fe96 	bl	800b4f4 <move_window>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d11d      	bne.n	800b80a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	8992      	ldrh	r2, [r2, #12]
 800b7dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7e0:	fb00 f202 	mul.w	r2, r0, r2
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	440b      	add	r3, r1
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fbeb 	bl	800afc4 <ld_dword>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b7f4:	617b      	str	r3, [r7, #20]
			break;
 800b7f6:	e009      	b.n	800b80c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	617b      	str	r3, [r7, #20]
 800b7fc:	e006      	b.n	800b80c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7fe:	bf00      	nop
 800b800:	e004      	b.n	800b80c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b80a:	bf00      	nop
		}
	}

	return val;
 800b80c:	697b      	ldr	r3, [r7, #20]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b816:	b590      	push	{r4, r7, lr}
 800b818:	b089      	sub	sp, #36	; 0x24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b822:	2302      	movs	r3, #2
 800b824:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	f240 8102 	bls.w	800ba32 <put_fat+0x21c>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	429a      	cmp	r2, r3
 800b836:	f080 80fc 	bcs.w	800ba32 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b03      	cmp	r3, #3
 800b840:	f000 80b6 	beq.w	800b9b0 <put_fat+0x19a>
 800b844:	2b03      	cmp	r3, #3
 800b846:	f300 80fd 	bgt.w	800ba44 <put_fat+0x22e>
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d003      	beq.n	800b856 <put_fat+0x40>
 800b84e:	2b02      	cmp	r3, #2
 800b850:	f000 8083 	beq.w	800b95a <put_fat+0x144>
 800b854:	e0f6      	b.n	800ba44 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	085b      	lsrs	r3, r3, #1
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	4413      	add	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	899b      	ldrh	r3, [r3, #12]
 800b86c:	4619      	mov	r1, r3
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	fbb3 f3f1 	udiv	r3, r3, r1
 800b874:	4413      	add	r3, r2
 800b876:	4619      	mov	r1, r3
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7ff fe3b 	bl	800b4f4 <move_window>
 800b87e:	4603      	mov	r3, r0
 800b880:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b882:	7ffb      	ldrb	r3, [r7, #31]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 80d6 	bne.w	800ba36 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	61ba      	str	r2, [r7, #24]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	8992      	ldrh	r2, [r2, #12]
 800b89a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b89e:	fb00 f202 	mul.w	r2, r0, r2
 800b8a2:	1a9b      	subs	r3, r3, r2
 800b8a4:	440b      	add	r3, r1
 800b8a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00d      	beq.n	800b8ce <put_fat+0xb8>
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	b25b      	sxtb	r3, r3
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	b25a      	sxtb	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	b25b      	sxtb	r3, r3
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	e001      	b.n	800b8d2 <put_fat+0xbc>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	899b      	ldrh	r3, [r3, #12]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fdff 	bl	800b4f4 <move_window>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8fa:	7ffb      	ldrb	r3, [r7, #31]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f040 809c 	bne.w	800ba3a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	899b      	ldrh	r3, [r3, #12]
 800b90c:	461a      	mov	r2, r3
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	fbb3 f0f2 	udiv	r0, r3, r2
 800b914:	fb00 f202 	mul.w	r2, r0, r2
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	440b      	add	r3, r1
 800b91c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <put_fat+0x11a>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	091b      	lsrs	r3, r3, #4
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	e00e      	b.n	800b94e <put_fat+0x138>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	b25b      	sxtb	r3, r3
 800b936:	f023 030f 	bic.w	r3, r3, #15
 800b93a:	b25a      	sxtb	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	0a1b      	lsrs	r3, r3, #8
 800b940:	b25b      	sxtb	r3, r3
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	b25b      	sxtb	r3, r3
 800b948:	4313      	orrs	r3, r2
 800b94a:	b25b      	sxtb	r3, r3
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	70da      	strb	r2, [r3, #3]
			break;
 800b958:	e074      	b.n	800ba44 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	899b      	ldrh	r3, [r3, #12]
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	b29b      	uxth	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b96e:	4413      	add	r3, r2
 800b970:	4619      	mov	r1, r3
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f7ff fdbe 	bl	800b4f4 <move_window>
 800b978:	4603      	mov	r3, r0
 800b97a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b97c:	7ffb      	ldrb	r3, [r7, #31]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d15d      	bne.n	800ba3e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	8992      	ldrh	r2, [r2, #12]
 800b990:	fbb3 f0f2 	udiv	r0, r3, r2
 800b994:	fb00 f202 	mul.w	r2, r0, r2
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	440b      	add	r3, r1
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff fb31 	bl	800b00a <st_word>
			fs->wflag = 1;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	70da      	strb	r2, [r3, #3]
			break;
 800b9ae:	e049      	b.n	800ba44 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	899b      	ldrh	r3, [r3, #12]
 800b9b8:	089b      	lsrs	r3, r3, #2
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	4619      	mov	r1, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7ff fd93 	bl	800b4f4 <move_window>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9d2:	7ffb      	ldrb	r3, [r7, #31]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d134      	bne.n	800ba42 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	8992      	ldrh	r2, [r2, #12]
 800b9ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9f0:	fb00 f202 	mul.w	r2, r0, r2
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fae3 	bl	800afc4 <ld_dword>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba04:	4323      	orrs	r3, r4
 800ba06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	8992      	ldrh	r2, [r2, #12]
 800ba16:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba1a:	fb00 f202 	mul.w	r2, r0, r2
 800ba1e:	1a9b      	subs	r3, r3, r2
 800ba20:	440b      	add	r3, r1
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fb0b 	bl	800b040 <st_dword>
			fs->wflag = 1;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	70da      	strb	r2, [r3, #3]
			break;
 800ba30:	e008      	b.n	800ba44 <put_fat+0x22e>
		}
	}
 800ba32:	bf00      	nop
 800ba34:	e006      	b.n	800ba44 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ba36:	bf00      	nop
 800ba38:	e004      	b.n	800ba44 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ba3a:	bf00      	nop
 800ba3c:	e002      	b.n	800ba44 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ba3e:	bf00      	nop
 800ba40:	e000      	b.n	800ba44 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ba42:	bf00      	nop
	return res;
 800ba44:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3724      	adds	r7, #36	; 0x24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd90      	pop	{r4, r7, pc}

0800ba4e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b088      	sub	sp, #32
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d904      	bls.n	800ba74 <remove_chain+0x26>
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d301      	bcc.n	800ba78 <remove_chain+0x2a>
 800ba74:	2302      	movs	r3, #2
 800ba76:	e04b      	b.n	800bb10 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00c      	beq.n	800ba98 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ba7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	69b8      	ldr	r0, [r7, #24]
 800ba86:	f7ff fec6 	bl	800b816 <put_fat>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ba8e:	7ffb      	ldrb	r3, [r7, #31]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <remove_chain+0x4a>
 800ba94:	7ffb      	ldrb	r3, [r7, #31]
 800ba96:	e03b      	b.n	800bb10 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ba98:	68b9      	ldr	r1, [r7, #8]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fde7 	bl	800b66e <get_fat>
 800baa0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d031      	beq.n	800bb0c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <remove_chain+0x64>
 800baae:	2302      	movs	r3, #2
 800bab0:	e02e      	b.n	800bb10 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	d101      	bne.n	800babe <remove_chain+0x70>
 800baba:	2301      	movs	r3, #1
 800babc:	e028      	b.n	800bb10 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800babe:	2200      	movs	r2, #0
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	69b8      	ldr	r0, [r7, #24]
 800bac4:	f7ff fea7 	bl	800b816 <put_fat>
 800bac8:	4603      	mov	r3, r0
 800baca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bacc:	7ffb      	ldrb	r3, [r7, #31]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <remove_chain+0x88>
 800bad2:	7ffb      	ldrb	r3, [r7, #31]
 800bad4:	e01c      	b.n	800bb10 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	699a      	ldr	r2, [r3, #24]
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	3b02      	subs	r3, #2
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d20b      	bcs.n	800bafc <remove_chain+0xae>
			fs->free_clst++;
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	791b      	ldrb	r3, [r3, #4]
 800baf2:	f043 0301 	orr.w	r3, r3, #1
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d3c6      	bcc.n	800ba98 <remove_chain+0x4a>
 800bb0a:	e000      	b.n	800bb0e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bb0c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3720      	adds	r7, #32
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10d      	bne.n	800bb4a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d004      	beq.n	800bb44 <create_chain+0x2c>
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d31b      	bcc.n	800bb7c <create_chain+0x64>
 800bb44:	2301      	movs	r3, #1
 800bb46:	61bb      	str	r3, [r7, #24]
 800bb48:	e018      	b.n	800bb7c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff fd8e 	bl	800b66e <get_fat>
 800bb52:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d801      	bhi.n	800bb5e <create_chain+0x46>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e070      	b.n	800bc40 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d101      	bne.n	800bb6a <create_chain+0x52>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	e06a      	b.n	800bc40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d201      	bcs.n	800bb78 <create_chain+0x60>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	e063      	b.n	800bc40 <create_chain+0x128>
		scl = clst;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	3301      	adds	r3, #1
 800bb84:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d307      	bcc.n	800bba0 <create_chain+0x88>
				ncl = 2;
 800bb90:	2302      	movs	r3, #2
 800bb92:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bb94:	69fa      	ldr	r2, [r7, #28]
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d901      	bls.n	800bba0 <create_chain+0x88>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e04f      	b.n	800bc40 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bba0:	69f9      	ldr	r1, [r7, #28]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fd63 	bl	800b66e <get_fat>
 800bba8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00e      	beq.n	800bbce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d003      	beq.n	800bbbe <create_chain+0xa6>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbc:	d101      	bne.n	800bbc2 <create_chain+0xaa>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	e03e      	b.n	800bc40 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d1da      	bne.n	800bb80 <create_chain+0x68>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e038      	b.n	800bc40 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bbce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	69f9      	ldr	r1, [r7, #28]
 800bbd6:	6938      	ldr	r0, [r7, #16]
 800bbd8:	f7ff fe1d 	bl	800b816 <put_fat>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d109      	bne.n	800bbfa <create_chain+0xe2>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d006      	beq.n	800bbfa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bbec:	69fa      	ldr	r2, [r7, #28]
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6938      	ldr	r0, [r7, #16]
 800bbf2:	f7ff fe10 	bl	800b816 <put_fat>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d116      	bne.n	800bc2e <create_chain+0x116>
		fs->last_clst = ncl;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	699a      	ldr	r2, [r3, #24]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	3b02      	subs	r3, #2
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d804      	bhi.n	800bc1e <create_chain+0x106>
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	1e5a      	subs	r2, r3, #1
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	791b      	ldrb	r3, [r3, #4]
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	711a      	strb	r2, [r3, #4]
 800bc2c:	e007      	b.n	800bc3e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d102      	bne.n	800bc3a <create_chain+0x122>
 800bc34:	f04f 33ff 	mov.w	r3, #4294967295
 800bc38:	e000      	b.n	800bc3c <create_chain+0x124>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bc3e:	69fb      	ldr	r3, [r7, #28]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3720      	adds	r7, #32
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	899b      	ldrh	r3, [r3, #12]
 800bc64:	461a      	mov	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	8952      	ldrh	r2, [r2, #10]
 800bc70:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1d1a      	adds	r2, r3, #4
 800bc7a:	613a      	str	r2, [r7, #16]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <clmt_clust+0x42>
 800bc86:	2300      	movs	r3, #0
 800bc88:	e010      	b.n	800bcac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d307      	bcc.n	800bca2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bca0:	e7e9      	b.n	800bc76 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bca2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	4413      	add	r3, r2
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	371c      	adds	r7, #28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcce:	d204      	bcs.n	800bcda <dir_sdi+0x22>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	f003 031f 	and.w	r3, r3, #31
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <dir_sdi+0x26>
		return FR_INT_ERR;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e071      	b.n	800bdc2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <dir_sdi+0x46>
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d902      	bls.n	800bcfe <dir_sdi+0x46>
		clst = fs->dirbase;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10c      	bne.n	800bd1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	8912      	ldrh	r2, [r2, #8]
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d301      	bcc.n	800bd14 <dir_sdi+0x5c>
 800bd10:	2302      	movs	r3, #2
 800bd12:	e056      	b.n	800bdc2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	61da      	str	r2, [r3, #28]
 800bd1c:	e02d      	b.n	800bd7a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	895b      	ldrh	r3, [r3, #10]
 800bd22:	461a      	mov	r2, r3
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	899b      	ldrh	r3, [r3, #12]
 800bd28:	fb02 f303 	mul.w	r3, r2, r3
 800bd2c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd2e:	e019      	b.n	800bd64 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6979      	ldr	r1, [r7, #20]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fc9a 	bl	800b66e <get_fat>
 800bd3a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd42:	d101      	bne.n	800bd48 <dir_sdi+0x90>
 800bd44:	2301      	movs	r3, #1
 800bd46:	e03c      	b.n	800bdc2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d904      	bls.n	800bd58 <dir_sdi+0xa0>
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d301      	bcc.n	800bd5c <dir_sdi+0xa4>
 800bd58:	2302      	movs	r3, #2
 800bd5a:	e032      	b.n	800bdc2 <dir_sdi+0x10a>
			ofs -= csz;
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d2e1      	bcs.n	800bd30 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bd6c:	6979      	ldr	r1, [r7, #20]
 800bd6e:	6938      	ldr	r0, [r7, #16]
 800bd70:	f7ff fc5e 	bl	800b630 <clust2sect>
 800bd74:	4602      	mov	r2, r0
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <dir_sdi+0xd4>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e01a      	b.n	800bdc2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	899b      	ldrh	r3, [r3, #12]
 800bd94:	4619      	mov	r1, r3
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd9c:	441a      	add	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	899b      	ldrh	r3, [r3, #12]
 800bdac:	461a      	mov	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdb4:	fb00 f202 	mul.w	r2, r0, r2
 800bdb8:	1a9b      	subs	r3, r3, r2
 800bdba:	18ca      	adds	r2, r1, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b086      	sub	sp, #24
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	3320      	adds	r3, #32
 800bde0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <dir_next+0x28>
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdf0:	d301      	bcc.n	800bdf6 <dir_next+0x2c>
 800bdf2:	2304      	movs	r3, #4
 800bdf4:	e0bb      	b.n	800bf6e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	899b      	ldrh	r3, [r3, #12]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	fbb3 f1f2 	udiv	r1, r3, r2
 800be02:	fb01 f202 	mul.w	r2, r1, r2
 800be06:	1a9b      	subs	r3, r3, r2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f040 809d 	bne.w	800bf48 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10b      	bne.n	800be38 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	095b      	lsrs	r3, r3, #5
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	8912      	ldrh	r2, [r2, #8]
 800be28:	4293      	cmp	r3, r2
 800be2a:	f0c0 808d 	bcc.w	800bf48 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	61da      	str	r2, [r3, #28]
 800be34:	2304      	movs	r3, #4
 800be36:	e09a      	b.n	800bf6e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	899b      	ldrh	r3, [r3, #12]
 800be3c:	461a      	mov	r2, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	fbb3 f3f2 	udiv	r3, r3, r2
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	8952      	ldrh	r2, [r2, #10]
 800be48:	3a01      	subs	r2, #1
 800be4a:	4013      	ands	r3, r2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d17b      	bne.n	800bf48 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7ff fc08 	bl	800b66e <get_fat>
 800be5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d801      	bhi.n	800be6a <dir_next+0xa0>
 800be66:	2302      	movs	r3, #2
 800be68:	e081      	b.n	800bf6e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be70:	d101      	bne.n	800be76 <dir_next+0xac>
 800be72:	2301      	movs	r3, #1
 800be74:	e07b      	b.n	800bf6e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d359      	bcc.n	800bf34 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d104      	bne.n	800be90 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	61da      	str	r2, [r3, #28]
 800be8c:	2304      	movs	r3, #4
 800be8e:	e06e      	b.n	800bf6e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	4619      	mov	r1, r3
 800be98:	4610      	mov	r0, r2
 800be9a:	f7ff fe3d 	bl	800bb18 <create_chain>
 800be9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <dir_next+0xe0>
 800bea6:	2307      	movs	r3, #7
 800bea8:	e061      	b.n	800bf6e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <dir_next+0xea>
 800beb0:	2302      	movs	r3, #2
 800beb2:	e05c      	b.n	800bf6e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d101      	bne.n	800bec0 <dir_next+0xf6>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e056      	b.n	800bf6e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7ff fad3 	bl	800b46c <sync_window>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <dir_next+0x106>
 800becc:	2301      	movs	r3, #1
 800bece:	e04e      	b.n	800bf6e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	899b      	ldrh	r3, [r3, #12]
 800beda:	461a      	mov	r2, r3
 800bedc:	2100      	movs	r1, #0
 800bede:	f7ff f8fc 	bl	800b0da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bee2:	2300      	movs	r3, #0
 800bee4:	613b      	str	r3, [r7, #16]
 800bee6:	6979      	ldr	r1, [r7, #20]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fba1 	bl	800b630 <clust2sect>
 800beee:	4602      	mov	r2, r0
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38
 800bef4:	e012      	b.n	800bf1c <dir_next+0x152>
						fs->wflag = 1;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2201      	movs	r2, #1
 800befa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fab5 	bl	800b46c <sync_window>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <dir_next+0x142>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e030      	b.n	800bf6e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	895b      	ldrh	r3, [r3, #10]
 800bf20:	461a      	mov	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d3e6      	bcc.n	800bef6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf3a:	6979      	ldr	r1, [r7, #20]
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f7ff fb77 	bl	800b630 <clust2sect>
 800bf42:	4602      	mov	r2, r0
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	899b      	ldrh	r3, [r3, #12]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf60:	fb00 f202 	mul.w	r2, r0, r2
 800bf64:	1a9b      	subs	r3, r3, r2
 800bf66:	18ca      	adds	r2, r1, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf86:	2100      	movs	r1, #0
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff fe95 	bl	800bcb8 <dir_sdi>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d12b      	bne.n	800bff0 <dir_alloc+0x7a>
		n = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff faa6 	bl	800b4f4 <move_window>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d11d      	bne.n	800bfee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2be5      	cmp	r3, #229	; 0xe5
 800bfba:	d004      	beq.n	800bfc6 <dir_alloc+0x50>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d107      	bne.n	800bfd6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	613b      	str	r3, [r7, #16]
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d102      	bne.n	800bfda <dir_alloc+0x64>
 800bfd4:	e00c      	b.n	800bff0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bfda:	2101      	movs	r1, #1
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fef4 	bl	800bdca <dir_next>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0d7      	beq.n	800bf9c <dir_alloc+0x26>
 800bfec:	e000      	b.n	800bff0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d101      	bne.n	800bffa <dir_alloc+0x84>
 800bff6:	2307      	movs	r3, #7
 800bff8:	75fb      	strb	r3, [r7, #23]
	return res;
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	331a      	adds	r3, #26
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe ffbe 	bl	800af94 <ld_word>
 800c018:	4603      	mov	r3, r0
 800c01a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b03      	cmp	r3, #3
 800c022:	d109      	bne.n	800c038 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	3314      	adds	r3, #20
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe ffb3 	bl	800af94 <ld_word>
 800c02e:	4603      	mov	r3, r0
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c038:	68fb      	ldr	r3, [r7, #12]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	331a      	adds	r3, #26
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	b292      	uxth	r2, r2
 800c056:	4611      	mov	r1, r2
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe ffd6 	bl	800b00a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b03      	cmp	r3, #3
 800c064:	d109      	bne.n	800c07a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f103 0214 	add.w	r2, r3, #20
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	0c1b      	lsrs	r3, r3, #16
 800c070:	b29b      	uxth	r3, r3
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f7fe ffc8 	bl	800b00a <st_word>
	}
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	331a      	adds	r3, #26
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe ff7e 	bl	800af94 <ld_word>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <cmp_lfn+0x1e>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e059      	b.n	800c156 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0aa:	1e5a      	subs	r2, r3, #1
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	81fb      	strh	r3, [r7, #14]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
 800c0c0:	e033      	b.n	800c12a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c0c2:	4a27      	ldr	r2, [pc, #156]	; (800c160 <cmp_lfn+0xdc>)
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe ff5f 	bl	800af94 <ld_word>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c0da:	89fb      	ldrh	r3, [r7, #14]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01a      	beq.n	800c116 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2bfe      	cmp	r3, #254	; 0xfe
 800c0e4:	d812      	bhi.n	800c10c <cmp_lfn+0x88>
 800c0e6:	89bb      	ldrh	r3, [r7, #12]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f002 f8d1 	bl	800e290 <ff_wtoupper>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461c      	mov	r4, r3
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	617a      	str	r2, [r7, #20]
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f002 f8c5 	bl	800e290 <ff_wtoupper>
 800c106:	4603      	mov	r3, r0
 800c108:	429c      	cmp	r4, r3
 800c10a:	d001      	beq.n	800c110 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c10c:	2300      	movs	r3, #0
 800c10e:	e022      	b.n	800c156 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c110:	89bb      	ldrh	r3, [r7, #12]
 800c112:	81fb      	strh	r3, [r7, #14]
 800c114:	e006      	b.n	800c124 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c116:	89bb      	ldrh	r3, [r7, #12]
 800c118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d001      	beq.n	800c124 <cmp_lfn+0xa0>
 800c120:	2300      	movs	r3, #0
 800c122:	e018      	b.n	800c156 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b0c      	cmp	r3, #12
 800c12e:	d9c8      	bls.n	800c0c2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <cmp_lfn+0xd0>
 800c13c:	89fb      	ldrh	r3, [r7, #14]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <cmp_lfn+0xd0>
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	4413      	add	r3, r2
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <cmp_lfn+0xd0>
 800c150:	2300      	movs	r3, #0
 800c152:	e000      	b.n	800c156 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c154:	2301      	movs	r3, #1
}
 800c156:	4618      	mov	r0, r3
 800c158:	371c      	adds	r7, #28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd90      	pop	{r4, r7, pc}
 800c15e:	bf00      	nop
 800c160:	08013894 	.word	0x08013894

0800c164 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	4611      	mov	r1, r2
 800c170:	461a      	mov	r2, r3
 800c172:	460b      	mov	r3, r1
 800c174:	71fb      	strb	r3, [r7, #7]
 800c176:	4613      	mov	r3, r2
 800c178:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	330d      	adds	r3, #13
 800c17e:	79ba      	ldrb	r2, [r7, #6]
 800c180:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	330b      	adds	r3, #11
 800c186:	220f      	movs	r2, #15
 800c188:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	330c      	adds	r3, #12
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	331a      	adds	r3, #26
 800c196:	2100      	movs	r1, #0
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe ff36 	bl	800b00a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	1e5a      	subs	r2, r3, #1
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4413      	add	r3, r2
 800c1ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	82fb      	strh	r3, [r7, #22]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c1b6:	8afb      	ldrh	r3, [r7, #22]
 800c1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <put_lfn+0x6c>
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	61fa      	str	r2, [r7, #28]
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c1d0:	4a17      	ldr	r2, [pc, #92]	; (800c230 <put_lfn+0xcc>)
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	8afa      	ldrh	r2, [r7, #22]
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe ff11 	bl	800b00a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c1e8:	8afb      	ldrh	r3, [r7, #22]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d102      	bne.n	800c1f4 <put_lfn+0x90>
 800c1ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	2b0c      	cmp	r3, #12
 800c1fe:	d9da      	bls.n	800c1b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c200:	8afb      	ldrh	r3, [r7, #22]
 800c202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c206:	4293      	cmp	r3, r2
 800c208:	d006      	beq.n	800c218 <put_lfn+0xb4>
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4413      	add	r3, r2
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <put_lfn+0xbc>
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c21e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	79fa      	ldrb	r2, [r7, #7]
 800c224:	701a      	strb	r2, [r3, #0]
}
 800c226:	bf00      	nop
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	08013894 	.word	0x08013894

0800c234 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08c      	sub	sp, #48	; 0x30
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c242:	220b      	movs	r2, #11
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7fe ff26 	bl	800b098 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b05      	cmp	r3, #5
 800c250:	d92b      	bls.n	800c2aa <gen_numname+0x76>
		sr = seq;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c256:	e022      	b.n	800c29e <gen_numname+0x6a>
			wc = *lfn++;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	1c9a      	adds	r2, r3, #2
 800c25c:	607a      	str	r2, [r7, #4]
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c262:	2300      	movs	r3, #0
 800c264:	62bb      	str	r3, [r7, #40]	; 0x28
 800c266:	e017      	b.n	800c298 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	005a      	lsls	r2, r3, #1
 800c26c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	4413      	add	r3, r2
 800c274:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c278:	085b      	lsrs	r3, r3, #1
 800c27a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <gen_numname+0x5e>
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c28c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c290:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	3301      	adds	r3, #1
 800c296:	62bb      	str	r3, [r7, #40]	; 0x28
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	2b0f      	cmp	r3, #15
 800c29c:	d9e4      	bls.n	800c268 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1d8      	bne.n	800c258 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c2aa:	2307      	movs	r3, #7
 800c2ac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 030f 	and.w	r3, r3, #15
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	3330      	adds	r3, #48	; 0x30
 800c2ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2c2:	2b39      	cmp	r3, #57	; 0x39
 800c2c4:	d904      	bls.n	800c2d0 <gen_numname+0x9c>
 800c2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2ca:	3307      	adds	r3, #7
 800c2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	1e5a      	subs	r2, r3, #1
 800c2d4:	62ba      	str	r2, [r7, #40]	; 0x28
 800c2d6:	3330      	adds	r3, #48	; 0x30
 800c2d8:	443b      	add	r3, r7
 800c2da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c2de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	091b      	lsrs	r3, r3, #4
 800c2e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1df      	bne.n	800c2ae <gen_numname+0x7a>
	ns[i] = '~';
 800c2ee:	f107 0214 	add.w	r2, r7, #20
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	4413      	add	r3, r2
 800c2f6:	227e      	movs	r2, #126	; 0x7e
 800c2f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c2fe:	e002      	b.n	800c306 <gen_numname+0xd2>
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	3301      	adds	r3, #1
 800c304:	627b      	str	r3, [r7, #36]	; 0x24
 800c306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d205      	bcs.n	800c31a <gen_numname+0xe6>
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	4413      	add	r3, r2
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b20      	cmp	r3, #32
 800c318:	d1f2      	bne.n	800c300 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	2b07      	cmp	r3, #7
 800c31e:	d807      	bhi.n	800c330 <gen_numname+0xfc>
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	62ba      	str	r2, [r7, #40]	; 0x28
 800c326:	3330      	adds	r3, #48	; 0x30
 800c328:	443b      	add	r3, r7
 800c32a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c32e:	e000      	b.n	800c332 <gen_numname+0xfe>
 800c330:	2120      	movs	r1, #32
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	627a      	str	r2, [r7, #36]	; 0x24
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	460a      	mov	r2, r1
 800c33e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	2b07      	cmp	r3, #7
 800c344:	d9e9      	bls.n	800c31a <gen_numname+0xe6>
}
 800c346:	bf00      	nop
 800c348:	bf00      	nop
 800c34a:	3730      	adds	r7, #48	; 0x30
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c35c:	230b      	movs	r3, #11
 800c35e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	b2da      	uxtb	r2, r3
 800c364:	0852      	lsrs	r2, r2, #1
 800c366:	01db      	lsls	r3, r3, #7
 800c368:	4313      	orrs	r3, r2
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	1c59      	adds	r1, r3, #1
 800c370:	6079      	str	r1, [r7, #4]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	4413      	add	r3, r2
 800c376:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	60bb      	str	r3, [r7, #8]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1ed      	bne.n	800c360 <sum_sfn+0x10>
	return sum;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b086      	sub	sp, #24
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff fc88 	bl	800bcb8 <dir_sdi>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <dir_find+0x24>
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	e0a9      	b.n	800c50a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c3b6:	23ff      	movs	r3, #255	; 0xff
 800c3b8:	753b      	strb	r3, [r7, #20]
 800c3ba:	7d3b      	ldrb	r3, [r7, #20]
 800c3bc:	757b      	strb	r3, [r7, #21]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6938      	ldr	r0, [r7, #16]
 800c3ce:	f7ff f891 	bl	800b4f4 <move_window>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f040 8090 	bne.w	800c4fe <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c3e6:	7dbb      	ldrb	r3, [r7, #22]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <dir_find+0x60>
 800c3ec:	2304      	movs	r3, #4
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	e08a      	b.n	800c508 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	330b      	adds	r3, #11
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3fe:	73fb      	strb	r3, [r7, #15]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7bfa      	ldrb	r2, [r7, #15]
 800c404:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c406:	7dbb      	ldrb	r3, [r7, #22]
 800c408:	2be5      	cmp	r3, #229	; 0xe5
 800c40a:	d007      	beq.n	800c41c <dir_find+0x8a>
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	f003 0308 	and.w	r3, r3, #8
 800c412:	2b00      	cmp	r3, #0
 800c414:	d009      	beq.n	800c42a <dir_find+0x98>
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b0f      	cmp	r3, #15
 800c41a:	d006      	beq.n	800c42a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c41c:	23ff      	movs	r3, #255	; 0xff
 800c41e:	757b      	strb	r3, [r7, #21]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	631a      	str	r2, [r3, #48]	; 0x30
 800c428:	e05e      	b.n	800c4e8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	2b0f      	cmp	r3, #15
 800c42e:	d136      	bne.n	800c49e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d154      	bne.n	800c4e8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c43e:	7dbb      	ldrb	r3, [r7, #22]
 800c440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00d      	beq.n	800c464 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	7b5b      	ldrb	r3, [r3, #13]
 800c44e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c450:	7dbb      	ldrb	r3, [r7, #22]
 800c452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c456:	75bb      	strb	r3, [r7, #22]
 800c458:	7dbb      	ldrb	r3, [r7, #22]
 800c45a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	695a      	ldr	r2, [r3, #20]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c464:	7dba      	ldrb	r2, [r7, #22]
 800c466:	7d7b      	ldrb	r3, [r7, #21]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d115      	bne.n	800c498 <dir_find+0x106>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a1b      	ldr	r3, [r3, #32]
 800c470:	330d      	adds	r3, #13
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	7d3a      	ldrb	r2, [r7, #20]
 800c476:	429a      	cmp	r2, r3
 800c478:	d10e      	bne.n	800c498 <dir_find+0x106>
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	691a      	ldr	r2, [r3, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f7ff fdfd 	bl	800c084 <cmp_lfn>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <dir_find+0x106>
 800c490:	7d7b      	ldrb	r3, [r7, #21]
 800c492:	3b01      	subs	r3, #1
 800c494:	b2db      	uxtb	r3, r3
 800c496:	e000      	b.n	800c49a <dir_find+0x108>
 800c498:	23ff      	movs	r3, #255	; 0xff
 800c49a:	757b      	strb	r3, [r7, #21]
 800c49c:	e024      	b.n	800c4e8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c49e:	7d7b      	ldrb	r3, [r7, #21]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <dir_find+0x126>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff ff51 	bl	800c350 <sum_sfn>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	7d3b      	ldrb	r3, [r7, #20]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d024      	beq.n	800c502 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <dir_find+0x14a>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a18      	ldr	r0, [r3, #32]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3324      	adds	r3, #36	; 0x24
 800c4ce:	220b      	movs	r2, #11
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	f7fe fe1d 	bl	800b110 <mem_cmp>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d014      	beq.n	800c506 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c4dc:	23ff      	movs	r3, #255	; 0xff
 800c4de:	757b      	strb	r3, [r7, #21]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff fc6d 	bl	800bdca <dir_next>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c4f4:	7dfb      	ldrb	r3, [r7, #23]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f43f af65 	beq.w	800c3c6 <dir_find+0x34>
 800c4fc:	e004      	b.n	800c508 <dir_find+0x176>
		if (res != FR_OK) break;
 800c4fe:	bf00      	nop
 800c500:	e002      	b.n	800c508 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c506:	bf00      	nop

	return res;
 800c508:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08c      	sub	sp, #48	; 0x30
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c528:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <dir_register+0x20>
 800c530:	2306      	movs	r3, #6
 800c532:	e0e0      	b.n	800c6f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c534:	2300      	movs	r3, #0
 800c536:	627b      	str	r3, [r7, #36]	; 0x24
 800c538:	e002      	b.n	800c540 <dir_register+0x2c>
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	3301      	adds	r3, #1
 800c53e:	627b      	str	r3, [r7, #36]	; 0x24
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	691a      	ldr	r2, [r3, #16]
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	4413      	add	r3, r2
 800c54a:	881b      	ldrh	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1f4      	bne.n	800c53a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c556:	f107 030c 	add.w	r3, r7, #12
 800c55a:	220c      	movs	r2, #12
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fd9b 	bl	800b098 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d032      	beq.n	800c5d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2240      	movs	r2, #64	; 0x40
 800c570:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c574:	2301      	movs	r3, #1
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
 800c578:	e016      	b.n	800c5a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	691a      	ldr	r2, [r3, #16]
 800c584:	f107 010c 	add.w	r1, r7, #12
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	f7ff fe53 	bl	800c234 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff feff 	bl	800c392 <dir_find>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	2b63      	cmp	r3, #99	; 0x63
 800c5ac:	d9e5      	bls.n	800c57a <dir_register+0x66>
 800c5ae:	e000      	b.n	800c5b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c5b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	2b64      	cmp	r3, #100	; 0x64
 800c5b6:	d101      	bne.n	800c5bc <dir_register+0xa8>
 800c5b8:	2307      	movs	r3, #7
 800c5ba:	e09c      	b.n	800c6f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d002      	beq.n	800c5ca <dir_register+0xb6>
 800c5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5c8:	e095      	b.n	800c6f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c5ca:	7dfa      	ldrb	r2, [r7, #23]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
 800c5d4:	f003 0302 	and.w	r3, r3, #2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d007      	beq.n	800c5ec <dir_register+0xd8>
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	330c      	adds	r3, #12
 800c5e0:	4a47      	ldr	r2, [pc, #284]	; (800c700 <dir_register+0x1ec>)
 800c5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e6:	089b      	lsrs	r3, r3, #2
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	e000      	b.n	800c5ee <dir_register+0xda>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c5f0:	6a39      	ldr	r1, [r7, #32]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fcbf 	bl	800bf76 <dir_alloc>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c602:	2b00      	cmp	r3, #0
 800c604:	d148      	bne.n	800c698 <dir_register+0x184>
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	3b01      	subs	r3, #1
 800c60a:	623b      	str	r3, [r7, #32]
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d042      	beq.n	800c698 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	695a      	ldr	r2, [r3, #20]
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	015b      	lsls	r3, r3, #5
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff fb4a 	bl	800bcb8 <dir_sdi>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d132      	bne.n	800c698 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3324      	adds	r3, #36	; 0x24
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff fe8a 	bl	800c350 <sum_sfn>
 800c63c:	4603      	mov	r3, r0
 800c63e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	69db      	ldr	r3, [r3, #28]
 800c644:	4619      	mov	r1, r3
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	f7fe ff54 	bl	800b4f4 <move_window>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c656:	2b00      	cmp	r3, #0
 800c658:	d11d      	bne.n	800c696 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	6918      	ldr	r0, [r3, #16]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a19      	ldr	r1, [r3, #32]
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	b2da      	uxtb	r2, r3
 800c666:	7efb      	ldrb	r3, [r7, #27]
 800c668:	f7ff fd7c 	bl	800c164 <put_lfn>
				fs->wflag = 1;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	2201      	movs	r2, #1
 800c670:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c672:	2100      	movs	r1, #0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fba8 	bl	800bdca <dir_next>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c684:	2b00      	cmp	r3, #0
 800c686:	d107      	bne.n	800c698 <dir_register+0x184>
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	623b      	str	r3, [r7, #32]
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1d5      	bne.n	800c640 <dir_register+0x12c>
 800c694:	e000      	b.n	800c698 <dir_register+0x184>
				if (res != FR_OK) break;
 800c696:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d128      	bne.n	800c6f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	69f8      	ldr	r0, [r7, #28]
 800c6a8:	f7fe ff24 	bl	800b4f4 <move_window>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d11b      	bne.n	800c6f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fd09 	bl	800b0da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a18      	ldr	r0, [r3, #32]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3324      	adds	r3, #36	; 0x24
 800c6d0:	220b      	movs	r2, #11
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	f7fe fce0 	bl	800b098 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	330c      	adds	r3, #12
 800c6e4:	f002 0218 	and.w	r2, r2, #24
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3730      	adds	r7, #48	; 0x30
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	4ec4ec4f 	.word	0x4ec4ec4f

0800c704 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	613b      	str	r3, [r7, #16]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	2300      	movs	r3, #0
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	61ba      	str	r2, [r7, #24]
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	4413      	add	r3, r2
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c734:	2b1f      	cmp	r3, #31
 800c736:	d940      	bls.n	800c7ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c73a:	2b2f      	cmp	r3, #47	; 0x2f
 800c73c:	d006      	beq.n	800c74c <create_name+0x48>
 800c73e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c740:	2b5c      	cmp	r3, #92	; 0x5c
 800c742:	d110      	bne.n	800c766 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c744:	e002      	b.n	800c74c <create_name+0x48>
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	3301      	adds	r3, #1
 800c74a:	61bb      	str	r3, [r7, #24]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	4413      	add	r3, r2
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b2f      	cmp	r3, #47	; 0x2f
 800c756:	d0f6      	beq.n	800c746 <create_name+0x42>
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	4413      	add	r3, r2
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b5c      	cmp	r3, #92	; 0x5c
 800c762:	d0f0      	beq.n	800c746 <create_name+0x42>
			break;
 800c764:	e02a      	b.n	800c7bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2bfe      	cmp	r3, #254	; 0xfe
 800c76a:	d901      	bls.n	800c770 <create_name+0x6c>
 800c76c:	2306      	movs	r3, #6
 800c76e:	e1ca      	b.n	800cb06 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c772:	b2db      	uxtb	r3, r3
 800c774:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c778:	2101      	movs	r1, #1
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 fd4c 	bl	800e218 <ff_convert>
 800c780:	4603      	mov	r3, r0
 800c782:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <create_name+0x8a>
 800c78a:	2306      	movs	r3, #6
 800c78c:	e1bb      	b.n	800cb06 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c790:	2b7f      	cmp	r3, #127	; 0x7f
 800c792:	d809      	bhi.n	800c7a8 <create_name+0xa4>
 800c794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c796:	4619      	mov	r1, r3
 800c798:	489f      	ldr	r0, [pc, #636]	; (800ca18 <create_name+0x314>)
 800c79a:	f7fe fce0 	bl	800b15e <chk_chr>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <create_name+0xa4>
 800c7a4:	2306      	movs	r3, #6
 800c7a6:	e1ae      	b.n	800cb06 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	617a      	str	r2, [r7, #20]
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c7b8:	e7b4      	b.n	800c724 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c7ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	441a      	add	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7c8:	2b1f      	cmp	r3, #31
 800c7ca:	d801      	bhi.n	800c7d0 <create_name+0xcc>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	e000      	b.n	800c7d2 <create_name+0xce>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d109      	bne.n	800c7f0 <create_name+0xec>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ee:	d016      	beq.n	800c81e <create_name+0x11a>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d14e      	bne.n	800c894 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	2b2e      	cmp	r3, #46	; 0x2e
 800c808:	d144      	bne.n	800c894 <create_name+0x190>
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c810:	3b02      	subs	r3, #2
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	2b2e      	cmp	r3, #46	; 0x2e
 800c81c:	d13a      	bne.n	800c894 <create_name+0x190>
		lfn[di] = 0;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	005b      	lsls	r3, r3, #1
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	4413      	add	r3, r2
 800c826:	2200      	movs	r2, #0
 800c828:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c82a:	2300      	movs	r3, #0
 800c82c:	623b      	str	r3, [r7, #32]
 800c82e:	e00f      	b.n	800c850 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c830:	6a3a      	ldr	r2, [r7, #32]
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	429a      	cmp	r2, r3
 800c836:	d201      	bcs.n	800c83c <create_name+0x138>
 800c838:	212e      	movs	r1, #46	; 0x2e
 800c83a:	e000      	b.n	800c83e <create_name+0x13a>
 800c83c:	2120      	movs	r1, #32
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	4413      	add	r3, r2
 800c844:	3324      	adds	r3, #36	; 0x24
 800c846:	460a      	mov	r2, r1
 800c848:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	3301      	adds	r3, #1
 800c84e:	623b      	str	r3, [r7, #32]
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	2b0a      	cmp	r3, #10
 800c854:	d9ec      	bls.n	800c830 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c85a:	f043 0320 	orr.w	r3, r3, #32
 800c85e:	b2d9      	uxtb	r1, r3
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	4413      	add	r3, r2
 800c866:	3324      	adds	r3, #36	; 0x24
 800c868:	460a      	mov	r2, r1
 800c86a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	e14a      	b.n	800cb06 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c876:	3b01      	subs	r3, #1
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	4413      	add	r3, r2
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c884:	2b20      	cmp	r3, #32
 800c886:	d002      	beq.n	800c88e <create_name+0x18a>
 800c888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c88a:	2b2e      	cmp	r3, #46	; 0x2e
 800c88c:	d106      	bne.n	800c89c <create_name+0x198>
		di--;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	3b01      	subs	r3, #1
 800c892:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1ea      	bne.n	800c870 <create_name+0x16c>
 800c89a:	e000      	b.n	800c89e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800c89c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <create_name+0x1b0>
 800c8b0:	2306      	movs	r3, #6
 800c8b2:	e128      	b.n	800cb06 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3324      	adds	r3, #36	; 0x24
 800c8b8:	220b      	movs	r2, #11
 800c8ba:	2120      	movs	r1, #32
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fe fc0c 	bl	800b0da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61bb      	str	r3, [r7, #24]
 800c8c6:	e002      	b.n	800c8ce <create_name+0x1ca>
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	61bb      	str	r3, [r7, #24]
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b20      	cmp	r3, #32
 800c8da:	d0f5      	beq.n	800c8c8 <create_name+0x1c4>
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e8:	d0ee      	beq.n	800c8c8 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <create_name+0x200>
 800c8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f4:	f043 0303 	orr.w	r3, r3, #3
 800c8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c8fc:	e002      	b.n	800c904 <create_name+0x200>
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	3b01      	subs	r3, #1
 800c902:	617b      	str	r3, [r7, #20]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d009      	beq.n	800c91e <create_name+0x21a>
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c910:	3b01      	subs	r3, #1
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4413      	add	r3, r2
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	2b2e      	cmp	r3, #46	; 0x2e
 800c91c:	d1ef      	bne.n	800c8fe <create_name+0x1fa>

	i = b = 0; ni = 8;
 800c91e:	2300      	movs	r3, #0
 800c920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c924:	2300      	movs	r3, #0
 800c926:	623b      	str	r3, [r7, #32]
 800c928:	2308      	movs	r3, #8
 800c92a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	61ba      	str	r2, [r7, #24]
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c93c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 8097 	beq.w	800ca72 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c946:	2b20      	cmp	r3, #32
 800c948:	d006      	beq.n	800c958 <create_name+0x254>
 800c94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c94c:	2b2e      	cmp	r3, #46	; 0x2e
 800c94e:	d10a      	bne.n	800c966 <create_name+0x262>
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	429a      	cmp	r2, r3
 800c956:	d006      	beq.n	800c966 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800c958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c95c:	f043 0303 	orr.w	r3, r3, #3
 800c960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c964:	e084      	b.n	800ca70 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c966:	6a3a      	ldr	r2, [r7, #32]
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d203      	bcs.n	800c976 <create_name+0x272>
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	429a      	cmp	r2, r3
 800c974:	d123      	bne.n	800c9be <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	2b0b      	cmp	r3, #11
 800c97a:	d106      	bne.n	800c98a <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	f043 0303 	orr.w	r3, r3, #3
 800c984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c988:	e076      	b.n	800ca78 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d005      	beq.n	800c99e <create_name+0x29a>
 800c992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c996:	f043 0303 	orr.w	r3, r3, #3
 800c99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d867      	bhi.n	800ca76 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	61bb      	str	r3, [r7, #24]
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	623b      	str	r3, [r7, #32]
 800c9ae:	230b      	movs	r3, #11
 800c9b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c9b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9bc:	e058      	b.n	800ca70 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c9be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c9c2:	d914      	bls.n	800c9ee <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 fc25 	bl	800e218 <ff_convert>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d004      	beq.n	800c9e2 <create_name+0x2de>
 800c9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9da:	3b80      	subs	r3, #128	; 0x80
 800c9dc:	4a0f      	ldr	r2, [pc, #60]	; (800ca1c <create_name+0x318>)
 800c9de:	5cd3      	ldrb	r3, [r2, r3]
 800c9e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e6:	f043 0302 	orr.w	r3, r3, #2
 800c9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d007      	beq.n	800ca04 <create_name+0x300>
 800c9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4809      	ldr	r0, [pc, #36]	; (800ca20 <create_name+0x31c>)
 800c9fa:	f7fe fbb0 	bl	800b15e <chk_chr>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00f      	beq.n	800ca24 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ca04:	235f      	movs	r3, #95	; 0x5f
 800ca06:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ca08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca0c:	f043 0303 	orr.w	r3, r3, #3
 800ca10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca14:	e022      	b.n	800ca5c <create_name+0x358>
 800ca16:	bf00      	nop
 800ca18:	080137ac 	.word	0x080137ac
 800ca1c:	08013814 	.word	0x08013814
 800ca20:	080137b8 	.word	0x080137b8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ca24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca26:	2b40      	cmp	r3, #64	; 0x40
 800ca28:	d909      	bls.n	800ca3e <create_name+0x33a>
 800ca2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca2c:	2b5a      	cmp	r3, #90	; 0x5a
 800ca2e:	d806      	bhi.n	800ca3e <create_name+0x33a>
					b |= 2;
 800ca30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca34:	f043 0302 	orr.w	r3, r3, #2
 800ca38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca3c:	e00e      	b.n	800ca5c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ca3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca40:	2b60      	cmp	r3, #96	; 0x60
 800ca42:	d90b      	bls.n	800ca5c <create_name+0x358>
 800ca44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca46:	2b7a      	cmp	r3, #122	; 0x7a
 800ca48:	d808      	bhi.n	800ca5c <create_name+0x358>
						b |= 1; w -= 0x20;
 800ca4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca58:	3b20      	subs	r3, #32
 800ca5a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	623a      	str	r2, [r7, #32]
 800ca62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca64:	b2d1      	uxtb	r1, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4413      	add	r3, r2
 800ca6a:	460a      	mov	r2, r1
 800ca6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ca70:	e75c      	b.n	800c92c <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800ca72:	bf00      	nop
 800ca74:	e000      	b.n	800ca78 <create_name+0x374>
			if (si > di) break;			/* No extension */
 800ca76:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca7e:	2be5      	cmp	r3, #229	; 0xe5
 800ca80:	d103      	bne.n	800ca8a <create_name+0x386>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2205      	movs	r2, #5
 800ca86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d104      	bne.n	800ca9a <create_name+0x396>
 800ca90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ca9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca9e:	f003 030c 	and.w	r3, r3, #12
 800caa2:	2b0c      	cmp	r3, #12
 800caa4:	d005      	beq.n	800cab2 <create_name+0x3ae>
 800caa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caaa:	f003 0303 	and.w	r3, r3, #3
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d105      	bne.n	800cabe <create_name+0x3ba>
 800cab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab6:	f043 0302 	orr.w	r3, r3, #2
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac2:	f003 0302 	and.w	r3, r3, #2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d117      	bne.n	800cafa <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800caca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cace:	f003 0303 	and.w	r3, r3, #3
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d105      	bne.n	800cae2 <create_name+0x3de>
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cada:	f043 0310 	orr.w	r3, r3, #16
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cae2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cae6:	f003 030c 	and.w	r3, r3, #12
 800caea:	2b04      	cmp	r3, #4
 800caec:	d105      	bne.n	800cafa <create_name+0x3f6>
 800caee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf2:	f043 0308 	orr.w	r3, r3, #8
 800caf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cb04:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3728      	adds	r7, #40	; 0x28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop

0800cb10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b2f      	cmp	r3, #47	; 0x2f
 800cb2a:	d00b      	beq.n	800cb44 <follow_path+0x34>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b5c      	cmp	r3, #92	; 0x5c
 800cb32:	d007      	beq.n	800cb44 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	69da      	ldr	r2, [r3, #28]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	609a      	str	r2, [r3, #8]
 800cb3c:	e00d      	b.n	800cb5a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	3301      	adds	r3, #1
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b2f      	cmp	r3, #47	; 0x2f
 800cb4a:	d0f8      	beq.n	800cb3e <follow_path+0x2e>
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b5c      	cmp	r3, #92	; 0x5c
 800cb52:	d0f4      	beq.n	800cb3e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2200      	movs	r2, #0
 800cb58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b1f      	cmp	r3, #31
 800cb60:	d80a      	bhi.n	800cb78 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2280      	movs	r2, #128	; 0x80
 800cb66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff f8a3 	bl	800bcb8 <dir_sdi>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]
 800cb76:	e05b      	b.n	800cc30 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb78:	463b      	mov	r3, r7
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff fdc1 	bl	800c704 <create_name>
 800cb82:	4603      	mov	r3, r0
 800cb84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d14c      	bne.n	800cc26 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff fc00 	bl	800c392 <dir_find>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01b      	beq.n	800cbdc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b04      	cmp	r3, #4
 800cba8:	d13f      	bne.n	800cc2a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cbb4:	7afb      	ldrb	r3, [r7, #11]
 800cbb6:	f003 0304 	and.w	r3, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d031      	beq.n	800cc22 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2280      	movs	r2, #128	; 0x80
 800cbc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800cbca:	e02e      	b.n	800cc2a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbcc:	7afb      	ldrb	r3, [r7, #11]
 800cbce:	f003 0304 	and.w	r3, r3, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d129      	bne.n	800cc2a <follow_path+0x11a>
 800cbd6:	2305      	movs	r3, #5
 800cbd8:	75fb      	strb	r3, [r7, #23]
				break;
 800cbda:	e026      	b.n	800cc2a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbdc:	7afb      	ldrb	r3, [r7, #11]
 800cbde:	f003 0304 	and.w	r3, r3, #4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d123      	bne.n	800cc2e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	799b      	ldrb	r3, [r3, #6]
 800cbea:	f003 0310 	and.w	r3, r3, #16
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d102      	bne.n	800cbf8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800cbf2:	2305      	movs	r3, #5
 800cbf4:	75fb      	strb	r3, [r7, #23]
 800cbf6:	e01b      	b.n	800cc30 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	8992      	ldrh	r2, [r2, #12]
 800cc06:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc0a:	fb00 f202 	mul.w	r2, r0, r2
 800cc0e:	1a9b      	subs	r3, r3, r2
 800cc10:	440b      	add	r3, r1
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff f9f5 	bl	800c004 <ld_clust>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	609a      	str	r2, [r3, #8]
 800cc20:	e7aa      	b.n	800cb78 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cc22:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc24:	e7a8      	b.n	800cb78 <follow_path+0x68>
			if (res != FR_OK) break;
 800cc26:	bf00      	nop
 800cc28:	e002      	b.n	800cc30 <follow_path+0x120>
				break;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc2e:	bf00      	nop
			}
		}
	}

	return res;
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b087      	sub	sp, #28
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295
 800cc46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d031      	beq.n	800ccb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	617b      	str	r3, [r7, #20]
 800cc56:	e002      	b.n	800cc5e <get_ldnumber+0x24>
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b1f      	cmp	r3, #31
 800cc64:	d903      	bls.n	800cc6e <get_ldnumber+0x34>
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b3a      	cmp	r3, #58	; 0x3a
 800cc6c:	d1f4      	bne.n	800cc58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b3a      	cmp	r3, #58	; 0x3a
 800cc74:	d11c      	bne.n	800ccb0 <get_ldnumber+0x76>
			tp = *path;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	60fa      	str	r2, [r7, #12]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	3b30      	subs	r3, #48	; 0x30
 800cc86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	2b09      	cmp	r3, #9
 800cc8c:	d80e      	bhi.n	800ccac <get_ldnumber+0x72>
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d10a      	bne.n	800ccac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d107      	bne.n	800ccac <get_ldnumber+0x72>
					vol = (int)i;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	3301      	adds	r3, #1
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	e002      	b.n	800ccb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ccb4:	693b      	ldr	r3, [r7, #16]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
	...

0800ccc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	70da      	strb	r2, [r3, #3]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7fe fc08 	bl	800b4f4 <move_window>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <check_fs+0x2a>
 800ccea:	2304      	movs	r3, #4
 800ccec:	e038      	b.n	800cd60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	333c      	adds	r3, #60	; 0x3c
 800ccf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe f94c 	bl	800af94 <ld_word>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	461a      	mov	r2, r3
 800cd00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d001      	beq.n	800cd0c <check_fs+0x48>
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e029      	b.n	800cd60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd12:	2be9      	cmp	r3, #233	; 0xe9
 800cd14:	d009      	beq.n	800cd2a <check_fs+0x66>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd1c:	2beb      	cmp	r3, #235	; 0xeb
 800cd1e:	d11e      	bne.n	800cd5e <check_fs+0x9a>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd26:	2b90      	cmp	r3, #144	; 0x90
 800cd28:	d119      	bne.n	800cd5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	333c      	adds	r3, #60	; 0x3c
 800cd2e:	3336      	adds	r3, #54	; 0x36
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe f947 	bl	800afc4 <ld_dword>
 800cd36:	4603      	mov	r3, r0
 800cd38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd3c:	4a0a      	ldr	r2, [pc, #40]	; (800cd68 <check_fs+0xa4>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d101      	bne.n	800cd46 <check_fs+0x82>
 800cd42:	2300      	movs	r3, #0
 800cd44:	e00c      	b.n	800cd60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	333c      	adds	r3, #60	; 0x3c
 800cd4a:	3352      	adds	r3, #82	; 0x52
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe f939 	bl	800afc4 <ld_dword>
 800cd52:	4603      	mov	r3, r0
 800cd54:	4a05      	ldr	r2, [pc, #20]	; (800cd6c <check_fs+0xa8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d101      	bne.n	800cd5e <check_fs+0x9a>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e000      	b.n	800cd60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd5e:	2302      	movs	r3, #2
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	00544146 	.word	0x00544146
 800cd6c:	33544146 	.word	0x33544146

0800cd70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b096      	sub	sp, #88	; 0x58
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f7ff ff58 	bl	800cc3a <get_ldnumber>
 800cd8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	da01      	bge.n	800cd96 <find_volume+0x26>
 800cd92:	230b      	movs	r3, #11
 800cd94:	e268      	b.n	800d268 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd96:	4a9f      	ldr	r2, [pc, #636]	; (800d014 <find_volume+0x2a4>)
 800cd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <find_volume+0x3a>
 800cda6:	230c      	movs	r3, #12
 800cda8:	e25e      	b.n	800d268 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cdb0:	79fb      	ldrb	r3, [r7, #7]
 800cdb2:	f023 0301 	bic.w	r3, r3, #1
 800cdb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01a      	beq.n	800cdf6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fe f847 	bl	800ae58 <disk_status>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cdd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10c      	bne.n	800cdf6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d007      	beq.n	800cdf2 <find_volume+0x82>
 800cde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cde6:	f003 0304 	and.w	r3, r3, #4
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdee:	230a      	movs	r3, #10
 800cdf0:	e23a      	b.n	800d268 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e238      	b.n	800d268 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	785b      	ldrb	r3, [r3, #1]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe f83f 	bl	800ae8c <disk_initialize>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ce14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce20:	2303      	movs	r3, #3
 800ce22:	e221      	b.n	800d268 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d007      	beq.n	800ce3a <find_volume+0xca>
 800ce2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce2e:	f003 0304 	and.w	r3, r3, #4
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce36:	230a      	movs	r3, #10
 800ce38:	e216      	b.n	800d268 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	7858      	ldrb	r0, [r3, #1]
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	330c      	adds	r3, #12
 800ce42:	461a      	mov	r2, r3
 800ce44:	2102      	movs	r1, #2
 800ce46:	f7fe f887 	bl	800af58 <disk_ioctl>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <find_volume+0xe4>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e209      	b.n	800d268 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	899b      	ldrh	r3, [r3, #12]
 800ce58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5c:	d80d      	bhi.n	800ce7a <find_volume+0x10a>
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	899b      	ldrh	r3, [r3, #12]
 800ce62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce66:	d308      	bcc.n	800ce7a <find_volume+0x10a>
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	899b      	ldrh	r3, [r3, #12]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce70:	899b      	ldrh	r3, [r3, #12]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	4013      	ands	r3, r2
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <find_volume+0x10e>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e1f4      	b.n	800d268 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce86:	f7ff ff1d 	bl	800ccc4 <check_fs>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d149      	bne.n	800cf2c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce98:	2300      	movs	r3, #0
 800ce9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ce9c:	e01e      	b.n	800cedc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800cea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cea6:	011b      	lsls	r3, r3, #4
 800cea8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ceac:	4413      	add	r3, r2
 800ceae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d006      	beq.n	800cec8 <find_volume+0x158>
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	3308      	adds	r3, #8
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe f880 	bl	800afc4 <ld_dword>
 800cec4:	4602      	mov	r2, r0
 800cec6:	e000      	b.n	800ceca <find_volume+0x15a>
 800cec8:	2200      	movs	r2, #0
 800ceca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	3358      	adds	r3, #88	; 0x58
 800ced0:	443b      	add	r3, r7
 800ced2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ced6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced8:	3301      	adds	r3, #1
 800ceda:	643b      	str	r3, [r7, #64]	; 0x40
 800cedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d9dd      	bls.n	800ce9e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cee2:	2300      	movs	r3, #0
 800cee4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d002      	beq.n	800cef2 <find_volume+0x182>
 800ceec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceee:	3b01      	subs	r3, #1
 800cef0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	3358      	adds	r3, #88	; 0x58
 800cef8:	443b      	add	r3, r7
 800cefa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cefe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d005      	beq.n	800cf12 <find_volume+0x1a2>
 800cf06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf0a:	f7ff fedb 	bl	800ccc4 <check_fs>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	e000      	b.n	800cf14 <find_volume+0x1a4>
 800cf12:	2303      	movs	r3, #3
 800cf14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d905      	bls.n	800cf2c <find_volume+0x1bc>
 800cf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf22:	3301      	adds	r3, #1
 800cf24:	643b      	str	r3, [r7, #64]	; 0x40
 800cf26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d9e2      	bls.n	800cef2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d101      	bne.n	800cf38 <find_volume+0x1c8>
 800cf34:	2301      	movs	r3, #1
 800cf36:	e197      	b.n	800d268 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d901      	bls.n	800cf44 <find_volume+0x1d4>
 800cf40:	230d      	movs	r3, #13
 800cf42:	e191      	b.n	800d268 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf46:	333c      	adds	r3, #60	; 0x3c
 800cf48:	330b      	adds	r3, #11
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe f822 	bl	800af94 <ld_word>
 800cf50:	4603      	mov	r3, r0
 800cf52:	461a      	mov	r2, r3
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	899b      	ldrh	r3, [r3, #12]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d001      	beq.n	800cf60 <find_volume+0x1f0>
 800cf5c:	230d      	movs	r3, #13
 800cf5e:	e183      	b.n	800d268 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	333c      	adds	r3, #60	; 0x3c
 800cf64:	3316      	adds	r3, #22
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe f814 	bl	800af94 <ld_word>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <find_volume+0x214>
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	333c      	adds	r3, #60	; 0x3c
 800cf7a:	3324      	adds	r3, #36	; 0x24
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe f821 	bl	800afc4 <ld_dword>
 800cf82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf88:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	789b      	ldrb	r3, [r3, #2]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d005      	beq.n	800cfa8 <find_volume+0x238>
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	789b      	ldrb	r3, [r3, #2]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d001      	beq.n	800cfa8 <find_volume+0x238>
 800cfa4:	230d      	movs	r3, #13
 800cfa6:	e15f      	b.n	800d268 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	789b      	ldrb	r3, [r3, #2]
 800cfac:	461a      	mov	r2, r3
 800cfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb0:	fb02 f303 	mul.w	r3, r2, r3
 800cfb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	895b      	ldrh	r3, [r3, #10]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d008      	beq.n	800cfdc <find_volume+0x26c>
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	895b      	ldrh	r3, [r3, #10]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <find_volume+0x270>
 800cfdc:	230d      	movs	r3, #13
 800cfde:	e143      	b.n	800d268 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	333c      	adds	r3, #60	; 0x3c
 800cfe4:	3311      	adds	r3, #17
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fd ffd4 	bl	800af94 <ld_word>
 800cfec:	4603      	mov	r3, r0
 800cfee:	461a      	mov	r2, r3
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	891b      	ldrh	r3, [r3, #8]
 800cff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cffa:	8992      	ldrh	r2, [r2, #12]
 800cffc:	0952      	lsrs	r2, r2, #5
 800cffe:	b292      	uxth	r2, r2
 800d000:	fbb3 f1f2 	udiv	r1, r3, r2
 800d004:	fb01 f202 	mul.w	r2, r1, r2
 800d008:	1a9b      	subs	r3, r3, r2
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d003      	beq.n	800d018 <find_volume+0x2a8>
 800d010:	230d      	movs	r3, #13
 800d012:	e129      	b.n	800d268 <find_volume+0x4f8>
 800d014:	20002c4c 	.word	0x20002c4c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	333c      	adds	r3, #60	; 0x3c
 800d01c:	3313      	adds	r3, #19
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd ffb8 	bl	800af94 <ld_word>
 800d024:	4603      	mov	r3, r0
 800d026:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <find_volume+0x2cc>
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	333c      	adds	r3, #60	; 0x3c
 800d032:	3320      	adds	r3, #32
 800d034:	4618      	mov	r0, r3
 800d036:	f7fd ffc5 	bl	800afc4 <ld_dword>
 800d03a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	333c      	adds	r3, #60	; 0x3c
 800d040:	330e      	adds	r3, #14
 800d042:	4618      	mov	r0, r3
 800d044:	f7fd ffa6 	bl	800af94 <ld_word>
 800d048:	4603      	mov	r3, r0
 800d04a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d04c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <find_volume+0x2e6>
 800d052:	230d      	movs	r3, #13
 800d054:	e108      	b.n	800d268 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d056:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05a:	4413      	add	r3, r2
 800d05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d05e:	8911      	ldrh	r1, [r2, #8]
 800d060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d062:	8992      	ldrh	r2, [r2, #12]
 800d064:	0952      	lsrs	r2, r2, #5
 800d066:	b292      	uxth	r2, r2
 800d068:	fbb1 f2f2 	udiv	r2, r1, r2
 800d06c:	b292      	uxth	r2, r2
 800d06e:	4413      	add	r3, r2
 800d070:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	429a      	cmp	r2, r3
 800d078:	d201      	bcs.n	800d07e <find_volume+0x30e>
 800d07a:	230d      	movs	r3, #13
 800d07c:	e0f4      	b.n	800d268 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d086:	8952      	ldrh	r2, [r2, #10]
 800d088:	fbb3 f3f2 	udiv	r3, r3, r2
 800d08c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <find_volume+0x328>
 800d094:	230d      	movs	r3, #13
 800d096:	e0e7      	b.n	800d268 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d098:	2303      	movs	r3, #3
 800d09a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d802      	bhi.n	800d0ae <find_volume+0x33e>
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d802      	bhi.n	800d0be <find_volume+0x34e>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	1c9a      	adds	r2, r3, #2
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0ca:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d0cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d0:	441a      	add	r2, r3
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d0d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	441a      	add	r2, r3
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0de:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d0e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d11e      	bne.n	800d126 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	333c      	adds	r3, #60	; 0x3c
 800d0ec:	332a      	adds	r3, #42	; 0x2a
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd ff50 	bl	800af94 <ld_word>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <find_volume+0x38e>
 800d0fa:	230d      	movs	r3, #13
 800d0fc:	e0b4      	b.n	800d268 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d100:	891b      	ldrh	r3, [r3, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <find_volume+0x39a>
 800d106:	230d      	movs	r3, #13
 800d108:	e0ae      	b.n	800d268 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	333c      	adds	r3, #60	; 0x3c
 800d10e:	332c      	adds	r3, #44	; 0x2c
 800d110:	4618      	mov	r0, r3
 800d112:	f7fd ff57 	bl	800afc4 <ld_dword>
 800d116:	4602      	mov	r2, r0
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	6a1b      	ldr	r3, [r3, #32]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	647b      	str	r3, [r7, #68]	; 0x44
 800d124:	e01f      	b.n	800d166 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	891b      	ldrh	r3, [r3, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <find_volume+0x3c2>
 800d12e:	230d      	movs	r3, #13
 800d130:	e09a      	b.n	800d268 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d138:	441a      	add	r2, r3
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d13e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d142:	2b02      	cmp	r3, #2
 800d144:	d103      	bne.n	800d14e <find_volume+0x3de>
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	e00a      	b.n	800d164 <find_volume+0x3f4>
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	6a1a      	ldr	r2, [r3, #32]
 800d152:	4613      	mov	r3, r2
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	4413      	add	r3, r2
 800d158:	085a      	lsrs	r2, r3, #1
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d164:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	899b      	ldrh	r3, [r3, #12]
 800d16e:	4619      	mov	r1, r3
 800d170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d172:	440b      	add	r3, r1
 800d174:	3b01      	subs	r3, #1
 800d176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d178:	8989      	ldrh	r1, [r1, #12]
 800d17a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d17e:	429a      	cmp	r2, r3
 800d180:	d201      	bcs.n	800d186 <find_volume+0x416>
 800d182:	230d      	movs	r3, #13
 800d184:	e070      	b.n	800d268 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	619a      	str	r2, [r3, #24]
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	699a      	ldr	r2, [r3, #24]
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	2280      	movs	r2, #128	; 0x80
 800d19a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d149      	bne.n	800d238 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	333c      	adds	r3, #60	; 0x3c
 800d1a8:	3330      	adds	r3, #48	; 0x30
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fd fef2 	bl	800af94 <ld_word>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d140      	bne.n	800d238 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1be:	f7fe f999 	bl	800b4f4 <move_window>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d137      	bne.n	800d238 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	333c      	adds	r3, #60	; 0x3c
 800d1d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fd fedc 	bl	800af94 <ld_word>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d127      	bne.n	800d238 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	333c      	adds	r3, #60	; 0x3c
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fd fee9 	bl	800afc4 <ld_dword>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	4a1e      	ldr	r2, [pc, #120]	; (800d270 <find_volume+0x500>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d11e      	bne.n	800d238 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fc:	333c      	adds	r3, #60	; 0x3c
 800d1fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d202:	4618      	mov	r0, r3
 800d204:	f7fd fede 	bl	800afc4 <ld_dword>
 800d208:	4603      	mov	r3, r0
 800d20a:	4a1a      	ldr	r2, [pc, #104]	; (800d274 <find_volume+0x504>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d113      	bne.n	800d238 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	333c      	adds	r3, #60	; 0x3c
 800d214:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fd fed3 	bl	800afc4 <ld_dword>
 800d21e:	4602      	mov	r2, r0
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	333c      	adds	r3, #60	; 0x3c
 800d228:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fd fec9 	bl	800afc4 <ld_dword>
 800d232:	4602      	mov	r2, r0
 800d234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d236:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d23e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d240:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <find_volume+0x508>)
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	3301      	adds	r3, #1
 800d246:	b29a      	uxth	r2, r3
 800d248:	4b0b      	ldr	r3, [pc, #44]	; (800d278 <find_volume+0x508>)
 800d24a:	801a      	strh	r2, [r3, #0]
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <find_volume+0x508>)
 800d24e:	881a      	ldrh	r2, [r3, #0]
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <find_volume+0x50c>)
 800d258:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	2200      	movs	r2, #0
 800d25e:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d262:	f7fe f8df 	bl	800b424 <clear_lock>
#endif
	return FR_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3758      	adds	r7, #88	; 0x58
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	41615252 	.word	0x41615252
 800d274:	61417272 	.word	0x61417272
 800d278:	20002c50 	.word	0x20002c50
 800d27c:	20002c74 	.word	0x20002c74

0800d280 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d28a:	2309      	movs	r3, #9
 800d28c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d01c      	beq.n	800d2ce <validate+0x4e>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d018      	beq.n	800d2ce <validate+0x4e>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d013      	beq.n	800d2ce <validate+0x4e>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	889a      	ldrh	r2, [r3, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	88db      	ldrh	r3, [r3, #6]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d10c      	bne.n	800d2ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	785b      	ldrb	r3, [r3, #1]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd fdcc 	bl	800ae58 <disk_status>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <validate+0x4e>
			res = FR_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <validate+0x5a>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	e000      	b.n	800d2dc <validate+0x5c>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	6013      	str	r3, [r2, #0]
	return res;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
	...

0800d2ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d2fe:	f107 0310 	add.w	r3, r7, #16
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fc99 	bl	800cc3a <get_ldnumber>
 800d308:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	da01      	bge.n	800d314 <f_mount+0x28>
 800d310:	230b      	movs	r3, #11
 800d312:	e02b      	b.n	800d36c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d314:	4a17      	ldr	r2, [pc, #92]	; (800d374 <f_mount+0x88>)
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d31c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d005      	beq.n	800d330 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d324:	69b8      	ldr	r0, [r7, #24]
 800d326:	f7fe f87d 	bl	800b424 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	490d      	ldr	r1, [pc, #52]	; (800d374 <f_mount+0x88>)
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <f_mount+0x66>
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d001      	beq.n	800d356 <f_mount+0x6a>
 800d352:	2300      	movs	r3, #0
 800d354:	e00a      	b.n	800d36c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d356:	f107 010c 	add.w	r1, r7, #12
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	2200      	movs	r2, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff fd05 	bl	800cd70 <find_volume>
 800d366:	4603      	mov	r3, r0
 800d368:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20002c4c 	.word	0x20002c4c

0800d378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b09a      	sub	sp, #104	; 0x68
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <f_open+0x18>
 800d38c:	2309      	movs	r3, #9
 800d38e:	e1bb      	b.n	800d708 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d396:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d398:	79fa      	ldrb	r2, [r7, #7]
 800d39a:	f107 0114 	add.w	r1, r7, #20
 800d39e:	f107 0308 	add.w	r3, r7, #8
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7ff fce4 	bl	800cd70 <find_volume>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d3ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f040 819f 	bne.w	800d6f6 <f_open+0x37e>
		dj.obj.fs = fs;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	f107 0318 	add.w	r3, r7, #24
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fba3 	bl	800cb10 <follow_path>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d3d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d11a      	bne.n	800d40e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d3d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3dc:	b25b      	sxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da03      	bge.n	800d3ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800d3e2:	2306      	movs	r3, #6
 800d3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d3e8:	e011      	b.n	800d40e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3ea:	79fb      	ldrb	r3, [r7, #7]
 800d3ec:	f023 0301 	bic.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f107 0318 	add.w	r3, r7, #24
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7fd fec6 	bl	800b194 <chk_lock>
 800d408:	4603      	mov	r3, r0
 800d40a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	f003 031c 	and.w	r3, r3, #28
 800d414:	2b00      	cmp	r3, #0
 800d416:	d07f      	beq.n	800d518 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d017      	beq.n	800d450 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d424:	2b04      	cmp	r3, #4
 800d426:	d10e      	bne.n	800d446 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d428:	f7fd ff10 	bl	800b24c <enq_lock>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d006      	beq.n	800d440 <f_open+0xc8>
 800d432:	f107 0318 	add.w	r3, r7, #24
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff f86c 	bl	800c514 <dir_register>
 800d43c:	4603      	mov	r3, r0
 800d43e:	e000      	b.n	800d442 <f_open+0xca>
 800d440:	2312      	movs	r3, #18
 800d442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d446:	79fb      	ldrb	r3, [r7, #7]
 800d448:	f043 0308 	orr.w	r3, r3, #8
 800d44c:	71fb      	strb	r3, [r7, #7]
 800d44e:	e010      	b.n	800d472 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d450:	7fbb      	ldrb	r3, [r7, #30]
 800d452:	f003 0311 	and.w	r3, r3, #17
 800d456:	2b00      	cmp	r3, #0
 800d458:	d003      	beq.n	800d462 <f_open+0xea>
					res = FR_DENIED;
 800d45a:	2307      	movs	r3, #7
 800d45c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d460:	e007      	b.n	800d472 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <f_open+0xfa>
 800d46c:	2308      	movs	r3, #8
 800d46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d476:	2b00      	cmp	r3, #0
 800d478:	d168      	bne.n	800d54c <f_open+0x1d4>
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	f003 0308 	and.w	r3, r3, #8
 800d480:	2b00      	cmp	r3, #0
 800d482:	d063      	beq.n	800d54c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d484:	f7fd fc8a 	bl	800ad9c <get_fattime>
 800d488:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	330e      	adds	r3, #14
 800d48e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d490:	4618      	mov	r0, r3
 800d492:	f7fd fdd5 	bl	800b040 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d498:	3316      	adds	r3, #22
 800d49a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fd fdcf 	bl	800b040 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	330b      	adds	r3, #11
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe fda7 	bl	800c004 <ld_clust>
 800d4b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fdbf 	bl	800c042 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c6:	331c      	adds	r3, #28
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fd fdb8 	bl	800b040 <st_dword>
					fs->wflag = 1;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d037      	beq.n	800d54c <f_open+0x1d4>
						dw = fs->winsect;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d4e2:	f107 0318 	add.w	r3, r7, #24
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe faaf 	bl	800ba4e <remove_chain>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d126      	bne.n	800d54c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d502:	4618      	mov	r0, r3
 800d504:	f7fd fff6 	bl	800b4f4 <move_window>
 800d508:	4603      	mov	r3, r0
 800d50a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d512:	3a01      	subs	r2, #1
 800d514:	615a      	str	r2, [r3, #20]
 800d516:	e019      	b.n	800d54c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d115      	bne.n	800d54c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d520:	7fbb      	ldrb	r3, [r7, #30]
 800d522:	f003 0310 	and.w	r3, r3, #16
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d52a:	2304      	movs	r3, #4
 800d52c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d530:	e00c      	b.n	800d54c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	f003 0302 	and.w	r3, r3, #2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d007      	beq.n	800d54c <f_open+0x1d4>
 800d53c:	7fbb      	ldrb	r3, [r7, #30]
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <f_open+0x1d4>
						res = FR_DENIED;
 800d546:	2307      	movs	r3, #7
 800d548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d54c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d550:	2b00      	cmp	r3, #0
 800d552:	d128      	bne.n	800d5a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	f003 0308 	and.w	r3, r3, #8
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d564:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	f023 0301 	bic.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bf14      	ite	ne
 800d57e:	2301      	movne	r3, #1
 800d580:	2300      	moveq	r3, #0
 800d582:	b2db      	uxtb	r3, r3
 800d584:	461a      	mov	r2, r3
 800d586:	f107 0318 	add.w	r3, r7, #24
 800d58a:	4611      	mov	r1, r2
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fd fe7f 	bl	800b290 <inc_lock>
 800d592:	4602      	mov	r2, r0
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d102      	bne.n	800d5a6 <f_open+0x22e>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f040 80a3 	bne.w	800d6f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fd24 	bl	800c004 <ld_clust>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c4:	331c      	adds	r3, #28
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fd fcfc 	bl	800afc4 <ld_dword>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	88da      	ldrh	r2, [r3, #6]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	79fa      	ldrb	r2, [r7, #7]
 800d5ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3330      	adds	r3, #48	; 0x30
 800d602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d606:	2100      	movs	r1, #0
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fd fd66 	bl	800b0da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d60e:	79fb      	ldrb	r3, [r7, #7]
 800d610:	f003 0320 	and.w	r3, r3, #32
 800d614:	2b00      	cmp	r3, #0
 800d616:	d06e      	beq.n	800d6f6 <f_open+0x37e>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d06a      	beq.n	800d6f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	68da      	ldr	r2, [r3, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	461a      	mov	r2, r3
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	899b      	ldrh	r3, [r3, #12]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d644:	e016      	b.n	800d674 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fe f80f 	bl	800b66e <get_fat>
 800d650:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d654:	2b01      	cmp	r3, #1
 800d656:	d802      	bhi.n	800d65e <f_open+0x2e6>
 800d658:	2302      	movs	r3, #2
 800d65a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d65e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d102      	bne.n	800d66c <f_open+0x2f4>
 800d666:	2301      	movs	r3, #1
 800d668:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d66c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d674:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d103      	bne.n	800d684 <f_open+0x30c>
 800d67c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d680:	429a      	cmp	r2, r3
 800d682:	d8e0      	bhi.n	800d646 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d688:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d68a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d131      	bne.n	800d6f6 <f_open+0x37e>
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	899b      	ldrh	r3, [r3, #12]
 800d696:	461a      	mov	r2, r3
 800d698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d69a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d69e:	fb01 f202 	mul.w	r2, r1, r2
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d026      	beq.n	800d6f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fd ffbf 	bl	800b630 <clust2sect>
 800d6b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <f_open+0x34a>
						res = FR_INT_ERR;
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d6c0:	e019      	b.n	800d6f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	7858      	ldrb	r0, [r3, #1]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6a1a      	ldr	r2, [r3, #32]
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	f7fd fbf7 	bl	800aed8 <disk_read>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <f_open+0x37e>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d6f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <f_open+0x38c>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d704:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3768      	adds	r7, #104	; 0x68
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b08e      	sub	sp, #56	; 0x38
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2200      	movs	r2, #0
 800d726:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f107 0214 	add.w	r2, r7, #20
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f7ff fda5 	bl	800d280 <validate>
 800d736:	4603      	mov	r3, r0
 800d738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d73c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d740:	2b00      	cmp	r3, #0
 800d742:	d107      	bne.n	800d754 <f_read+0x44>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	7d5b      	ldrb	r3, [r3, #21]
 800d748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d74c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <f_read+0x4a>
 800d754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d758:	e135      	b.n	800d9c6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	7d1b      	ldrb	r3, [r3, #20]
 800d75e:	f003 0301 	and.w	r3, r3, #1
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <f_read+0x5a>
 800d766:	2307      	movs	r3, #7
 800d768:	e12d      	b.n	800d9c6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	f240 811e 	bls.w	800d9bc <f_read+0x2ac>
 800d780:	6a3b      	ldr	r3, [r7, #32]
 800d782:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d784:	e11a      	b.n	800d9bc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	8992      	ldrh	r2, [r2, #12]
 800d78e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d792:	fb01 f202 	mul.w	r2, r1, r2
 800d796:	1a9b      	subs	r3, r3, r2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f040 80d5 	bne.w	800d948 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	8992      	ldrh	r2, [r2, #12]
 800d7a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	8952      	ldrh	r2, [r2, #10]
 800d7ae:	3a01      	subs	r2, #1
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d12f      	bne.n	800d81a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d103      	bne.n	800d7ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	633b      	str	r3, [r7, #48]	; 0x30
 800d7c8:	e013      	b.n	800d7f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f7fe fa35 	bl	800bc48 <clmt_clust>
 800d7de:	6338      	str	r0, [r7, #48]	; 0x30
 800d7e0:	e007      	b.n	800d7f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	69db      	ldr	r3, [r3, #28]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	f7fd ff3f 	bl	800b66e <get_fat>
 800d7f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d804      	bhi.n	800d802 <f_read+0xf2>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	755a      	strb	r2, [r3, #21]
 800d7fe:	2302      	movs	r3, #2
 800d800:	e0e1      	b.n	800d9c6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d808:	d104      	bne.n	800d814 <f_read+0x104>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	755a      	strb	r2, [r3, #21]
 800d810:	2301      	movs	r3, #1
 800d812:	e0d8      	b.n	800d9c6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d818:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	4619      	mov	r1, r3
 800d822:	4610      	mov	r0, r2
 800d824:	f7fd ff04 	bl	800b630 <clust2sect>
 800d828:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d104      	bne.n	800d83a <f_read+0x12a>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2202      	movs	r2, #2
 800d834:	755a      	strb	r2, [r3, #21]
 800d836:	2302      	movs	r3, #2
 800d838:	e0c5      	b.n	800d9c6 <f_read+0x2b6>
			sect += csect;
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	4413      	add	r3, r2
 800d840:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	899b      	ldrh	r3, [r3, #12]
 800d846:	461a      	mov	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	2b00      	cmp	r3, #0
 800d854:	d041      	beq.n	800d8da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d856:	69fa      	ldr	r2, [r7, #28]
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	4413      	add	r3, r2
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	8952      	ldrh	r2, [r2, #10]
 800d860:	4293      	cmp	r3, r2
 800d862:	d905      	bls.n	800d870 <f_read+0x160>
					cc = fs->csize - csect;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	895b      	ldrh	r3, [r3, #10]
 800d868:	461a      	mov	r2, r3
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	7858      	ldrb	r0, [r3, #1]
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	69ba      	ldr	r2, [r7, #24]
 800d878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d87a:	f7fd fb2d 	bl	800aed8 <disk_read>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <f_read+0x17e>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	755a      	strb	r2, [r3, #21]
 800d88a:	2301      	movs	r3, #1
 800d88c:	e09b      	b.n	800d9c6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	7d1b      	ldrb	r3, [r3, #20]
 800d892:	b25b      	sxtb	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	da18      	bge.n	800d8ca <f_read+0x1ba>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6a1a      	ldr	r2, [r3, #32]
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d911      	bls.n	800d8ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6a1a      	ldr	r2, [r3, #32]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	8992      	ldrh	r2, [r2, #12]
 800d8b2:	fb02 f303 	mul.w	r3, r2, r3
 800d8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b8:	18d0      	adds	r0, r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	899b      	ldrh	r3, [r3, #12]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f7fd fbe7 	bl	800b098 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	899b      	ldrh	r3, [r3, #12]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	fb02 f303 	mul.w	r3, r2, r3
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d8d8:	e05c      	b.n	800d994 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d02e      	beq.n	800d942 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	b25b      	sxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	da18      	bge.n	800d920 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	7858      	ldrb	r0, [r3, #1]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6a1a      	ldr	r2, [r3, #32]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f7fd fb0b 	bl	800af18 <disk_write>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <f_read+0x202>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2201      	movs	r2, #1
 800d90c:	755a      	strb	r2, [r3, #21]
 800d90e:	2301      	movs	r3, #1
 800d910:	e059      	b.n	800d9c6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	7d1b      	ldrb	r3, [r3, #20]
 800d916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	7858      	ldrb	r0, [r3, #1]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d92a:	2301      	movs	r3, #1
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	f7fd fad3 	bl	800aed8 <disk_read>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d004      	beq.n	800d942 <f_read+0x232>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2201      	movs	r2, #1
 800d93c:	755a      	strb	r2, [r3, #21]
 800d93e:	2301      	movs	r3, #1
 800d940:	e041      	b.n	800d9c6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	899b      	ldrh	r3, [r3, #12]
 800d94c:	4618      	mov	r0, r3
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	8992      	ldrh	r2, [r2, #12]
 800d956:	fbb3 f1f2 	udiv	r1, r3, r2
 800d95a:	fb01 f202 	mul.w	r2, r1, r2
 800d95e:	1a9b      	subs	r3, r3, r2
 800d960:	1ac3      	subs	r3, r0, r3
 800d962:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d901      	bls.n	800d970 <f_read+0x260>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	8992      	ldrh	r2, [r2, #12]
 800d97e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d982:	fb00 f202 	mul.w	r2, r0, r2
 800d986:	1a9b      	subs	r3, r3, r2
 800d988:	440b      	add	r3, r1
 800d98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d98c:	4619      	mov	r1, r3
 800d98e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d990:	f7fd fb82 	bl	800b098 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d998:	4413      	add	r3, r2
 800d99a:	627b      	str	r3, [r7, #36]	; 0x24
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	699a      	ldr	r2, [r3, #24]
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	441a      	add	r2, r3
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	619a      	str	r2, [r3, #24]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	441a      	add	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f47f aee1 	bne.w	800d786 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3738      	adds	r7, #56	; 0x38
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b08c      	sub	sp, #48	; 0x30
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	607a      	str	r2, [r7, #4]
 800d9da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f107 0210 	add.w	r2, r7, #16
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff fc46 	bl	800d280 <validate>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d107      	bne.n	800da12 <f_write+0x44>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	7d5b      	ldrb	r3, [r3, #21]
 800da06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800da0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <f_write+0x4a>
 800da12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da16:	e16a      	b.n	800dcee <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	f003 0302 	and.w	r3, r3, #2
 800da20:	2b00      	cmp	r3, #0
 800da22:	d101      	bne.n	800da28 <f_write+0x5a>
 800da24:	2307      	movs	r3, #7
 800da26:	e162      	b.n	800dcee <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	699a      	ldr	r2, [r3, #24]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	441a      	add	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	429a      	cmp	r2, r3
 800da36:	f080 814c 	bcs.w	800dcd2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	43db      	mvns	r3, r3
 800da40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800da42:	e146      	b.n	800dcd2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	8992      	ldrh	r2, [r2, #12]
 800da4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da50:	fb01 f202 	mul.w	r2, r1, r2
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	2b00      	cmp	r3, #0
 800da58:	f040 80f1 	bne.w	800dc3e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	8992      	ldrh	r2, [r2, #12]
 800da64:	fbb3 f3f2 	udiv	r3, r3, r2
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	8952      	ldrh	r2, [r2, #10]
 800da6c:	3a01      	subs	r2, #1
 800da6e:	4013      	ands	r3, r2
 800da70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d143      	bne.n	800db00 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10c      	bne.n	800da9a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d11a      	bne.n	800dac2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe f841 	bl	800bb18 <create_chain>
 800da96:	62b8      	str	r0, [r7, #40]	; 0x28
 800da98:	e013      	b.n	800dac2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d007      	beq.n	800dab2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	699b      	ldr	r3, [r3, #24]
 800daa6:	4619      	mov	r1, r3
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7fe f8cd 	bl	800bc48 <clmt_clust>
 800daae:	62b8      	str	r0, [r7, #40]	; 0x28
 800dab0:	e007      	b.n	800dac2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f7fe f82c 	bl	800bb18 <create_chain>
 800dac0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f000 8109 	beq.w	800dcdc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d104      	bne.n	800dada <f_write+0x10c>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2202      	movs	r2, #2
 800dad4:	755a      	strb	r2, [r3, #21]
 800dad6:	2302      	movs	r3, #2
 800dad8:	e109      	b.n	800dcee <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae0:	d104      	bne.n	800daec <f_write+0x11e>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2201      	movs	r2, #1
 800dae6:	755a      	strb	r2, [r3, #21]
 800dae8:	2301      	movs	r3, #1
 800daea:	e100      	b.n	800dcee <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d102      	bne.n	800db00 <f_write+0x132>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dafe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	7d1b      	ldrb	r3, [r3, #20]
 800db04:	b25b      	sxtb	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	da18      	bge.n	800db3c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	7858      	ldrb	r0, [r3, #1]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6a1a      	ldr	r2, [r3, #32]
 800db18:	2301      	movs	r3, #1
 800db1a:	f7fd f9fd 	bl	800af18 <disk_write>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <f_write+0x160>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2201      	movs	r2, #1
 800db28:	755a      	strb	r2, [r3, #21]
 800db2a:	2301      	movs	r3, #1
 800db2c:	e0df      	b.n	800dcee <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	7d1b      	ldrb	r3, [r3, #20]
 800db32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db36:	b2da      	uxtb	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	69db      	ldr	r3, [r3, #28]
 800db42:	4619      	mov	r1, r3
 800db44:	4610      	mov	r0, r2
 800db46:	f7fd fd73 	bl	800b630 <clust2sect>
 800db4a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d104      	bne.n	800db5c <f_write+0x18e>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2202      	movs	r2, #2
 800db56:	755a      	strb	r2, [r3, #21]
 800db58:	2302      	movs	r3, #2
 800db5a:	e0c8      	b.n	800dcee <f_write+0x320>
			sect += csect;
 800db5c:	697a      	ldr	r2, [r7, #20]
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	4413      	add	r3, r2
 800db62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	899b      	ldrh	r3, [r3, #12]
 800db68:	461a      	mov	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d043      	beq.n	800dc00 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800db78:	69ba      	ldr	r2, [r7, #24]
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	4413      	add	r3, r2
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	8952      	ldrh	r2, [r2, #10]
 800db82:	4293      	cmp	r3, r2
 800db84:	d905      	bls.n	800db92 <f_write+0x1c4>
					cc = fs->csize - csect;
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	895b      	ldrh	r3, [r3, #10]
 800db8a:	461a      	mov	r2, r3
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	7858      	ldrb	r0, [r3, #1]
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	69f9      	ldr	r1, [r7, #28]
 800db9c:	f7fd f9bc 	bl	800af18 <disk_write>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <f_write+0x1e2>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	755a      	strb	r2, [r3, #21]
 800dbac:	2301      	movs	r3, #1
 800dbae:	e09e      	b.n	800dcee <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1a      	ldr	r2, [r3, #32]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	6a3a      	ldr	r2, [r7, #32]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d918      	bls.n	800dbf0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6a1a      	ldr	r2, [r3, #32]
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	8992      	ldrh	r2, [r2, #12]
 800dbd0:	fb02 f303 	mul.w	r3, r2, r3
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	18d1      	adds	r1, r2, r3
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	899b      	ldrh	r3, [r3, #12]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	f7fd fa5b 	bl	800b098 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	7d1b      	ldrb	r3, [r3, #20]
 800dbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	899b      	ldrh	r3, [r3, #12]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	fb02 f303 	mul.w	r3, r2, r3
 800dbfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dbfe:	e04b      	b.n	800dc98 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	697a      	ldr	r2, [r7, #20]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d016      	beq.n	800dc38 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	699a      	ldr	r2, [r3, #24]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d210      	bcs.n	800dc38 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	7858      	ldrb	r0, [r3, #1]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc20:	2301      	movs	r3, #1
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	f7fd f958 	bl	800aed8 <disk_read>
 800dc28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d004      	beq.n	800dc38 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2201      	movs	r2, #1
 800dc32:	755a      	strb	r2, [r3, #21]
 800dc34:	2301      	movs	r3, #1
 800dc36:	e05a      	b.n	800dcee <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	899b      	ldrh	r3, [r3, #12]
 800dc42:	4618      	mov	r0, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	8992      	ldrh	r2, [r2, #12]
 800dc4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc50:	fb01 f202 	mul.w	r2, r1, r2
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	1ac3      	subs	r3, r0, r3
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dc5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d901      	bls.n	800dc66 <f_write+0x298>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	8992      	ldrh	r2, [r2, #12]
 800dc74:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc78:	fb00 f202 	mul.w	r2, r0, r2
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	440b      	add	r3, r1
 800dc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc82:	69f9      	ldr	r1, [r7, #28]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd fa07 	bl	800b098 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	7d1b      	ldrb	r3, [r3, #20]
 800dc8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dc98:	69fa      	ldr	r2, [r7, #28]
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	4413      	add	r3, r2
 800dc9e:	61fb      	str	r3, [r7, #28]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	699a      	ldr	r2, [r3, #24]
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	441a      	add	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	619a      	str	r2, [r3, #24]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68da      	ldr	r2, [r3, #12]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	bf38      	it	cc
 800dcb8:	461a      	movcc	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	441a      	add	r2, r3
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f47f aeb5 	bne.w	800da44 <f_write+0x76>
 800dcda:	e000      	b.n	800dcde <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dcdc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	7d1b      	ldrb	r3, [r3, #20]
 800dce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3730      	adds	r7, #48	; 0x30
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b086      	sub	sp, #24
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f107 0208 	add.w	r2, r7, #8
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff faba 	bl	800d280 <validate>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d168      	bne.n	800dde8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	7d1b      	ldrb	r3, [r3, #20]
 800dd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d062      	beq.n	800dde8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7d1b      	ldrb	r3, [r3, #20]
 800dd26:	b25b      	sxtb	r3, r3
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	da15      	bge.n	800dd58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	7858      	ldrb	r0, [r3, #1]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a1a      	ldr	r2, [r3, #32]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f7fd f8ec 	bl	800af18 <disk_write>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <f_sync+0x54>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e04f      	b.n	800ddea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7d1b      	ldrb	r3, [r3, #20]
 800dd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dd58:	f7fd f820 	bl	800ad9c <get_fattime>
 800dd5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd64:	4619      	mov	r1, r3
 800dd66:	4610      	mov	r0, r2
 800dd68:	f7fd fbc4 	bl	800b4f4 <move_window>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d138      	bne.n	800dde8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	330b      	adds	r3, #11
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	330b      	adds	r3, #11
 800dd86:	f042 0220 	orr.w	r2, r2, #32
 800dd8a:	b2d2      	uxtb	r2, r2
 800dd8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	461a      	mov	r2, r3
 800dd98:	68f9      	ldr	r1, [r7, #12]
 800dd9a:	f7fe f952 	bl	800c042 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f103 021c 	add.w	r2, r3, #28
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	4610      	mov	r0, r2
 800ddac:	f7fd f948 	bl	800b040 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3316      	adds	r3, #22
 800ddb4:	6939      	ldr	r1, [r7, #16]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fd f942 	bl	800b040 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	3312      	adds	r3, #18
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fd f921 	bl	800b00a <st_word>
					fs->wflag = 1;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fd fbbd 	bl	800b550 <sync_fs>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	7d1b      	ldrb	r3, [r3, #20]
 800ddde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7ff ff7b 	bl	800dcf6 <f_sync>
 800de00:	4603      	mov	r3, r0
 800de02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d118      	bne.n	800de3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f107 0208 	add.w	r2, r7, #8
 800de10:	4611      	mov	r1, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff fa34 	bl	800d280 <validate>
 800de18:	4603      	mov	r3, r0
 800de1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800de1c:	7bfb      	ldrb	r3, [r7, #15]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10c      	bne.n	800de3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	4618      	mov	r0, r3
 800de28:	f7fd fac0 	bl	800b3ac <dec_lock>
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d102      	bne.n	800de3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b092      	sub	sp, #72	; 0x48
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800de52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de56:	f107 030c 	add.w	r3, r7, #12
 800de5a:	2200      	movs	r2, #0
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fe ff87 	bl	800cd70 <find_volume>
 800de62:	4603      	mov	r3, r0
 800de64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800de68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f040 8099 	bne.w	800dfa4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800de72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	699a      	ldr	r2, [r3, #24]
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	6a1b      	ldr	r3, [r3, #32]
 800de80:	3b02      	subs	r3, #2
 800de82:	429a      	cmp	r2, r3
 800de84:	d804      	bhi.n	800de90 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	699a      	ldr	r2, [r3, #24]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	e089      	b.n	800dfa4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d128      	bne.n	800deee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800de9c:	2302      	movs	r3, #2
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800dea4:	f107 0314 	add.w	r3, r7, #20
 800dea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd fbdf 	bl	800b66e <get_fat>
 800deb0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb8:	d103      	bne.n	800dec2 <f_getfree+0x7c>
 800deba:	2301      	movs	r3, #1
 800debc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dec0:	e063      	b.n	800df8a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d103      	bne.n	800ded0 <f_getfree+0x8a>
 800dec8:	2302      	movs	r3, #2
 800deca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dece:	e05c      	b.n	800df8a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d102      	bne.n	800dedc <f_getfree+0x96>
 800ded6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded8:	3301      	adds	r3, #1
 800deda:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800dedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dede:	3301      	adds	r3, #1
 800dee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dee8:	429a      	cmp	r2, r3
 800deea:	d3db      	bcc.n	800dea4 <f_getfree+0x5e>
 800deec:	e04d      	b.n	800df8a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	637b      	str	r3, [r7, #52]	; 0x34
 800defe:	2300      	movs	r3, #0
 800df00:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800df02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df04:	2b00      	cmp	r3, #0
 800df06:	d113      	bne.n	800df30 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800df08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	63ba      	str	r2, [r7, #56]	; 0x38
 800df10:	4619      	mov	r1, r3
 800df12:	f7fd faef 	bl	800b4f4 <move_window>
 800df16:	4603      	mov	r3, r0
 800df18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800df1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800df20:	2b00      	cmp	r3, #0
 800df22:	d131      	bne.n	800df88 <f_getfree+0x142>
							p = fs->win;
 800df24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df26:	333c      	adds	r3, #60	; 0x3c
 800df28:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	899b      	ldrh	r3, [r3, #12]
 800df2e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d10f      	bne.n	800df58 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800df38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df3a:	f7fd f82b 	bl	800af94 <ld_word>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d102      	bne.n	800df4a <f_getfree+0x104>
 800df44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df46:	3301      	adds	r3, #1
 800df48:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4c:	3302      	adds	r3, #2
 800df4e:	633b      	str	r3, [r7, #48]	; 0x30
 800df50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df52:	3b02      	subs	r3, #2
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
 800df56:	e010      	b.n	800df7a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800df58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df5a:	f7fd f833 	bl	800afc4 <ld_dword>
 800df5e:	4603      	mov	r3, r0
 800df60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d102      	bne.n	800df6e <f_getfree+0x128>
 800df68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df6a:	3301      	adds	r3, #1
 800df6c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df70:	3304      	adds	r3, #4
 800df72:	633b      	str	r3, [r7, #48]	; 0x30
 800df74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df76:	3b04      	subs	r3, #4
 800df78:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800df7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df7c:	3b01      	subs	r3, #1
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1bd      	bne.n	800df02 <f_getfree+0xbc>
 800df86:	e000      	b.n	800df8a <f_getfree+0x144>
							if (res != FR_OK) break;
 800df88:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df8e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	791a      	ldrb	r2, [r3, #4]
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	f042 0201 	orr.w	r2, r2, #1
 800dfa0:	b2d2      	uxtb	r2, r2
 800dfa2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dfa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3748      	adds	r7, #72	; 0x48
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
	int n = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dfc4:	e01b      	b.n	800dffe <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800dfc6:	f107 0310 	add.w	r3, r7, #16
 800dfca:	f107 0114 	add.w	r1, r7, #20
 800dfce:	2201      	movs	r2, #1
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff fb9d 	bl	800d710 <f_read>
		if (rc != 1) break;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d116      	bne.n	800e00a <f_gets+0x5a>
		c = s[0];
 800dfdc:	7d3b      	ldrb	r3, [r7, #20]
 800dfde:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	2b0d      	cmp	r3, #13
 800dfe4:	d100      	bne.n	800dfe8 <f_gets+0x38>
 800dfe6:	e00a      	b.n	800dffe <f_gets+0x4e>
		*p++ = c;
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	61ba      	str	r2, [r7, #24]
 800dfee:	7dfa      	ldrb	r2, [r7, #23]
 800dff0:	701a      	strb	r2, [r3, #0]
		n++;
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	3301      	adds	r3, #1
 800dff6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b0a      	cmp	r3, #10
 800dffc:	d007      	beq.n	800e00e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	3b01      	subs	r3, #1
 800e002:	69fa      	ldr	r2, [r7, #28]
 800e004:	429a      	cmp	r2, r3
 800e006:	dbde      	blt.n	800dfc6 <f_gets+0x16>
 800e008:	e002      	b.n	800e010 <f_gets+0x60>
		if (rc != 1) break;
 800e00a:	bf00      	nop
 800e00c:	e000      	b.n	800e010 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e00e:	bf00      	nop
	}
	*p = 0;
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	2200      	movs	r2, #0
 800e014:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <f_gets+0x70>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	e000      	b.n	800e022 <f_gets+0x72>
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	460b      	mov	r3, r1
 800e034:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e036:	78fb      	ldrb	r3, [r7, #3]
 800e038:	2b0a      	cmp	r3, #10
 800e03a:	d103      	bne.n	800e044 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e03c:	210d      	movs	r1, #13
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff fff3 	bl	800e02a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	db25      	blt.n	800e09c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	60fa      	str	r2, [r7, #12]
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	4413      	add	r3, r2
 800e05a:	78fa      	ldrb	r2, [r7, #3]
 800e05c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2b3c      	cmp	r3, #60	; 0x3c
 800e062:	dd12      	ble.n	800e08a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6818      	ldr	r0, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f103 010c 	add.w	r1, r3, #12
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	f107 0308 	add.w	r3, r7, #8
 800e074:	f7ff fcab 	bl	800d9ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d101      	bne.n	800e084 <putc_bfd+0x5a>
 800e080:	2300      	movs	r3, #0
 800e082:	e001      	b.n	800e088 <putc_bfd+0x5e>
 800e084:	f04f 33ff 	mov.w	r3, #4294967295
 800e088:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	1c5a      	adds	r2, r3, #1
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	609a      	str	r2, [r3, #8]
 800e09a:	e000      	b.n	800e09e <putc_bfd+0x74>
	if (i < 0) return;
 800e09c:	bf00      	nop
}
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	db16      	blt.n	800e0e2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f103 010c 	add.w	r1, r3, #12
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	f7ff fc81 	bl	800d9ce <f_write>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d107      	bne.n	800e0e2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d102      	bne.n	800e0e2 <putc_flush+0x3e>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	e001      	b.n	800e0e6 <putc_flush+0x42>
	return EOF;
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b083      	sub	sp, #12
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	605a      	str	r2, [r3, #4]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	609a      	str	r2, [r3, #8]
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b096      	sub	sp, #88	; 0x58
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e122:	f107 030c 	add.w	r3, r7, #12
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff ffe0 	bl	800e0ee <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e12e:	e009      	b.n	800e144 <f_puts+0x2c>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	781a      	ldrb	r2, [r3, #0]
 800e138:	f107 030c 	add.w	r3, r7, #12
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff ff73 	bl	800e02a <putc_bfd>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f1      	bne.n	800e130 <f_puts+0x18>
	return putc_flush(&pb);
 800e14c:	f107 030c 	add.w	r3, r7, #12
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff ffa7 	bl	800e0a4 <putc_flush>
 800e156:	4603      	mov	r3, r0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3758      	adds	r7, #88	; 0x58
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e160:	b480      	push	{r7}
 800e162:	b087      	sub	sp, #28
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	4613      	mov	r3, r2
 800e16c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e16e:	2301      	movs	r3, #1
 800e170:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e176:	4b1f      	ldr	r3, [pc, #124]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e178:	7a5b      	ldrb	r3, [r3, #9]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d131      	bne.n	800e1e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e180:	4b1c      	ldr	r3, [pc, #112]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e182:	7a5b      	ldrb	r3, [r3, #9]
 800e184:	b2db      	uxtb	r3, r3
 800e186:	461a      	mov	r2, r3
 800e188:	4b1a      	ldr	r3, [pc, #104]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e18a:	2100      	movs	r1, #0
 800e18c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e18e:	4b19      	ldr	r3, [pc, #100]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e190:	7a5b      	ldrb	r3, [r3, #9]
 800e192:	b2db      	uxtb	r3, r3
 800e194:	4a17      	ldr	r2, [pc, #92]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e19e:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e1a0:	7a5b      	ldrb	r3, [r3, #9]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e1a8:	4413      	add	r3, r2
 800e1aa:	79fa      	ldrb	r2, [r7, #7]
 800e1ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1ae:	4b11      	ldr	r3, [pc, #68]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e1b0:	7a5b      	ldrb	r3, [r3, #9]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	b2d1      	uxtb	r1, r2
 800e1b8:	4a0e      	ldr	r2, [pc, #56]	; (800e1f4 <FATFS_LinkDriverEx+0x94>)
 800e1ba:	7251      	strb	r1, [r2, #9]
 800e1bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e1be:	7dbb      	ldrb	r3, [r7, #22]
 800e1c0:	3330      	adds	r3, #48	; 0x30
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	223a      	movs	r2, #58	; 0x3a
 800e1ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	3302      	adds	r3, #2
 800e1d4:	222f      	movs	r2, #47	; 0x2f
 800e1d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	3303      	adds	r3, #3
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	371c      	adds	r7, #28
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	20002e74 	.word	0x20002e74

0800e1f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e202:	2200      	movs	r2, #0
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff ffaa 	bl	800e160 <FATFS_LinkDriverEx>
 800e20c:	4603      	mov	r3, r0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	6039      	str	r1, [r7, #0]
 800e222:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	2b7f      	cmp	r3, #127	; 0x7f
 800e228:	d802      	bhi.n	800e230 <ff_convert+0x18>
		c = chr;
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	81fb      	strh	r3, [r7, #14]
 800e22e:	e025      	b.n	800e27c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00b      	beq.n	800e24e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e236:	88fb      	ldrh	r3, [r7, #6]
 800e238:	2bff      	cmp	r3, #255	; 0xff
 800e23a:	d805      	bhi.n	800e248 <ff_convert+0x30>
 800e23c:	88fb      	ldrh	r3, [r7, #6]
 800e23e:	3b80      	subs	r3, #128	; 0x80
 800e240:	4a12      	ldr	r2, [pc, #72]	; (800e28c <ff_convert+0x74>)
 800e242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e246:	e000      	b.n	800e24a <ff_convert+0x32>
 800e248:	2300      	movs	r3, #0
 800e24a:	81fb      	strh	r3, [r7, #14]
 800e24c:	e016      	b.n	800e27c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e24e:	2300      	movs	r3, #0
 800e250:	81fb      	strh	r3, [r7, #14]
 800e252:	e009      	b.n	800e268 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e254:	89fb      	ldrh	r3, [r7, #14]
 800e256:	4a0d      	ldr	r2, [pc, #52]	; (800e28c <ff_convert+0x74>)
 800e258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e25c:	88fa      	ldrh	r2, [r7, #6]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d006      	beq.n	800e270 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e262:	89fb      	ldrh	r3, [r7, #14]
 800e264:	3301      	adds	r3, #1
 800e266:	81fb      	strh	r3, [r7, #14]
 800e268:	89fb      	ldrh	r3, [r7, #14]
 800e26a:	2b7f      	cmp	r3, #127	; 0x7f
 800e26c:	d9f2      	bls.n	800e254 <ff_convert+0x3c>
 800e26e:	e000      	b.n	800e272 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e270:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e272:	89fb      	ldrh	r3, [r7, #14]
 800e274:	3380      	adds	r3, #128	; 0x80
 800e276:	b29b      	uxth	r3, r3
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e27c:	89fb      	ldrh	r3, [r7, #14]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	080138a4 	.word	0x080138a4

0800e290 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e290:	b480      	push	{r7}
 800e292:	b087      	sub	sp, #28
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e29a:	88fb      	ldrh	r3, [r7, #6]
 800e29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2a0:	d201      	bcs.n	800e2a6 <ff_wtoupper+0x16>
 800e2a2:	4b3e      	ldr	r3, [pc, #248]	; (800e39c <ff_wtoupper+0x10c>)
 800e2a4:	e000      	b.n	800e2a8 <ff_wtoupper+0x18>
 800e2a6:	4b3e      	ldr	r3, [pc, #248]	; (800e3a0 <ff_wtoupper+0x110>)
 800e2a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	1c9a      	adds	r2, r3, #2
 800e2ae:	617a      	str	r2, [r7, #20]
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e2b4:	8a7b      	ldrh	r3, [r7, #18]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d068      	beq.n	800e38c <ff_wtoupper+0xfc>
 800e2ba:	88fa      	ldrh	r2, [r7, #6]
 800e2bc:	8a7b      	ldrh	r3, [r7, #18]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d364      	bcc.n	800e38c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	1c9a      	adds	r2, r3, #2
 800e2c6:	617a      	str	r2, [r7, #20]
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	823b      	strh	r3, [r7, #16]
 800e2cc:	8a3b      	ldrh	r3, [r7, #16]
 800e2ce:	0a1b      	lsrs	r3, r3, #8
 800e2d0:	81fb      	strh	r3, [r7, #14]
 800e2d2:	8a3b      	ldrh	r3, [r7, #16]
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e2d8:	88fa      	ldrh	r2, [r7, #6]
 800e2da:	8a79      	ldrh	r1, [r7, #18]
 800e2dc:	8a3b      	ldrh	r3, [r7, #16]
 800e2de:	440b      	add	r3, r1
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	da49      	bge.n	800e378 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e2e4:	89fb      	ldrh	r3, [r7, #14]
 800e2e6:	2b08      	cmp	r3, #8
 800e2e8:	d84f      	bhi.n	800e38a <ff_wtoupper+0xfa>
 800e2ea:	a201      	add	r2, pc, #4	; (adr r2, 800e2f0 <ff_wtoupper+0x60>)
 800e2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f0:	0800e315 	.word	0x0800e315
 800e2f4:	0800e327 	.word	0x0800e327
 800e2f8:	0800e33d 	.word	0x0800e33d
 800e2fc:	0800e345 	.word	0x0800e345
 800e300:	0800e34d 	.word	0x0800e34d
 800e304:	0800e355 	.word	0x0800e355
 800e308:	0800e35d 	.word	0x0800e35d
 800e30c:	0800e365 	.word	0x0800e365
 800e310:	0800e36d 	.word	0x0800e36d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e314:	88fa      	ldrh	r2, [r7, #6]
 800e316:	8a7b      	ldrh	r3, [r7, #18]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	697a      	ldr	r2, [r7, #20]
 800e31e:	4413      	add	r3, r2
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	80fb      	strh	r3, [r7, #6]
 800e324:	e027      	b.n	800e376 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e326:	88fa      	ldrh	r2, [r7, #6]
 800e328:	8a7b      	ldrh	r3, [r7, #18]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	b29b      	uxth	r3, r3
 800e334:	88fa      	ldrh	r2, [r7, #6]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	80fb      	strh	r3, [r7, #6]
 800e33a:	e01c      	b.n	800e376 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e33c:	88fb      	ldrh	r3, [r7, #6]
 800e33e:	3b10      	subs	r3, #16
 800e340:	80fb      	strh	r3, [r7, #6]
 800e342:	e018      	b.n	800e376 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e344:	88fb      	ldrh	r3, [r7, #6]
 800e346:	3b20      	subs	r3, #32
 800e348:	80fb      	strh	r3, [r7, #6]
 800e34a:	e014      	b.n	800e376 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e34c:	88fb      	ldrh	r3, [r7, #6]
 800e34e:	3b30      	subs	r3, #48	; 0x30
 800e350:	80fb      	strh	r3, [r7, #6]
 800e352:	e010      	b.n	800e376 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	3b1a      	subs	r3, #26
 800e358:	80fb      	strh	r3, [r7, #6]
 800e35a:	e00c      	b.n	800e376 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	3308      	adds	r3, #8
 800e360:	80fb      	strh	r3, [r7, #6]
 800e362:	e008      	b.n	800e376 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	3b50      	subs	r3, #80	; 0x50
 800e368:	80fb      	strh	r3, [r7, #6]
 800e36a:	e004      	b.n	800e376 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e372:	80fb      	strh	r3, [r7, #6]
 800e374:	bf00      	nop
			}
			break;
 800e376:	e008      	b.n	800e38a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e378:	89fb      	ldrh	r3, [r7, #14]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d195      	bne.n	800e2aa <ff_wtoupper+0x1a>
 800e37e:	8a3b      	ldrh	r3, [r7, #16]
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	4413      	add	r3, r2
 800e386:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e388:	e78f      	b.n	800e2aa <ff_wtoupper+0x1a>
			break;
 800e38a:	bf00      	nop
	}

	return chr;
 800e38c:	88fb      	ldrh	r3, [r7, #6]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	080139a4 	.word	0x080139a4
 800e3a0:	08013b98 	.word	0x08013b98

0800e3a4 <__errno>:
 800e3a4:	4b01      	ldr	r3, [pc, #4]	; (800e3ac <__errno+0x8>)
 800e3a6:	6818      	ldr	r0, [r3, #0]
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	20000054 	.word	0x20000054

0800e3b0 <__libc_init_array>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	4d0d      	ldr	r5, [pc, #52]	; (800e3e8 <__libc_init_array+0x38>)
 800e3b4:	4c0d      	ldr	r4, [pc, #52]	; (800e3ec <__libc_init_array+0x3c>)
 800e3b6:	1b64      	subs	r4, r4, r5
 800e3b8:	10a4      	asrs	r4, r4, #2
 800e3ba:	2600      	movs	r6, #0
 800e3bc:	42a6      	cmp	r6, r4
 800e3be:	d109      	bne.n	800e3d4 <__libc_init_array+0x24>
 800e3c0:	4d0b      	ldr	r5, [pc, #44]	; (800e3f0 <__libc_init_array+0x40>)
 800e3c2:	4c0c      	ldr	r4, [pc, #48]	; (800e3f4 <__libc_init_array+0x44>)
 800e3c4:	f005 f872 	bl	80134ac <_init>
 800e3c8:	1b64      	subs	r4, r4, r5
 800e3ca:	10a4      	asrs	r4, r4, #2
 800e3cc:	2600      	movs	r6, #0
 800e3ce:	42a6      	cmp	r6, r4
 800e3d0:	d105      	bne.n	800e3de <__libc_init_array+0x2e>
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}
 800e3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d8:	4798      	blx	r3
 800e3da:	3601      	adds	r6, #1
 800e3dc:	e7ee      	b.n	800e3bc <__libc_init_array+0xc>
 800e3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e2:	4798      	blx	r3
 800e3e4:	3601      	adds	r6, #1
 800e3e6:	e7f2      	b.n	800e3ce <__libc_init_array+0x1e>
 800e3e8:	08014150 	.word	0x08014150
 800e3ec:	08014150 	.word	0x08014150
 800e3f0:	08014150 	.word	0x08014150
 800e3f4:	08014154 	.word	0x08014154

0800e3f8 <memset>:
 800e3f8:	4402      	add	r2, r0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d100      	bne.n	800e402 <memset+0xa>
 800e400:	4770      	bx	lr
 800e402:	f803 1b01 	strb.w	r1, [r3], #1
 800e406:	e7f9      	b.n	800e3fc <memset+0x4>

0800e408 <__cvt>:
 800e408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e40c:	ec55 4b10 	vmov	r4, r5, d0
 800e410:	2d00      	cmp	r5, #0
 800e412:	460e      	mov	r6, r1
 800e414:	4619      	mov	r1, r3
 800e416:	462b      	mov	r3, r5
 800e418:	bfbb      	ittet	lt
 800e41a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e41e:	461d      	movlt	r5, r3
 800e420:	2300      	movge	r3, #0
 800e422:	232d      	movlt	r3, #45	; 0x2d
 800e424:	700b      	strb	r3, [r1, #0]
 800e426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e42c:	4691      	mov	r9, r2
 800e42e:	f023 0820 	bic.w	r8, r3, #32
 800e432:	bfbc      	itt	lt
 800e434:	4622      	movlt	r2, r4
 800e436:	4614      	movlt	r4, r2
 800e438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e43c:	d005      	beq.n	800e44a <__cvt+0x42>
 800e43e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e442:	d100      	bne.n	800e446 <__cvt+0x3e>
 800e444:	3601      	adds	r6, #1
 800e446:	2102      	movs	r1, #2
 800e448:	e000      	b.n	800e44c <__cvt+0x44>
 800e44a:	2103      	movs	r1, #3
 800e44c:	ab03      	add	r3, sp, #12
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	ab02      	add	r3, sp, #8
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	ec45 4b10 	vmov	d0, r4, r5
 800e458:	4653      	mov	r3, sl
 800e45a:	4632      	mov	r2, r6
 800e45c:	f002 f8a4 	bl	80105a8 <_dtoa_r>
 800e460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e464:	4607      	mov	r7, r0
 800e466:	d102      	bne.n	800e46e <__cvt+0x66>
 800e468:	f019 0f01 	tst.w	r9, #1
 800e46c:	d022      	beq.n	800e4b4 <__cvt+0xac>
 800e46e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e472:	eb07 0906 	add.w	r9, r7, r6
 800e476:	d110      	bne.n	800e49a <__cvt+0x92>
 800e478:	783b      	ldrb	r3, [r7, #0]
 800e47a:	2b30      	cmp	r3, #48	; 0x30
 800e47c:	d10a      	bne.n	800e494 <__cvt+0x8c>
 800e47e:	2200      	movs	r2, #0
 800e480:	2300      	movs	r3, #0
 800e482:	4620      	mov	r0, r4
 800e484:	4629      	mov	r1, r5
 800e486:	f7f2 fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 800e48a:	b918      	cbnz	r0, 800e494 <__cvt+0x8c>
 800e48c:	f1c6 0601 	rsb	r6, r6, #1
 800e490:	f8ca 6000 	str.w	r6, [sl]
 800e494:	f8da 3000 	ldr.w	r3, [sl]
 800e498:	4499      	add	r9, r3
 800e49a:	2200      	movs	r2, #0
 800e49c:	2300      	movs	r3, #0
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f7f2 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 800e4a6:	b108      	cbz	r0, 800e4ac <__cvt+0xa4>
 800e4a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e4ac:	2230      	movs	r2, #48	; 0x30
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	454b      	cmp	r3, r9
 800e4b2:	d307      	bcc.n	800e4c4 <__cvt+0xbc>
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4b8:	1bdb      	subs	r3, r3, r7
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	b004      	add	sp, #16
 800e4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c4:	1c59      	adds	r1, r3, #1
 800e4c6:	9103      	str	r1, [sp, #12]
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	e7f0      	b.n	800e4ae <__cvt+0xa6>

0800e4cc <__exponent>:
 800e4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	bfb8      	it	lt
 800e4d4:	4249      	neglt	r1, r1
 800e4d6:	f803 2b02 	strb.w	r2, [r3], #2
 800e4da:	bfb4      	ite	lt
 800e4dc:	222d      	movlt	r2, #45	; 0x2d
 800e4de:	222b      	movge	r2, #43	; 0x2b
 800e4e0:	2909      	cmp	r1, #9
 800e4e2:	7042      	strb	r2, [r0, #1]
 800e4e4:	dd2a      	ble.n	800e53c <__exponent+0x70>
 800e4e6:	f10d 0407 	add.w	r4, sp, #7
 800e4ea:	46a4      	mov	ip, r4
 800e4ec:	270a      	movs	r7, #10
 800e4ee:	46a6      	mov	lr, r4
 800e4f0:	460a      	mov	r2, r1
 800e4f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e4f6:	fb07 1516 	mls	r5, r7, r6, r1
 800e4fa:	3530      	adds	r5, #48	; 0x30
 800e4fc:	2a63      	cmp	r2, #99	; 0x63
 800e4fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800e502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e506:	4631      	mov	r1, r6
 800e508:	dcf1      	bgt.n	800e4ee <__exponent+0x22>
 800e50a:	3130      	adds	r1, #48	; 0x30
 800e50c:	f1ae 0502 	sub.w	r5, lr, #2
 800e510:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e514:	1c44      	adds	r4, r0, #1
 800e516:	4629      	mov	r1, r5
 800e518:	4561      	cmp	r1, ip
 800e51a:	d30a      	bcc.n	800e532 <__exponent+0x66>
 800e51c:	f10d 0209 	add.w	r2, sp, #9
 800e520:	eba2 020e 	sub.w	r2, r2, lr
 800e524:	4565      	cmp	r5, ip
 800e526:	bf88      	it	hi
 800e528:	2200      	movhi	r2, #0
 800e52a:	4413      	add	r3, r2
 800e52c:	1a18      	subs	r0, r3, r0
 800e52e:	b003      	add	sp, #12
 800e530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e536:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e53a:	e7ed      	b.n	800e518 <__exponent+0x4c>
 800e53c:	2330      	movs	r3, #48	; 0x30
 800e53e:	3130      	adds	r1, #48	; 0x30
 800e540:	7083      	strb	r3, [r0, #2]
 800e542:	70c1      	strb	r1, [r0, #3]
 800e544:	1d03      	adds	r3, r0, #4
 800e546:	e7f1      	b.n	800e52c <__exponent+0x60>

0800e548 <_printf_float>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	ed2d 8b02 	vpush	{d8}
 800e550:	b08d      	sub	sp, #52	; 0x34
 800e552:	460c      	mov	r4, r1
 800e554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e558:	4616      	mov	r6, r2
 800e55a:	461f      	mov	r7, r3
 800e55c:	4605      	mov	r5, r0
 800e55e:	f003 fb37 	bl	8011bd0 <_localeconv_r>
 800e562:	f8d0 a000 	ldr.w	sl, [r0]
 800e566:	4650      	mov	r0, sl
 800e568:	f7f1 fe52 	bl	8000210 <strlen>
 800e56c:	2300      	movs	r3, #0
 800e56e:	930a      	str	r3, [sp, #40]	; 0x28
 800e570:	6823      	ldr	r3, [r4, #0]
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f8d8 3000 	ldr.w	r3, [r8]
 800e578:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e57c:	3307      	adds	r3, #7
 800e57e:	f023 0307 	bic.w	r3, r3, #7
 800e582:	f103 0208 	add.w	r2, r3, #8
 800e586:	f8c8 2000 	str.w	r2, [r8]
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e592:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e59a:	9307      	str	r3, [sp, #28]
 800e59c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5a0:	ee08 0a10 	vmov	s16, r0
 800e5a4:	4b9f      	ldr	r3, [pc, #636]	; (800e824 <_printf_float+0x2dc>)
 800e5a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ae:	f7f2 fadd 	bl	8000b6c <__aeabi_dcmpun>
 800e5b2:	bb88      	cbnz	r0, 800e618 <_printf_float+0xd0>
 800e5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5b8:	4b9a      	ldr	r3, [pc, #616]	; (800e824 <_printf_float+0x2dc>)
 800e5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e5be:	f7f2 fab7 	bl	8000b30 <__aeabi_dcmple>
 800e5c2:	bb48      	cbnz	r0, 800e618 <_printf_float+0xd0>
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	f7f2 faa6 	bl	8000b1c <__aeabi_dcmplt>
 800e5d0:	b110      	cbz	r0, 800e5d8 <_printf_float+0x90>
 800e5d2:	232d      	movs	r3, #45	; 0x2d
 800e5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5d8:	4b93      	ldr	r3, [pc, #588]	; (800e828 <_printf_float+0x2e0>)
 800e5da:	4894      	ldr	r0, [pc, #592]	; (800e82c <_printf_float+0x2e4>)
 800e5dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e5e0:	bf94      	ite	ls
 800e5e2:	4698      	movls	r8, r3
 800e5e4:	4680      	movhi	r8, r0
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	6123      	str	r3, [r4, #16]
 800e5ea:	9b05      	ldr	r3, [sp, #20]
 800e5ec:	f023 0204 	bic.w	r2, r3, #4
 800e5f0:	6022      	str	r2, [r4, #0]
 800e5f2:	f04f 0900 	mov.w	r9, #0
 800e5f6:	9700      	str	r7, [sp, #0]
 800e5f8:	4633      	mov	r3, r6
 800e5fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4628      	mov	r0, r5
 800e600:	f000 f9d8 	bl	800e9b4 <_printf_common>
 800e604:	3001      	adds	r0, #1
 800e606:	f040 8090 	bne.w	800e72a <_printf_float+0x1e2>
 800e60a:	f04f 30ff 	mov.w	r0, #4294967295
 800e60e:	b00d      	add	sp, #52	; 0x34
 800e610:	ecbd 8b02 	vpop	{d8}
 800e614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e618:	4642      	mov	r2, r8
 800e61a:	464b      	mov	r3, r9
 800e61c:	4640      	mov	r0, r8
 800e61e:	4649      	mov	r1, r9
 800e620:	f7f2 faa4 	bl	8000b6c <__aeabi_dcmpun>
 800e624:	b140      	cbz	r0, 800e638 <_printf_float+0xf0>
 800e626:	464b      	mov	r3, r9
 800e628:	2b00      	cmp	r3, #0
 800e62a:	bfbc      	itt	lt
 800e62c:	232d      	movlt	r3, #45	; 0x2d
 800e62e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e632:	487f      	ldr	r0, [pc, #508]	; (800e830 <_printf_float+0x2e8>)
 800e634:	4b7f      	ldr	r3, [pc, #508]	; (800e834 <_printf_float+0x2ec>)
 800e636:	e7d1      	b.n	800e5dc <_printf_float+0x94>
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e63e:	9206      	str	r2, [sp, #24]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	d13f      	bne.n	800e6c4 <_printf_float+0x17c>
 800e644:	2306      	movs	r3, #6
 800e646:	6063      	str	r3, [r4, #4]
 800e648:	9b05      	ldr	r3, [sp, #20]
 800e64a:	6861      	ldr	r1, [r4, #4]
 800e64c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e650:	2300      	movs	r3, #0
 800e652:	9303      	str	r3, [sp, #12]
 800e654:	ab0a      	add	r3, sp, #40	; 0x28
 800e656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e65a:	ab09      	add	r3, sp, #36	; 0x24
 800e65c:	ec49 8b10 	vmov	d0, r8, r9
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	6022      	str	r2, [r4, #0]
 800e664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e668:	4628      	mov	r0, r5
 800e66a:	f7ff fecd 	bl	800e408 <__cvt>
 800e66e:	9b06      	ldr	r3, [sp, #24]
 800e670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e672:	2b47      	cmp	r3, #71	; 0x47
 800e674:	4680      	mov	r8, r0
 800e676:	d108      	bne.n	800e68a <_printf_float+0x142>
 800e678:	1cc8      	adds	r0, r1, #3
 800e67a:	db02      	blt.n	800e682 <_printf_float+0x13a>
 800e67c:	6863      	ldr	r3, [r4, #4]
 800e67e:	4299      	cmp	r1, r3
 800e680:	dd41      	ble.n	800e706 <_printf_float+0x1be>
 800e682:	f1ab 0b02 	sub.w	fp, fp, #2
 800e686:	fa5f fb8b 	uxtb.w	fp, fp
 800e68a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e68e:	d820      	bhi.n	800e6d2 <_printf_float+0x18a>
 800e690:	3901      	subs	r1, #1
 800e692:	465a      	mov	r2, fp
 800e694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e698:	9109      	str	r1, [sp, #36]	; 0x24
 800e69a:	f7ff ff17 	bl	800e4cc <__exponent>
 800e69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6a0:	1813      	adds	r3, r2, r0
 800e6a2:	2a01      	cmp	r2, #1
 800e6a4:	4681      	mov	r9, r0
 800e6a6:	6123      	str	r3, [r4, #16]
 800e6a8:	dc02      	bgt.n	800e6b0 <_printf_float+0x168>
 800e6aa:	6822      	ldr	r2, [r4, #0]
 800e6ac:	07d2      	lsls	r2, r2, #31
 800e6ae:	d501      	bpl.n	800e6b4 <_printf_float+0x16c>
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	6123      	str	r3, [r4, #16]
 800e6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d09c      	beq.n	800e5f6 <_printf_float+0xae>
 800e6bc:	232d      	movs	r3, #45	; 0x2d
 800e6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c2:	e798      	b.n	800e5f6 <_printf_float+0xae>
 800e6c4:	9a06      	ldr	r2, [sp, #24]
 800e6c6:	2a47      	cmp	r2, #71	; 0x47
 800e6c8:	d1be      	bne.n	800e648 <_printf_float+0x100>
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1bc      	bne.n	800e648 <_printf_float+0x100>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e7b9      	b.n	800e646 <_printf_float+0xfe>
 800e6d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e6d6:	d118      	bne.n	800e70a <_printf_float+0x1c2>
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	6863      	ldr	r3, [r4, #4]
 800e6dc:	dd0b      	ble.n	800e6f6 <_printf_float+0x1ae>
 800e6de:	6121      	str	r1, [r4, #16]
 800e6e0:	b913      	cbnz	r3, 800e6e8 <_printf_float+0x1a0>
 800e6e2:	6822      	ldr	r2, [r4, #0]
 800e6e4:	07d0      	lsls	r0, r2, #31
 800e6e6:	d502      	bpl.n	800e6ee <_printf_float+0x1a6>
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	440b      	add	r3, r1
 800e6ec:	6123      	str	r3, [r4, #16]
 800e6ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800e6f0:	f04f 0900 	mov.w	r9, #0
 800e6f4:	e7de      	b.n	800e6b4 <_printf_float+0x16c>
 800e6f6:	b913      	cbnz	r3, 800e6fe <_printf_float+0x1b6>
 800e6f8:	6822      	ldr	r2, [r4, #0]
 800e6fa:	07d2      	lsls	r2, r2, #31
 800e6fc:	d501      	bpl.n	800e702 <_printf_float+0x1ba>
 800e6fe:	3302      	adds	r3, #2
 800e700:	e7f4      	b.n	800e6ec <_printf_float+0x1a4>
 800e702:	2301      	movs	r3, #1
 800e704:	e7f2      	b.n	800e6ec <_printf_float+0x1a4>
 800e706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70c:	4299      	cmp	r1, r3
 800e70e:	db05      	blt.n	800e71c <_printf_float+0x1d4>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	6121      	str	r1, [r4, #16]
 800e714:	07d8      	lsls	r0, r3, #31
 800e716:	d5ea      	bpl.n	800e6ee <_printf_float+0x1a6>
 800e718:	1c4b      	adds	r3, r1, #1
 800e71a:	e7e7      	b.n	800e6ec <_printf_float+0x1a4>
 800e71c:	2900      	cmp	r1, #0
 800e71e:	bfd4      	ite	le
 800e720:	f1c1 0202 	rsble	r2, r1, #2
 800e724:	2201      	movgt	r2, #1
 800e726:	4413      	add	r3, r2
 800e728:	e7e0      	b.n	800e6ec <_printf_float+0x1a4>
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	055a      	lsls	r2, r3, #21
 800e72e:	d407      	bmi.n	800e740 <_printf_float+0x1f8>
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	4642      	mov	r2, r8
 800e734:	4631      	mov	r1, r6
 800e736:	4628      	mov	r0, r5
 800e738:	47b8      	blx	r7
 800e73a:	3001      	adds	r0, #1
 800e73c:	d12c      	bne.n	800e798 <_printf_float+0x250>
 800e73e:	e764      	b.n	800e60a <_printf_float+0xc2>
 800e740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e744:	f240 80e0 	bls.w	800e908 <_printf_float+0x3c0>
 800e748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e74c:	2200      	movs	r2, #0
 800e74e:	2300      	movs	r3, #0
 800e750:	f7f2 f9da 	bl	8000b08 <__aeabi_dcmpeq>
 800e754:	2800      	cmp	r0, #0
 800e756:	d034      	beq.n	800e7c2 <_printf_float+0x27a>
 800e758:	4a37      	ldr	r2, [pc, #220]	; (800e838 <_printf_float+0x2f0>)
 800e75a:	2301      	movs	r3, #1
 800e75c:	4631      	mov	r1, r6
 800e75e:	4628      	mov	r0, r5
 800e760:	47b8      	blx	r7
 800e762:	3001      	adds	r0, #1
 800e764:	f43f af51 	beq.w	800e60a <_printf_float+0xc2>
 800e768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e76c:	429a      	cmp	r2, r3
 800e76e:	db02      	blt.n	800e776 <_printf_float+0x22e>
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	07d8      	lsls	r0, r3, #31
 800e774:	d510      	bpl.n	800e798 <_printf_float+0x250>
 800e776:	ee18 3a10 	vmov	r3, s16
 800e77a:	4652      	mov	r2, sl
 800e77c:	4631      	mov	r1, r6
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	f43f af41 	beq.w	800e60a <_printf_float+0xc2>
 800e788:	f04f 0800 	mov.w	r8, #0
 800e78c:	f104 091a 	add.w	r9, r4, #26
 800e790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e792:	3b01      	subs	r3, #1
 800e794:	4543      	cmp	r3, r8
 800e796:	dc09      	bgt.n	800e7ac <_printf_float+0x264>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	079b      	lsls	r3, r3, #30
 800e79c:	f100 8105 	bmi.w	800e9aa <_printf_float+0x462>
 800e7a0:	68e0      	ldr	r0, [r4, #12]
 800e7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7a4:	4298      	cmp	r0, r3
 800e7a6:	bfb8      	it	lt
 800e7a8:	4618      	movlt	r0, r3
 800e7aa:	e730      	b.n	800e60e <_printf_float+0xc6>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	464a      	mov	r2, r9
 800e7b0:	4631      	mov	r1, r6
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	47b8      	blx	r7
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	f43f af27 	beq.w	800e60a <_printf_float+0xc2>
 800e7bc:	f108 0801 	add.w	r8, r8, #1
 800e7c0:	e7e6      	b.n	800e790 <_printf_float+0x248>
 800e7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	dc39      	bgt.n	800e83c <_printf_float+0x2f4>
 800e7c8:	4a1b      	ldr	r2, [pc, #108]	; (800e838 <_printf_float+0x2f0>)
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	47b8      	blx	r7
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	f43f af19 	beq.w	800e60a <_printf_float+0xc2>
 800e7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	d102      	bne.n	800e7e6 <_printf_float+0x29e>
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	07d9      	lsls	r1, r3, #31
 800e7e4:	d5d8      	bpl.n	800e798 <_printf_float+0x250>
 800e7e6:	ee18 3a10 	vmov	r3, s16
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b8      	blx	r7
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	f43f af09 	beq.w	800e60a <_printf_float+0xc2>
 800e7f8:	f04f 0900 	mov.w	r9, #0
 800e7fc:	f104 0a1a 	add.w	sl, r4, #26
 800e800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e802:	425b      	negs	r3, r3
 800e804:	454b      	cmp	r3, r9
 800e806:	dc01      	bgt.n	800e80c <_printf_float+0x2c4>
 800e808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e80a:	e792      	b.n	800e732 <_printf_float+0x1ea>
 800e80c:	2301      	movs	r3, #1
 800e80e:	4652      	mov	r2, sl
 800e810:	4631      	mov	r1, r6
 800e812:	4628      	mov	r0, r5
 800e814:	47b8      	blx	r7
 800e816:	3001      	adds	r0, #1
 800e818:	f43f aef7 	beq.w	800e60a <_printf_float+0xc2>
 800e81c:	f109 0901 	add.w	r9, r9, #1
 800e820:	e7ee      	b.n	800e800 <_printf_float+0x2b8>
 800e822:	bf00      	nop
 800e824:	7fefffff 	.word	0x7fefffff
 800e828:	08013c58 	.word	0x08013c58
 800e82c:	08013c5c 	.word	0x08013c5c
 800e830:	08013c64 	.word	0x08013c64
 800e834:	08013c60 	.word	0x08013c60
 800e838:	08013c68 	.word	0x08013c68
 800e83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e840:	429a      	cmp	r2, r3
 800e842:	bfa8      	it	ge
 800e844:	461a      	movge	r2, r3
 800e846:	2a00      	cmp	r2, #0
 800e848:	4691      	mov	r9, r2
 800e84a:	dc37      	bgt.n	800e8bc <_printf_float+0x374>
 800e84c:	f04f 0b00 	mov.w	fp, #0
 800e850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e854:	f104 021a 	add.w	r2, r4, #26
 800e858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e85a:	9305      	str	r3, [sp, #20]
 800e85c:	eba3 0309 	sub.w	r3, r3, r9
 800e860:	455b      	cmp	r3, fp
 800e862:	dc33      	bgt.n	800e8cc <_printf_float+0x384>
 800e864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e868:	429a      	cmp	r2, r3
 800e86a:	db3b      	blt.n	800e8e4 <_printf_float+0x39c>
 800e86c:	6823      	ldr	r3, [r4, #0]
 800e86e:	07da      	lsls	r2, r3, #31
 800e870:	d438      	bmi.n	800e8e4 <_printf_float+0x39c>
 800e872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e874:	9a05      	ldr	r2, [sp, #20]
 800e876:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e878:	1a9a      	subs	r2, r3, r2
 800e87a:	eba3 0901 	sub.w	r9, r3, r1
 800e87e:	4591      	cmp	r9, r2
 800e880:	bfa8      	it	ge
 800e882:	4691      	movge	r9, r2
 800e884:	f1b9 0f00 	cmp.w	r9, #0
 800e888:	dc35      	bgt.n	800e8f6 <_printf_float+0x3ae>
 800e88a:	f04f 0800 	mov.w	r8, #0
 800e88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e892:	f104 0a1a 	add.w	sl, r4, #26
 800e896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	eba3 0309 	sub.w	r3, r3, r9
 800e8a0:	4543      	cmp	r3, r8
 800e8a2:	f77f af79 	ble.w	800e798 <_printf_float+0x250>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4652      	mov	r2, sl
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	47b8      	blx	r7
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f aeaa 	beq.w	800e60a <_printf_float+0xc2>
 800e8b6:	f108 0801 	add.w	r8, r8, #1
 800e8ba:	e7ec      	b.n	800e896 <_printf_float+0x34e>
 800e8bc:	4613      	mov	r3, r2
 800e8be:	4631      	mov	r1, r6
 800e8c0:	4642      	mov	r2, r8
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	d1c0      	bne.n	800e84c <_printf_float+0x304>
 800e8ca:	e69e      	b.n	800e60a <_printf_float+0xc2>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	9205      	str	r2, [sp, #20]
 800e8d4:	47b8      	blx	r7
 800e8d6:	3001      	adds	r0, #1
 800e8d8:	f43f ae97 	beq.w	800e60a <_printf_float+0xc2>
 800e8dc:	9a05      	ldr	r2, [sp, #20]
 800e8de:	f10b 0b01 	add.w	fp, fp, #1
 800e8e2:	e7b9      	b.n	800e858 <_printf_float+0x310>
 800e8e4:	ee18 3a10 	vmov	r3, s16
 800e8e8:	4652      	mov	r2, sl
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d1be      	bne.n	800e872 <_printf_float+0x32a>
 800e8f4:	e689      	b.n	800e60a <_printf_float+0xc2>
 800e8f6:	9a05      	ldr	r2, [sp, #20]
 800e8f8:	464b      	mov	r3, r9
 800e8fa:	4442      	add	r2, r8
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	d1c1      	bne.n	800e88a <_printf_float+0x342>
 800e906:	e680      	b.n	800e60a <_printf_float+0xc2>
 800e908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e90a:	2a01      	cmp	r2, #1
 800e90c:	dc01      	bgt.n	800e912 <_printf_float+0x3ca>
 800e90e:	07db      	lsls	r3, r3, #31
 800e910:	d538      	bpl.n	800e984 <_printf_float+0x43c>
 800e912:	2301      	movs	r3, #1
 800e914:	4642      	mov	r2, r8
 800e916:	4631      	mov	r1, r6
 800e918:	4628      	mov	r0, r5
 800e91a:	47b8      	blx	r7
 800e91c:	3001      	adds	r0, #1
 800e91e:	f43f ae74 	beq.w	800e60a <_printf_float+0xc2>
 800e922:	ee18 3a10 	vmov	r3, s16
 800e926:	4652      	mov	r2, sl
 800e928:	4631      	mov	r1, r6
 800e92a:	4628      	mov	r0, r5
 800e92c:	47b8      	blx	r7
 800e92e:	3001      	adds	r0, #1
 800e930:	f43f ae6b 	beq.w	800e60a <_printf_float+0xc2>
 800e934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	f7f2 f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 800e940:	b9d8      	cbnz	r0, 800e97a <_printf_float+0x432>
 800e942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e944:	f108 0201 	add.w	r2, r8, #1
 800e948:	3b01      	subs	r3, #1
 800e94a:	4631      	mov	r1, r6
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b8      	blx	r7
 800e950:	3001      	adds	r0, #1
 800e952:	d10e      	bne.n	800e972 <_printf_float+0x42a>
 800e954:	e659      	b.n	800e60a <_printf_float+0xc2>
 800e956:	2301      	movs	r3, #1
 800e958:	4652      	mov	r2, sl
 800e95a:	4631      	mov	r1, r6
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b8      	blx	r7
 800e960:	3001      	adds	r0, #1
 800e962:	f43f ae52 	beq.w	800e60a <_printf_float+0xc2>
 800e966:	f108 0801 	add.w	r8, r8, #1
 800e96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96c:	3b01      	subs	r3, #1
 800e96e:	4543      	cmp	r3, r8
 800e970:	dcf1      	bgt.n	800e956 <_printf_float+0x40e>
 800e972:	464b      	mov	r3, r9
 800e974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e978:	e6dc      	b.n	800e734 <_printf_float+0x1ec>
 800e97a:	f04f 0800 	mov.w	r8, #0
 800e97e:	f104 0a1a 	add.w	sl, r4, #26
 800e982:	e7f2      	b.n	800e96a <_printf_float+0x422>
 800e984:	2301      	movs	r3, #1
 800e986:	4642      	mov	r2, r8
 800e988:	e7df      	b.n	800e94a <_printf_float+0x402>
 800e98a:	2301      	movs	r3, #1
 800e98c:	464a      	mov	r2, r9
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	f43f ae38 	beq.w	800e60a <_printf_float+0xc2>
 800e99a:	f108 0801 	add.w	r8, r8, #1
 800e99e:	68e3      	ldr	r3, [r4, #12]
 800e9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9a2:	1a5b      	subs	r3, r3, r1
 800e9a4:	4543      	cmp	r3, r8
 800e9a6:	dcf0      	bgt.n	800e98a <_printf_float+0x442>
 800e9a8:	e6fa      	b.n	800e7a0 <_printf_float+0x258>
 800e9aa:	f04f 0800 	mov.w	r8, #0
 800e9ae:	f104 0919 	add.w	r9, r4, #25
 800e9b2:	e7f4      	b.n	800e99e <_printf_float+0x456>

0800e9b4 <_printf_common>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	4616      	mov	r6, r2
 800e9ba:	4699      	mov	r9, r3
 800e9bc:	688a      	ldr	r2, [r1, #8]
 800e9be:	690b      	ldr	r3, [r1, #16]
 800e9c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	bfb8      	it	lt
 800e9c8:	4613      	movlt	r3, r2
 800e9ca:	6033      	str	r3, [r6, #0]
 800e9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	b10a      	cbz	r2, 800e9da <_printf_common+0x26>
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	6033      	str	r3, [r6, #0]
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	0699      	lsls	r1, r3, #26
 800e9de:	bf42      	ittt	mi
 800e9e0:	6833      	ldrmi	r3, [r6, #0]
 800e9e2:	3302      	addmi	r3, #2
 800e9e4:	6033      	strmi	r3, [r6, #0]
 800e9e6:	6825      	ldr	r5, [r4, #0]
 800e9e8:	f015 0506 	ands.w	r5, r5, #6
 800e9ec:	d106      	bne.n	800e9fc <_printf_common+0x48>
 800e9ee:	f104 0a19 	add.w	sl, r4, #25
 800e9f2:	68e3      	ldr	r3, [r4, #12]
 800e9f4:	6832      	ldr	r2, [r6, #0]
 800e9f6:	1a9b      	subs	r3, r3, r2
 800e9f8:	42ab      	cmp	r3, r5
 800e9fa:	dc26      	bgt.n	800ea4a <_printf_common+0x96>
 800e9fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea00:	1e13      	subs	r3, r2, #0
 800ea02:	6822      	ldr	r2, [r4, #0]
 800ea04:	bf18      	it	ne
 800ea06:	2301      	movne	r3, #1
 800ea08:	0692      	lsls	r2, r2, #26
 800ea0a:	d42b      	bmi.n	800ea64 <_printf_common+0xb0>
 800ea0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea10:	4649      	mov	r1, r9
 800ea12:	4638      	mov	r0, r7
 800ea14:	47c0      	blx	r8
 800ea16:	3001      	adds	r0, #1
 800ea18:	d01e      	beq.n	800ea58 <_printf_common+0xa4>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	68e5      	ldr	r5, [r4, #12]
 800ea1e:	6832      	ldr	r2, [r6, #0]
 800ea20:	f003 0306 	and.w	r3, r3, #6
 800ea24:	2b04      	cmp	r3, #4
 800ea26:	bf08      	it	eq
 800ea28:	1aad      	subeq	r5, r5, r2
 800ea2a:	68a3      	ldr	r3, [r4, #8]
 800ea2c:	6922      	ldr	r2, [r4, #16]
 800ea2e:	bf0c      	ite	eq
 800ea30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea34:	2500      	movne	r5, #0
 800ea36:	4293      	cmp	r3, r2
 800ea38:	bfc4      	itt	gt
 800ea3a:	1a9b      	subgt	r3, r3, r2
 800ea3c:	18ed      	addgt	r5, r5, r3
 800ea3e:	2600      	movs	r6, #0
 800ea40:	341a      	adds	r4, #26
 800ea42:	42b5      	cmp	r5, r6
 800ea44:	d11a      	bne.n	800ea7c <_printf_common+0xc8>
 800ea46:	2000      	movs	r0, #0
 800ea48:	e008      	b.n	800ea5c <_printf_common+0xa8>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4652      	mov	r2, sl
 800ea4e:	4649      	mov	r1, r9
 800ea50:	4638      	mov	r0, r7
 800ea52:	47c0      	blx	r8
 800ea54:	3001      	adds	r0, #1
 800ea56:	d103      	bne.n	800ea60 <_printf_common+0xac>
 800ea58:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea60:	3501      	adds	r5, #1
 800ea62:	e7c6      	b.n	800e9f2 <_printf_common+0x3e>
 800ea64:	18e1      	adds	r1, r4, r3
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	2030      	movs	r0, #48	; 0x30
 800ea6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea6e:	4422      	add	r2, r4
 800ea70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea78:	3302      	adds	r3, #2
 800ea7a:	e7c7      	b.n	800ea0c <_printf_common+0x58>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4622      	mov	r2, r4
 800ea80:	4649      	mov	r1, r9
 800ea82:	4638      	mov	r0, r7
 800ea84:	47c0      	blx	r8
 800ea86:	3001      	adds	r0, #1
 800ea88:	d0e6      	beq.n	800ea58 <_printf_common+0xa4>
 800ea8a:	3601      	adds	r6, #1
 800ea8c:	e7d9      	b.n	800ea42 <_printf_common+0x8e>
	...

0800ea90 <_printf_i>:
 800ea90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	7e0f      	ldrb	r7, [r1, #24]
 800ea96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea98:	2f78      	cmp	r7, #120	; 0x78
 800ea9a:	4691      	mov	r9, r2
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	469a      	mov	sl, r3
 800eaa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eaa6:	d807      	bhi.n	800eab8 <_printf_i+0x28>
 800eaa8:	2f62      	cmp	r7, #98	; 0x62
 800eaaa:	d80a      	bhi.n	800eac2 <_printf_i+0x32>
 800eaac:	2f00      	cmp	r7, #0
 800eaae:	f000 80d8 	beq.w	800ec62 <_printf_i+0x1d2>
 800eab2:	2f58      	cmp	r7, #88	; 0x58
 800eab4:	f000 80a3 	beq.w	800ebfe <_printf_i+0x16e>
 800eab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eabc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eac0:	e03a      	b.n	800eb38 <_printf_i+0xa8>
 800eac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eac6:	2b15      	cmp	r3, #21
 800eac8:	d8f6      	bhi.n	800eab8 <_printf_i+0x28>
 800eaca:	a101      	add	r1, pc, #4	; (adr r1, 800ead0 <_printf_i+0x40>)
 800eacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ead0:	0800eb29 	.word	0x0800eb29
 800ead4:	0800eb3d 	.word	0x0800eb3d
 800ead8:	0800eab9 	.word	0x0800eab9
 800eadc:	0800eab9 	.word	0x0800eab9
 800eae0:	0800eab9 	.word	0x0800eab9
 800eae4:	0800eab9 	.word	0x0800eab9
 800eae8:	0800eb3d 	.word	0x0800eb3d
 800eaec:	0800eab9 	.word	0x0800eab9
 800eaf0:	0800eab9 	.word	0x0800eab9
 800eaf4:	0800eab9 	.word	0x0800eab9
 800eaf8:	0800eab9 	.word	0x0800eab9
 800eafc:	0800ec49 	.word	0x0800ec49
 800eb00:	0800eb6d 	.word	0x0800eb6d
 800eb04:	0800ec2b 	.word	0x0800ec2b
 800eb08:	0800eab9 	.word	0x0800eab9
 800eb0c:	0800eab9 	.word	0x0800eab9
 800eb10:	0800ec6b 	.word	0x0800ec6b
 800eb14:	0800eab9 	.word	0x0800eab9
 800eb18:	0800eb6d 	.word	0x0800eb6d
 800eb1c:	0800eab9 	.word	0x0800eab9
 800eb20:	0800eab9 	.word	0x0800eab9
 800eb24:	0800ec33 	.word	0x0800ec33
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	602a      	str	r2, [r5, #0]
 800eb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e0a3      	b.n	800ec84 <_printf_i+0x1f4>
 800eb3c:	6820      	ldr	r0, [r4, #0]
 800eb3e:	6829      	ldr	r1, [r5, #0]
 800eb40:	0606      	lsls	r6, r0, #24
 800eb42:	f101 0304 	add.w	r3, r1, #4
 800eb46:	d50a      	bpl.n	800eb5e <_printf_i+0xce>
 800eb48:	680e      	ldr	r6, [r1, #0]
 800eb4a:	602b      	str	r3, [r5, #0]
 800eb4c:	2e00      	cmp	r6, #0
 800eb4e:	da03      	bge.n	800eb58 <_printf_i+0xc8>
 800eb50:	232d      	movs	r3, #45	; 0x2d
 800eb52:	4276      	negs	r6, r6
 800eb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb58:	485e      	ldr	r0, [pc, #376]	; (800ecd4 <_printf_i+0x244>)
 800eb5a:	230a      	movs	r3, #10
 800eb5c:	e019      	b.n	800eb92 <_printf_i+0x102>
 800eb5e:	680e      	ldr	r6, [r1, #0]
 800eb60:	602b      	str	r3, [r5, #0]
 800eb62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb66:	bf18      	it	ne
 800eb68:	b236      	sxthne	r6, r6
 800eb6a:	e7ef      	b.n	800eb4c <_printf_i+0xbc>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	6820      	ldr	r0, [r4, #0]
 800eb70:	1d19      	adds	r1, r3, #4
 800eb72:	6029      	str	r1, [r5, #0]
 800eb74:	0601      	lsls	r1, r0, #24
 800eb76:	d501      	bpl.n	800eb7c <_printf_i+0xec>
 800eb78:	681e      	ldr	r6, [r3, #0]
 800eb7a:	e002      	b.n	800eb82 <_printf_i+0xf2>
 800eb7c:	0646      	lsls	r6, r0, #25
 800eb7e:	d5fb      	bpl.n	800eb78 <_printf_i+0xe8>
 800eb80:	881e      	ldrh	r6, [r3, #0]
 800eb82:	4854      	ldr	r0, [pc, #336]	; (800ecd4 <_printf_i+0x244>)
 800eb84:	2f6f      	cmp	r7, #111	; 0x6f
 800eb86:	bf0c      	ite	eq
 800eb88:	2308      	moveq	r3, #8
 800eb8a:	230a      	movne	r3, #10
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb92:	6865      	ldr	r5, [r4, #4]
 800eb94:	60a5      	str	r5, [r4, #8]
 800eb96:	2d00      	cmp	r5, #0
 800eb98:	bfa2      	ittt	ge
 800eb9a:	6821      	ldrge	r1, [r4, #0]
 800eb9c:	f021 0104 	bicge.w	r1, r1, #4
 800eba0:	6021      	strge	r1, [r4, #0]
 800eba2:	b90e      	cbnz	r6, 800eba8 <_printf_i+0x118>
 800eba4:	2d00      	cmp	r5, #0
 800eba6:	d04d      	beq.n	800ec44 <_printf_i+0x1b4>
 800eba8:	4615      	mov	r5, r2
 800ebaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800ebae:	fb03 6711 	mls	r7, r3, r1, r6
 800ebb2:	5dc7      	ldrb	r7, [r0, r7]
 800ebb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ebb8:	4637      	mov	r7, r6
 800ebba:	42bb      	cmp	r3, r7
 800ebbc:	460e      	mov	r6, r1
 800ebbe:	d9f4      	bls.n	800ebaa <_printf_i+0x11a>
 800ebc0:	2b08      	cmp	r3, #8
 800ebc2:	d10b      	bne.n	800ebdc <_printf_i+0x14c>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	07de      	lsls	r6, r3, #31
 800ebc8:	d508      	bpl.n	800ebdc <_printf_i+0x14c>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	6861      	ldr	r1, [r4, #4]
 800ebce:	4299      	cmp	r1, r3
 800ebd0:	bfde      	ittt	le
 800ebd2:	2330      	movle	r3, #48	; 0x30
 800ebd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ebd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ebdc:	1b52      	subs	r2, r2, r5
 800ebde:	6122      	str	r2, [r4, #16]
 800ebe0:	f8cd a000 	str.w	sl, [sp]
 800ebe4:	464b      	mov	r3, r9
 800ebe6:	aa03      	add	r2, sp, #12
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4640      	mov	r0, r8
 800ebec:	f7ff fee2 	bl	800e9b4 <_printf_common>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d14c      	bne.n	800ec8e <_printf_i+0x1fe>
 800ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf8:	b004      	add	sp, #16
 800ebfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfe:	4835      	ldr	r0, [pc, #212]	; (800ecd4 <_printf_i+0x244>)
 800ec00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec04:	6829      	ldr	r1, [r5, #0]
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec0c:	6029      	str	r1, [r5, #0]
 800ec0e:	061d      	lsls	r5, r3, #24
 800ec10:	d514      	bpl.n	800ec3c <_printf_i+0x1ac>
 800ec12:	07df      	lsls	r7, r3, #31
 800ec14:	bf44      	itt	mi
 800ec16:	f043 0320 	orrmi.w	r3, r3, #32
 800ec1a:	6023      	strmi	r3, [r4, #0]
 800ec1c:	b91e      	cbnz	r6, 800ec26 <_printf_i+0x196>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	f023 0320 	bic.w	r3, r3, #32
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	2310      	movs	r3, #16
 800ec28:	e7b0      	b.n	800eb8c <_printf_i+0xfc>
 800ec2a:	6823      	ldr	r3, [r4, #0]
 800ec2c:	f043 0320 	orr.w	r3, r3, #32
 800ec30:	6023      	str	r3, [r4, #0]
 800ec32:	2378      	movs	r3, #120	; 0x78
 800ec34:	4828      	ldr	r0, [pc, #160]	; (800ecd8 <_printf_i+0x248>)
 800ec36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec3a:	e7e3      	b.n	800ec04 <_printf_i+0x174>
 800ec3c:	0659      	lsls	r1, r3, #25
 800ec3e:	bf48      	it	mi
 800ec40:	b2b6      	uxthmi	r6, r6
 800ec42:	e7e6      	b.n	800ec12 <_printf_i+0x182>
 800ec44:	4615      	mov	r5, r2
 800ec46:	e7bb      	b.n	800ebc0 <_printf_i+0x130>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	6826      	ldr	r6, [r4, #0]
 800ec4c:	6961      	ldr	r1, [r4, #20]
 800ec4e:	1d18      	adds	r0, r3, #4
 800ec50:	6028      	str	r0, [r5, #0]
 800ec52:	0635      	lsls	r5, r6, #24
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	d501      	bpl.n	800ec5c <_printf_i+0x1cc>
 800ec58:	6019      	str	r1, [r3, #0]
 800ec5a:	e002      	b.n	800ec62 <_printf_i+0x1d2>
 800ec5c:	0670      	lsls	r0, r6, #25
 800ec5e:	d5fb      	bpl.n	800ec58 <_printf_i+0x1c8>
 800ec60:	8019      	strh	r1, [r3, #0]
 800ec62:	2300      	movs	r3, #0
 800ec64:	6123      	str	r3, [r4, #16]
 800ec66:	4615      	mov	r5, r2
 800ec68:	e7ba      	b.n	800ebe0 <_printf_i+0x150>
 800ec6a:	682b      	ldr	r3, [r5, #0]
 800ec6c:	1d1a      	adds	r2, r3, #4
 800ec6e:	602a      	str	r2, [r5, #0]
 800ec70:	681d      	ldr	r5, [r3, #0]
 800ec72:	6862      	ldr	r2, [r4, #4]
 800ec74:	2100      	movs	r1, #0
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7f1 fad2 	bl	8000220 <memchr>
 800ec7c:	b108      	cbz	r0, 800ec82 <_printf_i+0x1f2>
 800ec7e:	1b40      	subs	r0, r0, r5
 800ec80:	6060      	str	r0, [r4, #4]
 800ec82:	6863      	ldr	r3, [r4, #4]
 800ec84:	6123      	str	r3, [r4, #16]
 800ec86:	2300      	movs	r3, #0
 800ec88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec8c:	e7a8      	b.n	800ebe0 <_printf_i+0x150>
 800ec8e:	6923      	ldr	r3, [r4, #16]
 800ec90:	462a      	mov	r2, r5
 800ec92:	4649      	mov	r1, r9
 800ec94:	4640      	mov	r0, r8
 800ec96:	47d0      	blx	sl
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d0ab      	beq.n	800ebf4 <_printf_i+0x164>
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	079b      	lsls	r3, r3, #30
 800eca0:	d413      	bmi.n	800ecca <_printf_i+0x23a>
 800eca2:	68e0      	ldr	r0, [r4, #12]
 800eca4:	9b03      	ldr	r3, [sp, #12]
 800eca6:	4298      	cmp	r0, r3
 800eca8:	bfb8      	it	lt
 800ecaa:	4618      	movlt	r0, r3
 800ecac:	e7a4      	b.n	800ebf8 <_printf_i+0x168>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	4632      	mov	r2, r6
 800ecb2:	4649      	mov	r1, r9
 800ecb4:	4640      	mov	r0, r8
 800ecb6:	47d0      	blx	sl
 800ecb8:	3001      	adds	r0, #1
 800ecba:	d09b      	beq.n	800ebf4 <_printf_i+0x164>
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	68e3      	ldr	r3, [r4, #12]
 800ecc0:	9903      	ldr	r1, [sp, #12]
 800ecc2:	1a5b      	subs	r3, r3, r1
 800ecc4:	42ab      	cmp	r3, r5
 800ecc6:	dcf2      	bgt.n	800ecae <_printf_i+0x21e>
 800ecc8:	e7eb      	b.n	800eca2 <_printf_i+0x212>
 800ecca:	2500      	movs	r5, #0
 800eccc:	f104 0619 	add.w	r6, r4, #25
 800ecd0:	e7f5      	b.n	800ecbe <_printf_i+0x22e>
 800ecd2:	bf00      	nop
 800ecd4:	08013c6a 	.word	0x08013c6a
 800ecd8:	08013c7b 	.word	0x08013c7b

0800ecdc <_scanf_float>:
 800ecdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece0:	b087      	sub	sp, #28
 800ece2:	4617      	mov	r7, r2
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	688b      	ldr	r3, [r1, #8]
 800ece8:	1e5a      	subs	r2, r3, #1
 800ecea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ecee:	bf83      	ittte	hi
 800ecf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ecf4:	195b      	addhi	r3, r3, r5
 800ecf6:	9302      	strhi	r3, [sp, #8]
 800ecf8:	2300      	movls	r3, #0
 800ecfa:	bf86      	itte	hi
 800ecfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed00:	608b      	strhi	r3, [r1, #8]
 800ed02:	9302      	strls	r3, [sp, #8]
 800ed04:	680b      	ldr	r3, [r1, #0]
 800ed06:	468b      	mov	fp, r1
 800ed08:	2500      	movs	r5, #0
 800ed0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ed0e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ed12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ed16:	4680      	mov	r8, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	465e      	mov	r6, fp
 800ed1c:	46aa      	mov	sl, r5
 800ed1e:	46a9      	mov	r9, r5
 800ed20:	9501      	str	r5, [sp, #4]
 800ed22:	68a2      	ldr	r2, [r4, #8]
 800ed24:	b152      	cbz	r2, 800ed3c <_scanf_float+0x60>
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b4e      	cmp	r3, #78	; 0x4e
 800ed2c:	d864      	bhi.n	800edf8 <_scanf_float+0x11c>
 800ed2e:	2b40      	cmp	r3, #64	; 0x40
 800ed30:	d83c      	bhi.n	800edac <_scanf_float+0xd0>
 800ed32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ed36:	b2c8      	uxtb	r0, r1
 800ed38:	280e      	cmp	r0, #14
 800ed3a:	d93a      	bls.n	800edb2 <_scanf_float+0xd6>
 800ed3c:	f1b9 0f00 	cmp.w	r9, #0
 800ed40:	d003      	beq.n	800ed4a <_scanf_float+0x6e>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed4e:	f1ba 0f01 	cmp.w	sl, #1
 800ed52:	f200 8113 	bhi.w	800ef7c <_scanf_float+0x2a0>
 800ed56:	455e      	cmp	r6, fp
 800ed58:	f200 8105 	bhi.w	800ef66 <_scanf_float+0x28a>
 800ed5c:	2501      	movs	r5, #1
 800ed5e:	4628      	mov	r0, r5
 800ed60:	b007      	add	sp, #28
 800ed62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ed6a:	2a0d      	cmp	r2, #13
 800ed6c:	d8e6      	bhi.n	800ed3c <_scanf_float+0x60>
 800ed6e:	a101      	add	r1, pc, #4	; (adr r1, 800ed74 <_scanf_float+0x98>)
 800ed70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ed74:	0800eeb3 	.word	0x0800eeb3
 800ed78:	0800ed3d 	.word	0x0800ed3d
 800ed7c:	0800ed3d 	.word	0x0800ed3d
 800ed80:	0800ed3d 	.word	0x0800ed3d
 800ed84:	0800ef13 	.word	0x0800ef13
 800ed88:	0800eeeb 	.word	0x0800eeeb
 800ed8c:	0800ed3d 	.word	0x0800ed3d
 800ed90:	0800ed3d 	.word	0x0800ed3d
 800ed94:	0800eec1 	.word	0x0800eec1
 800ed98:	0800ed3d 	.word	0x0800ed3d
 800ed9c:	0800ed3d 	.word	0x0800ed3d
 800eda0:	0800ed3d 	.word	0x0800ed3d
 800eda4:	0800ed3d 	.word	0x0800ed3d
 800eda8:	0800ee79 	.word	0x0800ee79
 800edac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800edb0:	e7db      	b.n	800ed6a <_scanf_float+0x8e>
 800edb2:	290e      	cmp	r1, #14
 800edb4:	d8c2      	bhi.n	800ed3c <_scanf_float+0x60>
 800edb6:	a001      	add	r0, pc, #4	; (adr r0, 800edbc <_scanf_float+0xe0>)
 800edb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800edbc:	0800ee6b 	.word	0x0800ee6b
 800edc0:	0800ed3d 	.word	0x0800ed3d
 800edc4:	0800ee6b 	.word	0x0800ee6b
 800edc8:	0800eeff 	.word	0x0800eeff
 800edcc:	0800ed3d 	.word	0x0800ed3d
 800edd0:	0800ee19 	.word	0x0800ee19
 800edd4:	0800ee55 	.word	0x0800ee55
 800edd8:	0800ee55 	.word	0x0800ee55
 800eddc:	0800ee55 	.word	0x0800ee55
 800ede0:	0800ee55 	.word	0x0800ee55
 800ede4:	0800ee55 	.word	0x0800ee55
 800ede8:	0800ee55 	.word	0x0800ee55
 800edec:	0800ee55 	.word	0x0800ee55
 800edf0:	0800ee55 	.word	0x0800ee55
 800edf4:	0800ee55 	.word	0x0800ee55
 800edf8:	2b6e      	cmp	r3, #110	; 0x6e
 800edfa:	d809      	bhi.n	800ee10 <_scanf_float+0x134>
 800edfc:	2b60      	cmp	r3, #96	; 0x60
 800edfe:	d8b2      	bhi.n	800ed66 <_scanf_float+0x8a>
 800ee00:	2b54      	cmp	r3, #84	; 0x54
 800ee02:	d077      	beq.n	800eef4 <_scanf_float+0x218>
 800ee04:	2b59      	cmp	r3, #89	; 0x59
 800ee06:	d199      	bne.n	800ed3c <_scanf_float+0x60>
 800ee08:	2d07      	cmp	r5, #7
 800ee0a:	d197      	bne.n	800ed3c <_scanf_float+0x60>
 800ee0c:	2508      	movs	r5, #8
 800ee0e:	e029      	b.n	800ee64 <_scanf_float+0x188>
 800ee10:	2b74      	cmp	r3, #116	; 0x74
 800ee12:	d06f      	beq.n	800eef4 <_scanf_float+0x218>
 800ee14:	2b79      	cmp	r3, #121	; 0x79
 800ee16:	e7f6      	b.n	800ee06 <_scanf_float+0x12a>
 800ee18:	6821      	ldr	r1, [r4, #0]
 800ee1a:	05c8      	lsls	r0, r1, #23
 800ee1c:	d51a      	bpl.n	800ee54 <_scanf_float+0x178>
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ee24:	6021      	str	r1, [r4, #0]
 800ee26:	f109 0901 	add.w	r9, r9, #1
 800ee2a:	b11b      	cbz	r3, 800ee34 <_scanf_float+0x158>
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	3201      	adds	r2, #1
 800ee30:	9302      	str	r3, [sp, #8]
 800ee32:	60a2      	str	r2, [r4, #8]
 800ee34:	68a3      	ldr	r3, [r4, #8]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	60a3      	str	r3, [r4, #8]
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	6123      	str	r3, [r4, #16]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	607b      	str	r3, [r7, #4]
 800ee48:	f340 8084 	ble.w	800ef54 <_scanf_float+0x278>
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	603b      	str	r3, [r7, #0]
 800ee52:	e766      	b.n	800ed22 <_scanf_float+0x46>
 800ee54:	eb1a 0f05 	cmn.w	sl, r5
 800ee58:	f47f af70 	bne.w	800ed3c <_scanf_float+0x60>
 800ee5c:	6822      	ldr	r2, [r4, #0]
 800ee5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ee62:	6022      	str	r2, [r4, #0]
 800ee64:	f806 3b01 	strb.w	r3, [r6], #1
 800ee68:	e7e4      	b.n	800ee34 <_scanf_float+0x158>
 800ee6a:	6822      	ldr	r2, [r4, #0]
 800ee6c:	0610      	lsls	r0, r2, #24
 800ee6e:	f57f af65 	bpl.w	800ed3c <_scanf_float+0x60>
 800ee72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee76:	e7f4      	b.n	800ee62 <_scanf_float+0x186>
 800ee78:	f1ba 0f00 	cmp.w	sl, #0
 800ee7c:	d10e      	bne.n	800ee9c <_scanf_float+0x1c0>
 800ee7e:	f1b9 0f00 	cmp.w	r9, #0
 800ee82:	d10e      	bne.n	800eea2 <_scanf_float+0x1c6>
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ee8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ee8e:	d108      	bne.n	800eea2 <_scanf_float+0x1c6>
 800ee90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ee94:	6022      	str	r2, [r4, #0]
 800ee96:	f04f 0a01 	mov.w	sl, #1
 800ee9a:	e7e3      	b.n	800ee64 <_scanf_float+0x188>
 800ee9c:	f1ba 0f02 	cmp.w	sl, #2
 800eea0:	d055      	beq.n	800ef4e <_scanf_float+0x272>
 800eea2:	2d01      	cmp	r5, #1
 800eea4:	d002      	beq.n	800eeac <_scanf_float+0x1d0>
 800eea6:	2d04      	cmp	r5, #4
 800eea8:	f47f af48 	bne.w	800ed3c <_scanf_float+0x60>
 800eeac:	3501      	adds	r5, #1
 800eeae:	b2ed      	uxtb	r5, r5
 800eeb0:	e7d8      	b.n	800ee64 <_scanf_float+0x188>
 800eeb2:	f1ba 0f01 	cmp.w	sl, #1
 800eeb6:	f47f af41 	bne.w	800ed3c <_scanf_float+0x60>
 800eeba:	f04f 0a02 	mov.w	sl, #2
 800eebe:	e7d1      	b.n	800ee64 <_scanf_float+0x188>
 800eec0:	b97d      	cbnz	r5, 800eee2 <_scanf_float+0x206>
 800eec2:	f1b9 0f00 	cmp.w	r9, #0
 800eec6:	f47f af3c 	bne.w	800ed42 <_scanf_float+0x66>
 800eeca:	6822      	ldr	r2, [r4, #0]
 800eecc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eed0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eed4:	f47f af39 	bne.w	800ed4a <_scanf_float+0x6e>
 800eed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eedc:	6022      	str	r2, [r4, #0]
 800eede:	2501      	movs	r5, #1
 800eee0:	e7c0      	b.n	800ee64 <_scanf_float+0x188>
 800eee2:	2d03      	cmp	r5, #3
 800eee4:	d0e2      	beq.n	800eeac <_scanf_float+0x1d0>
 800eee6:	2d05      	cmp	r5, #5
 800eee8:	e7de      	b.n	800eea8 <_scanf_float+0x1cc>
 800eeea:	2d02      	cmp	r5, #2
 800eeec:	f47f af26 	bne.w	800ed3c <_scanf_float+0x60>
 800eef0:	2503      	movs	r5, #3
 800eef2:	e7b7      	b.n	800ee64 <_scanf_float+0x188>
 800eef4:	2d06      	cmp	r5, #6
 800eef6:	f47f af21 	bne.w	800ed3c <_scanf_float+0x60>
 800eefa:	2507      	movs	r5, #7
 800eefc:	e7b2      	b.n	800ee64 <_scanf_float+0x188>
 800eefe:	6822      	ldr	r2, [r4, #0]
 800ef00:	0591      	lsls	r1, r2, #22
 800ef02:	f57f af1b 	bpl.w	800ed3c <_scanf_float+0x60>
 800ef06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ef0a:	6022      	str	r2, [r4, #0]
 800ef0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef10:	e7a8      	b.n	800ee64 <_scanf_float+0x188>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ef18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ef1c:	d006      	beq.n	800ef2c <_scanf_float+0x250>
 800ef1e:	0550      	lsls	r0, r2, #21
 800ef20:	f57f af0c 	bpl.w	800ed3c <_scanf_float+0x60>
 800ef24:	f1b9 0f00 	cmp.w	r9, #0
 800ef28:	f43f af0f 	beq.w	800ed4a <_scanf_float+0x6e>
 800ef2c:	0591      	lsls	r1, r2, #22
 800ef2e:	bf58      	it	pl
 800ef30:	9901      	ldrpl	r1, [sp, #4]
 800ef32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef36:	bf58      	it	pl
 800ef38:	eba9 0101 	subpl.w	r1, r9, r1
 800ef3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ef40:	bf58      	it	pl
 800ef42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ef46:	6022      	str	r2, [r4, #0]
 800ef48:	f04f 0900 	mov.w	r9, #0
 800ef4c:	e78a      	b.n	800ee64 <_scanf_float+0x188>
 800ef4e:	f04f 0a03 	mov.w	sl, #3
 800ef52:	e787      	b.n	800ee64 <_scanf_float+0x188>
 800ef54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ef58:	4639      	mov	r1, r7
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	4798      	blx	r3
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f43f aedf 	beq.w	800ed22 <_scanf_float+0x46>
 800ef64:	e6ea      	b.n	800ed3c <_scanf_float+0x60>
 800ef66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef6e:	463a      	mov	r2, r7
 800ef70:	4640      	mov	r0, r8
 800ef72:	4798      	blx	r3
 800ef74:	6923      	ldr	r3, [r4, #16]
 800ef76:	3b01      	subs	r3, #1
 800ef78:	6123      	str	r3, [r4, #16]
 800ef7a:	e6ec      	b.n	800ed56 <_scanf_float+0x7a>
 800ef7c:	1e6b      	subs	r3, r5, #1
 800ef7e:	2b06      	cmp	r3, #6
 800ef80:	d825      	bhi.n	800efce <_scanf_float+0x2f2>
 800ef82:	2d02      	cmp	r5, #2
 800ef84:	d836      	bhi.n	800eff4 <_scanf_float+0x318>
 800ef86:	455e      	cmp	r6, fp
 800ef88:	f67f aee8 	bls.w	800ed5c <_scanf_float+0x80>
 800ef8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef94:	463a      	mov	r2, r7
 800ef96:	4640      	mov	r0, r8
 800ef98:	4798      	blx	r3
 800ef9a:	6923      	ldr	r3, [r4, #16]
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	e7f1      	b.n	800ef86 <_scanf_float+0x2aa>
 800efa2:	9802      	ldr	r0, [sp, #8]
 800efa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800efac:	9002      	str	r0, [sp, #8]
 800efae:	463a      	mov	r2, r7
 800efb0:	4640      	mov	r0, r8
 800efb2:	4798      	blx	r3
 800efb4:	6923      	ldr	r3, [r4, #16]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	6123      	str	r3, [r4, #16]
 800efba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efbe:	fa5f fa8a 	uxtb.w	sl, sl
 800efc2:	f1ba 0f02 	cmp.w	sl, #2
 800efc6:	d1ec      	bne.n	800efa2 <_scanf_float+0x2c6>
 800efc8:	3d03      	subs	r5, #3
 800efca:	b2ed      	uxtb	r5, r5
 800efcc:	1b76      	subs	r6, r6, r5
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	05da      	lsls	r2, r3, #23
 800efd2:	d52f      	bpl.n	800f034 <_scanf_float+0x358>
 800efd4:	055b      	lsls	r3, r3, #21
 800efd6:	d510      	bpl.n	800effa <_scanf_float+0x31e>
 800efd8:	455e      	cmp	r6, fp
 800efda:	f67f aebf 	bls.w	800ed5c <_scanf_float+0x80>
 800efde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800efe6:	463a      	mov	r2, r7
 800efe8:	4640      	mov	r0, r8
 800efea:	4798      	blx	r3
 800efec:	6923      	ldr	r3, [r4, #16]
 800efee:	3b01      	subs	r3, #1
 800eff0:	6123      	str	r3, [r4, #16]
 800eff2:	e7f1      	b.n	800efd8 <_scanf_float+0x2fc>
 800eff4:	46aa      	mov	sl, r5
 800eff6:	9602      	str	r6, [sp, #8]
 800eff8:	e7df      	b.n	800efba <_scanf_float+0x2de>
 800effa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	2965      	cmp	r1, #101	; 0x65
 800f002:	f103 33ff 	add.w	r3, r3, #4294967295
 800f006:	f106 35ff 	add.w	r5, r6, #4294967295
 800f00a:	6123      	str	r3, [r4, #16]
 800f00c:	d00c      	beq.n	800f028 <_scanf_float+0x34c>
 800f00e:	2945      	cmp	r1, #69	; 0x45
 800f010:	d00a      	beq.n	800f028 <_scanf_float+0x34c>
 800f012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f016:	463a      	mov	r2, r7
 800f018:	4640      	mov	r0, r8
 800f01a:	4798      	blx	r3
 800f01c:	6923      	ldr	r3, [r4, #16]
 800f01e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f022:	3b01      	subs	r3, #1
 800f024:	1eb5      	subs	r5, r6, #2
 800f026:	6123      	str	r3, [r4, #16]
 800f028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f02c:	463a      	mov	r2, r7
 800f02e:	4640      	mov	r0, r8
 800f030:	4798      	blx	r3
 800f032:	462e      	mov	r6, r5
 800f034:	6825      	ldr	r5, [r4, #0]
 800f036:	f015 0510 	ands.w	r5, r5, #16
 800f03a:	d159      	bne.n	800f0f0 <_scanf_float+0x414>
 800f03c:	7035      	strb	r5, [r6, #0]
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f048:	d11b      	bne.n	800f082 <_scanf_float+0x3a6>
 800f04a:	9b01      	ldr	r3, [sp, #4]
 800f04c:	454b      	cmp	r3, r9
 800f04e:	eba3 0209 	sub.w	r2, r3, r9
 800f052:	d123      	bne.n	800f09c <_scanf_float+0x3c0>
 800f054:	2200      	movs	r2, #0
 800f056:	4659      	mov	r1, fp
 800f058:	4640      	mov	r0, r8
 800f05a:	f001 f8af 	bl	80101bc <_strtod_r>
 800f05e:	6822      	ldr	r2, [r4, #0]
 800f060:	9b03      	ldr	r3, [sp, #12]
 800f062:	f012 0f02 	tst.w	r2, #2
 800f066:	ec57 6b10 	vmov	r6, r7, d0
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	d021      	beq.n	800f0b2 <_scanf_float+0x3d6>
 800f06e:	9903      	ldr	r1, [sp, #12]
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	600a      	str	r2, [r1, #0]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	e9c3 6700 	strd	r6, r7, [r3]
 800f07a:	68e3      	ldr	r3, [r4, #12]
 800f07c:	3301      	adds	r3, #1
 800f07e:	60e3      	str	r3, [r4, #12]
 800f080:	e66d      	b.n	800ed5e <_scanf_float+0x82>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0e5      	beq.n	800f054 <_scanf_float+0x378>
 800f088:	9905      	ldr	r1, [sp, #20]
 800f08a:	230a      	movs	r3, #10
 800f08c:	462a      	mov	r2, r5
 800f08e:	3101      	adds	r1, #1
 800f090:	4640      	mov	r0, r8
 800f092:	f001 f91b 	bl	80102cc <_strtol_r>
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	9e05      	ldr	r6, [sp, #20]
 800f09a:	1ac2      	subs	r2, r0, r3
 800f09c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f0a0:	429e      	cmp	r6, r3
 800f0a2:	bf28      	it	cs
 800f0a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f0a8:	4912      	ldr	r1, [pc, #72]	; (800f0f4 <_scanf_float+0x418>)
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f000 fa42 	bl	800f534 <siprintf>
 800f0b0:	e7d0      	b.n	800f054 <_scanf_float+0x378>
 800f0b2:	9903      	ldr	r1, [sp, #12]
 800f0b4:	f012 0f04 	tst.w	r2, #4
 800f0b8:	f103 0204 	add.w	r2, r3, #4
 800f0bc:	600a      	str	r2, [r1, #0]
 800f0be:	d1d9      	bne.n	800f074 <_scanf_float+0x398>
 800f0c0:	f8d3 8000 	ldr.w	r8, [r3]
 800f0c4:	ee10 2a10 	vmov	r2, s0
 800f0c8:	ee10 0a10 	vmov	r0, s0
 800f0cc:	463b      	mov	r3, r7
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	f7f1 fd4c 	bl	8000b6c <__aeabi_dcmpun>
 800f0d4:	b128      	cbz	r0, 800f0e2 <_scanf_float+0x406>
 800f0d6:	4808      	ldr	r0, [pc, #32]	; (800f0f8 <_scanf_float+0x41c>)
 800f0d8:	f000 fa26 	bl	800f528 <nanf>
 800f0dc:	ed88 0a00 	vstr	s0, [r8]
 800f0e0:	e7cb      	b.n	800f07a <_scanf_float+0x39e>
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 fd9f 	bl	8000c28 <__aeabi_d2f>
 800f0ea:	f8c8 0000 	str.w	r0, [r8]
 800f0ee:	e7c4      	b.n	800f07a <_scanf_float+0x39e>
 800f0f0:	2500      	movs	r5, #0
 800f0f2:	e634      	b.n	800ed5e <_scanf_float+0x82>
 800f0f4:	08013c8c 	.word	0x08013c8c
 800f0f8:	08014100 	.word	0x08014100

0800f0fc <iprintf>:
 800f0fc:	b40f      	push	{r0, r1, r2, r3}
 800f0fe:	4b0a      	ldr	r3, [pc, #40]	; (800f128 <iprintf+0x2c>)
 800f100:	b513      	push	{r0, r1, r4, lr}
 800f102:	681c      	ldr	r4, [r3, #0]
 800f104:	b124      	cbz	r4, 800f110 <iprintf+0x14>
 800f106:	69a3      	ldr	r3, [r4, #24]
 800f108:	b913      	cbnz	r3, 800f110 <iprintf+0x14>
 800f10a:	4620      	mov	r0, r4
 800f10c:	f002 f954 	bl	80113b8 <__sinit>
 800f110:	ab05      	add	r3, sp, #20
 800f112:	9a04      	ldr	r2, [sp, #16]
 800f114:	68a1      	ldr	r1, [r4, #8]
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	4620      	mov	r0, r4
 800f11a:	f003 fd2b 	bl	8012b74 <_vfiprintf_r>
 800f11e:	b002      	add	sp, #8
 800f120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f124:	b004      	add	sp, #16
 800f126:	4770      	bx	lr
 800f128:	20000054 	.word	0x20000054

0800f12c <_puts_r>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	460e      	mov	r6, r1
 800f130:	4605      	mov	r5, r0
 800f132:	b118      	cbz	r0, 800f13c <_puts_r+0x10>
 800f134:	6983      	ldr	r3, [r0, #24]
 800f136:	b90b      	cbnz	r3, 800f13c <_puts_r+0x10>
 800f138:	f002 f93e 	bl	80113b8 <__sinit>
 800f13c:	69ab      	ldr	r3, [r5, #24]
 800f13e:	68ac      	ldr	r4, [r5, #8]
 800f140:	b913      	cbnz	r3, 800f148 <_puts_r+0x1c>
 800f142:	4628      	mov	r0, r5
 800f144:	f002 f938 	bl	80113b8 <__sinit>
 800f148:	4b2c      	ldr	r3, [pc, #176]	; (800f1fc <_puts_r+0xd0>)
 800f14a:	429c      	cmp	r4, r3
 800f14c:	d120      	bne.n	800f190 <_puts_r+0x64>
 800f14e:	686c      	ldr	r4, [r5, #4]
 800f150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f152:	07db      	lsls	r3, r3, #31
 800f154:	d405      	bmi.n	800f162 <_puts_r+0x36>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	0598      	lsls	r0, r3, #22
 800f15a:	d402      	bmi.n	800f162 <_puts_r+0x36>
 800f15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f15e:	f002 fd3c 	bl	8011bda <__retarget_lock_acquire_recursive>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	0719      	lsls	r1, r3, #28
 800f166:	d51d      	bpl.n	800f1a4 <_puts_r+0x78>
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	b1db      	cbz	r3, 800f1a4 <_puts_r+0x78>
 800f16c:	3e01      	subs	r6, #1
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f174:	3b01      	subs	r3, #1
 800f176:	60a3      	str	r3, [r4, #8]
 800f178:	bb39      	cbnz	r1, 800f1ca <_puts_r+0x9e>
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da38      	bge.n	800f1f0 <_puts_r+0xc4>
 800f17e:	4622      	mov	r2, r4
 800f180:	210a      	movs	r1, #10
 800f182:	4628      	mov	r0, r5
 800f184:	f001 f8c4 	bl	8010310 <__swbuf_r>
 800f188:	3001      	adds	r0, #1
 800f18a:	d011      	beq.n	800f1b0 <_puts_r+0x84>
 800f18c:	250a      	movs	r5, #10
 800f18e:	e011      	b.n	800f1b4 <_puts_r+0x88>
 800f190:	4b1b      	ldr	r3, [pc, #108]	; (800f200 <_puts_r+0xd4>)
 800f192:	429c      	cmp	r4, r3
 800f194:	d101      	bne.n	800f19a <_puts_r+0x6e>
 800f196:	68ac      	ldr	r4, [r5, #8]
 800f198:	e7da      	b.n	800f150 <_puts_r+0x24>
 800f19a:	4b1a      	ldr	r3, [pc, #104]	; (800f204 <_puts_r+0xd8>)
 800f19c:	429c      	cmp	r4, r3
 800f19e:	bf08      	it	eq
 800f1a0:	68ec      	ldreq	r4, [r5, #12]
 800f1a2:	e7d5      	b.n	800f150 <_puts_r+0x24>
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f001 f904 	bl	80103b4 <__swsetup_r>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d0dd      	beq.n	800f16c <_puts_r+0x40>
 800f1b0:	f04f 35ff 	mov.w	r5, #4294967295
 800f1b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b6:	07da      	lsls	r2, r3, #31
 800f1b8:	d405      	bmi.n	800f1c6 <_puts_r+0x9a>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	059b      	lsls	r3, r3, #22
 800f1be:	d402      	bmi.n	800f1c6 <_puts_r+0x9a>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c2:	f002 fd0b 	bl	8011bdc <__retarget_lock_release_recursive>
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	da04      	bge.n	800f1d8 <_puts_r+0xac>
 800f1ce:	69a2      	ldr	r2, [r4, #24]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	dc06      	bgt.n	800f1e2 <_puts_r+0xb6>
 800f1d4:	290a      	cmp	r1, #10
 800f1d6:	d004      	beq.n	800f1e2 <_puts_r+0xb6>
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	1c5a      	adds	r2, r3, #1
 800f1dc:	6022      	str	r2, [r4, #0]
 800f1de:	7019      	strb	r1, [r3, #0]
 800f1e0:	e7c5      	b.n	800f16e <_puts_r+0x42>
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f001 f893 	bl	8010310 <__swbuf_r>
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	d1bf      	bne.n	800f16e <_puts_r+0x42>
 800f1ee:	e7df      	b.n	800f1b0 <_puts_r+0x84>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	250a      	movs	r5, #10
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	6022      	str	r2, [r4, #0]
 800f1f8:	701d      	strb	r5, [r3, #0]
 800f1fa:	e7db      	b.n	800f1b4 <_puts_r+0x88>
 800f1fc:	08013e9c 	.word	0x08013e9c
 800f200:	08013ebc 	.word	0x08013ebc
 800f204:	08013e7c 	.word	0x08013e7c

0800f208 <puts>:
 800f208:	4b02      	ldr	r3, [pc, #8]	; (800f214 <puts+0xc>)
 800f20a:	4601      	mov	r1, r0
 800f20c:	6818      	ldr	r0, [r3, #0]
 800f20e:	f7ff bf8d 	b.w	800f12c <_puts_r>
 800f212:	bf00      	nop
 800f214:	20000054 	.word	0x20000054

0800f218 <swapfunc>:
 800f218:	2b02      	cmp	r3, #2
 800f21a:	b510      	push	{r4, lr}
 800f21c:	d00a      	beq.n	800f234 <swapfunc+0x1c>
 800f21e:	0892      	lsrs	r2, r2, #2
 800f220:	3a01      	subs	r2, #1
 800f222:	6803      	ldr	r3, [r0, #0]
 800f224:	680c      	ldr	r4, [r1, #0]
 800f226:	f840 4b04 	str.w	r4, [r0], #4
 800f22a:	2a00      	cmp	r2, #0
 800f22c:	f841 3b04 	str.w	r3, [r1], #4
 800f230:	dcf6      	bgt.n	800f220 <swapfunc+0x8>
 800f232:	bd10      	pop	{r4, pc}
 800f234:	4402      	add	r2, r0
 800f236:	780c      	ldrb	r4, [r1, #0]
 800f238:	7803      	ldrb	r3, [r0, #0]
 800f23a:	f800 4b01 	strb.w	r4, [r0], #1
 800f23e:	f801 3b01 	strb.w	r3, [r1], #1
 800f242:	1a13      	subs	r3, r2, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	dcf6      	bgt.n	800f236 <swapfunc+0x1e>
 800f248:	e7f3      	b.n	800f232 <swapfunc+0x1a>

0800f24a <med3.constprop.0>:
 800f24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24c:	460c      	mov	r4, r1
 800f24e:	4615      	mov	r5, r2
 800f250:	4607      	mov	r7, r0
 800f252:	461e      	mov	r6, r3
 800f254:	4798      	blx	r3
 800f256:	2800      	cmp	r0, #0
 800f258:	4629      	mov	r1, r5
 800f25a:	4620      	mov	r0, r4
 800f25c:	da0a      	bge.n	800f274 <med3.constprop.0+0x2a>
 800f25e:	47b0      	blx	r6
 800f260:	2800      	cmp	r0, #0
 800f262:	db05      	blt.n	800f270 <med3.constprop.0+0x26>
 800f264:	4629      	mov	r1, r5
 800f266:	4638      	mov	r0, r7
 800f268:	47b0      	blx	r6
 800f26a:	2800      	cmp	r0, #0
 800f26c:	db0a      	blt.n	800f284 <med3.constprop.0+0x3a>
 800f26e:	463c      	mov	r4, r7
 800f270:	4620      	mov	r0, r4
 800f272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f274:	47b0      	blx	r6
 800f276:	2800      	cmp	r0, #0
 800f278:	dcfa      	bgt.n	800f270 <med3.constprop.0+0x26>
 800f27a:	4629      	mov	r1, r5
 800f27c:	4638      	mov	r0, r7
 800f27e:	47b0      	blx	r6
 800f280:	2800      	cmp	r0, #0
 800f282:	dbf4      	blt.n	800f26e <med3.constprop.0+0x24>
 800f284:	462c      	mov	r4, r5
 800f286:	e7f3      	b.n	800f270 <med3.constprop.0+0x26>

0800f288 <qsort>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	469a      	mov	sl, r3
 800f28e:	ea40 0302 	orr.w	r3, r0, r2
 800f292:	079b      	lsls	r3, r3, #30
 800f294:	b097      	sub	sp, #92	; 0x5c
 800f296:	4606      	mov	r6, r0
 800f298:	4614      	mov	r4, r2
 800f29a:	d11a      	bne.n	800f2d2 <qsort+0x4a>
 800f29c:	f1b2 0804 	subs.w	r8, r2, #4
 800f2a0:	bf18      	it	ne
 800f2a2:	f04f 0801 	movne.w	r8, #1
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	9302      	str	r3, [sp, #8]
 800f2aa:	1933      	adds	r3, r6, r4
 800f2ac:	fb04 f701 	mul.w	r7, r4, r1
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	2906      	cmp	r1, #6
 800f2b4:	eb06 0307 	add.w	r3, r6, r7
 800f2b8:	9303      	str	r3, [sp, #12]
 800f2ba:	d82a      	bhi.n	800f312 <qsort+0x8a>
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	9a03      	ldr	r2, [sp, #12]
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d310      	bcc.n	800f2e6 <qsort+0x5e>
 800f2c4:	9b02      	ldr	r3, [sp, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f040 811e 	bne.w	800f508 <qsort+0x280>
 800f2cc:	b017      	add	sp, #92	; 0x5c
 800f2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d2:	f04f 0802 	mov.w	r8, #2
 800f2d6:	e7e6      	b.n	800f2a6 <qsort+0x1e>
 800f2d8:	4643      	mov	r3, r8
 800f2da:	4622      	mov	r2, r4
 800f2dc:	4639      	mov	r1, r7
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7ff ff9a 	bl	800f218 <swapfunc>
 800f2e4:	e00e      	b.n	800f304 <qsort+0x7c>
 800f2e6:	9d01      	ldr	r5, [sp, #4]
 800f2e8:	e00d      	b.n	800f306 <qsort+0x7e>
 800f2ea:	1b2f      	subs	r7, r5, r4
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	47d0      	blx	sl
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	dd09      	ble.n	800f30a <qsort+0x82>
 800f2f6:	f1b8 0f00 	cmp.w	r8, #0
 800f2fa:	d1ed      	bne.n	800f2d8 <qsort+0x50>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	602a      	str	r2, [r5, #0]
 800f302:	603b      	str	r3, [r7, #0]
 800f304:	463d      	mov	r5, r7
 800f306:	42ae      	cmp	r6, r5
 800f308:	d3ef      	bcc.n	800f2ea <qsort+0x62>
 800f30a:	9b01      	ldr	r3, [sp, #4]
 800f30c:	4423      	add	r3, r4
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	e7d4      	b.n	800f2bc <qsort+0x34>
 800f312:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800f316:	1b3f      	subs	r7, r7, r4
 800f318:	2907      	cmp	r1, #7
 800f31a:	fb04 6909 	mla	r9, r4, r9, r6
 800f31e:	4437      	add	r7, r6
 800f320:	d022      	beq.n	800f368 <qsort+0xe0>
 800f322:	2928      	cmp	r1, #40	; 0x28
 800f324:	d945      	bls.n	800f3b2 <qsort+0x12a>
 800f326:	08c9      	lsrs	r1, r1, #3
 800f328:	fb04 f501 	mul.w	r5, r4, r1
 800f32c:	4653      	mov	r3, sl
 800f32e:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800f332:	1971      	adds	r1, r6, r5
 800f334:	4630      	mov	r0, r6
 800f336:	f7ff ff88 	bl	800f24a <med3.constprop.0>
 800f33a:	4649      	mov	r1, r9
 800f33c:	eb09 0205 	add.w	r2, r9, r5
 800f340:	4653      	mov	r3, sl
 800f342:	4683      	mov	fp, r0
 800f344:	1b48      	subs	r0, r1, r5
 800f346:	f7ff ff80 	bl	800f24a <med3.constprop.0>
 800f34a:	463a      	mov	r2, r7
 800f34c:	4681      	mov	r9, r0
 800f34e:	4653      	mov	r3, sl
 800f350:	1b79      	subs	r1, r7, r5
 800f352:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800f356:	f7ff ff78 	bl	800f24a <med3.constprop.0>
 800f35a:	4602      	mov	r2, r0
 800f35c:	4649      	mov	r1, r9
 800f35e:	4653      	mov	r3, sl
 800f360:	4658      	mov	r0, fp
 800f362:	f7ff ff72 	bl	800f24a <med3.constprop.0>
 800f366:	4681      	mov	r9, r0
 800f368:	f1b8 0f00 	cmp.w	r8, #0
 800f36c:	d124      	bne.n	800f3b8 <qsort+0x130>
 800f36e:	6833      	ldr	r3, [r6, #0]
 800f370:	f8d9 2000 	ldr.w	r2, [r9]
 800f374:	6032      	str	r2, [r6, #0]
 800f376:	f8c9 3000 	str.w	r3, [r9]
 800f37a:	eb06 0b04 	add.w	fp, r6, r4
 800f37e:	46b9      	mov	r9, r7
 800f380:	465d      	mov	r5, fp
 800f382:	2300      	movs	r3, #0
 800f384:	45bb      	cmp	fp, r7
 800f386:	d835      	bhi.n	800f3f4 <qsort+0x16c>
 800f388:	4631      	mov	r1, r6
 800f38a:	4658      	mov	r0, fp
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	47d0      	blx	sl
 800f390:	2800      	cmp	r0, #0
 800f392:	9b04      	ldr	r3, [sp, #16]
 800f394:	dc3e      	bgt.n	800f414 <qsort+0x18c>
 800f396:	d10a      	bne.n	800f3ae <qsort+0x126>
 800f398:	f1b8 0f00 	cmp.w	r8, #0
 800f39c:	d113      	bne.n	800f3c6 <qsort+0x13e>
 800f39e:	682b      	ldr	r3, [r5, #0]
 800f3a0:	f8db 2000 	ldr.w	r2, [fp]
 800f3a4:	602a      	str	r2, [r5, #0]
 800f3a6:	f8cb 3000 	str.w	r3, [fp]
 800f3aa:	4425      	add	r5, r4
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	44a3      	add	fp, r4
 800f3b0:	e7e8      	b.n	800f384 <qsort+0xfc>
 800f3b2:	463a      	mov	r2, r7
 800f3b4:	46b3      	mov	fp, r6
 800f3b6:	e7d1      	b.n	800f35c <qsort+0xd4>
 800f3b8:	4643      	mov	r3, r8
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	4649      	mov	r1, r9
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7ff ff2a 	bl	800f218 <swapfunc>
 800f3c4:	e7d9      	b.n	800f37a <qsort+0xf2>
 800f3c6:	4643      	mov	r3, r8
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	4659      	mov	r1, fp
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f7ff ff23 	bl	800f218 <swapfunc>
 800f3d2:	e7ea      	b.n	800f3aa <qsort+0x122>
 800f3d4:	d10b      	bne.n	800f3ee <qsort+0x166>
 800f3d6:	f1b8 0f00 	cmp.w	r8, #0
 800f3da:	d114      	bne.n	800f406 <qsort+0x17e>
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	f8d9 2000 	ldr.w	r2, [r9]
 800f3e2:	603a      	str	r2, [r7, #0]
 800f3e4:	f8c9 3000 	str.w	r3, [r9]
 800f3e8:	eba9 0904 	sub.w	r9, r9, r4
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	9f04      	ldr	r7, [sp, #16]
 800f3f0:	45bb      	cmp	fp, r7
 800f3f2:	d90f      	bls.n	800f414 <qsort+0x18c>
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d143      	bne.n	800f480 <qsort+0x1f8>
 800f3f8:	9b01      	ldr	r3, [sp, #4]
 800f3fa:	9a03      	ldr	r2, [sp, #12]
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	f4bf af61 	bcs.w	800f2c4 <qsort+0x3c>
 800f402:	9d01      	ldr	r5, [sp, #4]
 800f404:	e036      	b.n	800f474 <qsort+0x1ec>
 800f406:	4643      	mov	r3, r8
 800f408:	4622      	mov	r2, r4
 800f40a:	4649      	mov	r1, r9
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff ff03 	bl	800f218 <swapfunc>
 800f412:	e7e9      	b.n	800f3e8 <qsort+0x160>
 800f414:	4631      	mov	r1, r6
 800f416:	4638      	mov	r0, r7
 800f418:	9305      	str	r3, [sp, #20]
 800f41a:	47d0      	blx	sl
 800f41c:	1b3b      	subs	r3, r7, r4
 800f41e:	2800      	cmp	r0, #0
 800f420:	9304      	str	r3, [sp, #16]
 800f422:	9b05      	ldr	r3, [sp, #20]
 800f424:	dad6      	bge.n	800f3d4 <qsort+0x14c>
 800f426:	f1b8 0f00 	cmp.w	r8, #0
 800f42a:	d006      	beq.n	800f43a <qsort+0x1b2>
 800f42c:	4643      	mov	r3, r8
 800f42e:	4622      	mov	r2, r4
 800f430:	4639      	mov	r1, r7
 800f432:	4658      	mov	r0, fp
 800f434:	f7ff fef0 	bl	800f218 <swapfunc>
 800f438:	e005      	b.n	800f446 <qsort+0x1be>
 800f43a:	f8db 3000 	ldr.w	r3, [fp]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	f8cb 2000 	str.w	r2, [fp]
 800f444:	603b      	str	r3, [r7, #0]
 800f446:	9f04      	ldr	r7, [sp, #16]
 800f448:	e7b0      	b.n	800f3ac <qsort+0x124>
 800f44a:	4643      	mov	r3, r8
 800f44c:	4622      	mov	r2, r4
 800f44e:	4639      	mov	r1, r7
 800f450:	4628      	mov	r0, r5
 800f452:	f7ff fee1 	bl	800f218 <swapfunc>
 800f456:	e00c      	b.n	800f472 <qsort+0x1ea>
 800f458:	1b2f      	subs	r7, r5, r4
 800f45a:	4629      	mov	r1, r5
 800f45c:	4638      	mov	r0, r7
 800f45e:	47d0      	blx	sl
 800f460:	2800      	cmp	r0, #0
 800f462:	dd09      	ble.n	800f478 <qsort+0x1f0>
 800f464:	f1b8 0f00 	cmp.w	r8, #0
 800f468:	d1ef      	bne.n	800f44a <qsort+0x1c2>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	602a      	str	r2, [r5, #0]
 800f470:	603b      	str	r3, [r7, #0]
 800f472:	463d      	mov	r5, r7
 800f474:	42ae      	cmp	r6, r5
 800f476:	d3ef      	bcc.n	800f458 <qsort+0x1d0>
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	4423      	add	r3, r4
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	e7bb      	b.n	800f3f8 <qsort+0x170>
 800f480:	ebab 0305 	sub.w	r3, fp, r5
 800f484:	1baa      	subs	r2, r5, r6
 800f486:	429a      	cmp	r2, r3
 800f488:	bfa8      	it	ge
 800f48a:	461a      	movge	r2, r3
 800f48c:	9301      	str	r3, [sp, #4]
 800f48e:	b12a      	cbz	r2, 800f49c <qsort+0x214>
 800f490:	4643      	mov	r3, r8
 800f492:	ebab 0102 	sub.w	r1, fp, r2
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff febe 	bl	800f218 <swapfunc>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	eba3 0209 	sub.w	r2, r3, r9
 800f4a2:	eba9 0707 	sub.w	r7, r9, r7
 800f4a6:	1b12      	subs	r2, r2, r4
 800f4a8:	42ba      	cmp	r2, r7
 800f4aa:	bf28      	it	cs
 800f4ac:	463a      	movcs	r2, r7
 800f4ae:	b12a      	cbz	r2, 800f4bc <qsort+0x234>
 800f4b0:	9903      	ldr	r1, [sp, #12]
 800f4b2:	4643      	mov	r3, r8
 800f4b4:	1a89      	subs	r1, r1, r2
 800f4b6:	4658      	mov	r0, fp
 800f4b8:	f7ff feae 	bl	800f218 <swapfunc>
 800f4bc:	9d01      	ldr	r5, [sp, #4]
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	42af      	cmp	r7, r5
 800f4c2:	eba3 0007 	sub.w	r0, r3, r7
 800f4c6:	d904      	bls.n	800f4d2 <qsort+0x24a>
 800f4c8:	4633      	mov	r3, r6
 800f4ca:	463d      	mov	r5, r7
 800f4cc:	9f01      	ldr	r7, [sp, #4]
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	42a7      	cmp	r7, r4
 800f4d4:	d921      	bls.n	800f51a <qsort+0x292>
 800f4d6:	fbb7 f1f4 	udiv	r1, r7, r4
 800f4da:	9b02      	ldr	r3, [sp, #8]
 800f4dc:	2b07      	cmp	r3, #7
 800f4de:	d80d      	bhi.n	800f4fc <qsort+0x274>
 800f4e0:	fbb5 f5f4 	udiv	r5, r5, r4
 800f4e4:	aa16      	add	r2, sp, #88	; 0x58
 800f4e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4ea:	f843 6c40 	str.w	r6, [r3, #-64]
 800f4ee:	f843 5c3c 	str.w	r5, [r3, #-60]
 800f4f2:	9b02      	ldr	r3, [sp, #8]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	9302      	str	r3, [sp, #8]
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	e6d6      	b.n	800f2aa <qsort+0x22>
 800f4fc:	4653      	mov	r3, sl
 800f4fe:	4622      	mov	r2, r4
 800f500:	f7ff fec2 	bl	800f288 <qsort>
 800f504:	42a5      	cmp	r5, r4
 800f506:	d80b      	bhi.n	800f520 <qsort+0x298>
 800f508:	9b02      	ldr	r3, [sp, #8]
 800f50a:	aa16      	add	r2, sp, #88	; 0x58
 800f50c:	3b01      	subs	r3, #1
 800f50e:	9302      	str	r3, [sp, #8]
 800f510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f514:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800f518:	e7ee      	b.n	800f4f8 <qsort+0x270>
 800f51a:	42a5      	cmp	r5, r4
 800f51c:	f67f aed2 	bls.w	800f2c4 <qsort+0x3c>
 800f520:	fbb5 f1f4 	udiv	r1, r5, r4
 800f524:	4630      	mov	r0, r6
 800f526:	e7e7      	b.n	800f4f8 <qsort+0x270>

0800f528 <nanf>:
 800f528:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f530 <nanf+0x8>
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	7fc00000 	.word	0x7fc00000

0800f534 <siprintf>:
 800f534:	b40e      	push	{r1, r2, r3}
 800f536:	b500      	push	{lr}
 800f538:	b09c      	sub	sp, #112	; 0x70
 800f53a:	ab1d      	add	r3, sp, #116	; 0x74
 800f53c:	9002      	str	r0, [sp, #8]
 800f53e:	9006      	str	r0, [sp, #24]
 800f540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f544:	4809      	ldr	r0, [pc, #36]	; (800f56c <siprintf+0x38>)
 800f546:	9107      	str	r1, [sp, #28]
 800f548:	9104      	str	r1, [sp, #16]
 800f54a:	4909      	ldr	r1, [pc, #36]	; (800f570 <siprintf+0x3c>)
 800f54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f550:	9105      	str	r1, [sp, #20]
 800f552:	6800      	ldr	r0, [r0, #0]
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	a902      	add	r1, sp, #8
 800f558:	f003 f9e2 	bl	8012920 <_svfiprintf_r>
 800f55c:	9b02      	ldr	r3, [sp, #8]
 800f55e:	2200      	movs	r2, #0
 800f560:	701a      	strb	r2, [r3, #0]
 800f562:	b01c      	add	sp, #112	; 0x70
 800f564:	f85d eb04 	ldr.w	lr, [sp], #4
 800f568:	b003      	add	sp, #12
 800f56a:	4770      	bx	lr
 800f56c:	20000054 	.word	0x20000054
 800f570:	ffff0208 	.word	0xffff0208

0800f574 <sulp>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	4604      	mov	r4, r0
 800f578:	460d      	mov	r5, r1
 800f57a:	ec45 4b10 	vmov	d0, r4, r5
 800f57e:	4616      	mov	r6, r2
 800f580:	f002 ff2c 	bl	80123dc <__ulp>
 800f584:	ec51 0b10 	vmov	r0, r1, d0
 800f588:	b17e      	cbz	r6, 800f5aa <sulp+0x36>
 800f58a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f58e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f592:	2b00      	cmp	r3, #0
 800f594:	dd09      	ble.n	800f5aa <sulp+0x36>
 800f596:	051b      	lsls	r3, r3, #20
 800f598:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f59c:	2400      	movs	r4, #0
 800f59e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	462b      	mov	r3, r5
 800f5a6:	f7f1 f847 	bl	8000638 <__aeabi_dmul>
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	0000      	movs	r0, r0
	...

0800f5b0 <_strtod_l>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	ed2d 8b02 	vpush	{d8}
 800f5b8:	b09d      	sub	sp, #116	; 0x74
 800f5ba:	461f      	mov	r7, r3
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9318      	str	r3, [sp, #96]	; 0x60
 800f5c0:	4ba2      	ldr	r3, [pc, #648]	; (800f84c <_strtod_l+0x29c>)
 800f5c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	9305      	str	r3, [sp, #20]
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	4688      	mov	r8, r1
 800f5ce:	f7f0 fe1f 	bl	8000210 <strlen>
 800f5d2:	f04f 0a00 	mov.w	sl, #0
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	f04f 0b00 	mov.w	fp, #0
 800f5dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5e2:	781a      	ldrb	r2, [r3, #0]
 800f5e4:	2a2b      	cmp	r2, #43	; 0x2b
 800f5e6:	d04e      	beq.n	800f686 <_strtod_l+0xd6>
 800f5e8:	d83b      	bhi.n	800f662 <_strtod_l+0xb2>
 800f5ea:	2a0d      	cmp	r2, #13
 800f5ec:	d834      	bhi.n	800f658 <_strtod_l+0xa8>
 800f5ee:	2a08      	cmp	r2, #8
 800f5f0:	d834      	bhi.n	800f65c <_strtod_l+0xac>
 800f5f2:	2a00      	cmp	r2, #0
 800f5f4:	d03e      	beq.n	800f674 <_strtod_l+0xc4>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f5fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f5fc:	7833      	ldrb	r3, [r6, #0]
 800f5fe:	2b30      	cmp	r3, #48	; 0x30
 800f600:	f040 80b0 	bne.w	800f764 <_strtod_l+0x1b4>
 800f604:	7873      	ldrb	r3, [r6, #1]
 800f606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f60a:	2b58      	cmp	r3, #88	; 0x58
 800f60c:	d168      	bne.n	800f6e0 <_strtod_l+0x130>
 800f60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	ab18      	add	r3, sp, #96	; 0x60
 800f614:	9702      	str	r7, [sp, #8]
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	4a8d      	ldr	r2, [pc, #564]	; (800f850 <_strtod_l+0x2a0>)
 800f61a:	ab19      	add	r3, sp, #100	; 0x64
 800f61c:	a917      	add	r1, sp, #92	; 0x5c
 800f61e:	4620      	mov	r0, r4
 800f620:	f001 ffce 	bl	80115c0 <__gethex>
 800f624:	f010 0707 	ands.w	r7, r0, #7
 800f628:	4605      	mov	r5, r0
 800f62a:	d005      	beq.n	800f638 <_strtod_l+0x88>
 800f62c:	2f06      	cmp	r7, #6
 800f62e:	d12c      	bne.n	800f68a <_strtod_l+0xda>
 800f630:	3601      	adds	r6, #1
 800f632:	2300      	movs	r3, #0
 800f634:	9617      	str	r6, [sp, #92]	; 0x5c
 800f636:	930a      	str	r3, [sp, #40]	; 0x28
 800f638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 8590 	bne.w	8010160 <_strtod_l+0xbb0>
 800f640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f642:	b1eb      	cbz	r3, 800f680 <_strtod_l+0xd0>
 800f644:	4652      	mov	r2, sl
 800f646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f64a:	ec43 2b10 	vmov	d0, r2, r3
 800f64e:	b01d      	add	sp, #116	; 0x74
 800f650:	ecbd 8b02 	vpop	{d8}
 800f654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f658:	2a20      	cmp	r2, #32
 800f65a:	d1cc      	bne.n	800f5f6 <_strtod_l+0x46>
 800f65c:	3301      	adds	r3, #1
 800f65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f660:	e7be      	b.n	800f5e0 <_strtod_l+0x30>
 800f662:	2a2d      	cmp	r2, #45	; 0x2d
 800f664:	d1c7      	bne.n	800f5f6 <_strtod_l+0x46>
 800f666:	2201      	movs	r2, #1
 800f668:	920a      	str	r2, [sp, #40]	; 0x28
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f66e:	785b      	ldrb	r3, [r3, #1]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1c2      	bne.n	800f5fa <_strtod_l+0x4a>
 800f674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f040 856e 	bne.w	801015c <_strtod_l+0xbac>
 800f680:	4652      	mov	r2, sl
 800f682:	465b      	mov	r3, fp
 800f684:	e7e1      	b.n	800f64a <_strtod_l+0x9a>
 800f686:	2200      	movs	r2, #0
 800f688:	e7ee      	b.n	800f668 <_strtod_l+0xb8>
 800f68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f68c:	b13a      	cbz	r2, 800f69e <_strtod_l+0xee>
 800f68e:	2135      	movs	r1, #53	; 0x35
 800f690:	a81a      	add	r0, sp, #104	; 0x68
 800f692:	f002 ffae 	bl	80125f2 <__copybits>
 800f696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f698:	4620      	mov	r0, r4
 800f69a:	f002 fb6d 	bl	8011d78 <_Bfree>
 800f69e:	3f01      	subs	r7, #1
 800f6a0:	2f04      	cmp	r7, #4
 800f6a2:	d806      	bhi.n	800f6b2 <_strtod_l+0x102>
 800f6a4:	e8df f007 	tbb	[pc, r7]
 800f6a8:	1714030a 	.word	0x1714030a
 800f6ac:	0a          	.byte	0x0a
 800f6ad:	00          	.byte	0x00
 800f6ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f6b2:	0728      	lsls	r0, r5, #28
 800f6b4:	d5c0      	bpl.n	800f638 <_strtod_l+0x88>
 800f6b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f6ba:	e7bd      	b.n	800f638 <_strtod_l+0x88>
 800f6bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f6c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6ce:	e7f0      	b.n	800f6b2 <_strtod_l+0x102>
 800f6d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f854 <_strtod_l+0x2a4>
 800f6d4:	e7ed      	b.n	800f6b2 <_strtod_l+0x102>
 800f6d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f6da:	f04f 3aff 	mov.w	sl, #4294967295
 800f6de:	e7e8      	b.n	800f6b2 <_strtod_l+0x102>
 800f6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6e2:	1c5a      	adds	r2, r3, #1
 800f6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6e6:	785b      	ldrb	r3, [r3, #1]
 800f6e8:	2b30      	cmp	r3, #48	; 0x30
 800f6ea:	d0f9      	beq.n	800f6e0 <_strtod_l+0x130>
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0a3      	beq.n	800f638 <_strtod_l+0x88>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f04f 0900 	mov.w	r9, #0
 800f6f6:	9304      	str	r3, [sp, #16]
 800f6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6fa:	9308      	str	r3, [sp, #32]
 800f6fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800f700:	464f      	mov	r7, r9
 800f702:	220a      	movs	r2, #10
 800f704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f706:	7806      	ldrb	r6, [r0, #0]
 800f708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f70c:	b2d9      	uxtb	r1, r3
 800f70e:	2909      	cmp	r1, #9
 800f710:	d92a      	bls.n	800f768 <_strtod_l+0x1b8>
 800f712:	9905      	ldr	r1, [sp, #20]
 800f714:	462a      	mov	r2, r5
 800f716:	f003 fbba 	bl	8012e8e <strncmp>
 800f71a:	b398      	cbz	r0, 800f784 <_strtod_l+0x1d4>
 800f71c:	2000      	movs	r0, #0
 800f71e:	4632      	mov	r2, r6
 800f720:	463d      	mov	r5, r7
 800f722:	9005      	str	r0, [sp, #20]
 800f724:	4603      	mov	r3, r0
 800f726:	2a65      	cmp	r2, #101	; 0x65
 800f728:	d001      	beq.n	800f72e <_strtod_l+0x17e>
 800f72a:	2a45      	cmp	r2, #69	; 0x45
 800f72c:	d118      	bne.n	800f760 <_strtod_l+0x1b0>
 800f72e:	b91d      	cbnz	r5, 800f738 <_strtod_l+0x188>
 800f730:	9a04      	ldr	r2, [sp, #16]
 800f732:	4302      	orrs	r2, r0
 800f734:	d09e      	beq.n	800f674 <_strtod_l+0xc4>
 800f736:	2500      	movs	r5, #0
 800f738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f73c:	f108 0201 	add.w	r2, r8, #1
 800f740:	9217      	str	r2, [sp, #92]	; 0x5c
 800f742:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f746:	2a2b      	cmp	r2, #43	; 0x2b
 800f748:	d075      	beq.n	800f836 <_strtod_l+0x286>
 800f74a:	2a2d      	cmp	r2, #45	; 0x2d
 800f74c:	d07b      	beq.n	800f846 <_strtod_l+0x296>
 800f74e:	f04f 0c00 	mov.w	ip, #0
 800f752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f756:	2909      	cmp	r1, #9
 800f758:	f240 8082 	bls.w	800f860 <_strtod_l+0x2b0>
 800f75c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f760:	2600      	movs	r6, #0
 800f762:	e09d      	b.n	800f8a0 <_strtod_l+0x2f0>
 800f764:	2300      	movs	r3, #0
 800f766:	e7c4      	b.n	800f6f2 <_strtod_l+0x142>
 800f768:	2f08      	cmp	r7, #8
 800f76a:	bfd8      	it	le
 800f76c:	9907      	ldrle	r1, [sp, #28]
 800f76e:	f100 0001 	add.w	r0, r0, #1
 800f772:	bfda      	itte	le
 800f774:	fb02 3301 	mlale	r3, r2, r1, r3
 800f778:	9307      	strle	r3, [sp, #28]
 800f77a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f77e:	3701      	adds	r7, #1
 800f780:	9017      	str	r0, [sp, #92]	; 0x5c
 800f782:	e7bf      	b.n	800f704 <_strtod_l+0x154>
 800f784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f786:	195a      	adds	r2, r3, r5
 800f788:	9217      	str	r2, [sp, #92]	; 0x5c
 800f78a:	5d5a      	ldrb	r2, [r3, r5]
 800f78c:	2f00      	cmp	r7, #0
 800f78e:	d037      	beq.n	800f800 <_strtod_l+0x250>
 800f790:	9005      	str	r0, [sp, #20]
 800f792:	463d      	mov	r5, r7
 800f794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f798:	2b09      	cmp	r3, #9
 800f79a:	d912      	bls.n	800f7c2 <_strtod_l+0x212>
 800f79c:	2301      	movs	r3, #1
 800f79e:	e7c2      	b.n	800f726 <_strtod_l+0x176>
 800f7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7a6:	785a      	ldrb	r2, [r3, #1]
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	2a30      	cmp	r2, #48	; 0x30
 800f7ac:	d0f8      	beq.n	800f7a0 <_strtod_l+0x1f0>
 800f7ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f7b2:	2b08      	cmp	r3, #8
 800f7b4:	f200 84d9 	bhi.w	801016a <_strtod_l+0xbba>
 800f7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7ba:	9005      	str	r0, [sp, #20]
 800f7bc:	2000      	movs	r0, #0
 800f7be:	9308      	str	r3, [sp, #32]
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	3a30      	subs	r2, #48	; 0x30
 800f7c4:	f100 0301 	add.w	r3, r0, #1
 800f7c8:	d014      	beq.n	800f7f4 <_strtod_l+0x244>
 800f7ca:	9905      	ldr	r1, [sp, #20]
 800f7cc:	4419      	add	r1, r3
 800f7ce:	9105      	str	r1, [sp, #20]
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	eb00 0e05 	add.w	lr, r0, r5
 800f7d6:	210a      	movs	r1, #10
 800f7d8:	4573      	cmp	r3, lr
 800f7da:	d113      	bne.n	800f804 <_strtod_l+0x254>
 800f7dc:	182b      	adds	r3, r5, r0
 800f7de:	2b08      	cmp	r3, #8
 800f7e0:	f105 0501 	add.w	r5, r5, #1
 800f7e4:	4405      	add	r5, r0
 800f7e6:	dc1c      	bgt.n	800f822 <_strtod_l+0x272>
 800f7e8:	9907      	ldr	r1, [sp, #28]
 800f7ea:	230a      	movs	r3, #10
 800f7ec:	fb03 2301 	mla	r3, r3, r1, r2
 800f7f0:	9307      	str	r3, [sp, #28]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7f6:	1c51      	adds	r1, r2, #1
 800f7f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800f7fa:	7852      	ldrb	r2, [r2, #1]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	e7c9      	b.n	800f794 <_strtod_l+0x1e4>
 800f800:	4638      	mov	r0, r7
 800f802:	e7d2      	b.n	800f7aa <_strtod_l+0x1fa>
 800f804:	2b08      	cmp	r3, #8
 800f806:	dc04      	bgt.n	800f812 <_strtod_l+0x262>
 800f808:	9e07      	ldr	r6, [sp, #28]
 800f80a:	434e      	muls	r6, r1
 800f80c:	9607      	str	r6, [sp, #28]
 800f80e:	3301      	adds	r3, #1
 800f810:	e7e2      	b.n	800f7d8 <_strtod_l+0x228>
 800f812:	f103 0c01 	add.w	ip, r3, #1
 800f816:	f1bc 0f10 	cmp.w	ip, #16
 800f81a:	bfd8      	it	le
 800f81c:	fb01 f909 	mulle.w	r9, r1, r9
 800f820:	e7f5      	b.n	800f80e <_strtod_l+0x25e>
 800f822:	2d10      	cmp	r5, #16
 800f824:	bfdc      	itt	le
 800f826:	230a      	movle	r3, #10
 800f828:	fb03 2909 	mlale	r9, r3, r9, r2
 800f82c:	e7e1      	b.n	800f7f2 <_strtod_l+0x242>
 800f82e:	2300      	movs	r3, #0
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	2301      	movs	r3, #1
 800f834:	e77c      	b.n	800f730 <_strtod_l+0x180>
 800f836:	f04f 0c00 	mov.w	ip, #0
 800f83a:	f108 0202 	add.w	r2, r8, #2
 800f83e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f840:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f844:	e785      	b.n	800f752 <_strtod_l+0x1a2>
 800f846:	f04f 0c01 	mov.w	ip, #1
 800f84a:	e7f6      	b.n	800f83a <_strtod_l+0x28a>
 800f84c:	08013f44 	.word	0x08013f44
 800f850:	08013c94 	.word	0x08013c94
 800f854:	7ff00000 	.word	0x7ff00000
 800f858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f85a:	1c51      	adds	r1, r2, #1
 800f85c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f85e:	7852      	ldrb	r2, [r2, #1]
 800f860:	2a30      	cmp	r2, #48	; 0x30
 800f862:	d0f9      	beq.n	800f858 <_strtod_l+0x2a8>
 800f864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f868:	2908      	cmp	r1, #8
 800f86a:	f63f af79 	bhi.w	800f760 <_strtod_l+0x1b0>
 800f86e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f874:	9206      	str	r2, [sp, #24]
 800f876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f878:	1c51      	adds	r1, r2, #1
 800f87a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f87c:	7852      	ldrb	r2, [r2, #1]
 800f87e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f882:	2e09      	cmp	r6, #9
 800f884:	d937      	bls.n	800f8f6 <_strtod_l+0x346>
 800f886:	9e06      	ldr	r6, [sp, #24]
 800f888:	1b89      	subs	r1, r1, r6
 800f88a:	2908      	cmp	r1, #8
 800f88c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f890:	dc02      	bgt.n	800f898 <_strtod_l+0x2e8>
 800f892:	4576      	cmp	r6, lr
 800f894:	bfa8      	it	ge
 800f896:	4676      	movge	r6, lr
 800f898:	f1bc 0f00 	cmp.w	ip, #0
 800f89c:	d000      	beq.n	800f8a0 <_strtod_l+0x2f0>
 800f89e:	4276      	negs	r6, r6
 800f8a0:	2d00      	cmp	r5, #0
 800f8a2:	d14d      	bne.n	800f940 <_strtod_l+0x390>
 800f8a4:	9904      	ldr	r1, [sp, #16]
 800f8a6:	4301      	orrs	r1, r0
 800f8a8:	f47f aec6 	bne.w	800f638 <_strtod_l+0x88>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f47f aee1 	bne.w	800f674 <_strtod_l+0xc4>
 800f8b2:	2a69      	cmp	r2, #105	; 0x69
 800f8b4:	d027      	beq.n	800f906 <_strtod_l+0x356>
 800f8b6:	dc24      	bgt.n	800f902 <_strtod_l+0x352>
 800f8b8:	2a49      	cmp	r2, #73	; 0x49
 800f8ba:	d024      	beq.n	800f906 <_strtod_l+0x356>
 800f8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800f8be:	f47f aed9 	bne.w	800f674 <_strtod_l+0xc4>
 800f8c2:	499f      	ldr	r1, [pc, #636]	; (800fb40 <_strtod_l+0x590>)
 800f8c4:	a817      	add	r0, sp, #92	; 0x5c
 800f8c6:	f002 f8d3 	bl	8011a70 <__match>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f43f aed2 	beq.w	800f674 <_strtod_l+0xc4>
 800f8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b28      	cmp	r3, #40	; 0x28
 800f8d6:	d12d      	bne.n	800f934 <_strtod_l+0x384>
 800f8d8:	499a      	ldr	r1, [pc, #616]	; (800fb44 <_strtod_l+0x594>)
 800f8da:	aa1a      	add	r2, sp, #104	; 0x68
 800f8dc:	a817      	add	r0, sp, #92	; 0x5c
 800f8de:	f002 f8db 	bl	8011a98 <__hexnan>
 800f8e2:	2805      	cmp	r0, #5
 800f8e4:	d126      	bne.n	800f934 <_strtod_l+0x384>
 800f8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f8ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f8f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f8f4:	e6a0      	b.n	800f638 <_strtod_l+0x88>
 800f8f6:	210a      	movs	r1, #10
 800f8f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f8fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f900:	e7b9      	b.n	800f876 <_strtod_l+0x2c6>
 800f902:	2a6e      	cmp	r2, #110	; 0x6e
 800f904:	e7db      	b.n	800f8be <_strtod_l+0x30e>
 800f906:	4990      	ldr	r1, [pc, #576]	; (800fb48 <_strtod_l+0x598>)
 800f908:	a817      	add	r0, sp, #92	; 0x5c
 800f90a:	f002 f8b1 	bl	8011a70 <__match>
 800f90e:	2800      	cmp	r0, #0
 800f910:	f43f aeb0 	beq.w	800f674 <_strtod_l+0xc4>
 800f914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f916:	498d      	ldr	r1, [pc, #564]	; (800fb4c <_strtod_l+0x59c>)
 800f918:	3b01      	subs	r3, #1
 800f91a:	a817      	add	r0, sp, #92	; 0x5c
 800f91c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f91e:	f002 f8a7 	bl	8011a70 <__match>
 800f922:	b910      	cbnz	r0, 800f92a <_strtod_l+0x37a>
 800f924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f926:	3301      	adds	r3, #1
 800f928:	9317      	str	r3, [sp, #92]	; 0x5c
 800f92a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fb5c <_strtod_l+0x5ac>
 800f92e:	f04f 0a00 	mov.w	sl, #0
 800f932:	e681      	b.n	800f638 <_strtod_l+0x88>
 800f934:	4886      	ldr	r0, [pc, #536]	; (800fb50 <_strtod_l+0x5a0>)
 800f936:	f003 fa4f 	bl	8012dd8 <nan>
 800f93a:	ec5b ab10 	vmov	sl, fp, d0
 800f93e:	e67b      	b.n	800f638 <_strtod_l+0x88>
 800f940:	9b05      	ldr	r3, [sp, #20]
 800f942:	9807      	ldr	r0, [sp, #28]
 800f944:	1af3      	subs	r3, r6, r3
 800f946:	2f00      	cmp	r7, #0
 800f948:	bf08      	it	eq
 800f94a:	462f      	moveq	r7, r5
 800f94c:	2d10      	cmp	r5, #16
 800f94e:	9306      	str	r3, [sp, #24]
 800f950:	46a8      	mov	r8, r5
 800f952:	bfa8      	it	ge
 800f954:	f04f 0810 	movge.w	r8, #16
 800f958:	f7f0 fdf4 	bl	8000544 <__aeabi_ui2d>
 800f95c:	2d09      	cmp	r5, #9
 800f95e:	4682      	mov	sl, r0
 800f960:	468b      	mov	fp, r1
 800f962:	dd13      	ble.n	800f98c <_strtod_l+0x3dc>
 800f964:	4b7b      	ldr	r3, [pc, #492]	; (800fb54 <_strtod_l+0x5a4>)
 800f966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f96a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f96e:	f7f0 fe63 	bl	8000638 <__aeabi_dmul>
 800f972:	4682      	mov	sl, r0
 800f974:	4648      	mov	r0, r9
 800f976:	468b      	mov	fp, r1
 800f978:	f7f0 fde4 	bl	8000544 <__aeabi_ui2d>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	f7f0 fca2 	bl	80002cc <__adddf3>
 800f988:	4682      	mov	sl, r0
 800f98a:	468b      	mov	fp, r1
 800f98c:	2d0f      	cmp	r5, #15
 800f98e:	dc38      	bgt.n	800fa02 <_strtod_l+0x452>
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	f43f ae50 	beq.w	800f638 <_strtod_l+0x88>
 800f998:	dd24      	ble.n	800f9e4 <_strtod_l+0x434>
 800f99a:	2b16      	cmp	r3, #22
 800f99c:	dc0b      	bgt.n	800f9b6 <_strtod_l+0x406>
 800f99e:	496d      	ldr	r1, [pc, #436]	; (800fb54 <_strtod_l+0x5a4>)
 800f9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9a8:	4652      	mov	r2, sl
 800f9aa:	465b      	mov	r3, fp
 800f9ac:	f7f0 fe44 	bl	8000638 <__aeabi_dmul>
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	468b      	mov	fp, r1
 800f9b4:	e640      	b.n	800f638 <_strtod_l+0x88>
 800f9b6:	9a06      	ldr	r2, [sp, #24]
 800f9b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	db20      	blt.n	800fa02 <_strtod_l+0x452>
 800f9c0:	4c64      	ldr	r4, [pc, #400]	; (800fb54 <_strtod_l+0x5a4>)
 800f9c2:	f1c5 050f 	rsb	r5, r5, #15
 800f9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f9ca:	4652      	mov	r2, sl
 800f9cc:	465b      	mov	r3, fp
 800f9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9d2:	f7f0 fe31 	bl	8000638 <__aeabi_dmul>
 800f9d6:	9b06      	ldr	r3, [sp, #24]
 800f9d8:	1b5d      	subs	r5, r3, r5
 800f9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f9e2:	e7e3      	b.n	800f9ac <_strtod_l+0x3fc>
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	3316      	adds	r3, #22
 800f9e8:	db0b      	blt.n	800fa02 <_strtod_l+0x452>
 800f9ea:	9b05      	ldr	r3, [sp, #20]
 800f9ec:	1b9e      	subs	r6, r3, r6
 800f9ee:	4b59      	ldr	r3, [pc, #356]	; (800fb54 <_strtod_l+0x5a4>)
 800f9f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f9f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f9f8:	4650      	mov	r0, sl
 800f9fa:	4659      	mov	r1, fp
 800f9fc:	f7f0 ff46 	bl	800088c <__aeabi_ddiv>
 800fa00:	e7d6      	b.n	800f9b0 <_strtod_l+0x400>
 800fa02:	9b06      	ldr	r3, [sp, #24]
 800fa04:	eba5 0808 	sub.w	r8, r5, r8
 800fa08:	4498      	add	r8, r3
 800fa0a:	f1b8 0f00 	cmp.w	r8, #0
 800fa0e:	dd74      	ble.n	800fafa <_strtod_l+0x54a>
 800fa10:	f018 030f 	ands.w	r3, r8, #15
 800fa14:	d00a      	beq.n	800fa2c <_strtod_l+0x47c>
 800fa16:	494f      	ldr	r1, [pc, #316]	; (800fb54 <_strtod_l+0x5a4>)
 800fa18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa1c:	4652      	mov	r2, sl
 800fa1e:	465b      	mov	r3, fp
 800fa20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa24:	f7f0 fe08 	bl	8000638 <__aeabi_dmul>
 800fa28:	4682      	mov	sl, r0
 800fa2a:	468b      	mov	fp, r1
 800fa2c:	f038 080f 	bics.w	r8, r8, #15
 800fa30:	d04f      	beq.n	800fad2 <_strtod_l+0x522>
 800fa32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fa36:	dd22      	ble.n	800fa7e <_strtod_l+0x4ce>
 800fa38:	2500      	movs	r5, #0
 800fa3a:	462e      	mov	r6, r5
 800fa3c:	9507      	str	r5, [sp, #28]
 800fa3e:	9505      	str	r5, [sp, #20]
 800fa40:	2322      	movs	r3, #34	; 0x22
 800fa42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fb5c <_strtod_l+0x5ac>
 800fa46:	6023      	str	r3, [r4, #0]
 800fa48:	f04f 0a00 	mov.w	sl, #0
 800fa4c:	9b07      	ldr	r3, [sp, #28]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f43f adf2 	beq.w	800f638 <_strtod_l+0x88>
 800fa54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa56:	4620      	mov	r0, r4
 800fa58:	f002 f98e 	bl	8011d78 <_Bfree>
 800fa5c:	9905      	ldr	r1, [sp, #20]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f002 f98a 	bl	8011d78 <_Bfree>
 800fa64:	4631      	mov	r1, r6
 800fa66:	4620      	mov	r0, r4
 800fa68:	f002 f986 	bl	8011d78 <_Bfree>
 800fa6c:	9907      	ldr	r1, [sp, #28]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f002 f982 	bl	8011d78 <_Bfree>
 800fa74:	4629      	mov	r1, r5
 800fa76:	4620      	mov	r0, r4
 800fa78:	f002 f97e 	bl	8011d78 <_Bfree>
 800fa7c:	e5dc      	b.n	800f638 <_strtod_l+0x88>
 800fa7e:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <_strtod_l+0x5a8>)
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	2300      	movs	r3, #0
 800fa84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	4699      	mov	r9, r3
 800fa8e:	f1b8 0f01 	cmp.w	r8, #1
 800fa92:	dc21      	bgt.n	800fad8 <_strtod_l+0x528>
 800fa94:	b10b      	cbz	r3, 800fa9a <_strtod_l+0x4ea>
 800fa96:	4682      	mov	sl, r0
 800fa98:	468b      	mov	fp, r1
 800fa9a:	4b2f      	ldr	r3, [pc, #188]	; (800fb58 <_strtod_l+0x5a8>)
 800fa9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800faa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800faa4:	4652      	mov	r2, sl
 800faa6:	465b      	mov	r3, fp
 800faa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800faac:	f7f0 fdc4 	bl	8000638 <__aeabi_dmul>
 800fab0:	4b2a      	ldr	r3, [pc, #168]	; (800fb5c <_strtod_l+0x5ac>)
 800fab2:	460a      	mov	r2, r1
 800fab4:	400b      	ands	r3, r1
 800fab6:	492a      	ldr	r1, [pc, #168]	; (800fb60 <_strtod_l+0x5b0>)
 800fab8:	428b      	cmp	r3, r1
 800faba:	4682      	mov	sl, r0
 800fabc:	d8bc      	bhi.n	800fa38 <_strtod_l+0x488>
 800fabe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fac2:	428b      	cmp	r3, r1
 800fac4:	bf86      	itte	hi
 800fac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fb64 <_strtod_l+0x5b4>
 800faca:	f04f 3aff 	movhi.w	sl, #4294967295
 800face:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fad2:	2300      	movs	r3, #0
 800fad4:	9304      	str	r3, [sp, #16]
 800fad6:	e084      	b.n	800fbe2 <_strtod_l+0x632>
 800fad8:	f018 0f01 	tst.w	r8, #1
 800fadc:	d005      	beq.n	800faea <_strtod_l+0x53a>
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	f7f0 fda8 	bl	8000638 <__aeabi_dmul>
 800fae8:	2301      	movs	r3, #1
 800faea:	9a04      	ldr	r2, [sp, #16]
 800faec:	3208      	adds	r2, #8
 800faee:	f109 0901 	add.w	r9, r9, #1
 800faf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800faf6:	9204      	str	r2, [sp, #16]
 800faf8:	e7c9      	b.n	800fa8e <_strtod_l+0x4de>
 800fafa:	d0ea      	beq.n	800fad2 <_strtod_l+0x522>
 800fafc:	f1c8 0800 	rsb	r8, r8, #0
 800fb00:	f018 020f 	ands.w	r2, r8, #15
 800fb04:	d00a      	beq.n	800fb1c <_strtod_l+0x56c>
 800fb06:	4b13      	ldr	r3, [pc, #76]	; (800fb54 <_strtod_l+0x5a4>)
 800fb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb0c:	4650      	mov	r0, sl
 800fb0e:	4659      	mov	r1, fp
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	f7f0 feba 	bl	800088c <__aeabi_ddiv>
 800fb18:	4682      	mov	sl, r0
 800fb1a:	468b      	mov	fp, r1
 800fb1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fb20:	d0d7      	beq.n	800fad2 <_strtod_l+0x522>
 800fb22:	f1b8 0f1f 	cmp.w	r8, #31
 800fb26:	dd1f      	ble.n	800fb68 <_strtod_l+0x5b8>
 800fb28:	2500      	movs	r5, #0
 800fb2a:	462e      	mov	r6, r5
 800fb2c:	9507      	str	r5, [sp, #28]
 800fb2e:	9505      	str	r5, [sp, #20]
 800fb30:	2322      	movs	r3, #34	; 0x22
 800fb32:	f04f 0a00 	mov.w	sl, #0
 800fb36:	f04f 0b00 	mov.w	fp, #0
 800fb3a:	6023      	str	r3, [r4, #0]
 800fb3c:	e786      	b.n	800fa4c <_strtod_l+0x49c>
 800fb3e:	bf00      	nop
 800fb40:	08013c65 	.word	0x08013c65
 800fb44:	08013ca8 	.word	0x08013ca8
 800fb48:	08013c5d 	.word	0x08013c5d
 800fb4c:	08013dec 	.word	0x08013dec
 800fb50:	08014100 	.word	0x08014100
 800fb54:	08013fe0 	.word	0x08013fe0
 800fb58:	08013fb8 	.word	0x08013fb8
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	7ca00000 	.word	0x7ca00000
 800fb64:	7fefffff 	.word	0x7fefffff
 800fb68:	f018 0310 	ands.w	r3, r8, #16
 800fb6c:	bf18      	it	ne
 800fb6e:	236a      	movne	r3, #106	; 0x6a
 800fb70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ff20 <_strtod_l+0x970>
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	4650      	mov	r0, sl
 800fb78:	4659      	mov	r1, fp
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f018 0f01 	tst.w	r8, #1
 800fb80:	d004      	beq.n	800fb8c <_strtod_l+0x5dc>
 800fb82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fb86:	f7f0 fd57 	bl	8000638 <__aeabi_dmul>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fb90:	f109 0908 	add.w	r9, r9, #8
 800fb94:	d1f2      	bne.n	800fb7c <_strtod_l+0x5cc>
 800fb96:	b10b      	cbz	r3, 800fb9c <_strtod_l+0x5ec>
 800fb98:	4682      	mov	sl, r0
 800fb9a:	468b      	mov	fp, r1
 800fb9c:	9b04      	ldr	r3, [sp, #16]
 800fb9e:	b1c3      	cbz	r3, 800fbd2 <_strtod_l+0x622>
 800fba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	4659      	mov	r1, fp
 800fbac:	dd11      	ble.n	800fbd2 <_strtod_l+0x622>
 800fbae:	2b1f      	cmp	r3, #31
 800fbb0:	f340 8124 	ble.w	800fdfc <_strtod_l+0x84c>
 800fbb4:	2b34      	cmp	r3, #52	; 0x34
 800fbb6:	bfde      	ittt	le
 800fbb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fbbc:	f04f 33ff 	movle.w	r3, #4294967295
 800fbc0:	fa03 f202 	lslle.w	r2, r3, r2
 800fbc4:	f04f 0a00 	mov.w	sl, #0
 800fbc8:	bfcc      	ite	gt
 800fbca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fbce:	ea02 0b01 	andle.w	fp, r2, r1
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4650      	mov	r0, sl
 800fbd8:	4659      	mov	r1, fp
 800fbda:	f7f0 ff95 	bl	8000b08 <__aeabi_dcmpeq>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d1a2      	bne.n	800fb28 <_strtod_l+0x578>
 800fbe2:	9b07      	ldr	r3, [sp, #28]
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	9908      	ldr	r1, [sp, #32]
 800fbe8:	462b      	mov	r3, r5
 800fbea:	463a      	mov	r2, r7
 800fbec:	4620      	mov	r0, r4
 800fbee:	f002 f92b 	bl	8011e48 <__s2b>
 800fbf2:	9007      	str	r0, [sp, #28]
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f43f af1f 	beq.w	800fa38 <_strtod_l+0x488>
 800fbfa:	9b05      	ldr	r3, [sp, #20]
 800fbfc:	1b9e      	subs	r6, r3, r6
 800fbfe:	9b06      	ldr	r3, [sp, #24]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	bfb4      	ite	lt
 800fc04:	4633      	movlt	r3, r6
 800fc06:	2300      	movge	r3, #0
 800fc08:	930c      	str	r3, [sp, #48]	; 0x30
 800fc0a:	9b06      	ldr	r3, [sp, #24]
 800fc0c:	2500      	movs	r5, #0
 800fc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc12:	9312      	str	r3, [sp, #72]	; 0x48
 800fc14:	462e      	mov	r6, r5
 800fc16:	9b07      	ldr	r3, [sp, #28]
 800fc18:	4620      	mov	r0, r4
 800fc1a:	6859      	ldr	r1, [r3, #4]
 800fc1c:	f002 f86c 	bl	8011cf8 <_Balloc>
 800fc20:	9005      	str	r0, [sp, #20]
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f43f af0c 	beq.w	800fa40 <_strtod_l+0x490>
 800fc28:	9b07      	ldr	r3, [sp, #28]
 800fc2a:	691a      	ldr	r2, [r3, #16]
 800fc2c:	3202      	adds	r2, #2
 800fc2e:	f103 010c 	add.w	r1, r3, #12
 800fc32:	0092      	lsls	r2, r2, #2
 800fc34:	300c      	adds	r0, #12
 800fc36:	f002 f851 	bl	8011cdc <memcpy>
 800fc3a:	ec4b ab10 	vmov	d0, sl, fp
 800fc3e:	aa1a      	add	r2, sp, #104	; 0x68
 800fc40:	a919      	add	r1, sp, #100	; 0x64
 800fc42:	4620      	mov	r0, r4
 800fc44:	f002 fc46 	bl	80124d4 <__d2b>
 800fc48:	ec4b ab18 	vmov	d8, sl, fp
 800fc4c:	9018      	str	r0, [sp, #96]	; 0x60
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f43f aef6 	beq.w	800fa40 <_strtod_l+0x490>
 800fc54:	2101      	movs	r1, #1
 800fc56:	4620      	mov	r0, r4
 800fc58:	f002 f990 	bl	8011f7c <__i2b>
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	f43f aeee 	beq.w	800fa40 <_strtod_l+0x490>
 800fc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc66:	9904      	ldr	r1, [sp, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bfab      	itete	ge
 800fc6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fc6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fc70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fc72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fc76:	bfac      	ite	ge
 800fc78:	eb03 0902 	addge.w	r9, r3, r2
 800fc7c:	1ad7      	sublt	r7, r2, r3
 800fc7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc80:	eba3 0801 	sub.w	r8, r3, r1
 800fc84:	4490      	add	r8, r2
 800fc86:	4ba1      	ldr	r3, [pc, #644]	; (800ff0c <_strtod_l+0x95c>)
 800fc88:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc8c:	4598      	cmp	r8, r3
 800fc8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc92:	f280 80c7 	bge.w	800fe24 <_strtod_l+0x874>
 800fc96:	eba3 0308 	sub.w	r3, r3, r8
 800fc9a:	2b1f      	cmp	r3, #31
 800fc9c:	eba2 0203 	sub.w	r2, r2, r3
 800fca0:	f04f 0101 	mov.w	r1, #1
 800fca4:	f300 80b1 	bgt.w	800fe0a <_strtod_l+0x85a>
 800fca8:	fa01 f303 	lsl.w	r3, r1, r3
 800fcac:	930d      	str	r3, [sp, #52]	; 0x34
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9308      	str	r3, [sp, #32]
 800fcb2:	eb09 0802 	add.w	r8, r9, r2
 800fcb6:	9b04      	ldr	r3, [sp, #16]
 800fcb8:	45c1      	cmp	r9, r8
 800fcba:	4417      	add	r7, r2
 800fcbc:	441f      	add	r7, r3
 800fcbe:	464b      	mov	r3, r9
 800fcc0:	bfa8      	it	ge
 800fcc2:	4643      	movge	r3, r8
 800fcc4:	42bb      	cmp	r3, r7
 800fcc6:	bfa8      	it	ge
 800fcc8:	463b      	movge	r3, r7
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	bfc2      	ittt	gt
 800fcce:	eba8 0803 	subgt.w	r8, r8, r3
 800fcd2:	1aff      	subgt	r7, r7, r3
 800fcd4:	eba9 0903 	subgt.w	r9, r9, r3
 800fcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	dd17      	ble.n	800fd0e <_strtod_l+0x75e>
 800fcde:	4631      	mov	r1, r6
 800fce0:	461a      	mov	r2, r3
 800fce2:	4620      	mov	r0, r4
 800fce4:	f002 fa0a 	bl	80120fc <__pow5mult>
 800fce8:	4606      	mov	r6, r0
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f43f aea8 	beq.w	800fa40 <_strtod_l+0x490>
 800fcf0:	4601      	mov	r1, r0
 800fcf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f002 f957 	bl	8011fa8 <__multiply>
 800fcfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f43f ae9f 	beq.w	800fa40 <_strtod_l+0x490>
 800fd02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd04:	4620      	mov	r0, r4
 800fd06:	f002 f837 	bl	8011d78 <_Bfree>
 800fd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd0c:	9318      	str	r3, [sp, #96]	; 0x60
 800fd0e:	f1b8 0f00 	cmp.w	r8, #0
 800fd12:	f300 808c 	bgt.w	800fe2e <_strtod_l+0x87e>
 800fd16:	9b06      	ldr	r3, [sp, #24]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd08      	ble.n	800fd2e <_strtod_l+0x77e>
 800fd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd1e:	9905      	ldr	r1, [sp, #20]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f002 f9eb 	bl	80120fc <__pow5mult>
 800fd26:	9005      	str	r0, [sp, #20]
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	f43f ae89 	beq.w	800fa40 <_strtod_l+0x490>
 800fd2e:	2f00      	cmp	r7, #0
 800fd30:	dd08      	ble.n	800fd44 <_strtod_l+0x794>
 800fd32:	9905      	ldr	r1, [sp, #20]
 800fd34:	463a      	mov	r2, r7
 800fd36:	4620      	mov	r0, r4
 800fd38:	f002 fa3a 	bl	80121b0 <__lshift>
 800fd3c:	9005      	str	r0, [sp, #20]
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f ae7e 	beq.w	800fa40 <_strtod_l+0x490>
 800fd44:	f1b9 0f00 	cmp.w	r9, #0
 800fd48:	dd08      	ble.n	800fd5c <_strtod_l+0x7ac>
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	464a      	mov	r2, r9
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f002 fa2e 	bl	80121b0 <__lshift>
 800fd54:	4606      	mov	r6, r0
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f43f ae72 	beq.w	800fa40 <_strtod_l+0x490>
 800fd5c:	9a05      	ldr	r2, [sp, #20]
 800fd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd60:	4620      	mov	r0, r4
 800fd62:	f002 fab1 	bl	80122c8 <__mdiff>
 800fd66:	4605      	mov	r5, r0
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f43f ae69 	beq.w	800fa40 <_strtod_l+0x490>
 800fd6e:	68c3      	ldr	r3, [r0, #12]
 800fd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd72:	2300      	movs	r3, #0
 800fd74:	60c3      	str	r3, [r0, #12]
 800fd76:	4631      	mov	r1, r6
 800fd78:	f002 fa8a 	bl	8012290 <__mcmp>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	da60      	bge.n	800fe42 <_strtod_l+0x892>
 800fd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd82:	ea53 030a 	orrs.w	r3, r3, sl
 800fd86:	f040 8082 	bne.w	800fe8e <_strtod_l+0x8de>
 800fd8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d17d      	bne.n	800fe8e <_strtod_l+0x8de>
 800fd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd96:	0d1b      	lsrs	r3, r3, #20
 800fd98:	051b      	lsls	r3, r3, #20
 800fd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd9e:	d976      	bls.n	800fe8e <_strtod_l+0x8de>
 800fda0:	696b      	ldr	r3, [r5, #20]
 800fda2:	b913      	cbnz	r3, 800fdaa <_strtod_l+0x7fa>
 800fda4:	692b      	ldr	r3, [r5, #16]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	dd71      	ble.n	800fe8e <_strtod_l+0x8de>
 800fdaa:	4629      	mov	r1, r5
 800fdac:	2201      	movs	r2, #1
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f002 f9fe 	bl	80121b0 <__lshift>
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	f002 fa6a 	bl	8012290 <__mcmp>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	dd66      	ble.n	800fe8e <_strtod_l+0x8de>
 800fdc0:	9904      	ldr	r1, [sp, #16]
 800fdc2:	4a53      	ldr	r2, [pc, #332]	; (800ff10 <_strtod_l+0x960>)
 800fdc4:	465b      	mov	r3, fp
 800fdc6:	2900      	cmp	r1, #0
 800fdc8:	f000 8081 	beq.w	800fece <_strtod_l+0x91e>
 800fdcc:	ea02 010b 	and.w	r1, r2, fp
 800fdd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fdd4:	dc7b      	bgt.n	800fece <_strtod_l+0x91e>
 800fdd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fdda:	f77f aea9 	ble.w	800fb30 <_strtod_l+0x580>
 800fdde:	4b4d      	ldr	r3, [pc, #308]	; (800ff14 <_strtod_l+0x964>)
 800fde0:	4650      	mov	r0, sl
 800fde2:	4659      	mov	r1, fp
 800fde4:	2200      	movs	r2, #0
 800fde6:	f7f0 fc27 	bl	8000638 <__aeabi_dmul>
 800fdea:	460b      	mov	r3, r1
 800fdec:	4303      	orrs	r3, r0
 800fdee:	bf08      	it	eq
 800fdf0:	2322      	moveq	r3, #34	; 0x22
 800fdf2:	4682      	mov	sl, r0
 800fdf4:	468b      	mov	fp, r1
 800fdf6:	bf08      	it	eq
 800fdf8:	6023      	streq	r3, [r4, #0]
 800fdfa:	e62b      	b.n	800fa54 <_strtod_l+0x4a4>
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fe00:	fa02 f303 	lsl.w	r3, r2, r3
 800fe04:	ea03 0a0a 	and.w	sl, r3, sl
 800fe08:	e6e3      	b.n	800fbd2 <_strtod_l+0x622>
 800fe0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fe0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fe12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fe16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fe1a:	fa01 f308 	lsl.w	r3, r1, r8
 800fe1e:	9308      	str	r3, [sp, #32]
 800fe20:	910d      	str	r1, [sp, #52]	; 0x34
 800fe22:	e746      	b.n	800fcb2 <_strtod_l+0x702>
 800fe24:	2300      	movs	r3, #0
 800fe26:	9308      	str	r3, [sp, #32]
 800fe28:	2301      	movs	r3, #1
 800fe2a:	930d      	str	r3, [sp, #52]	; 0x34
 800fe2c:	e741      	b.n	800fcb2 <_strtod_l+0x702>
 800fe2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe30:	4642      	mov	r2, r8
 800fe32:	4620      	mov	r0, r4
 800fe34:	f002 f9bc 	bl	80121b0 <__lshift>
 800fe38:	9018      	str	r0, [sp, #96]	; 0x60
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	f47f af6b 	bne.w	800fd16 <_strtod_l+0x766>
 800fe40:	e5fe      	b.n	800fa40 <_strtod_l+0x490>
 800fe42:	465f      	mov	r7, fp
 800fe44:	d16e      	bne.n	800ff24 <_strtod_l+0x974>
 800fe46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe4c:	b342      	cbz	r2, 800fea0 <_strtod_l+0x8f0>
 800fe4e:	4a32      	ldr	r2, [pc, #200]	; (800ff18 <_strtod_l+0x968>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d128      	bne.n	800fea6 <_strtod_l+0x8f6>
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	4651      	mov	r1, sl
 800fe58:	b1eb      	cbz	r3, 800fe96 <_strtod_l+0x8e6>
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <_strtod_l+0x960>)
 800fe5c:	403b      	ands	r3, r7
 800fe5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe62:	f04f 32ff 	mov.w	r2, #4294967295
 800fe66:	d819      	bhi.n	800fe9c <_strtod_l+0x8ec>
 800fe68:	0d1b      	lsrs	r3, r3, #20
 800fe6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	4299      	cmp	r1, r3
 800fe74:	d117      	bne.n	800fea6 <_strtod_l+0x8f6>
 800fe76:	4b29      	ldr	r3, [pc, #164]	; (800ff1c <_strtod_l+0x96c>)
 800fe78:	429f      	cmp	r7, r3
 800fe7a:	d102      	bne.n	800fe82 <_strtod_l+0x8d2>
 800fe7c:	3101      	adds	r1, #1
 800fe7e:	f43f addf 	beq.w	800fa40 <_strtod_l+0x490>
 800fe82:	4b23      	ldr	r3, [pc, #140]	; (800ff10 <_strtod_l+0x960>)
 800fe84:	403b      	ands	r3, r7
 800fe86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fe8a:	f04f 0a00 	mov.w	sl, #0
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1a4      	bne.n	800fdde <_strtod_l+0x82e>
 800fe94:	e5de      	b.n	800fa54 <_strtod_l+0x4a4>
 800fe96:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9a:	e7ea      	b.n	800fe72 <_strtod_l+0x8c2>
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	e7e8      	b.n	800fe72 <_strtod_l+0x8c2>
 800fea0:	ea53 030a 	orrs.w	r3, r3, sl
 800fea4:	d08c      	beq.n	800fdc0 <_strtod_l+0x810>
 800fea6:	9b08      	ldr	r3, [sp, #32]
 800fea8:	b1db      	cbz	r3, 800fee2 <_strtod_l+0x932>
 800feaa:	423b      	tst	r3, r7
 800feac:	d0ef      	beq.n	800fe8e <_strtod_l+0x8de>
 800feae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb0:	9a04      	ldr	r2, [sp, #16]
 800feb2:	4650      	mov	r0, sl
 800feb4:	4659      	mov	r1, fp
 800feb6:	b1c3      	cbz	r3, 800feea <_strtod_l+0x93a>
 800feb8:	f7ff fb5c 	bl	800f574 <sulp>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	ec51 0b18 	vmov	r0, r1, d8
 800fec4:	f7f0 fa02 	bl	80002cc <__adddf3>
 800fec8:	4682      	mov	sl, r0
 800feca:	468b      	mov	fp, r1
 800fecc:	e7df      	b.n	800fe8e <_strtod_l+0x8de>
 800fece:	4013      	ands	r3, r2
 800fed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fed4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fedc:	f04f 3aff 	mov.w	sl, #4294967295
 800fee0:	e7d5      	b.n	800fe8e <_strtod_l+0x8de>
 800fee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee4:	ea13 0f0a 	tst.w	r3, sl
 800fee8:	e7e0      	b.n	800feac <_strtod_l+0x8fc>
 800feea:	f7ff fb43 	bl	800f574 <sulp>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	ec51 0b18 	vmov	r0, r1, d8
 800fef6:	f7f0 f9e7 	bl	80002c8 <__aeabi_dsub>
 800fefa:	2200      	movs	r2, #0
 800fefc:	2300      	movs	r3, #0
 800fefe:	4682      	mov	sl, r0
 800ff00:	468b      	mov	fp, r1
 800ff02:	f7f0 fe01 	bl	8000b08 <__aeabi_dcmpeq>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d0c1      	beq.n	800fe8e <_strtod_l+0x8de>
 800ff0a:	e611      	b.n	800fb30 <_strtod_l+0x580>
 800ff0c:	fffffc02 	.word	0xfffffc02
 800ff10:	7ff00000 	.word	0x7ff00000
 800ff14:	39500000 	.word	0x39500000
 800ff18:	000fffff 	.word	0x000fffff
 800ff1c:	7fefffff 	.word	0x7fefffff
 800ff20:	08013cc0 	.word	0x08013cc0
 800ff24:	4631      	mov	r1, r6
 800ff26:	4628      	mov	r0, r5
 800ff28:	f002 fb30 	bl	801258c <__ratio>
 800ff2c:	ec59 8b10 	vmov	r8, r9, d0
 800ff30:	ee10 0a10 	vmov	r0, s0
 800ff34:	2200      	movs	r2, #0
 800ff36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	f7f0 fdf8 	bl	8000b30 <__aeabi_dcmple>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d07a      	beq.n	801003a <_strtod_l+0xa8a>
 800ff44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d04a      	beq.n	800ffe0 <_strtod_l+0xa30>
 800ff4a:	4b95      	ldr	r3, [pc, #596]	; (80101a0 <_strtod_l+0xbf0>)
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80101a0 <_strtod_l+0xbf0>
 800ff56:	f04f 0800 	mov.w	r8, #0
 800ff5a:	4b92      	ldr	r3, [pc, #584]	; (80101a4 <_strtod_l+0xbf4>)
 800ff5c:	403b      	ands	r3, r7
 800ff5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ff60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff62:	4b91      	ldr	r3, [pc, #580]	; (80101a8 <_strtod_l+0xbf8>)
 800ff64:	429a      	cmp	r2, r3
 800ff66:	f040 80b0 	bne.w	80100ca <_strtod_l+0xb1a>
 800ff6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ff72:	ec4b ab10 	vmov	d0, sl, fp
 800ff76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff7a:	f002 fa2f 	bl	80123dc <__ulp>
 800ff7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff82:	ec53 2b10 	vmov	r2, r3, d0
 800ff86:	f7f0 fb57 	bl	8000638 <__aeabi_dmul>
 800ff8a:	4652      	mov	r2, sl
 800ff8c:	465b      	mov	r3, fp
 800ff8e:	f7f0 f99d 	bl	80002cc <__adddf3>
 800ff92:	460b      	mov	r3, r1
 800ff94:	4983      	ldr	r1, [pc, #524]	; (80101a4 <_strtod_l+0xbf4>)
 800ff96:	4a85      	ldr	r2, [pc, #532]	; (80101ac <_strtod_l+0xbfc>)
 800ff98:	4019      	ands	r1, r3
 800ff9a:	4291      	cmp	r1, r2
 800ff9c:	4682      	mov	sl, r0
 800ff9e:	d960      	bls.n	8010062 <_strtod_l+0xab2>
 800ffa0:	ee18 3a90 	vmov	r3, s17
 800ffa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d104      	bne.n	800ffb6 <_strtod_l+0xa06>
 800ffac:	ee18 3a10 	vmov	r3, s16
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	f43f ad45 	beq.w	800fa40 <_strtod_l+0x490>
 800ffb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80101b8 <_strtod_l+0xc08>
 800ffba:	f04f 3aff 	mov.w	sl, #4294967295
 800ffbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f001 fed9 	bl	8011d78 <_Bfree>
 800ffc6:	9905      	ldr	r1, [sp, #20]
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f001 fed5 	bl	8011d78 <_Bfree>
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f001 fed1 	bl	8011d78 <_Bfree>
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f001 fecd 	bl	8011d78 <_Bfree>
 800ffde:	e61a      	b.n	800fc16 <_strtod_l+0x666>
 800ffe0:	f1ba 0f00 	cmp.w	sl, #0
 800ffe4:	d11b      	bne.n	801001e <_strtod_l+0xa6e>
 800ffe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffea:	b9f3      	cbnz	r3, 801002a <_strtod_l+0xa7a>
 800ffec:	4b6c      	ldr	r3, [pc, #432]	; (80101a0 <_strtod_l+0xbf0>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	4640      	mov	r0, r8
 800fff2:	4649      	mov	r1, r9
 800fff4:	f7f0 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800fff8:	b9d0      	cbnz	r0, 8010030 <_strtod_l+0xa80>
 800fffa:	4640      	mov	r0, r8
 800fffc:	4649      	mov	r1, r9
 800fffe:	4b6c      	ldr	r3, [pc, #432]	; (80101b0 <_strtod_l+0xc00>)
 8010000:	2200      	movs	r2, #0
 8010002:	f7f0 fb19 	bl	8000638 <__aeabi_dmul>
 8010006:	4680      	mov	r8, r0
 8010008:	4689      	mov	r9, r1
 801000a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801000e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010012:	9315      	str	r3, [sp, #84]	; 0x54
 8010014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801001c:	e79d      	b.n	800ff5a <_strtod_l+0x9aa>
 801001e:	f1ba 0f01 	cmp.w	sl, #1
 8010022:	d102      	bne.n	801002a <_strtod_l+0xa7a>
 8010024:	2f00      	cmp	r7, #0
 8010026:	f43f ad83 	beq.w	800fb30 <_strtod_l+0x580>
 801002a:	4b62      	ldr	r3, [pc, #392]	; (80101b4 <_strtod_l+0xc04>)
 801002c:	2200      	movs	r2, #0
 801002e:	e78e      	b.n	800ff4e <_strtod_l+0x99e>
 8010030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80101b0 <_strtod_l+0xc00>
 8010034:	f04f 0800 	mov.w	r8, #0
 8010038:	e7e7      	b.n	801000a <_strtod_l+0xa5a>
 801003a:	4b5d      	ldr	r3, [pc, #372]	; (80101b0 <_strtod_l+0xc00>)
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	2200      	movs	r2, #0
 8010042:	f7f0 faf9 	bl	8000638 <__aeabi_dmul>
 8010046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010048:	4680      	mov	r8, r0
 801004a:	4689      	mov	r9, r1
 801004c:	b933      	cbnz	r3, 801005c <_strtod_l+0xaac>
 801004e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010052:	900e      	str	r0, [sp, #56]	; 0x38
 8010054:	930f      	str	r3, [sp, #60]	; 0x3c
 8010056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801005a:	e7dd      	b.n	8010018 <_strtod_l+0xa68>
 801005c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010060:	e7f9      	b.n	8010056 <_strtod_l+0xaa6>
 8010062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010066:	9b04      	ldr	r3, [sp, #16]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1a8      	bne.n	800ffbe <_strtod_l+0xa0e>
 801006c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010072:	0d1b      	lsrs	r3, r3, #20
 8010074:	051b      	lsls	r3, r3, #20
 8010076:	429a      	cmp	r2, r3
 8010078:	d1a1      	bne.n	800ffbe <_strtod_l+0xa0e>
 801007a:	4640      	mov	r0, r8
 801007c:	4649      	mov	r1, r9
 801007e:	f7f0 fe3b 	bl	8000cf8 <__aeabi_d2lz>
 8010082:	f7f0 faab 	bl	80005dc <__aeabi_l2d>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4640      	mov	r0, r8
 801008c:	4649      	mov	r1, r9
 801008e:	f7f0 f91b 	bl	80002c8 <__aeabi_dsub>
 8010092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010098:	ea43 030a 	orr.w	r3, r3, sl
 801009c:	4313      	orrs	r3, r2
 801009e:	4680      	mov	r8, r0
 80100a0:	4689      	mov	r9, r1
 80100a2:	d055      	beq.n	8010150 <_strtod_l+0xba0>
 80100a4:	a336      	add	r3, pc, #216	; (adr r3, 8010180 <_strtod_l+0xbd0>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	f7f0 fd37 	bl	8000b1c <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f47f acd0 	bne.w	800fa54 <_strtod_l+0x4a4>
 80100b4:	a334      	add	r3, pc, #208	; (adr r3, 8010188 <_strtod_l+0xbd8>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	4640      	mov	r0, r8
 80100bc:	4649      	mov	r1, r9
 80100be:	f7f0 fd4b 	bl	8000b58 <__aeabi_dcmpgt>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f43f af7b 	beq.w	800ffbe <_strtod_l+0xa0e>
 80100c8:	e4c4      	b.n	800fa54 <_strtod_l+0x4a4>
 80100ca:	9b04      	ldr	r3, [sp, #16]
 80100cc:	b333      	cbz	r3, 801011c <_strtod_l+0xb6c>
 80100ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80100d4:	d822      	bhi.n	801011c <_strtod_l+0xb6c>
 80100d6:	a32e      	add	r3, pc, #184	; (adr r3, 8010190 <_strtod_l+0xbe0>)
 80100d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100dc:	4640      	mov	r0, r8
 80100de:	4649      	mov	r1, r9
 80100e0:	f7f0 fd26 	bl	8000b30 <__aeabi_dcmple>
 80100e4:	b1a0      	cbz	r0, 8010110 <_strtod_l+0xb60>
 80100e6:	4649      	mov	r1, r9
 80100e8:	4640      	mov	r0, r8
 80100ea:	f7f0 fd7d 	bl	8000be8 <__aeabi_d2uiz>
 80100ee:	2801      	cmp	r0, #1
 80100f0:	bf38      	it	cc
 80100f2:	2001      	movcc	r0, #1
 80100f4:	f7f0 fa26 	bl	8000544 <__aeabi_ui2d>
 80100f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100fa:	4680      	mov	r8, r0
 80100fc:	4689      	mov	r9, r1
 80100fe:	bb23      	cbnz	r3, 801014a <_strtod_l+0xb9a>
 8010100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010104:	9010      	str	r0, [sp, #64]	; 0x40
 8010106:	9311      	str	r3, [sp, #68]	; 0x44
 8010108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801010c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010118:	1a9b      	subs	r3, r3, r2
 801011a:	9309      	str	r3, [sp, #36]	; 0x24
 801011c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010120:	eeb0 0a48 	vmov.f32	s0, s16
 8010124:	eef0 0a68 	vmov.f32	s1, s17
 8010128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801012c:	f002 f956 	bl	80123dc <__ulp>
 8010130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010134:	ec53 2b10 	vmov	r2, r3, d0
 8010138:	f7f0 fa7e 	bl	8000638 <__aeabi_dmul>
 801013c:	ec53 2b18 	vmov	r2, r3, d8
 8010140:	f7f0 f8c4 	bl	80002cc <__adddf3>
 8010144:	4682      	mov	sl, r0
 8010146:	468b      	mov	fp, r1
 8010148:	e78d      	b.n	8010066 <_strtod_l+0xab6>
 801014a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801014e:	e7db      	b.n	8010108 <_strtod_l+0xb58>
 8010150:	a311      	add	r3, pc, #68	; (adr r3, 8010198 <_strtod_l+0xbe8>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 fce1 	bl	8000b1c <__aeabi_dcmplt>
 801015a:	e7b2      	b.n	80100c2 <_strtod_l+0xb12>
 801015c:	2300      	movs	r3, #0
 801015e:	930a      	str	r3, [sp, #40]	; 0x28
 8010160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	f7ff ba6b 	b.w	800f640 <_strtod_l+0x90>
 801016a:	2a65      	cmp	r2, #101	; 0x65
 801016c:	f43f ab5f 	beq.w	800f82e <_strtod_l+0x27e>
 8010170:	2a45      	cmp	r2, #69	; 0x45
 8010172:	f43f ab5c 	beq.w	800f82e <_strtod_l+0x27e>
 8010176:	2301      	movs	r3, #1
 8010178:	f7ff bb94 	b.w	800f8a4 <_strtod_l+0x2f4>
 801017c:	f3af 8000 	nop.w
 8010180:	94a03595 	.word	0x94a03595
 8010184:	3fdfffff 	.word	0x3fdfffff
 8010188:	35afe535 	.word	0x35afe535
 801018c:	3fe00000 	.word	0x3fe00000
 8010190:	ffc00000 	.word	0xffc00000
 8010194:	41dfffff 	.word	0x41dfffff
 8010198:	94a03595 	.word	0x94a03595
 801019c:	3fcfffff 	.word	0x3fcfffff
 80101a0:	3ff00000 	.word	0x3ff00000
 80101a4:	7ff00000 	.word	0x7ff00000
 80101a8:	7fe00000 	.word	0x7fe00000
 80101ac:	7c9fffff 	.word	0x7c9fffff
 80101b0:	3fe00000 	.word	0x3fe00000
 80101b4:	bff00000 	.word	0xbff00000
 80101b8:	7fefffff 	.word	0x7fefffff

080101bc <_strtod_r>:
 80101bc:	4b01      	ldr	r3, [pc, #4]	; (80101c4 <_strtod_r+0x8>)
 80101be:	f7ff b9f7 	b.w	800f5b0 <_strtod_l>
 80101c2:	bf00      	nop
 80101c4:	200000bc 	.word	0x200000bc

080101c8 <_strtol_l.constprop.0>:
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ce:	d001      	beq.n	80101d4 <_strtol_l.constprop.0+0xc>
 80101d0:	2b24      	cmp	r3, #36	; 0x24
 80101d2:	d906      	bls.n	80101e2 <_strtol_l.constprop.0+0x1a>
 80101d4:	f7fe f8e6 	bl	800e3a4 <__errno>
 80101d8:	2316      	movs	r3, #22
 80101da:	6003      	str	r3, [r0, #0]
 80101dc:	2000      	movs	r0, #0
 80101de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80102c8 <_strtol_l.constprop.0+0x100>
 80101e6:	460d      	mov	r5, r1
 80101e8:	462e      	mov	r6, r5
 80101ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80101f2:	f017 0708 	ands.w	r7, r7, #8
 80101f6:	d1f7      	bne.n	80101e8 <_strtol_l.constprop.0+0x20>
 80101f8:	2c2d      	cmp	r4, #45	; 0x2d
 80101fa:	d132      	bne.n	8010262 <_strtol_l.constprop.0+0x9a>
 80101fc:	782c      	ldrb	r4, [r5, #0]
 80101fe:	2701      	movs	r7, #1
 8010200:	1cb5      	adds	r5, r6, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d05b      	beq.n	80102be <_strtol_l.constprop.0+0xf6>
 8010206:	2b10      	cmp	r3, #16
 8010208:	d109      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 801020a:	2c30      	cmp	r4, #48	; 0x30
 801020c:	d107      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 801020e:	782c      	ldrb	r4, [r5, #0]
 8010210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010214:	2c58      	cmp	r4, #88	; 0x58
 8010216:	d14d      	bne.n	80102b4 <_strtol_l.constprop.0+0xec>
 8010218:	786c      	ldrb	r4, [r5, #1]
 801021a:	2310      	movs	r3, #16
 801021c:	3502      	adds	r5, #2
 801021e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010222:	f108 38ff 	add.w	r8, r8, #4294967295
 8010226:	f04f 0c00 	mov.w	ip, #0
 801022a:	fbb8 f9f3 	udiv	r9, r8, r3
 801022e:	4666      	mov	r6, ip
 8010230:	fb03 8a19 	mls	sl, r3, r9, r8
 8010234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010238:	f1be 0f09 	cmp.w	lr, #9
 801023c:	d816      	bhi.n	801026c <_strtol_l.constprop.0+0xa4>
 801023e:	4674      	mov	r4, lr
 8010240:	42a3      	cmp	r3, r4
 8010242:	dd24      	ble.n	801028e <_strtol_l.constprop.0+0xc6>
 8010244:	f1bc 0f00 	cmp.w	ip, #0
 8010248:	db1e      	blt.n	8010288 <_strtol_l.constprop.0+0xc0>
 801024a:	45b1      	cmp	r9, r6
 801024c:	d31c      	bcc.n	8010288 <_strtol_l.constprop.0+0xc0>
 801024e:	d101      	bne.n	8010254 <_strtol_l.constprop.0+0x8c>
 8010250:	45a2      	cmp	sl, r4
 8010252:	db19      	blt.n	8010288 <_strtol_l.constprop.0+0xc0>
 8010254:	fb06 4603 	mla	r6, r6, r3, r4
 8010258:	f04f 0c01 	mov.w	ip, #1
 801025c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010260:	e7e8      	b.n	8010234 <_strtol_l.constprop.0+0x6c>
 8010262:	2c2b      	cmp	r4, #43	; 0x2b
 8010264:	bf04      	itt	eq
 8010266:	782c      	ldrbeq	r4, [r5, #0]
 8010268:	1cb5      	addeq	r5, r6, #2
 801026a:	e7ca      	b.n	8010202 <_strtol_l.constprop.0+0x3a>
 801026c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010270:	f1be 0f19 	cmp.w	lr, #25
 8010274:	d801      	bhi.n	801027a <_strtol_l.constprop.0+0xb2>
 8010276:	3c37      	subs	r4, #55	; 0x37
 8010278:	e7e2      	b.n	8010240 <_strtol_l.constprop.0+0x78>
 801027a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801027e:	f1be 0f19 	cmp.w	lr, #25
 8010282:	d804      	bhi.n	801028e <_strtol_l.constprop.0+0xc6>
 8010284:	3c57      	subs	r4, #87	; 0x57
 8010286:	e7db      	b.n	8010240 <_strtol_l.constprop.0+0x78>
 8010288:	f04f 3cff 	mov.w	ip, #4294967295
 801028c:	e7e6      	b.n	801025c <_strtol_l.constprop.0+0x94>
 801028e:	f1bc 0f00 	cmp.w	ip, #0
 8010292:	da05      	bge.n	80102a0 <_strtol_l.constprop.0+0xd8>
 8010294:	2322      	movs	r3, #34	; 0x22
 8010296:	6003      	str	r3, [r0, #0]
 8010298:	4646      	mov	r6, r8
 801029a:	b942      	cbnz	r2, 80102ae <_strtol_l.constprop.0+0xe6>
 801029c:	4630      	mov	r0, r6
 801029e:	e79e      	b.n	80101de <_strtol_l.constprop.0+0x16>
 80102a0:	b107      	cbz	r7, 80102a4 <_strtol_l.constprop.0+0xdc>
 80102a2:	4276      	negs	r6, r6
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	d0f9      	beq.n	801029c <_strtol_l.constprop.0+0xd4>
 80102a8:	f1bc 0f00 	cmp.w	ip, #0
 80102ac:	d000      	beq.n	80102b0 <_strtol_l.constprop.0+0xe8>
 80102ae:	1e69      	subs	r1, r5, #1
 80102b0:	6011      	str	r1, [r2, #0]
 80102b2:	e7f3      	b.n	801029c <_strtol_l.constprop.0+0xd4>
 80102b4:	2430      	movs	r4, #48	; 0x30
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1b1      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 80102ba:	2308      	movs	r3, #8
 80102bc:	e7af      	b.n	801021e <_strtol_l.constprop.0+0x56>
 80102be:	2c30      	cmp	r4, #48	; 0x30
 80102c0:	d0a5      	beq.n	801020e <_strtol_l.constprop.0+0x46>
 80102c2:	230a      	movs	r3, #10
 80102c4:	e7ab      	b.n	801021e <_strtol_l.constprop.0+0x56>
 80102c6:	bf00      	nop
 80102c8:	08013ce9 	.word	0x08013ce9

080102cc <_strtol_r>:
 80102cc:	f7ff bf7c 	b.w	80101c8 <_strtol_l.constprop.0>

080102d0 <_vsiprintf_r>:
 80102d0:	b500      	push	{lr}
 80102d2:	b09b      	sub	sp, #108	; 0x6c
 80102d4:	9100      	str	r1, [sp, #0]
 80102d6:	9104      	str	r1, [sp, #16]
 80102d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80102dc:	9105      	str	r1, [sp, #20]
 80102de:	9102      	str	r1, [sp, #8]
 80102e0:	4905      	ldr	r1, [pc, #20]	; (80102f8 <_vsiprintf_r+0x28>)
 80102e2:	9103      	str	r1, [sp, #12]
 80102e4:	4669      	mov	r1, sp
 80102e6:	f002 fb1b 	bl	8012920 <_svfiprintf_r>
 80102ea:	9b00      	ldr	r3, [sp, #0]
 80102ec:	2200      	movs	r2, #0
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	b01b      	add	sp, #108	; 0x6c
 80102f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80102f6:	bf00      	nop
 80102f8:	ffff0208 	.word	0xffff0208

080102fc <vsiprintf>:
 80102fc:	4613      	mov	r3, r2
 80102fe:	460a      	mov	r2, r1
 8010300:	4601      	mov	r1, r0
 8010302:	4802      	ldr	r0, [pc, #8]	; (801030c <vsiprintf+0x10>)
 8010304:	6800      	ldr	r0, [r0, #0]
 8010306:	f7ff bfe3 	b.w	80102d0 <_vsiprintf_r>
 801030a:	bf00      	nop
 801030c:	20000054 	.word	0x20000054

08010310 <__swbuf_r>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	460e      	mov	r6, r1
 8010314:	4614      	mov	r4, r2
 8010316:	4605      	mov	r5, r0
 8010318:	b118      	cbz	r0, 8010322 <__swbuf_r+0x12>
 801031a:	6983      	ldr	r3, [r0, #24]
 801031c:	b90b      	cbnz	r3, 8010322 <__swbuf_r+0x12>
 801031e:	f001 f84b 	bl	80113b8 <__sinit>
 8010322:	4b21      	ldr	r3, [pc, #132]	; (80103a8 <__swbuf_r+0x98>)
 8010324:	429c      	cmp	r4, r3
 8010326:	d12b      	bne.n	8010380 <__swbuf_r+0x70>
 8010328:	686c      	ldr	r4, [r5, #4]
 801032a:	69a3      	ldr	r3, [r4, #24]
 801032c:	60a3      	str	r3, [r4, #8]
 801032e:	89a3      	ldrh	r3, [r4, #12]
 8010330:	071a      	lsls	r2, r3, #28
 8010332:	d52f      	bpl.n	8010394 <__swbuf_r+0x84>
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	b36b      	cbz	r3, 8010394 <__swbuf_r+0x84>
 8010338:	6923      	ldr	r3, [r4, #16]
 801033a:	6820      	ldr	r0, [r4, #0]
 801033c:	1ac0      	subs	r0, r0, r3
 801033e:	6963      	ldr	r3, [r4, #20]
 8010340:	b2f6      	uxtb	r6, r6
 8010342:	4283      	cmp	r3, r0
 8010344:	4637      	mov	r7, r6
 8010346:	dc04      	bgt.n	8010352 <__swbuf_r+0x42>
 8010348:	4621      	mov	r1, r4
 801034a:	4628      	mov	r0, r5
 801034c:	f000 ffa0 	bl	8011290 <_fflush_r>
 8010350:	bb30      	cbnz	r0, 80103a0 <__swbuf_r+0x90>
 8010352:	68a3      	ldr	r3, [r4, #8]
 8010354:	3b01      	subs	r3, #1
 8010356:	60a3      	str	r3, [r4, #8]
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	6022      	str	r2, [r4, #0]
 801035e:	701e      	strb	r6, [r3, #0]
 8010360:	6963      	ldr	r3, [r4, #20]
 8010362:	3001      	adds	r0, #1
 8010364:	4283      	cmp	r3, r0
 8010366:	d004      	beq.n	8010372 <__swbuf_r+0x62>
 8010368:	89a3      	ldrh	r3, [r4, #12]
 801036a:	07db      	lsls	r3, r3, #31
 801036c:	d506      	bpl.n	801037c <__swbuf_r+0x6c>
 801036e:	2e0a      	cmp	r6, #10
 8010370:	d104      	bne.n	801037c <__swbuf_r+0x6c>
 8010372:	4621      	mov	r1, r4
 8010374:	4628      	mov	r0, r5
 8010376:	f000 ff8b 	bl	8011290 <_fflush_r>
 801037a:	b988      	cbnz	r0, 80103a0 <__swbuf_r+0x90>
 801037c:	4638      	mov	r0, r7
 801037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010380:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <__swbuf_r+0x9c>)
 8010382:	429c      	cmp	r4, r3
 8010384:	d101      	bne.n	801038a <__swbuf_r+0x7a>
 8010386:	68ac      	ldr	r4, [r5, #8]
 8010388:	e7cf      	b.n	801032a <__swbuf_r+0x1a>
 801038a:	4b09      	ldr	r3, [pc, #36]	; (80103b0 <__swbuf_r+0xa0>)
 801038c:	429c      	cmp	r4, r3
 801038e:	bf08      	it	eq
 8010390:	68ec      	ldreq	r4, [r5, #12]
 8010392:	e7ca      	b.n	801032a <__swbuf_r+0x1a>
 8010394:	4621      	mov	r1, r4
 8010396:	4628      	mov	r0, r5
 8010398:	f000 f80c 	bl	80103b4 <__swsetup_r>
 801039c:	2800      	cmp	r0, #0
 801039e:	d0cb      	beq.n	8010338 <__swbuf_r+0x28>
 80103a0:	f04f 37ff 	mov.w	r7, #4294967295
 80103a4:	e7ea      	b.n	801037c <__swbuf_r+0x6c>
 80103a6:	bf00      	nop
 80103a8:	08013e9c 	.word	0x08013e9c
 80103ac:	08013ebc 	.word	0x08013ebc
 80103b0:	08013e7c 	.word	0x08013e7c

080103b4 <__swsetup_r>:
 80103b4:	4b32      	ldr	r3, [pc, #200]	; (8010480 <__swsetup_r+0xcc>)
 80103b6:	b570      	push	{r4, r5, r6, lr}
 80103b8:	681d      	ldr	r5, [r3, #0]
 80103ba:	4606      	mov	r6, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	b125      	cbz	r5, 80103ca <__swsetup_r+0x16>
 80103c0:	69ab      	ldr	r3, [r5, #24]
 80103c2:	b913      	cbnz	r3, 80103ca <__swsetup_r+0x16>
 80103c4:	4628      	mov	r0, r5
 80103c6:	f000 fff7 	bl	80113b8 <__sinit>
 80103ca:	4b2e      	ldr	r3, [pc, #184]	; (8010484 <__swsetup_r+0xd0>)
 80103cc:	429c      	cmp	r4, r3
 80103ce:	d10f      	bne.n	80103f0 <__swsetup_r+0x3c>
 80103d0:	686c      	ldr	r4, [r5, #4]
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103d8:	0719      	lsls	r1, r3, #28
 80103da:	d42c      	bmi.n	8010436 <__swsetup_r+0x82>
 80103dc:	06dd      	lsls	r5, r3, #27
 80103de:	d411      	bmi.n	8010404 <__swsetup_r+0x50>
 80103e0:	2309      	movs	r3, #9
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103e8:	81a3      	strh	r3, [r4, #12]
 80103ea:	f04f 30ff 	mov.w	r0, #4294967295
 80103ee:	e03e      	b.n	801046e <__swsetup_r+0xba>
 80103f0:	4b25      	ldr	r3, [pc, #148]	; (8010488 <__swsetup_r+0xd4>)
 80103f2:	429c      	cmp	r4, r3
 80103f4:	d101      	bne.n	80103fa <__swsetup_r+0x46>
 80103f6:	68ac      	ldr	r4, [r5, #8]
 80103f8:	e7eb      	b.n	80103d2 <__swsetup_r+0x1e>
 80103fa:	4b24      	ldr	r3, [pc, #144]	; (801048c <__swsetup_r+0xd8>)
 80103fc:	429c      	cmp	r4, r3
 80103fe:	bf08      	it	eq
 8010400:	68ec      	ldreq	r4, [r5, #12]
 8010402:	e7e6      	b.n	80103d2 <__swsetup_r+0x1e>
 8010404:	0758      	lsls	r0, r3, #29
 8010406:	d512      	bpl.n	801042e <__swsetup_r+0x7a>
 8010408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801040a:	b141      	cbz	r1, 801041e <__swsetup_r+0x6a>
 801040c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010410:	4299      	cmp	r1, r3
 8010412:	d002      	beq.n	801041a <__swsetup_r+0x66>
 8010414:	4630      	mov	r0, r6
 8010416:	f002 f947 	bl	80126a8 <_free_r>
 801041a:	2300      	movs	r3, #0
 801041c:	6363      	str	r3, [r4, #52]	; 0x34
 801041e:	89a3      	ldrh	r3, [r4, #12]
 8010420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010424:	81a3      	strh	r3, [r4, #12]
 8010426:	2300      	movs	r3, #0
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f043 0308 	orr.w	r3, r3, #8
 8010434:	81a3      	strh	r3, [r4, #12]
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	b94b      	cbnz	r3, 801044e <__swsetup_r+0x9a>
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010444:	d003      	beq.n	801044e <__swsetup_r+0x9a>
 8010446:	4621      	mov	r1, r4
 8010448:	4630      	mov	r0, r6
 801044a:	f001 fbed 	bl	8011c28 <__smakebuf_r>
 801044e:	89a0      	ldrh	r0, [r4, #12]
 8010450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010454:	f010 0301 	ands.w	r3, r0, #1
 8010458:	d00a      	beq.n	8010470 <__swsetup_r+0xbc>
 801045a:	2300      	movs	r3, #0
 801045c:	60a3      	str	r3, [r4, #8]
 801045e:	6963      	ldr	r3, [r4, #20]
 8010460:	425b      	negs	r3, r3
 8010462:	61a3      	str	r3, [r4, #24]
 8010464:	6923      	ldr	r3, [r4, #16]
 8010466:	b943      	cbnz	r3, 801047a <__swsetup_r+0xc6>
 8010468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801046c:	d1ba      	bne.n	80103e4 <__swsetup_r+0x30>
 801046e:	bd70      	pop	{r4, r5, r6, pc}
 8010470:	0781      	lsls	r1, r0, #30
 8010472:	bf58      	it	pl
 8010474:	6963      	ldrpl	r3, [r4, #20]
 8010476:	60a3      	str	r3, [r4, #8]
 8010478:	e7f4      	b.n	8010464 <__swsetup_r+0xb0>
 801047a:	2000      	movs	r0, #0
 801047c:	e7f7      	b.n	801046e <__swsetup_r+0xba>
 801047e:	bf00      	nop
 8010480:	20000054 	.word	0x20000054
 8010484:	08013e9c 	.word	0x08013e9c
 8010488:	08013ebc 	.word	0x08013ebc
 801048c:	08013e7c 	.word	0x08013e7c

08010490 <quorem>:
 8010490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	6903      	ldr	r3, [r0, #16]
 8010496:	690c      	ldr	r4, [r1, #16]
 8010498:	42a3      	cmp	r3, r4
 801049a:	4607      	mov	r7, r0
 801049c:	f2c0 8081 	blt.w	80105a2 <quorem+0x112>
 80104a0:	3c01      	subs	r4, #1
 80104a2:	f101 0814 	add.w	r8, r1, #20
 80104a6:	f100 0514 	add.w	r5, r0, #20
 80104aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104ae:	9301      	str	r3, [sp, #4]
 80104b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104b8:	3301      	adds	r3, #1
 80104ba:	429a      	cmp	r2, r3
 80104bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80104c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80104c8:	d331      	bcc.n	801052e <quorem+0x9e>
 80104ca:	f04f 0e00 	mov.w	lr, #0
 80104ce:	4640      	mov	r0, r8
 80104d0:	46ac      	mov	ip, r5
 80104d2:	46f2      	mov	sl, lr
 80104d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80104d8:	b293      	uxth	r3, r2
 80104da:	fb06 e303 	mla	r3, r6, r3, lr
 80104de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	ebaa 0303 	sub.w	r3, sl, r3
 80104e8:	f8dc a000 	ldr.w	sl, [ip]
 80104ec:	0c12      	lsrs	r2, r2, #16
 80104ee:	fa13 f38a 	uxtah	r3, r3, sl
 80104f2:	fb06 e202 	mla	r2, r6, r2, lr
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	9b00      	ldr	r3, [sp, #0]
 80104fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104fe:	b292      	uxth	r2, r2
 8010500:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010508:	f8bd 3000 	ldrh.w	r3, [sp]
 801050c:	4581      	cmp	r9, r0
 801050e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010512:	f84c 3b04 	str.w	r3, [ip], #4
 8010516:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801051a:	d2db      	bcs.n	80104d4 <quorem+0x44>
 801051c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010520:	b92b      	cbnz	r3, 801052e <quorem+0x9e>
 8010522:	9b01      	ldr	r3, [sp, #4]
 8010524:	3b04      	subs	r3, #4
 8010526:	429d      	cmp	r5, r3
 8010528:	461a      	mov	r2, r3
 801052a:	d32e      	bcc.n	801058a <quorem+0xfa>
 801052c:	613c      	str	r4, [r7, #16]
 801052e:	4638      	mov	r0, r7
 8010530:	f001 feae 	bl	8012290 <__mcmp>
 8010534:	2800      	cmp	r0, #0
 8010536:	db24      	blt.n	8010582 <quorem+0xf2>
 8010538:	3601      	adds	r6, #1
 801053a:	4628      	mov	r0, r5
 801053c:	f04f 0c00 	mov.w	ip, #0
 8010540:	f858 2b04 	ldr.w	r2, [r8], #4
 8010544:	f8d0 e000 	ldr.w	lr, [r0]
 8010548:	b293      	uxth	r3, r2
 801054a:	ebac 0303 	sub.w	r3, ip, r3
 801054e:	0c12      	lsrs	r2, r2, #16
 8010550:	fa13 f38e 	uxtah	r3, r3, lr
 8010554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801055c:	b29b      	uxth	r3, r3
 801055e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010562:	45c1      	cmp	r9, r8
 8010564:	f840 3b04 	str.w	r3, [r0], #4
 8010568:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801056c:	d2e8      	bcs.n	8010540 <quorem+0xb0>
 801056e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010576:	b922      	cbnz	r2, 8010582 <quorem+0xf2>
 8010578:	3b04      	subs	r3, #4
 801057a:	429d      	cmp	r5, r3
 801057c:	461a      	mov	r2, r3
 801057e:	d30a      	bcc.n	8010596 <quorem+0x106>
 8010580:	613c      	str	r4, [r7, #16]
 8010582:	4630      	mov	r0, r6
 8010584:	b003      	add	sp, #12
 8010586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058a:	6812      	ldr	r2, [r2, #0]
 801058c:	3b04      	subs	r3, #4
 801058e:	2a00      	cmp	r2, #0
 8010590:	d1cc      	bne.n	801052c <quorem+0x9c>
 8010592:	3c01      	subs	r4, #1
 8010594:	e7c7      	b.n	8010526 <quorem+0x96>
 8010596:	6812      	ldr	r2, [r2, #0]
 8010598:	3b04      	subs	r3, #4
 801059a:	2a00      	cmp	r2, #0
 801059c:	d1f0      	bne.n	8010580 <quorem+0xf0>
 801059e:	3c01      	subs	r4, #1
 80105a0:	e7eb      	b.n	801057a <quorem+0xea>
 80105a2:	2000      	movs	r0, #0
 80105a4:	e7ee      	b.n	8010584 <quorem+0xf4>
	...

080105a8 <_dtoa_r>:
 80105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	ed2d 8b04 	vpush	{d8-d9}
 80105b0:	ec57 6b10 	vmov	r6, r7, d0
 80105b4:	b093      	sub	sp, #76	; 0x4c
 80105b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80105b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80105bc:	9106      	str	r1, [sp, #24]
 80105be:	ee10 aa10 	vmov	sl, s0
 80105c2:	4604      	mov	r4, r0
 80105c4:	9209      	str	r2, [sp, #36]	; 0x24
 80105c6:	930c      	str	r3, [sp, #48]	; 0x30
 80105c8:	46bb      	mov	fp, r7
 80105ca:	b975      	cbnz	r5, 80105ea <_dtoa_r+0x42>
 80105cc:	2010      	movs	r0, #16
 80105ce:	f001 fb6b 	bl	8011ca8 <malloc>
 80105d2:	4602      	mov	r2, r0
 80105d4:	6260      	str	r0, [r4, #36]	; 0x24
 80105d6:	b920      	cbnz	r0, 80105e2 <_dtoa_r+0x3a>
 80105d8:	4ba7      	ldr	r3, [pc, #668]	; (8010878 <_dtoa_r+0x2d0>)
 80105da:	21ea      	movs	r1, #234	; 0xea
 80105dc:	48a7      	ldr	r0, [pc, #668]	; (801087c <_dtoa_r+0x2d4>)
 80105de:	f002 fc89 	bl	8012ef4 <__assert_func>
 80105e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80105e6:	6005      	str	r5, [r0, #0]
 80105e8:	60c5      	str	r5, [r0, #12]
 80105ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105ec:	6819      	ldr	r1, [r3, #0]
 80105ee:	b151      	cbz	r1, 8010606 <_dtoa_r+0x5e>
 80105f0:	685a      	ldr	r2, [r3, #4]
 80105f2:	604a      	str	r2, [r1, #4]
 80105f4:	2301      	movs	r3, #1
 80105f6:	4093      	lsls	r3, r2
 80105f8:	608b      	str	r3, [r1, #8]
 80105fa:	4620      	mov	r0, r4
 80105fc:	f001 fbbc 	bl	8011d78 <_Bfree>
 8010600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010602:	2200      	movs	r2, #0
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	1e3b      	subs	r3, r7, #0
 8010608:	bfaa      	itet	ge
 801060a:	2300      	movge	r3, #0
 801060c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010610:	f8c8 3000 	strge.w	r3, [r8]
 8010614:	4b9a      	ldr	r3, [pc, #616]	; (8010880 <_dtoa_r+0x2d8>)
 8010616:	bfbc      	itt	lt
 8010618:	2201      	movlt	r2, #1
 801061a:	f8c8 2000 	strlt.w	r2, [r8]
 801061e:	ea33 030b 	bics.w	r3, r3, fp
 8010622:	d11b      	bne.n	801065c <_dtoa_r+0xb4>
 8010624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010626:	f242 730f 	movw	r3, #9999	; 0x270f
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010630:	4333      	orrs	r3, r6
 8010632:	f000 8592 	beq.w	801115a <_dtoa_r+0xbb2>
 8010636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010638:	b963      	cbnz	r3, 8010654 <_dtoa_r+0xac>
 801063a:	4b92      	ldr	r3, [pc, #584]	; (8010884 <_dtoa_r+0x2dc>)
 801063c:	e022      	b.n	8010684 <_dtoa_r+0xdc>
 801063e:	4b92      	ldr	r3, [pc, #584]	; (8010888 <_dtoa_r+0x2e0>)
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	3308      	adds	r3, #8
 8010644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	9801      	ldr	r0, [sp, #4]
 801064a:	b013      	add	sp, #76	; 0x4c
 801064c:	ecbd 8b04 	vpop	{d8-d9}
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	4b8b      	ldr	r3, [pc, #556]	; (8010884 <_dtoa_r+0x2dc>)
 8010656:	9301      	str	r3, [sp, #4]
 8010658:	3303      	adds	r3, #3
 801065a:	e7f3      	b.n	8010644 <_dtoa_r+0x9c>
 801065c:	2200      	movs	r2, #0
 801065e:	2300      	movs	r3, #0
 8010660:	4650      	mov	r0, sl
 8010662:	4659      	mov	r1, fp
 8010664:	f7f0 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 8010668:	ec4b ab19 	vmov	d9, sl, fp
 801066c:	4680      	mov	r8, r0
 801066e:	b158      	cbz	r0, 8010688 <_dtoa_r+0xe0>
 8010670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010672:	2301      	movs	r3, #1
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 856b 	beq.w	8011154 <_dtoa_r+0xbac>
 801067e:	4883      	ldr	r0, [pc, #524]	; (801088c <_dtoa_r+0x2e4>)
 8010680:	6018      	str	r0, [r3, #0]
 8010682:	1e43      	subs	r3, r0, #1
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	e7df      	b.n	8010648 <_dtoa_r+0xa0>
 8010688:	ec4b ab10 	vmov	d0, sl, fp
 801068c:	aa10      	add	r2, sp, #64	; 0x40
 801068e:	a911      	add	r1, sp, #68	; 0x44
 8010690:	4620      	mov	r0, r4
 8010692:	f001 ff1f 	bl	80124d4 <__d2b>
 8010696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801069a:	ee08 0a10 	vmov	s16, r0
 801069e:	2d00      	cmp	r5, #0
 80106a0:	f000 8084 	beq.w	80107ac <_dtoa_r+0x204>
 80106a4:	ee19 3a90 	vmov	r3, s19
 80106a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80106b0:	4656      	mov	r6, sl
 80106b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80106b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80106ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80106be:	4b74      	ldr	r3, [pc, #464]	; (8010890 <_dtoa_r+0x2e8>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	4630      	mov	r0, r6
 80106c4:	4639      	mov	r1, r7
 80106c6:	f7ef fdff 	bl	80002c8 <__aeabi_dsub>
 80106ca:	a365      	add	r3, pc, #404	; (adr r3, 8010860 <_dtoa_r+0x2b8>)
 80106cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d0:	f7ef ffb2 	bl	8000638 <__aeabi_dmul>
 80106d4:	a364      	add	r3, pc, #400	; (adr r3, 8010868 <_dtoa_r+0x2c0>)
 80106d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106da:	f7ef fdf7 	bl	80002cc <__adddf3>
 80106de:	4606      	mov	r6, r0
 80106e0:	4628      	mov	r0, r5
 80106e2:	460f      	mov	r7, r1
 80106e4:	f7ef ff3e 	bl	8000564 <__aeabi_i2d>
 80106e8:	a361      	add	r3, pc, #388	; (adr r3, 8010870 <_dtoa_r+0x2c8>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7ef ffa3 	bl	8000638 <__aeabi_dmul>
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	4630      	mov	r0, r6
 80106f8:	4639      	mov	r1, r7
 80106fa:	f7ef fde7 	bl	80002cc <__adddf3>
 80106fe:	4606      	mov	r6, r0
 8010700:	460f      	mov	r7, r1
 8010702:	f7f0 fa49 	bl	8000b98 <__aeabi_d2iz>
 8010706:	2200      	movs	r2, #0
 8010708:	9000      	str	r0, [sp, #0]
 801070a:	2300      	movs	r3, #0
 801070c:	4630      	mov	r0, r6
 801070e:	4639      	mov	r1, r7
 8010710:	f7f0 fa04 	bl	8000b1c <__aeabi_dcmplt>
 8010714:	b150      	cbz	r0, 801072c <_dtoa_r+0x184>
 8010716:	9800      	ldr	r0, [sp, #0]
 8010718:	f7ef ff24 	bl	8000564 <__aeabi_i2d>
 801071c:	4632      	mov	r2, r6
 801071e:	463b      	mov	r3, r7
 8010720:	f7f0 f9f2 	bl	8000b08 <__aeabi_dcmpeq>
 8010724:	b910      	cbnz	r0, 801072c <_dtoa_r+0x184>
 8010726:	9b00      	ldr	r3, [sp, #0]
 8010728:	3b01      	subs	r3, #1
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	9b00      	ldr	r3, [sp, #0]
 801072e:	2b16      	cmp	r3, #22
 8010730:	d85a      	bhi.n	80107e8 <_dtoa_r+0x240>
 8010732:	9a00      	ldr	r2, [sp, #0]
 8010734:	4b57      	ldr	r3, [pc, #348]	; (8010894 <_dtoa_r+0x2ec>)
 8010736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	ec51 0b19 	vmov	r0, r1, d9
 8010742:	f7f0 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8010746:	2800      	cmp	r0, #0
 8010748:	d050      	beq.n	80107ec <_dtoa_r+0x244>
 801074a:	9b00      	ldr	r3, [sp, #0]
 801074c:	3b01      	subs	r3, #1
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	2300      	movs	r3, #0
 8010752:	930b      	str	r3, [sp, #44]	; 0x2c
 8010754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010756:	1b5d      	subs	r5, r3, r5
 8010758:	1e6b      	subs	r3, r5, #1
 801075a:	9305      	str	r3, [sp, #20]
 801075c:	bf45      	ittet	mi
 801075e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010762:	9304      	strmi	r3, [sp, #16]
 8010764:	2300      	movpl	r3, #0
 8010766:	2300      	movmi	r3, #0
 8010768:	bf4c      	ite	mi
 801076a:	9305      	strmi	r3, [sp, #20]
 801076c:	9304      	strpl	r3, [sp, #16]
 801076e:	9b00      	ldr	r3, [sp, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	db3d      	blt.n	80107f0 <_dtoa_r+0x248>
 8010774:	9b05      	ldr	r3, [sp, #20]
 8010776:	9a00      	ldr	r2, [sp, #0]
 8010778:	920a      	str	r2, [sp, #40]	; 0x28
 801077a:	4413      	add	r3, r2
 801077c:	9305      	str	r3, [sp, #20]
 801077e:	2300      	movs	r3, #0
 8010780:	9307      	str	r3, [sp, #28]
 8010782:	9b06      	ldr	r3, [sp, #24]
 8010784:	2b09      	cmp	r3, #9
 8010786:	f200 8089 	bhi.w	801089c <_dtoa_r+0x2f4>
 801078a:	2b05      	cmp	r3, #5
 801078c:	bfc4      	itt	gt
 801078e:	3b04      	subgt	r3, #4
 8010790:	9306      	strgt	r3, [sp, #24]
 8010792:	9b06      	ldr	r3, [sp, #24]
 8010794:	f1a3 0302 	sub.w	r3, r3, #2
 8010798:	bfcc      	ite	gt
 801079a:	2500      	movgt	r5, #0
 801079c:	2501      	movle	r5, #1
 801079e:	2b03      	cmp	r3, #3
 80107a0:	f200 8087 	bhi.w	80108b2 <_dtoa_r+0x30a>
 80107a4:	e8df f003 	tbb	[pc, r3]
 80107a8:	59383a2d 	.word	0x59383a2d
 80107ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80107b0:	441d      	add	r5, r3
 80107b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80107b6:	2b20      	cmp	r3, #32
 80107b8:	bfc1      	itttt	gt
 80107ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80107be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80107c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80107c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80107ca:	bfda      	itte	le
 80107cc:	f1c3 0320 	rsble	r3, r3, #32
 80107d0:	fa06 f003 	lslle.w	r0, r6, r3
 80107d4:	4318      	orrgt	r0, r3
 80107d6:	f7ef feb5 	bl	8000544 <__aeabi_ui2d>
 80107da:	2301      	movs	r3, #1
 80107dc:	4606      	mov	r6, r0
 80107de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80107e2:	3d01      	subs	r5, #1
 80107e4:	930e      	str	r3, [sp, #56]	; 0x38
 80107e6:	e76a      	b.n	80106be <_dtoa_r+0x116>
 80107e8:	2301      	movs	r3, #1
 80107ea:	e7b2      	b.n	8010752 <_dtoa_r+0x1aa>
 80107ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80107ee:	e7b1      	b.n	8010754 <_dtoa_r+0x1ac>
 80107f0:	9b04      	ldr	r3, [sp, #16]
 80107f2:	9a00      	ldr	r2, [sp, #0]
 80107f4:	1a9b      	subs	r3, r3, r2
 80107f6:	9304      	str	r3, [sp, #16]
 80107f8:	4253      	negs	r3, r2
 80107fa:	9307      	str	r3, [sp, #28]
 80107fc:	2300      	movs	r3, #0
 80107fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010800:	e7bf      	b.n	8010782 <_dtoa_r+0x1da>
 8010802:	2300      	movs	r3, #0
 8010804:	9308      	str	r3, [sp, #32]
 8010806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010808:	2b00      	cmp	r3, #0
 801080a:	dc55      	bgt.n	80108b8 <_dtoa_r+0x310>
 801080c:	2301      	movs	r3, #1
 801080e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010812:	461a      	mov	r2, r3
 8010814:	9209      	str	r2, [sp, #36]	; 0x24
 8010816:	e00c      	b.n	8010832 <_dtoa_r+0x28a>
 8010818:	2301      	movs	r3, #1
 801081a:	e7f3      	b.n	8010804 <_dtoa_r+0x25c>
 801081c:	2300      	movs	r3, #0
 801081e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010820:	9308      	str	r3, [sp, #32]
 8010822:	9b00      	ldr	r3, [sp, #0]
 8010824:	4413      	add	r3, r2
 8010826:	9302      	str	r3, [sp, #8]
 8010828:	3301      	adds	r3, #1
 801082a:	2b01      	cmp	r3, #1
 801082c:	9303      	str	r3, [sp, #12]
 801082e:	bfb8      	it	lt
 8010830:	2301      	movlt	r3, #1
 8010832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010834:	2200      	movs	r2, #0
 8010836:	6042      	str	r2, [r0, #4]
 8010838:	2204      	movs	r2, #4
 801083a:	f102 0614 	add.w	r6, r2, #20
 801083e:	429e      	cmp	r6, r3
 8010840:	6841      	ldr	r1, [r0, #4]
 8010842:	d93d      	bls.n	80108c0 <_dtoa_r+0x318>
 8010844:	4620      	mov	r0, r4
 8010846:	f001 fa57 	bl	8011cf8 <_Balloc>
 801084a:	9001      	str	r0, [sp, #4]
 801084c:	2800      	cmp	r0, #0
 801084e:	d13b      	bne.n	80108c8 <_dtoa_r+0x320>
 8010850:	4b11      	ldr	r3, [pc, #68]	; (8010898 <_dtoa_r+0x2f0>)
 8010852:	4602      	mov	r2, r0
 8010854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010858:	e6c0      	b.n	80105dc <_dtoa_r+0x34>
 801085a:	2301      	movs	r3, #1
 801085c:	e7df      	b.n	801081e <_dtoa_r+0x276>
 801085e:	bf00      	nop
 8010860:	636f4361 	.word	0x636f4361
 8010864:	3fd287a7 	.word	0x3fd287a7
 8010868:	8b60c8b3 	.word	0x8b60c8b3
 801086c:	3fc68a28 	.word	0x3fc68a28
 8010870:	509f79fb 	.word	0x509f79fb
 8010874:	3fd34413 	.word	0x3fd34413
 8010878:	08013df6 	.word	0x08013df6
 801087c:	08013e0d 	.word	0x08013e0d
 8010880:	7ff00000 	.word	0x7ff00000
 8010884:	08013df2 	.word	0x08013df2
 8010888:	08013de9 	.word	0x08013de9
 801088c:	08013c69 	.word	0x08013c69
 8010890:	3ff80000 	.word	0x3ff80000
 8010894:	08013fe0 	.word	0x08013fe0
 8010898:	08013e68 	.word	0x08013e68
 801089c:	2501      	movs	r5, #1
 801089e:	2300      	movs	r3, #0
 80108a0:	9306      	str	r3, [sp, #24]
 80108a2:	9508      	str	r5, [sp, #32]
 80108a4:	f04f 33ff 	mov.w	r3, #4294967295
 80108a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80108ac:	2200      	movs	r2, #0
 80108ae:	2312      	movs	r3, #18
 80108b0:	e7b0      	b.n	8010814 <_dtoa_r+0x26c>
 80108b2:	2301      	movs	r3, #1
 80108b4:	9308      	str	r3, [sp, #32]
 80108b6:	e7f5      	b.n	80108a4 <_dtoa_r+0x2fc>
 80108b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80108be:	e7b8      	b.n	8010832 <_dtoa_r+0x28a>
 80108c0:	3101      	adds	r1, #1
 80108c2:	6041      	str	r1, [r0, #4]
 80108c4:	0052      	lsls	r2, r2, #1
 80108c6:	e7b8      	b.n	801083a <_dtoa_r+0x292>
 80108c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108ca:	9a01      	ldr	r2, [sp, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	9b03      	ldr	r3, [sp, #12]
 80108d0:	2b0e      	cmp	r3, #14
 80108d2:	f200 809d 	bhi.w	8010a10 <_dtoa_r+0x468>
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	f000 809a 	beq.w	8010a10 <_dtoa_r+0x468>
 80108dc:	9b00      	ldr	r3, [sp, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	dd32      	ble.n	8010948 <_dtoa_r+0x3a0>
 80108e2:	4ab7      	ldr	r2, [pc, #732]	; (8010bc0 <_dtoa_r+0x618>)
 80108e4:	f003 030f 	and.w	r3, r3, #15
 80108e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108f0:	9b00      	ldr	r3, [sp, #0]
 80108f2:	05d8      	lsls	r0, r3, #23
 80108f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80108f8:	d516      	bpl.n	8010928 <_dtoa_r+0x380>
 80108fa:	4bb2      	ldr	r3, [pc, #712]	; (8010bc4 <_dtoa_r+0x61c>)
 80108fc:	ec51 0b19 	vmov	r0, r1, d9
 8010900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010904:	f7ef ffc2 	bl	800088c <__aeabi_ddiv>
 8010908:	f007 070f 	and.w	r7, r7, #15
 801090c:	4682      	mov	sl, r0
 801090e:	468b      	mov	fp, r1
 8010910:	2503      	movs	r5, #3
 8010912:	4eac      	ldr	r6, [pc, #688]	; (8010bc4 <_dtoa_r+0x61c>)
 8010914:	b957      	cbnz	r7, 801092c <_dtoa_r+0x384>
 8010916:	4642      	mov	r2, r8
 8010918:	464b      	mov	r3, r9
 801091a:	4650      	mov	r0, sl
 801091c:	4659      	mov	r1, fp
 801091e:	f7ef ffb5 	bl	800088c <__aeabi_ddiv>
 8010922:	4682      	mov	sl, r0
 8010924:	468b      	mov	fp, r1
 8010926:	e028      	b.n	801097a <_dtoa_r+0x3d2>
 8010928:	2502      	movs	r5, #2
 801092a:	e7f2      	b.n	8010912 <_dtoa_r+0x36a>
 801092c:	07f9      	lsls	r1, r7, #31
 801092e:	d508      	bpl.n	8010942 <_dtoa_r+0x39a>
 8010930:	4640      	mov	r0, r8
 8010932:	4649      	mov	r1, r9
 8010934:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010938:	f7ef fe7e 	bl	8000638 <__aeabi_dmul>
 801093c:	3501      	adds	r5, #1
 801093e:	4680      	mov	r8, r0
 8010940:	4689      	mov	r9, r1
 8010942:	107f      	asrs	r7, r7, #1
 8010944:	3608      	adds	r6, #8
 8010946:	e7e5      	b.n	8010914 <_dtoa_r+0x36c>
 8010948:	f000 809b 	beq.w	8010a82 <_dtoa_r+0x4da>
 801094c:	9b00      	ldr	r3, [sp, #0]
 801094e:	4f9d      	ldr	r7, [pc, #628]	; (8010bc4 <_dtoa_r+0x61c>)
 8010950:	425e      	negs	r6, r3
 8010952:	4b9b      	ldr	r3, [pc, #620]	; (8010bc0 <_dtoa_r+0x618>)
 8010954:	f006 020f 	and.w	r2, r6, #15
 8010958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010960:	ec51 0b19 	vmov	r0, r1, d9
 8010964:	f7ef fe68 	bl	8000638 <__aeabi_dmul>
 8010968:	1136      	asrs	r6, r6, #4
 801096a:	4682      	mov	sl, r0
 801096c:	468b      	mov	fp, r1
 801096e:	2300      	movs	r3, #0
 8010970:	2502      	movs	r5, #2
 8010972:	2e00      	cmp	r6, #0
 8010974:	d17a      	bne.n	8010a6c <_dtoa_r+0x4c4>
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1d3      	bne.n	8010922 <_dtoa_r+0x37a>
 801097a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801097c:	2b00      	cmp	r3, #0
 801097e:	f000 8082 	beq.w	8010a86 <_dtoa_r+0x4de>
 8010982:	4b91      	ldr	r3, [pc, #580]	; (8010bc8 <_dtoa_r+0x620>)
 8010984:	2200      	movs	r2, #0
 8010986:	4650      	mov	r0, sl
 8010988:	4659      	mov	r1, fp
 801098a:	f7f0 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 801098e:	2800      	cmp	r0, #0
 8010990:	d079      	beq.n	8010a86 <_dtoa_r+0x4de>
 8010992:	9b03      	ldr	r3, [sp, #12]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d076      	beq.n	8010a86 <_dtoa_r+0x4de>
 8010998:	9b02      	ldr	r3, [sp, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd36      	ble.n	8010a0c <_dtoa_r+0x464>
 801099e:	9b00      	ldr	r3, [sp, #0]
 80109a0:	4650      	mov	r0, sl
 80109a2:	4659      	mov	r1, fp
 80109a4:	1e5f      	subs	r7, r3, #1
 80109a6:	2200      	movs	r2, #0
 80109a8:	4b88      	ldr	r3, [pc, #544]	; (8010bcc <_dtoa_r+0x624>)
 80109aa:	f7ef fe45 	bl	8000638 <__aeabi_dmul>
 80109ae:	9e02      	ldr	r6, [sp, #8]
 80109b0:	4682      	mov	sl, r0
 80109b2:	468b      	mov	fp, r1
 80109b4:	3501      	adds	r5, #1
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7ef fdd4 	bl	8000564 <__aeabi_i2d>
 80109bc:	4652      	mov	r2, sl
 80109be:	465b      	mov	r3, fp
 80109c0:	f7ef fe3a 	bl	8000638 <__aeabi_dmul>
 80109c4:	4b82      	ldr	r3, [pc, #520]	; (8010bd0 <_dtoa_r+0x628>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	f7ef fc80 	bl	80002cc <__adddf3>
 80109cc:	46d0      	mov	r8, sl
 80109ce:	46d9      	mov	r9, fp
 80109d0:	4682      	mov	sl, r0
 80109d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80109d6:	2e00      	cmp	r6, #0
 80109d8:	d158      	bne.n	8010a8c <_dtoa_r+0x4e4>
 80109da:	4b7e      	ldr	r3, [pc, #504]	; (8010bd4 <_dtoa_r+0x62c>)
 80109dc:	2200      	movs	r2, #0
 80109de:	4640      	mov	r0, r8
 80109e0:	4649      	mov	r1, r9
 80109e2:	f7ef fc71 	bl	80002c8 <__aeabi_dsub>
 80109e6:	4652      	mov	r2, sl
 80109e8:	465b      	mov	r3, fp
 80109ea:	4680      	mov	r8, r0
 80109ec:	4689      	mov	r9, r1
 80109ee:	f7f0 f8b3 	bl	8000b58 <__aeabi_dcmpgt>
 80109f2:	2800      	cmp	r0, #0
 80109f4:	f040 8295 	bne.w	8010f22 <_dtoa_r+0x97a>
 80109f8:	4652      	mov	r2, sl
 80109fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80109fe:	4640      	mov	r0, r8
 8010a00:	4649      	mov	r1, r9
 8010a02:	f7f0 f88b 	bl	8000b1c <__aeabi_dcmplt>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	f040 8289 	bne.w	8010f1e <_dtoa_r+0x976>
 8010a0c:	ec5b ab19 	vmov	sl, fp, d9
 8010a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f2c0 8148 	blt.w	8010ca8 <_dtoa_r+0x700>
 8010a18:	9a00      	ldr	r2, [sp, #0]
 8010a1a:	2a0e      	cmp	r2, #14
 8010a1c:	f300 8144 	bgt.w	8010ca8 <_dtoa_r+0x700>
 8010a20:	4b67      	ldr	r3, [pc, #412]	; (8010bc0 <_dtoa_r+0x618>)
 8010a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	f280 80d5 	bge.w	8010bdc <_dtoa_r+0x634>
 8010a32:	9b03      	ldr	r3, [sp, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f300 80d1 	bgt.w	8010bdc <_dtoa_r+0x634>
 8010a3a:	f040 826f 	bne.w	8010f1c <_dtoa_r+0x974>
 8010a3e:	4b65      	ldr	r3, [pc, #404]	; (8010bd4 <_dtoa_r+0x62c>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	4640      	mov	r0, r8
 8010a44:	4649      	mov	r1, r9
 8010a46:	f7ef fdf7 	bl	8000638 <__aeabi_dmul>
 8010a4a:	4652      	mov	r2, sl
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	f7f0 f879 	bl	8000b44 <__aeabi_dcmpge>
 8010a52:	9e03      	ldr	r6, [sp, #12]
 8010a54:	4637      	mov	r7, r6
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f040 8245 	bne.w	8010ee6 <_dtoa_r+0x93e>
 8010a5c:	9d01      	ldr	r5, [sp, #4]
 8010a5e:	2331      	movs	r3, #49	; 0x31
 8010a60:	f805 3b01 	strb.w	r3, [r5], #1
 8010a64:	9b00      	ldr	r3, [sp, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	e240      	b.n	8010eee <_dtoa_r+0x946>
 8010a6c:	07f2      	lsls	r2, r6, #31
 8010a6e:	d505      	bpl.n	8010a7c <_dtoa_r+0x4d4>
 8010a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a74:	f7ef fde0 	bl	8000638 <__aeabi_dmul>
 8010a78:	3501      	adds	r5, #1
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	1076      	asrs	r6, r6, #1
 8010a7e:	3708      	adds	r7, #8
 8010a80:	e777      	b.n	8010972 <_dtoa_r+0x3ca>
 8010a82:	2502      	movs	r5, #2
 8010a84:	e779      	b.n	801097a <_dtoa_r+0x3d2>
 8010a86:	9f00      	ldr	r7, [sp, #0]
 8010a88:	9e03      	ldr	r6, [sp, #12]
 8010a8a:	e794      	b.n	80109b6 <_dtoa_r+0x40e>
 8010a8c:	9901      	ldr	r1, [sp, #4]
 8010a8e:	4b4c      	ldr	r3, [pc, #304]	; (8010bc0 <_dtoa_r+0x618>)
 8010a90:	4431      	add	r1, r6
 8010a92:	910d      	str	r1, [sp, #52]	; 0x34
 8010a94:	9908      	ldr	r1, [sp, #32]
 8010a96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a9e:	2900      	cmp	r1, #0
 8010aa0:	d043      	beq.n	8010b2a <_dtoa_r+0x582>
 8010aa2:	494d      	ldr	r1, [pc, #308]	; (8010bd8 <_dtoa_r+0x630>)
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	f7ef fef1 	bl	800088c <__aeabi_ddiv>
 8010aaa:	4652      	mov	r2, sl
 8010aac:	465b      	mov	r3, fp
 8010aae:	f7ef fc0b 	bl	80002c8 <__aeabi_dsub>
 8010ab2:	9d01      	ldr	r5, [sp, #4]
 8010ab4:	4682      	mov	sl, r0
 8010ab6:	468b      	mov	fp, r1
 8010ab8:	4649      	mov	r1, r9
 8010aba:	4640      	mov	r0, r8
 8010abc:	f7f0 f86c 	bl	8000b98 <__aeabi_d2iz>
 8010ac0:	4606      	mov	r6, r0
 8010ac2:	f7ef fd4f 	bl	8000564 <__aeabi_i2d>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	4640      	mov	r0, r8
 8010acc:	4649      	mov	r1, r9
 8010ace:	f7ef fbfb 	bl	80002c8 <__aeabi_dsub>
 8010ad2:	3630      	adds	r6, #48	; 0x30
 8010ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8010ad8:	4652      	mov	r2, sl
 8010ada:	465b      	mov	r3, fp
 8010adc:	4680      	mov	r8, r0
 8010ade:	4689      	mov	r9, r1
 8010ae0:	f7f0 f81c 	bl	8000b1c <__aeabi_dcmplt>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d163      	bne.n	8010bb0 <_dtoa_r+0x608>
 8010ae8:	4642      	mov	r2, r8
 8010aea:	464b      	mov	r3, r9
 8010aec:	4936      	ldr	r1, [pc, #216]	; (8010bc8 <_dtoa_r+0x620>)
 8010aee:	2000      	movs	r0, #0
 8010af0:	f7ef fbea 	bl	80002c8 <__aeabi_dsub>
 8010af4:	4652      	mov	r2, sl
 8010af6:	465b      	mov	r3, fp
 8010af8:	f7f0 f810 	bl	8000b1c <__aeabi_dcmplt>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	f040 80b5 	bne.w	8010c6c <_dtoa_r+0x6c4>
 8010b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b04:	429d      	cmp	r5, r3
 8010b06:	d081      	beq.n	8010a0c <_dtoa_r+0x464>
 8010b08:	4b30      	ldr	r3, [pc, #192]	; (8010bcc <_dtoa_r+0x624>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4650      	mov	r0, sl
 8010b0e:	4659      	mov	r1, fp
 8010b10:	f7ef fd92 	bl	8000638 <__aeabi_dmul>
 8010b14:	4b2d      	ldr	r3, [pc, #180]	; (8010bcc <_dtoa_r+0x624>)
 8010b16:	4682      	mov	sl, r0
 8010b18:	468b      	mov	fp, r1
 8010b1a:	4640      	mov	r0, r8
 8010b1c:	4649      	mov	r1, r9
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f7ef fd8a 	bl	8000638 <__aeabi_dmul>
 8010b24:	4680      	mov	r8, r0
 8010b26:	4689      	mov	r9, r1
 8010b28:	e7c6      	b.n	8010ab8 <_dtoa_r+0x510>
 8010b2a:	4650      	mov	r0, sl
 8010b2c:	4659      	mov	r1, fp
 8010b2e:	f7ef fd83 	bl	8000638 <__aeabi_dmul>
 8010b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b34:	9d01      	ldr	r5, [sp, #4]
 8010b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b38:	4682      	mov	sl, r0
 8010b3a:	468b      	mov	fp, r1
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	4640      	mov	r0, r8
 8010b40:	f7f0 f82a 	bl	8000b98 <__aeabi_d2iz>
 8010b44:	4606      	mov	r6, r0
 8010b46:	f7ef fd0d 	bl	8000564 <__aeabi_i2d>
 8010b4a:	3630      	adds	r6, #48	; 0x30
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	460b      	mov	r3, r1
 8010b50:	4640      	mov	r0, r8
 8010b52:	4649      	mov	r1, r9
 8010b54:	f7ef fbb8 	bl	80002c8 <__aeabi_dsub>
 8010b58:	f805 6b01 	strb.w	r6, [r5], #1
 8010b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b5e:	429d      	cmp	r5, r3
 8010b60:	4680      	mov	r8, r0
 8010b62:	4689      	mov	r9, r1
 8010b64:	f04f 0200 	mov.w	r2, #0
 8010b68:	d124      	bne.n	8010bb4 <_dtoa_r+0x60c>
 8010b6a:	4b1b      	ldr	r3, [pc, #108]	; (8010bd8 <_dtoa_r+0x630>)
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	4659      	mov	r1, fp
 8010b70:	f7ef fbac 	bl	80002cc <__adddf3>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4640      	mov	r0, r8
 8010b7a:	4649      	mov	r1, r9
 8010b7c:	f7ef ffec 	bl	8000b58 <__aeabi_dcmpgt>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d173      	bne.n	8010c6c <_dtoa_r+0x6c4>
 8010b84:	4652      	mov	r2, sl
 8010b86:	465b      	mov	r3, fp
 8010b88:	4913      	ldr	r1, [pc, #76]	; (8010bd8 <_dtoa_r+0x630>)
 8010b8a:	2000      	movs	r0, #0
 8010b8c:	f7ef fb9c 	bl	80002c8 <__aeabi_dsub>
 8010b90:	4602      	mov	r2, r0
 8010b92:	460b      	mov	r3, r1
 8010b94:	4640      	mov	r0, r8
 8010b96:	4649      	mov	r1, r9
 8010b98:	f7ef ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	f43f af35 	beq.w	8010a0c <_dtoa_r+0x464>
 8010ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ba4:	1e6b      	subs	r3, r5, #1
 8010ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010bac:	2b30      	cmp	r3, #48	; 0x30
 8010bae:	d0f8      	beq.n	8010ba2 <_dtoa_r+0x5fa>
 8010bb0:	9700      	str	r7, [sp, #0]
 8010bb2:	e049      	b.n	8010c48 <_dtoa_r+0x6a0>
 8010bb4:	4b05      	ldr	r3, [pc, #20]	; (8010bcc <_dtoa_r+0x624>)
 8010bb6:	f7ef fd3f 	bl	8000638 <__aeabi_dmul>
 8010bba:	4680      	mov	r8, r0
 8010bbc:	4689      	mov	r9, r1
 8010bbe:	e7bd      	b.n	8010b3c <_dtoa_r+0x594>
 8010bc0:	08013fe0 	.word	0x08013fe0
 8010bc4:	08013fb8 	.word	0x08013fb8
 8010bc8:	3ff00000 	.word	0x3ff00000
 8010bcc:	40240000 	.word	0x40240000
 8010bd0:	401c0000 	.word	0x401c0000
 8010bd4:	40140000 	.word	0x40140000
 8010bd8:	3fe00000 	.word	0x3fe00000
 8010bdc:	9d01      	ldr	r5, [sp, #4]
 8010bde:	4656      	mov	r6, sl
 8010be0:	465f      	mov	r7, fp
 8010be2:	4642      	mov	r2, r8
 8010be4:	464b      	mov	r3, r9
 8010be6:	4630      	mov	r0, r6
 8010be8:	4639      	mov	r1, r7
 8010bea:	f7ef fe4f 	bl	800088c <__aeabi_ddiv>
 8010bee:	f7ef ffd3 	bl	8000b98 <__aeabi_d2iz>
 8010bf2:	4682      	mov	sl, r0
 8010bf4:	f7ef fcb6 	bl	8000564 <__aeabi_i2d>
 8010bf8:	4642      	mov	r2, r8
 8010bfa:	464b      	mov	r3, r9
 8010bfc:	f7ef fd1c 	bl	8000638 <__aeabi_dmul>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	4630      	mov	r0, r6
 8010c06:	4639      	mov	r1, r7
 8010c08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010c0c:	f7ef fb5c 	bl	80002c8 <__aeabi_dsub>
 8010c10:	f805 6b01 	strb.w	r6, [r5], #1
 8010c14:	9e01      	ldr	r6, [sp, #4]
 8010c16:	9f03      	ldr	r7, [sp, #12]
 8010c18:	1bae      	subs	r6, r5, r6
 8010c1a:	42b7      	cmp	r7, r6
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	d135      	bne.n	8010c8e <_dtoa_r+0x6e6>
 8010c22:	f7ef fb53 	bl	80002cc <__adddf3>
 8010c26:	4642      	mov	r2, r8
 8010c28:	464b      	mov	r3, r9
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	460f      	mov	r7, r1
 8010c2e:	f7ef ff93 	bl	8000b58 <__aeabi_dcmpgt>
 8010c32:	b9d0      	cbnz	r0, 8010c6a <_dtoa_r+0x6c2>
 8010c34:	4642      	mov	r2, r8
 8010c36:	464b      	mov	r3, r9
 8010c38:	4630      	mov	r0, r6
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	f7ef ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8010c40:	b110      	cbz	r0, 8010c48 <_dtoa_r+0x6a0>
 8010c42:	f01a 0f01 	tst.w	sl, #1
 8010c46:	d110      	bne.n	8010c6a <_dtoa_r+0x6c2>
 8010c48:	4620      	mov	r0, r4
 8010c4a:	ee18 1a10 	vmov	r1, s16
 8010c4e:	f001 f893 	bl	8011d78 <_Bfree>
 8010c52:	2300      	movs	r3, #0
 8010c54:	9800      	ldr	r0, [sp, #0]
 8010c56:	702b      	strb	r3, [r5, #0]
 8010c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c5a:	3001      	adds	r0, #1
 8010c5c:	6018      	str	r0, [r3, #0]
 8010c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f43f acf1 	beq.w	8010648 <_dtoa_r+0xa0>
 8010c66:	601d      	str	r5, [r3, #0]
 8010c68:	e4ee      	b.n	8010648 <_dtoa_r+0xa0>
 8010c6a:	9f00      	ldr	r7, [sp, #0]
 8010c6c:	462b      	mov	r3, r5
 8010c6e:	461d      	mov	r5, r3
 8010c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c74:	2a39      	cmp	r2, #57	; 0x39
 8010c76:	d106      	bne.n	8010c86 <_dtoa_r+0x6de>
 8010c78:	9a01      	ldr	r2, [sp, #4]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d1f7      	bne.n	8010c6e <_dtoa_r+0x6c6>
 8010c7e:	9901      	ldr	r1, [sp, #4]
 8010c80:	2230      	movs	r2, #48	; 0x30
 8010c82:	3701      	adds	r7, #1
 8010c84:	700a      	strb	r2, [r1, #0]
 8010c86:	781a      	ldrb	r2, [r3, #0]
 8010c88:	3201      	adds	r2, #1
 8010c8a:	701a      	strb	r2, [r3, #0]
 8010c8c:	e790      	b.n	8010bb0 <_dtoa_r+0x608>
 8010c8e:	4ba6      	ldr	r3, [pc, #664]	; (8010f28 <_dtoa_r+0x980>)
 8010c90:	2200      	movs	r2, #0
 8010c92:	f7ef fcd1 	bl	8000638 <__aeabi_dmul>
 8010c96:	2200      	movs	r2, #0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460f      	mov	r7, r1
 8010c9e:	f7ef ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d09d      	beq.n	8010be2 <_dtoa_r+0x63a>
 8010ca6:	e7cf      	b.n	8010c48 <_dtoa_r+0x6a0>
 8010ca8:	9a08      	ldr	r2, [sp, #32]
 8010caa:	2a00      	cmp	r2, #0
 8010cac:	f000 80d7 	beq.w	8010e5e <_dtoa_r+0x8b6>
 8010cb0:	9a06      	ldr	r2, [sp, #24]
 8010cb2:	2a01      	cmp	r2, #1
 8010cb4:	f300 80ba 	bgt.w	8010e2c <_dtoa_r+0x884>
 8010cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	f000 80b2 	beq.w	8010e24 <_dtoa_r+0x87c>
 8010cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cc4:	9e07      	ldr	r6, [sp, #28]
 8010cc6:	9d04      	ldr	r5, [sp, #16]
 8010cc8:	9a04      	ldr	r2, [sp, #16]
 8010cca:	441a      	add	r2, r3
 8010ccc:	9204      	str	r2, [sp, #16]
 8010cce:	9a05      	ldr	r2, [sp, #20]
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	441a      	add	r2, r3
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	9205      	str	r2, [sp, #20]
 8010cd8:	f001 f950 	bl	8011f7c <__i2b>
 8010cdc:	4607      	mov	r7, r0
 8010cde:	2d00      	cmp	r5, #0
 8010ce0:	dd0c      	ble.n	8010cfc <_dtoa_r+0x754>
 8010ce2:	9b05      	ldr	r3, [sp, #20]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	dd09      	ble.n	8010cfc <_dtoa_r+0x754>
 8010ce8:	42ab      	cmp	r3, r5
 8010cea:	9a04      	ldr	r2, [sp, #16]
 8010cec:	bfa8      	it	ge
 8010cee:	462b      	movge	r3, r5
 8010cf0:	1ad2      	subs	r2, r2, r3
 8010cf2:	9204      	str	r2, [sp, #16]
 8010cf4:	9a05      	ldr	r2, [sp, #20]
 8010cf6:	1aed      	subs	r5, r5, r3
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	9305      	str	r3, [sp, #20]
 8010cfc:	9b07      	ldr	r3, [sp, #28]
 8010cfe:	b31b      	cbz	r3, 8010d48 <_dtoa_r+0x7a0>
 8010d00:	9b08      	ldr	r3, [sp, #32]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f000 80af 	beq.w	8010e66 <_dtoa_r+0x8be>
 8010d08:	2e00      	cmp	r6, #0
 8010d0a:	dd13      	ble.n	8010d34 <_dtoa_r+0x78c>
 8010d0c:	4639      	mov	r1, r7
 8010d0e:	4632      	mov	r2, r6
 8010d10:	4620      	mov	r0, r4
 8010d12:	f001 f9f3 	bl	80120fc <__pow5mult>
 8010d16:	ee18 2a10 	vmov	r2, s16
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f001 f942 	bl	8011fa8 <__multiply>
 8010d24:	ee18 1a10 	vmov	r1, s16
 8010d28:	4680      	mov	r8, r0
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f001 f824 	bl	8011d78 <_Bfree>
 8010d30:	ee08 8a10 	vmov	s16, r8
 8010d34:	9b07      	ldr	r3, [sp, #28]
 8010d36:	1b9a      	subs	r2, r3, r6
 8010d38:	d006      	beq.n	8010d48 <_dtoa_r+0x7a0>
 8010d3a:	ee18 1a10 	vmov	r1, s16
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f001 f9dc 	bl	80120fc <__pow5mult>
 8010d44:	ee08 0a10 	vmov	s16, r0
 8010d48:	2101      	movs	r1, #1
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f001 f916 	bl	8011f7c <__i2b>
 8010d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	4606      	mov	r6, r0
 8010d56:	f340 8088 	ble.w	8010e6a <_dtoa_r+0x8c2>
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f001 f9cc 	bl	80120fc <__pow5mult>
 8010d64:	9b06      	ldr	r3, [sp, #24]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	4606      	mov	r6, r0
 8010d6a:	f340 8081 	ble.w	8010e70 <_dtoa_r+0x8c8>
 8010d6e:	f04f 0800 	mov.w	r8, #0
 8010d72:	6933      	ldr	r3, [r6, #16]
 8010d74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010d78:	6918      	ldr	r0, [r3, #16]
 8010d7a:	f001 f8af 	bl	8011edc <__hi0bits>
 8010d7e:	f1c0 0020 	rsb	r0, r0, #32
 8010d82:	9b05      	ldr	r3, [sp, #20]
 8010d84:	4418      	add	r0, r3
 8010d86:	f010 001f 	ands.w	r0, r0, #31
 8010d8a:	f000 8092 	beq.w	8010eb2 <_dtoa_r+0x90a>
 8010d8e:	f1c0 0320 	rsb	r3, r0, #32
 8010d92:	2b04      	cmp	r3, #4
 8010d94:	f340 808a 	ble.w	8010eac <_dtoa_r+0x904>
 8010d98:	f1c0 001c 	rsb	r0, r0, #28
 8010d9c:	9b04      	ldr	r3, [sp, #16]
 8010d9e:	4403      	add	r3, r0
 8010da0:	9304      	str	r3, [sp, #16]
 8010da2:	9b05      	ldr	r3, [sp, #20]
 8010da4:	4403      	add	r3, r0
 8010da6:	4405      	add	r5, r0
 8010da8:	9305      	str	r3, [sp, #20]
 8010daa:	9b04      	ldr	r3, [sp, #16]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	dd07      	ble.n	8010dc0 <_dtoa_r+0x818>
 8010db0:	ee18 1a10 	vmov	r1, s16
 8010db4:	461a      	mov	r2, r3
 8010db6:	4620      	mov	r0, r4
 8010db8:	f001 f9fa 	bl	80121b0 <__lshift>
 8010dbc:	ee08 0a10 	vmov	s16, r0
 8010dc0:	9b05      	ldr	r3, [sp, #20]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	dd05      	ble.n	8010dd2 <_dtoa_r+0x82a>
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	461a      	mov	r2, r3
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f001 f9f0 	bl	80121b0 <__lshift>
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d06e      	beq.n	8010eb6 <_dtoa_r+0x90e>
 8010dd8:	ee18 0a10 	vmov	r0, s16
 8010ddc:	4631      	mov	r1, r6
 8010dde:	f001 fa57 	bl	8012290 <__mcmp>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	da67      	bge.n	8010eb6 <_dtoa_r+0x90e>
 8010de6:	9b00      	ldr	r3, [sp, #0]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	ee18 1a10 	vmov	r1, s16
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	220a      	movs	r2, #10
 8010df2:	2300      	movs	r3, #0
 8010df4:	4620      	mov	r0, r4
 8010df6:	f000 ffe1 	bl	8011dbc <__multadd>
 8010dfa:	9b08      	ldr	r3, [sp, #32]
 8010dfc:	ee08 0a10 	vmov	s16, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 81b1 	beq.w	8011168 <_dtoa_r+0xbc0>
 8010e06:	2300      	movs	r3, #0
 8010e08:	4639      	mov	r1, r7
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 ffd5 	bl	8011dbc <__multadd>
 8010e12:	9b02      	ldr	r3, [sp, #8]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	4607      	mov	r7, r0
 8010e18:	f300 808e 	bgt.w	8010f38 <_dtoa_r+0x990>
 8010e1c:	9b06      	ldr	r3, [sp, #24]
 8010e1e:	2b02      	cmp	r3, #2
 8010e20:	dc51      	bgt.n	8010ec6 <_dtoa_r+0x91e>
 8010e22:	e089      	b.n	8010f38 <_dtoa_r+0x990>
 8010e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010e2a:	e74b      	b.n	8010cc4 <_dtoa_r+0x71c>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	1e5e      	subs	r6, r3, #1
 8010e30:	9b07      	ldr	r3, [sp, #28]
 8010e32:	42b3      	cmp	r3, r6
 8010e34:	bfbf      	itttt	lt
 8010e36:	9b07      	ldrlt	r3, [sp, #28]
 8010e38:	9607      	strlt	r6, [sp, #28]
 8010e3a:	1af2      	sublt	r2, r6, r3
 8010e3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e3e:	bfb6      	itet	lt
 8010e40:	189b      	addlt	r3, r3, r2
 8010e42:	1b9e      	subge	r6, r3, r6
 8010e44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	bfb8      	it	lt
 8010e4a:	2600      	movlt	r6, #0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	bfb7      	itett	lt
 8010e50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010e54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010e58:	1a9d      	sublt	r5, r3, r2
 8010e5a:	2300      	movlt	r3, #0
 8010e5c:	e734      	b.n	8010cc8 <_dtoa_r+0x720>
 8010e5e:	9e07      	ldr	r6, [sp, #28]
 8010e60:	9d04      	ldr	r5, [sp, #16]
 8010e62:	9f08      	ldr	r7, [sp, #32]
 8010e64:	e73b      	b.n	8010cde <_dtoa_r+0x736>
 8010e66:	9a07      	ldr	r2, [sp, #28]
 8010e68:	e767      	b.n	8010d3a <_dtoa_r+0x792>
 8010e6a:	9b06      	ldr	r3, [sp, #24]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	dc18      	bgt.n	8010ea2 <_dtoa_r+0x8fa>
 8010e70:	f1ba 0f00 	cmp.w	sl, #0
 8010e74:	d115      	bne.n	8010ea2 <_dtoa_r+0x8fa>
 8010e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e7a:	b993      	cbnz	r3, 8010ea2 <_dtoa_r+0x8fa>
 8010e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e80:	0d1b      	lsrs	r3, r3, #20
 8010e82:	051b      	lsls	r3, r3, #20
 8010e84:	b183      	cbz	r3, 8010ea8 <_dtoa_r+0x900>
 8010e86:	9b04      	ldr	r3, [sp, #16]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	9304      	str	r3, [sp, #16]
 8010e8c:	9b05      	ldr	r3, [sp, #20]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	9305      	str	r3, [sp, #20]
 8010e92:	f04f 0801 	mov.w	r8, #1
 8010e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f47f af6a 	bne.w	8010d72 <_dtoa_r+0x7ca>
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	e76f      	b.n	8010d82 <_dtoa_r+0x7da>
 8010ea2:	f04f 0800 	mov.w	r8, #0
 8010ea6:	e7f6      	b.n	8010e96 <_dtoa_r+0x8ee>
 8010ea8:	4698      	mov	r8, r3
 8010eaa:	e7f4      	b.n	8010e96 <_dtoa_r+0x8ee>
 8010eac:	f43f af7d 	beq.w	8010daa <_dtoa_r+0x802>
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	301c      	adds	r0, #28
 8010eb4:	e772      	b.n	8010d9c <_dtoa_r+0x7f4>
 8010eb6:	9b03      	ldr	r3, [sp, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	dc37      	bgt.n	8010f2c <_dtoa_r+0x984>
 8010ebc:	9b06      	ldr	r3, [sp, #24]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	dd34      	ble.n	8010f2c <_dtoa_r+0x984>
 8010ec2:	9b03      	ldr	r3, [sp, #12]
 8010ec4:	9302      	str	r3, [sp, #8]
 8010ec6:	9b02      	ldr	r3, [sp, #8]
 8010ec8:	b96b      	cbnz	r3, 8010ee6 <_dtoa_r+0x93e>
 8010eca:	4631      	mov	r1, r6
 8010ecc:	2205      	movs	r2, #5
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 ff74 	bl	8011dbc <__multadd>
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	ee18 0a10 	vmov	r0, s16
 8010edc:	f001 f9d8 	bl	8012290 <__mcmp>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	f73f adbb 	bgt.w	8010a5c <_dtoa_r+0x4b4>
 8010ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee8:	9d01      	ldr	r5, [sp, #4]
 8010eea:	43db      	mvns	r3, r3
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	f04f 0800 	mov.w	r8, #0
 8010ef2:	4631      	mov	r1, r6
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f000 ff3f 	bl	8011d78 <_Bfree>
 8010efa:	2f00      	cmp	r7, #0
 8010efc:	f43f aea4 	beq.w	8010c48 <_dtoa_r+0x6a0>
 8010f00:	f1b8 0f00 	cmp.w	r8, #0
 8010f04:	d005      	beq.n	8010f12 <_dtoa_r+0x96a>
 8010f06:	45b8      	cmp	r8, r7
 8010f08:	d003      	beq.n	8010f12 <_dtoa_r+0x96a>
 8010f0a:	4641      	mov	r1, r8
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f000 ff33 	bl	8011d78 <_Bfree>
 8010f12:	4639      	mov	r1, r7
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 ff2f 	bl	8011d78 <_Bfree>
 8010f1a:	e695      	b.n	8010c48 <_dtoa_r+0x6a0>
 8010f1c:	2600      	movs	r6, #0
 8010f1e:	4637      	mov	r7, r6
 8010f20:	e7e1      	b.n	8010ee6 <_dtoa_r+0x93e>
 8010f22:	9700      	str	r7, [sp, #0]
 8010f24:	4637      	mov	r7, r6
 8010f26:	e599      	b.n	8010a5c <_dtoa_r+0x4b4>
 8010f28:	40240000 	.word	0x40240000
 8010f2c:	9b08      	ldr	r3, [sp, #32]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 80ca 	beq.w	80110c8 <_dtoa_r+0xb20>
 8010f34:	9b03      	ldr	r3, [sp, #12]
 8010f36:	9302      	str	r3, [sp, #8]
 8010f38:	2d00      	cmp	r5, #0
 8010f3a:	dd05      	ble.n	8010f48 <_dtoa_r+0x9a0>
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	462a      	mov	r2, r5
 8010f40:	4620      	mov	r0, r4
 8010f42:	f001 f935 	bl	80121b0 <__lshift>
 8010f46:	4607      	mov	r7, r0
 8010f48:	f1b8 0f00 	cmp.w	r8, #0
 8010f4c:	d05b      	beq.n	8011006 <_dtoa_r+0xa5e>
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 fed1 	bl	8011cf8 <_Balloc>
 8010f56:	4605      	mov	r5, r0
 8010f58:	b928      	cbnz	r0, 8010f66 <_dtoa_r+0x9be>
 8010f5a:	4b87      	ldr	r3, [pc, #540]	; (8011178 <_dtoa_r+0xbd0>)
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f62:	f7ff bb3b 	b.w	80105dc <_dtoa_r+0x34>
 8010f66:	693a      	ldr	r2, [r7, #16]
 8010f68:	3202      	adds	r2, #2
 8010f6a:	0092      	lsls	r2, r2, #2
 8010f6c:	f107 010c 	add.w	r1, r7, #12
 8010f70:	300c      	adds	r0, #12
 8010f72:	f000 feb3 	bl	8011cdc <memcpy>
 8010f76:	2201      	movs	r2, #1
 8010f78:	4629      	mov	r1, r5
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f001 f918 	bl	80121b0 <__lshift>
 8010f80:	9b01      	ldr	r3, [sp, #4]
 8010f82:	f103 0901 	add.w	r9, r3, #1
 8010f86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010f8a:	4413      	add	r3, r2
 8010f8c:	9305      	str	r3, [sp, #20]
 8010f8e:	f00a 0301 	and.w	r3, sl, #1
 8010f92:	46b8      	mov	r8, r7
 8010f94:	9304      	str	r3, [sp, #16]
 8010f96:	4607      	mov	r7, r0
 8010f98:	4631      	mov	r1, r6
 8010f9a:	ee18 0a10 	vmov	r0, s16
 8010f9e:	f7ff fa77 	bl	8010490 <quorem>
 8010fa2:	4641      	mov	r1, r8
 8010fa4:	9002      	str	r0, [sp, #8]
 8010fa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010faa:	ee18 0a10 	vmov	r0, s16
 8010fae:	f001 f96f 	bl	8012290 <__mcmp>
 8010fb2:	463a      	mov	r2, r7
 8010fb4:	9003      	str	r0, [sp, #12]
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f001 f985 	bl	80122c8 <__mdiff>
 8010fbe:	68c2      	ldr	r2, [r0, #12]
 8010fc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8010fc4:	4605      	mov	r5, r0
 8010fc6:	bb02      	cbnz	r2, 801100a <_dtoa_r+0xa62>
 8010fc8:	4601      	mov	r1, r0
 8010fca:	ee18 0a10 	vmov	r0, s16
 8010fce:	f001 f95f 	bl	8012290 <__mcmp>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	9207      	str	r2, [sp, #28]
 8010fda:	f000 fecd 	bl	8011d78 <_Bfree>
 8010fde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010fe2:	ea43 0102 	orr.w	r1, r3, r2
 8010fe6:	9b04      	ldr	r3, [sp, #16]
 8010fe8:	430b      	orrs	r3, r1
 8010fea:	464d      	mov	r5, r9
 8010fec:	d10f      	bne.n	801100e <_dtoa_r+0xa66>
 8010fee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ff2:	d02a      	beq.n	801104a <_dtoa_r+0xaa2>
 8010ff4:	9b03      	ldr	r3, [sp, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd02      	ble.n	8011000 <_dtoa_r+0xa58>
 8010ffa:	9b02      	ldr	r3, [sp, #8]
 8010ffc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011000:	f88b a000 	strb.w	sl, [fp]
 8011004:	e775      	b.n	8010ef2 <_dtoa_r+0x94a>
 8011006:	4638      	mov	r0, r7
 8011008:	e7ba      	b.n	8010f80 <_dtoa_r+0x9d8>
 801100a:	2201      	movs	r2, #1
 801100c:	e7e2      	b.n	8010fd4 <_dtoa_r+0xa2c>
 801100e:	9b03      	ldr	r3, [sp, #12]
 8011010:	2b00      	cmp	r3, #0
 8011012:	db04      	blt.n	801101e <_dtoa_r+0xa76>
 8011014:	9906      	ldr	r1, [sp, #24]
 8011016:	430b      	orrs	r3, r1
 8011018:	9904      	ldr	r1, [sp, #16]
 801101a:	430b      	orrs	r3, r1
 801101c:	d122      	bne.n	8011064 <_dtoa_r+0xabc>
 801101e:	2a00      	cmp	r2, #0
 8011020:	ddee      	ble.n	8011000 <_dtoa_r+0xa58>
 8011022:	ee18 1a10 	vmov	r1, s16
 8011026:	2201      	movs	r2, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f001 f8c1 	bl	80121b0 <__lshift>
 801102e:	4631      	mov	r1, r6
 8011030:	ee08 0a10 	vmov	s16, r0
 8011034:	f001 f92c 	bl	8012290 <__mcmp>
 8011038:	2800      	cmp	r0, #0
 801103a:	dc03      	bgt.n	8011044 <_dtoa_r+0xa9c>
 801103c:	d1e0      	bne.n	8011000 <_dtoa_r+0xa58>
 801103e:	f01a 0f01 	tst.w	sl, #1
 8011042:	d0dd      	beq.n	8011000 <_dtoa_r+0xa58>
 8011044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011048:	d1d7      	bne.n	8010ffa <_dtoa_r+0xa52>
 801104a:	2339      	movs	r3, #57	; 0x39
 801104c:	f88b 3000 	strb.w	r3, [fp]
 8011050:	462b      	mov	r3, r5
 8011052:	461d      	mov	r5, r3
 8011054:	3b01      	subs	r3, #1
 8011056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801105a:	2a39      	cmp	r2, #57	; 0x39
 801105c:	d071      	beq.n	8011142 <_dtoa_r+0xb9a>
 801105e:	3201      	adds	r2, #1
 8011060:	701a      	strb	r2, [r3, #0]
 8011062:	e746      	b.n	8010ef2 <_dtoa_r+0x94a>
 8011064:	2a00      	cmp	r2, #0
 8011066:	dd07      	ble.n	8011078 <_dtoa_r+0xad0>
 8011068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801106c:	d0ed      	beq.n	801104a <_dtoa_r+0xaa2>
 801106e:	f10a 0301 	add.w	r3, sl, #1
 8011072:	f88b 3000 	strb.w	r3, [fp]
 8011076:	e73c      	b.n	8010ef2 <_dtoa_r+0x94a>
 8011078:	9b05      	ldr	r3, [sp, #20]
 801107a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801107e:	4599      	cmp	r9, r3
 8011080:	d047      	beq.n	8011112 <_dtoa_r+0xb6a>
 8011082:	ee18 1a10 	vmov	r1, s16
 8011086:	2300      	movs	r3, #0
 8011088:	220a      	movs	r2, #10
 801108a:	4620      	mov	r0, r4
 801108c:	f000 fe96 	bl	8011dbc <__multadd>
 8011090:	45b8      	cmp	r8, r7
 8011092:	ee08 0a10 	vmov	s16, r0
 8011096:	f04f 0300 	mov.w	r3, #0
 801109a:	f04f 020a 	mov.w	r2, #10
 801109e:	4641      	mov	r1, r8
 80110a0:	4620      	mov	r0, r4
 80110a2:	d106      	bne.n	80110b2 <_dtoa_r+0xb0a>
 80110a4:	f000 fe8a 	bl	8011dbc <__multadd>
 80110a8:	4680      	mov	r8, r0
 80110aa:	4607      	mov	r7, r0
 80110ac:	f109 0901 	add.w	r9, r9, #1
 80110b0:	e772      	b.n	8010f98 <_dtoa_r+0x9f0>
 80110b2:	f000 fe83 	bl	8011dbc <__multadd>
 80110b6:	4639      	mov	r1, r7
 80110b8:	4680      	mov	r8, r0
 80110ba:	2300      	movs	r3, #0
 80110bc:	220a      	movs	r2, #10
 80110be:	4620      	mov	r0, r4
 80110c0:	f000 fe7c 	bl	8011dbc <__multadd>
 80110c4:	4607      	mov	r7, r0
 80110c6:	e7f1      	b.n	80110ac <_dtoa_r+0xb04>
 80110c8:	9b03      	ldr	r3, [sp, #12]
 80110ca:	9302      	str	r3, [sp, #8]
 80110cc:	9d01      	ldr	r5, [sp, #4]
 80110ce:	ee18 0a10 	vmov	r0, s16
 80110d2:	4631      	mov	r1, r6
 80110d4:	f7ff f9dc 	bl	8010490 <quorem>
 80110d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80110dc:	9b01      	ldr	r3, [sp, #4]
 80110de:	f805 ab01 	strb.w	sl, [r5], #1
 80110e2:	1aea      	subs	r2, r5, r3
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	4293      	cmp	r3, r2
 80110e8:	dd09      	ble.n	80110fe <_dtoa_r+0xb56>
 80110ea:	ee18 1a10 	vmov	r1, s16
 80110ee:	2300      	movs	r3, #0
 80110f0:	220a      	movs	r2, #10
 80110f2:	4620      	mov	r0, r4
 80110f4:	f000 fe62 	bl	8011dbc <__multadd>
 80110f8:	ee08 0a10 	vmov	s16, r0
 80110fc:	e7e7      	b.n	80110ce <_dtoa_r+0xb26>
 80110fe:	9b02      	ldr	r3, [sp, #8]
 8011100:	2b00      	cmp	r3, #0
 8011102:	bfc8      	it	gt
 8011104:	461d      	movgt	r5, r3
 8011106:	9b01      	ldr	r3, [sp, #4]
 8011108:	bfd8      	it	le
 801110a:	2501      	movle	r5, #1
 801110c:	441d      	add	r5, r3
 801110e:	f04f 0800 	mov.w	r8, #0
 8011112:	ee18 1a10 	vmov	r1, s16
 8011116:	2201      	movs	r2, #1
 8011118:	4620      	mov	r0, r4
 801111a:	f001 f849 	bl	80121b0 <__lshift>
 801111e:	4631      	mov	r1, r6
 8011120:	ee08 0a10 	vmov	s16, r0
 8011124:	f001 f8b4 	bl	8012290 <__mcmp>
 8011128:	2800      	cmp	r0, #0
 801112a:	dc91      	bgt.n	8011050 <_dtoa_r+0xaa8>
 801112c:	d102      	bne.n	8011134 <_dtoa_r+0xb8c>
 801112e:	f01a 0f01 	tst.w	sl, #1
 8011132:	d18d      	bne.n	8011050 <_dtoa_r+0xaa8>
 8011134:	462b      	mov	r3, r5
 8011136:	461d      	mov	r5, r3
 8011138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801113c:	2a30      	cmp	r2, #48	; 0x30
 801113e:	d0fa      	beq.n	8011136 <_dtoa_r+0xb8e>
 8011140:	e6d7      	b.n	8010ef2 <_dtoa_r+0x94a>
 8011142:	9a01      	ldr	r2, [sp, #4]
 8011144:	429a      	cmp	r2, r3
 8011146:	d184      	bne.n	8011052 <_dtoa_r+0xaaa>
 8011148:	9b00      	ldr	r3, [sp, #0]
 801114a:	3301      	adds	r3, #1
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	2331      	movs	r3, #49	; 0x31
 8011150:	7013      	strb	r3, [r2, #0]
 8011152:	e6ce      	b.n	8010ef2 <_dtoa_r+0x94a>
 8011154:	4b09      	ldr	r3, [pc, #36]	; (801117c <_dtoa_r+0xbd4>)
 8011156:	f7ff ba95 	b.w	8010684 <_dtoa_r+0xdc>
 801115a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801115c:	2b00      	cmp	r3, #0
 801115e:	f47f aa6e 	bne.w	801063e <_dtoa_r+0x96>
 8011162:	4b07      	ldr	r3, [pc, #28]	; (8011180 <_dtoa_r+0xbd8>)
 8011164:	f7ff ba8e 	b.w	8010684 <_dtoa_r+0xdc>
 8011168:	9b02      	ldr	r3, [sp, #8]
 801116a:	2b00      	cmp	r3, #0
 801116c:	dcae      	bgt.n	80110cc <_dtoa_r+0xb24>
 801116e:	9b06      	ldr	r3, [sp, #24]
 8011170:	2b02      	cmp	r3, #2
 8011172:	f73f aea8 	bgt.w	8010ec6 <_dtoa_r+0x91e>
 8011176:	e7a9      	b.n	80110cc <_dtoa_r+0xb24>
 8011178:	08013e68 	.word	0x08013e68
 801117c:	08013c68 	.word	0x08013c68
 8011180:	08013de9 	.word	0x08013de9

08011184 <__sflush_r>:
 8011184:	898a      	ldrh	r2, [r1, #12]
 8011186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118a:	4605      	mov	r5, r0
 801118c:	0710      	lsls	r0, r2, #28
 801118e:	460c      	mov	r4, r1
 8011190:	d458      	bmi.n	8011244 <__sflush_r+0xc0>
 8011192:	684b      	ldr	r3, [r1, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	dc05      	bgt.n	80111a4 <__sflush_r+0x20>
 8011198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801119a:	2b00      	cmp	r3, #0
 801119c:	dc02      	bgt.n	80111a4 <__sflush_r+0x20>
 801119e:	2000      	movs	r0, #0
 80111a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111a6:	2e00      	cmp	r6, #0
 80111a8:	d0f9      	beq.n	801119e <__sflush_r+0x1a>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111b0:	682f      	ldr	r7, [r5, #0]
 80111b2:	602b      	str	r3, [r5, #0]
 80111b4:	d032      	beq.n	801121c <__sflush_r+0x98>
 80111b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111b8:	89a3      	ldrh	r3, [r4, #12]
 80111ba:	075a      	lsls	r2, r3, #29
 80111bc:	d505      	bpl.n	80111ca <__sflush_r+0x46>
 80111be:	6863      	ldr	r3, [r4, #4]
 80111c0:	1ac0      	subs	r0, r0, r3
 80111c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111c4:	b10b      	cbz	r3, 80111ca <__sflush_r+0x46>
 80111c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111c8:	1ac0      	subs	r0, r0, r3
 80111ca:	2300      	movs	r3, #0
 80111cc:	4602      	mov	r2, r0
 80111ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	4628      	mov	r0, r5
 80111d4:	47b0      	blx	r6
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	d106      	bne.n	80111ea <__sflush_r+0x66>
 80111dc:	6829      	ldr	r1, [r5, #0]
 80111de:	291d      	cmp	r1, #29
 80111e0:	d82c      	bhi.n	801123c <__sflush_r+0xb8>
 80111e2:	4a2a      	ldr	r2, [pc, #168]	; (801128c <__sflush_r+0x108>)
 80111e4:	40ca      	lsrs	r2, r1
 80111e6:	07d6      	lsls	r6, r2, #31
 80111e8:	d528      	bpl.n	801123c <__sflush_r+0xb8>
 80111ea:	2200      	movs	r2, #0
 80111ec:	6062      	str	r2, [r4, #4]
 80111ee:	04d9      	lsls	r1, r3, #19
 80111f0:	6922      	ldr	r2, [r4, #16]
 80111f2:	6022      	str	r2, [r4, #0]
 80111f4:	d504      	bpl.n	8011200 <__sflush_r+0x7c>
 80111f6:	1c42      	adds	r2, r0, #1
 80111f8:	d101      	bne.n	80111fe <__sflush_r+0x7a>
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	b903      	cbnz	r3, 8011200 <__sflush_r+0x7c>
 80111fe:	6560      	str	r0, [r4, #84]	; 0x54
 8011200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011202:	602f      	str	r7, [r5, #0]
 8011204:	2900      	cmp	r1, #0
 8011206:	d0ca      	beq.n	801119e <__sflush_r+0x1a>
 8011208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801120c:	4299      	cmp	r1, r3
 801120e:	d002      	beq.n	8011216 <__sflush_r+0x92>
 8011210:	4628      	mov	r0, r5
 8011212:	f001 fa49 	bl	80126a8 <_free_r>
 8011216:	2000      	movs	r0, #0
 8011218:	6360      	str	r0, [r4, #52]	; 0x34
 801121a:	e7c1      	b.n	80111a0 <__sflush_r+0x1c>
 801121c:	6a21      	ldr	r1, [r4, #32]
 801121e:	2301      	movs	r3, #1
 8011220:	4628      	mov	r0, r5
 8011222:	47b0      	blx	r6
 8011224:	1c41      	adds	r1, r0, #1
 8011226:	d1c7      	bne.n	80111b8 <__sflush_r+0x34>
 8011228:	682b      	ldr	r3, [r5, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d0c4      	beq.n	80111b8 <__sflush_r+0x34>
 801122e:	2b1d      	cmp	r3, #29
 8011230:	d001      	beq.n	8011236 <__sflush_r+0xb2>
 8011232:	2b16      	cmp	r3, #22
 8011234:	d101      	bne.n	801123a <__sflush_r+0xb6>
 8011236:	602f      	str	r7, [r5, #0]
 8011238:	e7b1      	b.n	801119e <__sflush_r+0x1a>
 801123a:	89a3      	ldrh	r3, [r4, #12]
 801123c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011240:	81a3      	strh	r3, [r4, #12]
 8011242:	e7ad      	b.n	80111a0 <__sflush_r+0x1c>
 8011244:	690f      	ldr	r7, [r1, #16]
 8011246:	2f00      	cmp	r7, #0
 8011248:	d0a9      	beq.n	801119e <__sflush_r+0x1a>
 801124a:	0793      	lsls	r3, r2, #30
 801124c:	680e      	ldr	r6, [r1, #0]
 801124e:	bf08      	it	eq
 8011250:	694b      	ldreq	r3, [r1, #20]
 8011252:	600f      	str	r7, [r1, #0]
 8011254:	bf18      	it	ne
 8011256:	2300      	movne	r3, #0
 8011258:	eba6 0807 	sub.w	r8, r6, r7
 801125c:	608b      	str	r3, [r1, #8]
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	dd9c      	ble.n	801119e <__sflush_r+0x1a>
 8011264:	6a21      	ldr	r1, [r4, #32]
 8011266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011268:	4643      	mov	r3, r8
 801126a:	463a      	mov	r2, r7
 801126c:	4628      	mov	r0, r5
 801126e:	47b0      	blx	r6
 8011270:	2800      	cmp	r0, #0
 8011272:	dc06      	bgt.n	8011282 <__sflush_r+0xfe>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801127a:	81a3      	strh	r3, [r4, #12]
 801127c:	f04f 30ff 	mov.w	r0, #4294967295
 8011280:	e78e      	b.n	80111a0 <__sflush_r+0x1c>
 8011282:	4407      	add	r7, r0
 8011284:	eba8 0800 	sub.w	r8, r8, r0
 8011288:	e7e9      	b.n	801125e <__sflush_r+0xda>
 801128a:	bf00      	nop
 801128c:	20400001 	.word	0x20400001

08011290 <_fflush_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	690b      	ldr	r3, [r1, #16]
 8011294:	4605      	mov	r5, r0
 8011296:	460c      	mov	r4, r1
 8011298:	b913      	cbnz	r3, 80112a0 <_fflush_r+0x10>
 801129a:	2500      	movs	r5, #0
 801129c:	4628      	mov	r0, r5
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	b118      	cbz	r0, 80112aa <_fflush_r+0x1a>
 80112a2:	6983      	ldr	r3, [r0, #24]
 80112a4:	b90b      	cbnz	r3, 80112aa <_fflush_r+0x1a>
 80112a6:	f000 f887 	bl	80113b8 <__sinit>
 80112aa:	4b14      	ldr	r3, [pc, #80]	; (80112fc <_fflush_r+0x6c>)
 80112ac:	429c      	cmp	r4, r3
 80112ae:	d11b      	bne.n	80112e8 <_fflush_r+0x58>
 80112b0:	686c      	ldr	r4, [r5, #4]
 80112b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d0ef      	beq.n	801129a <_fflush_r+0xa>
 80112ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112bc:	07d0      	lsls	r0, r2, #31
 80112be:	d404      	bmi.n	80112ca <_fflush_r+0x3a>
 80112c0:	0599      	lsls	r1, r3, #22
 80112c2:	d402      	bmi.n	80112ca <_fflush_r+0x3a>
 80112c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112c6:	f000 fc88 	bl	8011bda <__retarget_lock_acquire_recursive>
 80112ca:	4628      	mov	r0, r5
 80112cc:	4621      	mov	r1, r4
 80112ce:	f7ff ff59 	bl	8011184 <__sflush_r>
 80112d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112d4:	07da      	lsls	r2, r3, #31
 80112d6:	4605      	mov	r5, r0
 80112d8:	d4e0      	bmi.n	801129c <_fflush_r+0xc>
 80112da:	89a3      	ldrh	r3, [r4, #12]
 80112dc:	059b      	lsls	r3, r3, #22
 80112de:	d4dd      	bmi.n	801129c <_fflush_r+0xc>
 80112e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112e2:	f000 fc7b 	bl	8011bdc <__retarget_lock_release_recursive>
 80112e6:	e7d9      	b.n	801129c <_fflush_r+0xc>
 80112e8:	4b05      	ldr	r3, [pc, #20]	; (8011300 <_fflush_r+0x70>)
 80112ea:	429c      	cmp	r4, r3
 80112ec:	d101      	bne.n	80112f2 <_fflush_r+0x62>
 80112ee:	68ac      	ldr	r4, [r5, #8]
 80112f0:	e7df      	b.n	80112b2 <_fflush_r+0x22>
 80112f2:	4b04      	ldr	r3, [pc, #16]	; (8011304 <_fflush_r+0x74>)
 80112f4:	429c      	cmp	r4, r3
 80112f6:	bf08      	it	eq
 80112f8:	68ec      	ldreq	r4, [r5, #12]
 80112fa:	e7da      	b.n	80112b2 <_fflush_r+0x22>
 80112fc:	08013e9c 	.word	0x08013e9c
 8011300:	08013ebc 	.word	0x08013ebc
 8011304:	08013e7c 	.word	0x08013e7c

08011308 <std>:
 8011308:	2300      	movs	r3, #0
 801130a:	b510      	push	{r4, lr}
 801130c:	4604      	mov	r4, r0
 801130e:	e9c0 3300 	strd	r3, r3, [r0]
 8011312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011316:	6083      	str	r3, [r0, #8]
 8011318:	8181      	strh	r1, [r0, #12]
 801131a:	6643      	str	r3, [r0, #100]	; 0x64
 801131c:	81c2      	strh	r2, [r0, #14]
 801131e:	6183      	str	r3, [r0, #24]
 8011320:	4619      	mov	r1, r3
 8011322:	2208      	movs	r2, #8
 8011324:	305c      	adds	r0, #92	; 0x5c
 8011326:	f7fd f867 	bl	800e3f8 <memset>
 801132a:	4b05      	ldr	r3, [pc, #20]	; (8011340 <std+0x38>)
 801132c:	6263      	str	r3, [r4, #36]	; 0x24
 801132e:	4b05      	ldr	r3, [pc, #20]	; (8011344 <std+0x3c>)
 8011330:	62a3      	str	r3, [r4, #40]	; 0x28
 8011332:	4b05      	ldr	r3, [pc, #20]	; (8011348 <std+0x40>)
 8011334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011336:	4b05      	ldr	r3, [pc, #20]	; (801134c <std+0x44>)
 8011338:	6224      	str	r4, [r4, #32]
 801133a:	6323      	str	r3, [r4, #48]	; 0x30
 801133c:	bd10      	pop	{r4, pc}
 801133e:	bf00      	nop
 8011340:	08012e09 	.word	0x08012e09
 8011344:	08012e2b 	.word	0x08012e2b
 8011348:	08012e63 	.word	0x08012e63
 801134c:	08012e87 	.word	0x08012e87

08011350 <_cleanup_r>:
 8011350:	4901      	ldr	r1, [pc, #4]	; (8011358 <_cleanup_r+0x8>)
 8011352:	f000 b8af 	b.w	80114b4 <_fwalk_reent>
 8011356:	bf00      	nop
 8011358:	08011291 	.word	0x08011291

0801135c <__sfmoreglue>:
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	2268      	movs	r2, #104	; 0x68
 8011360:	1e4d      	subs	r5, r1, #1
 8011362:	4355      	muls	r5, r2
 8011364:	460e      	mov	r6, r1
 8011366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801136a:	f001 fa09 	bl	8012780 <_malloc_r>
 801136e:	4604      	mov	r4, r0
 8011370:	b140      	cbz	r0, 8011384 <__sfmoreglue+0x28>
 8011372:	2100      	movs	r1, #0
 8011374:	e9c0 1600 	strd	r1, r6, [r0]
 8011378:	300c      	adds	r0, #12
 801137a:	60a0      	str	r0, [r4, #8]
 801137c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011380:	f7fd f83a 	bl	800e3f8 <memset>
 8011384:	4620      	mov	r0, r4
 8011386:	bd70      	pop	{r4, r5, r6, pc}

08011388 <__sfp_lock_acquire>:
 8011388:	4801      	ldr	r0, [pc, #4]	; (8011390 <__sfp_lock_acquire+0x8>)
 801138a:	f000 bc26 	b.w	8011bda <__retarget_lock_acquire_recursive>
 801138e:	bf00      	nop
 8011390:	20002e81 	.word	0x20002e81

08011394 <__sfp_lock_release>:
 8011394:	4801      	ldr	r0, [pc, #4]	; (801139c <__sfp_lock_release+0x8>)
 8011396:	f000 bc21 	b.w	8011bdc <__retarget_lock_release_recursive>
 801139a:	bf00      	nop
 801139c:	20002e81 	.word	0x20002e81

080113a0 <__sinit_lock_acquire>:
 80113a0:	4801      	ldr	r0, [pc, #4]	; (80113a8 <__sinit_lock_acquire+0x8>)
 80113a2:	f000 bc1a 	b.w	8011bda <__retarget_lock_acquire_recursive>
 80113a6:	bf00      	nop
 80113a8:	20002e82 	.word	0x20002e82

080113ac <__sinit_lock_release>:
 80113ac:	4801      	ldr	r0, [pc, #4]	; (80113b4 <__sinit_lock_release+0x8>)
 80113ae:	f000 bc15 	b.w	8011bdc <__retarget_lock_release_recursive>
 80113b2:	bf00      	nop
 80113b4:	20002e82 	.word	0x20002e82

080113b8 <__sinit>:
 80113b8:	b510      	push	{r4, lr}
 80113ba:	4604      	mov	r4, r0
 80113bc:	f7ff fff0 	bl	80113a0 <__sinit_lock_acquire>
 80113c0:	69a3      	ldr	r3, [r4, #24]
 80113c2:	b11b      	cbz	r3, 80113cc <__sinit+0x14>
 80113c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113c8:	f7ff bff0 	b.w	80113ac <__sinit_lock_release>
 80113cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80113d0:	6523      	str	r3, [r4, #80]	; 0x50
 80113d2:	4b13      	ldr	r3, [pc, #76]	; (8011420 <__sinit+0x68>)
 80113d4:	4a13      	ldr	r2, [pc, #76]	; (8011424 <__sinit+0x6c>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80113da:	42a3      	cmp	r3, r4
 80113dc:	bf04      	itt	eq
 80113de:	2301      	moveq	r3, #1
 80113e0:	61a3      	streq	r3, [r4, #24]
 80113e2:	4620      	mov	r0, r4
 80113e4:	f000 f820 	bl	8011428 <__sfp>
 80113e8:	6060      	str	r0, [r4, #4]
 80113ea:	4620      	mov	r0, r4
 80113ec:	f000 f81c 	bl	8011428 <__sfp>
 80113f0:	60a0      	str	r0, [r4, #8]
 80113f2:	4620      	mov	r0, r4
 80113f4:	f000 f818 	bl	8011428 <__sfp>
 80113f8:	2200      	movs	r2, #0
 80113fa:	60e0      	str	r0, [r4, #12]
 80113fc:	2104      	movs	r1, #4
 80113fe:	6860      	ldr	r0, [r4, #4]
 8011400:	f7ff ff82 	bl	8011308 <std>
 8011404:	68a0      	ldr	r0, [r4, #8]
 8011406:	2201      	movs	r2, #1
 8011408:	2109      	movs	r1, #9
 801140a:	f7ff ff7d 	bl	8011308 <std>
 801140e:	68e0      	ldr	r0, [r4, #12]
 8011410:	2202      	movs	r2, #2
 8011412:	2112      	movs	r1, #18
 8011414:	f7ff ff78 	bl	8011308 <std>
 8011418:	2301      	movs	r3, #1
 801141a:	61a3      	str	r3, [r4, #24]
 801141c:	e7d2      	b.n	80113c4 <__sinit+0xc>
 801141e:	bf00      	nop
 8011420:	08013c54 	.word	0x08013c54
 8011424:	08011351 	.word	0x08011351

08011428 <__sfp>:
 8011428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142a:	4607      	mov	r7, r0
 801142c:	f7ff ffac 	bl	8011388 <__sfp_lock_acquire>
 8011430:	4b1e      	ldr	r3, [pc, #120]	; (80114ac <__sfp+0x84>)
 8011432:	681e      	ldr	r6, [r3, #0]
 8011434:	69b3      	ldr	r3, [r6, #24]
 8011436:	b913      	cbnz	r3, 801143e <__sfp+0x16>
 8011438:	4630      	mov	r0, r6
 801143a:	f7ff ffbd 	bl	80113b8 <__sinit>
 801143e:	3648      	adds	r6, #72	; 0x48
 8011440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011444:	3b01      	subs	r3, #1
 8011446:	d503      	bpl.n	8011450 <__sfp+0x28>
 8011448:	6833      	ldr	r3, [r6, #0]
 801144a:	b30b      	cbz	r3, 8011490 <__sfp+0x68>
 801144c:	6836      	ldr	r6, [r6, #0]
 801144e:	e7f7      	b.n	8011440 <__sfp+0x18>
 8011450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011454:	b9d5      	cbnz	r5, 801148c <__sfp+0x64>
 8011456:	4b16      	ldr	r3, [pc, #88]	; (80114b0 <__sfp+0x88>)
 8011458:	60e3      	str	r3, [r4, #12]
 801145a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801145e:	6665      	str	r5, [r4, #100]	; 0x64
 8011460:	f000 fbba 	bl	8011bd8 <__retarget_lock_init_recursive>
 8011464:	f7ff ff96 	bl	8011394 <__sfp_lock_release>
 8011468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801146c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011470:	6025      	str	r5, [r4, #0]
 8011472:	61a5      	str	r5, [r4, #24]
 8011474:	2208      	movs	r2, #8
 8011476:	4629      	mov	r1, r5
 8011478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801147c:	f7fc ffbc 	bl	800e3f8 <memset>
 8011480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011488:	4620      	mov	r0, r4
 801148a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801148c:	3468      	adds	r4, #104	; 0x68
 801148e:	e7d9      	b.n	8011444 <__sfp+0x1c>
 8011490:	2104      	movs	r1, #4
 8011492:	4638      	mov	r0, r7
 8011494:	f7ff ff62 	bl	801135c <__sfmoreglue>
 8011498:	4604      	mov	r4, r0
 801149a:	6030      	str	r0, [r6, #0]
 801149c:	2800      	cmp	r0, #0
 801149e:	d1d5      	bne.n	801144c <__sfp+0x24>
 80114a0:	f7ff ff78 	bl	8011394 <__sfp_lock_release>
 80114a4:	230c      	movs	r3, #12
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	e7ee      	b.n	8011488 <__sfp+0x60>
 80114aa:	bf00      	nop
 80114ac:	08013c54 	.word	0x08013c54
 80114b0:	ffff0001 	.word	0xffff0001

080114b4 <_fwalk_reent>:
 80114b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b8:	4606      	mov	r6, r0
 80114ba:	4688      	mov	r8, r1
 80114bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114c0:	2700      	movs	r7, #0
 80114c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114c6:	f1b9 0901 	subs.w	r9, r9, #1
 80114ca:	d505      	bpl.n	80114d8 <_fwalk_reent+0x24>
 80114cc:	6824      	ldr	r4, [r4, #0]
 80114ce:	2c00      	cmp	r4, #0
 80114d0:	d1f7      	bne.n	80114c2 <_fwalk_reent+0xe>
 80114d2:	4638      	mov	r0, r7
 80114d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114d8:	89ab      	ldrh	r3, [r5, #12]
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d907      	bls.n	80114ee <_fwalk_reent+0x3a>
 80114de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114e2:	3301      	adds	r3, #1
 80114e4:	d003      	beq.n	80114ee <_fwalk_reent+0x3a>
 80114e6:	4629      	mov	r1, r5
 80114e8:	4630      	mov	r0, r6
 80114ea:	47c0      	blx	r8
 80114ec:	4307      	orrs	r7, r0
 80114ee:	3568      	adds	r5, #104	; 0x68
 80114f0:	e7e9      	b.n	80114c6 <_fwalk_reent+0x12>

080114f2 <rshift>:
 80114f2:	6903      	ldr	r3, [r0, #16]
 80114f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011500:	f100 0414 	add.w	r4, r0, #20
 8011504:	dd45      	ble.n	8011592 <rshift+0xa0>
 8011506:	f011 011f 	ands.w	r1, r1, #31
 801150a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801150e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011512:	d10c      	bne.n	801152e <rshift+0x3c>
 8011514:	f100 0710 	add.w	r7, r0, #16
 8011518:	4629      	mov	r1, r5
 801151a:	42b1      	cmp	r1, r6
 801151c:	d334      	bcc.n	8011588 <rshift+0x96>
 801151e:	1a9b      	subs	r3, r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	1eea      	subs	r2, r5, #3
 8011524:	4296      	cmp	r6, r2
 8011526:	bf38      	it	cc
 8011528:	2300      	movcc	r3, #0
 801152a:	4423      	add	r3, r4
 801152c:	e015      	b.n	801155a <rshift+0x68>
 801152e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011532:	f1c1 0820 	rsb	r8, r1, #32
 8011536:	40cf      	lsrs	r7, r1
 8011538:	f105 0e04 	add.w	lr, r5, #4
 801153c:	46a1      	mov	r9, r4
 801153e:	4576      	cmp	r6, lr
 8011540:	46f4      	mov	ip, lr
 8011542:	d815      	bhi.n	8011570 <rshift+0x7e>
 8011544:	1a9a      	subs	r2, r3, r2
 8011546:	0092      	lsls	r2, r2, #2
 8011548:	3a04      	subs	r2, #4
 801154a:	3501      	adds	r5, #1
 801154c:	42ae      	cmp	r6, r5
 801154e:	bf38      	it	cc
 8011550:	2200      	movcc	r2, #0
 8011552:	18a3      	adds	r3, r4, r2
 8011554:	50a7      	str	r7, [r4, r2]
 8011556:	b107      	cbz	r7, 801155a <rshift+0x68>
 8011558:	3304      	adds	r3, #4
 801155a:	1b1a      	subs	r2, r3, r4
 801155c:	42a3      	cmp	r3, r4
 801155e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011562:	bf08      	it	eq
 8011564:	2300      	moveq	r3, #0
 8011566:	6102      	str	r2, [r0, #16]
 8011568:	bf08      	it	eq
 801156a:	6143      	streq	r3, [r0, #20]
 801156c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011570:	f8dc c000 	ldr.w	ip, [ip]
 8011574:	fa0c fc08 	lsl.w	ip, ip, r8
 8011578:	ea4c 0707 	orr.w	r7, ip, r7
 801157c:	f849 7b04 	str.w	r7, [r9], #4
 8011580:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011584:	40cf      	lsrs	r7, r1
 8011586:	e7da      	b.n	801153e <rshift+0x4c>
 8011588:	f851 cb04 	ldr.w	ip, [r1], #4
 801158c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011590:	e7c3      	b.n	801151a <rshift+0x28>
 8011592:	4623      	mov	r3, r4
 8011594:	e7e1      	b.n	801155a <rshift+0x68>

08011596 <__hexdig_fun>:
 8011596:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801159a:	2b09      	cmp	r3, #9
 801159c:	d802      	bhi.n	80115a4 <__hexdig_fun+0xe>
 801159e:	3820      	subs	r0, #32
 80115a0:	b2c0      	uxtb	r0, r0
 80115a2:	4770      	bx	lr
 80115a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80115a8:	2b05      	cmp	r3, #5
 80115aa:	d801      	bhi.n	80115b0 <__hexdig_fun+0x1a>
 80115ac:	3847      	subs	r0, #71	; 0x47
 80115ae:	e7f7      	b.n	80115a0 <__hexdig_fun+0xa>
 80115b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80115b4:	2b05      	cmp	r3, #5
 80115b6:	d801      	bhi.n	80115bc <__hexdig_fun+0x26>
 80115b8:	3827      	subs	r0, #39	; 0x27
 80115ba:	e7f1      	b.n	80115a0 <__hexdig_fun+0xa>
 80115bc:	2000      	movs	r0, #0
 80115be:	4770      	bx	lr

080115c0 <__gethex>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	ed2d 8b02 	vpush	{d8}
 80115c8:	b089      	sub	sp, #36	; 0x24
 80115ca:	ee08 0a10 	vmov	s16, r0
 80115ce:	9304      	str	r3, [sp, #16]
 80115d0:	4bb4      	ldr	r3, [pc, #720]	; (80118a4 <__gethex+0x2e4>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	4618      	mov	r0, r3
 80115d8:	468b      	mov	fp, r1
 80115da:	4690      	mov	r8, r2
 80115dc:	f7ee fe18 	bl	8000210 <strlen>
 80115e0:	9b01      	ldr	r3, [sp, #4]
 80115e2:	f8db 2000 	ldr.w	r2, [fp]
 80115e6:	4403      	add	r3, r0
 80115e8:	4682      	mov	sl, r0
 80115ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80115ee:	9305      	str	r3, [sp, #20]
 80115f0:	1c93      	adds	r3, r2, #2
 80115f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80115f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80115fa:	32fe      	adds	r2, #254	; 0xfe
 80115fc:	18d1      	adds	r1, r2, r3
 80115fe:	461f      	mov	r7, r3
 8011600:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011604:	9100      	str	r1, [sp, #0]
 8011606:	2830      	cmp	r0, #48	; 0x30
 8011608:	d0f8      	beq.n	80115fc <__gethex+0x3c>
 801160a:	f7ff ffc4 	bl	8011596 <__hexdig_fun>
 801160e:	4604      	mov	r4, r0
 8011610:	2800      	cmp	r0, #0
 8011612:	d13a      	bne.n	801168a <__gethex+0xca>
 8011614:	9901      	ldr	r1, [sp, #4]
 8011616:	4652      	mov	r2, sl
 8011618:	4638      	mov	r0, r7
 801161a:	f001 fc38 	bl	8012e8e <strncmp>
 801161e:	4605      	mov	r5, r0
 8011620:	2800      	cmp	r0, #0
 8011622:	d168      	bne.n	80116f6 <__gethex+0x136>
 8011624:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011628:	eb07 060a 	add.w	r6, r7, sl
 801162c:	f7ff ffb3 	bl	8011596 <__hexdig_fun>
 8011630:	2800      	cmp	r0, #0
 8011632:	d062      	beq.n	80116fa <__gethex+0x13a>
 8011634:	4633      	mov	r3, r6
 8011636:	7818      	ldrb	r0, [r3, #0]
 8011638:	2830      	cmp	r0, #48	; 0x30
 801163a:	461f      	mov	r7, r3
 801163c:	f103 0301 	add.w	r3, r3, #1
 8011640:	d0f9      	beq.n	8011636 <__gethex+0x76>
 8011642:	f7ff ffa8 	bl	8011596 <__hexdig_fun>
 8011646:	2301      	movs	r3, #1
 8011648:	fab0 f480 	clz	r4, r0
 801164c:	0964      	lsrs	r4, r4, #5
 801164e:	4635      	mov	r5, r6
 8011650:	9300      	str	r3, [sp, #0]
 8011652:	463a      	mov	r2, r7
 8011654:	4616      	mov	r6, r2
 8011656:	3201      	adds	r2, #1
 8011658:	7830      	ldrb	r0, [r6, #0]
 801165a:	f7ff ff9c 	bl	8011596 <__hexdig_fun>
 801165e:	2800      	cmp	r0, #0
 8011660:	d1f8      	bne.n	8011654 <__gethex+0x94>
 8011662:	9901      	ldr	r1, [sp, #4]
 8011664:	4652      	mov	r2, sl
 8011666:	4630      	mov	r0, r6
 8011668:	f001 fc11 	bl	8012e8e <strncmp>
 801166c:	b980      	cbnz	r0, 8011690 <__gethex+0xd0>
 801166e:	b94d      	cbnz	r5, 8011684 <__gethex+0xc4>
 8011670:	eb06 050a 	add.w	r5, r6, sl
 8011674:	462a      	mov	r2, r5
 8011676:	4616      	mov	r6, r2
 8011678:	3201      	adds	r2, #1
 801167a:	7830      	ldrb	r0, [r6, #0]
 801167c:	f7ff ff8b 	bl	8011596 <__hexdig_fun>
 8011680:	2800      	cmp	r0, #0
 8011682:	d1f8      	bne.n	8011676 <__gethex+0xb6>
 8011684:	1bad      	subs	r5, r5, r6
 8011686:	00ad      	lsls	r5, r5, #2
 8011688:	e004      	b.n	8011694 <__gethex+0xd4>
 801168a:	2400      	movs	r4, #0
 801168c:	4625      	mov	r5, r4
 801168e:	e7e0      	b.n	8011652 <__gethex+0x92>
 8011690:	2d00      	cmp	r5, #0
 8011692:	d1f7      	bne.n	8011684 <__gethex+0xc4>
 8011694:	7833      	ldrb	r3, [r6, #0]
 8011696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801169a:	2b50      	cmp	r3, #80	; 0x50
 801169c:	d13b      	bne.n	8011716 <__gethex+0x156>
 801169e:	7873      	ldrb	r3, [r6, #1]
 80116a0:	2b2b      	cmp	r3, #43	; 0x2b
 80116a2:	d02c      	beq.n	80116fe <__gethex+0x13e>
 80116a4:	2b2d      	cmp	r3, #45	; 0x2d
 80116a6:	d02e      	beq.n	8011706 <__gethex+0x146>
 80116a8:	1c71      	adds	r1, r6, #1
 80116aa:	f04f 0900 	mov.w	r9, #0
 80116ae:	7808      	ldrb	r0, [r1, #0]
 80116b0:	f7ff ff71 	bl	8011596 <__hexdig_fun>
 80116b4:	1e43      	subs	r3, r0, #1
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b18      	cmp	r3, #24
 80116ba:	d82c      	bhi.n	8011716 <__gethex+0x156>
 80116bc:	f1a0 0210 	sub.w	r2, r0, #16
 80116c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116c4:	f7ff ff67 	bl	8011596 <__hexdig_fun>
 80116c8:	1e43      	subs	r3, r0, #1
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	2b18      	cmp	r3, #24
 80116ce:	d91d      	bls.n	801170c <__gethex+0x14c>
 80116d0:	f1b9 0f00 	cmp.w	r9, #0
 80116d4:	d000      	beq.n	80116d8 <__gethex+0x118>
 80116d6:	4252      	negs	r2, r2
 80116d8:	4415      	add	r5, r2
 80116da:	f8cb 1000 	str.w	r1, [fp]
 80116de:	b1e4      	cbz	r4, 801171a <__gethex+0x15a>
 80116e0:	9b00      	ldr	r3, [sp, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	bf14      	ite	ne
 80116e6:	2700      	movne	r7, #0
 80116e8:	2706      	moveq	r7, #6
 80116ea:	4638      	mov	r0, r7
 80116ec:	b009      	add	sp, #36	; 0x24
 80116ee:	ecbd 8b02 	vpop	{d8}
 80116f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f6:	463e      	mov	r6, r7
 80116f8:	4625      	mov	r5, r4
 80116fa:	2401      	movs	r4, #1
 80116fc:	e7ca      	b.n	8011694 <__gethex+0xd4>
 80116fe:	f04f 0900 	mov.w	r9, #0
 8011702:	1cb1      	adds	r1, r6, #2
 8011704:	e7d3      	b.n	80116ae <__gethex+0xee>
 8011706:	f04f 0901 	mov.w	r9, #1
 801170a:	e7fa      	b.n	8011702 <__gethex+0x142>
 801170c:	230a      	movs	r3, #10
 801170e:	fb03 0202 	mla	r2, r3, r2, r0
 8011712:	3a10      	subs	r2, #16
 8011714:	e7d4      	b.n	80116c0 <__gethex+0x100>
 8011716:	4631      	mov	r1, r6
 8011718:	e7df      	b.n	80116da <__gethex+0x11a>
 801171a:	1bf3      	subs	r3, r6, r7
 801171c:	3b01      	subs	r3, #1
 801171e:	4621      	mov	r1, r4
 8011720:	2b07      	cmp	r3, #7
 8011722:	dc0b      	bgt.n	801173c <__gethex+0x17c>
 8011724:	ee18 0a10 	vmov	r0, s16
 8011728:	f000 fae6 	bl	8011cf8 <_Balloc>
 801172c:	4604      	mov	r4, r0
 801172e:	b940      	cbnz	r0, 8011742 <__gethex+0x182>
 8011730:	4b5d      	ldr	r3, [pc, #372]	; (80118a8 <__gethex+0x2e8>)
 8011732:	4602      	mov	r2, r0
 8011734:	21de      	movs	r1, #222	; 0xde
 8011736:	485d      	ldr	r0, [pc, #372]	; (80118ac <__gethex+0x2ec>)
 8011738:	f001 fbdc 	bl	8012ef4 <__assert_func>
 801173c:	3101      	adds	r1, #1
 801173e:	105b      	asrs	r3, r3, #1
 8011740:	e7ee      	b.n	8011720 <__gethex+0x160>
 8011742:	f100 0914 	add.w	r9, r0, #20
 8011746:	f04f 0b00 	mov.w	fp, #0
 801174a:	f1ca 0301 	rsb	r3, sl, #1
 801174e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011752:	f8cd b000 	str.w	fp, [sp]
 8011756:	9306      	str	r3, [sp, #24]
 8011758:	42b7      	cmp	r7, r6
 801175a:	d340      	bcc.n	80117de <__gethex+0x21e>
 801175c:	9802      	ldr	r0, [sp, #8]
 801175e:	9b00      	ldr	r3, [sp, #0]
 8011760:	f840 3b04 	str.w	r3, [r0], #4
 8011764:	eba0 0009 	sub.w	r0, r0, r9
 8011768:	1080      	asrs	r0, r0, #2
 801176a:	0146      	lsls	r6, r0, #5
 801176c:	6120      	str	r0, [r4, #16]
 801176e:	4618      	mov	r0, r3
 8011770:	f000 fbb4 	bl	8011edc <__hi0bits>
 8011774:	1a30      	subs	r0, r6, r0
 8011776:	f8d8 6000 	ldr.w	r6, [r8]
 801177a:	42b0      	cmp	r0, r6
 801177c:	dd63      	ble.n	8011846 <__gethex+0x286>
 801177e:	1b87      	subs	r7, r0, r6
 8011780:	4639      	mov	r1, r7
 8011782:	4620      	mov	r0, r4
 8011784:	f000 ff58 	bl	8012638 <__any_on>
 8011788:	4682      	mov	sl, r0
 801178a:	b1a8      	cbz	r0, 80117b8 <__gethex+0x1f8>
 801178c:	1e7b      	subs	r3, r7, #1
 801178e:	1159      	asrs	r1, r3, #5
 8011790:	f003 021f 	and.w	r2, r3, #31
 8011794:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011798:	f04f 0a01 	mov.w	sl, #1
 801179c:	fa0a f202 	lsl.w	r2, sl, r2
 80117a0:	420a      	tst	r2, r1
 80117a2:	d009      	beq.n	80117b8 <__gethex+0x1f8>
 80117a4:	4553      	cmp	r3, sl
 80117a6:	dd05      	ble.n	80117b4 <__gethex+0x1f4>
 80117a8:	1eb9      	subs	r1, r7, #2
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 ff44 	bl	8012638 <__any_on>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d145      	bne.n	8011840 <__gethex+0x280>
 80117b4:	f04f 0a02 	mov.w	sl, #2
 80117b8:	4639      	mov	r1, r7
 80117ba:	4620      	mov	r0, r4
 80117bc:	f7ff fe99 	bl	80114f2 <rshift>
 80117c0:	443d      	add	r5, r7
 80117c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117c6:	42ab      	cmp	r3, r5
 80117c8:	da4c      	bge.n	8011864 <__gethex+0x2a4>
 80117ca:	ee18 0a10 	vmov	r0, s16
 80117ce:	4621      	mov	r1, r4
 80117d0:	f000 fad2 	bl	8011d78 <_Bfree>
 80117d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117d6:	2300      	movs	r3, #0
 80117d8:	6013      	str	r3, [r2, #0]
 80117da:	27a3      	movs	r7, #163	; 0xa3
 80117dc:	e785      	b.n	80116ea <__gethex+0x12a>
 80117de:	1e73      	subs	r3, r6, #1
 80117e0:	9a05      	ldr	r2, [sp, #20]
 80117e2:	9303      	str	r3, [sp, #12]
 80117e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d019      	beq.n	8011820 <__gethex+0x260>
 80117ec:	f1bb 0f20 	cmp.w	fp, #32
 80117f0:	d107      	bne.n	8011802 <__gethex+0x242>
 80117f2:	9b02      	ldr	r3, [sp, #8]
 80117f4:	9a00      	ldr	r2, [sp, #0]
 80117f6:	f843 2b04 	str.w	r2, [r3], #4
 80117fa:	9302      	str	r3, [sp, #8]
 80117fc:	2300      	movs	r3, #0
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	469b      	mov	fp, r3
 8011802:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011806:	f7ff fec6 	bl	8011596 <__hexdig_fun>
 801180a:	9b00      	ldr	r3, [sp, #0]
 801180c:	f000 000f 	and.w	r0, r0, #15
 8011810:	fa00 f00b 	lsl.w	r0, r0, fp
 8011814:	4303      	orrs	r3, r0
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	f10b 0b04 	add.w	fp, fp, #4
 801181c:	9b03      	ldr	r3, [sp, #12]
 801181e:	e00d      	b.n	801183c <__gethex+0x27c>
 8011820:	9b03      	ldr	r3, [sp, #12]
 8011822:	9a06      	ldr	r2, [sp, #24]
 8011824:	4413      	add	r3, r2
 8011826:	42bb      	cmp	r3, r7
 8011828:	d3e0      	bcc.n	80117ec <__gethex+0x22c>
 801182a:	4618      	mov	r0, r3
 801182c:	9901      	ldr	r1, [sp, #4]
 801182e:	9307      	str	r3, [sp, #28]
 8011830:	4652      	mov	r2, sl
 8011832:	f001 fb2c 	bl	8012e8e <strncmp>
 8011836:	9b07      	ldr	r3, [sp, #28]
 8011838:	2800      	cmp	r0, #0
 801183a:	d1d7      	bne.n	80117ec <__gethex+0x22c>
 801183c:	461e      	mov	r6, r3
 801183e:	e78b      	b.n	8011758 <__gethex+0x198>
 8011840:	f04f 0a03 	mov.w	sl, #3
 8011844:	e7b8      	b.n	80117b8 <__gethex+0x1f8>
 8011846:	da0a      	bge.n	801185e <__gethex+0x29e>
 8011848:	1a37      	subs	r7, r6, r0
 801184a:	4621      	mov	r1, r4
 801184c:	ee18 0a10 	vmov	r0, s16
 8011850:	463a      	mov	r2, r7
 8011852:	f000 fcad 	bl	80121b0 <__lshift>
 8011856:	1bed      	subs	r5, r5, r7
 8011858:	4604      	mov	r4, r0
 801185a:	f100 0914 	add.w	r9, r0, #20
 801185e:	f04f 0a00 	mov.w	sl, #0
 8011862:	e7ae      	b.n	80117c2 <__gethex+0x202>
 8011864:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011868:	42a8      	cmp	r0, r5
 801186a:	dd72      	ble.n	8011952 <__gethex+0x392>
 801186c:	1b45      	subs	r5, r0, r5
 801186e:	42ae      	cmp	r6, r5
 8011870:	dc36      	bgt.n	80118e0 <__gethex+0x320>
 8011872:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011876:	2b02      	cmp	r3, #2
 8011878:	d02a      	beq.n	80118d0 <__gethex+0x310>
 801187a:	2b03      	cmp	r3, #3
 801187c:	d02c      	beq.n	80118d8 <__gethex+0x318>
 801187e:	2b01      	cmp	r3, #1
 8011880:	d11c      	bne.n	80118bc <__gethex+0x2fc>
 8011882:	42ae      	cmp	r6, r5
 8011884:	d11a      	bne.n	80118bc <__gethex+0x2fc>
 8011886:	2e01      	cmp	r6, #1
 8011888:	d112      	bne.n	80118b0 <__gethex+0x2f0>
 801188a:	9a04      	ldr	r2, [sp, #16]
 801188c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011890:	6013      	str	r3, [r2, #0]
 8011892:	2301      	movs	r3, #1
 8011894:	6123      	str	r3, [r4, #16]
 8011896:	f8c9 3000 	str.w	r3, [r9]
 801189a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801189c:	2762      	movs	r7, #98	; 0x62
 801189e:	601c      	str	r4, [r3, #0]
 80118a0:	e723      	b.n	80116ea <__gethex+0x12a>
 80118a2:	bf00      	nop
 80118a4:	08013f44 	.word	0x08013f44
 80118a8:	08013e68 	.word	0x08013e68
 80118ac:	08013edc 	.word	0x08013edc
 80118b0:	1e71      	subs	r1, r6, #1
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 fec0 	bl	8012638 <__any_on>
 80118b8:	2800      	cmp	r0, #0
 80118ba:	d1e6      	bne.n	801188a <__gethex+0x2ca>
 80118bc:	ee18 0a10 	vmov	r0, s16
 80118c0:	4621      	mov	r1, r4
 80118c2:	f000 fa59 	bl	8011d78 <_Bfree>
 80118c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118c8:	2300      	movs	r3, #0
 80118ca:	6013      	str	r3, [r2, #0]
 80118cc:	2750      	movs	r7, #80	; 0x50
 80118ce:	e70c      	b.n	80116ea <__gethex+0x12a>
 80118d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1f2      	bne.n	80118bc <__gethex+0x2fc>
 80118d6:	e7d8      	b.n	801188a <__gethex+0x2ca>
 80118d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1d5      	bne.n	801188a <__gethex+0x2ca>
 80118de:	e7ed      	b.n	80118bc <__gethex+0x2fc>
 80118e0:	1e6f      	subs	r7, r5, #1
 80118e2:	f1ba 0f00 	cmp.w	sl, #0
 80118e6:	d131      	bne.n	801194c <__gethex+0x38c>
 80118e8:	b127      	cbz	r7, 80118f4 <__gethex+0x334>
 80118ea:	4639      	mov	r1, r7
 80118ec:	4620      	mov	r0, r4
 80118ee:	f000 fea3 	bl	8012638 <__any_on>
 80118f2:	4682      	mov	sl, r0
 80118f4:	117b      	asrs	r3, r7, #5
 80118f6:	2101      	movs	r1, #1
 80118f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80118fc:	f007 071f 	and.w	r7, r7, #31
 8011900:	fa01 f707 	lsl.w	r7, r1, r7
 8011904:	421f      	tst	r7, r3
 8011906:	4629      	mov	r1, r5
 8011908:	4620      	mov	r0, r4
 801190a:	bf18      	it	ne
 801190c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011910:	1b76      	subs	r6, r6, r5
 8011912:	f7ff fdee 	bl	80114f2 <rshift>
 8011916:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801191a:	2702      	movs	r7, #2
 801191c:	f1ba 0f00 	cmp.w	sl, #0
 8011920:	d048      	beq.n	80119b4 <__gethex+0x3f4>
 8011922:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011926:	2b02      	cmp	r3, #2
 8011928:	d015      	beq.n	8011956 <__gethex+0x396>
 801192a:	2b03      	cmp	r3, #3
 801192c:	d017      	beq.n	801195e <__gethex+0x39e>
 801192e:	2b01      	cmp	r3, #1
 8011930:	d109      	bne.n	8011946 <__gethex+0x386>
 8011932:	f01a 0f02 	tst.w	sl, #2
 8011936:	d006      	beq.n	8011946 <__gethex+0x386>
 8011938:	f8d9 0000 	ldr.w	r0, [r9]
 801193c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011940:	f01a 0f01 	tst.w	sl, #1
 8011944:	d10e      	bne.n	8011964 <__gethex+0x3a4>
 8011946:	f047 0710 	orr.w	r7, r7, #16
 801194a:	e033      	b.n	80119b4 <__gethex+0x3f4>
 801194c:	f04f 0a01 	mov.w	sl, #1
 8011950:	e7d0      	b.n	80118f4 <__gethex+0x334>
 8011952:	2701      	movs	r7, #1
 8011954:	e7e2      	b.n	801191c <__gethex+0x35c>
 8011956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011958:	f1c3 0301 	rsb	r3, r3, #1
 801195c:	9315      	str	r3, [sp, #84]	; 0x54
 801195e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011960:	2b00      	cmp	r3, #0
 8011962:	d0f0      	beq.n	8011946 <__gethex+0x386>
 8011964:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011968:	f104 0314 	add.w	r3, r4, #20
 801196c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011970:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011974:	f04f 0c00 	mov.w	ip, #0
 8011978:	4618      	mov	r0, r3
 801197a:	f853 2b04 	ldr.w	r2, [r3], #4
 801197e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011982:	d01c      	beq.n	80119be <__gethex+0x3fe>
 8011984:	3201      	adds	r2, #1
 8011986:	6002      	str	r2, [r0, #0]
 8011988:	2f02      	cmp	r7, #2
 801198a:	f104 0314 	add.w	r3, r4, #20
 801198e:	d13f      	bne.n	8011a10 <__gethex+0x450>
 8011990:	f8d8 2000 	ldr.w	r2, [r8]
 8011994:	3a01      	subs	r2, #1
 8011996:	42b2      	cmp	r2, r6
 8011998:	d10a      	bne.n	80119b0 <__gethex+0x3f0>
 801199a:	1171      	asrs	r1, r6, #5
 801199c:	2201      	movs	r2, #1
 801199e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119a2:	f006 061f 	and.w	r6, r6, #31
 80119a6:	fa02 f606 	lsl.w	r6, r2, r6
 80119aa:	421e      	tst	r6, r3
 80119ac:	bf18      	it	ne
 80119ae:	4617      	movne	r7, r2
 80119b0:	f047 0720 	orr.w	r7, r7, #32
 80119b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119b6:	601c      	str	r4, [r3, #0]
 80119b8:	9b04      	ldr	r3, [sp, #16]
 80119ba:	601d      	str	r5, [r3, #0]
 80119bc:	e695      	b.n	80116ea <__gethex+0x12a>
 80119be:	4299      	cmp	r1, r3
 80119c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80119c4:	d8d8      	bhi.n	8011978 <__gethex+0x3b8>
 80119c6:	68a3      	ldr	r3, [r4, #8]
 80119c8:	459b      	cmp	fp, r3
 80119ca:	db19      	blt.n	8011a00 <__gethex+0x440>
 80119cc:	6861      	ldr	r1, [r4, #4]
 80119ce:	ee18 0a10 	vmov	r0, s16
 80119d2:	3101      	adds	r1, #1
 80119d4:	f000 f990 	bl	8011cf8 <_Balloc>
 80119d8:	4681      	mov	r9, r0
 80119da:	b918      	cbnz	r0, 80119e4 <__gethex+0x424>
 80119dc:	4b1a      	ldr	r3, [pc, #104]	; (8011a48 <__gethex+0x488>)
 80119de:	4602      	mov	r2, r0
 80119e0:	2184      	movs	r1, #132	; 0x84
 80119e2:	e6a8      	b.n	8011736 <__gethex+0x176>
 80119e4:	6922      	ldr	r2, [r4, #16]
 80119e6:	3202      	adds	r2, #2
 80119e8:	f104 010c 	add.w	r1, r4, #12
 80119ec:	0092      	lsls	r2, r2, #2
 80119ee:	300c      	adds	r0, #12
 80119f0:	f000 f974 	bl	8011cdc <memcpy>
 80119f4:	4621      	mov	r1, r4
 80119f6:	ee18 0a10 	vmov	r0, s16
 80119fa:	f000 f9bd 	bl	8011d78 <_Bfree>
 80119fe:	464c      	mov	r4, r9
 8011a00:	6923      	ldr	r3, [r4, #16]
 8011a02:	1c5a      	adds	r2, r3, #1
 8011a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a08:	6122      	str	r2, [r4, #16]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	615a      	str	r2, [r3, #20]
 8011a0e:	e7bb      	b.n	8011988 <__gethex+0x3c8>
 8011a10:	6922      	ldr	r2, [r4, #16]
 8011a12:	455a      	cmp	r2, fp
 8011a14:	dd0b      	ble.n	8011a2e <__gethex+0x46e>
 8011a16:	2101      	movs	r1, #1
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff fd6a 	bl	80114f2 <rshift>
 8011a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a22:	3501      	adds	r5, #1
 8011a24:	42ab      	cmp	r3, r5
 8011a26:	f6ff aed0 	blt.w	80117ca <__gethex+0x20a>
 8011a2a:	2701      	movs	r7, #1
 8011a2c:	e7c0      	b.n	80119b0 <__gethex+0x3f0>
 8011a2e:	f016 061f 	ands.w	r6, r6, #31
 8011a32:	d0fa      	beq.n	8011a2a <__gethex+0x46a>
 8011a34:	4453      	add	r3, sl
 8011a36:	f1c6 0620 	rsb	r6, r6, #32
 8011a3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a3e:	f000 fa4d 	bl	8011edc <__hi0bits>
 8011a42:	42b0      	cmp	r0, r6
 8011a44:	dbe7      	blt.n	8011a16 <__gethex+0x456>
 8011a46:	e7f0      	b.n	8011a2a <__gethex+0x46a>
 8011a48:	08013e68 	.word	0x08013e68

08011a4c <L_shift>:
 8011a4c:	f1c2 0208 	rsb	r2, r2, #8
 8011a50:	0092      	lsls	r2, r2, #2
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	f1c2 0620 	rsb	r6, r2, #32
 8011a58:	6843      	ldr	r3, [r0, #4]
 8011a5a:	6804      	ldr	r4, [r0, #0]
 8011a5c:	fa03 f506 	lsl.w	r5, r3, r6
 8011a60:	432c      	orrs	r4, r5
 8011a62:	40d3      	lsrs	r3, r2
 8011a64:	6004      	str	r4, [r0, #0]
 8011a66:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a6a:	4288      	cmp	r0, r1
 8011a6c:	d3f4      	bcc.n	8011a58 <L_shift+0xc>
 8011a6e:	bd70      	pop	{r4, r5, r6, pc}

08011a70 <__match>:
 8011a70:	b530      	push	{r4, r5, lr}
 8011a72:	6803      	ldr	r3, [r0, #0]
 8011a74:	3301      	adds	r3, #1
 8011a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a7a:	b914      	cbnz	r4, 8011a82 <__match+0x12>
 8011a7c:	6003      	str	r3, [r0, #0]
 8011a7e:	2001      	movs	r0, #1
 8011a80:	bd30      	pop	{r4, r5, pc}
 8011a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a8a:	2d19      	cmp	r5, #25
 8011a8c:	bf98      	it	ls
 8011a8e:	3220      	addls	r2, #32
 8011a90:	42a2      	cmp	r2, r4
 8011a92:	d0f0      	beq.n	8011a76 <__match+0x6>
 8011a94:	2000      	movs	r0, #0
 8011a96:	e7f3      	b.n	8011a80 <__match+0x10>

08011a98 <__hexnan>:
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	680b      	ldr	r3, [r1, #0]
 8011a9e:	115e      	asrs	r6, r3, #5
 8011aa0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011aa4:	f013 031f 	ands.w	r3, r3, #31
 8011aa8:	b087      	sub	sp, #28
 8011aaa:	bf18      	it	ne
 8011aac:	3604      	addne	r6, #4
 8011aae:	2500      	movs	r5, #0
 8011ab0:	1f37      	subs	r7, r6, #4
 8011ab2:	4690      	mov	r8, r2
 8011ab4:	6802      	ldr	r2, [r0, #0]
 8011ab6:	9301      	str	r3, [sp, #4]
 8011ab8:	4682      	mov	sl, r0
 8011aba:	f846 5c04 	str.w	r5, [r6, #-4]
 8011abe:	46b9      	mov	r9, r7
 8011ac0:	463c      	mov	r4, r7
 8011ac2:	9502      	str	r5, [sp, #8]
 8011ac4:	46ab      	mov	fp, r5
 8011ac6:	7851      	ldrb	r1, [r2, #1]
 8011ac8:	1c53      	adds	r3, r2, #1
 8011aca:	9303      	str	r3, [sp, #12]
 8011acc:	b341      	cbz	r1, 8011b20 <__hexnan+0x88>
 8011ace:	4608      	mov	r0, r1
 8011ad0:	9205      	str	r2, [sp, #20]
 8011ad2:	9104      	str	r1, [sp, #16]
 8011ad4:	f7ff fd5f 	bl	8011596 <__hexdig_fun>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d14f      	bne.n	8011b7c <__hexnan+0xe4>
 8011adc:	9904      	ldr	r1, [sp, #16]
 8011ade:	9a05      	ldr	r2, [sp, #20]
 8011ae0:	2920      	cmp	r1, #32
 8011ae2:	d818      	bhi.n	8011b16 <__hexnan+0x7e>
 8011ae4:	9b02      	ldr	r3, [sp, #8]
 8011ae6:	459b      	cmp	fp, r3
 8011ae8:	dd13      	ble.n	8011b12 <__hexnan+0x7a>
 8011aea:	454c      	cmp	r4, r9
 8011aec:	d206      	bcs.n	8011afc <__hexnan+0x64>
 8011aee:	2d07      	cmp	r5, #7
 8011af0:	dc04      	bgt.n	8011afc <__hexnan+0x64>
 8011af2:	462a      	mov	r2, r5
 8011af4:	4649      	mov	r1, r9
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff ffa8 	bl	8011a4c <L_shift>
 8011afc:	4544      	cmp	r4, r8
 8011afe:	d950      	bls.n	8011ba2 <__hexnan+0x10a>
 8011b00:	2300      	movs	r3, #0
 8011b02:	f1a4 0904 	sub.w	r9, r4, #4
 8011b06:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b0a:	f8cd b008 	str.w	fp, [sp, #8]
 8011b0e:	464c      	mov	r4, r9
 8011b10:	461d      	mov	r5, r3
 8011b12:	9a03      	ldr	r2, [sp, #12]
 8011b14:	e7d7      	b.n	8011ac6 <__hexnan+0x2e>
 8011b16:	2929      	cmp	r1, #41	; 0x29
 8011b18:	d156      	bne.n	8011bc8 <__hexnan+0x130>
 8011b1a:	3202      	adds	r2, #2
 8011b1c:	f8ca 2000 	str.w	r2, [sl]
 8011b20:	f1bb 0f00 	cmp.w	fp, #0
 8011b24:	d050      	beq.n	8011bc8 <__hexnan+0x130>
 8011b26:	454c      	cmp	r4, r9
 8011b28:	d206      	bcs.n	8011b38 <__hexnan+0xa0>
 8011b2a:	2d07      	cmp	r5, #7
 8011b2c:	dc04      	bgt.n	8011b38 <__hexnan+0xa0>
 8011b2e:	462a      	mov	r2, r5
 8011b30:	4649      	mov	r1, r9
 8011b32:	4620      	mov	r0, r4
 8011b34:	f7ff ff8a 	bl	8011a4c <L_shift>
 8011b38:	4544      	cmp	r4, r8
 8011b3a:	d934      	bls.n	8011ba6 <__hexnan+0x10e>
 8011b3c:	f1a8 0204 	sub.w	r2, r8, #4
 8011b40:	4623      	mov	r3, r4
 8011b42:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b46:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b4a:	429f      	cmp	r7, r3
 8011b4c:	d2f9      	bcs.n	8011b42 <__hexnan+0xaa>
 8011b4e:	1b3b      	subs	r3, r7, r4
 8011b50:	f023 0303 	bic.w	r3, r3, #3
 8011b54:	3304      	adds	r3, #4
 8011b56:	3401      	adds	r4, #1
 8011b58:	3e03      	subs	r6, #3
 8011b5a:	42b4      	cmp	r4, r6
 8011b5c:	bf88      	it	hi
 8011b5e:	2304      	movhi	r3, #4
 8011b60:	4443      	add	r3, r8
 8011b62:	2200      	movs	r2, #0
 8011b64:	f843 2b04 	str.w	r2, [r3], #4
 8011b68:	429f      	cmp	r7, r3
 8011b6a:	d2fb      	bcs.n	8011b64 <__hexnan+0xcc>
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	b91b      	cbnz	r3, 8011b78 <__hexnan+0xe0>
 8011b70:	4547      	cmp	r7, r8
 8011b72:	d127      	bne.n	8011bc4 <__hexnan+0x12c>
 8011b74:	2301      	movs	r3, #1
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	2005      	movs	r0, #5
 8011b7a:	e026      	b.n	8011bca <__hexnan+0x132>
 8011b7c:	3501      	adds	r5, #1
 8011b7e:	2d08      	cmp	r5, #8
 8011b80:	f10b 0b01 	add.w	fp, fp, #1
 8011b84:	dd06      	ble.n	8011b94 <__hexnan+0xfc>
 8011b86:	4544      	cmp	r4, r8
 8011b88:	d9c3      	bls.n	8011b12 <__hexnan+0x7a>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b90:	2501      	movs	r5, #1
 8011b92:	3c04      	subs	r4, #4
 8011b94:	6822      	ldr	r2, [r4, #0]
 8011b96:	f000 000f 	and.w	r0, r0, #15
 8011b9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b9e:	6022      	str	r2, [r4, #0]
 8011ba0:	e7b7      	b.n	8011b12 <__hexnan+0x7a>
 8011ba2:	2508      	movs	r5, #8
 8011ba4:	e7b5      	b.n	8011b12 <__hexnan+0x7a>
 8011ba6:	9b01      	ldr	r3, [sp, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d0df      	beq.n	8011b6c <__hexnan+0xd4>
 8011bac:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb0:	f1c3 0320 	rsb	r3, r3, #32
 8011bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8011bb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bbc:	401a      	ands	r2, r3
 8011bbe:	f846 2c04 	str.w	r2, [r6, #-4]
 8011bc2:	e7d3      	b.n	8011b6c <__hexnan+0xd4>
 8011bc4:	3f04      	subs	r7, #4
 8011bc6:	e7d1      	b.n	8011b6c <__hexnan+0xd4>
 8011bc8:	2004      	movs	r0, #4
 8011bca:	b007      	add	sp, #28
 8011bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bd0 <_localeconv_r>:
 8011bd0:	4800      	ldr	r0, [pc, #0]	; (8011bd4 <_localeconv_r+0x4>)
 8011bd2:	4770      	bx	lr
 8011bd4:	200001ac 	.word	0x200001ac

08011bd8 <__retarget_lock_init_recursive>:
 8011bd8:	4770      	bx	lr

08011bda <__retarget_lock_acquire_recursive>:
 8011bda:	4770      	bx	lr

08011bdc <__retarget_lock_release_recursive>:
 8011bdc:	4770      	bx	lr

08011bde <__swhatbuf_r>:
 8011bde:	b570      	push	{r4, r5, r6, lr}
 8011be0:	460e      	mov	r6, r1
 8011be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be6:	2900      	cmp	r1, #0
 8011be8:	b096      	sub	sp, #88	; 0x58
 8011bea:	4614      	mov	r4, r2
 8011bec:	461d      	mov	r5, r3
 8011bee:	da08      	bge.n	8011c02 <__swhatbuf_r+0x24>
 8011bf0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	602a      	str	r2, [r5, #0]
 8011bf8:	061a      	lsls	r2, r3, #24
 8011bfa:	d410      	bmi.n	8011c1e <__swhatbuf_r+0x40>
 8011bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c00:	e00e      	b.n	8011c20 <__swhatbuf_r+0x42>
 8011c02:	466a      	mov	r2, sp
 8011c04:	f001 f9b6 	bl	8012f74 <_fstat_r>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	dbf1      	blt.n	8011bf0 <__swhatbuf_r+0x12>
 8011c0c:	9a01      	ldr	r2, [sp, #4]
 8011c0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c16:	425a      	negs	r2, r3
 8011c18:	415a      	adcs	r2, r3
 8011c1a:	602a      	str	r2, [r5, #0]
 8011c1c:	e7ee      	b.n	8011bfc <__swhatbuf_r+0x1e>
 8011c1e:	2340      	movs	r3, #64	; 0x40
 8011c20:	2000      	movs	r0, #0
 8011c22:	6023      	str	r3, [r4, #0]
 8011c24:	b016      	add	sp, #88	; 0x58
 8011c26:	bd70      	pop	{r4, r5, r6, pc}

08011c28 <__smakebuf_r>:
 8011c28:	898b      	ldrh	r3, [r1, #12]
 8011c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c2c:	079d      	lsls	r5, r3, #30
 8011c2e:	4606      	mov	r6, r0
 8011c30:	460c      	mov	r4, r1
 8011c32:	d507      	bpl.n	8011c44 <__smakebuf_r+0x1c>
 8011c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c38:	6023      	str	r3, [r4, #0]
 8011c3a:	6123      	str	r3, [r4, #16]
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	6163      	str	r3, [r4, #20]
 8011c40:	b002      	add	sp, #8
 8011c42:	bd70      	pop	{r4, r5, r6, pc}
 8011c44:	ab01      	add	r3, sp, #4
 8011c46:	466a      	mov	r2, sp
 8011c48:	f7ff ffc9 	bl	8011bde <__swhatbuf_r>
 8011c4c:	9900      	ldr	r1, [sp, #0]
 8011c4e:	4605      	mov	r5, r0
 8011c50:	4630      	mov	r0, r6
 8011c52:	f000 fd95 	bl	8012780 <_malloc_r>
 8011c56:	b948      	cbnz	r0, 8011c6c <__smakebuf_r+0x44>
 8011c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c5c:	059a      	lsls	r2, r3, #22
 8011c5e:	d4ef      	bmi.n	8011c40 <__smakebuf_r+0x18>
 8011c60:	f023 0303 	bic.w	r3, r3, #3
 8011c64:	f043 0302 	orr.w	r3, r3, #2
 8011c68:	81a3      	strh	r3, [r4, #12]
 8011c6a:	e7e3      	b.n	8011c34 <__smakebuf_r+0xc>
 8011c6c:	4b0d      	ldr	r3, [pc, #52]	; (8011ca4 <__smakebuf_r+0x7c>)
 8011c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	6020      	str	r0, [r4, #0]
 8011c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c78:	81a3      	strh	r3, [r4, #12]
 8011c7a:	9b00      	ldr	r3, [sp, #0]
 8011c7c:	6163      	str	r3, [r4, #20]
 8011c7e:	9b01      	ldr	r3, [sp, #4]
 8011c80:	6120      	str	r0, [r4, #16]
 8011c82:	b15b      	cbz	r3, 8011c9c <__smakebuf_r+0x74>
 8011c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f001 f985 	bl	8012f98 <_isatty_r>
 8011c8e:	b128      	cbz	r0, 8011c9c <__smakebuf_r+0x74>
 8011c90:	89a3      	ldrh	r3, [r4, #12]
 8011c92:	f023 0303 	bic.w	r3, r3, #3
 8011c96:	f043 0301 	orr.w	r3, r3, #1
 8011c9a:	81a3      	strh	r3, [r4, #12]
 8011c9c:	89a0      	ldrh	r0, [r4, #12]
 8011c9e:	4305      	orrs	r5, r0
 8011ca0:	81a5      	strh	r5, [r4, #12]
 8011ca2:	e7cd      	b.n	8011c40 <__smakebuf_r+0x18>
 8011ca4:	08011351 	.word	0x08011351

08011ca8 <malloc>:
 8011ca8:	4b02      	ldr	r3, [pc, #8]	; (8011cb4 <malloc+0xc>)
 8011caa:	4601      	mov	r1, r0
 8011cac:	6818      	ldr	r0, [r3, #0]
 8011cae:	f000 bd67 	b.w	8012780 <_malloc_r>
 8011cb2:	bf00      	nop
 8011cb4:	20000054 	.word	0x20000054

08011cb8 <__ascii_mbtowc>:
 8011cb8:	b082      	sub	sp, #8
 8011cba:	b901      	cbnz	r1, 8011cbe <__ascii_mbtowc+0x6>
 8011cbc:	a901      	add	r1, sp, #4
 8011cbe:	b142      	cbz	r2, 8011cd2 <__ascii_mbtowc+0x1a>
 8011cc0:	b14b      	cbz	r3, 8011cd6 <__ascii_mbtowc+0x1e>
 8011cc2:	7813      	ldrb	r3, [r2, #0]
 8011cc4:	600b      	str	r3, [r1, #0]
 8011cc6:	7812      	ldrb	r2, [r2, #0]
 8011cc8:	1e10      	subs	r0, r2, #0
 8011cca:	bf18      	it	ne
 8011ccc:	2001      	movne	r0, #1
 8011cce:	b002      	add	sp, #8
 8011cd0:	4770      	bx	lr
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	e7fb      	b.n	8011cce <__ascii_mbtowc+0x16>
 8011cd6:	f06f 0001 	mvn.w	r0, #1
 8011cda:	e7f8      	b.n	8011cce <__ascii_mbtowc+0x16>

08011cdc <memcpy>:
 8011cdc:	440a      	add	r2, r1
 8011cde:	4291      	cmp	r1, r2
 8011ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ce4:	d100      	bne.n	8011ce8 <memcpy+0xc>
 8011ce6:	4770      	bx	lr
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cf2:	4291      	cmp	r1, r2
 8011cf4:	d1f9      	bne.n	8011cea <memcpy+0xe>
 8011cf6:	bd10      	pop	{r4, pc}

08011cf8 <_Balloc>:
 8011cf8:	b570      	push	{r4, r5, r6, lr}
 8011cfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	460d      	mov	r5, r1
 8011d00:	b976      	cbnz	r6, 8011d20 <_Balloc+0x28>
 8011d02:	2010      	movs	r0, #16
 8011d04:	f7ff ffd0 	bl	8011ca8 <malloc>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	6260      	str	r0, [r4, #36]	; 0x24
 8011d0c:	b920      	cbnz	r0, 8011d18 <_Balloc+0x20>
 8011d0e:	4b18      	ldr	r3, [pc, #96]	; (8011d70 <_Balloc+0x78>)
 8011d10:	4818      	ldr	r0, [pc, #96]	; (8011d74 <_Balloc+0x7c>)
 8011d12:	2166      	movs	r1, #102	; 0x66
 8011d14:	f001 f8ee 	bl	8012ef4 <__assert_func>
 8011d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d1c:	6006      	str	r6, [r0, #0]
 8011d1e:	60c6      	str	r6, [r0, #12]
 8011d20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d22:	68f3      	ldr	r3, [r6, #12]
 8011d24:	b183      	cbz	r3, 8011d48 <_Balloc+0x50>
 8011d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d2e:	b9b8      	cbnz	r0, 8011d60 <_Balloc+0x68>
 8011d30:	2101      	movs	r1, #1
 8011d32:	fa01 f605 	lsl.w	r6, r1, r5
 8011d36:	1d72      	adds	r2, r6, #5
 8011d38:	0092      	lsls	r2, r2, #2
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f000 fc9d 	bl	801267a <_calloc_r>
 8011d40:	b160      	cbz	r0, 8011d5c <_Balloc+0x64>
 8011d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d46:	e00e      	b.n	8011d66 <_Balloc+0x6e>
 8011d48:	2221      	movs	r2, #33	; 0x21
 8011d4a:	2104      	movs	r1, #4
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fc94 	bl	801267a <_calloc_r>
 8011d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d54:	60f0      	str	r0, [r6, #12]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1e4      	bne.n	8011d26 <_Balloc+0x2e>
 8011d5c:	2000      	movs	r0, #0
 8011d5e:	bd70      	pop	{r4, r5, r6, pc}
 8011d60:	6802      	ldr	r2, [r0, #0]
 8011d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d66:	2300      	movs	r3, #0
 8011d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d6c:	e7f7      	b.n	8011d5e <_Balloc+0x66>
 8011d6e:	bf00      	nop
 8011d70:	08013df6 	.word	0x08013df6
 8011d74:	08013f58 	.word	0x08013f58

08011d78 <_Bfree>:
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	460c      	mov	r4, r1
 8011d80:	b976      	cbnz	r6, 8011da0 <_Bfree+0x28>
 8011d82:	2010      	movs	r0, #16
 8011d84:	f7ff ff90 	bl	8011ca8 <malloc>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	6268      	str	r0, [r5, #36]	; 0x24
 8011d8c:	b920      	cbnz	r0, 8011d98 <_Bfree+0x20>
 8011d8e:	4b09      	ldr	r3, [pc, #36]	; (8011db4 <_Bfree+0x3c>)
 8011d90:	4809      	ldr	r0, [pc, #36]	; (8011db8 <_Bfree+0x40>)
 8011d92:	218a      	movs	r1, #138	; 0x8a
 8011d94:	f001 f8ae 	bl	8012ef4 <__assert_func>
 8011d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d9c:	6006      	str	r6, [r0, #0]
 8011d9e:	60c6      	str	r6, [r0, #12]
 8011da0:	b13c      	cbz	r4, 8011db2 <_Bfree+0x3a>
 8011da2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011da4:	6862      	ldr	r2, [r4, #4]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011dac:	6021      	str	r1, [r4, #0]
 8011dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
 8011db4:	08013df6 	.word	0x08013df6
 8011db8:	08013f58 	.word	0x08013f58

08011dbc <__multadd>:
 8011dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc0:	690d      	ldr	r5, [r1, #16]
 8011dc2:	4607      	mov	r7, r0
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	461e      	mov	r6, r3
 8011dc8:	f101 0c14 	add.w	ip, r1, #20
 8011dcc:	2000      	movs	r0, #0
 8011dce:	f8dc 3000 	ldr.w	r3, [ip]
 8011dd2:	b299      	uxth	r1, r3
 8011dd4:	fb02 6101 	mla	r1, r2, r1, r6
 8011dd8:	0c1e      	lsrs	r6, r3, #16
 8011dda:	0c0b      	lsrs	r3, r1, #16
 8011ddc:	fb02 3306 	mla	r3, r2, r6, r3
 8011de0:	b289      	uxth	r1, r1
 8011de2:	3001      	adds	r0, #1
 8011de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011de8:	4285      	cmp	r5, r0
 8011dea:	f84c 1b04 	str.w	r1, [ip], #4
 8011dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011df2:	dcec      	bgt.n	8011dce <__multadd+0x12>
 8011df4:	b30e      	cbz	r6, 8011e3a <__multadd+0x7e>
 8011df6:	68a3      	ldr	r3, [r4, #8]
 8011df8:	42ab      	cmp	r3, r5
 8011dfa:	dc19      	bgt.n	8011e30 <__multadd+0x74>
 8011dfc:	6861      	ldr	r1, [r4, #4]
 8011dfe:	4638      	mov	r0, r7
 8011e00:	3101      	adds	r1, #1
 8011e02:	f7ff ff79 	bl	8011cf8 <_Balloc>
 8011e06:	4680      	mov	r8, r0
 8011e08:	b928      	cbnz	r0, 8011e16 <__multadd+0x5a>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	4b0c      	ldr	r3, [pc, #48]	; (8011e40 <__multadd+0x84>)
 8011e0e:	480d      	ldr	r0, [pc, #52]	; (8011e44 <__multadd+0x88>)
 8011e10:	21b5      	movs	r1, #181	; 0xb5
 8011e12:	f001 f86f 	bl	8012ef4 <__assert_func>
 8011e16:	6922      	ldr	r2, [r4, #16]
 8011e18:	3202      	adds	r2, #2
 8011e1a:	f104 010c 	add.w	r1, r4, #12
 8011e1e:	0092      	lsls	r2, r2, #2
 8011e20:	300c      	adds	r0, #12
 8011e22:	f7ff ff5b 	bl	8011cdc <memcpy>
 8011e26:	4621      	mov	r1, r4
 8011e28:	4638      	mov	r0, r7
 8011e2a:	f7ff ffa5 	bl	8011d78 <_Bfree>
 8011e2e:	4644      	mov	r4, r8
 8011e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e34:	3501      	adds	r5, #1
 8011e36:	615e      	str	r6, [r3, #20]
 8011e38:	6125      	str	r5, [r4, #16]
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e40:	08013e68 	.word	0x08013e68
 8011e44:	08013f58 	.word	0x08013f58

08011e48 <__s2b>:
 8011e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	4615      	mov	r5, r2
 8011e50:	461f      	mov	r7, r3
 8011e52:	2209      	movs	r2, #9
 8011e54:	3308      	adds	r3, #8
 8011e56:	4606      	mov	r6, r0
 8011e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	2201      	movs	r2, #1
 8011e60:	429a      	cmp	r2, r3
 8011e62:	db09      	blt.n	8011e78 <__s2b+0x30>
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7ff ff47 	bl	8011cf8 <_Balloc>
 8011e6a:	b940      	cbnz	r0, 8011e7e <__s2b+0x36>
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	4b19      	ldr	r3, [pc, #100]	; (8011ed4 <__s2b+0x8c>)
 8011e70:	4819      	ldr	r0, [pc, #100]	; (8011ed8 <__s2b+0x90>)
 8011e72:	21ce      	movs	r1, #206	; 0xce
 8011e74:	f001 f83e 	bl	8012ef4 <__assert_func>
 8011e78:	0052      	lsls	r2, r2, #1
 8011e7a:	3101      	adds	r1, #1
 8011e7c:	e7f0      	b.n	8011e60 <__s2b+0x18>
 8011e7e:	9b08      	ldr	r3, [sp, #32]
 8011e80:	6143      	str	r3, [r0, #20]
 8011e82:	2d09      	cmp	r5, #9
 8011e84:	f04f 0301 	mov.w	r3, #1
 8011e88:	6103      	str	r3, [r0, #16]
 8011e8a:	dd16      	ble.n	8011eba <__s2b+0x72>
 8011e8c:	f104 0909 	add.w	r9, r4, #9
 8011e90:	46c8      	mov	r8, r9
 8011e92:	442c      	add	r4, r5
 8011e94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e98:	4601      	mov	r1, r0
 8011e9a:	3b30      	subs	r3, #48	; 0x30
 8011e9c:	220a      	movs	r2, #10
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	f7ff ff8c 	bl	8011dbc <__multadd>
 8011ea4:	45a0      	cmp	r8, r4
 8011ea6:	d1f5      	bne.n	8011e94 <__s2b+0x4c>
 8011ea8:	f1a5 0408 	sub.w	r4, r5, #8
 8011eac:	444c      	add	r4, r9
 8011eae:	1b2d      	subs	r5, r5, r4
 8011eb0:	1963      	adds	r3, r4, r5
 8011eb2:	42bb      	cmp	r3, r7
 8011eb4:	db04      	blt.n	8011ec0 <__s2b+0x78>
 8011eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eba:	340a      	adds	r4, #10
 8011ebc:	2509      	movs	r5, #9
 8011ebe:	e7f6      	b.n	8011eae <__s2b+0x66>
 8011ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ec4:	4601      	mov	r1, r0
 8011ec6:	3b30      	subs	r3, #48	; 0x30
 8011ec8:	220a      	movs	r2, #10
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f7ff ff76 	bl	8011dbc <__multadd>
 8011ed0:	e7ee      	b.n	8011eb0 <__s2b+0x68>
 8011ed2:	bf00      	nop
 8011ed4:	08013e68 	.word	0x08013e68
 8011ed8:	08013f58 	.word	0x08013f58

08011edc <__hi0bits>:
 8011edc:	0c03      	lsrs	r3, r0, #16
 8011ede:	041b      	lsls	r3, r3, #16
 8011ee0:	b9d3      	cbnz	r3, 8011f18 <__hi0bits+0x3c>
 8011ee2:	0400      	lsls	r0, r0, #16
 8011ee4:	2310      	movs	r3, #16
 8011ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011eea:	bf04      	itt	eq
 8011eec:	0200      	lsleq	r0, r0, #8
 8011eee:	3308      	addeq	r3, #8
 8011ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ef4:	bf04      	itt	eq
 8011ef6:	0100      	lsleq	r0, r0, #4
 8011ef8:	3304      	addeq	r3, #4
 8011efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011efe:	bf04      	itt	eq
 8011f00:	0080      	lsleq	r0, r0, #2
 8011f02:	3302      	addeq	r3, #2
 8011f04:	2800      	cmp	r0, #0
 8011f06:	db05      	blt.n	8011f14 <__hi0bits+0x38>
 8011f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011f0c:	f103 0301 	add.w	r3, r3, #1
 8011f10:	bf08      	it	eq
 8011f12:	2320      	moveq	r3, #32
 8011f14:	4618      	mov	r0, r3
 8011f16:	4770      	bx	lr
 8011f18:	2300      	movs	r3, #0
 8011f1a:	e7e4      	b.n	8011ee6 <__hi0bits+0xa>

08011f1c <__lo0bits>:
 8011f1c:	6803      	ldr	r3, [r0, #0]
 8011f1e:	f013 0207 	ands.w	r2, r3, #7
 8011f22:	4601      	mov	r1, r0
 8011f24:	d00b      	beq.n	8011f3e <__lo0bits+0x22>
 8011f26:	07da      	lsls	r2, r3, #31
 8011f28:	d423      	bmi.n	8011f72 <__lo0bits+0x56>
 8011f2a:	0798      	lsls	r0, r3, #30
 8011f2c:	bf49      	itett	mi
 8011f2e:	085b      	lsrmi	r3, r3, #1
 8011f30:	089b      	lsrpl	r3, r3, #2
 8011f32:	2001      	movmi	r0, #1
 8011f34:	600b      	strmi	r3, [r1, #0]
 8011f36:	bf5c      	itt	pl
 8011f38:	600b      	strpl	r3, [r1, #0]
 8011f3a:	2002      	movpl	r0, #2
 8011f3c:	4770      	bx	lr
 8011f3e:	b298      	uxth	r0, r3
 8011f40:	b9a8      	cbnz	r0, 8011f6e <__lo0bits+0x52>
 8011f42:	0c1b      	lsrs	r3, r3, #16
 8011f44:	2010      	movs	r0, #16
 8011f46:	b2da      	uxtb	r2, r3
 8011f48:	b90a      	cbnz	r2, 8011f4e <__lo0bits+0x32>
 8011f4a:	3008      	adds	r0, #8
 8011f4c:	0a1b      	lsrs	r3, r3, #8
 8011f4e:	071a      	lsls	r2, r3, #28
 8011f50:	bf04      	itt	eq
 8011f52:	091b      	lsreq	r3, r3, #4
 8011f54:	3004      	addeq	r0, #4
 8011f56:	079a      	lsls	r2, r3, #30
 8011f58:	bf04      	itt	eq
 8011f5a:	089b      	lsreq	r3, r3, #2
 8011f5c:	3002      	addeq	r0, #2
 8011f5e:	07da      	lsls	r2, r3, #31
 8011f60:	d403      	bmi.n	8011f6a <__lo0bits+0x4e>
 8011f62:	085b      	lsrs	r3, r3, #1
 8011f64:	f100 0001 	add.w	r0, r0, #1
 8011f68:	d005      	beq.n	8011f76 <__lo0bits+0x5a>
 8011f6a:	600b      	str	r3, [r1, #0]
 8011f6c:	4770      	bx	lr
 8011f6e:	4610      	mov	r0, r2
 8011f70:	e7e9      	b.n	8011f46 <__lo0bits+0x2a>
 8011f72:	2000      	movs	r0, #0
 8011f74:	4770      	bx	lr
 8011f76:	2020      	movs	r0, #32
 8011f78:	4770      	bx	lr
	...

08011f7c <__i2b>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	460c      	mov	r4, r1
 8011f80:	2101      	movs	r1, #1
 8011f82:	f7ff feb9 	bl	8011cf8 <_Balloc>
 8011f86:	4602      	mov	r2, r0
 8011f88:	b928      	cbnz	r0, 8011f96 <__i2b+0x1a>
 8011f8a:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <__i2b+0x24>)
 8011f8c:	4805      	ldr	r0, [pc, #20]	; (8011fa4 <__i2b+0x28>)
 8011f8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f92:	f000 ffaf 	bl	8012ef4 <__assert_func>
 8011f96:	2301      	movs	r3, #1
 8011f98:	6144      	str	r4, [r0, #20]
 8011f9a:	6103      	str	r3, [r0, #16]
 8011f9c:	bd10      	pop	{r4, pc}
 8011f9e:	bf00      	nop
 8011fa0:	08013e68 	.word	0x08013e68
 8011fa4:	08013f58 	.word	0x08013f58

08011fa8 <__multiply>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	4691      	mov	r9, r2
 8011fae:	690a      	ldr	r2, [r1, #16]
 8011fb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	bfb8      	it	lt
 8011fb8:	460b      	movlt	r3, r1
 8011fba:	460c      	mov	r4, r1
 8011fbc:	bfbc      	itt	lt
 8011fbe:	464c      	movlt	r4, r9
 8011fc0:	4699      	movlt	r9, r3
 8011fc2:	6927      	ldr	r7, [r4, #16]
 8011fc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011fc8:	68a3      	ldr	r3, [r4, #8]
 8011fca:	6861      	ldr	r1, [r4, #4]
 8011fcc:	eb07 060a 	add.w	r6, r7, sl
 8011fd0:	42b3      	cmp	r3, r6
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	bfb8      	it	lt
 8011fd6:	3101      	addlt	r1, #1
 8011fd8:	f7ff fe8e 	bl	8011cf8 <_Balloc>
 8011fdc:	b930      	cbnz	r0, 8011fec <__multiply+0x44>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	4b44      	ldr	r3, [pc, #272]	; (80120f4 <__multiply+0x14c>)
 8011fe2:	4845      	ldr	r0, [pc, #276]	; (80120f8 <__multiply+0x150>)
 8011fe4:	f240 115d 	movw	r1, #349	; 0x15d
 8011fe8:	f000 ff84 	bl	8012ef4 <__assert_func>
 8011fec:	f100 0514 	add.w	r5, r0, #20
 8011ff0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	4543      	cmp	r3, r8
 8011ffa:	d321      	bcc.n	8012040 <__multiply+0x98>
 8011ffc:	f104 0314 	add.w	r3, r4, #20
 8012000:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012004:	f109 0314 	add.w	r3, r9, #20
 8012008:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801200c:	9202      	str	r2, [sp, #8]
 801200e:	1b3a      	subs	r2, r7, r4
 8012010:	3a15      	subs	r2, #21
 8012012:	f022 0203 	bic.w	r2, r2, #3
 8012016:	3204      	adds	r2, #4
 8012018:	f104 0115 	add.w	r1, r4, #21
 801201c:	428f      	cmp	r7, r1
 801201e:	bf38      	it	cc
 8012020:	2204      	movcc	r2, #4
 8012022:	9201      	str	r2, [sp, #4]
 8012024:	9a02      	ldr	r2, [sp, #8]
 8012026:	9303      	str	r3, [sp, #12]
 8012028:	429a      	cmp	r2, r3
 801202a:	d80c      	bhi.n	8012046 <__multiply+0x9e>
 801202c:	2e00      	cmp	r6, #0
 801202e:	dd03      	ble.n	8012038 <__multiply+0x90>
 8012030:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012034:	2b00      	cmp	r3, #0
 8012036:	d05a      	beq.n	80120ee <__multiply+0x146>
 8012038:	6106      	str	r6, [r0, #16]
 801203a:	b005      	add	sp, #20
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012040:	f843 2b04 	str.w	r2, [r3], #4
 8012044:	e7d8      	b.n	8011ff8 <__multiply+0x50>
 8012046:	f8b3 a000 	ldrh.w	sl, [r3]
 801204a:	f1ba 0f00 	cmp.w	sl, #0
 801204e:	d024      	beq.n	801209a <__multiply+0xf2>
 8012050:	f104 0e14 	add.w	lr, r4, #20
 8012054:	46a9      	mov	r9, r5
 8012056:	f04f 0c00 	mov.w	ip, #0
 801205a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801205e:	f8d9 1000 	ldr.w	r1, [r9]
 8012062:	fa1f fb82 	uxth.w	fp, r2
 8012066:	b289      	uxth	r1, r1
 8012068:	fb0a 110b 	mla	r1, sl, fp, r1
 801206c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012070:	f8d9 2000 	ldr.w	r2, [r9]
 8012074:	4461      	add	r1, ip
 8012076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801207a:	fb0a c20b 	mla	r2, sl, fp, ip
 801207e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012082:	b289      	uxth	r1, r1
 8012084:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012088:	4577      	cmp	r7, lr
 801208a:	f849 1b04 	str.w	r1, [r9], #4
 801208e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012092:	d8e2      	bhi.n	801205a <__multiply+0xb2>
 8012094:	9a01      	ldr	r2, [sp, #4]
 8012096:	f845 c002 	str.w	ip, [r5, r2]
 801209a:	9a03      	ldr	r2, [sp, #12]
 801209c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80120a0:	3304      	adds	r3, #4
 80120a2:	f1b9 0f00 	cmp.w	r9, #0
 80120a6:	d020      	beq.n	80120ea <__multiply+0x142>
 80120a8:	6829      	ldr	r1, [r5, #0]
 80120aa:	f104 0c14 	add.w	ip, r4, #20
 80120ae:	46ae      	mov	lr, r5
 80120b0:	f04f 0a00 	mov.w	sl, #0
 80120b4:	f8bc b000 	ldrh.w	fp, [ip]
 80120b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80120bc:	fb09 220b 	mla	r2, r9, fp, r2
 80120c0:	4492      	add	sl, r2
 80120c2:	b289      	uxth	r1, r1
 80120c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80120c8:	f84e 1b04 	str.w	r1, [lr], #4
 80120cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80120d0:	f8be 1000 	ldrh.w	r1, [lr]
 80120d4:	0c12      	lsrs	r2, r2, #16
 80120d6:	fb09 1102 	mla	r1, r9, r2, r1
 80120da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80120de:	4567      	cmp	r7, ip
 80120e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80120e4:	d8e6      	bhi.n	80120b4 <__multiply+0x10c>
 80120e6:	9a01      	ldr	r2, [sp, #4]
 80120e8:	50a9      	str	r1, [r5, r2]
 80120ea:	3504      	adds	r5, #4
 80120ec:	e79a      	b.n	8012024 <__multiply+0x7c>
 80120ee:	3e01      	subs	r6, #1
 80120f0:	e79c      	b.n	801202c <__multiply+0x84>
 80120f2:	bf00      	nop
 80120f4:	08013e68 	.word	0x08013e68
 80120f8:	08013f58 	.word	0x08013f58

080120fc <__pow5mult>:
 80120fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012100:	4615      	mov	r5, r2
 8012102:	f012 0203 	ands.w	r2, r2, #3
 8012106:	4606      	mov	r6, r0
 8012108:	460f      	mov	r7, r1
 801210a:	d007      	beq.n	801211c <__pow5mult+0x20>
 801210c:	4c25      	ldr	r4, [pc, #148]	; (80121a4 <__pow5mult+0xa8>)
 801210e:	3a01      	subs	r2, #1
 8012110:	2300      	movs	r3, #0
 8012112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012116:	f7ff fe51 	bl	8011dbc <__multadd>
 801211a:	4607      	mov	r7, r0
 801211c:	10ad      	asrs	r5, r5, #2
 801211e:	d03d      	beq.n	801219c <__pow5mult+0xa0>
 8012120:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012122:	b97c      	cbnz	r4, 8012144 <__pow5mult+0x48>
 8012124:	2010      	movs	r0, #16
 8012126:	f7ff fdbf 	bl	8011ca8 <malloc>
 801212a:	4602      	mov	r2, r0
 801212c:	6270      	str	r0, [r6, #36]	; 0x24
 801212e:	b928      	cbnz	r0, 801213c <__pow5mult+0x40>
 8012130:	4b1d      	ldr	r3, [pc, #116]	; (80121a8 <__pow5mult+0xac>)
 8012132:	481e      	ldr	r0, [pc, #120]	; (80121ac <__pow5mult+0xb0>)
 8012134:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012138:	f000 fedc 	bl	8012ef4 <__assert_func>
 801213c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012140:	6004      	str	r4, [r0, #0]
 8012142:	60c4      	str	r4, [r0, #12]
 8012144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801214c:	b94c      	cbnz	r4, 8012162 <__pow5mult+0x66>
 801214e:	f240 2171 	movw	r1, #625	; 0x271
 8012152:	4630      	mov	r0, r6
 8012154:	f7ff ff12 	bl	8011f7c <__i2b>
 8012158:	2300      	movs	r3, #0
 801215a:	f8c8 0008 	str.w	r0, [r8, #8]
 801215e:	4604      	mov	r4, r0
 8012160:	6003      	str	r3, [r0, #0]
 8012162:	f04f 0900 	mov.w	r9, #0
 8012166:	07eb      	lsls	r3, r5, #31
 8012168:	d50a      	bpl.n	8012180 <__pow5mult+0x84>
 801216a:	4639      	mov	r1, r7
 801216c:	4622      	mov	r2, r4
 801216e:	4630      	mov	r0, r6
 8012170:	f7ff ff1a 	bl	8011fa8 <__multiply>
 8012174:	4639      	mov	r1, r7
 8012176:	4680      	mov	r8, r0
 8012178:	4630      	mov	r0, r6
 801217a:	f7ff fdfd 	bl	8011d78 <_Bfree>
 801217e:	4647      	mov	r7, r8
 8012180:	106d      	asrs	r5, r5, #1
 8012182:	d00b      	beq.n	801219c <__pow5mult+0xa0>
 8012184:	6820      	ldr	r0, [r4, #0]
 8012186:	b938      	cbnz	r0, 8012198 <__pow5mult+0x9c>
 8012188:	4622      	mov	r2, r4
 801218a:	4621      	mov	r1, r4
 801218c:	4630      	mov	r0, r6
 801218e:	f7ff ff0b 	bl	8011fa8 <__multiply>
 8012192:	6020      	str	r0, [r4, #0]
 8012194:	f8c0 9000 	str.w	r9, [r0]
 8012198:	4604      	mov	r4, r0
 801219a:	e7e4      	b.n	8012166 <__pow5mult+0x6a>
 801219c:	4638      	mov	r0, r7
 801219e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121a2:	bf00      	nop
 80121a4:	080140a8 	.word	0x080140a8
 80121a8:	08013df6 	.word	0x08013df6
 80121ac:	08013f58 	.word	0x08013f58

080121b0 <__lshift>:
 80121b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121b4:	460c      	mov	r4, r1
 80121b6:	6849      	ldr	r1, [r1, #4]
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121be:	68a3      	ldr	r3, [r4, #8]
 80121c0:	4607      	mov	r7, r0
 80121c2:	4691      	mov	r9, r2
 80121c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80121c8:	f108 0601 	add.w	r6, r8, #1
 80121cc:	42b3      	cmp	r3, r6
 80121ce:	db0b      	blt.n	80121e8 <__lshift+0x38>
 80121d0:	4638      	mov	r0, r7
 80121d2:	f7ff fd91 	bl	8011cf8 <_Balloc>
 80121d6:	4605      	mov	r5, r0
 80121d8:	b948      	cbnz	r0, 80121ee <__lshift+0x3e>
 80121da:	4602      	mov	r2, r0
 80121dc:	4b2a      	ldr	r3, [pc, #168]	; (8012288 <__lshift+0xd8>)
 80121de:	482b      	ldr	r0, [pc, #172]	; (801228c <__lshift+0xdc>)
 80121e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80121e4:	f000 fe86 	bl	8012ef4 <__assert_func>
 80121e8:	3101      	adds	r1, #1
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	e7ee      	b.n	80121cc <__lshift+0x1c>
 80121ee:	2300      	movs	r3, #0
 80121f0:	f100 0114 	add.w	r1, r0, #20
 80121f4:	f100 0210 	add.w	r2, r0, #16
 80121f8:	4618      	mov	r0, r3
 80121fa:	4553      	cmp	r3, sl
 80121fc:	db37      	blt.n	801226e <__lshift+0xbe>
 80121fe:	6920      	ldr	r0, [r4, #16]
 8012200:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012204:	f104 0314 	add.w	r3, r4, #20
 8012208:	f019 091f 	ands.w	r9, r9, #31
 801220c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012210:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012214:	d02f      	beq.n	8012276 <__lshift+0xc6>
 8012216:	f1c9 0e20 	rsb	lr, r9, #32
 801221a:	468a      	mov	sl, r1
 801221c:	f04f 0c00 	mov.w	ip, #0
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	fa02 f209 	lsl.w	r2, r2, r9
 8012226:	ea42 020c 	orr.w	r2, r2, ip
 801222a:	f84a 2b04 	str.w	r2, [sl], #4
 801222e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012232:	4298      	cmp	r0, r3
 8012234:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012238:	d8f2      	bhi.n	8012220 <__lshift+0x70>
 801223a:	1b03      	subs	r3, r0, r4
 801223c:	3b15      	subs	r3, #21
 801223e:	f023 0303 	bic.w	r3, r3, #3
 8012242:	3304      	adds	r3, #4
 8012244:	f104 0215 	add.w	r2, r4, #21
 8012248:	4290      	cmp	r0, r2
 801224a:	bf38      	it	cc
 801224c:	2304      	movcc	r3, #4
 801224e:	f841 c003 	str.w	ip, [r1, r3]
 8012252:	f1bc 0f00 	cmp.w	ip, #0
 8012256:	d001      	beq.n	801225c <__lshift+0xac>
 8012258:	f108 0602 	add.w	r6, r8, #2
 801225c:	3e01      	subs	r6, #1
 801225e:	4638      	mov	r0, r7
 8012260:	612e      	str	r6, [r5, #16]
 8012262:	4621      	mov	r1, r4
 8012264:	f7ff fd88 	bl	8011d78 <_Bfree>
 8012268:	4628      	mov	r0, r5
 801226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012272:	3301      	adds	r3, #1
 8012274:	e7c1      	b.n	80121fa <__lshift+0x4a>
 8012276:	3904      	subs	r1, #4
 8012278:	f853 2b04 	ldr.w	r2, [r3], #4
 801227c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012280:	4298      	cmp	r0, r3
 8012282:	d8f9      	bhi.n	8012278 <__lshift+0xc8>
 8012284:	e7ea      	b.n	801225c <__lshift+0xac>
 8012286:	bf00      	nop
 8012288:	08013e68 	.word	0x08013e68
 801228c:	08013f58 	.word	0x08013f58

08012290 <__mcmp>:
 8012290:	b530      	push	{r4, r5, lr}
 8012292:	6902      	ldr	r2, [r0, #16]
 8012294:	690c      	ldr	r4, [r1, #16]
 8012296:	1b12      	subs	r2, r2, r4
 8012298:	d10e      	bne.n	80122b8 <__mcmp+0x28>
 801229a:	f100 0314 	add.w	r3, r0, #20
 801229e:	3114      	adds	r1, #20
 80122a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80122a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80122a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80122ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80122b0:	42a5      	cmp	r5, r4
 80122b2:	d003      	beq.n	80122bc <__mcmp+0x2c>
 80122b4:	d305      	bcc.n	80122c2 <__mcmp+0x32>
 80122b6:	2201      	movs	r2, #1
 80122b8:	4610      	mov	r0, r2
 80122ba:	bd30      	pop	{r4, r5, pc}
 80122bc:	4283      	cmp	r3, r0
 80122be:	d3f3      	bcc.n	80122a8 <__mcmp+0x18>
 80122c0:	e7fa      	b.n	80122b8 <__mcmp+0x28>
 80122c2:	f04f 32ff 	mov.w	r2, #4294967295
 80122c6:	e7f7      	b.n	80122b8 <__mcmp+0x28>

080122c8 <__mdiff>:
 80122c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122cc:	460c      	mov	r4, r1
 80122ce:	4606      	mov	r6, r0
 80122d0:	4611      	mov	r1, r2
 80122d2:	4620      	mov	r0, r4
 80122d4:	4690      	mov	r8, r2
 80122d6:	f7ff ffdb 	bl	8012290 <__mcmp>
 80122da:	1e05      	subs	r5, r0, #0
 80122dc:	d110      	bne.n	8012300 <__mdiff+0x38>
 80122de:	4629      	mov	r1, r5
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff fd09 	bl	8011cf8 <_Balloc>
 80122e6:	b930      	cbnz	r0, 80122f6 <__mdiff+0x2e>
 80122e8:	4b3a      	ldr	r3, [pc, #232]	; (80123d4 <__mdiff+0x10c>)
 80122ea:	4602      	mov	r2, r0
 80122ec:	f240 2132 	movw	r1, #562	; 0x232
 80122f0:	4839      	ldr	r0, [pc, #228]	; (80123d8 <__mdiff+0x110>)
 80122f2:	f000 fdff 	bl	8012ef4 <__assert_func>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80122fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012300:	bfa4      	itt	ge
 8012302:	4643      	movge	r3, r8
 8012304:	46a0      	movge	r8, r4
 8012306:	4630      	mov	r0, r6
 8012308:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801230c:	bfa6      	itte	ge
 801230e:	461c      	movge	r4, r3
 8012310:	2500      	movge	r5, #0
 8012312:	2501      	movlt	r5, #1
 8012314:	f7ff fcf0 	bl	8011cf8 <_Balloc>
 8012318:	b920      	cbnz	r0, 8012324 <__mdiff+0x5c>
 801231a:	4b2e      	ldr	r3, [pc, #184]	; (80123d4 <__mdiff+0x10c>)
 801231c:	4602      	mov	r2, r0
 801231e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012322:	e7e5      	b.n	80122f0 <__mdiff+0x28>
 8012324:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012328:	6926      	ldr	r6, [r4, #16]
 801232a:	60c5      	str	r5, [r0, #12]
 801232c:	f104 0914 	add.w	r9, r4, #20
 8012330:	f108 0514 	add.w	r5, r8, #20
 8012334:	f100 0e14 	add.w	lr, r0, #20
 8012338:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801233c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012340:	f108 0210 	add.w	r2, r8, #16
 8012344:	46f2      	mov	sl, lr
 8012346:	2100      	movs	r1, #0
 8012348:	f859 3b04 	ldr.w	r3, [r9], #4
 801234c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012350:	fa1f f883 	uxth.w	r8, r3
 8012354:	fa11 f18b 	uxtah	r1, r1, fp
 8012358:	0c1b      	lsrs	r3, r3, #16
 801235a:	eba1 0808 	sub.w	r8, r1, r8
 801235e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012362:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012366:	fa1f f888 	uxth.w	r8, r8
 801236a:	1419      	asrs	r1, r3, #16
 801236c:	454e      	cmp	r6, r9
 801236e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012372:	f84a 3b04 	str.w	r3, [sl], #4
 8012376:	d8e7      	bhi.n	8012348 <__mdiff+0x80>
 8012378:	1b33      	subs	r3, r6, r4
 801237a:	3b15      	subs	r3, #21
 801237c:	f023 0303 	bic.w	r3, r3, #3
 8012380:	3304      	adds	r3, #4
 8012382:	3415      	adds	r4, #21
 8012384:	42a6      	cmp	r6, r4
 8012386:	bf38      	it	cc
 8012388:	2304      	movcc	r3, #4
 801238a:	441d      	add	r5, r3
 801238c:	4473      	add	r3, lr
 801238e:	469e      	mov	lr, r3
 8012390:	462e      	mov	r6, r5
 8012392:	4566      	cmp	r6, ip
 8012394:	d30e      	bcc.n	80123b4 <__mdiff+0xec>
 8012396:	f10c 0203 	add.w	r2, ip, #3
 801239a:	1b52      	subs	r2, r2, r5
 801239c:	f022 0203 	bic.w	r2, r2, #3
 80123a0:	3d03      	subs	r5, #3
 80123a2:	45ac      	cmp	ip, r5
 80123a4:	bf38      	it	cc
 80123a6:	2200      	movcc	r2, #0
 80123a8:	441a      	add	r2, r3
 80123aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80123ae:	b17b      	cbz	r3, 80123d0 <__mdiff+0x108>
 80123b0:	6107      	str	r7, [r0, #16]
 80123b2:	e7a3      	b.n	80122fc <__mdiff+0x34>
 80123b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80123b8:	fa11 f288 	uxtah	r2, r1, r8
 80123bc:	1414      	asrs	r4, r2, #16
 80123be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80123c2:	b292      	uxth	r2, r2
 80123c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80123c8:	f84e 2b04 	str.w	r2, [lr], #4
 80123cc:	1421      	asrs	r1, r4, #16
 80123ce:	e7e0      	b.n	8012392 <__mdiff+0xca>
 80123d0:	3f01      	subs	r7, #1
 80123d2:	e7ea      	b.n	80123aa <__mdiff+0xe2>
 80123d4:	08013e68 	.word	0x08013e68
 80123d8:	08013f58 	.word	0x08013f58

080123dc <__ulp>:
 80123dc:	b082      	sub	sp, #8
 80123de:	ed8d 0b00 	vstr	d0, [sp]
 80123e2:	9b01      	ldr	r3, [sp, #4]
 80123e4:	4912      	ldr	r1, [pc, #72]	; (8012430 <__ulp+0x54>)
 80123e6:	4019      	ands	r1, r3
 80123e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80123ec:	2900      	cmp	r1, #0
 80123ee:	dd05      	ble.n	80123fc <__ulp+0x20>
 80123f0:	2200      	movs	r2, #0
 80123f2:	460b      	mov	r3, r1
 80123f4:	ec43 2b10 	vmov	d0, r2, r3
 80123f8:	b002      	add	sp, #8
 80123fa:	4770      	bx	lr
 80123fc:	4249      	negs	r1, r1
 80123fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012402:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012406:	f04f 0200 	mov.w	r2, #0
 801240a:	f04f 0300 	mov.w	r3, #0
 801240e:	da04      	bge.n	801241a <__ulp+0x3e>
 8012410:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012414:	fa41 f300 	asr.w	r3, r1, r0
 8012418:	e7ec      	b.n	80123f4 <__ulp+0x18>
 801241a:	f1a0 0114 	sub.w	r1, r0, #20
 801241e:	291e      	cmp	r1, #30
 8012420:	bfda      	itte	le
 8012422:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012426:	fa20 f101 	lsrle.w	r1, r0, r1
 801242a:	2101      	movgt	r1, #1
 801242c:	460a      	mov	r2, r1
 801242e:	e7e1      	b.n	80123f4 <__ulp+0x18>
 8012430:	7ff00000 	.word	0x7ff00000

08012434 <__b2d>:
 8012434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012436:	6905      	ldr	r5, [r0, #16]
 8012438:	f100 0714 	add.w	r7, r0, #20
 801243c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012440:	1f2e      	subs	r6, r5, #4
 8012442:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012446:	4620      	mov	r0, r4
 8012448:	f7ff fd48 	bl	8011edc <__hi0bits>
 801244c:	f1c0 0320 	rsb	r3, r0, #32
 8012450:	280a      	cmp	r0, #10
 8012452:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80124d0 <__b2d+0x9c>
 8012456:	600b      	str	r3, [r1, #0]
 8012458:	dc14      	bgt.n	8012484 <__b2d+0x50>
 801245a:	f1c0 0e0b 	rsb	lr, r0, #11
 801245e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012462:	42b7      	cmp	r7, r6
 8012464:	ea41 030c 	orr.w	r3, r1, ip
 8012468:	bf34      	ite	cc
 801246a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801246e:	2100      	movcs	r1, #0
 8012470:	3015      	adds	r0, #21
 8012472:	fa04 f000 	lsl.w	r0, r4, r0
 8012476:	fa21 f10e 	lsr.w	r1, r1, lr
 801247a:	ea40 0201 	orr.w	r2, r0, r1
 801247e:	ec43 2b10 	vmov	d0, r2, r3
 8012482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012484:	42b7      	cmp	r7, r6
 8012486:	bf3a      	itte	cc
 8012488:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801248c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012490:	2100      	movcs	r1, #0
 8012492:	380b      	subs	r0, #11
 8012494:	d017      	beq.n	80124c6 <__b2d+0x92>
 8012496:	f1c0 0c20 	rsb	ip, r0, #32
 801249a:	fa04 f500 	lsl.w	r5, r4, r0
 801249e:	42be      	cmp	r6, r7
 80124a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80124a4:	ea45 0504 	orr.w	r5, r5, r4
 80124a8:	bf8c      	ite	hi
 80124aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80124ae:	2400      	movls	r4, #0
 80124b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80124b4:	fa01 f000 	lsl.w	r0, r1, r0
 80124b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80124bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80124c0:	ea40 0204 	orr.w	r2, r0, r4
 80124c4:	e7db      	b.n	801247e <__b2d+0x4a>
 80124c6:	ea44 030c 	orr.w	r3, r4, ip
 80124ca:	460a      	mov	r2, r1
 80124cc:	e7d7      	b.n	801247e <__b2d+0x4a>
 80124ce:	bf00      	nop
 80124d0:	3ff00000 	.word	0x3ff00000

080124d4 <__d2b>:
 80124d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124d8:	4689      	mov	r9, r1
 80124da:	2101      	movs	r1, #1
 80124dc:	ec57 6b10 	vmov	r6, r7, d0
 80124e0:	4690      	mov	r8, r2
 80124e2:	f7ff fc09 	bl	8011cf8 <_Balloc>
 80124e6:	4604      	mov	r4, r0
 80124e8:	b930      	cbnz	r0, 80124f8 <__d2b+0x24>
 80124ea:	4602      	mov	r2, r0
 80124ec:	4b25      	ldr	r3, [pc, #148]	; (8012584 <__d2b+0xb0>)
 80124ee:	4826      	ldr	r0, [pc, #152]	; (8012588 <__d2b+0xb4>)
 80124f0:	f240 310a 	movw	r1, #778	; 0x30a
 80124f4:	f000 fcfe 	bl	8012ef4 <__assert_func>
 80124f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80124fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012500:	bb35      	cbnz	r5, 8012550 <__d2b+0x7c>
 8012502:	2e00      	cmp	r6, #0
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	d028      	beq.n	801255a <__d2b+0x86>
 8012508:	4668      	mov	r0, sp
 801250a:	9600      	str	r6, [sp, #0]
 801250c:	f7ff fd06 	bl	8011f1c <__lo0bits>
 8012510:	9900      	ldr	r1, [sp, #0]
 8012512:	b300      	cbz	r0, 8012556 <__d2b+0x82>
 8012514:	9a01      	ldr	r2, [sp, #4]
 8012516:	f1c0 0320 	rsb	r3, r0, #32
 801251a:	fa02 f303 	lsl.w	r3, r2, r3
 801251e:	430b      	orrs	r3, r1
 8012520:	40c2      	lsrs	r2, r0
 8012522:	6163      	str	r3, [r4, #20]
 8012524:	9201      	str	r2, [sp, #4]
 8012526:	9b01      	ldr	r3, [sp, #4]
 8012528:	61a3      	str	r3, [r4, #24]
 801252a:	2b00      	cmp	r3, #0
 801252c:	bf14      	ite	ne
 801252e:	2202      	movne	r2, #2
 8012530:	2201      	moveq	r2, #1
 8012532:	6122      	str	r2, [r4, #16]
 8012534:	b1d5      	cbz	r5, 801256c <__d2b+0x98>
 8012536:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801253a:	4405      	add	r5, r0
 801253c:	f8c9 5000 	str.w	r5, [r9]
 8012540:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012544:	f8c8 0000 	str.w	r0, [r8]
 8012548:	4620      	mov	r0, r4
 801254a:	b003      	add	sp, #12
 801254c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012554:	e7d5      	b.n	8012502 <__d2b+0x2e>
 8012556:	6161      	str	r1, [r4, #20]
 8012558:	e7e5      	b.n	8012526 <__d2b+0x52>
 801255a:	a801      	add	r0, sp, #4
 801255c:	f7ff fcde 	bl	8011f1c <__lo0bits>
 8012560:	9b01      	ldr	r3, [sp, #4]
 8012562:	6163      	str	r3, [r4, #20]
 8012564:	2201      	movs	r2, #1
 8012566:	6122      	str	r2, [r4, #16]
 8012568:	3020      	adds	r0, #32
 801256a:	e7e3      	b.n	8012534 <__d2b+0x60>
 801256c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012574:	f8c9 0000 	str.w	r0, [r9]
 8012578:	6918      	ldr	r0, [r3, #16]
 801257a:	f7ff fcaf 	bl	8011edc <__hi0bits>
 801257e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012582:	e7df      	b.n	8012544 <__d2b+0x70>
 8012584:	08013e68 	.word	0x08013e68
 8012588:	08013f58 	.word	0x08013f58

0801258c <__ratio>:
 801258c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012590:	4688      	mov	r8, r1
 8012592:	4669      	mov	r1, sp
 8012594:	4681      	mov	r9, r0
 8012596:	f7ff ff4d 	bl	8012434 <__b2d>
 801259a:	a901      	add	r1, sp, #4
 801259c:	4640      	mov	r0, r8
 801259e:	ec55 4b10 	vmov	r4, r5, d0
 80125a2:	f7ff ff47 	bl	8012434 <__b2d>
 80125a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80125ae:	eba3 0c02 	sub.w	ip, r3, r2
 80125b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80125b6:	1a9b      	subs	r3, r3, r2
 80125b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80125bc:	ec51 0b10 	vmov	r0, r1, d0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	bfd6      	itet	le
 80125c4:	460a      	movle	r2, r1
 80125c6:	462a      	movgt	r2, r5
 80125c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80125cc:	468b      	mov	fp, r1
 80125ce:	462f      	mov	r7, r5
 80125d0:	bfd4      	ite	le
 80125d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80125d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80125da:	4620      	mov	r0, r4
 80125dc:	ee10 2a10 	vmov	r2, s0
 80125e0:	465b      	mov	r3, fp
 80125e2:	4639      	mov	r1, r7
 80125e4:	f7ee f952 	bl	800088c <__aeabi_ddiv>
 80125e8:	ec41 0b10 	vmov	d0, r0, r1
 80125ec:	b003      	add	sp, #12
 80125ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125f2 <__copybits>:
 80125f2:	3901      	subs	r1, #1
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	1149      	asrs	r1, r1, #5
 80125f8:	6914      	ldr	r4, [r2, #16]
 80125fa:	3101      	adds	r1, #1
 80125fc:	f102 0314 	add.w	r3, r2, #20
 8012600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012608:	1f05      	subs	r5, r0, #4
 801260a:	42a3      	cmp	r3, r4
 801260c:	d30c      	bcc.n	8012628 <__copybits+0x36>
 801260e:	1aa3      	subs	r3, r4, r2
 8012610:	3b11      	subs	r3, #17
 8012612:	f023 0303 	bic.w	r3, r3, #3
 8012616:	3211      	adds	r2, #17
 8012618:	42a2      	cmp	r2, r4
 801261a:	bf88      	it	hi
 801261c:	2300      	movhi	r3, #0
 801261e:	4418      	add	r0, r3
 8012620:	2300      	movs	r3, #0
 8012622:	4288      	cmp	r0, r1
 8012624:	d305      	bcc.n	8012632 <__copybits+0x40>
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	f853 6b04 	ldr.w	r6, [r3], #4
 801262c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012630:	e7eb      	b.n	801260a <__copybits+0x18>
 8012632:	f840 3b04 	str.w	r3, [r0], #4
 8012636:	e7f4      	b.n	8012622 <__copybits+0x30>

08012638 <__any_on>:
 8012638:	f100 0214 	add.w	r2, r0, #20
 801263c:	6900      	ldr	r0, [r0, #16]
 801263e:	114b      	asrs	r3, r1, #5
 8012640:	4298      	cmp	r0, r3
 8012642:	b510      	push	{r4, lr}
 8012644:	db11      	blt.n	801266a <__any_on+0x32>
 8012646:	dd0a      	ble.n	801265e <__any_on+0x26>
 8012648:	f011 011f 	ands.w	r1, r1, #31
 801264c:	d007      	beq.n	801265e <__any_on+0x26>
 801264e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012652:	fa24 f001 	lsr.w	r0, r4, r1
 8012656:	fa00 f101 	lsl.w	r1, r0, r1
 801265a:	428c      	cmp	r4, r1
 801265c:	d10b      	bne.n	8012676 <__any_on+0x3e>
 801265e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012662:	4293      	cmp	r3, r2
 8012664:	d803      	bhi.n	801266e <__any_on+0x36>
 8012666:	2000      	movs	r0, #0
 8012668:	bd10      	pop	{r4, pc}
 801266a:	4603      	mov	r3, r0
 801266c:	e7f7      	b.n	801265e <__any_on+0x26>
 801266e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012672:	2900      	cmp	r1, #0
 8012674:	d0f5      	beq.n	8012662 <__any_on+0x2a>
 8012676:	2001      	movs	r0, #1
 8012678:	e7f6      	b.n	8012668 <__any_on+0x30>

0801267a <_calloc_r>:
 801267a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801267c:	fba1 2402 	umull	r2, r4, r1, r2
 8012680:	b94c      	cbnz	r4, 8012696 <_calloc_r+0x1c>
 8012682:	4611      	mov	r1, r2
 8012684:	9201      	str	r2, [sp, #4]
 8012686:	f000 f87b 	bl	8012780 <_malloc_r>
 801268a:	9a01      	ldr	r2, [sp, #4]
 801268c:	4605      	mov	r5, r0
 801268e:	b930      	cbnz	r0, 801269e <_calloc_r+0x24>
 8012690:	4628      	mov	r0, r5
 8012692:	b003      	add	sp, #12
 8012694:	bd30      	pop	{r4, r5, pc}
 8012696:	220c      	movs	r2, #12
 8012698:	6002      	str	r2, [r0, #0]
 801269a:	2500      	movs	r5, #0
 801269c:	e7f8      	b.n	8012690 <_calloc_r+0x16>
 801269e:	4621      	mov	r1, r4
 80126a0:	f7fb feaa 	bl	800e3f8 <memset>
 80126a4:	e7f4      	b.n	8012690 <_calloc_r+0x16>
	...

080126a8 <_free_r>:
 80126a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126aa:	2900      	cmp	r1, #0
 80126ac:	d044      	beq.n	8012738 <_free_r+0x90>
 80126ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126b2:	9001      	str	r0, [sp, #4]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f1a1 0404 	sub.w	r4, r1, #4
 80126ba:	bfb8      	it	lt
 80126bc:	18e4      	addlt	r4, r4, r3
 80126be:	f000 fca7 	bl	8013010 <__malloc_lock>
 80126c2:	4a1e      	ldr	r2, [pc, #120]	; (801273c <_free_r+0x94>)
 80126c4:	9801      	ldr	r0, [sp, #4]
 80126c6:	6813      	ldr	r3, [r2, #0]
 80126c8:	b933      	cbnz	r3, 80126d8 <_free_r+0x30>
 80126ca:	6063      	str	r3, [r4, #4]
 80126cc:	6014      	str	r4, [r2, #0]
 80126ce:	b003      	add	sp, #12
 80126d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126d4:	f000 bca2 	b.w	801301c <__malloc_unlock>
 80126d8:	42a3      	cmp	r3, r4
 80126da:	d908      	bls.n	80126ee <_free_r+0x46>
 80126dc:	6825      	ldr	r5, [r4, #0]
 80126de:	1961      	adds	r1, r4, r5
 80126e0:	428b      	cmp	r3, r1
 80126e2:	bf01      	itttt	eq
 80126e4:	6819      	ldreq	r1, [r3, #0]
 80126e6:	685b      	ldreq	r3, [r3, #4]
 80126e8:	1949      	addeq	r1, r1, r5
 80126ea:	6021      	streq	r1, [r4, #0]
 80126ec:	e7ed      	b.n	80126ca <_free_r+0x22>
 80126ee:	461a      	mov	r2, r3
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	b10b      	cbz	r3, 80126f8 <_free_r+0x50>
 80126f4:	42a3      	cmp	r3, r4
 80126f6:	d9fa      	bls.n	80126ee <_free_r+0x46>
 80126f8:	6811      	ldr	r1, [r2, #0]
 80126fa:	1855      	adds	r5, r2, r1
 80126fc:	42a5      	cmp	r5, r4
 80126fe:	d10b      	bne.n	8012718 <_free_r+0x70>
 8012700:	6824      	ldr	r4, [r4, #0]
 8012702:	4421      	add	r1, r4
 8012704:	1854      	adds	r4, r2, r1
 8012706:	42a3      	cmp	r3, r4
 8012708:	6011      	str	r1, [r2, #0]
 801270a:	d1e0      	bne.n	80126ce <_free_r+0x26>
 801270c:	681c      	ldr	r4, [r3, #0]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	6053      	str	r3, [r2, #4]
 8012712:	4421      	add	r1, r4
 8012714:	6011      	str	r1, [r2, #0]
 8012716:	e7da      	b.n	80126ce <_free_r+0x26>
 8012718:	d902      	bls.n	8012720 <_free_r+0x78>
 801271a:	230c      	movs	r3, #12
 801271c:	6003      	str	r3, [r0, #0]
 801271e:	e7d6      	b.n	80126ce <_free_r+0x26>
 8012720:	6825      	ldr	r5, [r4, #0]
 8012722:	1961      	adds	r1, r4, r5
 8012724:	428b      	cmp	r3, r1
 8012726:	bf04      	itt	eq
 8012728:	6819      	ldreq	r1, [r3, #0]
 801272a:	685b      	ldreq	r3, [r3, #4]
 801272c:	6063      	str	r3, [r4, #4]
 801272e:	bf04      	itt	eq
 8012730:	1949      	addeq	r1, r1, r5
 8012732:	6021      	streq	r1, [r4, #0]
 8012734:	6054      	str	r4, [r2, #4]
 8012736:	e7ca      	b.n	80126ce <_free_r+0x26>
 8012738:	b003      	add	sp, #12
 801273a:	bd30      	pop	{r4, r5, pc}
 801273c:	20002e84 	.word	0x20002e84

08012740 <sbrk_aligned>:
 8012740:	b570      	push	{r4, r5, r6, lr}
 8012742:	4e0e      	ldr	r6, [pc, #56]	; (801277c <sbrk_aligned+0x3c>)
 8012744:	460c      	mov	r4, r1
 8012746:	6831      	ldr	r1, [r6, #0]
 8012748:	4605      	mov	r5, r0
 801274a:	b911      	cbnz	r1, 8012752 <sbrk_aligned+0x12>
 801274c:	f000 fb4c 	bl	8012de8 <_sbrk_r>
 8012750:	6030      	str	r0, [r6, #0]
 8012752:	4621      	mov	r1, r4
 8012754:	4628      	mov	r0, r5
 8012756:	f000 fb47 	bl	8012de8 <_sbrk_r>
 801275a:	1c43      	adds	r3, r0, #1
 801275c:	d00a      	beq.n	8012774 <sbrk_aligned+0x34>
 801275e:	1cc4      	adds	r4, r0, #3
 8012760:	f024 0403 	bic.w	r4, r4, #3
 8012764:	42a0      	cmp	r0, r4
 8012766:	d007      	beq.n	8012778 <sbrk_aligned+0x38>
 8012768:	1a21      	subs	r1, r4, r0
 801276a:	4628      	mov	r0, r5
 801276c:	f000 fb3c 	bl	8012de8 <_sbrk_r>
 8012770:	3001      	adds	r0, #1
 8012772:	d101      	bne.n	8012778 <sbrk_aligned+0x38>
 8012774:	f04f 34ff 	mov.w	r4, #4294967295
 8012778:	4620      	mov	r0, r4
 801277a:	bd70      	pop	{r4, r5, r6, pc}
 801277c:	20002e88 	.word	0x20002e88

08012780 <_malloc_r>:
 8012780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012784:	1ccd      	adds	r5, r1, #3
 8012786:	f025 0503 	bic.w	r5, r5, #3
 801278a:	3508      	adds	r5, #8
 801278c:	2d0c      	cmp	r5, #12
 801278e:	bf38      	it	cc
 8012790:	250c      	movcc	r5, #12
 8012792:	2d00      	cmp	r5, #0
 8012794:	4607      	mov	r7, r0
 8012796:	db01      	blt.n	801279c <_malloc_r+0x1c>
 8012798:	42a9      	cmp	r1, r5
 801279a:	d905      	bls.n	80127a8 <_malloc_r+0x28>
 801279c:	230c      	movs	r3, #12
 801279e:	603b      	str	r3, [r7, #0]
 80127a0:	2600      	movs	r6, #0
 80127a2:	4630      	mov	r0, r6
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4e2e      	ldr	r6, [pc, #184]	; (8012864 <_malloc_r+0xe4>)
 80127aa:	f000 fc31 	bl	8013010 <__malloc_lock>
 80127ae:	6833      	ldr	r3, [r6, #0]
 80127b0:	461c      	mov	r4, r3
 80127b2:	bb34      	cbnz	r4, 8012802 <_malloc_r+0x82>
 80127b4:	4629      	mov	r1, r5
 80127b6:	4638      	mov	r0, r7
 80127b8:	f7ff ffc2 	bl	8012740 <sbrk_aligned>
 80127bc:	1c43      	adds	r3, r0, #1
 80127be:	4604      	mov	r4, r0
 80127c0:	d14d      	bne.n	801285e <_malloc_r+0xde>
 80127c2:	6834      	ldr	r4, [r6, #0]
 80127c4:	4626      	mov	r6, r4
 80127c6:	2e00      	cmp	r6, #0
 80127c8:	d140      	bne.n	801284c <_malloc_r+0xcc>
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	4631      	mov	r1, r6
 80127ce:	4638      	mov	r0, r7
 80127d0:	eb04 0803 	add.w	r8, r4, r3
 80127d4:	f000 fb08 	bl	8012de8 <_sbrk_r>
 80127d8:	4580      	cmp	r8, r0
 80127da:	d13a      	bne.n	8012852 <_malloc_r+0xd2>
 80127dc:	6821      	ldr	r1, [r4, #0]
 80127de:	3503      	adds	r5, #3
 80127e0:	1a6d      	subs	r5, r5, r1
 80127e2:	f025 0503 	bic.w	r5, r5, #3
 80127e6:	3508      	adds	r5, #8
 80127e8:	2d0c      	cmp	r5, #12
 80127ea:	bf38      	it	cc
 80127ec:	250c      	movcc	r5, #12
 80127ee:	4629      	mov	r1, r5
 80127f0:	4638      	mov	r0, r7
 80127f2:	f7ff ffa5 	bl	8012740 <sbrk_aligned>
 80127f6:	3001      	adds	r0, #1
 80127f8:	d02b      	beq.n	8012852 <_malloc_r+0xd2>
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	442b      	add	r3, r5
 80127fe:	6023      	str	r3, [r4, #0]
 8012800:	e00e      	b.n	8012820 <_malloc_r+0xa0>
 8012802:	6822      	ldr	r2, [r4, #0]
 8012804:	1b52      	subs	r2, r2, r5
 8012806:	d41e      	bmi.n	8012846 <_malloc_r+0xc6>
 8012808:	2a0b      	cmp	r2, #11
 801280a:	d916      	bls.n	801283a <_malloc_r+0xba>
 801280c:	1961      	adds	r1, r4, r5
 801280e:	42a3      	cmp	r3, r4
 8012810:	6025      	str	r5, [r4, #0]
 8012812:	bf18      	it	ne
 8012814:	6059      	strne	r1, [r3, #4]
 8012816:	6863      	ldr	r3, [r4, #4]
 8012818:	bf08      	it	eq
 801281a:	6031      	streq	r1, [r6, #0]
 801281c:	5162      	str	r2, [r4, r5]
 801281e:	604b      	str	r3, [r1, #4]
 8012820:	4638      	mov	r0, r7
 8012822:	f104 060b 	add.w	r6, r4, #11
 8012826:	f000 fbf9 	bl	801301c <__malloc_unlock>
 801282a:	f026 0607 	bic.w	r6, r6, #7
 801282e:	1d23      	adds	r3, r4, #4
 8012830:	1af2      	subs	r2, r6, r3
 8012832:	d0b6      	beq.n	80127a2 <_malloc_r+0x22>
 8012834:	1b9b      	subs	r3, r3, r6
 8012836:	50a3      	str	r3, [r4, r2]
 8012838:	e7b3      	b.n	80127a2 <_malloc_r+0x22>
 801283a:	6862      	ldr	r2, [r4, #4]
 801283c:	42a3      	cmp	r3, r4
 801283e:	bf0c      	ite	eq
 8012840:	6032      	streq	r2, [r6, #0]
 8012842:	605a      	strne	r2, [r3, #4]
 8012844:	e7ec      	b.n	8012820 <_malloc_r+0xa0>
 8012846:	4623      	mov	r3, r4
 8012848:	6864      	ldr	r4, [r4, #4]
 801284a:	e7b2      	b.n	80127b2 <_malloc_r+0x32>
 801284c:	4634      	mov	r4, r6
 801284e:	6876      	ldr	r6, [r6, #4]
 8012850:	e7b9      	b.n	80127c6 <_malloc_r+0x46>
 8012852:	230c      	movs	r3, #12
 8012854:	603b      	str	r3, [r7, #0]
 8012856:	4638      	mov	r0, r7
 8012858:	f000 fbe0 	bl	801301c <__malloc_unlock>
 801285c:	e7a1      	b.n	80127a2 <_malloc_r+0x22>
 801285e:	6025      	str	r5, [r4, #0]
 8012860:	e7de      	b.n	8012820 <_malloc_r+0xa0>
 8012862:	bf00      	nop
 8012864:	20002e84 	.word	0x20002e84

08012868 <__ssputs_r>:
 8012868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801286c:	688e      	ldr	r6, [r1, #8]
 801286e:	429e      	cmp	r6, r3
 8012870:	4682      	mov	sl, r0
 8012872:	460c      	mov	r4, r1
 8012874:	4690      	mov	r8, r2
 8012876:	461f      	mov	r7, r3
 8012878:	d838      	bhi.n	80128ec <__ssputs_r+0x84>
 801287a:	898a      	ldrh	r2, [r1, #12]
 801287c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012880:	d032      	beq.n	80128e8 <__ssputs_r+0x80>
 8012882:	6825      	ldr	r5, [r4, #0]
 8012884:	6909      	ldr	r1, [r1, #16]
 8012886:	eba5 0901 	sub.w	r9, r5, r1
 801288a:	6965      	ldr	r5, [r4, #20]
 801288c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012894:	3301      	adds	r3, #1
 8012896:	444b      	add	r3, r9
 8012898:	106d      	asrs	r5, r5, #1
 801289a:	429d      	cmp	r5, r3
 801289c:	bf38      	it	cc
 801289e:	461d      	movcc	r5, r3
 80128a0:	0553      	lsls	r3, r2, #21
 80128a2:	d531      	bpl.n	8012908 <__ssputs_r+0xa0>
 80128a4:	4629      	mov	r1, r5
 80128a6:	f7ff ff6b 	bl	8012780 <_malloc_r>
 80128aa:	4606      	mov	r6, r0
 80128ac:	b950      	cbnz	r0, 80128c4 <__ssputs_r+0x5c>
 80128ae:	230c      	movs	r3, #12
 80128b0:	f8ca 3000 	str.w	r3, [sl]
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128ba:	81a3      	strh	r3, [r4, #12]
 80128bc:	f04f 30ff 	mov.w	r0, #4294967295
 80128c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c4:	6921      	ldr	r1, [r4, #16]
 80128c6:	464a      	mov	r2, r9
 80128c8:	f7ff fa08 	bl	8011cdc <memcpy>
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80128d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128d6:	81a3      	strh	r3, [r4, #12]
 80128d8:	6126      	str	r6, [r4, #16]
 80128da:	6165      	str	r5, [r4, #20]
 80128dc:	444e      	add	r6, r9
 80128de:	eba5 0509 	sub.w	r5, r5, r9
 80128e2:	6026      	str	r6, [r4, #0]
 80128e4:	60a5      	str	r5, [r4, #8]
 80128e6:	463e      	mov	r6, r7
 80128e8:	42be      	cmp	r6, r7
 80128ea:	d900      	bls.n	80128ee <__ssputs_r+0x86>
 80128ec:	463e      	mov	r6, r7
 80128ee:	6820      	ldr	r0, [r4, #0]
 80128f0:	4632      	mov	r2, r6
 80128f2:	4641      	mov	r1, r8
 80128f4:	f000 fb72 	bl	8012fdc <memmove>
 80128f8:	68a3      	ldr	r3, [r4, #8]
 80128fa:	1b9b      	subs	r3, r3, r6
 80128fc:	60a3      	str	r3, [r4, #8]
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	4433      	add	r3, r6
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	2000      	movs	r0, #0
 8012906:	e7db      	b.n	80128c0 <__ssputs_r+0x58>
 8012908:	462a      	mov	r2, r5
 801290a:	f000 fb8d 	bl	8013028 <_realloc_r>
 801290e:	4606      	mov	r6, r0
 8012910:	2800      	cmp	r0, #0
 8012912:	d1e1      	bne.n	80128d8 <__ssputs_r+0x70>
 8012914:	6921      	ldr	r1, [r4, #16]
 8012916:	4650      	mov	r0, sl
 8012918:	f7ff fec6 	bl	80126a8 <_free_r>
 801291c:	e7c7      	b.n	80128ae <__ssputs_r+0x46>
	...

08012920 <_svfiprintf_r>:
 8012920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012924:	4698      	mov	r8, r3
 8012926:	898b      	ldrh	r3, [r1, #12]
 8012928:	061b      	lsls	r3, r3, #24
 801292a:	b09d      	sub	sp, #116	; 0x74
 801292c:	4607      	mov	r7, r0
 801292e:	460d      	mov	r5, r1
 8012930:	4614      	mov	r4, r2
 8012932:	d50e      	bpl.n	8012952 <_svfiprintf_r+0x32>
 8012934:	690b      	ldr	r3, [r1, #16]
 8012936:	b963      	cbnz	r3, 8012952 <_svfiprintf_r+0x32>
 8012938:	2140      	movs	r1, #64	; 0x40
 801293a:	f7ff ff21 	bl	8012780 <_malloc_r>
 801293e:	6028      	str	r0, [r5, #0]
 8012940:	6128      	str	r0, [r5, #16]
 8012942:	b920      	cbnz	r0, 801294e <_svfiprintf_r+0x2e>
 8012944:	230c      	movs	r3, #12
 8012946:	603b      	str	r3, [r7, #0]
 8012948:	f04f 30ff 	mov.w	r0, #4294967295
 801294c:	e0d1      	b.n	8012af2 <_svfiprintf_r+0x1d2>
 801294e:	2340      	movs	r3, #64	; 0x40
 8012950:	616b      	str	r3, [r5, #20]
 8012952:	2300      	movs	r3, #0
 8012954:	9309      	str	r3, [sp, #36]	; 0x24
 8012956:	2320      	movs	r3, #32
 8012958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801295c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012960:	2330      	movs	r3, #48	; 0x30
 8012962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b0c <_svfiprintf_r+0x1ec>
 8012966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801296a:	f04f 0901 	mov.w	r9, #1
 801296e:	4623      	mov	r3, r4
 8012970:	469a      	mov	sl, r3
 8012972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012976:	b10a      	cbz	r2, 801297c <_svfiprintf_r+0x5c>
 8012978:	2a25      	cmp	r2, #37	; 0x25
 801297a:	d1f9      	bne.n	8012970 <_svfiprintf_r+0x50>
 801297c:	ebba 0b04 	subs.w	fp, sl, r4
 8012980:	d00b      	beq.n	801299a <_svfiprintf_r+0x7a>
 8012982:	465b      	mov	r3, fp
 8012984:	4622      	mov	r2, r4
 8012986:	4629      	mov	r1, r5
 8012988:	4638      	mov	r0, r7
 801298a:	f7ff ff6d 	bl	8012868 <__ssputs_r>
 801298e:	3001      	adds	r0, #1
 8012990:	f000 80aa 	beq.w	8012ae8 <_svfiprintf_r+0x1c8>
 8012994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012996:	445a      	add	r2, fp
 8012998:	9209      	str	r2, [sp, #36]	; 0x24
 801299a:	f89a 3000 	ldrb.w	r3, [sl]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f000 80a2 	beq.w	8012ae8 <_svfiprintf_r+0x1c8>
 80129a4:	2300      	movs	r3, #0
 80129a6:	f04f 32ff 	mov.w	r2, #4294967295
 80129aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129ae:	f10a 0a01 	add.w	sl, sl, #1
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	9307      	str	r3, [sp, #28]
 80129b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129ba:	931a      	str	r3, [sp, #104]	; 0x68
 80129bc:	4654      	mov	r4, sl
 80129be:	2205      	movs	r2, #5
 80129c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129c4:	4851      	ldr	r0, [pc, #324]	; (8012b0c <_svfiprintf_r+0x1ec>)
 80129c6:	f7ed fc2b 	bl	8000220 <memchr>
 80129ca:	9a04      	ldr	r2, [sp, #16]
 80129cc:	b9d8      	cbnz	r0, 8012a06 <_svfiprintf_r+0xe6>
 80129ce:	06d0      	lsls	r0, r2, #27
 80129d0:	bf44      	itt	mi
 80129d2:	2320      	movmi	r3, #32
 80129d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129d8:	0711      	lsls	r1, r2, #28
 80129da:	bf44      	itt	mi
 80129dc:	232b      	movmi	r3, #43	; 0x2b
 80129de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129e2:	f89a 3000 	ldrb.w	r3, [sl]
 80129e6:	2b2a      	cmp	r3, #42	; 0x2a
 80129e8:	d015      	beq.n	8012a16 <_svfiprintf_r+0xf6>
 80129ea:	9a07      	ldr	r2, [sp, #28]
 80129ec:	4654      	mov	r4, sl
 80129ee:	2000      	movs	r0, #0
 80129f0:	f04f 0c0a 	mov.w	ip, #10
 80129f4:	4621      	mov	r1, r4
 80129f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129fa:	3b30      	subs	r3, #48	; 0x30
 80129fc:	2b09      	cmp	r3, #9
 80129fe:	d94e      	bls.n	8012a9e <_svfiprintf_r+0x17e>
 8012a00:	b1b0      	cbz	r0, 8012a30 <_svfiprintf_r+0x110>
 8012a02:	9207      	str	r2, [sp, #28]
 8012a04:	e014      	b.n	8012a30 <_svfiprintf_r+0x110>
 8012a06:	eba0 0308 	sub.w	r3, r0, r8
 8012a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	46a2      	mov	sl, r4
 8012a14:	e7d2      	b.n	80129bc <_svfiprintf_r+0x9c>
 8012a16:	9b03      	ldr	r3, [sp, #12]
 8012a18:	1d19      	adds	r1, r3, #4
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	9103      	str	r1, [sp, #12]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	bfbb      	ittet	lt
 8012a22:	425b      	neglt	r3, r3
 8012a24:	f042 0202 	orrlt.w	r2, r2, #2
 8012a28:	9307      	strge	r3, [sp, #28]
 8012a2a:	9307      	strlt	r3, [sp, #28]
 8012a2c:	bfb8      	it	lt
 8012a2e:	9204      	strlt	r2, [sp, #16]
 8012a30:	7823      	ldrb	r3, [r4, #0]
 8012a32:	2b2e      	cmp	r3, #46	; 0x2e
 8012a34:	d10c      	bne.n	8012a50 <_svfiprintf_r+0x130>
 8012a36:	7863      	ldrb	r3, [r4, #1]
 8012a38:	2b2a      	cmp	r3, #42	; 0x2a
 8012a3a:	d135      	bne.n	8012aa8 <_svfiprintf_r+0x188>
 8012a3c:	9b03      	ldr	r3, [sp, #12]
 8012a3e:	1d1a      	adds	r2, r3, #4
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	9203      	str	r2, [sp, #12]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	bfb8      	it	lt
 8012a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a4c:	3402      	adds	r4, #2
 8012a4e:	9305      	str	r3, [sp, #20]
 8012a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b1c <_svfiprintf_r+0x1fc>
 8012a54:	7821      	ldrb	r1, [r4, #0]
 8012a56:	2203      	movs	r2, #3
 8012a58:	4650      	mov	r0, sl
 8012a5a:	f7ed fbe1 	bl	8000220 <memchr>
 8012a5e:	b140      	cbz	r0, 8012a72 <_svfiprintf_r+0x152>
 8012a60:	2340      	movs	r3, #64	; 0x40
 8012a62:	eba0 000a 	sub.w	r0, r0, sl
 8012a66:	fa03 f000 	lsl.w	r0, r3, r0
 8012a6a:	9b04      	ldr	r3, [sp, #16]
 8012a6c:	4303      	orrs	r3, r0
 8012a6e:	3401      	adds	r4, #1
 8012a70:	9304      	str	r3, [sp, #16]
 8012a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a76:	4826      	ldr	r0, [pc, #152]	; (8012b10 <_svfiprintf_r+0x1f0>)
 8012a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a7c:	2206      	movs	r2, #6
 8012a7e:	f7ed fbcf 	bl	8000220 <memchr>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d038      	beq.n	8012af8 <_svfiprintf_r+0x1d8>
 8012a86:	4b23      	ldr	r3, [pc, #140]	; (8012b14 <_svfiprintf_r+0x1f4>)
 8012a88:	bb1b      	cbnz	r3, 8012ad2 <_svfiprintf_r+0x1b2>
 8012a8a:	9b03      	ldr	r3, [sp, #12]
 8012a8c:	3307      	adds	r3, #7
 8012a8e:	f023 0307 	bic.w	r3, r3, #7
 8012a92:	3308      	adds	r3, #8
 8012a94:	9303      	str	r3, [sp, #12]
 8012a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a98:	4433      	add	r3, r6
 8012a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a9c:	e767      	b.n	801296e <_svfiprintf_r+0x4e>
 8012a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	2001      	movs	r0, #1
 8012aa6:	e7a5      	b.n	80129f4 <_svfiprintf_r+0xd4>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	3401      	adds	r4, #1
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	4619      	mov	r1, r3
 8012ab0:	f04f 0c0a 	mov.w	ip, #10
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012aba:	3a30      	subs	r2, #48	; 0x30
 8012abc:	2a09      	cmp	r2, #9
 8012abe:	d903      	bls.n	8012ac8 <_svfiprintf_r+0x1a8>
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d0c5      	beq.n	8012a50 <_svfiprintf_r+0x130>
 8012ac4:	9105      	str	r1, [sp, #20]
 8012ac6:	e7c3      	b.n	8012a50 <_svfiprintf_r+0x130>
 8012ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012acc:	4604      	mov	r4, r0
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e7f0      	b.n	8012ab4 <_svfiprintf_r+0x194>
 8012ad2:	ab03      	add	r3, sp, #12
 8012ad4:	9300      	str	r3, [sp, #0]
 8012ad6:	462a      	mov	r2, r5
 8012ad8:	4b0f      	ldr	r3, [pc, #60]	; (8012b18 <_svfiprintf_r+0x1f8>)
 8012ada:	a904      	add	r1, sp, #16
 8012adc:	4638      	mov	r0, r7
 8012ade:	f7fb fd33 	bl	800e548 <_printf_float>
 8012ae2:	1c42      	adds	r2, r0, #1
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	d1d6      	bne.n	8012a96 <_svfiprintf_r+0x176>
 8012ae8:	89ab      	ldrh	r3, [r5, #12]
 8012aea:	065b      	lsls	r3, r3, #25
 8012aec:	f53f af2c 	bmi.w	8012948 <_svfiprintf_r+0x28>
 8012af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012af2:	b01d      	add	sp, #116	; 0x74
 8012af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af8:	ab03      	add	r3, sp, #12
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	462a      	mov	r2, r5
 8012afe:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <_svfiprintf_r+0x1f8>)
 8012b00:	a904      	add	r1, sp, #16
 8012b02:	4638      	mov	r0, r7
 8012b04:	f7fb ffc4 	bl	800ea90 <_printf_i>
 8012b08:	e7eb      	b.n	8012ae2 <_svfiprintf_r+0x1c2>
 8012b0a:	bf00      	nop
 8012b0c:	080140b4 	.word	0x080140b4
 8012b10:	080140be 	.word	0x080140be
 8012b14:	0800e549 	.word	0x0800e549
 8012b18:	08012869 	.word	0x08012869
 8012b1c:	080140ba 	.word	0x080140ba

08012b20 <__sfputc_r>:
 8012b20:	6893      	ldr	r3, [r2, #8]
 8012b22:	3b01      	subs	r3, #1
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	b410      	push	{r4}
 8012b28:	6093      	str	r3, [r2, #8]
 8012b2a:	da08      	bge.n	8012b3e <__sfputc_r+0x1e>
 8012b2c:	6994      	ldr	r4, [r2, #24]
 8012b2e:	42a3      	cmp	r3, r4
 8012b30:	db01      	blt.n	8012b36 <__sfputc_r+0x16>
 8012b32:	290a      	cmp	r1, #10
 8012b34:	d103      	bne.n	8012b3e <__sfputc_r+0x1e>
 8012b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b3a:	f7fd bbe9 	b.w	8010310 <__swbuf_r>
 8012b3e:	6813      	ldr	r3, [r2, #0]
 8012b40:	1c58      	adds	r0, r3, #1
 8012b42:	6010      	str	r0, [r2, #0]
 8012b44:	7019      	strb	r1, [r3, #0]
 8012b46:	4608      	mov	r0, r1
 8012b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <__sfputs_r>:
 8012b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b50:	4606      	mov	r6, r0
 8012b52:	460f      	mov	r7, r1
 8012b54:	4614      	mov	r4, r2
 8012b56:	18d5      	adds	r5, r2, r3
 8012b58:	42ac      	cmp	r4, r5
 8012b5a:	d101      	bne.n	8012b60 <__sfputs_r+0x12>
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	e007      	b.n	8012b70 <__sfputs_r+0x22>
 8012b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b64:	463a      	mov	r2, r7
 8012b66:	4630      	mov	r0, r6
 8012b68:	f7ff ffda 	bl	8012b20 <__sfputc_r>
 8012b6c:	1c43      	adds	r3, r0, #1
 8012b6e:	d1f3      	bne.n	8012b58 <__sfputs_r+0xa>
 8012b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b74 <_vfiprintf_r>:
 8012b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b78:	460d      	mov	r5, r1
 8012b7a:	b09d      	sub	sp, #116	; 0x74
 8012b7c:	4614      	mov	r4, r2
 8012b7e:	4698      	mov	r8, r3
 8012b80:	4606      	mov	r6, r0
 8012b82:	b118      	cbz	r0, 8012b8c <_vfiprintf_r+0x18>
 8012b84:	6983      	ldr	r3, [r0, #24]
 8012b86:	b90b      	cbnz	r3, 8012b8c <_vfiprintf_r+0x18>
 8012b88:	f7fe fc16 	bl	80113b8 <__sinit>
 8012b8c:	4b89      	ldr	r3, [pc, #548]	; (8012db4 <_vfiprintf_r+0x240>)
 8012b8e:	429d      	cmp	r5, r3
 8012b90:	d11b      	bne.n	8012bca <_vfiprintf_r+0x56>
 8012b92:	6875      	ldr	r5, [r6, #4]
 8012b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b96:	07d9      	lsls	r1, r3, #31
 8012b98:	d405      	bmi.n	8012ba6 <_vfiprintf_r+0x32>
 8012b9a:	89ab      	ldrh	r3, [r5, #12]
 8012b9c:	059a      	lsls	r2, r3, #22
 8012b9e:	d402      	bmi.n	8012ba6 <_vfiprintf_r+0x32>
 8012ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ba2:	f7ff f81a 	bl	8011bda <__retarget_lock_acquire_recursive>
 8012ba6:	89ab      	ldrh	r3, [r5, #12]
 8012ba8:	071b      	lsls	r3, r3, #28
 8012baa:	d501      	bpl.n	8012bb0 <_vfiprintf_r+0x3c>
 8012bac:	692b      	ldr	r3, [r5, #16]
 8012bae:	b9eb      	cbnz	r3, 8012bec <_vfiprintf_r+0x78>
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7fd fbfe 	bl	80103b4 <__swsetup_r>
 8012bb8:	b1c0      	cbz	r0, 8012bec <_vfiprintf_r+0x78>
 8012bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bbc:	07dc      	lsls	r4, r3, #31
 8012bbe:	d50e      	bpl.n	8012bde <_vfiprintf_r+0x6a>
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	b01d      	add	sp, #116	; 0x74
 8012bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bca:	4b7b      	ldr	r3, [pc, #492]	; (8012db8 <_vfiprintf_r+0x244>)
 8012bcc:	429d      	cmp	r5, r3
 8012bce:	d101      	bne.n	8012bd4 <_vfiprintf_r+0x60>
 8012bd0:	68b5      	ldr	r5, [r6, #8]
 8012bd2:	e7df      	b.n	8012b94 <_vfiprintf_r+0x20>
 8012bd4:	4b79      	ldr	r3, [pc, #484]	; (8012dbc <_vfiprintf_r+0x248>)
 8012bd6:	429d      	cmp	r5, r3
 8012bd8:	bf08      	it	eq
 8012bda:	68f5      	ldreq	r5, [r6, #12]
 8012bdc:	e7da      	b.n	8012b94 <_vfiprintf_r+0x20>
 8012bde:	89ab      	ldrh	r3, [r5, #12]
 8012be0:	0598      	lsls	r0, r3, #22
 8012be2:	d4ed      	bmi.n	8012bc0 <_vfiprintf_r+0x4c>
 8012be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012be6:	f7fe fff9 	bl	8011bdc <__retarget_lock_release_recursive>
 8012bea:	e7e9      	b.n	8012bc0 <_vfiprintf_r+0x4c>
 8012bec:	2300      	movs	r3, #0
 8012bee:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf0:	2320      	movs	r3, #32
 8012bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bfa:	2330      	movs	r3, #48	; 0x30
 8012bfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012dc0 <_vfiprintf_r+0x24c>
 8012c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c04:	f04f 0901 	mov.w	r9, #1
 8012c08:	4623      	mov	r3, r4
 8012c0a:	469a      	mov	sl, r3
 8012c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c10:	b10a      	cbz	r2, 8012c16 <_vfiprintf_r+0xa2>
 8012c12:	2a25      	cmp	r2, #37	; 0x25
 8012c14:	d1f9      	bne.n	8012c0a <_vfiprintf_r+0x96>
 8012c16:	ebba 0b04 	subs.w	fp, sl, r4
 8012c1a:	d00b      	beq.n	8012c34 <_vfiprintf_r+0xc0>
 8012c1c:	465b      	mov	r3, fp
 8012c1e:	4622      	mov	r2, r4
 8012c20:	4629      	mov	r1, r5
 8012c22:	4630      	mov	r0, r6
 8012c24:	f7ff ff93 	bl	8012b4e <__sfputs_r>
 8012c28:	3001      	adds	r0, #1
 8012c2a:	f000 80aa 	beq.w	8012d82 <_vfiprintf_r+0x20e>
 8012c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c30:	445a      	add	r2, fp
 8012c32:	9209      	str	r2, [sp, #36]	; 0x24
 8012c34:	f89a 3000 	ldrb.w	r3, [sl]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 80a2 	beq.w	8012d82 <_vfiprintf_r+0x20e>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	f04f 32ff 	mov.w	r2, #4294967295
 8012c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c48:	f10a 0a01 	add.w	sl, sl, #1
 8012c4c:	9304      	str	r3, [sp, #16]
 8012c4e:	9307      	str	r3, [sp, #28]
 8012c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c54:	931a      	str	r3, [sp, #104]	; 0x68
 8012c56:	4654      	mov	r4, sl
 8012c58:	2205      	movs	r2, #5
 8012c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c5e:	4858      	ldr	r0, [pc, #352]	; (8012dc0 <_vfiprintf_r+0x24c>)
 8012c60:	f7ed fade 	bl	8000220 <memchr>
 8012c64:	9a04      	ldr	r2, [sp, #16]
 8012c66:	b9d8      	cbnz	r0, 8012ca0 <_vfiprintf_r+0x12c>
 8012c68:	06d1      	lsls	r1, r2, #27
 8012c6a:	bf44      	itt	mi
 8012c6c:	2320      	movmi	r3, #32
 8012c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c72:	0713      	lsls	r3, r2, #28
 8012c74:	bf44      	itt	mi
 8012c76:	232b      	movmi	r3, #43	; 0x2b
 8012c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c80:	2b2a      	cmp	r3, #42	; 0x2a
 8012c82:	d015      	beq.n	8012cb0 <_vfiprintf_r+0x13c>
 8012c84:	9a07      	ldr	r2, [sp, #28]
 8012c86:	4654      	mov	r4, sl
 8012c88:	2000      	movs	r0, #0
 8012c8a:	f04f 0c0a 	mov.w	ip, #10
 8012c8e:	4621      	mov	r1, r4
 8012c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c94:	3b30      	subs	r3, #48	; 0x30
 8012c96:	2b09      	cmp	r3, #9
 8012c98:	d94e      	bls.n	8012d38 <_vfiprintf_r+0x1c4>
 8012c9a:	b1b0      	cbz	r0, 8012cca <_vfiprintf_r+0x156>
 8012c9c:	9207      	str	r2, [sp, #28]
 8012c9e:	e014      	b.n	8012cca <_vfiprintf_r+0x156>
 8012ca0:	eba0 0308 	sub.w	r3, r0, r8
 8012ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	9304      	str	r3, [sp, #16]
 8012cac:	46a2      	mov	sl, r4
 8012cae:	e7d2      	b.n	8012c56 <_vfiprintf_r+0xe2>
 8012cb0:	9b03      	ldr	r3, [sp, #12]
 8012cb2:	1d19      	adds	r1, r3, #4
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	9103      	str	r1, [sp, #12]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bfbb      	ittet	lt
 8012cbc:	425b      	neglt	r3, r3
 8012cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8012cc2:	9307      	strge	r3, [sp, #28]
 8012cc4:	9307      	strlt	r3, [sp, #28]
 8012cc6:	bfb8      	it	lt
 8012cc8:	9204      	strlt	r2, [sp, #16]
 8012cca:	7823      	ldrb	r3, [r4, #0]
 8012ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8012cce:	d10c      	bne.n	8012cea <_vfiprintf_r+0x176>
 8012cd0:	7863      	ldrb	r3, [r4, #1]
 8012cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8012cd4:	d135      	bne.n	8012d42 <_vfiprintf_r+0x1ce>
 8012cd6:	9b03      	ldr	r3, [sp, #12]
 8012cd8:	1d1a      	adds	r2, r3, #4
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	9203      	str	r2, [sp, #12]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	bfb8      	it	lt
 8012ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ce6:	3402      	adds	r4, #2
 8012ce8:	9305      	str	r3, [sp, #20]
 8012cea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012dd0 <_vfiprintf_r+0x25c>
 8012cee:	7821      	ldrb	r1, [r4, #0]
 8012cf0:	2203      	movs	r2, #3
 8012cf2:	4650      	mov	r0, sl
 8012cf4:	f7ed fa94 	bl	8000220 <memchr>
 8012cf8:	b140      	cbz	r0, 8012d0c <_vfiprintf_r+0x198>
 8012cfa:	2340      	movs	r3, #64	; 0x40
 8012cfc:	eba0 000a 	sub.w	r0, r0, sl
 8012d00:	fa03 f000 	lsl.w	r0, r3, r0
 8012d04:	9b04      	ldr	r3, [sp, #16]
 8012d06:	4303      	orrs	r3, r0
 8012d08:	3401      	adds	r4, #1
 8012d0a:	9304      	str	r3, [sp, #16]
 8012d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d10:	482c      	ldr	r0, [pc, #176]	; (8012dc4 <_vfiprintf_r+0x250>)
 8012d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d16:	2206      	movs	r2, #6
 8012d18:	f7ed fa82 	bl	8000220 <memchr>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d03f      	beq.n	8012da0 <_vfiprintf_r+0x22c>
 8012d20:	4b29      	ldr	r3, [pc, #164]	; (8012dc8 <_vfiprintf_r+0x254>)
 8012d22:	bb1b      	cbnz	r3, 8012d6c <_vfiprintf_r+0x1f8>
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	3307      	adds	r3, #7
 8012d28:	f023 0307 	bic.w	r3, r3, #7
 8012d2c:	3308      	adds	r3, #8
 8012d2e:	9303      	str	r3, [sp, #12]
 8012d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d32:	443b      	add	r3, r7
 8012d34:	9309      	str	r3, [sp, #36]	; 0x24
 8012d36:	e767      	b.n	8012c08 <_vfiprintf_r+0x94>
 8012d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	2001      	movs	r0, #1
 8012d40:	e7a5      	b.n	8012c8e <_vfiprintf_r+0x11a>
 8012d42:	2300      	movs	r3, #0
 8012d44:	3401      	adds	r4, #1
 8012d46:	9305      	str	r3, [sp, #20]
 8012d48:	4619      	mov	r1, r3
 8012d4a:	f04f 0c0a 	mov.w	ip, #10
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d54:	3a30      	subs	r2, #48	; 0x30
 8012d56:	2a09      	cmp	r2, #9
 8012d58:	d903      	bls.n	8012d62 <_vfiprintf_r+0x1ee>
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d0c5      	beq.n	8012cea <_vfiprintf_r+0x176>
 8012d5e:	9105      	str	r1, [sp, #20]
 8012d60:	e7c3      	b.n	8012cea <_vfiprintf_r+0x176>
 8012d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d66:	4604      	mov	r4, r0
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e7f0      	b.n	8012d4e <_vfiprintf_r+0x1da>
 8012d6c:	ab03      	add	r3, sp, #12
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	462a      	mov	r2, r5
 8012d72:	4b16      	ldr	r3, [pc, #88]	; (8012dcc <_vfiprintf_r+0x258>)
 8012d74:	a904      	add	r1, sp, #16
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7fb fbe6 	bl	800e548 <_printf_float>
 8012d7c:	4607      	mov	r7, r0
 8012d7e:	1c78      	adds	r0, r7, #1
 8012d80:	d1d6      	bne.n	8012d30 <_vfiprintf_r+0x1bc>
 8012d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d84:	07d9      	lsls	r1, r3, #31
 8012d86:	d405      	bmi.n	8012d94 <_vfiprintf_r+0x220>
 8012d88:	89ab      	ldrh	r3, [r5, #12]
 8012d8a:	059a      	lsls	r2, r3, #22
 8012d8c:	d402      	bmi.n	8012d94 <_vfiprintf_r+0x220>
 8012d8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d90:	f7fe ff24 	bl	8011bdc <__retarget_lock_release_recursive>
 8012d94:	89ab      	ldrh	r3, [r5, #12]
 8012d96:	065b      	lsls	r3, r3, #25
 8012d98:	f53f af12 	bmi.w	8012bc0 <_vfiprintf_r+0x4c>
 8012d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d9e:	e711      	b.n	8012bc4 <_vfiprintf_r+0x50>
 8012da0:	ab03      	add	r3, sp, #12
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	462a      	mov	r2, r5
 8012da6:	4b09      	ldr	r3, [pc, #36]	; (8012dcc <_vfiprintf_r+0x258>)
 8012da8:	a904      	add	r1, sp, #16
 8012daa:	4630      	mov	r0, r6
 8012dac:	f7fb fe70 	bl	800ea90 <_printf_i>
 8012db0:	e7e4      	b.n	8012d7c <_vfiprintf_r+0x208>
 8012db2:	bf00      	nop
 8012db4:	08013e9c 	.word	0x08013e9c
 8012db8:	08013ebc 	.word	0x08013ebc
 8012dbc:	08013e7c 	.word	0x08013e7c
 8012dc0:	080140b4 	.word	0x080140b4
 8012dc4:	080140be 	.word	0x080140be
 8012dc8:	0800e549 	.word	0x0800e549
 8012dcc:	08012b4f 	.word	0x08012b4f
 8012dd0:	080140ba 	.word	0x080140ba
 8012dd4:	00000000 	.word	0x00000000

08012dd8 <nan>:
 8012dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012de0 <nan+0x8>
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	00000000 	.word	0x00000000
 8012de4:	7ff80000 	.word	0x7ff80000

08012de8 <_sbrk_r>:
 8012de8:	b538      	push	{r3, r4, r5, lr}
 8012dea:	4d06      	ldr	r5, [pc, #24]	; (8012e04 <_sbrk_r+0x1c>)
 8012dec:	2300      	movs	r3, #0
 8012dee:	4604      	mov	r4, r0
 8012df0:	4608      	mov	r0, r1
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	f7f2 fc1a 	bl	800562c <_sbrk>
 8012df8:	1c43      	adds	r3, r0, #1
 8012dfa:	d102      	bne.n	8012e02 <_sbrk_r+0x1a>
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	b103      	cbz	r3, 8012e02 <_sbrk_r+0x1a>
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	bd38      	pop	{r3, r4, r5, pc}
 8012e04:	20002e8c 	.word	0x20002e8c

08012e08 <__sread>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	460c      	mov	r4, r1
 8012e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e10:	f000 f93a 	bl	8013088 <_read_r>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	bfab      	itete	ge
 8012e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8012e1c:	181b      	addge	r3, r3, r0
 8012e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e22:	bfac      	ite	ge
 8012e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e26:	81a3      	strhlt	r3, [r4, #12]
 8012e28:	bd10      	pop	{r4, pc}

08012e2a <__swrite>:
 8012e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2e:	461f      	mov	r7, r3
 8012e30:	898b      	ldrh	r3, [r1, #12]
 8012e32:	05db      	lsls	r3, r3, #23
 8012e34:	4605      	mov	r5, r0
 8012e36:	460c      	mov	r4, r1
 8012e38:	4616      	mov	r6, r2
 8012e3a:	d505      	bpl.n	8012e48 <__swrite+0x1e>
 8012e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e40:	2302      	movs	r3, #2
 8012e42:	2200      	movs	r2, #0
 8012e44:	f000 f8b8 	bl	8012fb8 <_lseek_r>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e52:	81a3      	strh	r3, [r4, #12]
 8012e54:	4632      	mov	r2, r6
 8012e56:	463b      	mov	r3, r7
 8012e58:	4628      	mov	r0, r5
 8012e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5e:	f000 b837 	b.w	8012ed0 <_write_r>

08012e62 <__sseek>:
 8012e62:	b510      	push	{r4, lr}
 8012e64:	460c      	mov	r4, r1
 8012e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e6a:	f000 f8a5 	bl	8012fb8 <_lseek_r>
 8012e6e:	1c43      	adds	r3, r0, #1
 8012e70:	89a3      	ldrh	r3, [r4, #12]
 8012e72:	bf15      	itete	ne
 8012e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e7e:	81a3      	strheq	r3, [r4, #12]
 8012e80:	bf18      	it	ne
 8012e82:	81a3      	strhne	r3, [r4, #12]
 8012e84:	bd10      	pop	{r4, pc}

08012e86 <__sclose>:
 8012e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e8a:	f000 b851 	b.w	8012f30 <_close_r>

08012e8e <strncmp>:
 8012e8e:	b510      	push	{r4, lr}
 8012e90:	b17a      	cbz	r2, 8012eb2 <strncmp+0x24>
 8012e92:	4603      	mov	r3, r0
 8012e94:	3901      	subs	r1, #1
 8012e96:	1884      	adds	r4, r0, r2
 8012e98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012ea0:	4290      	cmp	r0, r2
 8012ea2:	d101      	bne.n	8012ea8 <strncmp+0x1a>
 8012ea4:	42a3      	cmp	r3, r4
 8012ea6:	d101      	bne.n	8012eac <strncmp+0x1e>
 8012ea8:	1a80      	subs	r0, r0, r2
 8012eaa:	bd10      	pop	{r4, pc}
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d1f3      	bne.n	8012e98 <strncmp+0xa>
 8012eb0:	e7fa      	b.n	8012ea8 <strncmp+0x1a>
 8012eb2:	4610      	mov	r0, r2
 8012eb4:	e7f9      	b.n	8012eaa <strncmp+0x1c>

08012eb6 <__ascii_wctomb>:
 8012eb6:	b149      	cbz	r1, 8012ecc <__ascii_wctomb+0x16>
 8012eb8:	2aff      	cmp	r2, #255	; 0xff
 8012eba:	bf85      	ittet	hi
 8012ebc:	238a      	movhi	r3, #138	; 0x8a
 8012ebe:	6003      	strhi	r3, [r0, #0]
 8012ec0:	700a      	strbls	r2, [r1, #0]
 8012ec2:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ec6:	bf98      	it	ls
 8012ec8:	2001      	movls	r0, #1
 8012eca:	4770      	bx	lr
 8012ecc:	4608      	mov	r0, r1
 8012ece:	4770      	bx	lr

08012ed0 <_write_r>:
 8012ed0:	b538      	push	{r3, r4, r5, lr}
 8012ed2:	4d07      	ldr	r5, [pc, #28]	; (8012ef0 <_write_r+0x20>)
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	4608      	mov	r0, r1
 8012ed8:	4611      	mov	r1, r2
 8012eda:	2200      	movs	r2, #0
 8012edc:	602a      	str	r2, [r5, #0]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	f7f2 fb54 	bl	800558c <_write>
 8012ee4:	1c43      	adds	r3, r0, #1
 8012ee6:	d102      	bne.n	8012eee <_write_r+0x1e>
 8012ee8:	682b      	ldr	r3, [r5, #0]
 8012eea:	b103      	cbz	r3, 8012eee <_write_r+0x1e>
 8012eec:	6023      	str	r3, [r4, #0]
 8012eee:	bd38      	pop	{r3, r4, r5, pc}
 8012ef0:	20002e8c 	.word	0x20002e8c

08012ef4 <__assert_func>:
 8012ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ef6:	4614      	mov	r4, r2
 8012ef8:	461a      	mov	r2, r3
 8012efa:	4b09      	ldr	r3, [pc, #36]	; (8012f20 <__assert_func+0x2c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	4605      	mov	r5, r0
 8012f00:	68d8      	ldr	r0, [r3, #12]
 8012f02:	b14c      	cbz	r4, 8012f18 <__assert_func+0x24>
 8012f04:	4b07      	ldr	r3, [pc, #28]	; (8012f24 <__assert_func+0x30>)
 8012f06:	9100      	str	r1, [sp, #0]
 8012f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f0c:	4906      	ldr	r1, [pc, #24]	; (8012f28 <__assert_func+0x34>)
 8012f0e:	462b      	mov	r3, r5
 8012f10:	f000 f81e 	bl	8012f50 <fiprintf>
 8012f14:	f000 f8ca 	bl	80130ac <abort>
 8012f18:	4b04      	ldr	r3, [pc, #16]	; (8012f2c <__assert_func+0x38>)
 8012f1a:	461c      	mov	r4, r3
 8012f1c:	e7f3      	b.n	8012f06 <__assert_func+0x12>
 8012f1e:	bf00      	nop
 8012f20:	20000054 	.word	0x20000054
 8012f24:	080140c5 	.word	0x080140c5
 8012f28:	080140d2 	.word	0x080140d2
 8012f2c:	08014100 	.word	0x08014100

08012f30 <_close_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	4d06      	ldr	r5, [pc, #24]	; (8012f4c <_close_r+0x1c>)
 8012f34:	2300      	movs	r3, #0
 8012f36:	4604      	mov	r4, r0
 8012f38:	4608      	mov	r0, r1
 8012f3a:	602b      	str	r3, [r5, #0]
 8012f3c:	f7f2 fb42 	bl	80055c4 <_close>
 8012f40:	1c43      	adds	r3, r0, #1
 8012f42:	d102      	bne.n	8012f4a <_close_r+0x1a>
 8012f44:	682b      	ldr	r3, [r5, #0]
 8012f46:	b103      	cbz	r3, 8012f4a <_close_r+0x1a>
 8012f48:	6023      	str	r3, [r4, #0]
 8012f4a:	bd38      	pop	{r3, r4, r5, pc}
 8012f4c:	20002e8c 	.word	0x20002e8c

08012f50 <fiprintf>:
 8012f50:	b40e      	push	{r1, r2, r3}
 8012f52:	b503      	push	{r0, r1, lr}
 8012f54:	4601      	mov	r1, r0
 8012f56:	ab03      	add	r3, sp, #12
 8012f58:	4805      	ldr	r0, [pc, #20]	; (8012f70 <fiprintf+0x20>)
 8012f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f5e:	6800      	ldr	r0, [r0, #0]
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	f7ff fe07 	bl	8012b74 <_vfiprintf_r>
 8012f66:	b002      	add	sp, #8
 8012f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f6c:	b003      	add	sp, #12
 8012f6e:	4770      	bx	lr
 8012f70:	20000054 	.word	0x20000054

08012f74 <_fstat_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d07      	ldr	r5, [pc, #28]	; (8012f94 <_fstat_r+0x20>)
 8012f78:	2300      	movs	r3, #0
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4608      	mov	r0, r1
 8012f7e:	4611      	mov	r1, r2
 8012f80:	602b      	str	r3, [r5, #0]
 8012f82:	f7f2 fb2b 	bl	80055dc <_fstat>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d102      	bne.n	8012f90 <_fstat_r+0x1c>
 8012f8a:	682b      	ldr	r3, [r5, #0]
 8012f8c:	b103      	cbz	r3, 8012f90 <_fstat_r+0x1c>
 8012f8e:	6023      	str	r3, [r4, #0]
 8012f90:	bd38      	pop	{r3, r4, r5, pc}
 8012f92:	bf00      	nop
 8012f94:	20002e8c 	.word	0x20002e8c

08012f98 <_isatty_r>:
 8012f98:	b538      	push	{r3, r4, r5, lr}
 8012f9a:	4d06      	ldr	r5, [pc, #24]	; (8012fb4 <_isatty_r+0x1c>)
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	4608      	mov	r0, r1
 8012fa2:	602b      	str	r3, [r5, #0]
 8012fa4:	f7f2 fb2a 	bl	80055fc <_isatty>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d102      	bne.n	8012fb2 <_isatty_r+0x1a>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	b103      	cbz	r3, 8012fb2 <_isatty_r+0x1a>
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	bd38      	pop	{r3, r4, r5, pc}
 8012fb4:	20002e8c 	.word	0x20002e8c

08012fb8 <_lseek_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d07      	ldr	r5, [pc, #28]	; (8012fd8 <_lseek_r+0x20>)
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	4608      	mov	r0, r1
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	602a      	str	r2, [r5, #0]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f7f2 fb23 	bl	8005612 <_lseek>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_lseek_r+0x1e>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_lseek_r+0x1e>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	20002e8c 	.word	0x20002e8c

08012fdc <memmove>:
 8012fdc:	4288      	cmp	r0, r1
 8012fde:	b510      	push	{r4, lr}
 8012fe0:	eb01 0402 	add.w	r4, r1, r2
 8012fe4:	d902      	bls.n	8012fec <memmove+0x10>
 8012fe6:	4284      	cmp	r4, r0
 8012fe8:	4623      	mov	r3, r4
 8012fea:	d807      	bhi.n	8012ffc <memmove+0x20>
 8012fec:	1e43      	subs	r3, r0, #1
 8012fee:	42a1      	cmp	r1, r4
 8012ff0:	d008      	beq.n	8013004 <memmove+0x28>
 8012ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ffa:	e7f8      	b.n	8012fee <memmove+0x12>
 8012ffc:	4402      	add	r2, r0
 8012ffe:	4601      	mov	r1, r0
 8013000:	428a      	cmp	r2, r1
 8013002:	d100      	bne.n	8013006 <memmove+0x2a>
 8013004:	bd10      	pop	{r4, pc}
 8013006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801300a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801300e:	e7f7      	b.n	8013000 <memmove+0x24>

08013010 <__malloc_lock>:
 8013010:	4801      	ldr	r0, [pc, #4]	; (8013018 <__malloc_lock+0x8>)
 8013012:	f7fe bde2 	b.w	8011bda <__retarget_lock_acquire_recursive>
 8013016:	bf00      	nop
 8013018:	20002e80 	.word	0x20002e80

0801301c <__malloc_unlock>:
 801301c:	4801      	ldr	r0, [pc, #4]	; (8013024 <__malloc_unlock+0x8>)
 801301e:	f7fe bddd 	b.w	8011bdc <__retarget_lock_release_recursive>
 8013022:	bf00      	nop
 8013024:	20002e80 	.word	0x20002e80

08013028 <_realloc_r>:
 8013028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302c:	4680      	mov	r8, r0
 801302e:	4614      	mov	r4, r2
 8013030:	460e      	mov	r6, r1
 8013032:	b921      	cbnz	r1, 801303e <_realloc_r+0x16>
 8013034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013038:	4611      	mov	r1, r2
 801303a:	f7ff bba1 	b.w	8012780 <_malloc_r>
 801303e:	b92a      	cbnz	r2, 801304c <_realloc_r+0x24>
 8013040:	f7ff fb32 	bl	80126a8 <_free_r>
 8013044:	4625      	mov	r5, r4
 8013046:	4628      	mov	r0, r5
 8013048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801304c:	f000 f835 	bl	80130ba <_malloc_usable_size_r>
 8013050:	4284      	cmp	r4, r0
 8013052:	4607      	mov	r7, r0
 8013054:	d802      	bhi.n	801305c <_realloc_r+0x34>
 8013056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801305a:	d812      	bhi.n	8013082 <_realloc_r+0x5a>
 801305c:	4621      	mov	r1, r4
 801305e:	4640      	mov	r0, r8
 8013060:	f7ff fb8e 	bl	8012780 <_malloc_r>
 8013064:	4605      	mov	r5, r0
 8013066:	2800      	cmp	r0, #0
 8013068:	d0ed      	beq.n	8013046 <_realloc_r+0x1e>
 801306a:	42bc      	cmp	r4, r7
 801306c:	4622      	mov	r2, r4
 801306e:	4631      	mov	r1, r6
 8013070:	bf28      	it	cs
 8013072:	463a      	movcs	r2, r7
 8013074:	f7fe fe32 	bl	8011cdc <memcpy>
 8013078:	4631      	mov	r1, r6
 801307a:	4640      	mov	r0, r8
 801307c:	f7ff fb14 	bl	80126a8 <_free_r>
 8013080:	e7e1      	b.n	8013046 <_realloc_r+0x1e>
 8013082:	4635      	mov	r5, r6
 8013084:	e7df      	b.n	8013046 <_realloc_r+0x1e>
	...

08013088 <_read_r>:
 8013088:	b538      	push	{r3, r4, r5, lr}
 801308a:	4d07      	ldr	r5, [pc, #28]	; (80130a8 <_read_r+0x20>)
 801308c:	4604      	mov	r4, r0
 801308e:	4608      	mov	r0, r1
 8013090:	4611      	mov	r1, r2
 8013092:	2200      	movs	r2, #0
 8013094:	602a      	str	r2, [r5, #0]
 8013096:	461a      	mov	r2, r3
 8013098:	f7f2 fa5b 	bl	8005552 <_read>
 801309c:	1c43      	adds	r3, r0, #1
 801309e:	d102      	bne.n	80130a6 <_read_r+0x1e>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	b103      	cbz	r3, 80130a6 <_read_r+0x1e>
 80130a4:	6023      	str	r3, [r4, #0]
 80130a6:	bd38      	pop	{r3, r4, r5, pc}
 80130a8:	20002e8c 	.word	0x20002e8c

080130ac <abort>:
 80130ac:	b508      	push	{r3, lr}
 80130ae:	2006      	movs	r0, #6
 80130b0:	f000 f834 	bl	801311c <raise>
 80130b4:	2001      	movs	r0, #1
 80130b6:	f7f2 fa42 	bl	800553e <_exit>

080130ba <_malloc_usable_size_r>:
 80130ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130be:	1f18      	subs	r0, r3, #4
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	bfbc      	itt	lt
 80130c4:	580b      	ldrlt	r3, [r1, r0]
 80130c6:	18c0      	addlt	r0, r0, r3
 80130c8:	4770      	bx	lr

080130ca <_raise_r>:
 80130ca:	291f      	cmp	r1, #31
 80130cc:	b538      	push	{r3, r4, r5, lr}
 80130ce:	4604      	mov	r4, r0
 80130d0:	460d      	mov	r5, r1
 80130d2:	d904      	bls.n	80130de <_raise_r+0x14>
 80130d4:	2316      	movs	r3, #22
 80130d6:	6003      	str	r3, [r0, #0]
 80130d8:	f04f 30ff 	mov.w	r0, #4294967295
 80130dc:	bd38      	pop	{r3, r4, r5, pc}
 80130de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130e0:	b112      	cbz	r2, 80130e8 <_raise_r+0x1e>
 80130e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130e6:	b94b      	cbnz	r3, 80130fc <_raise_r+0x32>
 80130e8:	4620      	mov	r0, r4
 80130ea:	f000 f831 	bl	8013150 <_getpid_r>
 80130ee:	462a      	mov	r2, r5
 80130f0:	4601      	mov	r1, r0
 80130f2:	4620      	mov	r0, r4
 80130f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130f8:	f000 b818 	b.w	801312c <_kill_r>
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d00a      	beq.n	8013116 <_raise_r+0x4c>
 8013100:	1c59      	adds	r1, r3, #1
 8013102:	d103      	bne.n	801310c <_raise_r+0x42>
 8013104:	2316      	movs	r3, #22
 8013106:	6003      	str	r3, [r0, #0]
 8013108:	2001      	movs	r0, #1
 801310a:	e7e7      	b.n	80130dc <_raise_r+0x12>
 801310c:	2400      	movs	r4, #0
 801310e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013112:	4628      	mov	r0, r5
 8013114:	4798      	blx	r3
 8013116:	2000      	movs	r0, #0
 8013118:	e7e0      	b.n	80130dc <_raise_r+0x12>
	...

0801311c <raise>:
 801311c:	4b02      	ldr	r3, [pc, #8]	; (8013128 <raise+0xc>)
 801311e:	4601      	mov	r1, r0
 8013120:	6818      	ldr	r0, [r3, #0]
 8013122:	f7ff bfd2 	b.w	80130ca <_raise_r>
 8013126:	bf00      	nop
 8013128:	20000054 	.word	0x20000054

0801312c <_kill_r>:
 801312c:	b538      	push	{r3, r4, r5, lr}
 801312e:	4d07      	ldr	r5, [pc, #28]	; (801314c <_kill_r+0x20>)
 8013130:	2300      	movs	r3, #0
 8013132:	4604      	mov	r4, r0
 8013134:	4608      	mov	r0, r1
 8013136:	4611      	mov	r1, r2
 8013138:	602b      	str	r3, [r5, #0]
 801313a:	f7f2 f9f0 	bl	800551e <_kill>
 801313e:	1c43      	adds	r3, r0, #1
 8013140:	d102      	bne.n	8013148 <_kill_r+0x1c>
 8013142:	682b      	ldr	r3, [r5, #0]
 8013144:	b103      	cbz	r3, 8013148 <_kill_r+0x1c>
 8013146:	6023      	str	r3, [r4, #0]
 8013148:	bd38      	pop	{r3, r4, r5, pc}
 801314a:	bf00      	nop
 801314c:	20002e8c 	.word	0x20002e8c

08013150 <_getpid_r>:
 8013150:	f7f2 b9dd 	b.w	800550e <_getpid>
 8013154:	0000      	movs	r0, r0
	...

08013158 <atan>:
 8013158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801315c:	ec55 4b10 	vmov	r4, r5, d0
 8013160:	4bc3      	ldr	r3, [pc, #780]	; (8013470 <atan+0x318>)
 8013162:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013166:	429e      	cmp	r6, r3
 8013168:	46ab      	mov	fp, r5
 801316a:	dd18      	ble.n	801319e <atan+0x46>
 801316c:	4bc1      	ldr	r3, [pc, #772]	; (8013474 <atan+0x31c>)
 801316e:	429e      	cmp	r6, r3
 8013170:	dc01      	bgt.n	8013176 <atan+0x1e>
 8013172:	d109      	bne.n	8013188 <atan+0x30>
 8013174:	b144      	cbz	r4, 8013188 <atan+0x30>
 8013176:	4622      	mov	r2, r4
 8013178:	462b      	mov	r3, r5
 801317a:	4620      	mov	r0, r4
 801317c:	4629      	mov	r1, r5
 801317e:	f7ed f8a5 	bl	80002cc <__adddf3>
 8013182:	4604      	mov	r4, r0
 8013184:	460d      	mov	r5, r1
 8013186:	e006      	b.n	8013196 <atan+0x3e>
 8013188:	f1bb 0f00 	cmp.w	fp, #0
 801318c:	f300 8131 	bgt.w	80133f2 <atan+0x29a>
 8013190:	a59b      	add	r5, pc, #620	; (adr r5, 8013400 <atan+0x2a8>)
 8013192:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013196:	ec45 4b10 	vmov	d0, r4, r5
 801319a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319e:	4bb6      	ldr	r3, [pc, #728]	; (8013478 <atan+0x320>)
 80131a0:	429e      	cmp	r6, r3
 80131a2:	dc14      	bgt.n	80131ce <atan+0x76>
 80131a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80131a8:	429e      	cmp	r6, r3
 80131aa:	dc0d      	bgt.n	80131c8 <atan+0x70>
 80131ac:	a396      	add	r3, pc, #600	; (adr r3, 8013408 <atan+0x2b0>)
 80131ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b2:	ee10 0a10 	vmov	r0, s0
 80131b6:	4629      	mov	r1, r5
 80131b8:	f7ed f888 	bl	80002cc <__adddf3>
 80131bc:	4baf      	ldr	r3, [pc, #700]	; (801347c <atan+0x324>)
 80131be:	2200      	movs	r2, #0
 80131c0:	f7ed fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d1e6      	bne.n	8013196 <atan+0x3e>
 80131c8:	f04f 3aff 	mov.w	sl, #4294967295
 80131cc:	e02b      	b.n	8013226 <atan+0xce>
 80131ce:	f000 f963 	bl	8013498 <fabs>
 80131d2:	4bab      	ldr	r3, [pc, #684]	; (8013480 <atan+0x328>)
 80131d4:	429e      	cmp	r6, r3
 80131d6:	ec55 4b10 	vmov	r4, r5, d0
 80131da:	f300 80bf 	bgt.w	801335c <atan+0x204>
 80131de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80131e2:	429e      	cmp	r6, r3
 80131e4:	f300 80a0 	bgt.w	8013328 <atan+0x1d0>
 80131e8:	ee10 2a10 	vmov	r2, s0
 80131ec:	ee10 0a10 	vmov	r0, s0
 80131f0:	462b      	mov	r3, r5
 80131f2:	4629      	mov	r1, r5
 80131f4:	f7ed f86a 	bl	80002cc <__adddf3>
 80131f8:	4ba0      	ldr	r3, [pc, #640]	; (801347c <atan+0x324>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	f7ed f864 	bl	80002c8 <__aeabi_dsub>
 8013200:	2200      	movs	r2, #0
 8013202:	4606      	mov	r6, r0
 8013204:	460f      	mov	r7, r1
 8013206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801320a:	4620      	mov	r0, r4
 801320c:	4629      	mov	r1, r5
 801320e:	f7ed f85d 	bl	80002cc <__adddf3>
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	4630      	mov	r0, r6
 8013218:	4639      	mov	r1, r7
 801321a:	f7ed fb37 	bl	800088c <__aeabi_ddiv>
 801321e:	f04f 0a00 	mov.w	sl, #0
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	4622      	mov	r2, r4
 8013228:	462b      	mov	r3, r5
 801322a:	4620      	mov	r0, r4
 801322c:	4629      	mov	r1, r5
 801322e:	f7ed fa03 	bl	8000638 <__aeabi_dmul>
 8013232:	4602      	mov	r2, r0
 8013234:	460b      	mov	r3, r1
 8013236:	4680      	mov	r8, r0
 8013238:	4689      	mov	r9, r1
 801323a:	f7ed f9fd 	bl	8000638 <__aeabi_dmul>
 801323e:	a374      	add	r3, pc, #464	; (adr r3, 8013410 <atan+0x2b8>)
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	4606      	mov	r6, r0
 8013246:	460f      	mov	r7, r1
 8013248:	f7ed f9f6 	bl	8000638 <__aeabi_dmul>
 801324c:	a372      	add	r3, pc, #456	; (adr r3, 8013418 <atan+0x2c0>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	f7ed f83b 	bl	80002cc <__adddf3>
 8013256:	4632      	mov	r2, r6
 8013258:	463b      	mov	r3, r7
 801325a:	f7ed f9ed 	bl	8000638 <__aeabi_dmul>
 801325e:	a370      	add	r3, pc, #448	; (adr r3, 8013420 <atan+0x2c8>)
 8013260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013264:	f7ed f832 	bl	80002cc <__adddf3>
 8013268:	4632      	mov	r2, r6
 801326a:	463b      	mov	r3, r7
 801326c:	f7ed f9e4 	bl	8000638 <__aeabi_dmul>
 8013270:	a36d      	add	r3, pc, #436	; (adr r3, 8013428 <atan+0x2d0>)
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	f7ed f829 	bl	80002cc <__adddf3>
 801327a:	4632      	mov	r2, r6
 801327c:	463b      	mov	r3, r7
 801327e:	f7ed f9db 	bl	8000638 <__aeabi_dmul>
 8013282:	a36b      	add	r3, pc, #428	; (adr r3, 8013430 <atan+0x2d8>)
 8013284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013288:	f7ed f820 	bl	80002cc <__adddf3>
 801328c:	4632      	mov	r2, r6
 801328e:	463b      	mov	r3, r7
 8013290:	f7ed f9d2 	bl	8000638 <__aeabi_dmul>
 8013294:	a368      	add	r3, pc, #416	; (adr r3, 8013438 <atan+0x2e0>)
 8013296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329a:	f7ed f817 	bl	80002cc <__adddf3>
 801329e:	4642      	mov	r2, r8
 80132a0:	464b      	mov	r3, r9
 80132a2:	f7ed f9c9 	bl	8000638 <__aeabi_dmul>
 80132a6:	a366      	add	r3, pc, #408	; (adr r3, 8013440 <atan+0x2e8>)
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	4680      	mov	r8, r0
 80132ae:	4689      	mov	r9, r1
 80132b0:	4630      	mov	r0, r6
 80132b2:	4639      	mov	r1, r7
 80132b4:	f7ed f9c0 	bl	8000638 <__aeabi_dmul>
 80132b8:	a363      	add	r3, pc, #396	; (adr r3, 8013448 <atan+0x2f0>)
 80132ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132be:	f7ed f803 	bl	80002c8 <__aeabi_dsub>
 80132c2:	4632      	mov	r2, r6
 80132c4:	463b      	mov	r3, r7
 80132c6:	f7ed f9b7 	bl	8000638 <__aeabi_dmul>
 80132ca:	a361      	add	r3, pc, #388	; (adr r3, 8013450 <atan+0x2f8>)
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	f7ec fffa 	bl	80002c8 <__aeabi_dsub>
 80132d4:	4632      	mov	r2, r6
 80132d6:	463b      	mov	r3, r7
 80132d8:	f7ed f9ae 	bl	8000638 <__aeabi_dmul>
 80132dc:	a35e      	add	r3, pc, #376	; (adr r3, 8013458 <atan+0x300>)
 80132de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e2:	f7ec fff1 	bl	80002c8 <__aeabi_dsub>
 80132e6:	4632      	mov	r2, r6
 80132e8:	463b      	mov	r3, r7
 80132ea:	f7ed f9a5 	bl	8000638 <__aeabi_dmul>
 80132ee:	a35c      	add	r3, pc, #368	; (adr r3, 8013460 <atan+0x308>)
 80132f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f4:	f7ec ffe8 	bl	80002c8 <__aeabi_dsub>
 80132f8:	4632      	mov	r2, r6
 80132fa:	463b      	mov	r3, r7
 80132fc:	f7ed f99c 	bl	8000638 <__aeabi_dmul>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	4640      	mov	r0, r8
 8013306:	4649      	mov	r1, r9
 8013308:	f7ec ffe0 	bl	80002cc <__adddf3>
 801330c:	4622      	mov	r2, r4
 801330e:	462b      	mov	r3, r5
 8013310:	f7ed f992 	bl	8000638 <__aeabi_dmul>
 8013314:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013318:	4602      	mov	r2, r0
 801331a:	460b      	mov	r3, r1
 801331c:	d14b      	bne.n	80133b6 <atan+0x25e>
 801331e:	4620      	mov	r0, r4
 8013320:	4629      	mov	r1, r5
 8013322:	f7ec ffd1 	bl	80002c8 <__aeabi_dsub>
 8013326:	e72c      	b.n	8013182 <atan+0x2a>
 8013328:	ee10 0a10 	vmov	r0, s0
 801332c:	4b53      	ldr	r3, [pc, #332]	; (801347c <atan+0x324>)
 801332e:	2200      	movs	r2, #0
 8013330:	4629      	mov	r1, r5
 8013332:	f7ec ffc9 	bl	80002c8 <__aeabi_dsub>
 8013336:	4b51      	ldr	r3, [pc, #324]	; (801347c <atan+0x324>)
 8013338:	4606      	mov	r6, r0
 801333a:	460f      	mov	r7, r1
 801333c:	2200      	movs	r2, #0
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f7ec ffc3 	bl	80002cc <__adddf3>
 8013346:	4602      	mov	r2, r0
 8013348:	460b      	mov	r3, r1
 801334a:	4630      	mov	r0, r6
 801334c:	4639      	mov	r1, r7
 801334e:	f7ed fa9d 	bl	800088c <__aeabi_ddiv>
 8013352:	f04f 0a01 	mov.w	sl, #1
 8013356:	4604      	mov	r4, r0
 8013358:	460d      	mov	r5, r1
 801335a:	e764      	b.n	8013226 <atan+0xce>
 801335c:	4b49      	ldr	r3, [pc, #292]	; (8013484 <atan+0x32c>)
 801335e:	429e      	cmp	r6, r3
 8013360:	da1d      	bge.n	801339e <atan+0x246>
 8013362:	ee10 0a10 	vmov	r0, s0
 8013366:	4b48      	ldr	r3, [pc, #288]	; (8013488 <atan+0x330>)
 8013368:	2200      	movs	r2, #0
 801336a:	4629      	mov	r1, r5
 801336c:	f7ec ffac 	bl	80002c8 <__aeabi_dsub>
 8013370:	4b45      	ldr	r3, [pc, #276]	; (8013488 <atan+0x330>)
 8013372:	4606      	mov	r6, r0
 8013374:	460f      	mov	r7, r1
 8013376:	2200      	movs	r2, #0
 8013378:	4620      	mov	r0, r4
 801337a:	4629      	mov	r1, r5
 801337c:	f7ed f95c 	bl	8000638 <__aeabi_dmul>
 8013380:	4b3e      	ldr	r3, [pc, #248]	; (801347c <atan+0x324>)
 8013382:	2200      	movs	r2, #0
 8013384:	f7ec ffa2 	bl	80002cc <__adddf3>
 8013388:	4602      	mov	r2, r0
 801338a:	460b      	mov	r3, r1
 801338c:	4630      	mov	r0, r6
 801338e:	4639      	mov	r1, r7
 8013390:	f7ed fa7c 	bl	800088c <__aeabi_ddiv>
 8013394:	f04f 0a02 	mov.w	sl, #2
 8013398:	4604      	mov	r4, r0
 801339a:	460d      	mov	r5, r1
 801339c:	e743      	b.n	8013226 <atan+0xce>
 801339e:	462b      	mov	r3, r5
 80133a0:	ee10 2a10 	vmov	r2, s0
 80133a4:	4939      	ldr	r1, [pc, #228]	; (801348c <atan+0x334>)
 80133a6:	2000      	movs	r0, #0
 80133a8:	f7ed fa70 	bl	800088c <__aeabi_ddiv>
 80133ac:	f04f 0a03 	mov.w	sl, #3
 80133b0:	4604      	mov	r4, r0
 80133b2:	460d      	mov	r5, r1
 80133b4:	e737      	b.n	8013226 <atan+0xce>
 80133b6:	4b36      	ldr	r3, [pc, #216]	; (8013490 <atan+0x338>)
 80133b8:	4e36      	ldr	r6, [pc, #216]	; (8013494 <atan+0x33c>)
 80133ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80133c2:	e9da 2300 	ldrd	r2, r3, [sl]
 80133c6:	f7ec ff7f 	bl	80002c8 <__aeabi_dsub>
 80133ca:	4622      	mov	r2, r4
 80133cc:	462b      	mov	r3, r5
 80133ce:	f7ec ff7b 	bl	80002c8 <__aeabi_dsub>
 80133d2:	4602      	mov	r2, r0
 80133d4:	460b      	mov	r3, r1
 80133d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133da:	f7ec ff75 	bl	80002c8 <__aeabi_dsub>
 80133de:	f1bb 0f00 	cmp.w	fp, #0
 80133e2:	4604      	mov	r4, r0
 80133e4:	460d      	mov	r5, r1
 80133e6:	f6bf aed6 	bge.w	8013196 <atan+0x3e>
 80133ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133ee:	461d      	mov	r5, r3
 80133f0:	e6d1      	b.n	8013196 <atan+0x3e>
 80133f2:	a51d      	add	r5, pc, #116	; (adr r5, 8013468 <atan+0x310>)
 80133f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80133f8:	e6cd      	b.n	8013196 <atan+0x3e>
 80133fa:	bf00      	nop
 80133fc:	f3af 8000 	nop.w
 8013400:	54442d18 	.word	0x54442d18
 8013404:	bff921fb 	.word	0xbff921fb
 8013408:	8800759c 	.word	0x8800759c
 801340c:	7e37e43c 	.word	0x7e37e43c
 8013410:	e322da11 	.word	0xe322da11
 8013414:	3f90ad3a 	.word	0x3f90ad3a
 8013418:	24760deb 	.word	0x24760deb
 801341c:	3fa97b4b 	.word	0x3fa97b4b
 8013420:	a0d03d51 	.word	0xa0d03d51
 8013424:	3fb10d66 	.word	0x3fb10d66
 8013428:	c54c206e 	.word	0xc54c206e
 801342c:	3fb745cd 	.word	0x3fb745cd
 8013430:	920083ff 	.word	0x920083ff
 8013434:	3fc24924 	.word	0x3fc24924
 8013438:	5555550d 	.word	0x5555550d
 801343c:	3fd55555 	.word	0x3fd55555
 8013440:	2c6a6c2f 	.word	0x2c6a6c2f
 8013444:	bfa2b444 	.word	0xbfa2b444
 8013448:	52defd9a 	.word	0x52defd9a
 801344c:	3fadde2d 	.word	0x3fadde2d
 8013450:	af749a6d 	.word	0xaf749a6d
 8013454:	3fb3b0f2 	.word	0x3fb3b0f2
 8013458:	fe231671 	.word	0xfe231671
 801345c:	3fbc71c6 	.word	0x3fbc71c6
 8013460:	9998ebc4 	.word	0x9998ebc4
 8013464:	3fc99999 	.word	0x3fc99999
 8013468:	54442d18 	.word	0x54442d18
 801346c:	3ff921fb 	.word	0x3ff921fb
 8013470:	440fffff 	.word	0x440fffff
 8013474:	7ff00000 	.word	0x7ff00000
 8013478:	3fdbffff 	.word	0x3fdbffff
 801347c:	3ff00000 	.word	0x3ff00000
 8013480:	3ff2ffff 	.word	0x3ff2ffff
 8013484:	40038000 	.word	0x40038000
 8013488:	3ff80000 	.word	0x3ff80000
 801348c:	bff00000 	.word	0xbff00000
 8013490:	08014128 	.word	0x08014128
 8013494:	08014108 	.word	0x08014108

08013498 <fabs>:
 8013498:	ec51 0b10 	vmov	r0, r1, d0
 801349c:	ee10 2a10 	vmov	r2, s0
 80134a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80134a4:	ec43 2b10 	vmov	d0, r2, r3
 80134a8:	4770      	bx	lr
	...

080134ac <_init>:
 80134ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ae:	bf00      	nop
 80134b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134b2:	bc08      	pop	{r3}
 80134b4:	469e      	mov	lr, r3
 80134b6:	4770      	bx	lr

080134b8 <_fini>:
 80134b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ba:	bf00      	nop
 80134bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134be:	bc08      	pop	{r3}
 80134c0:	469e      	mov	lr, r3
 80134c2:	4770      	bx	lr
