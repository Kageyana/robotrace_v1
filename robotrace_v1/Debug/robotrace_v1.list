
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfe4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e1b8  0800e1b8  0001e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e898  0800e898  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e898  0800e898  0001e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8a0  0800e8a0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a0  0800e8a0  0001e8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8a4  0800e8a4  0001e8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000210  0800eab8  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800eab8  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a371  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb0  00000000  00000000  0003a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290b9  00000000  00000000  00040c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020faa  00000000  00000000  00069d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e46e2  00000000  00000000  0008accb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f3ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070c4  00000000  00000000  0016f400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e19c 	.word	0x0800e19c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800e19c 	.word	0x0800e19c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f005 f908 	bl	800626c <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000424 	.word	0x20000424

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f005 f8f0 	bl	800626c <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000424 	.word	0x20000424

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f003 fbb1 	bl	8004804 <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f003 fbab 	bl	8004804 <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f003 fba5 	bl	8004804 <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f003 fb9f 	bl	8004804 <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f003 fb99 	bl	8004804 <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fb93 	bl	8004804 <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f003 fb8d 	bl	8004804 <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f003 fb87 	bl	8004804 <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f003 fb81 	bl	8004804 <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f003 fb7b 	bl	8004804 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	2000024a 	.word	0x2000024a
 800125c:	20000248 	.word	0x20000248
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	2000022c 	.word	0x2000022c

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000246 	.word	0x20000246

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f009 fe7d 	bl	800afec <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	20000234 	.word	0x20000234
 8001358:	20000246 	.word	0x20000246
 800135c:	2000022c 	.word	0x2000022c
 8001360:	2000024a 	.word	0x2000024a

08001364 <readINA260>:
// 処理概要     データ受信
// 引数         reg:レジスタのアドレス
// 戻り値       読み取ったデータ(16bit)
//////////////////////////////////////////////////////////////////////////
uint16_t readINA260( uint16_t addr, uint8_t reg )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	717b      	strb	r3, [r7, #5]
    uint8_t rx_buf[2], tx_buf[1] = { reg };
 8001374:	797b      	ldrb	r3, [r7, #5]
 8001376:	723b      	strb	r3, [r7, #8]
	I2C_INA260_SEND
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	88f9      	ldrh	r1, [r7, #6]
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <readINA260+0x58>)
 8001386:	f004 ff71 	bl	800626c <HAL_I2C_Master_Transmit>
    I2C_INA260_READ
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b299      	uxth	r1, r3
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	2364      	movs	r3, #100	; 0x64
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2302      	movs	r3, #2
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <readINA260+0x58>)
 800139e:	f005 f863 	bl	8006468 <HAL_I2C_Master_Receive>

    return (uint16_t)( (uint8_t)rx_buf[0] * 0x100 + (uint8_t)rx_buf[1] );
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000424 	.word	0x20000424

080013c0 <readCurrent>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void readCurrent( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
    int16_t rawCurrentR, rawCurrentL;
    
    // Rawデータ取得
    rawCurrentR = readINA260(INA260_SLAVEADDRESS_R, 0x01);
 80013c6:	2101      	movs	r1, #1
 80013c8:	2080      	movs	r0, #128	; 0x80
 80013ca:	f7ff ffcb 	bl	8001364 <readINA260>
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
	if (rawCurrentR > 32767) rawCurrentR = ~rawCurrentR+0x8000;     // 2の補数計算(16bitの半分を超えたとき)
    rawCurrentL = readINA260(INA260_SLAVEADDRESS_L, 0x01);
 80013d2:	2101      	movs	r1, #1
 80013d4:	2088      	movs	r0, #136	; 0x88
 80013d6:	f7ff ffc5 	bl	8001364 <readINA260>
 80013da:	4603      	mov	r3, r0
 80013dc:	80bb      	strh	r3, [r7, #4]
	if (rawCurrentL > 32767) rawCurrentL = ~rawCurrentL+0x8000;  // 2の補数計算(16bitの半分を超えたとき)

    CurrntR = LSB_CURRENT * rawCurrentR;
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8be 	bl	8000564 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <readCurrent+0x64>)
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <readCurrent+0x68>)
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]
    CurrntL = LSB_CURRENT * rawCurrentL;
 80013fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8af 	bl	8000564 <__aeabi_i2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <readCurrent+0x64>)
 800140c:	f7ff f914 	bl	8000638 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4905      	ldr	r1, [pc, #20]	; (800142c <readCurrent+0x6c>)
 8001416:	e9c1 2300 	strd	r2, r3, [r1]
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	3ff40000 	.word	0x3ff40000
 8001428:	20000258 	.word	0x20000258
 800142c:	20000250 	.word	0x20000250

08001430 <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	// Encoder count
	int16_t val;

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4830      	ldr	r0, [pc, #192]	; (80014f8 <systemInit+0xc8>)
 8001438:	f006 fe22 	bl	8008080 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	482f      	ldr	r0, [pc, #188]	; (80014fc <systemInit+0xcc>)
 8001440:	f006 fe1e 	bl	8008080 <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *)analogVal, 12) != HAL_OK)	Error_Handler();
 8001444:	220c      	movs	r2, #12
 8001446:	492e      	ldr	r1, [pc, #184]	; (8001500 <systemInit+0xd0>)
 8001448:	482e      	ldr	r0, [pc, #184]	; (8001504 <systemInit+0xd4>)
 800144a:	f003 fba1 	bl	8004b90 <HAL_ADC_Start_DMA>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <systemInit+0x28>
 8001454:	f001 faa8 	bl	80029a8 <Error_Handler>

	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 8001458:	2100      	movs	r1, #0
 800145a:	482b      	ldr	r0, [pc, #172]	; (8001508 <systemInit+0xd8>)
 800145c:	f006 fca2 	bl	8007da4 <HAL_TIM_PWM_Start>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <systemInit+0x3a>
 8001466:	f001 fa9f 	bl	80029a8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 800146a:	2104      	movs	r1, #4
 800146c:	4826      	ldr	r0, [pc, #152]	; (8001508 <systemInit+0xd8>)
 800146e:	f006 fc99 	bl	8007da4 <HAL_TIM_PWM_Start>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <systemInit+0x4c>
 8001478:	f001 fa96 	bl	80029a8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 800147c:	2108      	movs	r1, #8
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <systemInit+0xd8>)
 8001480:	f006 fc90 	bl	8007da4 <HAL_TIM_PWM_Start>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <systemInit+0x5e>
 800148a:	f001 fa8d 	bl	80029a8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 800148e:	210c      	movs	r1, #12
 8001490:	481d      	ldr	r0, [pc, #116]	; (8001508 <systemInit+0xd8>)
 8001492:	f006 fc87 	bl	8007da4 <HAL_TIM_PWM_Start>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <systemInit+0x70>
 800149c:	f001 fa84 	bl	80029a8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 80014a0:	2100      	movs	r1, #0
 80014a2:	481a      	ldr	r0, [pc, #104]	; (800150c <systemInit+0xdc>)
 80014a4:	f006 fc7e 	bl	8007da4 <HAL_TIM_PWM_Start>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <systemInit+0x82>
 80014ae:	f001 fa7b 	bl	80029a8 <Error_Handler>

	// MAX22201 sleep mode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <systemInit+0xd8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <systemInit+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <systemInit+0xd8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <systemInit+0xd8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <systemInit+0xdc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 80014e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e6:	f003 f98d 	bl	8004804 <HAL_Delay>

	intiLcd();  	// LCD initialize
 80014ea:	f7ff fdd5 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <systemInit+0xe0>)
 80014f0:	f006 fb98 	bl	8007c24 <HAL_TIM_Base_Start_IT>
	// }

	// lcdRowPrintf(UPROW, "who am i");
	// lcdRowPrintf(LOWROW, "    %#x",initBNO055());
	// HAL_Delay(700);
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200005b8 	.word	0x200005b8
 80014fc:	20000600 	.word	0x20000600
 8001500:	20000264 	.word	0x20000264
 8001504:	20000334 	.word	0x20000334
 8001508:	20000528 	.word	0x20000528
 800150c:	20000570 	.word	0x20000570
 8001510:	20000648 	.word	0x20000648

08001514 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 8001514:	b598      	push	{r3, r4, r7, lr}
 8001516:	af00      	add	r7, sp, #0

	// if (pattern > 0 )
	switch (pattern) {
 8001518:	4b95      	ldr	r3, [pc, #596]	; (8001770 <systemLoop+0x25c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b66      	cmp	r3, #102	; 0x66
 800151e:	f000 80f6 	beq.w	800170e <systemLoop+0x1fa>
 8001522:	2b66      	cmp	r3, #102	; 0x66
 8001524:	f300 811b 	bgt.w	800175e <systemLoop+0x24a>
 8001528:	2b65      	cmp	r3, #101	; 0x65
 800152a:	f000 80c9 	beq.w	80016c0 <systemLoop+0x1ac>
 800152e:	2b65      	cmp	r3, #101	; 0x65
 8001530:	f300 8115 	bgt.w	800175e <systemLoop+0x24a>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <systemLoop+0x2a>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d021      	beq.n	8001580 <systemLoop+0x6c>
			// 	}
			// }
			break;
    
      	default:
        	break;
 800153c:	e10f      	b.n	800175e <systemLoop+0x24a>
			setup();
 800153e:	f001 fb69 	bl	8002c14 <setup>
			if (start) {
 8001542:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <systemLoop+0x260>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 810b 	beq.w	8001762 <systemLoop+0x24e>
				lcdRowPrintf(UPROW, "ready   ");
 800154c:	498a      	ldr	r1, [pc, #552]	; (8001778 <systemLoop+0x264>)
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff feb0 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 8001554:	4989      	ldr	r1, [pc, #548]	; (800177c <systemLoop+0x268>)
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff feac 	bl	80012b4 <lcdRowPrintf>
				HAL_Delay(5000);
 800155c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001560:	f003 f950 	bl	8004804 <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 8001564:	4986      	ldr	r1, [pc, #536]	; (8001780 <systemLoop+0x26c>)
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fea4 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 800156c:	4b85      	ldr	r3, [pc, #532]	; (8001784 <systemLoop+0x270>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
				cnt1 = 0;
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <systemLoop+0x274>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
				pattern = 1;
 8001578:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <systemLoop+0x25c>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
			break;
 800157e:	e0f0      	b.n	8001762 <systemLoop+0x24e>
			if (!modeCurve) {
 8001580:	4b82      	ldr	r3, [pc, #520]	; (800178c <systemLoop+0x278>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <systemLoop+0x94>
				targetSpeed = paramSpeed[INDEX_STRAIGHT]*PALSE_MILLIMETER/10;
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <systemLoop+0x27c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffe4 	bl	8000564 <__aeabi_i2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	497c      	ldr	r1, [pc, #496]	; (8001794 <systemLoop+0x280>)
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]
 80015a6:	e00e      	b.n	80015c6 <systemLoop+0xb2>
				targetSpeed = paramSpeed[INDEX_CURVE]*PALSE_MILLIMETER/10;
 80015a8:	4b79      	ldr	r3, [pc, #484]	; (8001790 <systemLoop+0x27c>)
 80015aa:	78db      	ldrb	r3, [r3, #3]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffd4 	bl	8000564 <__aeabi_i2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4974      	ldr	r1, [pc, #464]	; (8001794 <systemLoop+0x280>)
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80015c6:	4b74      	ldr	r3, [pc, #464]	; (8001798 <systemLoop+0x284>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <systemLoop+0x288>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f001 fada 	bl	8002b90 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80015dc:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <systemLoop+0x28c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
			if ((lSensor[0] + lSensor[1] + lSensor[10] + lSensor[11]) < 6000) {
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <systemLoop+0x290>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <systemLoop+0x290>)
 80015ee:	885b      	ldrh	r3, [r3, #2]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a6c      	ldr	r2, [pc, #432]	; (80017a4 <systemLoop+0x290>)
 80015f4:	8a92      	ldrh	r2, [r2, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <systemLoop+0x290>)
 80015fa:	8ad2      	ldrh	r2, [r2, #22]
 80015fc:	4413      	add	r3, r2
 80015fe:	f241 726f 	movw	r2, #5999	; 0x176f
 8001602:	4293      	cmp	r3, r2
 8001604:	dc03      	bgt.n	800160e <systemLoop+0xfa>
				encCross2 = encTotalN;
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <systemLoop+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <systemLoop+0x294>)
 800160c:	6013      	str	r3, [r2, #0]
			if (encTotalN - encCross2 >= encMM (200) ) {
 800160e:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <systemLoop+0x270>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <systemLoop+0x294>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1ad4      	subs	r4, r2, r3
 8001618:	20c8      	movs	r0, #200	; 0xc8
 800161a:	f000 f945 	bl	80018a8 <encMM>
 800161e:	4603      	mov	r3, r0
 8001620:	429c      	cmp	r4, r3
 8001622:	db1c      	blt.n	800165e <systemLoop+0x14a>
				if (checkMarker() == RIGHTMARKER) {
 8001624:	f001 f9f2 	bl	8002a0c <checkMarker>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d117      	bne.n	800165e <systemLoop+0x14a>
					if (SGmarker == 0) {
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <systemLoop+0x298>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <systemLoop+0x12a>
						SGmarker = STARTMARKER;
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <systemLoop+0x298>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e00f      	b.n	800165e <systemLoop+0x14a>
					} else if (SGmarker == STARTMARKER && encTotalN > encMM(500)) {
 800163e:	4b5b      	ldr	r3, [pc, #364]	; (80017ac <systemLoop+0x298>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <systemLoop+0x14a>
 8001646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800164a:	f000 f92d 	bl	80018a8 <encMM>
 800164e:	4602      	mov	r2, r0
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <systemLoop+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	da02      	bge.n	800165e <systemLoop+0x14a>
						SGmarker = GOALMARKER;
 8001658:	4b54      	ldr	r3, [pc, #336]	; (80017ac <systemLoop+0x298>)
 800165a:	2202      	movs	r2, #2
 800165c:	701a      	strb	r2, [r3, #0]
			if (angleSensor < paramAngle[INDEX_ANGLE_CURVE] && angleSensor > -paramAngle[INDEX_ANGLE_CURVE]) {
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <systemLoop+0x29c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff7e 	bl	8000564 <__aeabi_i2d>
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <systemLoop+0x2a0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff fa73 	bl	8000b58 <__aeabi_dcmpgt>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d011      	beq.n	800169c <systemLoop+0x188>
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <systemLoop+0x29c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	425b      	negs	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff70 	bl	8000564 <__aeabi_i2d>
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <systemLoop+0x2a0>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff fa47 	bl	8000b1c <__aeabi_dcmplt>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <systemLoop+0x188>
				modeCurve = 0;
 8001694:	4b3d      	ldr	r3, [pc, #244]	; (800178c <systemLoop+0x278>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e002      	b.n	80016a2 <systemLoop+0x18e>
				modeCurve = 1;
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <systemLoop+0x278>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
			if (SGmarker == GOALMARKER) {
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <systemLoop+0x298>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d15d      	bne.n	8001766 <systemLoop+0x252>
				goalTime = cnt1;
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <systemLoop+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a42      	ldr	r2, [pc, #264]	; (80017b8 <systemLoop+0x2a4>)
 80016b0:	6013      	str	r3, [r2, #0]
				enc1 = 0;
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <systemLoop+0x2a8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
				pattern = 101;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <systemLoop+0x25c>)
 80016ba:	2265      	movs	r2, #101	; 0x65
 80016bc:	701a      	strb	r2, [r3, #0]
			break;
 80016be:	e052      	b.n	8001766 <systemLoop+0x252>
			targetSpeed = paramSpeed[INDEX_STOP]*PALSE_MILLIMETER/10;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <systemLoop+0x27c>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff48 	bl	8000564 <__aeabi_i2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	492e      	ldr	r1, [pc, #184]	; (8001794 <systemLoop+0x280>)
 80016da:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <systemLoop+0x284>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <systemLoop+0x288>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f001 fa4e 	bl	8002b90 <motorPwmOutSynth>
			if (enc1 >= encMM(500)) {
 80016f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f8:	f000 f8d6 	bl	80018a8 <encMM>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <systemLoop+0x2a8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	dc31      	bgt.n	800176a <systemLoop+0x256>
				pattern = 102;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <systemLoop+0x25c>)
 8001708:	2266      	movs	r2, #102	; 0x66
 800170a:	701a      	strb	r2, [r3, #0]
			break;
 800170c:	e02d      	b.n	800176a <systemLoop+0x256>
			targetSpeed = 0;
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <systemLoop+0x280>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <systemLoop+0x2ac>)
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d104      	bne.n	8001730 <systemLoop+0x21c>
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f001 fa31 	bl	8002b90 <motorPwmOutSynth>
 800172e:	e006      	b.n	800173e <systemLoop+0x22a>
			else                  motorPwmOutSynth( 0, speedPwm );
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <systemLoop+0x288>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	4619      	mov	r1, r3
 8001738:	2000      	movs	r0, #0
 800173a:	f001 fa29 	bl	8002b90 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <systemLoop+0x28c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(UPROW, "TIME    ");
 8001746:	491f      	ldr	r1, [pc, #124]	; (80017c4 <systemLoop+0x2b0>)
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fdb3 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "  %5ds",goalTime);
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <systemLoop+0x2a4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	491c      	ldr	r1, [pc, #112]	; (80017c8 <systemLoop+0x2b4>)
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fdac 	bl	80012b4 <lcdRowPrintf>
			break;
 800175c:	e006      	b.n	800176c <systemLoop+0x258>
        	break;
 800175e:	bf00      	nop
 8001760:	e004      	b.n	800176c <systemLoop+0x258>
			break;
 8001762:	bf00      	nop
 8001764:	e002      	b.n	800176c <systemLoop+0x258>
			break;
 8001766:	bf00      	nop
 8001768:	e000      	b.n	800176c <systemLoop+0x258>
			break;
 800176a:	bf00      	nop
    } // switch case
}
 800176c:	bf00      	nop
 800176e:	bd98      	pop	{r3, r4, r7, pc}
 8001770:	20000260 	.word	0x20000260
 8001774:	200006e8 	.word	0x200006e8
 8001778:	0800e1b8 	.word	0x0800e1b8
 800177c:	0800e1c4 	.word	0x0800e1c4
 8001780:	0800e1d0 	.word	0x0800e1d0
 8001784:	20000294 	.word	0x20000294
 8001788:	20000704 	.word	0x20000704
 800178c:	20000261 	.word	0x20000261
 8001790:	20000004 	.word	0x20000004
 8001794:	20000710 	.word	0x20000710
 8001798:	20000322 	.word	0x20000322
 800179c:	20000708 	.word	0x20000708
 80017a0:	20000570 	.word	0x20000570
 80017a4:	200002cc 	.word	0x200002cc
 80017a8:	200006e4 	.word	0x200006e4
 80017ac:	200006d4 	.word	0x200006d4
 80017b0:	20000010 	.word	0x20000010
 80017b4:	20000318 	.word	0x20000318
 80017b8:	2000027c 	.word	0x2000027c
 80017bc:	20000298 	.word	0x20000298
 80017c0:	20000288 	.word	0x20000288
 80017c4:	0800e1dc 	.word	0x0800e1dc
 80017c8:	0800e1e8 	.word	0x0800e1e8

080017cc <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <getEncoder+0xb0>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <getEncoder+0xb4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <getEncoder+0xb8>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <getEncoder+0xbc>)
 80017ec:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <getEncoder+0xc0>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <getEncoder+0xc4>)
 80017fc:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <getEncoder+0xbc>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	461a      	mov	r2, r3
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <getEncoder+0xc4>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	4413      	add	r3, r2
 800180e:	0fda      	lsrs	r2, r3, #31
 8001810:	4413      	add	r3, r2
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <getEncoder+0xc8>)
 8001818:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <getEncoder+0xbc>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	461a      	mov	r2, r3
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <getEncoder+0xcc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <getEncoder+0xcc>)
 800182a:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <getEncoder+0xc4>)
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	461a      	mov	r2, r3
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <getEncoder+0xd0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4413      	add	r3, r2
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <getEncoder+0xd0>)
 800183c:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <getEncoder+0xc8>)
 8001840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001844:	461a      	mov	r2, r3
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <getEncoder+0xd4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <getEncoder+0xd4>)
 800184e:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <getEncoder+0xc8>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	461a      	mov	r2, r3
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <getEncoder+0xd8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4413      	add	r3, r2
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <getEncoder+0xd8>)
 8001860:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <getEncoder+0xb8>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <getEncoder+0xc0>)
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	8013      	strh	r3, [r2, #0]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40000800 	.word	0x40000800
 8001880:	40000400 	.word	0x40000400
 8001884:	20000280 	.word	0x20000280
 8001888:	20000284 	.word	0x20000284
 800188c:	20000282 	.word	0x20000282
 8001890:	20000286 	.word	0x20000286
 8001894:	20000288 	.word	0x20000288
 8001898:	2000028c 	.word	0x2000028c
 800189c:	20000290 	.word	0x20000290
 80018a0:	20000294 	.word	0x20000294
 80018a4:	20000298 	.word	0x20000298

080018a8 <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bfb8      	it	lt
 80018ba:	425b      	neglt	r3, r3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <ledOut+0x22>
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	4817      	ldr	r0, [pc, #92]	; (800194c <ledOut+0x78>)
 80018f0:	f004 fb5e 	bl	8005fb0 <HAL_GPIO_WritePin>
 80018f4:	e005      	b.n	8001902 <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	4813      	ldr	r0, [pc, #76]	; (800194c <ledOut+0x78>)
 80018fe:	f004 fb57 	bl	8005fb0 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <ledOut+0x44>
 800190c:	2200      	movs	r2, #0
 800190e:	2110      	movs	r1, #16
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <ledOut+0x7c>)
 8001912:	f004 fb4d 	bl	8005fb0 <HAL_GPIO_WritePin>
 8001916:	e004      	b.n	8001922 <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2110      	movs	r1, #16
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <ledOut+0x7c>)
 800191e:	f004 fb47 	bl	8005fb0 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <ledOut+0x64>
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <ledOut+0x7c>)
 8001932:	f004 fb3d 	bl	8005fb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001936:	e004      	b.n	8001942 <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2120      	movs	r1, #32
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <ledOut+0x7c>)
 800193e:	f004 fb37 	bl	8005fb0 <HAL_GPIO_WritePin>
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400

08001954 <cmpareLSensorsList>:
// モジュール名 cmpareLSensorsList
// 処理概要  	構造体のvalueを比較する qsort関数に渡す比較用の関数（昇順）
// 引数     	n1 n2
// 戻り値    	1:n1>n2 0:n1<n2
/////////////////////////////////////////////////////////////////////
int cmpareLSensorsList(const void *n1, const void *n2) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
    if (((lSensors *)n1)->value > ((lSensors *)n2)->value) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	885a      	ldrh	r2, [r3, #2]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	885b      	ldrh	r3, [r3, #2]
 8001966:	429a      	cmp	r2, r3
 8001968:	d901      	bls.n	800196e <cmpareLSensorsList+0x1a>
        return 1;
 800196a:	2301      	movs	r3, #1
 800196c:	e009      	b.n	8001982 <cmpareLSensorsList+0x2e>
    } else if (((lSensors *)n1)->value < ((lSensors *)n2)->value) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	885a      	ldrh	r2, [r3, #2]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	429a      	cmp	r2, r3
 8001978:	d202      	bcs.n	8001980 <cmpareLSensorsList+0x2c>
        return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e000      	b.n	8001982 <cmpareLSensorsList+0x2e>
    }
    return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for ( i=0;i<NUM_SENSORS;i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e036      	b.n	8001a0a <getLineSensor+0x7a>
		lSensorInt[i] += analogVal[i];
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <getLineSensor+0x90>)
 80019a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	491f      	ldr	r1, [pc, #124]	; (8001a24 <getLineSensor+0x94>)
 80019a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019ac:	4619      	mov	r1, r3
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	440a      	add	r2, r1
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <getLineSensor+0x90>)
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		cntls++;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <getLineSensor+0x98>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <getLineSensor+0x98>)
 80019c2:	801a      	strh	r2, [r3, #0]

		if (cntls > 16) {
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <getLineSensor+0x98>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d91b      	bls.n	8001a04 <getLineSensor+0x74>
			lSensor[i] = lSensorInt[i]>>4;		// 平均値算出
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <getLineSensor+0x90>)
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	091a      	lsrs	r2, r3, #4
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	b291      	uxth	r1, r2
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <getLineSensor+0x9c>)
 80019dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensorsList[i].value = lSensor[i];	// 構造体に格納
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4911      	ldr	r1, [pc, #68]	; (8001a2c <getLineSensor+0x9c>)
 80019e6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <getLineSensor+0xa0>)
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	460a      	mov	r2, r1
 80019f2:	805a      	strh	r2, [r3, #2]
			lSensorInt[i] = 0;					// 積算値リセット
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <getLineSensor+0x90>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			cntls = 0;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <getLineSensor+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	3301      	adds	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b0b      	cmp	r3, #11
 8001a0e:	d9c5      	bls.n	800199c <getLineSensor+0xc>
		}
	}
		
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000029c 	.word	0x2000029c
 8001a24:	20000264 	.word	0x20000264
 8001a28:	20000320 	.word	0x20000320
 8001a2c:	200002cc 	.word	0x200002cc
 8001a30:	200002e4 	.word	0x200002e4
 8001a34:	00000000 	.word	0x00000000

08001a38 <getAngleSensor>:
// モジュール名 getAngleSensor
// 処理概要  	ラインセンサのAD値からステア角を算出する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getAngleSensor(void) {
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b08c      	sub	sp, #48	; 0x30
 8001a3e:	af00      	add	r7, sp, #0
	uint16_t index, sen1, sen2;
	double nsen1, nsen2, phi, dthita;

	// 昇順ソート
	qsort(lSensorsList, NUM_SENSORS, sizeof(lSensors), cmpareLSensorsList);
 8001a40:	4b8f      	ldr	r3, [pc, #572]	; (8001c80 <getAngleSensor+0x248>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	210c      	movs	r1, #12
 8001a46:	488f      	ldr	r0, [pc, #572]	; (8001c84 <getAngleSensor+0x24c>)
 8001a48:	f008 fa98 	bl	8009f7c <qsort>
	index = lSensorsList[0].index;
 8001a4c:	4b8d      	ldr	r3, [pc, #564]	; (8001c84 <getAngleSensor+0x24c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if (index !=0 && index != NUM_SENSORS -1 ) {
 8001a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80f1 	beq.w	8001c3c <getAngleSensor+0x204>
 8001a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a5c:	2b0b      	cmp	r3, #11
 8001a5e:	f000 80ed 	beq.w	8001c3c <getAngleSensor+0x204>
		// 白線に一番近いセンサの両隣のセンサ値を取得
		sen1 = lSensor[index-1];
 8001a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a88      	ldr	r2, [pc, #544]	; (8001c88 <getAngleSensor+0x250>)
 8001a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6c:	843b      	strh	r3, [r7, #32]
		sen2 = lSensor[index+1];
 8001a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <getAngleSensor+0x250>)
 8001a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a78:	83fb      	strh	r3, [r7, #30]
		// 正規化
		nsen1 = (double)sen1 / (sen1 + sen2);
 8001a7a:	8c3b      	ldrh	r3, [r7, #32]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd61 	bl	8000544 <__aeabi_ui2d>
 8001a82:	4680      	mov	r8, r0
 8001a84:	4689      	mov	r9, r1
 8001a86:	8c3a      	ldrh	r2, [r7, #32]
 8001a88:	8bfb      	ldrh	r3, [r7, #30]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd69 	bl	8000564 <__aeabi_i2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4640      	mov	r0, r8
 8001a98:	4649      	mov	r1, r9
 8001a9a:	f7fe fef7 	bl	800088c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		nsen2 = (double)sen2 / (sen1 + sen2);
 8001aa6:	8bfb      	ldrh	r3, [r7, #30]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd4b 	bl	8000544 <__aeabi_ui2d>
 8001aae:	4680      	mov	r8, r0
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	8c3a      	ldrh	r2, [r7, #32]
 8001ab4:	8bfb      	ldrh	r3, [r7, #30]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd53 	bl	8000564 <__aeabi_i2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	f7fe fee1 	bl	800088c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (index >= NUM_SENSORS/2) phi = atan( (nsen1 - nsen2)/1 );		// 偏角φ計算
 8001ad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d912      	bls.n	8001afe <getAngleSensor+0xc6>
 8001ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001adc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae0:	f7fe fbf2 	bl	80002c8 <__aeabi_dsub>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	ec43 2b17 	vmov	d7, r2, r3
 8001aec:	eeb0 0a47 	vmov.f32	s0, s14
 8001af0:	eef0 0a67 	vmov.f32	s1, s15
 8001af4:	f00c f9a8 	bl	800de48 <atan>
 8001af8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001afc:	e011      	b.n	8001b22 <getAngleSensor+0xea>
		else 						phi = atan( (nsen2 - nsen1)/1 );		// 偏角φ計算
 8001afe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b06:	f7fe fbdf 	bl	80002c8 <__aeabi_dsub>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ec43 2b17 	vmov	d7, r2, r3
 8001b12:	eeb0 0a47 	vmov.f32	s0, s14
 8001b16:	eef0 0a67 	vmov.f32	s1, s15
 8001b1a:	f00c f995 	bl	800de48 <atan>
 8001b1e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		dthita = (phi*THITA_SENSOR* (M_PI/180.0)/2) / (M_PI/4);	// 微小角度dθ計算
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <getAngleSensor+0x254>)
 8001b28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b2c:	f7fe fd84 	bl	8000638 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	a34b      	add	r3, pc, #300	; (adr r3, 8001c68 <getAngleSensor+0x230>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b52:	f7fe fe9b 	bl	800088c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	a344      	add	r3, pc, #272	; (adr r3, 8001c70 <getAngleSensor+0x238>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fe92 	bl	800088c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 2300 	strd	r2, r3, [r7]

		// センサ角度と微小角度を足す
		if (index >= NUM_SENSORS/2) angleSensor = ( (index-5.5)*THITA_SENSOR * (M_PI/180.0)) + dthita;
 8001b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d928      	bls.n	8001bc8 <getAngleSensor+0x190>
 8001b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcf3 	bl	8000564 <__aeabi_i2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <getAngleSensor+0x258>)
 8001b84:	f7fe fba0 	bl	80002c8 <__aeabi_dsub>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <getAngleSensor+0x254>)
 8001b96:	f7fe fd4f 	bl	8000638 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	a331      	add	r3, pc, #196	; (adr r3, 8001c68 <getAngleSensor+0x230>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd46 	bl	8000638 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb8:	f7fe fb88 	bl	80002cc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4934      	ldr	r1, [pc, #208]	; (8001c94 <getAngleSensor+0x25c>)
 8001bc2:	e9c1 2300 	strd	r2, r3, [r1]
 8001bc6:	e02c      	b.n	8001c22 <getAngleSensor+0x1ea>
		else 						angleSensor = -( ( (5.5-index)*THITA_SENSOR * (M_PI/180.0)) + dthita );
 8001bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcca 	bl	8000564 <__aeabi_i2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	492d      	ldr	r1, [pc, #180]	; (8001c90 <getAngleSensor+0x258>)
 8001bda:	f7fe fb75 	bl	80002c8 <__aeabi_dsub>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <getAngleSensor+0x254>)
 8001bec:	f7fe fd24 	bl	8000638 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	a31b      	add	r3, pc, #108	; (adr r3, 8001c68 <getAngleSensor+0x230>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fd1b 	bl	8000638 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c0e:	f7fe fb5d 	bl	80002cc <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4614      	mov	r4, r2
 8001c18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <getAngleSensor+0x25c>)
 8001c1e:	e9c3 4500 	strd	r4, r5, [r3]
		angleSensor = angleSensor*(180.0/M_PI);		// 弧度法に変換
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <getAngleSensor+0x25c>)
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	a313      	add	r3, pc, #76	; (adr r3, 8001c78 <getAngleSensor+0x240>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fd03 	bl	8000638 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4917      	ldr	r1, [pc, #92]	; (8001c94 <getAngleSensor+0x25c>)
 8001c38:	e9c1 2300 	strd	r2, r3, [r1]
		
	}

	// インデックスを初期化
	for (int i = 0; i < NUM_SENSORS; i ++) lSensorsList[i].index = i;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	e008      	b.n	8001c54 <getAngleSensor+0x21c>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <getAngleSensor+0x24c>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	ddf3      	ble.n	8001c42 <getAngleSensor+0x20a>
	
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c66:	bf00      	nop
 8001c68:	a2529d39 	.word	0xa2529d39
 8001c6c:	3f91df46 	.word	0x3f91df46
 8001c70:	54442d18 	.word	0x54442d18
 8001c74:	3fe921fb 	.word	0x3fe921fb
 8001c78:	1a63c1f8 	.word	0x1a63c1f8
 8001c7c:	404ca5dc 	.word	0x404ca5dc
 8001c80:	08001955 	.word	0x08001955
 8001c84:	200002e4 	.word	0x200002e4
 8001c88:	200002cc 	.word	0x200002cc
 8001c8c:	40260000 	.word	0x40260000
 8001c90:	40160000 	.word	0x40160000
 8001c94:	20000318 	.word	0x20000318

08001c98 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
	int32_t iP, iD, iI, iRet;
	int32_t Dev, Dif, kp, ki, kd;
	
	//サーボモータ用PWM値計算
	if (angleSensor > paramAngle[INDEX_ANGLE_CURVE]) {
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <motorControlTrace+0x1c0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc5e 	bl	8000564 <__aeabi_i2d>
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <motorControlTrace+0x1c4>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe ff35 	bl	8000b1c <__aeabi_dcmplt>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <motorControlTrace+0x42>
		kp = kp1Curve_buff;
 8001cb8:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <motorControlTrace+0x1c8>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 8001cbe:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <motorControlTrace+0x1cc>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <motorControlTrace+0x1d0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	617b      	str	r3, [r7, #20]
		Dev = lSensor[5] - lSensor[8];
 8001cca:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <motorControlTrace+0x1d4>)
 8001ccc:	895b      	ldrh	r3, [r3, #10]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <motorControlTrace+0x1d4>)
 8001cd2:	8a1b      	ldrh	r3, [r3, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	e02e      	b.n	8001d38 <motorControlTrace+0xa0>
	} else if (angleSensor < -paramAngle[INDEX_ANGLE_CURVE]) {
 8001cda:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <motorControlTrace+0x1c0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	425b      	negs	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc3f 	bl	8000564 <__aeabi_i2d>
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <motorControlTrace+0x1c4>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe ff34 	bl	8000b58 <__aeabi_dcmpgt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <motorControlTrace+0x80>
		kp = kp1Curve_buff;
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <motorControlTrace+0x1c8>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <motorControlTrace+0x1cc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <motorControlTrace+0x1d0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]
		Dev = lSensor[3] - lSensor[6];
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <motorControlTrace+0x1d4>)
 8001d0a:	88db      	ldrh	r3, [r3, #6]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <motorControlTrace+0x1d4>)
 8001d10:	899b      	ldrh	r3, [r3, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	e00f      	b.n	8001d38 <motorControlTrace+0xa0>
	} else {
		kp = kp1_buff;
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <motorControlTrace+0x1d8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	61fb      	str	r3, [r7, #28]
		ki = ki1_buff;
 8001d1e:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <motorControlTrace+0x1dc>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
		kd = kd1_buff;
 8001d24:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <motorControlTrace+0x1e0>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
		Dev = lSensor[4] - lSensor[7];
 8001d2a:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <motorControlTrace+0x1d4>)
 8001d2c:	891b      	ldrh	r3, [r3, #8]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <motorControlTrace+0x1d4>)
 8001d32:	89db      	ldrh	r3, [r3, #14]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	623b      	str	r3, [r7, #32]
	// kp = kp1_buff;
	// ki = ki1_buff;
	// kd = kd1_buff;
	// Dev = lSensor[4] - lSensor[7];
	// I成分積算
	Int += (double)Dev * 0.001;
 8001d38:	6a38      	ldr	r0, [r7, #32]
 8001d3a:	f7fe fc13 	bl	8000564 <__aeabi_i2d>
 8001d3e:	a340      	add	r3, pc, #256	; (adr r3, 8001e40 <motorControlTrace+0x1a8>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fc78 	bl	8000638 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <motorControlTrace+0x1e4>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fab9 	bl	80002cc <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4947      	ldr	r1, [pc, #284]	; (8001e7c <motorControlTrace+0x1e4>)
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <motorControlTrace+0x1e4>)
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	a337      	add	r3, pc, #220	; (adr r3, 8001e48 <motorControlTrace+0x1b0>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fef2 	bl	8000b58 <__aeabi_dcmpgt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <motorControlTrace+0xf0>
 8001d7a:	4940      	ldr	r1, [pc, #256]	; (8001e7c <motorControlTrace+0x1e4>)
 8001d7c:	a332      	add	r3, pc, #200	; (adr r3, 8001e48 <motorControlTrace+0x1b0>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	e9c1 2300 	strd	r2, r3, [r1]
 8001d86:	e010      	b.n	8001daa <motorControlTrace+0x112>
	else if ( Int < -10000 ) Int = -10000;
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <motorControlTrace+0x1e4>)
 8001d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d8e:	a330      	add	r3, pc, #192	; (adr r3, 8001e50 <motorControlTrace+0x1b8>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fec2 	bl	8000b1c <__aeabi_dcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <motorControlTrace+0x112>
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <motorControlTrace+0x1e4>)
 8001da0:	a32b      	add	r3, pc, #172	; (adr r3, 8001e50 <motorControlTrace+0x1b8>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <motorControlTrace+0x1e8>)
 8001dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db0:	461a      	mov	r2, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

	iP = (int32_t)kp1_buff * Dev;	// 比例
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <motorControlTrace+0x1d8>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	60fb      	str	r3, [r7, #12]
	iI = (double)ki1_buff * Int;	// 積分
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <motorControlTrace+0x1dc>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbba 	bl	8000544 <__aeabi_ui2d>
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <motorControlTrace+0x1e4>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fc2f 	bl	8000638 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fed9 	bl	8000b98 <__aeabi_d2iz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd1_buff * Dif;	// 微分
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <motorControlTrace+0x1e0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	119b      	asrs	r3, r3, #6
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e10:	dd02      	ble.n	8001e18 <motorControlTrace+0x180>
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001e1e:	da01      	bge.n	8001e24 <motorControlTrace+0x18c>
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <motorControlTrace+0x1ec>)
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
	
	tracePwm = iRet;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <motorControlTrace+0x1f0>)
 8001e2a:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <motorControlTrace+0x1e8>)
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e44:	3f50624d 	.word	0x3f50624d
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40c38800 	.word	0x40c38800
 8001e50:	00000000 	.word	0x00000000
 8001e54:	c0c38800 	.word	0xc0c38800
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	20000318 	.word	0x20000318
 8001e60:	2000001c 	.word	0x2000001c
 8001e64:	20000331 	.word	0x20000331
 8001e68:	2000001d 	.word	0x2000001d
 8001e6c:	200002cc 	.word	0x200002cc
 8001e70:	2000001a 	.word	0x2000001a
 8001e74:	20000330 	.word	0x20000330
 8001e78:	2000001b 	.word	0x2000001b
 8001e7c:	20000328 	.word	0x20000328
 8001e80:	20000324 	.word	0x20000324
 8001e84:	fffffc18 	.word	0xfffffc18
 8001e88:	20000322 	.word	0x20000322

08001e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e90:	f002 fc46 	bl	8004720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e94:	f000 f820 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e98:	f000 fcae 	bl	80027f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e9c:	f000 fc8c 	bl	80027b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ea0:	f000 f88c 	bl	8001fbc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ea4:	f000 f9d6 	bl	8002254 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001ea8:	f000 fa02 	bl	80022b0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001eac:	f000 fa6c 	bl	8002388 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001eb0:	f000 fb22 	bl	80024f8 <MX_TIM2_Init>
  MX_UART5_Init();
 8001eb4:	f000 fc56 	bl	8002764 <MX_UART5_Init>
  MX_TIM3_Init();
 8001eb8:	f000 fb76 	bl	80025a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ebc:	f000 fbc8 	bl	8002650 <MX_TIM4_Init>
  MX_SPI3_Init();
 8001ec0:	f000 fa2c 	bl	800231c <MX_SPI3_Init>
  MX_TIM6_Init();
 8001ec4:	f000 fc18 	bl	80026f8 <MX_TIM6_Init>
  MX_ADC2_Init();
 8001ec8:	f000 f964 	bl	8002194 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8001ecc:	f7ff fab0 	bl	8001430 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8001ed0:	f7ff fb20 	bl	8001514 <systemLoop>
 8001ed4:	e7fc      	b.n	8001ed0 <main+0x44>
	...

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2234      	movs	r2, #52	; 0x34
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f007 f98e 	bl	8009208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <SystemClock_Config+0xdc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <SystemClock_Config+0xdc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <SystemClock_Config+0xdc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <SystemClock_Config+0xe0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <SystemClock_Config+0xe0>)
 8001f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <SystemClock_Config+0xe0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001f48:	2306      	movs	r3, #6
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f4c:	23b4      	movs	r3, #180	; 0xb4
 8001f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fae9 	bl	8007538 <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f6c:	f000 fd1c 	bl	80029a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f70:	f004 ffce 	bl	8006f10 <HAL_PWREx_EnableOverDrive>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f7a:	f000 fd15 	bl	80029a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f7e:	230f      	movs	r3, #15
 8001f80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f82:	2302      	movs	r3, #2
 8001f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	2105      	movs	r1, #5
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 f807 	bl	8006fb0 <HAL_RCC_ClockConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fa8:	f000 fcfe 	bl	80029a8 <Error_Handler>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3750      	adds	r7, #80	; 0x50
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001fd0:	4a6f      	ldr	r2, [pc, #444]	; (8002190 <MX_ADC1_Init+0x1d4>)
 8001fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <MX_ADC1_Init+0x1d0>)
 8001ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002000:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 800200c:	4b5f      	ldr	r3, [pc, #380]	; (800218c <MX_ADC1_Init+0x1d0>)
 800200e:	220c      	movs	r2, #12
 8002010:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002012:	4b5e      	ldr	r3, [pc, #376]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <MX_ADC1_Init+0x1d0>)
 800201c:	2201      	movs	r2, #1
 800201e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002020:	485a      	ldr	r0, [pc, #360]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002022:	f002 fc13 	bl	800484c <HAL_ADC_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800202c:	f000 fcbc 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002030:	230b      	movs	r3, #11
 8002032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002038:	2304      	movs	r3, #4
 800203a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203c:	463b      	mov	r3, r7
 800203e:	4619      	mov	r1, r3
 8002040:	4852      	ldr	r0, [pc, #328]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002042:	f002 fed7 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800204c:	f000 fcac 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002050:	230c      	movs	r3, #12
 8002052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002054:	2302      	movs	r3, #2
 8002056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	484b      	ldr	r0, [pc, #300]	; (800218c <MX_ADC1_Init+0x1d0>)
 800205e:	f002 fec9 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002068:	f000 fc9e 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800206c:	230d      	movs	r3, #13
 800206e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002070:	2303      	movs	r3, #3
 8002072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4844      	ldr	r0, [pc, #272]	; (800218c <MX_ADC1_Init+0x1d0>)
 800207a:	f002 febb 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002084:	f000 fc90 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800208c:	2304      	movs	r3, #4
 800208e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	483d      	ldr	r0, [pc, #244]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002096:	f002 fead 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80020a0:	f000 fc82 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80020a8:	2305      	movs	r3, #5
 80020aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	4836      	ldr	r0, [pc, #216]	; (800218c <MX_ADC1_Init+0x1d0>)
 80020b2:	f002 fe9f 	bl	8004df4 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80020bc:	f000 fc74 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80020c4:	2306      	movs	r3, #6
 80020c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	482f      	ldr	r0, [pc, #188]	; (800218c <MX_ADC1_Init+0x1d0>)
 80020ce:	f002 fe91 	bl	8004df4 <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80020d8:	f000 fc66 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020dc:	2303      	movs	r3, #3
 80020de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80020e0:	2307      	movs	r3, #7
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	4828      	ldr	r0, [pc, #160]	; (800218c <MX_ADC1_Init+0x1d0>)
 80020ea:	f002 fe83 	bl	8004df4 <HAL_ADC_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80020f4:	f000 fc58 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020f8:	2304      	movs	r3, #4
 80020fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80020fc:	2308      	movs	r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	4619      	mov	r1, r3
 8002104:	4821      	ldr	r0, [pc, #132]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002106:	f002 fe75 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8002110:	f000 fc4a 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002114:	2305      	movs	r3, #5
 8002116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002118:	2309      	movs	r3, #9
 800211a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	4619      	mov	r1, r3
 8002120:	481a      	ldr	r0, [pc, #104]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002122:	f002 fe67 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 800212c:	f000 fc3c 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002130:	2306      	movs	r3, #6
 8002132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002134:	230a      	movs	r3, #10
 8002136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002138:	463b      	mov	r3, r7
 800213a:	4619      	mov	r1, r3
 800213c:	4813      	ldr	r0, [pc, #76]	; (800218c <MX_ADC1_Init+0x1d0>)
 800213e:	f002 fe59 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002148:	f000 fc2e 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800214c:	2307      	movs	r3, #7
 800214e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002150:	230b      	movs	r3, #11
 8002152:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002154:	463b      	mov	r3, r7
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_ADC1_Init+0x1d0>)
 800215a:	f002 fe4b 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8002164:	f000 fc20 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002168:	230e      	movs	r3, #14
 800216a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800216c:	230c      	movs	r3, #12
 800216e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_ADC1_Init+0x1d0>)
 8002176:	f002 fe3d 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8002180:	f000 fc12 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000334 	.word	0x20000334
 8002190:	40012000 	.word	0x40012000

08002194 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <MX_ADC2_Init+0xb8>)
 80021aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021bc:	2201      	movs	r2, #1
 80021be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021d4:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021d6:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <MX_ADC2_Init+0xbc>)
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021f4:	4814      	ldr	r0, [pc, #80]	; (8002248 <MX_ADC2_Init+0xb4>)
 80021f6:	f002 fb29 	bl	800484c <HAL_ADC_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002200:	f000 fbd2 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002204:	230a      	movs	r3, #10
 8002206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002208:	2301      	movs	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800220c:	2307      	movs	r3, #7
 800220e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <MX_ADC2_Init+0xb4>)
 8002216:	f002 fded 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002220:	f000 fbc2 	bl	80029a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002224:	230f      	movs	r3, #15
 8002226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002228:	2302      	movs	r3, #2
 800222a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800222c:	463b      	mov	r3, r7
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_ADC2_Init+0xb4>)
 8002232:	f002 fddf 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800223c:	f000 fbb4 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000037c 	.word	0x2000037c
 800224c:	40012100 	.word	0x40012100
 8002250:	0f000001 	.word	0x0f000001

08002254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_I2C1_Init+0x50>)
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <MX_I2C1_Init+0x54>)
 800225c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002260:	4a12      	ldr	r2, [pc, #72]	; (80022ac <MX_I2C1_Init+0x58>)
 8002262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_I2C1_Init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <MX_I2C1_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_I2C1_Init+0x50>)
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002290:	4804      	ldr	r0, [pc, #16]	; (80022a4 <MX_I2C1_Init+0x50>)
 8002292:	f003 fea7 	bl	8005fe4 <HAL_I2C_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800229c:	f000 fb84 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000424 	.word	0x20000424
 80022a8:	40005400 	.word	0x40005400
 80022ac:	00061a80 	.word	0x00061a80

080022b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <MX_SPI2_Init+0x64>)
 80022b6:	4a18      	ldr	r2, [pc, #96]	; (8002318 <MX_SPI2_Init+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <MX_SPI2_Init+0x64>)
 80022bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <MX_SPI2_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_SPI2_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_SPI2_Init+0x64>)
 80022d0:	2202      	movs	r2, #2
 80022d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_SPI2_Init+0x64>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_SPI2_Init+0x64>)
 80022dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_SPI2_Init+0x64>)
 80022e4:	2220      	movs	r2, #32
 80022e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <MX_SPI2_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_SPI2_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <MX_SPI2_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_SPI2_Init+0x64>)
 80022fc:	220a      	movs	r2, #10
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <MX_SPI2_Init+0x64>)
 8002302:	f005 fbb7 	bl	8007a74 <HAL_SPI_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800230c:	f000 fb4c 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000478 	.word	0x20000478
 8002318:	40003800 	.word	0x40003800

0800231c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_SPI3_Init+0x64>)
 8002322:	4a18      	ldr	r2, [pc, #96]	; (8002384 <MX_SPI3_Init+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_SPI3_Init+0x64>)
 8002328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800232c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_SPI3_Init+0x64>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_SPI3_Init+0x64>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_SPI3_Init+0x64>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_SPI3_Init+0x64>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_SPI3_Init+0x64>)
 8002348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_SPI3_Init+0x64>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <MX_SPI3_Init+0x64>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_SPI3_Init+0x64>)
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <MX_SPI3_Init+0x64>)
 8002362:	2200      	movs	r2, #0
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_SPI3_Init+0x64>)
 8002368:	220a      	movs	r2, #10
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_SPI3_Init+0x64>)
 800236e:	f005 fb81 	bl	8007a74 <HAL_SPI_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002378:	f000 fb16 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200004d0 	.word	0x200004d0
 8002384:	40003c00 	.word	0x40003c00

08002388 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b092      	sub	sp, #72	; 0x48
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
 80023a8:	615a      	str	r2, [r3, #20]
 80023aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2220      	movs	r2, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f006 ff28 	bl	8009208 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023b8:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023ba:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <MX_TIM1_Init+0x16c>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80023be:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023c0:	220b      	movs	r2, #11
 80023c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023cc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80023d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023d8:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023e4:	4842      	ldr	r0, [pc, #264]	; (80024f0 <MX_TIM1_Init+0x168>)
 80023e6:	f005 fc8d 	bl	8007d04 <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80023f0:	f000 fada 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002400:	4619      	mov	r1, r3
 8002402:	483b      	ldr	r0, [pc, #236]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002404:	f006 fb32 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800240e:	f000 facb 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	; 0x60
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800241e:	2300      	movs	r3, #0
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	482e      	ldr	r0, [pc, #184]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002438:	f005 ffb8 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002442:	f000 fab1 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	2204      	movs	r2, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4828      	ldr	r0, [pc, #160]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002450:	f005 ffac 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800245a:	f000 faa5 	bl	80029a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	2208      	movs	r2, #8
 8002464:	4619      	mov	r1, r3
 8002466:	4822      	ldr	r0, [pc, #136]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002468:	f005 ffa0 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002472:	f000 fa99 	bl	80029a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <MX_TIM1_Init+0x168>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0208 	bic.w	r2, r2, #8
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248a:	220c      	movs	r2, #12
 800248c:	4619      	mov	r1, r3
 800248e:	4818      	ldr	r0, [pc, #96]	; (80024f0 <MX_TIM1_Init+0x168>)
 8002490:	f005 ff8c 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800249a:	f000 fa85 	bl	80029a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_TIM1_Init+0x168>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_TIM1_Init+0x168>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ac:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <MX_TIM1_Init+0x168>)
 80024d2:	f006 fb47 	bl	8008b64 <HAL_TIMEx_ConfigBreakDeadTime>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80024dc:	f000 fa64 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <MX_TIM1_Init+0x168>)
 80024e2:	f001 fcc3 	bl	8003e6c <HAL_TIM_MspPostInit>

}
 80024e6:	bf00      	nop
 80024e8:	3748      	adds	r7, #72	; 0x48
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000528 	.word	0x20000528
 80024f4:	40010000 	.word	0x40010000

080024f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	615a      	str	r2, [r3, #20]
 8002518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <MX_TIM2_Init+0xac>)
 800251c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002524:	220b      	movs	r2, #11
 8002526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <MX_TIM2_Init+0xac>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 335;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002530:	f240 124f 	movw	r2, #335	; 0x14f
 8002534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_TIM2_Init+0xac>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002542:	4818      	ldr	r0, [pc, #96]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002544:	f005 fbde 	bl	8007d04 <HAL_TIM_PWM_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800254e:	f000 fa2b 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002552:	2320      	movs	r3, #32
 8002554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800255a:	f107 0320 	add.w	r3, r7, #32
 800255e:	4619      	mov	r1, r3
 8002560:	4810      	ldr	r0, [pc, #64]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002562:	f006 fa83 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800256c:	f000 fa1c 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002570:	2360      	movs	r3, #96	; 0x60
 8002572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	4619      	mov	r1, r3
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002588:	f005 ff10 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002592:	f000 fa09 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM2_Init+0xac>)
 8002598:	f001 fc68 	bl	8003e6c <HAL_TIM_MspPostInit>

}
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000570 	.word	0x20000570

080025a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f006 fe26 	bl	8009208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <MX_TIM3_Init+0xa4>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ea:	2303      	movs	r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80025fe:	2302      	movs	r3, #2
 8002600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM3_Init+0xa0>)
 8002616:	f005 fc8d 	bl	8007f34 <HAL_TIM_Encoder_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002620:	f000 f9c2 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_TIM3_Init+0xa0>)
 8002632:	f006 fa1b 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800263c:	f000 f9b4 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200005b8 	.word	0x200005b8
 800264c:	40000400 	.word	0x40000400

08002650 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f006 fdd2 	bl	8009208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800266e:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <MX_TIM4_Init+0xa4>)
 8002670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002684:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002692:	2303      	movs	r3, #3
 8002694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800269a:	2301      	movs	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026aa:	2301      	movs	r3, #1
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <MX_TIM4_Init+0xa0>)
 80026be:	f005 fc39 	bl	8007f34 <HAL_TIM_Encoder_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80026c8:	f000 f96e 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_TIM4_Init+0xa0>)
 80026da:	f006 f9c7 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80026e4:	f000 f960 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000600 	.word	0x20000600
 80026f4:	40000800 	.word	0x40000800

080026f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	463b      	mov	r3, r7
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM6_Init+0x64>)
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <MX_TIM6_Init+0x68>)
 800270a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_TIM6_Init+0x64>)
 800270e:	220b      	movs	r2, #11
 8002710:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_TIM6_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_TIM6_Init+0x64>)
 800271a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800271e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_TIM6_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <MX_TIM6_Init+0x64>)
 8002728:	f005 fa2d 	bl	8007b86 <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002732:	f000 f939 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <MX_TIM6_Init+0x64>)
 8002744:	f006 f992 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800274e:	f000 f92b 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000648 	.word	0x20000648
 8002760:	40001000 	.word	0x40001000

08002764 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_UART5_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_UART5_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_UART5_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_UART5_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_UART5_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_UART5_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_UART5_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_UART5_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_UART5_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_UART5_Init+0x4c>)
 800279c:	f006 fa48 	bl	8008c30 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80027a6:	f000 f8ff 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000690 	.word	0x20000690
 80027b4:	40005000 	.word	0x40005000

080027b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_DMA_Init+0x3c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <MX_DMA_Init+0x3c>)
 80027c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <MX_DMA_Init+0x3c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2038      	movs	r0, #56	; 0x38
 80027e0:	f002 fe93 	bl	800550a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027e4:	2038      	movs	r0, #56	; 0x38
 80027e6:	f002 feac 	bl	8005542 <HAL_NVIC_EnableIRQ>

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b59      	ldr	r3, [pc, #356]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a54      	ldr	r2, [pc, #336]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b52      	ldr	r3, [pc, #328]	; (8002984 <MX_GPIO_Init+0x18c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <MX_GPIO_Init+0x18c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <MX_GPIO_Init+0x18c>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b40      	ldr	r3, [pc, #256]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <MX_GPIO_Init+0x18c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 800289a:	2200      	movs	r2, #0
 800289c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80028a0:	4839      	ldr	r0, [pc, #228]	; (8002988 <MX_GPIO_Init+0x190>)
 80028a2:	f003 fb85 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 80028a6:	2201      	movs	r2, #1
 80028a8:	f243 0130 	movw	r1, #12336	; 0x3030
 80028ac:	4837      	ldr	r0, [pc, #220]	; (800298c <MX_GPIO_Init+0x194>)
 80028ae:	f003 fb7f 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b8:	4835      	ldr	r0, [pc, #212]	; (8002990 <MX_GPIO_Init+0x198>)
 80028ba:	f003 fb79 	bl	8005fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 80028be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	482d      	ldr	r0, [pc, #180]	; (8002988 <MX_GPIO_Init+0x190>)
 80028d4:	f003 f9c0 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 80028d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4825      	ldr	r0, [pc, #148]	; (8002988 <MX_GPIO_Init+0x190>)
 80028f2:	f003 f9b1 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80028f6:	2302      	movs	r3, #2
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4820      	ldr	r0, [pc, #128]	; (800298c <MX_GPIO_Init+0x194>)
 800290a:	f003 f9a5 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 800290e:	2304      	movs	r3, #4
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <MX_GPIO_Init+0x194>)
 8002922:	f003 f999 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 8002926:	f243 0330 	movw	r3, #12336	; 0x3030
 800292a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292c:	2301      	movs	r3, #1
 800292e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	4813      	ldr	r0, [pc, #76]	; (800298c <MX_GPIO_Init+0x194>)
 8002940:	f003 f98a 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 8002944:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <MX_GPIO_Init+0x190>)
 800295a:	f003 f97d 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800295e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	4806      	ldr	r0, [pc, #24]	; (8002990 <MX_GPIO_Init+0x198>)
 8002978:	f003 f96e 	bl	8005c58 <HAL_GPIO_Init>

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	40020800 	.word	0x40020800
 800298c:	40020400 	.word	0x40020400
 8002990:	40020000 	.word	0x40020000

08002994 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  getLineSensor();
 800299c:	f7fe fff8 	bl	8001990 <getLineSensor>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ac:	b672      	cpsid	i
}
 80029ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <Error_Handler+0x8>
	...

080029b4 <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71bb      	strb	r3, [r7, #6]
 80029be:	2301      	movs	r3, #1
 80029c0:	717b      	strb	r3, [r7, #5]
 80029c2:	2300      	movs	r3, #0
 80029c4:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 80029c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ca:	480e      	ldr	r0, [pc, #56]	; (8002a04 <getMarkerSensor+0x50>)
 80029cc:	f003 fad8 	bl	8005f80 <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
 80029d2:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 80029d4:	2102      	movs	r1, #2
 80029d6:	480c      	ldr	r0, [pc, #48]	; (8002a08 <getMarkerSensor+0x54>)
 80029d8:	f003 fad2 	bl	8005f80 <HAL_GPIO_ReadPin>
 80029dc:	4603      	mov	r3, r0
 80029de:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += RIGHTMARKER;
 80029e0:	79bb      	ldrb	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <getMarkerSensor+0x38>
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	3301      	adds	r3, #1
 80029ea:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += LEFTMARKER;
 80029ec:	797b      	ldrb	r3, [r7, #5]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <getMarkerSensor+0x44>
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	3302      	adds	r3, #2
 80029f6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80029f8:	79fb      	ldrb	r3, [r7, #7]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020400 	.word	0x40020400

08002a0c <checkMarker>:
// モジュール名 checkMarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkMarker( void ) {
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	71fb      	strb	r3, [r7, #7]

	if (encTotalN - encCross >= encMM(40)) encCross = 0;
 8002a16:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <checkMarker+0xa8>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <checkMarker+0xac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1ad4      	subs	r4, r2, r3
 8002a20:	2028      	movs	r0, #40	; 0x28
 8002a22:	f7fe ff41 	bl	80018a8 <encMM>
 8002a26:	4603      	mov	r3, r0
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	db02      	blt.n	8002a32 <checkMarker+0x26>
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <checkMarker+0xac>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

	if ( getMarkerSensor() != 0) {
 8002a32:	f7ff ffbf 	bl	80029b4 <getMarkerSensor>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d035      	beq.n	8002aa8 <checkMarker+0x9c>
		if (encMarker == 0) {
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <checkMarker+0xb0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <checkMarker+0x4e>
			mark = getMarkerSensor();
 8002a44:	f7ff ffb6 	bl	80029b4 <getMarkerSensor>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <checkMarker+0xb4>)
 8002a4e:	601a      	str	r2, [r3, #0]
			encMarker = encTotalN;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <checkMarker+0xa8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <checkMarker+0xb0>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e026      	b.n	8002aa8 <checkMarker+0x9c>
		} else if (encTotalN - encMarker <= encth && encTotalN - encCross <= encMM(40)) {
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <checkMarker+0xa8>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <checkMarker+0xb0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <checkMarker+0xb8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dc0a      	bgt.n	8002a82 <checkMarker+0x76>
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <checkMarker+0xa8>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <checkMarker+0xac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1ad4      	subs	r4, r2, r3
 8002a76:	2028      	movs	r0, #40	; 0x28
 8002a78:	f7fe ff16 	bl	80018a8 <encMM>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	429c      	cmp	r4, r3
 8002a80:	dd12      	ble.n	8002aa8 <checkMarker+0x9c>
			// if (mark != getMarkerSensor()) {
			// 	ret = 0;
			// 	encMarker = 0;
			// 	encCross = encTotalN;
			// }
		} else if (encTotalN - encMarker >= encth) {
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <checkMarker+0xa8>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <checkMarker+0xb0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <checkMarker+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	db09      	blt.n	8002aa8 <checkMarker+0x9c>
			ret = getMarkerSensor();
 8002a94:	f7ff ff8e 	bl	80029b4 <getMarkerSensor>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
			encMarker = 0;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <checkMarker+0xb0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
			mark = 0;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <checkMarker+0xb4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
		}
	}

	return ret;
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000294 	.word	0x20000294
 8002ab8:	200006e0 	.word	0x200006e0
 8002abc:	200006d8 	.word	0x200006d8
 8002ac0:	200006dc 	.word	0x200006dc
 8002ac4:	20000020 	.word	0x20000020

08002ac8 <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	80fb      	strh	r3, [r7, #6]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80bb      	strh	r3, [r7, #4]

    if (pwmL > 0) {
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	dd09      	ble.n	8002af4 <motorPwmOut+0x2c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <motorPwmOut+0xc4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <motorPwmOut+0xc4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
 8002af2:	e01b      	b.n	8002b2c <motorPwmOut+0x64>
    } else if (pwmL == 0) {
 8002af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <motorPwmOut+0x4a>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <motorPwmOut+0xc4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <motorPwmOut+0xc4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b10:	e00c      	b.n	8002b2c <motorPwmOut+0x64>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bfb8      	it	lt
 8002b1a:	425b      	neglt	r3, r3
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <motorPwmOut+0xc4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <motorPwmOut+0xc4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (pwmR > 0) {
 8002b2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	dd09      	ble.n	8002b48 <motorPwmOut+0x80>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwmR);
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <motorPwmOut+0xc4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002b3e:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <motorPwmOut+0xc4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
    }

}
 8002b46:	e01b      	b.n	8002b80 <motorPwmOut+0xb8>
    } else if (pwmR == 0) {
 8002b48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <motorPwmOut+0x9e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <motorPwmOut+0xc4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <motorPwmOut+0xc4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b64:	e00c      	b.n	8002b80 <motorPwmOut+0xb8>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <motorPwmOut+0xc4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
 8002b6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfb8      	it	lt
 8002b76:	425b      	neglt	r3, r3
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <motorPwmOut+0xc4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000528 	.word	0x20000528

08002b90 <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	80fb      	strh	r3, [r7, #6]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 8002ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	dd14      	ble.n	8002bd2 <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 8002ba8:	88ba      	ldrh	r2, [r7, #4]
 8002baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	425b      	neglt	r3, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 8002bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bfb8      	it	lt
 8002bc4:	425b      	neglt	r3, r3
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	88bb      	ldrh	r3, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	81bb      	strh	r3, [r7, #12]
 8002bd0:	e013      	b.n	8002bfa <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 8002bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	425b      	neglt	r3, r3
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	88bb      	ldrh	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8002be6:	88ba      	ldrh	r2, [r7, #4]
 8002be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bfb8      	it	lt
 8002bf0:	425b      	neglt	r3, r3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 8002bfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002bfe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5f 	bl	8002ac8 <motorPwmOut>
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af02      	add	r7, sp, #8
	uint8_t cnt_led, sd_sw;
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	switch ( swValRotary ) {
 8002c1a:	4ba9      	ldr	r3, [pc, #676]	; (8002ec0 <setup+0x2ac>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	f200 84ea 	bhi.w	80035f8 <setup+0x9e4>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <setup+0x18>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c45 	.word	0x08002c45
 8002c30:	08002c61 	.word	0x08002c61
 8002c34:	08002d99 	.word	0x08002d99
 8002c38:	08002f8d 	.word	0x08002f8d
 8002c3c:	08003105 	.word	0x08003105
 8002c40:	0800328f 	.word	0x0800328f
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8002c44:	2102      	movs	r1, #2
 8002c46:	489f      	ldr	r0, [pc, #636]	; (8002ec4 <setup+0x2b0>)
 8002c48:	f000 fd1e 	bl	8003688 <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8002c4c:	499e      	ldr	r1, [pc, #632]	; (8002ec8 <setup+0x2b4>)
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe fb30 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8002c54:	499d      	ldr	r1, [pc, #628]	; (8002ecc <setup+0x2b8>)
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7fe fb2c 	bl	80012b4 <lcdRowPrintf>
			break;
 8002c5c:	f000 bce1 	b.w	8003622 <setup+0xa0e>
		//------------------------------------------------------------------
		// パラメータ調整(通常トレース)
		//------------------------------------------------------------------
		case 0x1:
			dataTuningLR( &pattern_parameter1, 1 );
 8002c60:	2101      	movs	r1, #1
 8002c62:	489b      	ldr	r0, [pc, #620]	; (8002ed0 <setup+0x2bc>)
 8002c64:	f000 fdca 	bl	80037fc <dataTuningLR>
			
			if ( pattern_parameter1 == 6 ) pattern_parameter1 = 1;
 8002c68:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <setup+0x2bc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d103      	bne.n	8002c78 <setup+0x64>
 8002c70:	4b97      	ldr	r3, [pc, #604]	; (8002ed0 <setup+0x2bc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e006      	b.n	8002c86 <setup+0x72>
			else if ( pattern_parameter1 == 0 ) pattern_parameter1 = 5;
 8002c78:	4b95      	ldr	r3, [pc, #596]	; (8002ed0 <setup+0x2bc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <setup+0x72>
 8002c80:	4b93      	ldr	r3, [pc, #588]	; (8002ed0 <setup+0x2bc>)
 8002c82:	2205      	movs	r2, #5
 8002c84:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_parameter1 ) {
 8002c86:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <setup+0x2bc>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	f200 84bf 	bhi.w	8003610 <setup+0x9fc>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <setup+0x84>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cdf 	.word	0x08002cdf
 8002ca0:	08002d11 	.word	0x08002d11
 8002ca4:	08002d43 	.word	0x08002d43
 8002ca8:	08002d75 	.word	0x08002d75
				case 1:
					// 通常走行速度
					lcdRowPrintf(UPROW, "STRAIGHT");
 8002cac:	4989      	ldr	r1, [pc, #548]	; (8002ed4 <setup+0x2c0>)
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fb00 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STRAIGHT] / 10);
 8002cb4:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <setup+0x2c4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc43 	bl	8000544 <__aeabi_ui2d>
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b86      	ldr	r3, [pc, #536]	; (8002edc <setup+0x2c8>)
 8002cc4:	f7fd fde2 	bl	800088c <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4984      	ldr	r1, [pc, #528]	; (8002ee0 <setup+0x2cc>)
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f7fe faf0 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STRAIGHT], 1 );
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4880      	ldr	r0, [pc, #512]	; (8002ed8 <setup+0x2c4>)
 8002cd8:	f000 fd0c 	bl	80036f4 <dataTuningUD>
					break;
 8002cdc:	e05a      	b.n	8002d94 <setup+0x180>
				case 2:
					// 停止速度
					lcdRowPrintf(UPROW, "CURVE   ");
 8002cde:	4981      	ldr	r1, [pc, #516]	; (8002ee4 <setup+0x2d0>)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fe fae7 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVE] / 10);
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <setup+0x2c4>)
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fc2a 	bl	8000544 <__aeabi_ui2d>
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	4b79      	ldr	r3, [pc, #484]	; (8002edc <setup+0x2c8>)
 8002cf6:	f7fd fdc9 	bl	800088c <__aeabi_ddiv>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4978      	ldr	r1, [pc, #480]	; (8002ee0 <setup+0x2cc>)
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fe fad7 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVE], 1 );
 8002d06:	2101      	movs	r1, #1
 8002d08:	4877      	ldr	r0, [pc, #476]	; (8002ee8 <setup+0x2d4>)
 8002d0a:	f000 fcf3 	bl	80036f4 <dataTuningUD>
					break;
 8002d0e:	e041      	b.n	8002d94 <setup+0x180>
				case 3:
					// カーブブレーキ
					lcdRowPrintf(UPROW, "BRAKE   ");
 8002d10:	4976      	ldr	r1, [pc, #472]	; (8002eec <setup+0x2d8>)
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fe face 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVEBREAK] / 10);
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <setup+0x2c4>)
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc11 	bl	8000544 <__aeabi_ui2d>
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <setup+0x2c8>)
 8002d28:	f7fd fdb0 	bl	800088c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	496b      	ldr	r1, [pc, #428]	; (8002ee0 <setup+0x2cc>)
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fabe 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVEBREAK], 1 );
 8002d38:	2101      	movs	r1, #1
 8002d3a:	486d      	ldr	r0, [pc, #436]	; (8002ef0 <setup+0x2dc>)
 8002d3c:	f000 fcda 	bl	80036f4 <dataTuningUD>
					break;
 8002d40:	e028      	b.n	8002d94 <setup+0x180>
				case 4:
					// 停止速度
					lcdRowPrintf(UPROW, "STOP    ");
 8002d42:	496c      	ldr	r1, [pc, #432]	; (8002ef4 <setup+0x2e0>)
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fab5 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STOP] / 10);
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <setup+0x2c4>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbf8 	bl	8000544 <__aeabi_ui2d>
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b60      	ldr	r3, [pc, #384]	; (8002edc <setup+0x2c8>)
 8002d5a:	f7fd fd97 	bl	800088c <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	495f      	ldr	r1, [pc, #380]	; (8002ee0 <setup+0x2cc>)
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7fe faa5 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STOP], 1 );
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4862      	ldr	r0, [pc, #392]	; (8002ef8 <setup+0x2e4>)
 8002d6e:	f000 fcc1 	bl	80036f4 <dataTuningUD>
					break;
 8002d72:	e00f      	b.n	8002d94 <setup+0x180>
				case 5:
					lcdRowPrintf(UPROW, "ANGLECUR");
 8002d74:	4961      	ldr	r1, [pc, #388]	; (8002efc <setup+0x2e8>)
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fa9c 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "    %4d", paramAngle[INDEX_ANGLE_CURVE]);
 8002d7c:	4b60      	ldr	r3, [pc, #384]	; (8002f00 <setup+0x2ec>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4960      	ldr	r1, [pc, #384]	; (8002f04 <setup+0x2f0>)
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fe fa95 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramAngle[INDEX_ANGLE_CURVE], 1 );
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	485c      	ldr	r0, [pc, #368]	; (8002f00 <setup+0x2ec>)
 8002d8e:	f000 fcb1 	bl	80036f4 <dataTuningUD>
					break;
 8002d92:	bf00      	nop
				
			}
			break;
 8002d94:	f000 bc3c 	b.w	8003610 <setup+0x9fc>
		//------------------------------------------------------------------
		// ゲイン調整(直線トレース)
		//------------------------------------------------------------------
		case 0x2:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002d98:	495b      	ldr	r1, [pc, #364]	; (8002f08 <setup+0x2f4>)
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fa8a 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002da0:	2102      	movs	r1, #2
 8002da2:	485a      	ldr	r0, [pc, #360]	; (8002f0c <setup+0x2f8>)
 8002da4:	f000 fc70 	bl	8003688 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <setup+0x2f8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10c      	bne.n	8002dca <setup+0x1b6>
				motorPwmOutSynth( tracePwm, 0 );
 8002db0:	4b57      	ldr	r3, [pc, #348]	; (8002f10 <setup+0x2fc>)
 8002db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fee9 	bl	8002b90 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8002dbe:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <setup+0x300>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc8:	e007      	b.n	8002dda <setup+0x1c6>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7ff fedf 	bl	8002b90 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <setup+0x300>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002dda:	2101      	movs	r1, #1
 8002ddc:	484e      	ldr	r0, [pc, #312]	; (8002f18 <setup+0x304>)
 8002dde:	f000 fd0d 	bl	80037fc <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <setup+0x304>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d103      	bne.n	8002df2 <setup+0x1de>
 8002dea:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <setup+0x304>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e006      	b.n	8002e00 <setup+0x1ec>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002df2:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <setup+0x304>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <setup+0x1ec>
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <setup+0x304>)
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002e00:	4b45      	ldr	r3, [pc, #276]	; (8002f18 <setup+0x304>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	f000 8097 	beq.w	8002f38 <setup+0x324>
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	f300 8402 	bgt.w	8003614 <setup+0xa00>
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d002      	beq.n	8002e1a <setup+0x206>
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d029      	beq.n	8002e6c <setup+0x258>
					}
					
					dataTuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 8002e18:	e3fc      	b.n	8003614 <setup+0xa00>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <setup+0x308>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e22:	d302      	bcc.n	8002e2a <setup+0x216>
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <setup+0x308>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <setup+0x308>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2bf9      	cmp	r3, #249	; 0xf9
 8002e30:	d809      	bhi.n	8002e46 <setup+0x232>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <setup+0x30c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <setup+0x310>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	493a      	ldr	r1, [pc, #232]	; (8002f28 <setup+0x314>)
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7fe fa38 	bl	80012b4 <lcdRowPrintf>
 8002e44:	e00d      	b.n	8002e62 <setup+0x24e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <setup+0x318>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <setup+0x30c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <setup+0x310>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4935      	ldr	r1, [pc, #212]	; (8002f30 <setup+0x31c>)
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7fe fa29 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1_buff, 1 );
 8002e62:	2101      	movs	r1, #1
 8002e64:	4831      	ldr	r0, [pc, #196]	; (8002f2c <setup+0x318>)
 8002e66:	f000 fc45 	bl	80036f4 <dataTuningUD>
					break;
 8002e6a:	e08e      	b.n	8002f8a <setup+0x376>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <setup+0x308>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e74:	d302      	bcc.n	8002e7c <setup+0x268>
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <setup+0x308>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <setup+0x308>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2bf9      	cmp	r3, #249	; 0xf9
 8002e82:	d809      	bhi.n	8002e98 <setup+0x284>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <setup+0x318>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <setup+0x310>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4929      	ldr	r1, [pc, #164]	; (8002f34 <setup+0x320>)
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7fe fa0f 	bl	80012b4 <lcdRowPrintf>
 8002e96:	e00d      	b.n	8002eb4 <setup+0x2a0>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <setup+0x318>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <setup+0x30c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <setup+0x310>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <setup+0x31c>)
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fe fa00 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1_buff, 1 );
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	481a      	ldr	r0, [pc, #104]	; (8002f20 <setup+0x30c>)
 8002eb8:	f000 fc1c 	bl	80036f4 <dataTuningUD>
					break;
 8002ebc:	e065      	b.n	8002f8a <setup+0x376>
 8002ebe:	bf00      	nop
 8002ec0:	200006fa 	.word	0x200006fa
 8002ec4:	200006e8 	.word	0x200006e8
 8002ec8:	0800e1f0 	.word	0x0800e1f0
 8002ecc:	0800e1fc 	.word	0x0800e1fc
 8002ed0:	20000026 	.word	0x20000026
 8002ed4:	0800e208 	.word	0x0800e208
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	40240000 	.word	0x40240000
 8002ee0:	0800e214 	.word	0x0800e214
 8002ee4:	0800e220 	.word	0x0800e220
 8002ee8:	20000007 	.word	0x20000007
 8002eec:	0800e22c 	.word	0x0800e22c
 8002ef0:	20000005 	.word	0x20000005
 8002ef4:	0800e238 	.word	0x0800e238
 8002ef8:	20000006 	.word	0x20000006
 8002efc:	0800e244 	.word	0x0800e244
 8002f00:	20000010 	.word	0x20000010
 8002f04:	0800e250 	.word	0x0800e250
 8002f08:	0800e258 	.word	0x0800e258
 8002f0c:	200006f8 	.word	0x200006f8
 8002f10:	20000322 	.word	0x20000322
 8002f14:	20000570 	.word	0x20000570
 8002f18:	20000027 	.word	0x20000027
 8002f1c:	200006ea 	.word	0x200006ea
 8002f20:	20000330 	.word	0x20000330
 8002f24:	2000001b 	.word	0x2000001b
 8002f28:	0800e264 	.word	0x0800e264
 8002f2c:	2000001a 	.word	0x2000001a
 8002f30:	0800e270 	.word	0x0800e270
 8002f34:	0800e27c 	.word	0x0800e27c
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002f38:	4b98      	ldr	r3, [pc, #608]	; (800319c <setup+0x588>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f40:	d302      	bcc.n	8002f48 <setup+0x334>
 8002f42:	4b96      	ldr	r3, [pc, #600]	; (800319c <setup+0x588>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002f48:	4b94      	ldr	r3, [pc, #592]	; (800319c <setup+0x588>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2bf9      	cmp	r3, #249	; 0xf9
 8002f4e:	d809      	bhi.n	8002f64 <setup+0x350>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8002f50:	4b93      	ldr	r3, [pc, #588]	; (80031a0 <setup+0x58c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b93      	ldr	r3, [pc, #588]	; (80031a4 <setup+0x590>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4993      	ldr	r1, [pc, #588]	; (80031a8 <setup+0x594>)
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7fe f9a9 	bl	80012b4 <lcdRowPrintf>
 8002f62:	e00d      	b.n	8002f80 <setup+0x36c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002f64:	4b8e      	ldr	r3, [pc, #568]	; (80031a0 <setup+0x58c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	; (80031a4 <setup+0x590>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4b8e      	ldr	r3, [pc, #568]	; (80031ac <setup+0x598>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	498d      	ldr	r1, [pc, #564]	; (80031b0 <setup+0x59c>)
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f7fe f99a 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1_buff, 1 );
 8002f80:	2101      	movs	r1, #1
 8002f82:	488a      	ldr	r0, [pc, #552]	; (80031ac <setup+0x598>)
 8002f84:	f000 fbb6 	bl	80036f4 <dataTuningUD>
					break;
 8002f88:	bf00      	nop
			break;
 8002f8a:	e343      	b.n	8003614 <setup+0xa00>
		//------------------------------------------------------------------
		// ゲイン調整(カーブトレース)
		//------------------------------------------------------------------
		case 0x3:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002f8c:	4989      	ldr	r1, [pc, #548]	; (80031b4 <setup+0x5a0>)
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fe f990 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002f94:	2102      	movs	r1, #2
 8002f96:	4888      	ldr	r0, [pc, #544]	; (80031b8 <setup+0x5a4>)
 8002f98:	f000 fb76 	bl	8003688 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002f9c:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <setup+0x5a4>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <setup+0x3aa>
				motorPwmOutSynth( tracePwm, 0 );
 8002fa4:	4b85      	ldr	r3, [pc, #532]	; (80031bc <setup+0x5a8>)
 8002fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fdef 	bl	8002b90 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8002fb2:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <setup+0x5ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbc:	e007      	b.n	8002fce <setup+0x3ba>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7ff fde5 	bl	8002b90 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002fc6:	4b7e      	ldr	r3, [pc, #504]	; (80031c0 <setup+0x5ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002fce:	2101      	movs	r1, #1
 8002fd0:	487c      	ldr	r0, [pc, #496]	; (80031c4 <setup+0x5b0>)
 8002fd2:	f000 fc13 	bl	80037fc <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <setup+0x5b0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d103      	bne.n	8002fe6 <setup+0x3d2>
 8002fde:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <setup+0x5b0>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e006      	b.n	8002ff4 <setup+0x3e0>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <setup+0x5b0>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <setup+0x3e0>
 8002fee:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <setup+0x5b0>)
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002ff4:	4b73      	ldr	r3, [pc, #460]	; (80031c4 <setup+0x5b0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d059      	beq.n	80030b0 <setup+0x49c>
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	f300 830b 	bgt.w	8003618 <setup+0xa04>
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <setup+0x3f8>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d029      	beq.n	800305e <setup+0x44a>
					}
					
					dataTuningUD ( &kd1Curve_buff, 1 );
					break;
			}
			break;
 800300a:	e305      	b.n	8003618 <setup+0xa04>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800300c:	4b63      	ldr	r3, [pc, #396]	; (800319c <setup+0x588>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003014:	d302      	bcc.n	800301c <setup+0x408>
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <setup+0x588>)
 8003018:	2200      	movs	r2, #0
 800301a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800301c:	4b5f      	ldr	r3, [pc, #380]	; (800319c <setup+0x588>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	2bf9      	cmp	r3, #249	; 0xf9
 8003022:	d809      	bhi.n	8003038 <setup+0x424>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1Curve_buff, kd1Curve_buff);
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <setup+0x5b4>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b68      	ldr	r3, [pc, #416]	; (80031cc <setup+0x5b8>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	4968      	ldr	r1, [pc, #416]	; (80031d0 <setup+0x5bc>)
 8003030:	2001      	movs	r0, #1
 8003032:	f7fe f93f 	bl	80012b4 <lcdRowPrintf>
 8003036:	e00d      	b.n	8003054 <setup+0x440>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <setup+0x5c0>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <setup+0x5b4>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	4b61      	ldr	r3, [pc, #388]	; (80031cc <setup+0x5b8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	460b      	mov	r3, r1
 800304c:	4958      	ldr	r1, [pc, #352]	; (80031b0 <setup+0x59c>)
 800304e:	2001      	movs	r0, #1
 8003050:	f7fe f930 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1Curve_buff, 1 );
 8003054:	2101      	movs	r1, #1
 8003056:	485f      	ldr	r0, [pc, #380]	; (80031d4 <setup+0x5c0>)
 8003058:	f000 fb4c 	bl	80036f4 <dataTuningUD>
					break;
 800305c:	e051      	b.n	8003102 <setup+0x4ee>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800305e:	4b4f      	ldr	r3, [pc, #316]	; (800319c <setup+0x588>)
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003066:	d302      	bcc.n	800306e <setup+0x45a>
 8003068:	4b4c      	ldr	r3, [pc, #304]	; (800319c <setup+0x588>)
 800306a:	2200      	movs	r2, #0
 800306c:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800306e:	4b4b      	ldr	r3, [pc, #300]	; (800319c <setup+0x588>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	2bf9      	cmp	r3, #249	; 0xf9
 8003074:	d809      	bhi.n	800308a <setup+0x476>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1Curve_buff, kd1Curve_buff);
 8003076:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <setup+0x5c0>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <setup+0x5b8>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4955      	ldr	r1, [pc, #340]	; (80031d8 <setup+0x5c4>)
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe f916 	bl	80012b4 <lcdRowPrintf>
 8003088:	e00d      	b.n	80030a6 <setup+0x492>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <setup+0x5c0>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <setup+0x5b4>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <setup+0x5b8>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	4944      	ldr	r1, [pc, #272]	; (80031b0 <setup+0x59c>)
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7fe f907 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1Curve_buff, 1 );
 80030a6:	2101      	movs	r1, #1
 80030a8:	4847      	ldr	r0, [pc, #284]	; (80031c8 <setup+0x5b4>)
 80030aa:	f000 fb23 	bl	80036f4 <dataTuningUD>
					break;
 80030ae:	e028      	b.n	8003102 <setup+0x4ee>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <setup+0x588>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b8:	d302      	bcc.n	80030c0 <setup+0x4ac>
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <setup+0x588>)
 80030bc:	2200      	movs	r2, #0
 80030be:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <setup+0x588>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2bf9      	cmp	r3, #249	; 0xf9
 80030c6:	d809      	bhi.n	80030dc <setup+0x4c8>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1Curve_buff, ki1Curve_buff);
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <setup+0x5c0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <setup+0x5b4>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4935      	ldr	r1, [pc, #212]	; (80031a8 <setup+0x594>)
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fe f8ed 	bl	80012b4 <lcdRowPrintf>
 80030da:	e00d      	b.n	80030f8 <setup+0x4e4>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <setup+0x5c0>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <setup+0x5b4>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <setup+0x5b8>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	460b      	mov	r3, r1
 80030f0:	492f      	ldr	r1, [pc, #188]	; (80031b0 <setup+0x59c>)
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fe f8de 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1Curve_buff, 1 );
 80030f8:	2101      	movs	r1, #1
 80030fa:	4834      	ldr	r0, [pc, #208]	; (80031cc <setup+0x5b8>)
 80030fc:	f000 fafa 	bl	80036f4 <dataTuningUD>
					break;
 8003100:	bf00      	nop
			break;
 8003102:	e289      	b.n	8003618 <setup+0xa04>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x4:
			lcdRowPrintf(UPROW, "kp ki kd");
 8003104:	492b      	ldr	r1, [pc, #172]	; (80031b4 <setup+0x5a0>)
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f8d4 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			dataTuningLR( &pattern_gain, 1 );
 800310c:	2101      	movs	r1, #1
 800310e:	482d      	ldr	r0, [pc, #180]	; (80031c4 <setup+0x5b0>)
 8003110:	f000 fb74 	bl	80037fc <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <setup+0x5b0>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d103      	bne.n	8003124 <setup+0x510>
 800311c:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <setup+0x5b0>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e006      	b.n	8003132 <setup+0x51e>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <setup+0x5b0>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <setup+0x51e>
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <setup+0x5b0>)
 800312e:	2203      	movs	r2, #3
 8003130:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <setup+0x5b0>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d07f      	beq.n	800323a <setup+0x626>
 800313a:	2b03      	cmp	r3, #3
 800313c:	f300 826e 	bgt.w	800361c <setup+0xa08>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <setup+0x536>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d04f      	beq.n	80031e8 <setup+0x5d4>
					}
					
					dataTuningUD ( &kd2_buff, 1 );
					break;
			}
			break;
 8003148:	e268      	b.n	800361c <setup+0xa08>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <setup+0x588>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003152:	d302      	bcc.n	800315a <setup+0x546>
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <setup+0x588>)
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <setup+0x588>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2bf9      	cmp	r3, #249	; 0xf9
 8003160:	d809      	bhi.n	8003176 <setup+0x562>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <setup+0x5c8>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <setup+0x5cc>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4918      	ldr	r1, [pc, #96]	; (80031d0 <setup+0x5bc>)
 800316e:	2001      	movs	r0, #1
 8003170:	f7fe f8a0 	bl	80012b4 <lcdRowPrintf>
 8003174:	e00d      	b.n	8003192 <setup+0x57e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <setup+0x5d0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <setup+0x5c8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <setup+0x5cc>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	4909      	ldr	r1, [pc, #36]	; (80031b0 <setup+0x59c>)
 800318c:	2001      	movs	r0, #1
 800318e:	f7fe f891 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp2_buff, 1 );
 8003192:	2101      	movs	r1, #1
 8003194:	4813      	ldr	r0, [pc, #76]	; (80031e4 <setup+0x5d0>)
 8003196:	f000 faad 	bl	80036f4 <dataTuningUD>
					break;
 800319a:	e077      	b.n	800328c <setup+0x678>
 800319c:	200006ea 	.word	0x200006ea
 80031a0:	2000001a 	.word	0x2000001a
 80031a4:	20000330 	.word	0x20000330
 80031a8:	0800e288 	.word	0x0800e288
 80031ac:	2000001b 	.word	0x2000001b
 80031b0:	0800e270 	.word	0x0800e270
 80031b4:	0800e258 	.word	0x0800e258
 80031b8:	200006f8 	.word	0x200006f8
 80031bc:	20000322 	.word	0x20000322
 80031c0:	20000570 	.word	0x20000570
 80031c4:	20000027 	.word	0x20000027
 80031c8:	20000331 	.word	0x20000331
 80031cc:	2000001d 	.word	0x2000001d
 80031d0:	0800e264 	.word	0x0800e264
 80031d4:	2000001c 	.word	0x2000001c
 80031d8:	0800e27c 	.word	0x0800e27c
 80031dc:	20000031 	.word	0x20000031
 80031e0:	20000731 	.word	0x20000731
 80031e4:	20000030 	.word	0x20000030
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80031e8:	4baa      	ldr	r3, [pc, #680]	; (8003494 <setup+0x880>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031f0:	d302      	bcc.n	80031f8 <setup+0x5e4>
 80031f2:	4ba8      	ldr	r3, [pc, #672]	; (8003494 <setup+0x880>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80031f8:	4ba6      	ldr	r3, [pc, #664]	; (8003494 <setup+0x880>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	2bf9      	cmp	r3, #249	; 0xf9
 80031fe:	d809      	bhi.n	8003214 <setup+0x600>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8003200:	4ba5      	ldr	r3, [pc, #660]	; (8003498 <setup+0x884>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4ba5      	ldr	r3, [pc, #660]	; (800349c <setup+0x888>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	49a5      	ldr	r1, [pc, #660]	; (80034a0 <setup+0x88c>)
 800320c:	2001      	movs	r0, #1
 800320e:	f7fe f851 	bl	80012b4 <lcdRowPrintf>
 8003212:	e00d      	b.n	8003230 <setup+0x61c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003214:	4ba0      	ldr	r3, [pc, #640]	; (8003498 <setup+0x884>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4ba2      	ldr	r3, [pc, #648]	; (80034a4 <setup+0x890>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4b9e      	ldr	r3, [pc, #632]	; (800349c <setup+0x888>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	460b      	mov	r3, r1
 8003228:	499f      	ldr	r1, [pc, #636]	; (80034a8 <setup+0x894>)
 800322a:	2001      	movs	r0, #1
 800322c:	f7fe f842 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki2_buff, 1 );
 8003230:	2101      	movs	r1, #1
 8003232:	489c      	ldr	r0, [pc, #624]	; (80034a4 <setup+0x890>)
 8003234:	f000 fa5e 	bl	80036f4 <dataTuningUD>
					break;
 8003238:	e028      	b.n	800328c <setup+0x678>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800323a:	4b96      	ldr	r3, [pc, #600]	; (8003494 <setup+0x880>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003242:	d302      	bcc.n	800324a <setup+0x636>
 8003244:	4b93      	ldr	r3, [pc, #588]	; (8003494 <setup+0x880>)
 8003246:	2200      	movs	r2, #0
 8003248:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <setup+0x880>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	2bf9      	cmp	r3, #249	; 0xf9
 8003250:	d809      	bhi.n	8003266 <setup+0x652>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 8003252:	4b91      	ldr	r3, [pc, #580]	; (8003498 <setup+0x884>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <setup+0x890>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4993      	ldr	r1, [pc, #588]	; (80034ac <setup+0x898>)
 800325e:	2001      	movs	r0, #1
 8003260:	f7fe f828 	bl	80012b4 <lcdRowPrintf>
 8003264:	e00d      	b.n	8003282 <setup+0x66e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003266:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <setup+0x884>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	4b8d      	ldr	r3, [pc, #564]	; (80034a4 <setup+0x890>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	4b8a      	ldr	r3, [pc, #552]	; (800349c <setup+0x888>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	460b      	mov	r3, r1
 800327a:	498b      	ldr	r1, [pc, #556]	; (80034a8 <setup+0x894>)
 800327c:	2001      	movs	r0, #1
 800327e:	f7fe f819 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd2_buff, 1 );
 8003282:	2101      	movs	r1, #1
 8003284:	4885      	ldr	r0, [pc, #532]	; (800349c <setup+0x888>)
 8003286:	f000 fa35 	bl	80036f4 <dataTuningUD>
					break;
 800328a:	bf00      	nop
			break;
 800328c:	e1c6      	b.n	800361c <setup+0xa08>
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x5:
			dataTuningLR( &pattern_sensor, 1 );
 800328e:	2101      	movs	r1, #1
 8003290:	4887      	ldr	r0, [pc, #540]	; (80034b0 <setup+0x89c>)
 8003292:	f000 fab3 	bl	80037fc <dataTuningLR>
			
			if ( pattern_sensor == 9 ) pattern_sensor = 1;
 8003296:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <setup+0x89c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b09      	cmp	r3, #9
 800329c:	d103      	bne.n	80032a6 <setup+0x692>
 800329e:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <setup+0x89c>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e006      	b.n	80032b4 <setup+0x6a0>
			else if ( pattern_sensor == 0 ) pattern_sensor = 8;
 80032a6:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <setup+0x89c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <setup+0x6a0>
 80032ae:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <setup+0x89c>)
 80032b0:	2208      	movs	r2, #8
 80032b2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80032b4:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <setup+0x8a0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

			switch( pattern_sensor ) {
 80032be:	4b7c      	ldr	r3, [pc, #496]	; (80034b0 <setup+0x89c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	f200 81ab 	bhi.w	8003620 <setup+0xa0c>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <setup+0x6bc>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f1 	.word	0x080032f1
 80032d4:	08003339 	.word	0x08003339
 80032d8:	08003367 	.word	0x08003367
 80032dc:	080033b7 	.word	0x080033b7
 80032e0:	080033d1 	.word	0x080033d1
 80032e4:	08003423 	.word	0x08003423
 80032e8:	0800359f 	.word	0x0800359f
 80032ec:	080035cd 	.word	0x080035cd
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 80032f0:	4971      	ldr	r1, [pc, #452]	; (80034b8 <setup+0x8a4>)
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fd ffde 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 80032f8:	4970      	ldr	r1, [pc, #448]	; (80034bc <setup+0x8a8>)
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7fd ffda 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8003300:	2300      	movs	r3, #0
 8003302:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 8003304:	4b6e      	ldr	r3, [pc, #440]	; (80034c0 <setup+0x8ac>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b02      	cmp	r3, #2
 800330a:	f040 8171 	bne.w	80035f0 <setup+0x9dc>
						cnt_led = 0x00;
 800330e:	2300      	movs	r3, #0
 8003310:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 8003312:	e00a      	b.n	800332a <setup+0x716>
							ledOut( cnt_led );
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fadc 	bl	80018d4 <ledOut>
							cnt_led++;
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	3301      	adds	r3, #1
 8003320:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 8003322:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003326:	f001 fa6d 	bl	8004804 <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b07      	cmp	r3, #7
 800332e:	d9f1      	bls.n	8003314 <setup+0x700>
						}
						ledOut( 0 );
 8003330:	2000      	movs	r0, #0
 8003332:	f7fe facf 	bl	80018d4 <ledOut>
					}
					break;
 8003336:	e15b      	b.n	80035f0 <setup+0x9dc>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 8003338:	4b62      	ldr	r3, [pc, #392]	; (80034c4 <setup+0x8b0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4962      	ldr	r1, [pc, #392]	; (80034c8 <setup+0x8b4>)
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd ffb7 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 8003346:	4b61      	ldr	r3, [pc, #388]	; (80034cc <setup+0x8b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4960      	ldr	r1, [pc, #384]	; (80034d0 <setup+0x8bc>)
 800334e:	2001      	movs	r0, #1
 8003350:	f7fd ffb0 	bl	80012b4 <lcdRowPrintf>

					if(swValTact == SW_PUSH) encTotalN = 0;
 8003354:	4b5a      	ldr	r3, [pc, #360]	; (80034c0 <setup+0x8ac>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	f040 814b 	bne.w	80035f4 <setup+0x9e0>
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <setup+0x8b8>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
					break;
 8003364:	e146      	b.n	80035f4 <setup+0x9e0>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 8003366:	495b      	ldr	r1, [pc, #364]	; (80034d4 <setup+0x8c0>)
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd ffa3 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <setup+0x8c4>)
 8003370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003374:	461a      	mov	r2, r3
 8003376:	4959      	ldr	r1, [pc, #356]	; (80034dc <setup+0x8c8>)
 8003378:	2001      	movs	r0, #1
 800337a:	f7fd ff9b 	bl	80012b4 <lcdRowPrintf>
					// モータ回転
					dataTuningUD ( &motorTestPwm, 100 );
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	4855      	ldr	r0, [pc, #340]	; (80034d8 <setup+0x8c4>)
 8003382:	f000 f9b7 	bl	80036f4 <dataTuningUD>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <setup+0x8cc>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10a      	bne.n	80033a4 <setup+0x790>
 800338e:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <setup+0x8c4>)
 8003390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003394:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <setup+0x8c4>)
 8003396:	f9b2 2000 	ldrsh.w	r2, [r2]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fb93 	bl	8002ac8 <motorPwmOut>
 80033a2:	e003      	b.n	80033ac <setup+0x798>
					else motorPwmOut(0, 0);
 80033a4:	2100      	movs	r1, #0
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7ff fb8e 	bl	8002ac8 <motorPwmOut>
										
					data_select( &motor_test, SW_PUSH );
 80033ac:	2102      	movs	r1, #2
 80033ae:	484c      	ldr	r0, [pc, #304]	; (80034e0 <setup+0x8cc>)
 80033b0:	f000 f96a 	bl	8003688 <data_select>
					break;
 80033b4:	e11f      	b.n	80035f6 <setup+0x9e2>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 80033b6:	494b      	ldr	r1, [pc, #300]	; (80034e4 <setup+0x8d0>)
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd ff7b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkerSensor());
 80033be:	f7ff faf9 	bl	80029b4 <getMarkerSensor>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4948      	ldr	r1, [pc, #288]	; (80034e8 <setup+0x8d4>)
 80033c8:	2001      	movs	r0, #1
 80033ca:	f7fd ff73 	bl	80012b4 <lcdRowPrintf>
					break;
 80033ce:	e112      	b.n	80035f6 <setup+0x9e2>

				case 5:
					// 電流センサ
					lcdRowPrintf(UPROW, " %3.1lfmA", CurrntR);
 80033d0:	4b46      	ldr	r3, [pc, #280]	; (80034ec <setup+0x8d8>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	4946      	ldr	r1, [pc, #280]	; (80034f0 <setup+0x8dc>)
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd ff6b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, " %3.1lfmA", CurrntL);
 80033de:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <setup+0x8e0>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	4942      	ldr	r1, [pc, #264]	; (80034f0 <setup+0x8dc>)
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7fd ff64 	bl	80012b4 <lcdRowPrintf>

					motorTestPwm = 80;
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <setup+0x8c4>)
 80033ee:	2250      	movs	r2, #80	; 0x50
 80033f0:	801a      	strh	r2, [r3, #0]
					data_select( &motor_test, SW_PUSH );
 80033f2:	2102      	movs	r1, #2
 80033f4:	483a      	ldr	r0, [pc, #232]	; (80034e0 <setup+0x8cc>)
 80033f6:	f000 f947 	bl	8003688 <data_select>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <setup+0x8cc>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10a      	bne.n	8003418 <setup+0x804>
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <setup+0x8c4>)
 8003404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003408:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <setup+0x8c4>)
 800340a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fb59 	bl	8002ac8 <motorPwmOut>
					else motorPwmOut(0, 0);
					break;
 8003416:	e0ee      	b.n	80035f6 <setup+0x9e2>
					else motorPwmOut(0, 0);
 8003418:	2100      	movs	r1, #0
 800341a:	2000      	movs	r0, #0
 800341c:	f7ff fb54 	bl	8002ac8 <motorPwmOut>
					break;
 8003420:	e0e9      	b.n	80035f6 <setup+0x9e2>

				case 6:
					// ラインセンサ
					dataTuningUD( &pattern_sensor_line, 1 );
 8003422:	2101      	movs	r1, #1
 8003424:	4834      	ldr	r0, [pc, #208]	; (80034f8 <setup+0x8e4>)
 8003426:	f000 f965 	bl	80036f4 <dataTuningUD>
					if ( pattern_sensor == 7 ) pattern_sensor = 1;
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <setup+0x89c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b07      	cmp	r3, #7
 8003430:	d103      	bne.n	800343a <setup+0x826>
 8003432:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <setup+0x89c>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e006      	b.n	8003448 <setup+0x834>
					else if ( pattern_sensor == 0 ) pattern_sensor = 6;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <setup+0x89c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <setup+0x834>
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <setup+0x89c>)
 8003444:	2206      	movs	r2, #6
 8003446:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_line ) {
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <setup+0x8e4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	2b05      	cmp	r3, #5
 8003450:	f200 80a5 	bhi.w	800359e <setup+0x98a>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <setup+0x848>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003475 	.word	0x08003475
 8003460:	08003509 	.word	0x08003509
 8003464:	08003527 	.word	0x08003527
 8003468:	08003545 	.word	0x08003545
 800346c:	08003563 	.word	0x08003563
 8003470:	08003581 	.word	0x08003581
						case 1:
							lcdRowPrintf(UPROW, "L1  %4d",lSensor[0]);
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <setup+0x8e8>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4921      	ldr	r1, [pc, #132]	; (8003500 <setup+0x8ec>)
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd ff19 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L2  %4d",lSensor[1]);
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <setup+0x8e8>)
 8003484:	885b      	ldrh	r3, [r3, #2]
 8003486:	461a      	mov	r2, r3
 8003488:	491e      	ldr	r1, [pc, #120]	; (8003504 <setup+0x8f0>)
 800348a:	2001      	movs	r0, #1
 800348c:	f7fd ff12 	bl	80012b4 <lcdRowPrintf>
							break;
 8003490:	e085      	b.n	800359e <setup+0x98a>
 8003492:	bf00      	nop
 8003494:	200006ea 	.word	0x200006ea
 8003498:	20000030 	.word	0x20000030
 800349c:	20000731 	.word	0x20000731
 80034a0:	0800e27c 	.word	0x0800e27c
 80034a4:	20000031 	.word	0x20000031
 80034a8:	0800e270 	.word	0x0800e270
 80034ac:	0800e288 	.word	0x0800e288
 80034b0:	20000024 	.word	0x20000024
 80034b4:	20000570 	.word	0x20000570
 80034b8:	0800e294 	.word	0x0800e294
 80034bc:	0800e1fc 	.word	0x0800e1fc
 80034c0:	200006f9 	.word	0x200006f9
 80034c4:	2000028c 	.word	0x2000028c
 80034c8:	0800e2a0 	.word	0x0800e2a0
 80034cc:	20000294 	.word	0x20000294
 80034d0:	0800e2a8 	.word	0x0800e2a8
 80034d4:	0800e2b0 	.word	0x0800e2b0
 80034d8:	20000028 	.word	0x20000028
 80034dc:	0800e2bc 	.word	0x0800e2bc
 80034e0:	200006f7 	.word	0x200006f7
 80034e4:	0800e2c8 	.word	0x0800e2c8
 80034e8:	0800e2d4 	.word	0x0800e2d4
 80034ec:	20000258 	.word	0x20000258
 80034f0:	0800e2e0 	.word	0x0800e2e0
 80034f4:	20000250 	.word	0x20000250
 80034f8:	20000025 	.word	0x20000025
 80034fc:	200002cc 	.word	0x200002cc
 8003500:	0800e2ec 	.word	0x0800e2ec
 8003504:	0800e2f4 	.word	0x0800e2f4

						case 2:
							lcdRowPrintf(UPROW, "L3  %4d",lSensor[2]);
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <setup+0xa18>)
 800350a:	889b      	ldrh	r3, [r3, #4]
 800350c:	461a      	mov	r2, r3
 800350e:	4948      	ldr	r1, [pc, #288]	; (8003630 <setup+0xa1c>)
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fecf 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L4  %4d",lSensor[3]);
 8003516:	4b45      	ldr	r3, [pc, #276]	; (800362c <setup+0xa18>)
 8003518:	88db      	ldrh	r3, [r3, #6]
 800351a:	461a      	mov	r2, r3
 800351c:	4945      	ldr	r1, [pc, #276]	; (8003634 <setup+0xa20>)
 800351e:	2001      	movs	r0, #1
 8003520:	f7fd fec8 	bl	80012b4 <lcdRowPrintf>
							break;
 8003524:	e03b      	b.n	800359e <setup+0x98a>
						case 3:
							lcdRowPrintf(UPROW, "L5  %4d",lSensor[4]);
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <setup+0xa18>)
 8003528:	891b      	ldrh	r3, [r3, #8]
 800352a:	461a      	mov	r2, r3
 800352c:	4942      	ldr	r1, [pc, #264]	; (8003638 <setup+0xa24>)
 800352e:	2000      	movs	r0, #0
 8003530:	f7fd fec0 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L6  %4d",lSensor[5]);
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <setup+0xa18>)
 8003536:	895b      	ldrh	r3, [r3, #10]
 8003538:	461a      	mov	r2, r3
 800353a:	4940      	ldr	r1, [pc, #256]	; (800363c <setup+0xa28>)
 800353c:	2001      	movs	r0, #1
 800353e:	f7fd feb9 	bl	80012b4 <lcdRowPrintf>
							break;
 8003542:	e02c      	b.n	800359e <setup+0x98a>
						
						case 4:
							lcdRowPrintf(UPROW, "R1  %4d",lSensor[11]);
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <setup+0xa18>)
 8003546:	8adb      	ldrh	r3, [r3, #22]
 8003548:	461a      	mov	r2, r3
 800354a:	493d      	ldr	r1, [pc, #244]	; (8003640 <setup+0xa2c>)
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd feb1 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R2  %4d",lSensor[10]);
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <setup+0xa18>)
 8003554:	8a9b      	ldrh	r3, [r3, #20]
 8003556:	461a      	mov	r2, r3
 8003558:	493a      	ldr	r1, [pc, #232]	; (8003644 <setup+0xa30>)
 800355a:	2001      	movs	r0, #1
 800355c:	f7fd feaa 	bl	80012b4 <lcdRowPrintf>
							break;
 8003560:	e01d      	b.n	800359e <setup+0x98a>

						case 5:
							lcdRowPrintf(UPROW, "R3  %4d",lSensor[9]);
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <setup+0xa18>)
 8003564:	8a5b      	ldrh	r3, [r3, #18]
 8003566:	461a      	mov	r2, r3
 8003568:	4937      	ldr	r1, [pc, #220]	; (8003648 <setup+0xa34>)
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd fea2 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R4  %4d",lSensor[8]);
 8003570:	4b2e      	ldr	r3, [pc, #184]	; (800362c <setup+0xa18>)
 8003572:	8a1b      	ldrh	r3, [r3, #16]
 8003574:	461a      	mov	r2, r3
 8003576:	4935      	ldr	r1, [pc, #212]	; (800364c <setup+0xa38>)
 8003578:	2001      	movs	r0, #1
 800357a:	f7fd fe9b 	bl	80012b4 <lcdRowPrintf>
							break;
 800357e:	e00e      	b.n	800359e <setup+0x98a>

						case 6:
							lcdRowPrintf(UPROW, "R5  %4d",lSensor[7]);
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <setup+0xa18>)
 8003582:	89db      	ldrh	r3, [r3, #14]
 8003584:	461a      	mov	r2, r3
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <setup+0xa3c>)
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fe93 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R6  %4d",lSensor[6]);
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <setup+0xa18>)
 8003590:	899b      	ldrh	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	492f      	ldr	r1, [pc, #188]	; (8003654 <setup+0xa40>)
 8003596:	2001      	movs	r0, #1
 8003598:	f7fd fe8c 	bl	80012b4 <lcdRowPrintf>
							break;
 800359c:	bf00      	nop
					}

				case 7:
					// PID出力のPWM
					targetSpeed = 120;
 800359e:	492e      	ldr	r1, [pc, #184]	; (8003658 <setup+0xa44>)
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <setup+0xa48>)
 80035a6:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <setup+0xa4c>)
 80035ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b0:	461a      	mov	r2, r3
 80035b2:	492c      	ldr	r1, [pc, #176]	; (8003664 <setup+0xa50>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fd fe7d 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",speedPwm);
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <setup+0xa54>)
 80035bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c0:	461a      	mov	r2, r3
 80035c2:	492a      	ldr	r1, [pc, #168]	; (800366c <setup+0xa58>)
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7fd fe75 	bl	80012b4 <lcdRowPrintf>
					break;
 80035ca:	e014      	b.n	80035f6 <setup+0x9e2>
				case 8:
					// 仮想センサ角度
					targetSpeed = 120;
 80035cc:	4922      	ldr	r1, [pc, #136]	; (8003658 <setup+0xa44>)
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <setup+0xa48>)
 80035d4:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "Anglesen");
 80035d8:	4925      	ldr	r1, [pc, #148]	; (8003670 <setup+0xa5c>)
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fd fe6a 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.1lf", angleSensor);
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <setup+0xa60>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	4924      	ldr	r1, [pc, #144]	; (8003678 <setup+0xa64>)
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7fd fe63 	bl	80012b4 <lcdRowPrintf>
					// lcdRowPrintf(LOWROW, "      %2d", angleSensor);
					break;
 80035ee:	e002      	b.n	80035f6 <setup+0x9e2>
					break;
 80035f0:	bf00      	nop
 80035f2:	e015      	b.n	8003620 <setup+0xa0c>
					break;
 80035f4:	bf00      	nop
			} // switch
			break;
 80035f6:	e013      	b.n	8003620 <setup+0xa0c>

	default:
		lcdRowPrintf(UPROW, "%#x     ", swValRotary);
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <setup+0xa68>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4920      	ldr	r1, [pc, #128]	; (8003680 <setup+0xa6c>)
 8003600:	2000      	movs	r0, #0
 8003602:	f7fd fe57 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 8003606:	491f      	ldr	r1, [pc, #124]	; (8003684 <setup+0xa70>)
 8003608:	2001      	movs	r0, #1
 800360a:	f7fd fe53 	bl	80012b4 <lcdRowPrintf>
		break;
 800360e:	e008      	b.n	8003622 <setup+0xa0e>
			break;
 8003610:	bf00      	nop
 8003612:	e006      	b.n	8003622 <setup+0xa0e>
			break;
 8003614:	bf00      	nop
 8003616:	e004      	b.n	8003622 <setup+0xa0e>
			break;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <setup+0xa0e>
			break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <setup+0xa0e>
			break;
 8003620:	bf00      	nop
	} // switch
	// } // cntSW
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200002cc 	.word	0x200002cc
 8003630:	0800e2fc 	.word	0x0800e2fc
 8003634:	0800e304 	.word	0x0800e304
 8003638:	0800e30c 	.word	0x0800e30c
 800363c:	0800e314 	.word	0x0800e314
 8003640:	0800e31c 	.word	0x0800e31c
 8003644:	0800e324 	.word	0x0800e324
 8003648:	0800e32c 	.word	0x0800e32c
 800364c:	0800e334 	.word	0x0800e334
 8003650:	0800e33c 	.word	0x0800e33c
 8003654:	0800e344 	.word	0x0800e344
 8003658:	20000710 	.word	0x20000710
 800365c:	405e0000 	.word	0x405e0000
 8003660:	20000322 	.word	0x20000322
 8003664:	0800e34c 	.word	0x0800e34c
 8003668:	20000708 	.word	0x20000708
 800366c:	0800e354 	.word	0x0800e354
 8003670:	0800e35c 	.word	0x0800e35c
 8003674:	20000318 	.word	0x20000318
 8003678:	0800e368 	.word	0x0800e368
 800367c:	200006fa 	.word	0x200006fa
 8003680:	0800e374 	.word	0x0800e374
 8003684:	0800e380 	.word	0x0800e380

08003688 <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <data_select+0x64>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	429a      	cmp	r2, r3
 800369c:	d11d      	bne.n	80036da <data_select+0x52>
		if ( *data == 1 && push == 0) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10a      	bne.n	80036bc <data_select+0x34>
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <data_select+0x68>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <data_select+0x34>
			push = 1;
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <data_select+0x68>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
			*data = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 80036ba:	e011      	b.n	80036e0 <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <data_select+0x58>
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <data_select+0x68>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <data_select+0x58>
			push = 1;
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <data_select+0x68>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
			*data = 1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
}
 80036d8:	e002      	b.n	80036e0 <data_select+0x58>
		push = 0;
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <data_select+0x68>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	200006f9 	.word	0x200006f9
 80036f0:	200006f6 	.word	0x200006f6

080036f4 <dataTuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( void *data, uint8_t add )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <dataTuningUD+0xf8>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	2b31      	cmp	r3, #49	; 0x31
 800370a:	d968      	bls.n	80037de <dataTuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 800370c:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <dataTuningUD+0xfc>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d003      	beq.n	800371c <dataTuningUD+0x28>
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <dataTuningUD+0xfc>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d155      	bne.n	80037c8 <dataTuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <dataTuningUD+0x100>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <dataTuningUD+0x100>)
 8003726:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8003728:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <dataTuningUD+0xfc>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d123      	bne.n	8003778 <dataTuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8003730:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <dataTuningUD+0x100>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	2b13      	cmp	r3, #19
 8003736:	d90b      	bls.n	8003750 <dataTuningUD+0x5c>
					*data2 += add;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373e:	b29a      	uxth	r2, r3
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	b29b      	uxth	r3, r3
 8003744:	4413      	add	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21a      	sxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800374e:	e042      	b.n	80037d6 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <dataTuningUD+0x104>)
 8003752:	f993 3000 	ldrsb.w	r3, [r3]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d13d      	bne.n	80037d6 <dataTuningUD+0xe2>
					pushUD = 1;
 800375a:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <dataTuningUD+0x104>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003766:	b29a      	uxth	r2, r3
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	b29b      	uxth	r3, r3
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	b21a      	sxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8003776:	e02e      	b.n	80037d6 <dataTuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <dataTuningUD+0xfc>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b05      	cmp	r3, #5
 800377e:	d12a      	bne.n	80037d6 <dataTuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <dataTuningUD+0x100>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	2b13      	cmp	r3, #19
 8003786:	d90b      	bls.n	80037a0 <dataTuningUD+0xac>
					*data2 -= add;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378e:	b29a      	uxth	r2, r3
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	b29b      	uxth	r3, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	b21a      	sxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800379e:	e01a      	b.n	80037d6 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <dataTuningUD+0x104>)
 80037a2:	f993 3000 	ldrsb.w	r3, [r3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <dataTuningUD+0xe2>
					pushUD = 1;
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <dataTuningUD+0x104>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	b21a      	sxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80037c6:	e006      	b.n	80037d6 <dataTuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <dataTuningUD+0x104>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <dataTuningUD+0x100>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	e000      	b.n	80037d8 <dataTuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 80037d6:	bf00      	nop
		}
		cntSetup2 = 0;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <dataTuningUD+0xf8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	801a      	strh	r2, [r3, #0]
	}
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	200006ec 	.word	0x200006ec
 80037f0:	200006f9 	.word	0x200006f9
 80037f4:	200006f0 	.word	0x200006f0
 80037f8:	200006f5 	.word	0x200006f5

080037fc <dataTuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( void *data, uint8_t add )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 800380c:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <dataTuningLR+0xf8>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2b31      	cmp	r3, #49	; 0x31
 8003812:	d968      	bls.n	80038e6 <dataTuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 8003814:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <dataTuningLR+0xfc>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d003      	beq.n	8003824 <dataTuningLR+0x28>
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <dataTuningLR+0xfc>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d155      	bne.n	80038d0 <dataTuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <dataTuningLR+0x100>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b33      	ldr	r3, [pc, #204]	; (80038fc <dataTuningLR+0x100>)
 800382e:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003830:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <dataTuningLR+0xfc>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d123      	bne.n	8003880 <dataTuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8003838:	4b30      	ldr	r3, [pc, #192]	; (80038fc <dataTuningLR+0x100>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	2b13      	cmp	r3, #19
 800383e:	d90b      	bls.n	8003858 <dataTuningLR+0x5c>
					*data2 += add;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003846:	b29a      	uxth	r2, r3
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4413      	add	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	b21a      	sxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003856:	e042      	b.n	80038de <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <dataTuningLR+0x104>)
 800385a:	f993 3000 	ldrsb.w	r3, [r3]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d13d      	bne.n	80038de <dataTuningLR+0xe2>
					pushLR = 1;
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <dataTuningLR+0x104>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386e:	b29a      	uxth	r2, r3
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4413      	add	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	b21a      	sxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800387e:	e02e      	b.n	80038de <dataTuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <dataTuningLR+0xfc>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d12a      	bne.n	80038de <dataTuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <dataTuningLR+0x100>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2b13      	cmp	r3, #19
 800388e:	d90b      	bls.n	80038a8 <dataTuningLR+0xac>
					*data2 -= add;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	b29a      	uxth	r2, r3
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	b29b      	uxth	r3, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80038a6:	e01a      	b.n	80038de <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <dataTuningLR+0x104>)
 80038aa:	f993 3000 	ldrsb.w	r3, [r3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <dataTuningLR+0xe2>
					pushLR = 1;
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <dataTuningLR+0x104>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80038ce:	e006      	b.n	80038de <dataTuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <dataTuningLR+0x104>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <dataTuningLR+0x100>)
 80038d8:	2200      	movs	r2, #0
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e000      	b.n	80038e0 <dataTuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 80038de:	bf00      	nop
		}
		cntSetup3 = 0;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <dataTuningLR+0xf8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]
	}
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200006ee 	.word	0x200006ee
 80038f8:	200006f9 	.word	0x200006f9
 80038fc:	200006f2 	.word	0x200006f2
 8003900:	200006f4 	.word	0x200006f4

08003904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_MspInit+0x4c>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <HAL_MspInit+0x4c>)
 8003914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003918:	6453      	str	r3, [r2, #68]	; 0x44
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_MspInit+0x4c>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_MspInit+0x4c>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_MspInit+0x4c>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_MspInit+0x4c>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003942:	2007      	movs	r0, #7
 8003944:	f001 fdd6 	bl	80054f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a53      	ldr	r2, [pc, #332]	; (8003ac0 <HAL_ADC_MspInit+0x16c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d172      	bne.n	8003a5c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80039ca:	233f      	movs	r3, #63	; 0x3f
 80039cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ce:	2303      	movs	r3, #3
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	4619      	mov	r1, r3
 80039dc:	483a      	ldr	r0, [pc, #232]	; (8003ac8 <HAL_ADC_MspInit+0x174>)
 80039de:	f002 f93b 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80039e2:	23ff      	movs	r3, #255	; 0xff
 80039e4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e6:	2303      	movs	r3, #3
 80039e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	4619      	mov	r1, r3
 80039f4:	4835      	ldr	r0, [pc, #212]	; (8003acc <HAL_ADC_MspInit+0x178>)
 80039f6:	f002 f92f 	bl	8005c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 80039fc:	4a35      	ldr	r2, [pc, #212]	; (8003ad4 <HAL_ADC_MspInit+0x180>)
 80039fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a00:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0c:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a3e:	4824      	ldr	r0, [pc, #144]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a40:	f001 fd9a 	bl	8005578 <HAL_DMA_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003a4a:	f7fe ffad 	bl	80029a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
 8003a54:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_ADC_MspInit+0x17c>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a5a:	e02c      	b.n	8003ab6 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_ADC_MspInit+0x184>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d127      	bne.n	8003ab6 <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_ADC_MspInit+0x170>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8003a9e:	2331      	movs	r3, #49	; 0x31
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aaa:	f107 031c 	add.w	r3, r7, #28
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <HAL_ADC_MspInit+0x174>)
 8003ab2:	f002 f8d1 	bl	8005c58 <HAL_GPIO_Init>
}
 8003ab6:	bf00      	nop
 8003ab8:	3730      	adds	r7, #48	; 0x30
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40012000 	.word	0x40012000
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	200003c4 	.word	0x200003c4
 8003ad4:	40026410 	.word	0x40026410
 8003ad8:	40012100 	.word	0x40012100

08003adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_I2C_MspInit+0x84>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d12c      	bne.n	8003b58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b20:	2312      	movs	r3, #18
 8003b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	4619      	mov	r1, r3
 8003b36:	480c      	ldr	r0, [pc, #48]	; (8003b68 <HAL_I2C_MspInit+0x8c>)
 8003b38:	f002 f88e 	bl	8005c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b58:	bf00      	nop
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40005400 	.word	0x40005400
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020400 	.word	0x40020400

08003b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	; 0x30
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a42      	ldr	r2, [pc, #264]	; (8003c94 <HAL_SPI_MspInit+0x128>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d12d      	bne.n	8003bea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003bc6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bd8:	2305      	movs	r3, #5
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	4619      	mov	r1, r3
 8003be2:	482e      	ldr	r0, [pc, #184]	; (8003c9c <HAL_SPI_MspInit+0x130>)
 8003be4:	f002 f838 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003be8:	e04f      	b.n	8003c8a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <HAL_SPI_MspInit+0x134>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d14a      	bne.n	8003c8a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	6413      	str	r3, [r2, #64]	; 0x40
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <HAL_SPI_MspInit+0x12c>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c54:	2303      	movs	r3, #3
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	4619      	mov	r1, r3
 8003c62:	480e      	ldr	r0, [pc, #56]	; (8003c9c <HAL_SPI_MspInit+0x130>)
 8003c64:	f001 fff8 	bl	8005c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	4807      	ldr	r0, [pc, #28]	; (8003ca4 <HAL_SPI_MspInit+0x138>)
 8003c86:	f001 ffe7 	bl	8005c58 <HAL_GPIO_Init>
}
 8003c8a:	bf00      	nop
 8003c8c:	3730      	adds	r7, #48	; 0x30
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40003800 	.word	0x40003800
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020400 	.word	0x40020400
 8003ca0:	40003c00 	.word	0x40003c00
 8003ca4:	40020800 	.word	0x40020800

08003ca8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_TIM_PWM_MspInit+0x70>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003cd6:	e01a      	b.n	8003d0e <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d115      	bne.n	8003d0e <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_TIM_PWM_MspInit+0x74>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	201c      	movs	r0, #28
 8003d04:	f001 fc01 	bl	800550a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d08:	201c      	movs	r0, #28
 8003d0a:	f001 fc1a 	bl	8005542 <HAL_NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a32      	ldr	r2, [pc, #200]	; (8003e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d12c      	bne.n	8003d9c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d7a:	23c0      	movs	r3, #192	; 0xc0
 8003d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d86:	2300      	movs	r3, #0
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d8e:	f107 031c 	add.w	r3, r7, #28
 8003d92:	4619      	mov	r1, r3
 8003d94:	481e      	ldr	r0, [pc, #120]	; (8003e10 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003d96:	f001 ff5f 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d9a:	e030      	b.n	8003dfe <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d12b      	bne.n	8003dfe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dde:	23c0      	movs	r3, #192	; 0xc0
 8003de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dee:	2302      	movs	r3, #2
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	4619      	mov	r1, r3
 8003df8:	4807      	ldr	r0, [pc, #28]	; (8003e18 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003dfa:	f001 ff2d 	bl	8005c58 <HAL_GPIO_Init>
}
 8003dfe:	bf00      	nop
 8003e00:	3730      	adds	r7, #48	; 0x30
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40020800 	.word	0x40020800
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40020400 	.word	0x40020400

08003e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <HAL_TIM_Base_MspInit+0x48>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d115      	bne.n	8003e5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_TIM_Base_MspInit+0x4c>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <HAL_TIM_Base_MspInit+0x4c>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_TIM_Base_MspInit+0x4c>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2036      	movs	r0, #54	; 0x36
 8003e50:	f001 fb5b 	bl	800550a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e54:	2036      	movs	r0, #54	; 0x36
 8003e56:	f001 fb74 	bl	8005542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40001000 	.word	0x40001000
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <HAL_TIM_MspPostInit+0xb4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d11f      	bne.n	8003ece <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003eaa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4818      	ldr	r0, [pc, #96]	; (8003f28 <HAL_TIM_MspPostInit+0xbc>)
 8003ec8:	f001 fec6 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003ecc:	e023      	b.n	8003f16 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d11e      	bne.n	8003f16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_TIM_MspPostInit+0xb8>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4805      	ldr	r0, [pc, #20]	; (8003f28 <HAL_TIM_MspPostInit+0xbc>)
 8003f12:	f001 fea1 	bl	8005c58 <HAL_GPIO_Init>
}
 8003f16:	bf00      	nop
 8003f18:	3728      	adds	r7, #40	; 0x28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40020000 	.word	0x40020000

08003f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a28      	ldr	r2, [pc, #160]	; (8003fec <HAL_UART_MspInit+0xc0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d14a      	bne.n	8003fe4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <HAL_UART_MspInit+0xc4>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	480d      	ldr	r0, [pc, #52]	; (8003ff4 <HAL_UART_MspInit+0xc8>)
 8003fc0:	f001 fe4a 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <HAL_UART_MspInit+0xcc>)
 8003fe0:	f001 fe3a 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003fe4:	bf00      	nop
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40005000 	.word	0x40005000
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020800 	.word	0x40020800
 8003ff8:	40020c00 	.word	0x40020c00

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <NMI_Handler+0x4>

08004002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <HardFault_Handler+0x4>

08004008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800400c:	e7fe      	b.n	800400c <MemManage_Handler+0x4>

0800400e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004012:	e7fe      	b.n	8004012 <BusFault_Handler+0x4>

08004014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004018:	e7fe      	b.n	8004018 <UsageFault_Handler+0x4>

0800401a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004048:	f000 fbbc 	bl	80047c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}

08004050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <TIM2_IRQHandler+0x10>)
 8004056:	f004 f8a1 	bl	800819c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000570 	.word	0x20000570

08004064 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <TIM6_DAC_IRQHandler+0x10>)
 800406a:	f004 f897 	bl	800819c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000648 	.word	0x20000648

08004078 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <DMA2_Stream0_IRQHandler+0x10>)
 800407e:	f001 fb81 	bl	8005784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200003c4 	.word	0x200003c4

0800408c <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary( uint16_t ad ) {
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	f640 723c 	movw	r2, #3900	; 0xf3c
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d902      	bls.n	80040aa <getSWrotary+0x1e>
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e0b6      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 80040b0:	d807      	bhi.n	80040c2 <getSWrotary+0x36>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	f640 6245 	movw	r2, #3653	; 0xe45
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d902      	bls.n	80040c2 <getSWrotary+0x36>
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e0aa      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 80040c8:	d207      	bcs.n	80040da <getSWrotary+0x4e>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	f640 22ba 	movw	r2, #2746	; 0xaba
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d902      	bls.n	80040da <getSWrotary+0x4e>
 80040d4:	2302      	movs	r3, #2
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e09e      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 80040e0:	d206      	bcs.n	80040f0 <getSWrotary+0x64>
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 80040e8:	d302      	bcc.n	80040f0 <getSWrotary+0x64>
 80040ea:	2303      	movs	r3, #3
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	e093      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	f640 1237 	movw	r2, #2359	; 0x937
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d807      	bhi.n	800410a <getSWrotary+0x7e>
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	f640 1206 	movw	r2, #2310	; 0x906
 8004100:	4293      	cmp	r3, r2
 8004102:	d902      	bls.n	800410a <getSWrotary+0x7e>
 8004104:	2304      	movs	r3, #4
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e086      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	f640 02a6 	movw	r2, #2214	; 0x8a6
 8004110:	4293      	cmp	r3, r2
 8004112:	d807      	bhi.n	8004124 <getSWrotary+0x98>
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f640 0274 	movw	r2, #2164	; 0x874
 800411a:	4293      	cmp	r3, r2
 800411c:	d902      	bls.n	8004124 <getSWrotary+0x98>
 800411e:	2305      	movs	r3, #5
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e079      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	f240 7242 	movw	r2, #1858	; 0x742
 800412a:	4293      	cmp	r3, r2
 800412c:	d807      	bhi.n	800413e <getSWrotary+0xb2>
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	f240 7211 	movw	r2, #1809	; 0x711
 8004134:	4293      	cmp	r3, r2
 8004136:	d902      	bls.n	800413e <getSWrotary+0xb2>
 8004138:	2306      	movs	r3, #6
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e06c      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8004144:	d207      	bcs.n	8004156 <getSWrotary+0xca>
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	f240 62b6 	movw	r2, #1718	; 0x6b6
 800414c:	4293      	cmp	r3, r2
 800414e:	d902      	bls.n	8004156 <getSWrotary+0xca>
 8004150:	2307      	movs	r3, #7
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e060      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	f240 6259 	movw	r2, #1625	; 0x659
 800415c:	4293      	cmp	r3, r2
 800415e:	d806      	bhi.n	800416e <getSWrotary+0xe2>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 8004166:	d902      	bls.n	800416e <getSWrotary+0xe2>
 8004168:	2308      	movs	r3, #8
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	e054      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f240 6213 	movw	r2, #1555	; 0x613
 8004174:	4293      	cmp	r3, r2
 8004176:	d806      	bhi.n	8004186 <getSWrotary+0xfa>
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800417e:	d302      	bcc.n	8004186 <getSWrotary+0xfa>
 8004180:	2309      	movs	r3, #9
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	e048      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	f240 525c 	movw	r2, #1372	; 0x55c
 800418c:	4293      	cmp	r3, r2
 800418e:	d807      	bhi.n	80041a0 <getSWrotary+0x114>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	f240 522d 	movw	r2, #1325	; 0x52d
 8004196:	4293      	cmp	r3, r2
 8004198:	d902      	bls.n	80041a0 <getSWrotary+0x114>
 800419a:	230a      	movs	r3, #10
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e03b      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	f240 522a 	movw	r2, #1322	; 0x52a
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d807      	bhi.n	80041ba <getSWrotary+0x12e>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d902      	bls.n	80041ba <getSWrotary+0x12e>
 80041b4:	230b      	movs	r3, #11
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e02e      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	f240 42ec 	movw	r2, #1260	; 0x4ec
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d807      	bhi.n	80041d4 <getSWrotary+0x148>
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d902      	bls.n	80041d4 <getSWrotary+0x148>
 80041ce:	230c      	movs	r3, #12
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e021      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 80041da:	d807      	bhi.n	80041ec <getSWrotary+0x160>
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	f240 428a 	movw	r2, #1162	; 0x48a
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d902      	bls.n	80041ec <getSWrotary+0x160>
 80041e6:	230d      	movs	r3, #13
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	e015      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80041f2:	d207      	bcs.n	8004204 <getSWrotary+0x178>
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	f240 4222 	movw	r2, #1058	; 0x422
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d902      	bls.n	8004204 <getSWrotary+0x178>
 80041fe:	230e      	movs	r3, #14
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e009      	b.n	8004218 <getSWrotary+0x18c>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800420a:	d805      	bhi.n	8004218 <getSWrotary+0x18c>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8004212:	d901      	bls.n	8004218 <getSWrotary+0x18c>
 8004214:	230f      	movs	r3, #15
 8004216:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact( uint16_t ad ) {
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	4603      	mov	r3, r0
 800422e:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = SW_NONE;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	f640 723c 	movw	r2, #3900	; 0xf3c
 800423a:	4293      	cmp	r3, r2
 800423c:	d902      	bls.n	8004244 <getSWtact+0x1e>
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
 8004242:	e037      	b.n	80042b4 <getSWtact+0x8e>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	f640 52d4 	movw	r2, #3540	; 0xdd4
 800424a:	4293      	cmp	r3, r2
 800424c:	d807      	bhi.n	800425e <getSWtact+0x38>
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	f640 422c 	movw	r2, #3116	; 0xc2c
 8004254:	4293      	cmp	r3, r2
 8004256:	d902      	bls.n	800425e <getSWtact+0x38>
 8004258:	2305      	movs	r3, #5
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e02a      	b.n	80042b4 <getSWtact+0x8e>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	f640 32dd 	movw	r2, #3037	; 0xbdd
 8004264:	4293      	cmp	r3, r2
 8004266:	d807      	bhi.n	8004278 <getSWtact+0x52>
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	f640 222b 	movw	r2, #2603	; 0xa2b
 800426e:	4293      	cmp	r3, r2
 8004270:	d902      	bls.n	8004278 <getSWtact+0x52>
 8004272:	2304      	movs	r3, #4
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	e01d      	b.n	80042b4 <getSWtact+0x8e>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	f640 1256 	movw	r2, #2390	; 0x956
 800427e:	4293      	cmp	r3, r2
 8004280:	d807      	bhi.n	8004292 <getSWtact+0x6c>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	f240 729e 	movw	r2, #1950	; 0x79e
 8004288:	4293      	cmp	r3, r2
 800428a:	d902      	bls.n	8004292 <getSWtact+0x6c>
 800428c:	2303      	movs	r3, #3
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e010      	b.n	80042b4 <getSWtact+0x8e>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8004298:	d207      	bcs.n	80042aa <getSWtact+0x84>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d902      	bls.n	80042aa <getSWtact+0x84>
 80042a4:	2302      	movs	r3, #2
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e004      	b.n	80042b4 <getSWtact+0x8e>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b95      	cmp	r3, #149	; 0x95
 80042ae:	d801      	bhi.n	80042b4 <getSWtact+0x8e>
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]

	return ret;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
	return 1;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_kill>:

int _kill(int pid, int sig)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042dc:	f004 ff6a 	bl	80091b4 <__errno>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2216      	movs	r2, #22
 80042e4:	601a      	str	r2, [r3, #0]
	return -1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_exit>:

void _exit (int status)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042fa:	f04f 31ff 	mov.w	r1, #4294967295
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffe7 	bl	80042d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004304:	e7fe      	b.n	8004304 <_exit+0x12>

08004306 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e00a      	b.n	800432e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004318:	f3af 8000 	nop.w
 800431c:	4601      	mov	r1, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	60ba      	str	r2, [r7, #8]
 8004324:	b2ca      	uxtb	r2, r1
 8004326:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	dbf0      	blt.n	8004318 <_read+0x12>
	}

return len;
 8004336:	687b      	ldr	r3, [r7, #4]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e009      	b.n	8004366 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	60ba      	str	r2, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	dbf1      	blt.n	8004352 <_write+0x12>
	}
	return len;
 800436e:	687b      	ldr	r3, [r7, #4]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_close>:

int _close(int file)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	return -1;
 8004380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043a0:	605a      	str	r2, [r3, #4]
	return 0;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <_isatty>:

int _isatty(int file)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	return 1;
 80043b8:	2301      	movs	r3, #1
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
	return 0;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <_sbrk+0x5c>)
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <_sbrk+0x60>)
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <_sbrk+0x64>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <_sbrk+0x64>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <_sbrk+0x68>)
 8004400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d207      	bcs.n	8004420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004410:	f004 fed0 	bl	80091b4 <__errno>
 8004414:	4603      	mov	r3, r0
 8004416:	220c      	movs	r2, #12
 8004418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e009      	b.n	8004434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <_sbrk+0x64>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	4a05      	ldr	r2, [pc, #20]	; (8004444 <_sbrk+0x64>)
 8004430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20020000 	.word	0x20020000
 8004440:	00000400 	.word	0x00000400
 8004444:	20000700 	.word	0x20000700
 8004448:	20000748 	.word	0x20000748

0800444c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <SystemInit+0x20>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <SystemInit+0x20>)
 8004458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800445c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	cnt1++;
 8004478:	4b2c      	ldr	r3, [pc, #176]	; (800452c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a2b      	ldr	r2, [pc, #172]	; (800452c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004480:	6013      	str	r3, [r2, #0]
    cntSW++;
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800448c:	801a      	strh	r2, [r3, #0]
    cntSetup1++;
 800448e:	4b29      	ldr	r3, [pc, #164]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004498:	801a      	strh	r2, [r3, #0]
    cntSetup2++;
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b25      	ldr	r3, [pc, #148]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80044a4:	801a      	strh	r2, [r3, #0]
    cntSetup3++;
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	4b23      	ldr	r3, [pc, #140]	; (800453c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80044b0:	801a      	strh	r2, [r3, #0]

    // スイッチの入力を取得
    if( cntSW >= 100 ) {
 80044b2:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	2b63      	cmp	r3, #99	; 0x63
 80044b8:	d928      	bls.n	800450c <HAL_TIM_PeriodElapsedCallback+0x9c>
        HAL_ADC_Start(&hadc2);
 80044ba:	4821      	ldr	r0, [pc, #132]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044bc:	f000 fa0a 	bl	80048d4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc2, 1);
 80044c0:	2101      	movs	r1, #1
 80044c2:	481f      	ldr	r0, [pc, #124]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044c4:	f000 fad8 	bl	8004a78 <HAL_ADC_PollForConversion>
        swValTact = getSWtact(HAL_ADC_GetValue(&hadc2));
 80044c8:	481d      	ldr	r0, [pc, #116]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044ca:	f000 fc71 	bl	8004db0 <HAL_ADC_GetValue>
 80044ce:	4603      	mov	r3, r0
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fea7 	bl	8004226 <getSWtact>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80044de:	701a      	strb	r2, [r3, #0]

        HAL_ADC_Start(&hadc2);
 80044e0:	4817      	ldr	r0, [pc, #92]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044e2:	f000 f9f7 	bl	80048d4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1);
 80044e6:	2101      	movs	r1, #1
 80044e8:	4815      	ldr	r0, [pc, #84]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044ea:	f000 fac5 	bl	8004a78 <HAL_ADC_PollForConversion>
        swValRotary = getSWrotary(HAL_ADC_GetValue(&hadc2));
 80044ee:	4814      	ldr	r0, [pc, #80]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80044f0:	f000 fc5e 	bl	8004db0 <HAL_ADC_GetValue>
 80044f4:	4603      	mov	r3, r0
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fdc7 	bl	800408c <getSWrotary>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004504:	701a      	strb	r2, [r3, #0]
        // HAL_ADC_Stop(&hadc2);
        cntSW = 0;
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004508:	2200      	movs	r2, #0
 800450a:	801a      	strh	r2, [r3, #0]
    //     logMarker[cnt1] = getMarkerSensor();
    //     logEncoder[cnt1] = encTotalN - encMarker;
    // }
    
    // 仮想センサステア計算
    getAngleSensor();
 800450c:	f7fd fa94 	bl	8001a38 <getAngleSensor>
    // LCD
    lcdShowProcess();
 8004510:	f7fc fe34 	bl	800117c <lcdShowProcess>
    // Encoder
    getEncoder();
 8004514:	f7fd f95a 	bl	80017cc <getEncoder>
    // PWM
    motorControlTrace();
 8004518:	f7fd fbbe 	bl	8001c98 <motorControlTrace>
    motorControlSpeed();
 800451c:	f000 f818 	bl	8004550 <motorControlSpeed>
    // 電流計測
    readCurrent();
 8004520:	f7fc ff4e 	bl	80013c0 <readCurrent>

}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000704 	.word	0x20000704
 8004530:	200006fc 	.word	0x200006fc
 8004534:	200006ea 	.word	0x200006ea
 8004538:	200006ec 	.word	0x200006ec
 800453c:	200006ee 	.word	0x200006ee
 8004540:	2000037c 	.word	0x2000037c
 8004544:	200006f9 	.word	0x200006f9
 8004548:	200006fa 	.word	0x200006fa
 800454c:	00000000 	.word	0x00000000

08004550 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 8004556:	4b54      	ldr	r3, [pc, #336]	; (80046a8 <motorControlSpeed+0x158>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f7fc fb1a 	bl	8000b98 <__aeabi_d2iz>
 8004564:	4603      	mov	r3, r0
 8004566:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <motorControlSpeed+0x15c>)
 800456a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800456e:	61bb      	str	r3, [r7, #24]

	// デモモードのときゲイン変更
	if ( demo ) {
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <motorControlSpeed+0x160>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <motorControlSpeed+0x164>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8004580:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <motorControlSpeed+0x168>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8004588:	4b4c      	ldr	r3, [pc, #304]	; (80046bc <motorControlSpeed+0x16c>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004590:	e00b      	b.n	80045aa <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 8004592:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <motorControlSpeed+0x164>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <motorControlSpeed+0x168>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 80045a2:	4b46      	ldr	r3, [pc, #280]	; (80046bc <motorControlSpeed+0x16c>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 80045b2:	69f8      	ldr	r0, [r7, #28]
 80045b4:	f7fb ffd6 	bl	8000564 <__aeabi_i2d>
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <motorControlSpeed+0x170>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fc faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <motorControlSpeed+0x86>
 80045c8:	493e      	ldr	r1, [pc, #248]	; (80046c4 <motorControlSpeed+0x174>)
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7fb ffc4 	bl	8000564 <__aeabi_i2d>
 80045dc:	a330      	add	r3, pc, #192	; (adr r3, 80046a0 <motorControlSpeed+0x150>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fc f829 	bl	8000638 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <motorControlSpeed+0x174>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb fe6a 	bl	80002cc <__adddf3>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4931      	ldr	r1, [pc, #196]	; (80046c4 <motorControlSpeed+0x174>)
 80045fe:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <motorControlSpeed+0x178>)
 8004604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004608:	461a      	mov	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;		// 比例
 8004610:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 800461c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff9f 	bl	8000564 <__aeabi_i2d>
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <motorControlSpeed+0x174>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fc f804 	bl	8000638 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f7fc faae 	bl	8000b98 <__aeabi_d2iz>
 800463c:	4603      	mov	r3, r0
 800463e:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;		// 微分
 8004640:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	105b      	asrs	r3, r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004664:	dd02      	ble.n	800466c <motorControlSpeed+0x11c>
 8004666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004672:	da01      	bge.n	8004678 <motorControlSpeed+0x128>
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <motorControlSpeed+0x17c>)
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	b21a      	sxth	r2, r3
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <motorControlSpeed+0x180>)
 800467e:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	b21a      	sxth	r2, r3
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <motorControlSpeed+0x178>)
 8004686:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 8004688:	69f8      	ldr	r0, [r7, #28]
 800468a:	f7fb ff6b 	bl	8000564 <__aeabi_i2d>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	490b      	ldr	r1, [pc, #44]	; (80046c0 <motorControlSpeed+0x170>)
 8004694:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004698:	bf00      	nop
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80046a4:	3f50624d 	.word	0x3f50624d
 80046a8:	20000710 	.word	0x20000710
 80046ac:	20000288 	.word	0x20000288
 80046b0:	20000730 	.word	0x20000730
 80046b4:	20000030 	.word	0x20000030
 80046b8:	20000031 	.word	0x20000031
 80046bc:	20000731 	.word	0x20000731
 80046c0:	20000720 	.word	0x20000720
 80046c4:	20000728 	.word	0x20000728
 80046c8:	20000718 	.word	0x20000718
 80046cc:	fffffc18 	.word	0xfffffc18
 80046d0:	20000708 	.word	0x20000708

080046d4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046d4:	480c      	ldr	r0, [pc, #48]	; (8004708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046d6:	490d      	ldr	r1, [pc, #52]	; (800470c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046dc:	e002      	b.n	80046e4 <LoopCopyDataInit>

080046de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046e2:	3304      	adds	r3, #4

080046e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e8:	d3f9      	bcc.n	80046de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046ec:	4c0a      	ldr	r4, [pc, #40]	; (8004718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046f0:	e001      	b.n	80046f6 <LoopFillZerobss>

080046f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046f4:	3204      	adds	r2, #4

080046f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f8:	d3fb      	bcc.n	80046f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046fa:	f7ff fea7 	bl	800444c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046fe:	f004 fd5f 	bl	80091c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004702:	f7fd fbc3 	bl	8001e8c <main>
  bx  lr    
 8004706:	4770      	bx	lr
  ldr r0, =_sdata
 8004708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800470c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004710:	0800e8a8 	.word	0x0800e8a8
  ldr r2, =_sbss
 8004714:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004718:	20000748 	.word	0x20000748

0800471c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800471c:	e7fe      	b.n	800471c <ADC_IRQHandler>
	...

08004720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_Init+0x40>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_Init+0x40>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_Init+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_Init+0x40>)
 8004736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a07      	ldr	r2, [pc, #28]	; (8004760 <HAL_Init+0x40>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004748:	2003      	movs	r0, #3
 800474a:	f000 fed3 	bl	80054f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474e:	2000      	movs	r0, #0
 8004750:	f000 f808 	bl	8004764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004754:	f7ff f8d6 	bl	8003904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_InitTick+0x54>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_InitTick+0x58>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477a:	fbb3 f3f1 	udiv	r3, r3, r1
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4618      	mov	r0, r3
 8004784:	f000 feeb 	bl	800555e <HAL_SYSTICK_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e00e      	b.n	80047b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0f      	cmp	r3, #15
 8004796:	d80a      	bhi.n	80047ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004798:	2200      	movs	r2, #0
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f000 feb3 	bl	800550a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a4:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <HAL_InitTick+0x5c>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2000002c 	.word	0x2000002c
 80047bc:	20000038 	.word	0x20000038
 80047c0:	20000034 	.word	0x20000034

080047c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_IncTick+0x20>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_IncTick+0x24>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_IncTick+0x24>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000038 	.word	0x20000038
 80047e8:	20000734 	.word	0x20000734

080047ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return uwTick;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_GetTick+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000734 	.word	0x20000734

08004804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7ff ffee 	bl	80047ec <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d005      	beq.n	800482a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_Delay+0x44>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800482a:	bf00      	nop
 800482c:	f7ff ffde 	bl	80047ec <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d8f7      	bhi.n	800482c <HAL_Delay+0x28>
  {
  }
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000038 	.word	0x20000038

0800484c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e033      	b.n	80048ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff f872 	bl	8003954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d118      	bne.n	80048bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004892:	f023 0302 	bic.w	r3, r3, #2
 8004896:	f043 0202 	orr.w	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fbda 	bl	8005058 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
 80048ba:	e001      	b.n	80048c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_Start+0x1a>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0b2      	b.n	8004a54 <HAL_ADC_Start+0x180>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d018      	beq.n	8004936 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004914:	4b52      	ldr	r3, [pc, #328]	; (8004a60 <HAL_ADC_Start+0x18c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_ADC_Start+0x190>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9a      	lsrs	r2, r3, #18
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004928:	e002      	b.n	8004930 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3b01      	subs	r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f9      	bne.n	800492a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d17a      	bne.n	8004a3a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800496e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	d106      	bne.n	8004992 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f023 0206 	bic.w	r2, r3, #6
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
 8004990:	e002      	b.n	8004998 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_ADC_Start+0x194>)
 80049a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d12a      	bne.n	8004a10 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <HAL_ADC_Start+0x198>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d015      	beq.n	80049f0 <HAL_ADC_Start+0x11c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <HAL_ADC_Start+0x19c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d105      	bne.n	80049da <HAL_ADC_Start+0x106>
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_ADC_Start+0x194>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <HAL_ADC_Start+0x1a0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d136      	bne.n	8004a52 <HAL_ADC_Start+0x17e>
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_ADC_Start+0x194>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d130      	bne.n	8004a52 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d129      	bne.n	8004a52 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	e020      	b.n	8004a52 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_ADC_Start+0x198>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d11b      	bne.n	8004a52 <HAL_ADC_Start+0x17e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d114      	bne.n	8004a52 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	e00b      	b.n	8004a52 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0210 	orr.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	431bde83 	.word	0x431bde83
 8004a68:	40012300 	.word	0x40012300
 8004a6c:	40012000 	.word	0x40012000
 8004a70:	40012100 	.word	0x40012100
 8004a74:	40012200 	.word	0x40012200

08004a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d113      	bne.n	8004abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d10b      	bne.n	8004abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e063      	b.n	8004b86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004abe:	f7ff fe95 	bl	80047ec <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ac4:	e021      	b.n	8004b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d01d      	beq.n	8004b0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_ADC_PollForConversion+0x6c>
 8004ad4:	f7ff fe8a 	bl	80047ec <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d212      	bcs.n	8004b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d00b      	beq.n	8004b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e03d      	b.n	8004b86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d1d6      	bne.n	8004ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0212 	mvn.w	r2, #18
 8004b20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d123      	bne.n	8004b84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11f      	bne.n	8004b84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0201 	orr.w	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_ADC_Start_DMA+0x1e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0e9      	b.n	8004d82 <HAL_ADC_Start_DMA+0x1f2>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d018      	beq.n	8004bf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004bd4:	4b6d      	ldr	r3, [pc, #436]	; (8004d8c <HAL_ADC_Start_DMA+0x1fc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6d      	ldr	r2, [pc, #436]	; (8004d90 <HAL_ADC_Start_DMA+0x200>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	0c9a      	lsrs	r2, r3, #18
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004be8:	e002      	b.n	8004bf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f9      	bne.n	8004bea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	d107      	bne.n	8004c16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 80a1 	bne.w	8004d68 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c64:	d106      	bne.n	8004c74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f023 0206 	bic.w	r2, r3, #6
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
 8004c72:	e002      	b.n	8004c7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c82:	4b44      	ldr	r3, [pc, #272]	; (8004d94 <HAL_ADC_Start_DMA+0x204>)
 8004c84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	4a43      	ldr	r2, [pc, #268]	; (8004d98 <HAL_ADC_Start_DMA+0x208>)
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4a42      	ldr	r2, [pc, #264]	; (8004d9c <HAL_ADC_Start_DMA+0x20c>)
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	4a41      	ldr	r2, [pc, #260]	; (8004da0 <HAL_ADC_Start_DMA+0x210>)
 8004c9c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ca6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cb6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	334c      	adds	r3, #76	; 0x4c
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f000 fcfc 	bl	80056d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d12a      	bne.n	8004d3e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <HAL_ADC_Start_DMA+0x214>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d015      	beq.n	8004d1e <HAL_ADC_Start_DMA+0x18e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <HAL_ADC_Start_DMA+0x218>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d105      	bne.n	8004d08 <HAL_ADC_Start_DMA+0x178>
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_ADC_Start_DMA+0x204>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a27      	ldr	r2, [pc, #156]	; (8004dac <HAL_ADC_Start_DMA+0x21c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d136      	bne.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_ADC_Start_DMA+0x204>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d130      	bne.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d129      	bne.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	e020      	b.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_ADC_Start_DMA+0x214>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d11b      	bne.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d114      	bne.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d64:	609a      	str	r2, [r3, #8]
 8004d66:	e00b      	b.n	8004d80 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000002c 	.word	0x2000002c
 8004d90:	431bde83 	.word	0x431bde83
 8004d94:	40012300 	.word	0x40012300
 8004d98:	08005251 	.word	0x08005251
 8004d9c:	0800530b 	.word	0x0800530b
 8004da0:	08005327 	.word	0x08005327
 8004da4:	40012000 	.word	0x40012000
 8004da8:	40012100 	.word	0x40012100
 8004dac:	40012200 	.word	0x40012200

08004db0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x1c>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e113      	b.n	8005038 <HAL_ADC_ConfigChannel+0x244>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d925      	bls.n	8004e6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68d9      	ldr	r1, [r3, #12]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	3b1e      	subs	r3, #30
 8004e36:	2207      	movs	r2, #7
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43da      	mvns	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	400a      	ands	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68d9      	ldr	r1, [r3, #12]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	4618      	mov	r0, r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4403      	add	r3, r0
 8004e5e:	3b1e      	subs	r3, #30
 8004e60:	409a      	lsls	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e022      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	2207      	movs	r2, #7
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43da      	mvns	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	400a      	ands	r2, r1
 8004e8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6919      	ldr	r1, [r3, #16]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4403      	add	r3, r0
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d824      	bhi.n	8004f04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b05      	subs	r3, #5
 8004ecc:	221f      	movs	r2, #31
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	400a      	ands	r2, r1
 8004eda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4618      	mov	r0, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3b05      	subs	r3, #5
 8004ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
 8004f02:	e04c      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d824      	bhi.n	8004f56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b23      	subs	r3, #35	; 0x23
 8004f1e:	221f      	movs	r2, #31
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43da      	mvns	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	3b23      	subs	r3, #35	; 0x23
 8004f48:	fa00 f203 	lsl.w	r2, r0, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
 8004f54:	e023      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	3b41      	subs	r3, #65	; 0x41
 8004f68:	221f      	movs	r2, #31
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	400a      	ands	r2, r1
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4618      	mov	r0, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	3b41      	subs	r3, #65	; 0x41
 8004f92:	fa00 f203 	lsl.w	r2, r0, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <HAL_ADC_ConfigChannel+0x250>)
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_ADC_ConfigChannel+0x254>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10f      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x1d8>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b12      	cmp	r3, #18
 8004fb2:	d10b      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_ADC_ConfigChannel+0x254>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d12b      	bne.n	800502e <HAL_ADC_ConfigChannel+0x23a>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_ADC_ConfigChannel+0x258>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <HAL_ADC_ConfigChannel+0x1f4>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b11      	cmp	r3, #17
 8004fe6:	d122      	bne.n	800502e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a11      	ldr	r2, [pc, #68]	; (800504c <HAL_ADC_ConfigChannel+0x258>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d111      	bne.n	800502e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800500a:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_ADC_ConfigChannel+0x25c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a11      	ldr	r2, [pc, #68]	; (8005054 <HAL_ADC_ConfigChannel+0x260>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	0c9a      	lsrs	r2, r3, #18
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005020:	e002      	b.n	8005028 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3b01      	subs	r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f9      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012300 	.word	0x40012300
 8005048:	40012000 	.word	0x40012000
 800504c:	10000012 	.word	0x10000012
 8005050:	2000002c 	.word	0x2000002c
 8005054:	431bde83 	.word	0x431bde83

08005058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <ADC_Init+0x1f0>)
 8005062:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	021a      	lsls	r2, r3, #8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6899      	ldr	r1, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	4a58      	ldr	r2, [pc, #352]	; (800524c <ADC_Init+0x1f4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	e00f      	b.n	8005156 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005154:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0202 	bic.w	r2, r2, #2
 8005164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7e1b      	ldrb	r3, [r3, #24]
 8005170:	005a      	lsls	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01b      	beq.n	80051bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005192:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	3b01      	subs	r3, #1
 80051b0:	035a      	lsls	r2, r3, #13
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	e007      	b.n	80051cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	051a      	lsls	r2, r3, #20
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6899      	ldr	r1, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800520e:	025a      	lsls	r2, r3, #9
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	029a      	lsls	r2, r3, #10
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40012300 	.word	0x40012300
 800524c:	0f000001 	.word	0x0f000001

08005250 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d13c      	bne.n	80052e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d12b      	bne.n	80052dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005288:	2b00      	cmp	r3, #0
 800528a:	d127      	bne.n	80052dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d119      	bne.n	80052dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0220 	bic.w	r2, r2, #32
 80052b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	f043 0201 	orr.w	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fd fb59 	bl	8002994 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052e2:	e00e      	b.n	8005302 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7ff fd74 	bl	8004dde <HAL_ADC_ErrorCallback>
}
 80052f6:	e004      	b.n	8005302 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fd56 	bl	8004dca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f043 0204 	orr.w	r2, r3, #4
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fd49 	bl	8004dde <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <__NVIC_SetPriorityGrouping+0x44>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005370:	4013      	ands	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800537c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005386:	4a04      	ldr	r2, [pc, #16]	; (8005398 <__NVIC_SetPriorityGrouping+0x44>)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	60d3      	str	r3, [r2, #12]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <__NVIC_GetPriorityGrouping+0x18>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	f003 0307 	and.w	r3, r3, #7
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	db0b      	blt.n	80053e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	f003 021f 	and.w	r2, r3, #31
 80053d0:	4907      	ldr	r1, [pc, #28]	; (80053f0 <__NVIC_EnableIRQ+0x38>)
 80053d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2001      	movs	r0, #1
 80053da:	fa00 f202 	lsl.w	r2, r0, r2
 80053de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e100 	.word	0xe000e100

080053f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	6039      	str	r1, [r7, #0]
 80053fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	2b00      	cmp	r3, #0
 8005406:	db0a      	blt.n	800541e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	490c      	ldr	r1, [pc, #48]	; (8005440 <__NVIC_SetPriority+0x4c>)
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	0112      	lsls	r2, r2, #4
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	440b      	add	r3, r1
 8005418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800541c:	e00a      	b.n	8005434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4908      	ldr	r1, [pc, #32]	; (8005444 <__NVIC_SetPriority+0x50>)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	3b04      	subs	r3, #4
 800542c:	0112      	lsls	r2, r2, #4
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	440b      	add	r3, r1
 8005432:	761a      	strb	r2, [r3, #24]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	e000e100 	.word	0xe000e100
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	; 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f1c3 0307 	rsb	r3, r3, #7
 8005462:	2b04      	cmp	r3, #4
 8005464:	bf28      	it	cs
 8005466:	2304      	movcs	r3, #4
 8005468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3304      	adds	r3, #4
 800546e:	2b06      	cmp	r3, #6
 8005470:	d902      	bls.n	8005478 <NVIC_EncodePriority+0x30>
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3b03      	subs	r3, #3
 8005476:	e000      	b.n	800547a <NVIC_EncodePriority+0x32>
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43da      	mvns	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	401a      	ands	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005490:	f04f 31ff 	mov.w	r1, #4294967295
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	43d9      	mvns	r1, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	4313      	orrs	r3, r2
         );
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	; 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054c0:	d301      	bcc.n	80054c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00f      	b.n	80054e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <SysTick_Config+0x40>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ce:	210f      	movs	r1, #15
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	f7ff ff8e 	bl	80053f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <SysTick_Config+0x40>)
 80054da:	2200      	movs	r2, #0
 80054dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <SysTick_Config+0x40>)
 80054e0:	2207      	movs	r2, #7
 80054e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000e010 	.word	0xe000e010

080054f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff29 	bl	8005354 <__NVIC_SetPriorityGrouping>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800551c:	f7ff ff3e 	bl	800539c <__NVIC_GetPriorityGrouping>
 8005520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f7ff ff8e 	bl	8005448 <NVIC_EncodePriority>
 800552c:	4602      	mov	r2, r0
 800552e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff5d 	bl	80053f4 <__NVIC_SetPriority>
}
 800553a:	bf00      	nop
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800554c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff ff31 	bl	80053b8 <__NVIC_EnableIRQ>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ffa2 	bl	80054b0 <SysTick_Config>
 800556c:	4603      	mov	r3, r0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005584:	f7ff f932 	bl	80047ec <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e099      	b.n	80056c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b4:	e00f      	b.n	80055d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b6:	f7ff f919 	bl	80047ec <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	d908      	bls.n	80055d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2203      	movs	r2, #3
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e078      	b.n	80056c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e8      	bne.n	80055b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <HAL_DMA_Init+0x158>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b04      	cmp	r3, #4
 800562e:	d107      	bne.n	8005640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4313      	orrs	r3, r2
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b04      	cmp	r3, #4
 8005668:	d117      	bne.n	800569a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa6f 	bl	8005b60 <DMA_CheckFifoParam>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005696:	2301      	movs	r3, #1
 8005698:	e016      	b.n	80056c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa26 	bl	8005af4 <DMA_CalcBaseAndBitshift>
 80056a8:	4603      	mov	r3, r0
 80056aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	223f      	movs	r2, #63	; 0x3f
 80056b2:	409a      	lsls	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	f010803f 	.word	0xf010803f

080056d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_DMA_Start_IT+0x26>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e040      	b.n	800577c <HAL_DMA_Start_IT+0xa8>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d12f      	bne.n	800576e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9b8 	bl	8005a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	223f      	movs	r2, #63	; 0x3f
 800572e:	409a      	lsls	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0216 	orr.w	r2, r2, #22
 8005742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0208 	orr.w	r2, r2, #8
 800575a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e005      	b.n	800577a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005776:	2302      	movs	r3, #2
 8005778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005790:	4b8e      	ldr	r3, [pc, #568]	; (80059cc <HAL_DMA_IRQHandler+0x248>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a8e      	ldr	r2, [pc, #568]	; (80059d0 <HAL_DMA_IRQHandler+0x24c>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	2208      	movs	r2, #8
 80057b0:	409a      	lsls	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01a      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0204 	bic.w	r2, r2, #4
 80057d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	2208      	movs	r2, #8
 80057de:	409a      	lsls	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	2201      	movs	r2, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	2201      	movs	r2, #1
 8005814:	409a      	lsls	r2, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	f043 0202 	orr.w	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	2204      	movs	r2, #4
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d012      	beq.n	800585c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	2204      	movs	r2, #4
 800584a:	409a      	lsls	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	2210      	movs	r2, #16
 8005862:	409a      	lsls	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4013      	ands	r3, r2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d043      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03c      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587e:	2210      	movs	r2, #16
 8005880:	409a      	lsls	r2, r3
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d018      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d024      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	e01f      	b.n	80058f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
 80058c4:	e016      	b.n	80058f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0208 	bic.w	r2, r2, #8
 80058e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	2220      	movs	r2, #32
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 808f 	beq.w	8005a24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8087 	beq.w	8005a24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	2220      	movs	r2, #32
 800591c:	409a      	lsls	r2, r3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b05      	cmp	r3, #5
 800592c:	d136      	bne.n	800599c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0216 	bic.w	r2, r2, #22
 800593c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <HAL_DMA_IRQHandler+0x1da>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0208 	bic.w	r2, r2, #8
 800596c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005972:	223f      	movs	r2, #63	; 0x3f
 8005974:	409a      	lsls	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d07e      	beq.n	8005a90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
        }
        return;
 800599a:	e079      	b.n	8005a90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d031      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
 80059c8:	e02c      	b.n	8005a24 <HAL_DMA_IRQHandler+0x2a0>
 80059ca:	bf00      	nop
 80059cc:	2000002c 	.word	0x2000002c
 80059d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d023      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	e01e      	b.n	8005a24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0210 	bic.w	r2, r2, #16
 8005a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d032      	beq.n	8005a92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2205      	movs	r2, #5
 8005a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	3301      	adds	r3, #1
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d307      	bcc.n	8005a6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f2      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x2cc>
 8005a6a:	e000      	b.n	8005a6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a90:	bf00      	nop
    }
  }
}
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d108      	bne.n	8005ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ad6:	e007      	b.n	8005ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	60da      	str	r2, [r3, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	3b10      	subs	r3, #16
 8005b04:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <DMA_CalcBaseAndBitshift+0x64>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	091b      	lsrs	r3, r3, #4
 8005b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <DMA_CalcBaseAndBitshift+0x68>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d909      	bls.n	8005b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	1d1a      	adds	r2, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	659a      	str	r2, [r3, #88]	; 0x58
 8005b34:	e007      	b.n	8005b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	aaaaaaab 	.word	0xaaaaaaab
 8005b5c:	0800e3a4 	.word	0x0800e3a4

08005b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11f      	bne.n	8005bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d856      	bhi.n	8005c2e <DMA_CheckFifoParam+0xce>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <DMA_CheckFifoParam+0x28>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005bab 	.word	0x08005bab
 8005b90:	08005b99 	.word	0x08005b99
 8005b94:	08005c2f 	.word	0x08005c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d046      	beq.n	8005c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba8:	e043      	b.n	8005c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bb2:	d140      	bne.n	8005c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb8:	e03d      	b.n	8005c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc2:	d121      	bne.n	8005c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d837      	bhi.n	8005c3a <DMA_CheckFifoParam+0xda>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <DMA_CheckFifoParam+0x70>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be1 	.word	0x08005be1
 8005bd4:	08005be7 	.word	0x08005be7
 8005bd8:	08005be1 	.word	0x08005be1
 8005bdc:	08005bf9 	.word	0x08005bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e030      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d025      	beq.n	8005c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf6:	e022      	b.n	8005c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c00:	d11f      	bne.n	8005c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c06:	e01c      	b.n	8005c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d903      	bls.n	8005c16 <DMA_CheckFifoParam+0xb6>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d003      	beq.n	8005c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c14:	e018      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1a:	e015      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00e      	beq.n	8005c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e00b      	b.n	8005c46 <DMA_CheckFifoParam+0xe6>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e00a      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;
 8005c32:	bf00      	nop
 8005c34:	e008      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;
 8005c36:	bf00      	nop
 8005c38:	e006      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e004      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e002      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <DMA_CheckFifoParam+0xe8>
      break;
 8005c46:	bf00      	nop
    }
  } 
  
  return status; 
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e165      	b.n	8005f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c74:	2201      	movs	r2, #1
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	f040 8154 	bne.w	8005f3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d005      	beq.n	8005caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d130      	bne.n	8005d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 0201 	and.w	r2, r3, #1
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d017      	beq.n	8005d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	2203      	movs	r2, #3
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d123      	bne.n	8005d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	08da      	lsrs	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3208      	adds	r2, #8
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	08da      	lsrs	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3208      	adds	r2, #8
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0203 	and.w	r2, r3, #3
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80ae 	beq.w	8005f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	4b5d      	ldr	r3, [pc, #372]	; (8005f58 <HAL_GPIO_Init+0x300>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	4a5c      	ldr	r2, [pc, #368]	; (8005f58 <HAL_GPIO_Init+0x300>)
 8005de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dec:	6453      	str	r3, [r2, #68]	; 0x44
 8005dee:	4b5a      	ldr	r3, [pc, #360]	; (8005f58 <HAL_GPIO_Init+0x300>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfa:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_GPIO_Init+0x304>)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3302      	adds	r3, #2
 8005e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	220f      	movs	r2, #15
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a4f      	ldr	r2, [pc, #316]	; (8005f60 <HAL_GPIO_Init+0x308>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d025      	beq.n	8005e72 <HAL_GPIO_Init+0x21a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a4e      	ldr	r2, [pc, #312]	; (8005f64 <HAL_GPIO_Init+0x30c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01f      	beq.n	8005e6e <HAL_GPIO_Init+0x216>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a4d      	ldr	r2, [pc, #308]	; (8005f68 <HAL_GPIO_Init+0x310>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d019      	beq.n	8005e6a <HAL_GPIO_Init+0x212>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a4c      	ldr	r2, [pc, #304]	; (8005f6c <HAL_GPIO_Init+0x314>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_GPIO_Init+0x20e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a4b      	ldr	r2, [pc, #300]	; (8005f70 <HAL_GPIO_Init+0x318>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00d      	beq.n	8005e62 <HAL_GPIO_Init+0x20a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a4a      	ldr	r2, [pc, #296]	; (8005f74 <HAL_GPIO_Init+0x31c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <HAL_GPIO_Init+0x206>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a49      	ldr	r2, [pc, #292]	; (8005f78 <HAL_GPIO_Init+0x320>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d101      	bne.n	8005e5a <HAL_GPIO_Init+0x202>
 8005e56:	2306      	movs	r3, #6
 8005e58:	e00c      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e5a:	2307      	movs	r3, #7
 8005e5c:	e00a      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e5e:	2305      	movs	r3, #5
 8005e60:	e008      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e62:	2304      	movs	r3, #4
 8005e64:	e006      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e004      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_GPIO_Init+0x21c>
 8005e72:	2300      	movs	r3, #0
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	f002 0203 	and.w	r2, r2, #3
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	4093      	lsls	r3, r2
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e84:	4935      	ldr	r1, [pc, #212]	; (8005f5c <HAL_GPIO_Init+0x304>)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e92:	4b3a      	ldr	r3, [pc, #232]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005eb6:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ebc:	4b2f      	ldr	r3, [pc, #188]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ee0:	4a26      	ldr	r2, [pc, #152]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ee6:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f34:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	f67f ae96 	bls.w	8005c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40013800 	.word	0x40013800
 8005f60:	40020000 	.word	0x40020000
 8005f64:	40020400 	.word	0x40020400
 8005f68:	40020800 	.word	0x40020800
 8005f6c:	40020c00 	.word	0x40020c00
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40021400 	.word	0x40021400
 8005f78:	40021800 	.word	0x40021800
 8005f7c:	40013c00 	.word	0x40013c00

08005f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	e001      	b.n	8005fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	807b      	strh	r3, [r7, #2]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fc0:	787b      	ldrb	r3, [r7, #1]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fc6:	887a      	ldrh	r2, [r7, #2]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fcc:	e003      	b.n	8005fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	041a      	lsls	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	619a      	str	r2, [r3, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e12b      	b.n	800624e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd fd66 	bl	8003adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006048:	f001 f8a4 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 800604c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4a81      	ldr	r2, [pc, #516]	; (8006258 <HAL_I2C_Init+0x274>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d807      	bhi.n	8006068 <HAL_I2C_Init+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a80      	ldr	r2, [pc, #512]	; (800625c <HAL_I2C_Init+0x278>)
 800605c:	4293      	cmp	r3, r2
 800605e:	bf94      	ite	ls
 8006060:	2301      	movls	r3, #1
 8006062:	2300      	movhi	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e006      	b.n	8006076 <HAL_I2C_Init+0x92>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a7d      	ldr	r2, [pc, #500]	; (8006260 <HAL_I2C_Init+0x27c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	bf94      	ite	ls
 8006070:	2301      	movls	r3, #1
 8006072:	2300      	movhi	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0e7      	b.n	800624e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a78      	ldr	r2, [pc, #480]	; (8006264 <HAL_I2C_Init+0x280>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0c9b      	lsrs	r3, r3, #18
 8006088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_I2C_Init+0x274>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <HAL_I2C_Init+0xd4>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3301      	adds	r3, #1
 80060b6:	e009      	b.n	80060cc <HAL_I2C_Init+0xe8>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_I2C_Init+0x284>)
 80060c4:	fba2 2303 	umull	r2, r3, r2, r3
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	3301      	adds	r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	495c      	ldr	r1, [pc, #368]	; (8006258 <HAL_I2C_Init+0x274>)
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d819      	bhi.n	8006120 <HAL_I2C_Init+0x13c>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1e59      	subs	r1, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006100:	400b      	ands	r3, r1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_I2C_Init+0x138>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1e59      	subs	r1, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fbb1 f3f3 	udiv	r3, r1, r3
 8006114:	3301      	adds	r3, #1
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	e051      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800611c:	2304      	movs	r3, #4
 800611e:	e04f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d111      	bne.n	800614c <HAL_I2C_Init+0x168>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1e58      	subs	r0, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	440b      	add	r3, r1
 8006136:	fbb0 f3f3 	udiv	r3, r0, r3
 800613a:	3301      	adds	r3, #1
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	2b00      	cmp	r3, #0
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e012      	b.n	8006172 <HAL_I2C_Init+0x18e>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1e58      	subs	r0, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	0099      	lsls	r1, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006162:	3301      	adds	r3, #1
 8006164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_Init+0x196>
 8006176:	2301      	movs	r3, #1
 8006178:	e022      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10e      	bne.n	80061a0 <HAL_I2C_Init+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1e58      	subs	r0, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	440b      	add	r3, r1
 8006190:	fbb0 f3f3 	udiv	r3, r0, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	e00f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1e58      	subs	r0, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	0099      	lsls	r1, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	6809      	ldr	r1, [r1, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6911      	ldr	r1, [r2, #16]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68d2      	ldr	r2, [r2, #12]
 80061fa:	4311      	orrs	r1, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	430b      	orrs	r3, r1
 8006202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	000186a0 	.word	0x000186a0
 800625c:	001e847f 	.word	0x001e847f
 8006260:	003d08ff 	.word	0x003d08ff
 8006264:	431bde83 	.word	0x431bde83
 8006268:	10624dd3 	.word	0x10624dd3

0800626c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
 800627c:	4613      	mov	r3, r2
 800627e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fe fab4 	bl	80047ec <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	f040 80e0 	bne.w	8006454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2319      	movs	r3, #25
 800629a:	2201      	movs	r2, #1
 800629c:	4970      	ldr	r1, [pc, #448]	; (8006460 <HAL_I2C_Master_Transmit+0x1f4>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fc58 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0d3      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_I2C_Master_Transmit+0x50>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0cc      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2221      	movs	r2, #33	; 0x21
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2210      	movs	r2, #16
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	893a      	ldrh	r2, [r7, #8]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a50      	ldr	r2, [pc, #320]	; (8006464 <HAL_I2C_Master_Transmit+0x1f8>)
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fac2 	bl	80068b4 <I2C_MasterRequestWrite>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e08d      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006350:	e066      	b.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6a39      	ldr	r1, [r7, #32]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fcd2 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fcc2 	bl	8006d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00d      	beq.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	2b04      	cmp	r3, #4
 800640a:	d107      	bne.n	800641c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01a      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d194      	bne.n	8006352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000

08006468 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	; 0x30
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	461a      	mov	r2, r3
 8006474:	460b      	mov	r3, r1
 8006476:	817b      	strh	r3, [r7, #10]
 8006478:	4613      	mov	r3, r2
 800647a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800647c:	f7fe f9b6 	bl	80047ec <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b20      	cmp	r3, #32
 800648c:	f040 820b 	bne.w	80068a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2319      	movs	r3, #25
 8006496:	2201      	movs	r2, #1
 8006498:	497c      	ldr	r1, [pc, #496]	; (800668c <HAL_I2C_Master_Receive+0x224>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fb5a 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	e1fe      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_I2C_Master_Receive+0x50>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e1f7      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d007      	beq.n	80064de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2222      	movs	r2, #34	; 0x22
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2210      	movs	r2, #16
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a5c      	ldr	r2, [pc, #368]	; (8006690 <HAL_I2C_Master_Receive+0x228>)
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006520:	8979      	ldrh	r1, [r7, #10]
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa46 	bl	80069b8 <I2C_MasterRequestRead>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e1b8      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d113      	bne.n	8006566 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e18c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b01      	cmp	r3, #1
 800656c:	d11b      	bne.n	80065a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e16c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11b      	bne.n	80065e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e14c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800660c:	e138      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	2b03      	cmp	r3, #3
 8006614:	f200 80f1 	bhi.w	80067fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661c:	2b01      	cmp	r3, #1
 800661e:	d123      	bne.n	8006668 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fbed 	bl	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e139      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006666:	e10b      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	2b02      	cmp	r3, #2
 800666e:	d14e      	bne.n	800670e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	2200      	movs	r2, #0
 8006678:	4906      	ldr	r1, [pc, #24]	; (8006694 <HAL_I2C_Master_Receive+0x22c>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fa6a 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e10e      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
 800668a:	bf00      	nop
 800668c:	00100002 	.word	0x00100002
 8006690:	ffff0000 	.word	0xffff0000
 8006694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800670c:	e0b8      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	4966      	ldr	r1, [pc, #408]	; (80068b0 <HAL_I2C_Master_Receive+0x448>)
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fa1b 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0bf      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2200      	movs	r2, #0
 8006772:	494f      	ldr	r1, [pc, #316]	; (80068b0 <HAL_I2C_Master_Receive+0x448>)
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f9ed 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e091      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067f8:	e042      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fb00 	bl	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e04c      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b04      	cmp	r3, #4
 800684c:	d118      	bne.n	8006880 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	f47f aec2 	bne.w	800660e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	00010004 	.word	0x00010004

080068b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	460b      	mov	r3, r1
 80068c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d006      	beq.n	80068de <I2C_MasterRequestWrite+0x2a>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d003      	beq.n	80068de <I2C_MasterRequestWrite+0x2a>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068dc:	d108      	bne.n	80068f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e00b      	b.n	8006908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	2b12      	cmp	r3, #18
 80068f6:	d107      	bne.n	8006908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f91d 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692e:	d103      	bne.n	8006938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e035      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	d108      	bne.n	8006958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006946:	897b      	ldrh	r3, [r7, #10]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	e01b      	b.n	8006990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006958:	897b      	ldrh	r3, [r7, #10]
 800695a:	11db      	asrs	r3, r3, #7
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f063 030f 	orn	r3, r3, #15
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	490e      	ldr	r1, [pc, #56]	; (80069b0 <I2C_MasterRequestWrite+0xfc>)
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f943 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e010      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <I2C_MasterRequestWrite+0x100>)
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f933 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	00010008 	.word	0x00010008
 80069b4:	00010002 	.word	0x00010002

080069b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	460b      	mov	r3, r1
 80069c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d006      	beq.n	80069f2 <I2C_MasterRequestRead+0x3a>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d003      	beq.n	80069f2 <I2C_MasterRequestRead+0x3a>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069f0:	d108      	bne.n	8006a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e00b      	b.n	8006a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b11      	cmp	r3, #17
 8006a0a:	d107      	bne.n	8006a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f893 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00d      	beq.n	8006a50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	d103      	bne.n	8006a4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e079      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a58:	d108      	bne.n	8006a6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	611a      	str	r2, [r3, #16]
 8006a6a:	e05f      	b.n	8006b2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	11db      	asrs	r3, r3, #7
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f003 0306 	and.w	r3, r3, #6
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f063 030f 	orn	r3, r3, #15
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4930      	ldr	r1, [pc, #192]	; (8006b4c <I2C_MasterRequestRead+0x194>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f8b9 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e054      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a9a:	897b      	ldrh	r3, [r7, #10]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4929      	ldr	r1, [pc, #164]	; (8006b50 <I2C_MasterRequestRead+0x198>)
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f8a9 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e044      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ade:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f831 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b06:	d103      	bne.n	8006b10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e017      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b14:	897b      	ldrh	r3, [r7, #10]
 8006b16:	11db      	asrs	r3, r3, #7
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0306 	and.w	r3, r3, #6
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f063 030e 	orn	r3, r3, #14
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	4907      	ldr	r1, [pc, #28]	; (8006b50 <I2C_MasterRequestRead+0x198>)
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f865 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	00010008 	.word	0x00010008
 8006b50:	00010002 	.word	0x00010002

08006b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b64:	e025      	b.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d021      	beq.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fd fe3d 	bl	80047ec <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d116      	bne.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e023      	b.n	8006bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10d      	bne.n	8006bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	43da      	mvns	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf0c      	ite	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	e00c      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	43da      	mvns	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4013      	ands	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d0b6      	beq.n	8006b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c10:	e051      	b.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d123      	bne.n	8006c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f043 0204 	orr.w	r2, r3, #4
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e046      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d021      	beq.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c72:	f7fd fdbb 	bl	80047ec <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d302      	bcc.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d116      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f043 0220 	orr.w	r2, r3, #32
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e020      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10c      	bne.n	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	43da      	mvns	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e00b      	b.n	8006cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	43da      	mvns	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d18d      	bne.n	8006c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d0c:	e02d      	b.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f8ce 	bl	8006eb0 <I2C_IsAcknowledgeFailed>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e02d      	b.n	8006d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d021      	beq.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d26:	f7fd fd61 	bl	80047ec <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d116      	bne.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e007      	b.n	8006d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d1ca      	bne.n	8006d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d8e:	e02d      	b.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f88d 	bl	8006eb0 <I2C_IsAcknowledgeFailed>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e02d      	b.n	8006dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d021      	beq.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da8:	f7fd fd20 	bl	80047ec <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d302      	bcc.n	8006dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d116      	bne.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e007      	b.n	8006dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d1ca      	bne.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e10:	e042      	b.n	8006e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d119      	bne.n	8006e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0210 	mvn.w	r2, #16
 8006e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e029      	b.n	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e54:	f7fd fcca 	bl	80047ec <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d116      	bne.n	8006e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f043 0220 	orr.w	r2, r3, #32
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e007      	b.n	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d1b5      	bne.n	8006e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec6:	d11b      	bne.n	8006f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	f043 0204 	orr.w	r2, r3, #4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6413      	str	r3, [r2, #64]	; 0x40
 8006f2a:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f36:	4b1b      	ldr	r3, [pc, #108]	; (8006fa4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f3c:	f7fd fc56 	bl	80047ec <HAL_GetTick>
 8006f40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f42:	e009      	b.n	8006f58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f44:	f7fd fc52 	bl	80047ec <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f52:	d901      	bls.n	8006f58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01f      	b.n	8006f98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d1ee      	bne.n	8006f44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f6c:	f7fd fc3e 	bl	80047ec <HAL_GetTick>
 8006f70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f72:	e009      	b.n	8006f88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f74:	f7fd fc3a 	bl	80047ec <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f82:	d901      	bls.n	8006f88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e007      	b.n	8006f98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f94:	d1ee      	bne.n	8006f74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	420e0040 	.word	0x420e0040
 8006fa8:	40007000 	.word	0x40007000
 8006fac:	420e0044 	.word	0x420e0044

08006fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0cc      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc4:	4b68      	ldr	r3, [pc, #416]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d90c      	bls.n	8006fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd2:	4b65      	ldr	r3, [pc, #404]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fda:	4b63      	ldr	r3, [pc, #396]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d001      	beq.n	8006fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0b8      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007004:	4b59      	ldr	r3, [pc, #356]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a58      	ldr	r2, [pc, #352]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800701c:	4b53      	ldr	r3, [pc, #332]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a52      	ldr	r2, [pc, #328]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007028:	4b50      	ldr	r3, [pc, #320]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	494d      	ldr	r1, [pc, #308]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d044      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b47      	ldr	r3, [pc, #284]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d119      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e07f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d003      	beq.n	800706e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706a:	2b03      	cmp	r3, #3
 800706c:	d107      	bne.n	800707e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706e:	4b3f      	ldr	r3, [pc, #252]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e06f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707e:	4b3b      	ldr	r3, [pc, #236]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e067      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708e:	4b37      	ldr	r3, [pc, #220]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 0203 	bic.w	r2, r3, #3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4934      	ldr	r1, [pc, #208]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	4313      	orrs	r3, r2
 800709e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a0:	f7fd fba4 	bl	80047ec <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	e00a      	b.n	80070be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a8:	f7fd fba0 	bl	80047ec <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e04f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070be:	4b2b      	ldr	r3, [pc, #172]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 020c 	and.w	r2, r3, #12
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d1eb      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d20c      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b20      	ldr	r3, [pc, #128]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e032      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4916      	ldr	r1, [pc, #88]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007122:	4b12      	ldr	r3, [pc, #72]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	490e      	ldr	r1, [pc, #56]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007136:	f000 f855 	bl	80071e4 <HAL_RCC_GetSysClockFreq>
 800713a:	4602      	mov	r2, r0
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	490a      	ldr	r1, [pc, #40]	; (8007170 <HAL_RCC_ClockConfig+0x1c0>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd fb04 	bl	8004764 <HAL_InitTick>

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023c00 	.word	0x40023c00
 800716c:	40023800 	.word	0x40023800
 8007170:	0800e38c 	.word	0x0800e38c
 8007174:	2000002c 	.word	0x2000002c
 8007178:	20000034 	.word	0x20000034

0800717c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <HAL_RCC_GetHCLKFreq+0x14>)
 8007182:	681b      	ldr	r3, [r3, #0]
}
 8007184:	4618      	mov	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	2000002c 	.word	0x2000002c

08007194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007198:	f7ff fff0 	bl	800717c <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0a9b      	lsrs	r3, r3, #10
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	; (80071b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40023800 	.word	0x40023800
 80071b8:	0800e39c 	.word	0x0800e39c

080071bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071c0:	f7ff ffdc 	bl	800717c <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0b5b      	lsrs	r3, r3, #13
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4903      	ldr	r1, [pc, #12]	; (80071e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40023800 	.word	0x40023800
 80071e0:	0800e39c 	.word	0x0800e39c

080071e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e8:	b0a6      	sub	sp, #152	; 0x98
 80071ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800720a:	4bc8      	ldr	r3, [pc, #800]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	2b0c      	cmp	r3, #12
 8007214:	f200 817e 	bhi.w	8007514 <HAL_RCC_GetSysClockFreq+0x330>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_RCC_GetSysClockFreq+0x3c>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007255 	.word	0x08007255
 8007224:	08007515 	.word	0x08007515
 8007228:	08007515 	.word	0x08007515
 800722c:	08007515 	.word	0x08007515
 8007230:	0800725d 	.word	0x0800725d
 8007234:	08007515 	.word	0x08007515
 8007238:	08007515 	.word	0x08007515
 800723c:	08007515 	.word	0x08007515
 8007240:	08007265 	.word	0x08007265
 8007244:	08007515 	.word	0x08007515
 8007248:	08007515 	.word	0x08007515
 800724c:	08007515 	.word	0x08007515
 8007250:	080073cf 	.word	0x080073cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007254:	4bb6      	ldr	r3, [pc, #728]	; (8007530 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800725a:	e15f      	b.n	800751c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725c:	4bb5      	ldr	r3, [pc, #724]	; (8007534 <HAL_RCC_GetSysClockFreq+0x350>)
 800725e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007262:	e15b      	b.n	800751c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	4bb1      	ldr	r3, [pc, #708]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007270:	4bae      	ldr	r3, [pc, #696]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d031      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727c:	4bab      	ldr	r3, [pc, #684]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	099b      	lsrs	r3, r3, #6
 8007282:	2200      	movs	r2, #0
 8007284:	66bb      	str	r3, [r7, #104]	; 0x68
 8007286:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	663b      	str	r3, [r7, #96]	; 0x60
 8007290:	2300      	movs	r3, #0
 8007292:	667b      	str	r3, [r7, #100]	; 0x64
 8007294:	4ba7      	ldr	r3, [pc, #668]	; (8007534 <HAL_RCC_GetSysClockFreq+0x350>)
 8007296:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800729a:	462a      	mov	r2, r5
 800729c:	fb03 f202 	mul.w	r2, r3, r2
 80072a0:	2300      	movs	r3, #0
 80072a2:	4621      	mov	r1, r4
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	4aa2      	ldr	r2, [pc, #648]	; (8007534 <HAL_RCC_GetSysClockFreq+0x350>)
 80072ac:	4621      	mov	r1, r4
 80072ae:	fba1 1202 	umull	r1, r2, r1, r2
 80072b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072b4:	460a      	mov	r2, r1
 80072b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80072b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80072ba:	4413      	add	r3, r2
 80072bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c2:	2200      	movs	r2, #0
 80072c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80072c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80072d0:	f7f9 fcfa 	bl	8000cc8 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4613      	mov	r3, r2
 80072da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072de:	e064      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072e0:	4b92      	ldr	r3, [pc, #584]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	2200      	movs	r2, #0
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
 80072ea:	657a      	str	r2, [r7, #84]	; 0x54
 80072ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f4:	2300      	movs	r3, #0
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80072fc:	4622      	mov	r2, r4
 80072fe:	462b      	mov	r3, r5
 8007300:	f04f 0000 	mov.w	r0, #0
 8007304:	f04f 0100 	mov.w	r1, #0
 8007308:	0159      	lsls	r1, r3, #5
 800730a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800730e:	0150      	lsls	r0, r2, #5
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4621      	mov	r1, r4
 8007316:	1a51      	subs	r1, r2, r1
 8007318:	6139      	str	r1, [r7, #16]
 800731a:	4629      	mov	r1, r5
 800731c:	eb63 0301 	sbc.w	r3, r3, r1
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800732e:	4659      	mov	r1, fp
 8007330:	018b      	lsls	r3, r1, #6
 8007332:	4651      	mov	r1, sl
 8007334:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007338:	4651      	mov	r1, sl
 800733a:	018a      	lsls	r2, r1, #6
 800733c:	4651      	mov	r1, sl
 800733e:	ebb2 0801 	subs.w	r8, r2, r1
 8007342:	4659      	mov	r1, fp
 8007344:	eb63 0901 	sbc.w	r9, r3, r1
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007354:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007358:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800735c:	4690      	mov	r8, r2
 800735e:	4699      	mov	r9, r3
 8007360:	4623      	mov	r3, r4
 8007362:	eb18 0303 	adds.w	r3, r8, r3
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	462b      	mov	r3, r5
 800736a:	eb49 0303 	adc.w	r3, r9, r3
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800737c:	4629      	mov	r1, r5
 800737e:	028b      	lsls	r3, r1, #10
 8007380:	4621      	mov	r1, r4
 8007382:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007386:	4621      	mov	r1, r4
 8007388:	028a      	lsls	r2, r1, #10
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007392:	2200      	movs	r2, #0
 8007394:	643b      	str	r3, [r7, #64]	; 0x40
 8007396:	647a      	str	r2, [r7, #68]	; 0x44
 8007398:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800739c:	f7f9 fc94 	bl	8000cc8 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073aa:	4b60      	ldr	r3, [pc, #384]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	0c1b      	lsrs	r3, r3, #16
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	3301      	adds	r3, #1
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80073bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80073cc:	e0a6      	b.n	800751c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073ce:	4b57      	ldr	r3, [pc, #348]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073da:	4b54      	ldr	r3, [pc, #336]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d02a      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073e6:	4b51      	ldr	r3, [pc, #324]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	099b      	lsrs	r3, r3, #6
 80073ec:	2200      	movs	r2, #0
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073f8:	2100      	movs	r1, #0
 80073fa:	4b4e      	ldr	r3, [pc, #312]	; (8007534 <HAL_RCC_GetSysClockFreq+0x350>)
 80073fc:	fb03 f201 	mul.w	r2, r3, r1
 8007400:	2300      	movs	r3, #0
 8007402:	fb00 f303 	mul.w	r3, r0, r3
 8007406:	4413      	add	r3, r2
 8007408:	4a4a      	ldr	r2, [pc, #296]	; (8007534 <HAL_RCC_GetSysClockFreq+0x350>)
 800740a:	fba0 1202 	umull	r1, r2, r0, r2
 800740e:	677a      	str	r2, [r7, #116]	; 0x74
 8007410:	460a      	mov	r2, r1
 8007412:	673a      	str	r2, [r7, #112]	; 0x70
 8007414:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007416:	4413      	add	r3, r2
 8007418:	677b      	str	r3, [r7, #116]	; 0x74
 800741a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800741e:	2200      	movs	r2, #0
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
 8007422:	637a      	str	r2, [r7, #52]	; 0x34
 8007424:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007428:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800742c:	f7f9 fc4c 	bl	8000cc8 <__aeabi_uldivmod>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4613      	mov	r3, r2
 8007436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800743a:	e05b      	b.n	80074f4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743c:	4b3b      	ldr	r3, [pc, #236]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	099b      	lsrs	r3, r3, #6
 8007442:	2200      	movs	r2, #0
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
 8007446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	2300      	movs	r3, #0
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	f04f 0000 	mov.w	r0, #0
 8007460:	f04f 0100 	mov.w	r1, #0
 8007464:	0159      	lsls	r1, r3, #5
 8007466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800746a:	0150      	lsls	r0, r2, #5
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4641      	mov	r1, r8
 8007472:	ebb2 0a01 	subs.w	sl, r2, r1
 8007476:	4649      	mov	r1, r9
 8007478:	eb63 0b01 	sbc.w	fp, r3, r1
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800748c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007490:	ebb2 040a 	subs.w	r4, r2, sl
 8007494:	eb63 050b 	sbc.w	r5, r3, fp
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	00eb      	lsls	r3, r5, #3
 80074a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a6:	00e2      	lsls	r2, r4, #3
 80074a8:	4614      	mov	r4, r2
 80074aa:	461d      	mov	r5, r3
 80074ac:	4643      	mov	r3, r8
 80074ae:	18e3      	adds	r3, r4, r3
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	464b      	mov	r3, r9
 80074b4:	eb45 0303 	adc.w	r3, r5, r3
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074c6:	4629      	mov	r1, r5
 80074c8:	028b      	lsls	r3, r1, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074d0:	4621      	mov	r1, r4
 80074d2:	028a      	lsls	r2, r1, #10
 80074d4:	4610      	mov	r0, r2
 80074d6:	4619      	mov	r1, r3
 80074d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074dc:	2200      	movs	r2, #0
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	61fa      	str	r2, [r7, #28]
 80074e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e6:	f7f9 fbef 	bl	8000cc8 <__aeabi_uldivmod>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4613      	mov	r3, r2
 80074f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80074f4:	4b0d      	ldr	r3, [pc, #52]	; (800752c <HAL_RCC_GetSysClockFreq+0x348>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	0f1b      	lsrs	r3, r3, #28
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8007502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007512:	e003      	b.n	800751c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800751a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800751c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007520:	4618      	mov	r0, r3
 8007522:	3798      	adds	r7, #152	; 0x98
 8007524:	46bd      	mov	sp, r7
 8007526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800
 8007530:	00f42400 	.word	0x00f42400
 8007534:	00b71b00 	.word	0x00b71b00

08007538 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e28d      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 8083 	beq.w	800765e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007558:	4b94      	ldr	r3, [pc, #592]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 030c 	and.w	r3, r3, #12
 8007560:	2b04      	cmp	r3, #4
 8007562:	d019      	beq.n	8007598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007564:	4b91      	ldr	r3, [pc, #580]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800756c:	2b08      	cmp	r3, #8
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007570:	4b8e      	ldr	r3, [pc, #568]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800757c:	d00c      	beq.n	8007598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800757e:	4b8b      	ldr	r3, [pc, #556]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007586:	2b0c      	cmp	r3, #12
 8007588:	d112      	bne.n	80075b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758a:	4b88      	ldr	r3, [pc, #544]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007596:	d10b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	4b84      	ldr	r3, [pc, #528]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05b      	beq.n	800765c <HAL_RCC_OscConfig+0x124>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d157      	bne.n	800765c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e25a      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d106      	bne.n	80075c8 <HAL_RCC_OscConfig+0x90>
 80075ba:	4b7c      	ldr	r3, [pc, #496]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7b      	ldr	r2, [pc, #492]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e01d      	b.n	8007604 <HAL_RCC_OscConfig+0xcc>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0xb4>
 80075d2:	4b76      	ldr	r3, [pc, #472]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a75      	ldr	r2, [pc, #468]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b73      	ldr	r3, [pc, #460]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a72      	ldr	r2, [pc, #456]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0xcc>
 80075ec:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6e      	ldr	r2, [pc, #440]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b6c      	ldr	r3, [pc, #432]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a6b      	ldr	r2, [pc, #428]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fd f8ee 	bl	80047ec <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007614:	f7fd f8ea 	bl	80047ec <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	; 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e21f      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b61      	ldr	r3, [pc, #388]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0xdc>
 8007632:	e014      	b.n	800765e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fd f8da 	bl	80047ec <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800763c:	f7fd f8d6 	bl	80047ec <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e20b      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	4b57      	ldr	r3, [pc, #348]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x104>
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d06f      	beq.n	800774a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800766a:	4b50      	ldr	r3, [pc, #320]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b00      	cmp	r3, #0
 8007674:	d017      	beq.n	80076a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007676:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800767e:	2b08      	cmp	r3, #8
 8007680:	d105      	bne.n	800768e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007682:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800768e:	4b47      	ldr	r3, [pc, #284]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d11c      	bne.n	80076d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769a:	4b44      	ldr	r3, [pc, #272]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d116      	bne.n	80076d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	4b41      	ldr	r3, [pc, #260]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_RCC_OscConfig+0x186>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d001      	beq.n	80076be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e1d3      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076be:	4b3b      	ldr	r3, [pc, #236]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4937      	ldr	r1, [pc, #220]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d2:	e03a      	b.n	800774a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d020      	beq.n	800771e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076dc:	4b34      	ldr	r3, [pc, #208]	; (80077b0 <HAL_RCC_OscConfig+0x278>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fd f883 	bl	80047ec <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ea:	f7fd f87f 	bl	80047ec <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e1b4      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fc:	4b2b      	ldr	r3, [pc, #172]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007708:	4b28      	ldr	r3, [pc, #160]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4925      	ldr	r1, [pc, #148]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]
 800771c:	e015      	b.n	800774a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800771e:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <HAL_RCC_OscConfig+0x278>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fd f862 	bl	80047ec <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800772c:	f7fd f85e 	bl	80047ec <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e193      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773e:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d036      	beq.n	80077c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d016      	beq.n	800778c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800775e:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <HAL_RCC_OscConfig+0x27c>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007764:	f7fd f842 	bl	80047ec <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800776c:	f7fd f83e 	bl	80047ec <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e173      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x234>
 800778a:	e01b      	b.n	80077c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCC_OscConfig+0x27c>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fd f82b 	bl	80047ec <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	e00e      	b.n	80077b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779a:	f7fd f827 	bl	80047ec <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d907      	bls.n	80077b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e15c      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
 80077ac:	40023800 	.word	0x40023800
 80077b0:	42470000 	.word	0x42470000
 80077b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b8:	4b8a      	ldr	r3, [pc, #552]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1ea      	bne.n	800779a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8097 	beq.w	8007900 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077d6:	4b83      	ldr	r3, [pc, #524]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10f      	bne.n	8007802 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	60bb      	str	r3, [r7, #8]
 80077e6:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a7e      	ldr	r2, [pc, #504]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
 80077f2:	4b7c      	ldr	r3, [pc, #496]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007802:	4b79      	ldr	r3, [pc, #484]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d118      	bne.n	8007840 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800780e:	4b76      	ldr	r3, [pc, #472]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a75      	ldr	r2, [pc, #468]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781a:	f7fc ffe7 	bl	80047ec <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007820:	e008      	b.n	8007834 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007822:	f7fc ffe3 	bl	80047ec <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e118      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007834:	4b6c      	ldr	r3, [pc, #432]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0f0      	beq.n	8007822 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <HAL_RCC_OscConfig+0x31e>
 8007848:	4b66      	ldr	r3, [pc, #408]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	4a65      	ldr	r2, [pc, #404]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	6713      	str	r3, [r2, #112]	; 0x70
 8007854:	e01c      	b.n	8007890 <HAL_RCC_OscConfig+0x358>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b05      	cmp	r3, #5
 800785c:	d10c      	bne.n	8007878 <HAL_RCC_OscConfig+0x340>
 800785e:	4b61      	ldr	r3, [pc, #388]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	4a60      	ldr	r2, [pc, #384]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007864:	f043 0304 	orr.w	r3, r3, #4
 8007868:	6713      	str	r3, [r2, #112]	; 0x70
 800786a:	4b5e      	ldr	r3, [pc, #376]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a5d      	ldr	r2, [pc, #372]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	e00b      	b.n	8007890 <HAL_RCC_OscConfig+0x358>
 8007878:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	4a59      	ldr	r2, [pc, #356]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	; 0x70
 8007884:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	4a56      	ldr	r2, [pc, #344]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800788a:	f023 0304 	bic.w	r3, r3, #4
 800788e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007898:	f7fc ffa8 	bl	80047ec <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078a0:	f7fc ffa4 	bl	80047ec <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0d7      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b6:	4b4b      	ldr	r3, [pc, #300]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0ee      	beq.n	80078a0 <HAL_RCC_OscConfig+0x368>
 80078c2:	e014      	b.n	80078ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c4:	f7fc ff92 	bl	80047ec <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078cc:	f7fc ff8e 	bl	80047ec <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e0c1      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e2:	4b40      	ldr	r3, [pc, #256]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ee      	bne.n	80078cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d105      	bne.n	8007900 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f4:	4b3b      	ldr	r3, [pc, #236]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	4a3a      	ldr	r2, [pc, #232]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80ad 	beq.w	8007a64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 030c 	and.w	r3, r3, #12
 8007912:	2b08      	cmp	r3, #8
 8007914:	d060      	beq.n	80079d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d145      	bne.n	80079aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791e:	4b33      	ldr	r3, [pc, #204]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007924:	f7fc ff62 	bl	80047ec <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800792c:	f7fc ff5e 	bl	80047ec <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e093      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793e:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f0      	bne.n	800792c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69da      	ldr	r2, [r3, #28]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	019b      	lsls	r3, r3, #6
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	3b01      	subs	r3, #1
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	491b      	ldr	r1, [pc, #108]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007978:	4313      	orrs	r3, r2
 800797a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800797c:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007982:	f7fc ff33 	bl	80047ec <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007988:	e008      	b.n	800799c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798a:	f7fc ff2f 	bl	80047ec <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d901      	bls.n	800799c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e064      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800799c:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0f0      	beq.n	800798a <HAL_RCC_OscConfig+0x452>
 80079a8:	e05c      	b.n	8007a64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079aa:	4b10      	ldr	r3, [pc, #64]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fc ff1c 	bl	80047ec <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fc ff18 	bl	80047ec <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e04d      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x480>
 80079d6:	e045      	b.n	8007a64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e040      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40007000 	.word	0x40007000
 80079ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f0:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <HAL_RCC_OscConfig+0x538>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d030      	beq.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d129      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d122      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a20:	4013      	ands	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d119      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d10f      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800

08007a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e07b      	b.n	8007b7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d108      	bne.n	8007aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a96:	d009      	beq.n	8007aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	61da      	str	r2, [r3, #28]
 8007a9e:	e005      	b.n	8007aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fc f850 	bl	8003b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b30:	ea42 0103 	orr.w	r1, r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	f003 0104 	and.w	r1, r3, #4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	f003 0210 	and.w	r2, r3, #16
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e041      	b.n	8007c1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d106      	bne.n	8007bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7fc f935 	bl	8003e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f000 fcdb 	bl	8008580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e04e      	b.n	8007cda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a23      	ldr	r2, [pc, #140]	; (8007ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c66:	d01d      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <HAL_TIM_Base_Start_IT+0xc8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d111      	bne.n	8007cc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d010      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc6:	e007      	b.n	8007cd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40001800 	.word	0x40001800

08007d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e041      	b.n	8007d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fb ffbc 	bl	8003ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fc1c 	bl	8008580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <HAL_TIM_PWM_Start+0x24>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e022      	b.n	8007e0e <HAL_TIM_PWM_Start+0x6a>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d109      	bne.n	8007de2 <HAL_TIM_PWM_Start+0x3e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	bf14      	ite	ne
 8007dda:	2301      	movne	r3, #1
 8007ddc:	2300      	moveq	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	e015      	b.n	8007e0e <HAL_TIM_PWM_Start+0x6a>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d109      	bne.n	8007dfc <HAL_TIM_PWM_Start+0x58>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	bf14      	ite	ne
 8007df4:	2301      	movne	r3, #1
 8007df6:	2300      	moveq	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	e008      	b.n	8007e0e <HAL_TIM_PWM_Start+0x6a>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	bf14      	ite	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	2300      	moveq	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e07c      	b.n	8007f10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x82>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e24:	e013      	b.n	8007e4e <HAL_TIM_PWM_Start+0xaa>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start+0x92>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e34:	e00b      	b.n	8007e4e <HAL_TIM_PWM_Start+0xaa>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start+0xa2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e44:	e003      	b.n	8007e4e <HAL_TIM_PWM_Start+0xaa>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2201      	movs	r2, #1
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fde2 	bl	8008a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <HAL_TIM_PWM_Start+0x174>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_TIM_PWM_Start+0xcc>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <HAL_TIM_PWM_Start+0x178>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIM_PWM_Start+0xd0>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <HAL_TIM_PWM_Start+0xd2>
 8007e74:	2300      	movs	r3, #0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a22      	ldr	r2, [pc, #136]	; (8007f18 <HAL_TIM_PWM_Start+0x174>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d022      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9c:	d01d      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <HAL_TIM_PWM_Start+0x17c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d018      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <HAL_TIM_PWM_Start+0x180>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <HAL_TIM_PWM_Start+0x184>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00e      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a16      	ldr	r2, [pc, #88]	; (8007f1c <HAL_TIM_PWM_Start+0x178>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <HAL_TIM_PWM_Start+0x188>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <HAL_TIM_PWM_Start+0x136>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <HAL_TIM_PWM_Start+0x18c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	d010      	beq.n	8007f0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efc:	e007      	b.n	8007f0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40001800 	.word	0x40001800

08007f34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e097      	b.n	8008078 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fb fedf 	bl	8003d20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f78:	f023 0307 	bic.w	r3, r3, #7
 8007f7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f000 faf9 	bl	8008580 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007fd4:	f023 030c 	bic.w	r3, r3, #12
 8007fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	031b      	lsls	r3, r3, #12
 8008004:	4313      	orrs	r3, r2
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4313      	orrs	r3, r2
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008090:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008098:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80080a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d110      	bne.n	80080d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d102      	bne.n	80080bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80080b6:	7b7b      	ldrb	r3, [r7, #13]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d001      	beq.n	80080c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e069      	b.n	8008194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080d0:	e031      	b.n	8008136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d110      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d102      	bne.n	80080e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080de:	7b3b      	ldrb	r3, [r7, #12]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d001      	beq.n	80080e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e055      	b.n	8008194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f8:	e01d      	b.n	8008136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d108      	bne.n	8008112 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d105      	bne.n	8008112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008106:	7b7b      	ldrb	r3, [r7, #13]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d102      	bne.n	8008112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800810c:	7b3b      	ldrb	r3, [r7, #12]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d001      	beq.n	8008116 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e03e      	b.n	8008194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2202      	movs	r2, #2
 8008132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_TIM_Encoder_Start+0xc4>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d008      	beq.n	8008154 <HAL_TIM_Encoder_Start+0xd4>
 8008142:	e00f      	b.n	8008164 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2201      	movs	r2, #1
 800814a:	2100      	movs	r1, #0
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fc67 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8008152:	e016      	b.n	8008182 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2201      	movs	r2, #1
 800815a:	2104      	movs	r1, #4
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fc5f 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8008162:	e00e      	b.n	8008182 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc57 	bl	8008a20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	2104      	movs	r1, #4
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fc50 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8008180:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0201 	orr.w	r2, r2, #1
 8008190:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0202 	mvn.w	r2, #2
 80081c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9b0 	bl	8008544 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9a2 	bl	8008530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f9b3 	bl	8008558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b04      	cmp	r3, #4
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b04      	cmp	r3, #4
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0204 	mvn.w	r2, #4
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f986 	bl	8008544 <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f978 	bl	8008530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f989 	bl	8008558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b08      	cmp	r3, #8
 8008258:	d122      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b08      	cmp	r3, #8
 8008266:	d11b      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0208 	mvn.w	r2, #8
 8008270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2204      	movs	r2, #4
 8008276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f95c 	bl	8008544 <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f94e 	bl	8008530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f95f 	bl	8008558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b10      	cmp	r3, #16
 80082ac:	d122      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b10      	cmp	r3, #16
 80082ba:	d11b      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0210 	mvn.w	r2, #16
 80082c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2208      	movs	r2, #8
 80082ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f932 	bl	8008544 <HAL_TIM_IC_CaptureCallback>
 80082e0:	e005      	b.n	80082ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f924 	bl	8008530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f935 	bl	8008558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b01      	cmp	r3, #1
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0201 	mvn.w	r2, #1
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fc f8a8 	bl	8004470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b80      	cmp	r3, #128	; 0x80
 800832c:	d10e      	bne.n	800834c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008338:	2b80      	cmp	r3, #128	; 0x80
 800833a:	d107      	bne.n	800834c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fc68 	bl	8008c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d10e      	bne.n	8008378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008364:	2b40      	cmp	r3, #64	; 0x40
 8008366:	d107      	bne.n	8008378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f8fa 	bl	800856c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b20      	cmp	r3, #32
 8008384:	d10e      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b20      	cmp	r3, #32
 8008392:	d107      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f06f 0220 	mvn.w	r2, #32
 800839c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc32 	bl	8008c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083c6:	2302      	movs	r3, #2
 80083c8:	e0ae      	b.n	8008528 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	f200 809f 	bhi.w	8008518 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008415 	.word	0x08008415
 80083e4:	08008519 	.word	0x08008519
 80083e8:	08008519 	.word	0x08008519
 80083ec:	08008519 	.word	0x08008519
 80083f0:	08008455 	.word	0x08008455
 80083f4:	08008519 	.word	0x08008519
 80083f8:	08008519 	.word	0x08008519
 80083fc:	08008519 	.word	0x08008519
 8008400:	08008497 	.word	0x08008497
 8008404:	08008519 	.word	0x08008519
 8008408:	08008519 	.word	0x08008519
 800840c:	08008519 	.word	0x08008519
 8008410:	080084d7 	.word	0x080084d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f950 	bl	80086c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0208 	orr.w	r2, r2, #8
 800842e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6999      	ldr	r1, [r3, #24]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	619a      	str	r2, [r3, #24]
      break;
 8008452:	e064      	b.n	800851e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f9a0 	bl	80087a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6999      	ldr	r1, [r3, #24]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	619a      	str	r2, [r3, #24]
      break;
 8008494:	e043      	b.n	800851e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 f9f5 	bl	800888c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69da      	ldr	r2, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0208 	orr.w	r2, r2, #8
 80084b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0204 	bic.w	r2, r2, #4
 80084c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69d9      	ldr	r1, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	61da      	str	r2, [r3, #28]
      break;
 80084d4:	e023      	b.n	800851e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fa49 	bl	8008974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69d9      	ldr	r1, [r3, #28]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	021a      	lsls	r2, r3, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	61da      	str	r2, [r3, #28]
      break;
 8008516:	e002      	b.n	800851e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
      break;
 800851c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a40      	ldr	r2, [pc, #256]	; (8008694 <TIM_Base_SetConfig+0x114>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d013      	beq.n	80085c0 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859e:	d00f      	beq.n	80085c0 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a3d      	ldr	r2, [pc, #244]	; (8008698 <TIM_Base_SetConfig+0x118>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <TIM_Base_SetConfig+0x40>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a3c      	ldr	r2, [pc, #240]	; (800869c <TIM_Base_SetConfig+0x11c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_Base_SetConfig+0x40>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a3b      	ldr	r2, [pc, #236]	; (80086a0 <TIM_Base_SetConfig+0x120>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_Base_SetConfig+0x40>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a3a      	ldr	r2, [pc, #232]	; (80086a4 <TIM_Base_SetConfig+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d108      	bne.n	80085d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <TIM_Base_SetConfig+0x114>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d02b      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e0:	d027      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2c      	ldr	r2, [pc, #176]	; (8008698 <TIM_Base_SetConfig+0x118>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d023      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2b      	ldr	r2, [pc, #172]	; (800869c <TIM_Base_SetConfig+0x11c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01f      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <TIM_Base_SetConfig+0x120>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01b      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <TIM_Base_SetConfig+0x124>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d017      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <TIM_Base_SetConfig+0x128>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a27      	ldr	r2, [pc, #156]	; (80086ac <TIM_Base_SetConfig+0x12c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d00f      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a26      	ldr	r2, [pc, #152]	; (80086b0 <TIM_Base_SetConfig+0x130>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00b      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a25      	ldr	r2, [pc, #148]	; (80086b4 <TIM_Base_SetConfig+0x134>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d007      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a24      	ldr	r2, [pc, #144]	; (80086b8 <TIM_Base_SetConfig+0x138>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d003      	beq.n	8008632 <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a23      	ldr	r2, [pc, #140]	; (80086bc <TIM_Base_SetConfig+0x13c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <TIM_Base_SetConfig+0x114>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_Base_SetConfig+0xf8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a0c      	ldr	r2, [pc, #48]	; (80086a4 <TIM_Base_SetConfig+0x124>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d103      	bne.n	8008680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	615a      	str	r2, [r3, #20]
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	40010000 	.word	0x40010000
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40000c00 	.word	0x40000c00
 80086a4:	40010400 	.word	0x40010400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800
 80086b4:	40001800 	.word	0x40001800
 80086b8:	40001c00 	.word	0x40001c00
 80086bc:	40002000 	.word	0x40002000

080086c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	f023 0201 	bic.w	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f023 0302 	bic.w	r3, r3, #2
 8008708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a20      	ldr	r2, [pc, #128]	; (8008798 <TIM_OC1_SetConfig+0xd8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC1_SetConfig+0x64>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1f      	ldr	r2, [pc, #124]	; (800879c <TIM_OC1_SetConfig+0xdc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10c      	bne.n	800873e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0308 	bic.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a15      	ldr	r2, [pc, #84]	; (8008798 <TIM_OC1_SetConfig+0xd8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC1_SetConfig+0x8e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a14      	ldr	r2, [pc, #80]	; (800879c <TIM_OC1_SetConfig+0xdc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d111      	bne.n	8008772 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	40010000 	.word	0x40010000
 800879c:	40010400 	.word	0x40010400

080087a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0210 	bic.w	r2, r3, #16
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0320 	bic.w	r3, r3, #32
 80087ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a22      	ldr	r2, [pc, #136]	; (8008884 <TIM_OC2_SetConfig+0xe4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_OC2_SetConfig+0x68>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a21      	ldr	r2, [pc, #132]	; (8008888 <TIM_OC2_SetConfig+0xe8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d10d      	bne.n	8008824 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800880e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a17      	ldr	r2, [pc, #92]	; (8008884 <TIM_OC2_SetConfig+0xe4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC2_SetConfig+0x94>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a16      	ldr	r2, [pc, #88]	; (8008888 <TIM_OC2_SetConfig+0xe8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d113      	bne.n	800885c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800883a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40010000 	.word	0x40010000
 8008888:	40010400 	.word	0x40010400

0800888c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0303 	bic.w	r3, r3, #3
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a21      	ldr	r2, [pc, #132]	; (800896c <TIM_OC3_SetConfig+0xe0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d003      	beq.n	80088f2 <TIM_OC3_SetConfig+0x66>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a20      	ldr	r2, [pc, #128]	; (8008970 <TIM_OC3_SetConfig+0xe4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10d      	bne.n	800890e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800890c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a16      	ldr	r2, [pc, #88]	; (800896c <TIM_OC3_SetConfig+0xe0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_OC3_SetConfig+0x92>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a15      	ldr	r2, [pc, #84]	; (8008970 <TIM_OC3_SetConfig+0xe4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d113      	bne.n	8008946 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800892c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4313      	orrs	r3, r2
 8008938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	621a      	str	r2, [r3, #32]
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	40010000 	.word	0x40010000
 8008970:	40010400 	.word	0x40010400

08008974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	031b      	lsls	r3, r3, #12
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a12      	ldr	r2, [pc, #72]	; (8008a18 <TIM_OC4_SetConfig+0xa4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC4_SetConfig+0x68>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a11      	ldr	r2, [pc, #68]	; (8008a1c <TIM_OC4_SetConfig+0xa8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d109      	bne.n	80089f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	019b      	lsls	r3, r3, #6
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40010000 	.word	0x40010000
 8008a1c:	40010400 	.word	0x40010400

08008a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2201      	movs	r2, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	401a      	ands	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e05a      	b.n	8008b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d022      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad0:	d01d      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1d      	ldr	r2, [pc, #116]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d018      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d013      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00e      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d009      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10c      	bne.n	8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40010000 	.word	0x40010000
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	40000c00 	.word	0x40000c00
 8008b58:	40010400 	.word	0x40010400
 8008b5c:	40014000 	.word	0x40014000
 8008b60:	40001800 	.word	0x40001800

08008b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e03d      	b.n	8008bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e03f      	b.n	8008cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fb f968 	bl	8003f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2224      	movs	r2, #36	; 0x24
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f829 	bl	8008ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695a      	ldr	r2, [r3, #20]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cd0:	b0c0      	sub	sp, #256	; 0x100
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	68d9      	ldr	r1, [r3, #12]
 8008cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	ea40 0301 	orr.w	r3, r0, r1
 8008cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d24:	f021 010c 	bic.w	r1, r1, #12
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d32:	430b      	orrs	r3, r1
 8008d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d46:	6999      	ldr	r1, [r3, #24]
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	ea40 0301 	orr.w	r3, r0, r1
 8008d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b8f      	ldr	r3, [pc, #572]	; (8008f98 <UART_SetConfig+0x2cc>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d005      	beq.n	8008d6c <UART_SetConfig+0xa0>
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	4b8d      	ldr	r3, [pc, #564]	; (8008f9c <UART_SetConfig+0x2d0>)
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d104      	bne.n	8008d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d6c:	f7fe fa26 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 8008d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d74:	e003      	b.n	8008d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d76:	f7fe fa0d 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8008d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d88:	f040 810c 	bne.w	8008fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d9e:	4622      	mov	r2, r4
 8008da0:	462b      	mov	r3, r5
 8008da2:	1891      	adds	r1, r2, r2
 8008da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008da6:	415b      	adcs	r3, r3
 8008da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008dae:	4621      	mov	r1, r4
 8008db0:	eb12 0801 	adds.w	r8, r2, r1
 8008db4:	4629      	mov	r1, r5
 8008db6:	eb43 0901 	adc.w	r9, r3, r1
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dce:	4690      	mov	r8, r2
 8008dd0:	4699      	mov	r9, r3
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	eb18 0303 	adds.w	r3, r8, r3
 8008dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ddc:	462b      	mov	r3, r5
 8008dde:	eb49 0303 	adc.w	r3, r9, r3
 8008de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	18db      	adds	r3, r3, r3
 8008dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008e00:	4613      	mov	r3, r2
 8008e02:	eb42 0303 	adc.w	r3, r2, r3
 8008e06:	657b      	str	r3, [r7, #84]	; 0x54
 8008e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e10:	f7f7 ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4b61      	ldr	r3, [pc, #388]	; (8008fa0 <UART_SetConfig+0x2d4>)
 8008e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	011c      	lsls	r4, r3, #4
 8008e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e34:	4642      	mov	r2, r8
 8008e36:	464b      	mov	r3, r9
 8008e38:	1891      	adds	r1, r2, r2
 8008e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e3c:	415b      	adcs	r3, r3
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e44:	4641      	mov	r1, r8
 8008e46:	eb12 0a01 	adds.w	sl, r2, r1
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e64:	4692      	mov	sl, r2
 8008e66:	469b      	mov	fp, r3
 8008e68:	4643      	mov	r3, r8
 8008e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8008e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e72:	464b      	mov	r3, r9
 8008e74:	eb4b 0303 	adc.w	r3, fp, r3
 8008e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e90:	460b      	mov	r3, r1
 8008e92:	18db      	adds	r3, r3, r3
 8008e94:	643b      	str	r3, [r7, #64]	; 0x40
 8008e96:	4613      	mov	r3, r2
 8008e98:	eb42 0303 	adc.w	r3, r2, r3
 8008e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ea6:	f7f7 ff0f 	bl	8000cc8 <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4b3b      	ldr	r3, [pc, #236]	; (8008fa0 <UART_SetConfig+0x2d4>)
 8008eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	2264      	movs	r2, #100	; 0x64
 8008eba:	fb02 f303 	mul.w	r3, r2, r3
 8008ebe:	1acb      	subs	r3, r1, r3
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ec6:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <UART_SetConfig+0x2d4>)
 8008ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ed4:	441c      	add	r4, r3
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ef8:	4641      	mov	r1, r8
 8008efa:	1851      	adds	r1, r2, r1
 8008efc:	6339      	str	r1, [r7, #48]	; 0x30
 8008efe:	4649      	mov	r1, r9
 8008f00:	414b      	adcs	r3, r1
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f10:	4659      	mov	r1, fp
 8008f12:	00cb      	lsls	r3, r1, #3
 8008f14:	4651      	mov	r1, sl
 8008f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1a:	4651      	mov	r1, sl
 8008f1c:	00ca      	lsls	r2, r1, #3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	4642      	mov	r2, r8
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	460a      	mov	r2, r1
 8008f30:	eb42 0303 	adc.w	r3, r2, r3
 8008f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	18db      	adds	r3, r3, r3
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f52:	4613      	mov	r3, r2
 8008f54:	eb42 0303 	adc.w	r3, r2, r3
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f62:	f7f7 feb1 	bl	8000cc8 <__aeabi_uldivmod>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <UART_SetConfig+0x2d4>)
 8008f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	2164      	movs	r1, #100	; 0x64
 8008f74:	fb01 f303 	mul.w	r3, r1, r3
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	3332      	adds	r3, #50	; 0x32
 8008f7e:	4a08      	ldr	r2, [pc, #32]	; (8008fa0 <UART_SetConfig+0x2d4>)
 8008f80:	fba2 2303 	umull	r2, r3, r2, r3
 8008f84:	095b      	lsrs	r3, r3, #5
 8008f86:	f003 0207 	and.w	r2, r3, #7
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4422      	add	r2, r4
 8008f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f94:	e105      	b.n	80091a2 <UART_SetConfig+0x4d6>
 8008f96:	bf00      	nop
 8008f98:	40011000 	.word	0x40011000
 8008f9c:	40011400 	.word	0x40011400
 8008fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	464b      	mov	r3, r9
 8008fba:	1891      	adds	r1, r2, r2
 8008fbc:	6239      	str	r1, [r7, #32]
 8008fbe:	415b      	adcs	r3, r3
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fc6:	4641      	mov	r1, r8
 8008fc8:	1854      	adds	r4, r2, r1
 8008fca:	4649      	mov	r1, r9
 8008fcc:	eb43 0501 	adc.w	r5, r3, r1
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	00eb      	lsls	r3, r5, #3
 8008fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fde:	00e2      	lsls	r2, r4, #3
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	4643      	mov	r3, r8
 8008fe6:	18e3      	adds	r3, r4, r3
 8008fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fec:	464b      	mov	r3, r9
 8008fee:	eb45 0303 	adc.w	r3, r5, r3
 8008ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009012:	4629      	mov	r1, r5
 8009014:	008b      	lsls	r3, r1, #2
 8009016:	4621      	mov	r1, r4
 8009018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800901c:	4621      	mov	r1, r4
 800901e:	008a      	lsls	r2, r1, #2
 8009020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009024:	f7f7 fe50 	bl	8000cc8 <__aeabi_uldivmod>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4b60      	ldr	r3, [pc, #384]	; (80091b0 <UART_SetConfig+0x4e4>)
 800902e:	fba3 2302 	umull	r2, r3, r3, r2
 8009032:	095b      	lsrs	r3, r3, #5
 8009034:	011c      	lsls	r4, r3, #4
 8009036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800903a:	2200      	movs	r2, #0
 800903c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	1891      	adds	r1, r2, r2
 800904e:	61b9      	str	r1, [r7, #24]
 8009050:	415b      	adcs	r3, r3
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009058:	4641      	mov	r1, r8
 800905a:	1851      	adds	r1, r2, r1
 800905c:	6139      	str	r1, [r7, #16]
 800905e:	4649      	mov	r1, r9
 8009060:	414b      	adcs	r3, r1
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	f04f 0200 	mov.w	r2, #0
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009070:	4659      	mov	r1, fp
 8009072:	00cb      	lsls	r3, r1, #3
 8009074:	4651      	mov	r1, sl
 8009076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800907a:	4651      	mov	r1, sl
 800907c:	00ca      	lsls	r2, r1, #3
 800907e:	4610      	mov	r0, r2
 8009080:	4619      	mov	r1, r3
 8009082:	4603      	mov	r3, r0
 8009084:	4642      	mov	r2, r8
 8009086:	189b      	adds	r3, r3, r2
 8009088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800908c:	464b      	mov	r3, r9
 800908e:	460a      	mov	r2, r1
 8009090:	eb42 0303 	adc.w	r3, r2, r3
 8009094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80090a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090b0:	4649      	mov	r1, r9
 80090b2:	008b      	lsls	r3, r1, #2
 80090b4:	4641      	mov	r1, r8
 80090b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ba:	4641      	mov	r1, r8
 80090bc:	008a      	lsls	r2, r1, #2
 80090be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090c2:	f7f7 fe01 	bl	8000cc8 <__aeabi_uldivmod>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <UART_SetConfig+0x4e4>)
 80090cc:	fba3 1302 	umull	r1, r3, r3, r2
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	2164      	movs	r1, #100	; 0x64
 80090d4:	fb01 f303 	mul.w	r3, r1, r3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	3332      	adds	r3, #50	; 0x32
 80090de:	4a34      	ldr	r2, [pc, #208]	; (80091b0 <UART_SetConfig+0x4e4>)
 80090e0:	fba2 2303 	umull	r2, r3, r2, r3
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090ea:	441c      	add	r4, r3
 80090ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090f0:	2200      	movs	r2, #0
 80090f2:	673b      	str	r3, [r7, #112]	; 0x70
 80090f4:	677a      	str	r2, [r7, #116]	; 0x74
 80090f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090fa:	4642      	mov	r2, r8
 80090fc:	464b      	mov	r3, r9
 80090fe:	1891      	adds	r1, r2, r2
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	415b      	adcs	r3, r3
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800910a:	4641      	mov	r1, r8
 800910c:	1851      	adds	r1, r2, r1
 800910e:	6039      	str	r1, [r7, #0]
 8009110:	4649      	mov	r1, r9
 8009112:	414b      	adcs	r3, r1
 8009114:	607b      	str	r3, [r7, #4]
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009122:	4659      	mov	r1, fp
 8009124:	00cb      	lsls	r3, r1, #3
 8009126:	4651      	mov	r1, sl
 8009128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800912c:	4651      	mov	r1, sl
 800912e:	00ca      	lsls	r2, r1, #3
 8009130:	4610      	mov	r0, r2
 8009132:	4619      	mov	r1, r3
 8009134:	4603      	mov	r3, r0
 8009136:	4642      	mov	r2, r8
 8009138:	189b      	adds	r3, r3, r2
 800913a:	66bb      	str	r3, [r7, #104]	; 0x68
 800913c:	464b      	mov	r3, r9
 800913e:	460a      	mov	r2, r1
 8009140:	eb42 0303 	adc.w	r3, r2, r3
 8009144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	663b      	str	r3, [r7, #96]	; 0x60
 8009150:	667a      	str	r2, [r7, #100]	; 0x64
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800915e:	4649      	mov	r1, r9
 8009160:	008b      	lsls	r3, r1, #2
 8009162:	4641      	mov	r1, r8
 8009164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009168:	4641      	mov	r1, r8
 800916a:	008a      	lsls	r2, r1, #2
 800916c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009170:	f7f7 fdaa 	bl	8000cc8 <__aeabi_uldivmod>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <UART_SetConfig+0x4e4>)
 800917a:	fba3 1302 	umull	r1, r3, r3, r2
 800917e:	095b      	lsrs	r3, r3, #5
 8009180:	2164      	movs	r1, #100	; 0x64
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	3332      	adds	r3, #50	; 0x32
 800918c:	4a08      	ldr	r2, [pc, #32]	; (80091b0 <UART_SetConfig+0x4e4>)
 800918e:	fba2 2303 	umull	r2, r3, r2, r3
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	f003 020f 	and.w	r2, r3, #15
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4422      	add	r2, r4
 80091a0:	609a      	str	r2, [r3, #8]
}
 80091a2:	bf00      	nop
 80091a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	51eb851f 	.word	0x51eb851f

080091b4 <__errno>:
 80091b4:	4b01      	ldr	r3, [pc, #4]	; (80091bc <__errno+0x8>)
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	2000003c 	.word	0x2000003c

080091c0 <__libc_init_array>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4d0d      	ldr	r5, [pc, #52]	; (80091f8 <__libc_init_array+0x38>)
 80091c4:	4c0d      	ldr	r4, [pc, #52]	; (80091fc <__libc_init_array+0x3c>)
 80091c6:	1b64      	subs	r4, r4, r5
 80091c8:	10a4      	asrs	r4, r4, #2
 80091ca:	2600      	movs	r6, #0
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	d109      	bne.n	80091e4 <__libc_init_array+0x24>
 80091d0:	4d0b      	ldr	r5, [pc, #44]	; (8009200 <__libc_init_array+0x40>)
 80091d2:	4c0c      	ldr	r4, [pc, #48]	; (8009204 <__libc_init_array+0x44>)
 80091d4:	f004 ffe2 	bl	800e19c <_init>
 80091d8:	1b64      	subs	r4, r4, r5
 80091da:	10a4      	asrs	r4, r4, #2
 80091dc:	2600      	movs	r6, #0
 80091de:	42a6      	cmp	r6, r4
 80091e0:	d105      	bne.n	80091ee <__libc_init_array+0x2e>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e8:	4798      	blx	r3
 80091ea:	3601      	adds	r6, #1
 80091ec:	e7ee      	b.n	80091cc <__libc_init_array+0xc>
 80091ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f2:	4798      	blx	r3
 80091f4:	3601      	adds	r6, #1
 80091f6:	e7f2      	b.n	80091de <__libc_init_array+0x1e>
 80091f8:	0800e8a0 	.word	0x0800e8a0
 80091fc:	0800e8a0 	.word	0x0800e8a0
 8009200:	0800e8a0 	.word	0x0800e8a0
 8009204:	0800e8a4 	.word	0x0800e8a4

08009208 <memset>:
 8009208:	4402      	add	r2, r0
 800920a:	4603      	mov	r3, r0
 800920c:	4293      	cmp	r3, r2
 800920e:	d100      	bne.n	8009212 <memset+0xa>
 8009210:	4770      	bx	lr
 8009212:	f803 1b01 	strb.w	r1, [r3], #1
 8009216:	e7f9      	b.n	800920c <memset+0x4>

08009218 <__cvt>:
 8009218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	ec55 4b10 	vmov	r4, r5, d0
 8009220:	2d00      	cmp	r5, #0
 8009222:	460e      	mov	r6, r1
 8009224:	4619      	mov	r1, r3
 8009226:	462b      	mov	r3, r5
 8009228:	bfbb      	ittet	lt
 800922a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800922e:	461d      	movlt	r5, r3
 8009230:	2300      	movge	r3, #0
 8009232:	232d      	movlt	r3, #45	; 0x2d
 8009234:	700b      	strb	r3, [r1, #0]
 8009236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009238:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800923c:	4691      	mov	r9, r2
 800923e:	f023 0820 	bic.w	r8, r3, #32
 8009242:	bfbc      	itt	lt
 8009244:	4622      	movlt	r2, r4
 8009246:	4614      	movlt	r4, r2
 8009248:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800924c:	d005      	beq.n	800925a <__cvt+0x42>
 800924e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009252:	d100      	bne.n	8009256 <__cvt+0x3e>
 8009254:	3601      	adds	r6, #1
 8009256:	2102      	movs	r1, #2
 8009258:	e000      	b.n	800925c <__cvt+0x44>
 800925a:	2103      	movs	r1, #3
 800925c:	ab03      	add	r3, sp, #12
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	ab02      	add	r3, sp, #8
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	ec45 4b10 	vmov	d0, r4, r5
 8009268:	4653      	mov	r3, sl
 800926a:	4632      	mov	r2, r6
 800926c:	f001 ff54 	bl	800b118 <_dtoa_r>
 8009270:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009274:	4607      	mov	r7, r0
 8009276:	d102      	bne.n	800927e <__cvt+0x66>
 8009278:	f019 0f01 	tst.w	r9, #1
 800927c:	d022      	beq.n	80092c4 <__cvt+0xac>
 800927e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009282:	eb07 0906 	add.w	r9, r7, r6
 8009286:	d110      	bne.n	80092aa <__cvt+0x92>
 8009288:	783b      	ldrb	r3, [r7, #0]
 800928a:	2b30      	cmp	r3, #48	; 0x30
 800928c:	d10a      	bne.n	80092a4 <__cvt+0x8c>
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	f7f7 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800929a:	b918      	cbnz	r0, 80092a4 <__cvt+0x8c>
 800929c:	f1c6 0601 	rsb	r6, r6, #1
 80092a0:	f8ca 6000 	str.w	r6, [sl]
 80092a4:	f8da 3000 	ldr.w	r3, [sl]
 80092a8:	4499      	add	r9, r3
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	4620      	mov	r0, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	f7f7 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80092b6:	b108      	cbz	r0, 80092bc <__cvt+0xa4>
 80092b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092bc:	2230      	movs	r2, #48	; 0x30
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	454b      	cmp	r3, r9
 80092c2:	d307      	bcc.n	80092d4 <__cvt+0xbc>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092c8:	1bdb      	subs	r3, r3, r7
 80092ca:	4638      	mov	r0, r7
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	b004      	add	sp, #16
 80092d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	9103      	str	r1, [sp, #12]
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	e7f0      	b.n	80092be <__cvt+0xa6>

080092dc <__exponent>:
 80092dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092de:	4603      	mov	r3, r0
 80092e0:	2900      	cmp	r1, #0
 80092e2:	bfb8      	it	lt
 80092e4:	4249      	neglt	r1, r1
 80092e6:	f803 2b02 	strb.w	r2, [r3], #2
 80092ea:	bfb4      	ite	lt
 80092ec:	222d      	movlt	r2, #45	; 0x2d
 80092ee:	222b      	movge	r2, #43	; 0x2b
 80092f0:	2909      	cmp	r1, #9
 80092f2:	7042      	strb	r2, [r0, #1]
 80092f4:	dd2a      	ble.n	800934c <__exponent+0x70>
 80092f6:	f10d 0407 	add.w	r4, sp, #7
 80092fa:	46a4      	mov	ip, r4
 80092fc:	270a      	movs	r7, #10
 80092fe:	46a6      	mov	lr, r4
 8009300:	460a      	mov	r2, r1
 8009302:	fb91 f6f7 	sdiv	r6, r1, r7
 8009306:	fb07 1516 	mls	r5, r7, r6, r1
 800930a:	3530      	adds	r5, #48	; 0x30
 800930c:	2a63      	cmp	r2, #99	; 0x63
 800930e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009312:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009316:	4631      	mov	r1, r6
 8009318:	dcf1      	bgt.n	80092fe <__exponent+0x22>
 800931a:	3130      	adds	r1, #48	; 0x30
 800931c:	f1ae 0502 	sub.w	r5, lr, #2
 8009320:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009324:	1c44      	adds	r4, r0, #1
 8009326:	4629      	mov	r1, r5
 8009328:	4561      	cmp	r1, ip
 800932a:	d30a      	bcc.n	8009342 <__exponent+0x66>
 800932c:	f10d 0209 	add.w	r2, sp, #9
 8009330:	eba2 020e 	sub.w	r2, r2, lr
 8009334:	4565      	cmp	r5, ip
 8009336:	bf88      	it	hi
 8009338:	2200      	movhi	r2, #0
 800933a:	4413      	add	r3, r2
 800933c:	1a18      	subs	r0, r3, r0
 800933e:	b003      	add	sp, #12
 8009340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009346:	f804 2f01 	strb.w	r2, [r4, #1]!
 800934a:	e7ed      	b.n	8009328 <__exponent+0x4c>
 800934c:	2330      	movs	r3, #48	; 0x30
 800934e:	3130      	adds	r1, #48	; 0x30
 8009350:	7083      	strb	r3, [r0, #2]
 8009352:	70c1      	strb	r1, [r0, #3]
 8009354:	1d03      	adds	r3, r0, #4
 8009356:	e7f1      	b.n	800933c <__exponent+0x60>

08009358 <_printf_float>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	ed2d 8b02 	vpush	{d8}
 8009360:	b08d      	sub	sp, #52	; 0x34
 8009362:	460c      	mov	r4, r1
 8009364:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009368:	4616      	mov	r6, r2
 800936a:	461f      	mov	r7, r3
 800936c:	4605      	mov	r5, r0
 800936e:	f003 f831 	bl	800c3d4 <_localeconv_r>
 8009372:	f8d0 a000 	ldr.w	sl, [r0]
 8009376:	4650      	mov	r0, sl
 8009378:	f7f6 ff4a 	bl	8000210 <strlen>
 800937c:	2300      	movs	r3, #0
 800937e:	930a      	str	r3, [sp, #40]	; 0x28
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	9305      	str	r3, [sp, #20]
 8009384:	f8d8 3000 	ldr.w	r3, [r8]
 8009388:	f894 b018 	ldrb.w	fp, [r4, #24]
 800938c:	3307      	adds	r3, #7
 800938e:	f023 0307 	bic.w	r3, r3, #7
 8009392:	f103 0208 	add.w	r2, r3, #8
 8009396:	f8c8 2000 	str.w	r2, [r8]
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80093b0:	ee08 0a10 	vmov	s16, r0
 80093b4:	4b9f      	ldr	r3, [pc, #636]	; (8009634 <_printf_float+0x2dc>)
 80093b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ba:	f04f 32ff 	mov.w	r2, #4294967295
 80093be:	f7f7 fbd5 	bl	8000b6c <__aeabi_dcmpun>
 80093c2:	bb88      	cbnz	r0, 8009428 <_printf_float+0xd0>
 80093c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c8:	4b9a      	ldr	r3, [pc, #616]	; (8009634 <_printf_float+0x2dc>)
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	f7f7 fbaf 	bl	8000b30 <__aeabi_dcmple>
 80093d2:	bb48      	cbnz	r0, 8009428 <_printf_float+0xd0>
 80093d4:	2200      	movs	r2, #0
 80093d6:	2300      	movs	r3, #0
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f7 fb9e 	bl	8000b1c <__aeabi_dcmplt>
 80093e0:	b110      	cbz	r0, 80093e8 <_printf_float+0x90>
 80093e2:	232d      	movs	r3, #45	; 0x2d
 80093e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e8:	4b93      	ldr	r3, [pc, #588]	; (8009638 <_printf_float+0x2e0>)
 80093ea:	4894      	ldr	r0, [pc, #592]	; (800963c <_printf_float+0x2e4>)
 80093ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093f0:	bf94      	ite	ls
 80093f2:	4698      	movls	r8, r3
 80093f4:	4680      	movhi	r8, r0
 80093f6:	2303      	movs	r3, #3
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	f023 0204 	bic.w	r2, r3, #4
 8009400:	6022      	str	r2, [r4, #0]
 8009402:	f04f 0900 	mov.w	r9, #0
 8009406:	9700      	str	r7, [sp, #0]
 8009408:	4633      	mov	r3, r6
 800940a:	aa0b      	add	r2, sp, #44	; 0x2c
 800940c:	4621      	mov	r1, r4
 800940e:	4628      	mov	r0, r5
 8009410:	f000 f9d8 	bl	80097c4 <_printf_common>
 8009414:	3001      	adds	r0, #1
 8009416:	f040 8090 	bne.w	800953a <_printf_float+0x1e2>
 800941a:	f04f 30ff 	mov.w	r0, #4294967295
 800941e:	b00d      	add	sp, #52	; 0x34
 8009420:	ecbd 8b02 	vpop	{d8}
 8009424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f7 fb9c 	bl	8000b6c <__aeabi_dcmpun>
 8009434:	b140      	cbz	r0, 8009448 <_printf_float+0xf0>
 8009436:	464b      	mov	r3, r9
 8009438:	2b00      	cmp	r3, #0
 800943a:	bfbc      	itt	lt
 800943c:	232d      	movlt	r3, #45	; 0x2d
 800943e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009442:	487f      	ldr	r0, [pc, #508]	; (8009640 <_printf_float+0x2e8>)
 8009444:	4b7f      	ldr	r3, [pc, #508]	; (8009644 <_printf_float+0x2ec>)
 8009446:	e7d1      	b.n	80093ec <_printf_float+0x94>
 8009448:	6863      	ldr	r3, [r4, #4]
 800944a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800944e:	9206      	str	r2, [sp, #24]
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	d13f      	bne.n	80094d4 <_printf_float+0x17c>
 8009454:	2306      	movs	r3, #6
 8009456:	6063      	str	r3, [r4, #4]
 8009458:	9b05      	ldr	r3, [sp, #20]
 800945a:	6861      	ldr	r1, [r4, #4]
 800945c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009460:	2300      	movs	r3, #0
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	ab0a      	add	r3, sp, #40	; 0x28
 8009466:	e9cd b301 	strd	fp, r3, [sp, #4]
 800946a:	ab09      	add	r3, sp, #36	; 0x24
 800946c:	ec49 8b10 	vmov	d0, r8, r9
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009478:	4628      	mov	r0, r5
 800947a:	f7ff fecd 	bl	8009218 <__cvt>
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009482:	2b47      	cmp	r3, #71	; 0x47
 8009484:	4680      	mov	r8, r0
 8009486:	d108      	bne.n	800949a <_printf_float+0x142>
 8009488:	1cc8      	adds	r0, r1, #3
 800948a:	db02      	blt.n	8009492 <_printf_float+0x13a>
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	4299      	cmp	r1, r3
 8009490:	dd41      	ble.n	8009516 <_printf_float+0x1be>
 8009492:	f1ab 0b02 	sub.w	fp, fp, #2
 8009496:	fa5f fb8b 	uxtb.w	fp, fp
 800949a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800949e:	d820      	bhi.n	80094e2 <_printf_float+0x18a>
 80094a0:	3901      	subs	r1, #1
 80094a2:	465a      	mov	r2, fp
 80094a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094a8:	9109      	str	r1, [sp, #36]	; 0x24
 80094aa:	f7ff ff17 	bl	80092dc <__exponent>
 80094ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b0:	1813      	adds	r3, r2, r0
 80094b2:	2a01      	cmp	r2, #1
 80094b4:	4681      	mov	r9, r0
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	dc02      	bgt.n	80094c0 <_printf_float+0x168>
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	07d2      	lsls	r2, r2, #31
 80094be:	d501      	bpl.n	80094c4 <_printf_float+0x16c>
 80094c0:	3301      	adds	r3, #1
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d09c      	beq.n	8009406 <_printf_float+0xae>
 80094cc:	232d      	movs	r3, #45	; 0x2d
 80094ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d2:	e798      	b.n	8009406 <_printf_float+0xae>
 80094d4:	9a06      	ldr	r2, [sp, #24]
 80094d6:	2a47      	cmp	r2, #71	; 0x47
 80094d8:	d1be      	bne.n	8009458 <_printf_float+0x100>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1bc      	bne.n	8009458 <_printf_float+0x100>
 80094de:	2301      	movs	r3, #1
 80094e0:	e7b9      	b.n	8009456 <_printf_float+0xfe>
 80094e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094e6:	d118      	bne.n	800951a <_printf_float+0x1c2>
 80094e8:	2900      	cmp	r1, #0
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	dd0b      	ble.n	8009506 <_printf_float+0x1ae>
 80094ee:	6121      	str	r1, [r4, #16]
 80094f0:	b913      	cbnz	r3, 80094f8 <_printf_float+0x1a0>
 80094f2:	6822      	ldr	r2, [r4, #0]
 80094f4:	07d0      	lsls	r0, r2, #31
 80094f6:	d502      	bpl.n	80094fe <_printf_float+0x1a6>
 80094f8:	3301      	adds	r3, #1
 80094fa:	440b      	add	r3, r1
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009500:	f04f 0900 	mov.w	r9, #0
 8009504:	e7de      	b.n	80094c4 <_printf_float+0x16c>
 8009506:	b913      	cbnz	r3, 800950e <_printf_float+0x1b6>
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	07d2      	lsls	r2, r2, #31
 800950c:	d501      	bpl.n	8009512 <_printf_float+0x1ba>
 800950e:	3302      	adds	r3, #2
 8009510:	e7f4      	b.n	80094fc <_printf_float+0x1a4>
 8009512:	2301      	movs	r3, #1
 8009514:	e7f2      	b.n	80094fc <_printf_float+0x1a4>
 8009516:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800951a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951c:	4299      	cmp	r1, r3
 800951e:	db05      	blt.n	800952c <_printf_float+0x1d4>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	6121      	str	r1, [r4, #16]
 8009524:	07d8      	lsls	r0, r3, #31
 8009526:	d5ea      	bpl.n	80094fe <_printf_float+0x1a6>
 8009528:	1c4b      	adds	r3, r1, #1
 800952a:	e7e7      	b.n	80094fc <_printf_float+0x1a4>
 800952c:	2900      	cmp	r1, #0
 800952e:	bfd4      	ite	le
 8009530:	f1c1 0202 	rsble	r2, r1, #2
 8009534:	2201      	movgt	r2, #1
 8009536:	4413      	add	r3, r2
 8009538:	e7e0      	b.n	80094fc <_printf_float+0x1a4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	055a      	lsls	r2, r3, #21
 800953e:	d407      	bmi.n	8009550 <_printf_float+0x1f8>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	4642      	mov	r2, r8
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	d12c      	bne.n	80095a8 <_printf_float+0x250>
 800954e:	e764      	b.n	800941a <_printf_float+0xc2>
 8009550:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009554:	f240 80e0 	bls.w	8009718 <_printf_float+0x3c0>
 8009558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800955c:	2200      	movs	r2, #0
 800955e:	2300      	movs	r3, #0
 8009560:	f7f7 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8009564:	2800      	cmp	r0, #0
 8009566:	d034      	beq.n	80095d2 <_printf_float+0x27a>
 8009568:	4a37      	ldr	r2, [pc, #220]	; (8009648 <_printf_float+0x2f0>)
 800956a:	2301      	movs	r3, #1
 800956c:	4631      	mov	r1, r6
 800956e:	4628      	mov	r0, r5
 8009570:	47b8      	blx	r7
 8009572:	3001      	adds	r0, #1
 8009574:	f43f af51 	beq.w	800941a <_printf_float+0xc2>
 8009578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957c:	429a      	cmp	r2, r3
 800957e:	db02      	blt.n	8009586 <_printf_float+0x22e>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	07d8      	lsls	r0, r3, #31
 8009584:	d510      	bpl.n	80095a8 <_printf_float+0x250>
 8009586:	ee18 3a10 	vmov	r3, s16
 800958a:	4652      	mov	r2, sl
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	f43f af41 	beq.w	800941a <_printf_float+0xc2>
 8009598:	f04f 0800 	mov.w	r8, #0
 800959c:	f104 091a 	add.w	r9, r4, #26
 80095a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a2:	3b01      	subs	r3, #1
 80095a4:	4543      	cmp	r3, r8
 80095a6:	dc09      	bgt.n	80095bc <_printf_float+0x264>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	079b      	lsls	r3, r3, #30
 80095ac:	f100 8105 	bmi.w	80097ba <_printf_float+0x462>
 80095b0:	68e0      	ldr	r0, [r4, #12]
 80095b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b4:	4298      	cmp	r0, r3
 80095b6:	bfb8      	it	lt
 80095b8:	4618      	movlt	r0, r3
 80095ba:	e730      	b.n	800941e <_printf_float+0xc6>
 80095bc:	2301      	movs	r3, #1
 80095be:	464a      	mov	r2, r9
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f af27 	beq.w	800941a <_printf_float+0xc2>
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	e7e6      	b.n	80095a0 <_printf_float+0x248>
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc39      	bgt.n	800964c <_printf_float+0x2f4>
 80095d8:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <_printf_float+0x2f0>)
 80095da:	2301      	movs	r3, #1
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	f43f af19 	beq.w	800941a <_printf_float+0xc2>
 80095e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095ec:	4313      	orrs	r3, r2
 80095ee:	d102      	bne.n	80095f6 <_printf_float+0x29e>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	d5d8      	bpl.n	80095a8 <_printf_float+0x250>
 80095f6:	ee18 3a10 	vmov	r3, s16
 80095fa:	4652      	mov	r2, sl
 80095fc:	4631      	mov	r1, r6
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	f43f af09 	beq.w	800941a <_printf_float+0xc2>
 8009608:	f04f 0900 	mov.w	r9, #0
 800960c:	f104 0a1a 	add.w	sl, r4, #26
 8009610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009612:	425b      	negs	r3, r3
 8009614:	454b      	cmp	r3, r9
 8009616:	dc01      	bgt.n	800961c <_printf_float+0x2c4>
 8009618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961a:	e792      	b.n	8009542 <_printf_float+0x1ea>
 800961c:	2301      	movs	r3, #1
 800961e:	4652      	mov	r2, sl
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f aef7 	beq.w	800941a <_printf_float+0xc2>
 800962c:	f109 0901 	add.w	r9, r9, #1
 8009630:	e7ee      	b.n	8009610 <_printf_float+0x2b8>
 8009632:	bf00      	nop
 8009634:	7fefffff 	.word	0x7fefffff
 8009638:	0800e3b0 	.word	0x0800e3b0
 800963c:	0800e3b4 	.word	0x0800e3b4
 8009640:	0800e3bc 	.word	0x0800e3bc
 8009644:	0800e3b8 	.word	0x0800e3b8
 8009648:	0800e3c0 	.word	0x0800e3c0
 800964c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800964e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009650:	429a      	cmp	r2, r3
 8009652:	bfa8      	it	ge
 8009654:	461a      	movge	r2, r3
 8009656:	2a00      	cmp	r2, #0
 8009658:	4691      	mov	r9, r2
 800965a:	dc37      	bgt.n	80096cc <_printf_float+0x374>
 800965c:	f04f 0b00 	mov.w	fp, #0
 8009660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009664:	f104 021a 	add.w	r2, r4, #26
 8009668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	eba3 0309 	sub.w	r3, r3, r9
 8009670:	455b      	cmp	r3, fp
 8009672:	dc33      	bgt.n	80096dc <_printf_float+0x384>
 8009674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009678:	429a      	cmp	r2, r3
 800967a:	db3b      	blt.n	80096f4 <_printf_float+0x39c>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	07da      	lsls	r2, r3, #31
 8009680:	d438      	bmi.n	80096f4 <_printf_float+0x39c>
 8009682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009684:	9a05      	ldr	r2, [sp, #20]
 8009686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009688:	1a9a      	subs	r2, r3, r2
 800968a:	eba3 0901 	sub.w	r9, r3, r1
 800968e:	4591      	cmp	r9, r2
 8009690:	bfa8      	it	ge
 8009692:	4691      	movge	r9, r2
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	dc35      	bgt.n	8009706 <_printf_float+0x3ae>
 800969a:	f04f 0800 	mov.w	r8, #0
 800969e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096a2:	f104 0a1a 	add.w	sl, r4, #26
 80096a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	eba3 0309 	sub.w	r3, r3, r9
 80096b0:	4543      	cmp	r3, r8
 80096b2:	f77f af79 	ble.w	80095a8 <_printf_float+0x250>
 80096b6:	2301      	movs	r3, #1
 80096b8:	4652      	mov	r2, sl
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	47b8      	blx	r7
 80096c0:	3001      	adds	r0, #1
 80096c2:	f43f aeaa 	beq.w	800941a <_printf_float+0xc2>
 80096c6:	f108 0801 	add.w	r8, r8, #1
 80096ca:	e7ec      	b.n	80096a6 <_printf_float+0x34e>
 80096cc:	4613      	mov	r3, r2
 80096ce:	4631      	mov	r1, r6
 80096d0:	4642      	mov	r2, r8
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	d1c0      	bne.n	800965c <_printf_float+0x304>
 80096da:	e69e      	b.n	800941a <_printf_float+0xc2>
 80096dc:	2301      	movs	r3, #1
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	9205      	str	r2, [sp, #20]
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f ae97 	beq.w	800941a <_printf_float+0xc2>
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	f10b 0b01 	add.w	fp, fp, #1
 80096f2:	e7b9      	b.n	8009668 <_printf_float+0x310>
 80096f4:	ee18 3a10 	vmov	r3, s16
 80096f8:	4652      	mov	r2, sl
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	d1be      	bne.n	8009682 <_printf_float+0x32a>
 8009704:	e689      	b.n	800941a <_printf_float+0xc2>
 8009706:	9a05      	ldr	r2, [sp, #20]
 8009708:	464b      	mov	r3, r9
 800970a:	4442      	add	r2, r8
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	d1c1      	bne.n	800969a <_printf_float+0x342>
 8009716:	e680      	b.n	800941a <_printf_float+0xc2>
 8009718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971a:	2a01      	cmp	r2, #1
 800971c:	dc01      	bgt.n	8009722 <_printf_float+0x3ca>
 800971e:	07db      	lsls	r3, r3, #31
 8009720:	d538      	bpl.n	8009794 <_printf_float+0x43c>
 8009722:	2301      	movs	r3, #1
 8009724:	4642      	mov	r2, r8
 8009726:	4631      	mov	r1, r6
 8009728:	4628      	mov	r0, r5
 800972a:	47b8      	blx	r7
 800972c:	3001      	adds	r0, #1
 800972e:	f43f ae74 	beq.w	800941a <_printf_float+0xc2>
 8009732:	ee18 3a10 	vmov	r3, s16
 8009736:	4652      	mov	r2, sl
 8009738:	4631      	mov	r1, r6
 800973a:	4628      	mov	r0, r5
 800973c:	47b8      	blx	r7
 800973e:	3001      	adds	r0, #1
 8009740:	f43f ae6b 	beq.w	800941a <_printf_float+0xc2>
 8009744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	f7f7 f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 8009750:	b9d8      	cbnz	r0, 800978a <_printf_float+0x432>
 8009752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009754:	f108 0201 	add.w	r2, r8, #1
 8009758:	3b01      	subs	r3, #1
 800975a:	4631      	mov	r1, r6
 800975c:	4628      	mov	r0, r5
 800975e:	47b8      	blx	r7
 8009760:	3001      	adds	r0, #1
 8009762:	d10e      	bne.n	8009782 <_printf_float+0x42a>
 8009764:	e659      	b.n	800941a <_printf_float+0xc2>
 8009766:	2301      	movs	r3, #1
 8009768:	4652      	mov	r2, sl
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f ae52 	beq.w	800941a <_printf_float+0xc2>
 8009776:	f108 0801 	add.w	r8, r8, #1
 800977a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977c:	3b01      	subs	r3, #1
 800977e:	4543      	cmp	r3, r8
 8009780:	dcf1      	bgt.n	8009766 <_printf_float+0x40e>
 8009782:	464b      	mov	r3, r9
 8009784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009788:	e6dc      	b.n	8009544 <_printf_float+0x1ec>
 800978a:	f04f 0800 	mov.w	r8, #0
 800978e:	f104 0a1a 	add.w	sl, r4, #26
 8009792:	e7f2      	b.n	800977a <_printf_float+0x422>
 8009794:	2301      	movs	r3, #1
 8009796:	4642      	mov	r2, r8
 8009798:	e7df      	b.n	800975a <_printf_float+0x402>
 800979a:	2301      	movs	r3, #1
 800979c:	464a      	mov	r2, r9
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b8      	blx	r7
 80097a4:	3001      	adds	r0, #1
 80097a6:	f43f ae38 	beq.w	800941a <_printf_float+0xc2>
 80097aa:	f108 0801 	add.w	r8, r8, #1
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b2:	1a5b      	subs	r3, r3, r1
 80097b4:	4543      	cmp	r3, r8
 80097b6:	dcf0      	bgt.n	800979a <_printf_float+0x442>
 80097b8:	e6fa      	b.n	80095b0 <_printf_float+0x258>
 80097ba:	f04f 0800 	mov.w	r8, #0
 80097be:	f104 0919 	add.w	r9, r4, #25
 80097c2:	e7f4      	b.n	80097ae <_printf_float+0x456>

080097c4 <_printf_common>:
 80097c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	4616      	mov	r6, r2
 80097ca:	4699      	mov	r9, r3
 80097cc:	688a      	ldr	r2, [r1, #8]
 80097ce:	690b      	ldr	r3, [r1, #16]
 80097d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097d4:	4293      	cmp	r3, r2
 80097d6:	bfb8      	it	lt
 80097d8:	4613      	movlt	r3, r2
 80097da:	6033      	str	r3, [r6, #0]
 80097dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097e0:	4607      	mov	r7, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	b10a      	cbz	r2, 80097ea <_printf_common+0x26>
 80097e6:	3301      	adds	r3, #1
 80097e8:	6033      	str	r3, [r6, #0]
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	0699      	lsls	r1, r3, #26
 80097ee:	bf42      	ittt	mi
 80097f0:	6833      	ldrmi	r3, [r6, #0]
 80097f2:	3302      	addmi	r3, #2
 80097f4:	6033      	strmi	r3, [r6, #0]
 80097f6:	6825      	ldr	r5, [r4, #0]
 80097f8:	f015 0506 	ands.w	r5, r5, #6
 80097fc:	d106      	bne.n	800980c <_printf_common+0x48>
 80097fe:	f104 0a19 	add.w	sl, r4, #25
 8009802:	68e3      	ldr	r3, [r4, #12]
 8009804:	6832      	ldr	r2, [r6, #0]
 8009806:	1a9b      	subs	r3, r3, r2
 8009808:	42ab      	cmp	r3, r5
 800980a:	dc26      	bgt.n	800985a <_printf_common+0x96>
 800980c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009810:	1e13      	subs	r3, r2, #0
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	bf18      	it	ne
 8009816:	2301      	movne	r3, #1
 8009818:	0692      	lsls	r2, r2, #26
 800981a:	d42b      	bmi.n	8009874 <_printf_common+0xb0>
 800981c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009820:	4649      	mov	r1, r9
 8009822:	4638      	mov	r0, r7
 8009824:	47c0      	blx	r8
 8009826:	3001      	adds	r0, #1
 8009828:	d01e      	beq.n	8009868 <_printf_common+0xa4>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	68e5      	ldr	r5, [r4, #12]
 800982e:	6832      	ldr	r2, [r6, #0]
 8009830:	f003 0306 	and.w	r3, r3, #6
 8009834:	2b04      	cmp	r3, #4
 8009836:	bf08      	it	eq
 8009838:	1aad      	subeq	r5, r5, r2
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	6922      	ldr	r2, [r4, #16]
 800983e:	bf0c      	ite	eq
 8009840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009844:	2500      	movne	r5, #0
 8009846:	4293      	cmp	r3, r2
 8009848:	bfc4      	itt	gt
 800984a:	1a9b      	subgt	r3, r3, r2
 800984c:	18ed      	addgt	r5, r5, r3
 800984e:	2600      	movs	r6, #0
 8009850:	341a      	adds	r4, #26
 8009852:	42b5      	cmp	r5, r6
 8009854:	d11a      	bne.n	800988c <_printf_common+0xc8>
 8009856:	2000      	movs	r0, #0
 8009858:	e008      	b.n	800986c <_printf_common+0xa8>
 800985a:	2301      	movs	r3, #1
 800985c:	4652      	mov	r2, sl
 800985e:	4649      	mov	r1, r9
 8009860:	4638      	mov	r0, r7
 8009862:	47c0      	blx	r8
 8009864:	3001      	adds	r0, #1
 8009866:	d103      	bne.n	8009870 <_printf_common+0xac>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	3501      	adds	r5, #1
 8009872:	e7c6      	b.n	8009802 <_printf_common+0x3e>
 8009874:	18e1      	adds	r1, r4, r3
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	2030      	movs	r0, #48	; 0x30
 800987a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800987e:	4422      	add	r2, r4
 8009880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009888:	3302      	adds	r3, #2
 800988a:	e7c7      	b.n	800981c <_printf_common+0x58>
 800988c:	2301      	movs	r3, #1
 800988e:	4622      	mov	r2, r4
 8009890:	4649      	mov	r1, r9
 8009892:	4638      	mov	r0, r7
 8009894:	47c0      	blx	r8
 8009896:	3001      	adds	r0, #1
 8009898:	d0e6      	beq.n	8009868 <_printf_common+0xa4>
 800989a:	3601      	adds	r6, #1
 800989c:	e7d9      	b.n	8009852 <_printf_common+0x8e>
	...

080098a0 <_printf_i>:
 80098a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	7e0f      	ldrb	r7, [r1, #24]
 80098a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098a8:	2f78      	cmp	r7, #120	; 0x78
 80098aa:	4691      	mov	r9, r2
 80098ac:	4680      	mov	r8, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	469a      	mov	sl, r3
 80098b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098b6:	d807      	bhi.n	80098c8 <_printf_i+0x28>
 80098b8:	2f62      	cmp	r7, #98	; 0x62
 80098ba:	d80a      	bhi.n	80098d2 <_printf_i+0x32>
 80098bc:	2f00      	cmp	r7, #0
 80098be:	f000 80d8 	beq.w	8009a72 <_printf_i+0x1d2>
 80098c2:	2f58      	cmp	r7, #88	; 0x58
 80098c4:	f000 80a3 	beq.w	8009a0e <_printf_i+0x16e>
 80098c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098d0:	e03a      	b.n	8009948 <_printf_i+0xa8>
 80098d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098d6:	2b15      	cmp	r3, #21
 80098d8:	d8f6      	bhi.n	80098c8 <_printf_i+0x28>
 80098da:	a101      	add	r1, pc, #4	; (adr r1, 80098e0 <_printf_i+0x40>)
 80098dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098e0:	08009939 	.word	0x08009939
 80098e4:	0800994d 	.word	0x0800994d
 80098e8:	080098c9 	.word	0x080098c9
 80098ec:	080098c9 	.word	0x080098c9
 80098f0:	080098c9 	.word	0x080098c9
 80098f4:	080098c9 	.word	0x080098c9
 80098f8:	0800994d 	.word	0x0800994d
 80098fc:	080098c9 	.word	0x080098c9
 8009900:	080098c9 	.word	0x080098c9
 8009904:	080098c9 	.word	0x080098c9
 8009908:	080098c9 	.word	0x080098c9
 800990c:	08009a59 	.word	0x08009a59
 8009910:	0800997d 	.word	0x0800997d
 8009914:	08009a3b 	.word	0x08009a3b
 8009918:	080098c9 	.word	0x080098c9
 800991c:	080098c9 	.word	0x080098c9
 8009920:	08009a7b 	.word	0x08009a7b
 8009924:	080098c9 	.word	0x080098c9
 8009928:	0800997d 	.word	0x0800997d
 800992c:	080098c9 	.word	0x080098c9
 8009930:	080098c9 	.word	0x080098c9
 8009934:	08009a43 	.word	0x08009a43
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	602a      	str	r2, [r5, #0]
 8009940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009948:	2301      	movs	r3, #1
 800994a:	e0a3      	b.n	8009a94 <_printf_i+0x1f4>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	6829      	ldr	r1, [r5, #0]
 8009950:	0606      	lsls	r6, r0, #24
 8009952:	f101 0304 	add.w	r3, r1, #4
 8009956:	d50a      	bpl.n	800996e <_printf_i+0xce>
 8009958:	680e      	ldr	r6, [r1, #0]
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	2e00      	cmp	r6, #0
 800995e:	da03      	bge.n	8009968 <_printf_i+0xc8>
 8009960:	232d      	movs	r3, #45	; 0x2d
 8009962:	4276      	negs	r6, r6
 8009964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009968:	485e      	ldr	r0, [pc, #376]	; (8009ae4 <_printf_i+0x244>)
 800996a:	230a      	movs	r3, #10
 800996c:	e019      	b.n	80099a2 <_printf_i+0x102>
 800996e:	680e      	ldr	r6, [r1, #0]
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009976:	bf18      	it	ne
 8009978:	b236      	sxthne	r6, r6
 800997a:	e7ef      	b.n	800995c <_printf_i+0xbc>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	6820      	ldr	r0, [r4, #0]
 8009980:	1d19      	adds	r1, r3, #4
 8009982:	6029      	str	r1, [r5, #0]
 8009984:	0601      	lsls	r1, r0, #24
 8009986:	d501      	bpl.n	800998c <_printf_i+0xec>
 8009988:	681e      	ldr	r6, [r3, #0]
 800998a:	e002      	b.n	8009992 <_printf_i+0xf2>
 800998c:	0646      	lsls	r6, r0, #25
 800998e:	d5fb      	bpl.n	8009988 <_printf_i+0xe8>
 8009990:	881e      	ldrh	r6, [r3, #0]
 8009992:	4854      	ldr	r0, [pc, #336]	; (8009ae4 <_printf_i+0x244>)
 8009994:	2f6f      	cmp	r7, #111	; 0x6f
 8009996:	bf0c      	ite	eq
 8009998:	2308      	moveq	r3, #8
 800999a:	230a      	movne	r3, #10
 800999c:	2100      	movs	r1, #0
 800999e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099a2:	6865      	ldr	r5, [r4, #4]
 80099a4:	60a5      	str	r5, [r4, #8]
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	bfa2      	ittt	ge
 80099aa:	6821      	ldrge	r1, [r4, #0]
 80099ac:	f021 0104 	bicge.w	r1, r1, #4
 80099b0:	6021      	strge	r1, [r4, #0]
 80099b2:	b90e      	cbnz	r6, 80099b8 <_printf_i+0x118>
 80099b4:	2d00      	cmp	r5, #0
 80099b6:	d04d      	beq.n	8009a54 <_printf_i+0x1b4>
 80099b8:	4615      	mov	r5, r2
 80099ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80099be:	fb03 6711 	mls	r7, r3, r1, r6
 80099c2:	5dc7      	ldrb	r7, [r0, r7]
 80099c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099c8:	4637      	mov	r7, r6
 80099ca:	42bb      	cmp	r3, r7
 80099cc:	460e      	mov	r6, r1
 80099ce:	d9f4      	bls.n	80099ba <_printf_i+0x11a>
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d10b      	bne.n	80099ec <_printf_i+0x14c>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	07de      	lsls	r6, r3, #31
 80099d8:	d508      	bpl.n	80099ec <_printf_i+0x14c>
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	6861      	ldr	r1, [r4, #4]
 80099de:	4299      	cmp	r1, r3
 80099e0:	bfde      	ittt	le
 80099e2:	2330      	movle	r3, #48	; 0x30
 80099e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099ec:	1b52      	subs	r2, r2, r5
 80099ee:	6122      	str	r2, [r4, #16]
 80099f0:	f8cd a000 	str.w	sl, [sp]
 80099f4:	464b      	mov	r3, r9
 80099f6:	aa03      	add	r2, sp, #12
 80099f8:	4621      	mov	r1, r4
 80099fa:	4640      	mov	r0, r8
 80099fc:	f7ff fee2 	bl	80097c4 <_printf_common>
 8009a00:	3001      	adds	r0, #1
 8009a02:	d14c      	bne.n	8009a9e <_printf_i+0x1fe>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	b004      	add	sp, #16
 8009a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0e:	4835      	ldr	r0, [pc, #212]	; (8009ae4 <_printf_i+0x244>)
 8009a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a14:	6829      	ldr	r1, [r5, #0]
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a1c:	6029      	str	r1, [r5, #0]
 8009a1e:	061d      	lsls	r5, r3, #24
 8009a20:	d514      	bpl.n	8009a4c <_printf_i+0x1ac>
 8009a22:	07df      	lsls	r7, r3, #31
 8009a24:	bf44      	itt	mi
 8009a26:	f043 0320 	orrmi.w	r3, r3, #32
 8009a2a:	6023      	strmi	r3, [r4, #0]
 8009a2c:	b91e      	cbnz	r6, 8009a36 <_printf_i+0x196>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	f023 0320 	bic.w	r3, r3, #32
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	2310      	movs	r3, #16
 8009a38:	e7b0      	b.n	800999c <_printf_i+0xfc>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	f043 0320 	orr.w	r3, r3, #32
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	2378      	movs	r3, #120	; 0x78
 8009a44:	4828      	ldr	r0, [pc, #160]	; (8009ae8 <_printf_i+0x248>)
 8009a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a4a:	e7e3      	b.n	8009a14 <_printf_i+0x174>
 8009a4c:	0659      	lsls	r1, r3, #25
 8009a4e:	bf48      	it	mi
 8009a50:	b2b6      	uxthmi	r6, r6
 8009a52:	e7e6      	b.n	8009a22 <_printf_i+0x182>
 8009a54:	4615      	mov	r5, r2
 8009a56:	e7bb      	b.n	80099d0 <_printf_i+0x130>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	6826      	ldr	r6, [r4, #0]
 8009a5c:	6961      	ldr	r1, [r4, #20]
 8009a5e:	1d18      	adds	r0, r3, #4
 8009a60:	6028      	str	r0, [r5, #0]
 8009a62:	0635      	lsls	r5, r6, #24
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	d501      	bpl.n	8009a6c <_printf_i+0x1cc>
 8009a68:	6019      	str	r1, [r3, #0]
 8009a6a:	e002      	b.n	8009a72 <_printf_i+0x1d2>
 8009a6c:	0670      	lsls	r0, r6, #25
 8009a6e:	d5fb      	bpl.n	8009a68 <_printf_i+0x1c8>
 8009a70:	8019      	strh	r1, [r3, #0]
 8009a72:	2300      	movs	r3, #0
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	4615      	mov	r5, r2
 8009a78:	e7ba      	b.n	80099f0 <_printf_i+0x150>
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	1d1a      	adds	r2, r3, #4
 8009a7e:	602a      	str	r2, [r5, #0]
 8009a80:	681d      	ldr	r5, [r3, #0]
 8009a82:	6862      	ldr	r2, [r4, #4]
 8009a84:	2100      	movs	r1, #0
 8009a86:	4628      	mov	r0, r5
 8009a88:	f7f6 fbca 	bl	8000220 <memchr>
 8009a8c:	b108      	cbz	r0, 8009a92 <_printf_i+0x1f2>
 8009a8e:	1b40      	subs	r0, r0, r5
 8009a90:	6060      	str	r0, [r4, #4]
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	2300      	movs	r3, #0
 8009a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a9c:	e7a8      	b.n	80099f0 <_printf_i+0x150>
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	47d0      	blx	sl
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d0ab      	beq.n	8009a04 <_printf_i+0x164>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	079b      	lsls	r3, r3, #30
 8009ab0:	d413      	bmi.n	8009ada <_printf_i+0x23a>
 8009ab2:	68e0      	ldr	r0, [r4, #12]
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	4298      	cmp	r0, r3
 8009ab8:	bfb8      	it	lt
 8009aba:	4618      	movlt	r0, r3
 8009abc:	e7a4      	b.n	8009a08 <_printf_i+0x168>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	47d0      	blx	sl
 8009ac8:	3001      	adds	r0, #1
 8009aca:	d09b      	beq.n	8009a04 <_printf_i+0x164>
 8009acc:	3501      	adds	r5, #1
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	9903      	ldr	r1, [sp, #12]
 8009ad2:	1a5b      	subs	r3, r3, r1
 8009ad4:	42ab      	cmp	r3, r5
 8009ad6:	dcf2      	bgt.n	8009abe <_printf_i+0x21e>
 8009ad8:	e7eb      	b.n	8009ab2 <_printf_i+0x212>
 8009ada:	2500      	movs	r5, #0
 8009adc:	f104 0619 	add.w	r6, r4, #25
 8009ae0:	e7f5      	b.n	8009ace <_printf_i+0x22e>
 8009ae2:	bf00      	nop
 8009ae4:	0800e3c2 	.word	0x0800e3c2
 8009ae8:	0800e3d3 	.word	0x0800e3d3

08009aec <_scanf_float>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	b087      	sub	sp, #28
 8009af2:	4617      	mov	r7, r2
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	688b      	ldr	r3, [r1, #8]
 8009af8:	1e5a      	subs	r2, r3, #1
 8009afa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009afe:	bf83      	ittte	hi
 8009b00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b04:	195b      	addhi	r3, r3, r5
 8009b06:	9302      	strhi	r3, [sp, #8]
 8009b08:	2300      	movls	r3, #0
 8009b0a:	bf86      	itte	hi
 8009b0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b10:	608b      	strhi	r3, [r1, #8]
 8009b12:	9302      	strls	r3, [sp, #8]
 8009b14:	680b      	ldr	r3, [r1, #0]
 8009b16:	468b      	mov	fp, r1
 8009b18:	2500      	movs	r5, #0
 8009b1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009b1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009b22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b26:	4680      	mov	r8, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	465e      	mov	r6, fp
 8009b2c:	46aa      	mov	sl, r5
 8009b2e:	46a9      	mov	r9, r5
 8009b30:	9501      	str	r5, [sp, #4]
 8009b32:	68a2      	ldr	r2, [r4, #8]
 8009b34:	b152      	cbz	r2, 8009b4c <_scanf_float+0x60>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2b4e      	cmp	r3, #78	; 0x4e
 8009b3c:	d864      	bhi.n	8009c08 <_scanf_float+0x11c>
 8009b3e:	2b40      	cmp	r3, #64	; 0x40
 8009b40:	d83c      	bhi.n	8009bbc <_scanf_float+0xd0>
 8009b42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b46:	b2c8      	uxtb	r0, r1
 8009b48:	280e      	cmp	r0, #14
 8009b4a:	d93a      	bls.n	8009bc2 <_scanf_float+0xd6>
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	d003      	beq.n	8009b5a <_scanf_float+0x6e>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b5e:	f1ba 0f01 	cmp.w	sl, #1
 8009b62:	f200 8113 	bhi.w	8009d8c <_scanf_float+0x2a0>
 8009b66:	455e      	cmp	r6, fp
 8009b68:	f200 8105 	bhi.w	8009d76 <_scanf_float+0x28a>
 8009b6c:	2501      	movs	r5, #1
 8009b6e:	4628      	mov	r0, r5
 8009b70:	b007      	add	sp, #28
 8009b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b7a:	2a0d      	cmp	r2, #13
 8009b7c:	d8e6      	bhi.n	8009b4c <_scanf_float+0x60>
 8009b7e:	a101      	add	r1, pc, #4	; (adr r1, 8009b84 <_scanf_float+0x98>)
 8009b80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b84:	08009cc3 	.word	0x08009cc3
 8009b88:	08009b4d 	.word	0x08009b4d
 8009b8c:	08009b4d 	.word	0x08009b4d
 8009b90:	08009b4d 	.word	0x08009b4d
 8009b94:	08009d23 	.word	0x08009d23
 8009b98:	08009cfb 	.word	0x08009cfb
 8009b9c:	08009b4d 	.word	0x08009b4d
 8009ba0:	08009b4d 	.word	0x08009b4d
 8009ba4:	08009cd1 	.word	0x08009cd1
 8009ba8:	08009b4d 	.word	0x08009b4d
 8009bac:	08009b4d 	.word	0x08009b4d
 8009bb0:	08009b4d 	.word	0x08009b4d
 8009bb4:	08009b4d 	.word	0x08009b4d
 8009bb8:	08009c89 	.word	0x08009c89
 8009bbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009bc0:	e7db      	b.n	8009b7a <_scanf_float+0x8e>
 8009bc2:	290e      	cmp	r1, #14
 8009bc4:	d8c2      	bhi.n	8009b4c <_scanf_float+0x60>
 8009bc6:	a001      	add	r0, pc, #4	; (adr r0, 8009bcc <_scanf_float+0xe0>)
 8009bc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009bcc:	08009c7b 	.word	0x08009c7b
 8009bd0:	08009b4d 	.word	0x08009b4d
 8009bd4:	08009c7b 	.word	0x08009c7b
 8009bd8:	08009d0f 	.word	0x08009d0f
 8009bdc:	08009b4d 	.word	0x08009b4d
 8009be0:	08009c29 	.word	0x08009c29
 8009be4:	08009c65 	.word	0x08009c65
 8009be8:	08009c65 	.word	0x08009c65
 8009bec:	08009c65 	.word	0x08009c65
 8009bf0:	08009c65 	.word	0x08009c65
 8009bf4:	08009c65 	.word	0x08009c65
 8009bf8:	08009c65 	.word	0x08009c65
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009c65 	.word	0x08009c65
 8009c04:	08009c65 	.word	0x08009c65
 8009c08:	2b6e      	cmp	r3, #110	; 0x6e
 8009c0a:	d809      	bhi.n	8009c20 <_scanf_float+0x134>
 8009c0c:	2b60      	cmp	r3, #96	; 0x60
 8009c0e:	d8b2      	bhi.n	8009b76 <_scanf_float+0x8a>
 8009c10:	2b54      	cmp	r3, #84	; 0x54
 8009c12:	d077      	beq.n	8009d04 <_scanf_float+0x218>
 8009c14:	2b59      	cmp	r3, #89	; 0x59
 8009c16:	d199      	bne.n	8009b4c <_scanf_float+0x60>
 8009c18:	2d07      	cmp	r5, #7
 8009c1a:	d197      	bne.n	8009b4c <_scanf_float+0x60>
 8009c1c:	2508      	movs	r5, #8
 8009c1e:	e029      	b.n	8009c74 <_scanf_float+0x188>
 8009c20:	2b74      	cmp	r3, #116	; 0x74
 8009c22:	d06f      	beq.n	8009d04 <_scanf_float+0x218>
 8009c24:	2b79      	cmp	r3, #121	; 0x79
 8009c26:	e7f6      	b.n	8009c16 <_scanf_float+0x12a>
 8009c28:	6821      	ldr	r1, [r4, #0]
 8009c2a:	05c8      	lsls	r0, r1, #23
 8009c2c:	d51a      	bpl.n	8009c64 <_scanf_float+0x178>
 8009c2e:	9b02      	ldr	r3, [sp, #8]
 8009c30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c34:	6021      	str	r1, [r4, #0]
 8009c36:	f109 0901 	add.w	r9, r9, #1
 8009c3a:	b11b      	cbz	r3, 8009c44 <_scanf_float+0x158>
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	3201      	adds	r2, #1
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	60a2      	str	r2, [r4, #8]
 8009c44:	68a3      	ldr	r3, [r4, #8]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	607b      	str	r3, [r7, #4]
 8009c58:	f340 8084 	ble.w	8009d64 <_scanf_float+0x278>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	603b      	str	r3, [r7, #0]
 8009c62:	e766      	b.n	8009b32 <_scanf_float+0x46>
 8009c64:	eb1a 0f05 	cmn.w	sl, r5
 8009c68:	f47f af70 	bne.w	8009b4c <_scanf_float+0x60>
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	f806 3b01 	strb.w	r3, [r6], #1
 8009c78:	e7e4      	b.n	8009c44 <_scanf_float+0x158>
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	0610      	lsls	r0, r2, #24
 8009c7e:	f57f af65 	bpl.w	8009b4c <_scanf_float+0x60>
 8009c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c86:	e7f4      	b.n	8009c72 <_scanf_float+0x186>
 8009c88:	f1ba 0f00 	cmp.w	sl, #0
 8009c8c:	d10e      	bne.n	8009cac <_scanf_float+0x1c0>
 8009c8e:	f1b9 0f00 	cmp.w	r9, #0
 8009c92:	d10e      	bne.n	8009cb2 <_scanf_float+0x1c6>
 8009c94:	6822      	ldr	r2, [r4, #0]
 8009c96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c9e:	d108      	bne.n	8009cb2 <_scanf_float+0x1c6>
 8009ca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	f04f 0a01 	mov.w	sl, #1
 8009caa:	e7e3      	b.n	8009c74 <_scanf_float+0x188>
 8009cac:	f1ba 0f02 	cmp.w	sl, #2
 8009cb0:	d055      	beq.n	8009d5e <_scanf_float+0x272>
 8009cb2:	2d01      	cmp	r5, #1
 8009cb4:	d002      	beq.n	8009cbc <_scanf_float+0x1d0>
 8009cb6:	2d04      	cmp	r5, #4
 8009cb8:	f47f af48 	bne.w	8009b4c <_scanf_float+0x60>
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	b2ed      	uxtb	r5, r5
 8009cc0:	e7d8      	b.n	8009c74 <_scanf_float+0x188>
 8009cc2:	f1ba 0f01 	cmp.w	sl, #1
 8009cc6:	f47f af41 	bne.w	8009b4c <_scanf_float+0x60>
 8009cca:	f04f 0a02 	mov.w	sl, #2
 8009cce:	e7d1      	b.n	8009c74 <_scanf_float+0x188>
 8009cd0:	b97d      	cbnz	r5, 8009cf2 <_scanf_float+0x206>
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	f47f af3c 	bne.w	8009b52 <_scanf_float+0x66>
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ce0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ce4:	f47f af39 	bne.w	8009b5a <_scanf_float+0x6e>
 8009ce8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cec:	6022      	str	r2, [r4, #0]
 8009cee:	2501      	movs	r5, #1
 8009cf0:	e7c0      	b.n	8009c74 <_scanf_float+0x188>
 8009cf2:	2d03      	cmp	r5, #3
 8009cf4:	d0e2      	beq.n	8009cbc <_scanf_float+0x1d0>
 8009cf6:	2d05      	cmp	r5, #5
 8009cf8:	e7de      	b.n	8009cb8 <_scanf_float+0x1cc>
 8009cfa:	2d02      	cmp	r5, #2
 8009cfc:	f47f af26 	bne.w	8009b4c <_scanf_float+0x60>
 8009d00:	2503      	movs	r5, #3
 8009d02:	e7b7      	b.n	8009c74 <_scanf_float+0x188>
 8009d04:	2d06      	cmp	r5, #6
 8009d06:	f47f af21 	bne.w	8009b4c <_scanf_float+0x60>
 8009d0a:	2507      	movs	r5, #7
 8009d0c:	e7b2      	b.n	8009c74 <_scanf_float+0x188>
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	0591      	lsls	r1, r2, #22
 8009d12:	f57f af1b 	bpl.w	8009b4c <_scanf_float+0x60>
 8009d16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009d1a:	6022      	str	r2, [r4, #0]
 8009d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d20:	e7a8      	b.n	8009c74 <_scanf_float+0x188>
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009d28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d2c:	d006      	beq.n	8009d3c <_scanf_float+0x250>
 8009d2e:	0550      	lsls	r0, r2, #21
 8009d30:	f57f af0c 	bpl.w	8009b4c <_scanf_float+0x60>
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	f43f af0f 	beq.w	8009b5a <_scanf_float+0x6e>
 8009d3c:	0591      	lsls	r1, r2, #22
 8009d3e:	bf58      	it	pl
 8009d40:	9901      	ldrpl	r1, [sp, #4]
 8009d42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d46:	bf58      	it	pl
 8009d48:	eba9 0101 	subpl.w	r1, r9, r1
 8009d4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d50:	bf58      	it	pl
 8009d52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d56:	6022      	str	r2, [r4, #0]
 8009d58:	f04f 0900 	mov.w	r9, #0
 8009d5c:	e78a      	b.n	8009c74 <_scanf_float+0x188>
 8009d5e:	f04f 0a03 	mov.w	sl, #3
 8009d62:	e787      	b.n	8009c74 <_scanf_float+0x188>
 8009d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4798      	blx	r3
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f43f aedf 	beq.w	8009b32 <_scanf_float+0x46>
 8009d74:	e6ea      	b.n	8009b4c <_scanf_float+0x60>
 8009d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d7e:	463a      	mov	r2, r7
 8009d80:	4640      	mov	r0, r8
 8009d82:	4798      	blx	r3
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	e6ec      	b.n	8009b66 <_scanf_float+0x7a>
 8009d8c:	1e6b      	subs	r3, r5, #1
 8009d8e:	2b06      	cmp	r3, #6
 8009d90:	d825      	bhi.n	8009dde <_scanf_float+0x2f2>
 8009d92:	2d02      	cmp	r5, #2
 8009d94:	d836      	bhi.n	8009e04 <_scanf_float+0x318>
 8009d96:	455e      	cmp	r6, fp
 8009d98:	f67f aee8 	bls.w	8009b6c <_scanf_float+0x80>
 8009d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009da0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009da4:	463a      	mov	r2, r7
 8009da6:	4640      	mov	r0, r8
 8009da8:	4798      	blx	r3
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	e7f1      	b.n	8009d96 <_scanf_float+0x2aa>
 8009db2:	9802      	ldr	r0, [sp, #8]
 8009db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009dbc:	9002      	str	r0, [sp, #8]
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	4798      	blx	r3
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dce:	fa5f fa8a 	uxtb.w	sl, sl
 8009dd2:	f1ba 0f02 	cmp.w	sl, #2
 8009dd6:	d1ec      	bne.n	8009db2 <_scanf_float+0x2c6>
 8009dd8:	3d03      	subs	r5, #3
 8009dda:	b2ed      	uxtb	r5, r5
 8009ddc:	1b76      	subs	r6, r6, r5
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	05da      	lsls	r2, r3, #23
 8009de2:	d52f      	bpl.n	8009e44 <_scanf_float+0x358>
 8009de4:	055b      	lsls	r3, r3, #21
 8009de6:	d510      	bpl.n	8009e0a <_scanf_float+0x31e>
 8009de8:	455e      	cmp	r6, fp
 8009dea:	f67f aebf 	bls.w	8009b6c <_scanf_float+0x80>
 8009dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009df2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009df6:	463a      	mov	r2, r7
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4798      	blx	r3
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	6123      	str	r3, [r4, #16]
 8009e02:	e7f1      	b.n	8009de8 <_scanf_float+0x2fc>
 8009e04:	46aa      	mov	sl, r5
 8009e06:	9602      	str	r6, [sp, #8]
 8009e08:	e7df      	b.n	8009dca <_scanf_float+0x2de>
 8009e0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	2965      	cmp	r1, #101	; 0x65
 8009e12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e16:	f106 35ff 	add.w	r5, r6, #4294967295
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	d00c      	beq.n	8009e38 <_scanf_float+0x34c>
 8009e1e:	2945      	cmp	r1, #69	; 0x45
 8009e20:	d00a      	beq.n	8009e38 <_scanf_float+0x34c>
 8009e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e26:	463a      	mov	r2, r7
 8009e28:	4640      	mov	r0, r8
 8009e2a:	4798      	blx	r3
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	1eb5      	subs	r5, r6, #2
 8009e36:	6123      	str	r3, [r4, #16]
 8009e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e3c:	463a      	mov	r2, r7
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4798      	blx	r3
 8009e42:	462e      	mov	r6, r5
 8009e44:	6825      	ldr	r5, [r4, #0]
 8009e46:	f015 0510 	ands.w	r5, r5, #16
 8009e4a:	d159      	bne.n	8009f00 <_scanf_float+0x414>
 8009e4c:	7035      	strb	r5, [r6, #0]
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e58:	d11b      	bne.n	8009e92 <_scanf_float+0x3a6>
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	454b      	cmp	r3, r9
 8009e5e:	eba3 0209 	sub.w	r2, r3, r9
 8009e62:	d123      	bne.n	8009eac <_scanf_float+0x3c0>
 8009e64:	2200      	movs	r2, #0
 8009e66:	4659      	mov	r1, fp
 8009e68:	4640      	mov	r0, r8
 8009e6a:	f001 f81f 	bl	800aeac <_strtod_r>
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	f012 0f02 	tst.w	r2, #2
 8009e76:	ec57 6b10 	vmov	r6, r7, d0
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	d021      	beq.n	8009ec2 <_scanf_float+0x3d6>
 8009e7e:	9903      	ldr	r1, [sp, #12]
 8009e80:	1d1a      	adds	r2, r3, #4
 8009e82:	600a      	str	r2, [r1, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	e9c3 6700 	strd	r6, r7, [r3]
 8009e8a:	68e3      	ldr	r3, [r4, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60e3      	str	r3, [r4, #12]
 8009e90:	e66d      	b.n	8009b6e <_scanf_float+0x82>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0e5      	beq.n	8009e64 <_scanf_float+0x378>
 8009e98:	9905      	ldr	r1, [sp, #20]
 8009e9a:	230a      	movs	r3, #10
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	3101      	adds	r1, #1
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	f001 f88b 	bl	800afbc <_strtol_r>
 8009ea6:	9b04      	ldr	r3, [sp, #16]
 8009ea8:	9e05      	ldr	r6, [sp, #20]
 8009eaa:	1ac2      	subs	r2, r0, r3
 8009eac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009eb0:	429e      	cmp	r6, r3
 8009eb2:	bf28      	it	cs
 8009eb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009eb8:	4912      	ldr	r1, [pc, #72]	; (8009f04 <_scanf_float+0x418>)
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 f9b4 	bl	800a228 <siprintf>
 8009ec0:	e7d0      	b.n	8009e64 <_scanf_float+0x378>
 8009ec2:	9903      	ldr	r1, [sp, #12]
 8009ec4:	f012 0f04 	tst.w	r2, #4
 8009ec8:	f103 0204 	add.w	r2, r3, #4
 8009ecc:	600a      	str	r2, [r1, #0]
 8009ece:	d1d9      	bne.n	8009e84 <_scanf_float+0x398>
 8009ed0:	f8d3 8000 	ldr.w	r8, [r3]
 8009ed4:	ee10 2a10 	vmov	r2, s0
 8009ed8:	ee10 0a10 	vmov	r0, s0
 8009edc:	463b      	mov	r3, r7
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fe44 	bl	8000b6c <__aeabi_dcmpun>
 8009ee4:	b128      	cbz	r0, 8009ef2 <_scanf_float+0x406>
 8009ee6:	4808      	ldr	r0, [pc, #32]	; (8009f08 <_scanf_float+0x41c>)
 8009ee8:	f000 f998 	bl	800a21c <nanf>
 8009eec:	ed88 0a00 	vstr	s0, [r8]
 8009ef0:	e7cb      	b.n	8009e8a <_scanf_float+0x39e>
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	f7f6 fe97 	bl	8000c28 <__aeabi_d2f>
 8009efa:	f8c8 0000 	str.w	r0, [r8]
 8009efe:	e7c4      	b.n	8009e8a <_scanf_float+0x39e>
 8009f00:	2500      	movs	r5, #0
 8009f02:	e634      	b.n	8009b6e <_scanf_float+0x82>
 8009f04:	0800e3e4 	.word	0x0800e3e4
 8009f08:	0800e7f0 	.word	0x0800e7f0

08009f0c <swapfunc>:
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	b510      	push	{r4, lr}
 8009f10:	d00a      	beq.n	8009f28 <swapfunc+0x1c>
 8009f12:	0892      	lsrs	r2, r2, #2
 8009f14:	3a01      	subs	r2, #1
 8009f16:	6803      	ldr	r3, [r0, #0]
 8009f18:	680c      	ldr	r4, [r1, #0]
 8009f1a:	f840 4b04 	str.w	r4, [r0], #4
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	f841 3b04 	str.w	r3, [r1], #4
 8009f24:	dcf6      	bgt.n	8009f14 <swapfunc+0x8>
 8009f26:	bd10      	pop	{r4, pc}
 8009f28:	4402      	add	r2, r0
 8009f2a:	780c      	ldrb	r4, [r1, #0]
 8009f2c:	7803      	ldrb	r3, [r0, #0]
 8009f2e:	f800 4b01 	strb.w	r4, [r0], #1
 8009f32:	f801 3b01 	strb.w	r3, [r1], #1
 8009f36:	1a13      	subs	r3, r2, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dcf6      	bgt.n	8009f2a <swapfunc+0x1e>
 8009f3c:	e7f3      	b.n	8009f26 <swapfunc+0x1a>

08009f3e <med3.constprop.0>:
 8009f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	4615      	mov	r5, r2
 8009f44:	4607      	mov	r7, r0
 8009f46:	461e      	mov	r6, r3
 8009f48:	4798      	blx	r3
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4620      	mov	r0, r4
 8009f50:	da0a      	bge.n	8009f68 <med3.constprop.0+0x2a>
 8009f52:	47b0      	blx	r6
 8009f54:	2800      	cmp	r0, #0
 8009f56:	db05      	blt.n	8009f64 <med3.constprop.0+0x26>
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	47b0      	blx	r6
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	db0a      	blt.n	8009f78 <med3.constprop.0+0x3a>
 8009f62:	463c      	mov	r4, r7
 8009f64:	4620      	mov	r0, r4
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f68:	47b0      	blx	r6
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	dcfa      	bgt.n	8009f64 <med3.constprop.0+0x26>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4638      	mov	r0, r7
 8009f72:	47b0      	blx	r6
 8009f74:	2800      	cmp	r0, #0
 8009f76:	dbf4      	blt.n	8009f62 <med3.constprop.0+0x24>
 8009f78:	462c      	mov	r4, r5
 8009f7a:	e7f3      	b.n	8009f64 <med3.constprop.0+0x26>

08009f7c <qsort>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	469a      	mov	sl, r3
 8009f82:	ea40 0302 	orr.w	r3, r0, r2
 8009f86:	079b      	lsls	r3, r3, #30
 8009f88:	b097      	sub	sp, #92	; 0x5c
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	d11a      	bne.n	8009fc6 <qsort+0x4a>
 8009f90:	f1b2 0804 	subs.w	r8, r2, #4
 8009f94:	bf18      	it	ne
 8009f96:	f04f 0801 	movne.w	r8, #1
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9302      	str	r3, [sp, #8]
 8009f9e:	1933      	adds	r3, r6, r4
 8009fa0:	fb04 f701 	mul.w	r7, r4, r1
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	2906      	cmp	r1, #6
 8009fa8:	eb06 0307 	add.w	r3, r6, r7
 8009fac:	9303      	str	r3, [sp, #12]
 8009fae:	d82a      	bhi.n	800a006 <qsort+0x8a>
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	9a03      	ldr	r2, [sp, #12]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d310      	bcc.n	8009fda <qsort+0x5e>
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 811e 	bne.w	800a1fc <qsort+0x280>
 8009fc0:	b017      	add	sp, #92	; 0x5c
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc6:	f04f 0802 	mov.w	r8, #2
 8009fca:	e7e6      	b.n	8009f9a <qsort+0x1e>
 8009fcc:	4643      	mov	r3, r8
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7ff ff9a 	bl	8009f0c <swapfunc>
 8009fd8:	e00e      	b.n	8009ff8 <qsort+0x7c>
 8009fda:	9d01      	ldr	r5, [sp, #4]
 8009fdc:	e00d      	b.n	8009ffa <qsort+0x7e>
 8009fde:	1b2f      	subs	r7, r5, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47d0      	blx	sl
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	dd09      	ble.n	8009ffe <qsort+0x82>
 8009fea:	f1b8 0f00 	cmp.w	r8, #0
 8009fee:	d1ed      	bne.n	8009fcc <qsort+0x50>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	602a      	str	r2, [r5, #0]
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	463d      	mov	r5, r7
 8009ffa:	42ae      	cmp	r6, r5
 8009ffc:	d3ef      	bcc.n	8009fde <qsort+0x62>
 8009ffe:	9b01      	ldr	r3, [sp, #4]
 800a000:	4423      	add	r3, r4
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	e7d4      	b.n	8009fb0 <qsort+0x34>
 800a006:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800a00a:	1b3f      	subs	r7, r7, r4
 800a00c:	2907      	cmp	r1, #7
 800a00e:	fb04 6909 	mla	r9, r4, r9, r6
 800a012:	4437      	add	r7, r6
 800a014:	d022      	beq.n	800a05c <qsort+0xe0>
 800a016:	2928      	cmp	r1, #40	; 0x28
 800a018:	d945      	bls.n	800a0a6 <qsort+0x12a>
 800a01a:	08c9      	lsrs	r1, r1, #3
 800a01c:	fb04 f501 	mul.w	r5, r4, r1
 800a020:	4653      	mov	r3, sl
 800a022:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800a026:	1971      	adds	r1, r6, r5
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff ff88 	bl	8009f3e <med3.constprop.0>
 800a02e:	4649      	mov	r1, r9
 800a030:	eb09 0205 	add.w	r2, r9, r5
 800a034:	4653      	mov	r3, sl
 800a036:	4683      	mov	fp, r0
 800a038:	1b48      	subs	r0, r1, r5
 800a03a:	f7ff ff80 	bl	8009f3e <med3.constprop.0>
 800a03e:	463a      	mov	r2, r7
 800a040:	4681      	mov	r9, r0
 800a042:	4653      	mov	r3, sl
 800a044:	1b79      	subs	r1, r7, r5
 800a046:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800a04a:	f7ff ff78 	bl	8009f3e <med3.constprop.0>
 800a04e:	4602      	mov	r2, r0
 800a050:	4649      	mov	r1, r9
 800a052:	4653      	mov	r3, sl
 800a054:	4658      	mov	r0, fp
 800a056:	f7ff ff72 	bl	8009f3e <med3.constprop.0>
 800a05a:	4681      	mov	r9, r0
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	d124      	bne.n	800a0ac <qsort+0x130>
 800a062:	6833      	ldr	r3, [r6, #0]
 800a064:	f8d9 2000 	ldr.w	r2, [r9]
 800a068:	6032      	str	r2, [r6, #0]
 800a06a:	f8c9 3000 	str.w	r3, [r9]
 800a06e:	eb06 0b04 	add.w	fp, r6, r4
 800a072:	46b9      	mov	r9, r7
 800a074:	465d      	mov	r5, fp
 800a076:	2300      	movs	r3, #0
 800a078:	45bb      	cmp	fp, r7
 800a07a:	d835      	bhi.n	800a0e8 <qsort+0x16c>
 800a07c:	4631      	mov	r1, r6
 800a07e:	4658      	mov	r0, fp
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	47d0      	blx	sl
 800a084:	2800      	cmp	r0, #0
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	dc3e      	bgt.n	800a108 <qsort+0x18c>
 800a08a:	d10a      	bne.n	800a0a2 <qsort+0x126>
 800a08c:	f1b8 0f00 	cmp.w	r8, #0
 800a090:	d113      	bne.n	800a0ba <qsort+0x13e>
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	f8db 2000 	ldr.w	r2, [fp]
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	f8cb 3000 	str.w	r3, [fp]
 800a09e:	4425      	add	r5, r4
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	44a3      	add	fp, r4
 800a0a4:	e7e8      	b.n	800a078 <qsort+0xfc>
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	46b3      	mov	fp, r6
 800a0aa:	e7d1      	b.n	800a050 <qsort+0xd4>
 800a0ac:	4643      	mov	r3, r8
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ff2a 	bl	8009f0c <swapfunc>
 800a0b8:	e7d9      	b.n	800a06e <qsort+0xf2>
 800a0ba:	4643      	mov	r3, r8
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4659      	mov	r1, fp
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7ff ff23 	bl	8009f0c <swapfunc>
 800a0c6:	e7ea      	b.n	800a09e <qsort+0x122>
 800a0c8:	d10b      	bne.n	800a0e2 <qsort+0x166>
 800a0ca:	f1b8 0f00 	cmp.w	r8, #0
 800a0ce:	d114      	bne.n	800a0fa <qsort+0x17e>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	f8d9 2000 	ldr.w	r2, [r9]
 800a0d6:	603a      	str	r2, [r7, #0]
 800a0d8:	f8c9 3000 	str.w	r3, [r9]
 800a0dc:	eba9 0904 	sub.w	r9, r9, r4
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	9f04      	ldr	r7, [sp, #16]
 800a0e4:	45bb      	cmp	fp, r7
 800a0e6:	d90f      	bls.n	800a108 <qsort+0x18c>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d143      	bne.n	800a174 <qsort+0x1f8>
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	9a03      	ldr	r2, [sp, #12]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	f4bf af61 	bcs.w	8009fb8 <qsort+0x3c>
 800a0f6:	9d01      	ldr	r5, [sp, #4]
 800a0f8:	e036      	b.n	800a168 <qsort+0x1ec>
 800a0fa:	4643      	mov	r3, r8
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4649      	mov	r1, r9
 800a100:	4638      	mov	r0, r7
 800a102:	f7ff ff03 	bl	8009f0c <swapfunc>
 800a106:	e7e9      	b.n	800a0dc <qsort+0x160>
 800a108:	4631      	mov	r1, r6
 800a10a:	4638      	mov	r0, r7
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	47d0      	blx	sl
 800a110:	1b3b      	subs	r3, r7, r4
 800a112:	2800      	cmp	r0, #0
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	9b05      	ldr	r3, [sp, #20]
 800a118:	dad6      	bge.n	800a0c8 <qsort+0x14c>
 800a11a:	f1b8 0f00 	cmp.w	r8, #0
 800a11e:	d006      	beq.n	800a12e <qsort+0x1b2>
 800a120:	4643      	mov	r3, r8
 800a122:	4622      	mov	r2, r4
 800a124:	4639      	mov	r1, r7
 800a126:	4658      	mov	r0, fp
 800a128:	f7ff fef0 	bl	8009f0c <swapfunc>
 800a12c:	e005      	b.n	800a13a <qsort+0x1be>
 800a12e:	f8db 3000 	ldr.w	r3, [fp]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	f8cb 2000 	str.w	r2, [fp]
 800a138:	603b      	str	r3, [r7, #0]
 800a13a:	9f04      	ldr	r7, [sp, #16]
 800a13c:	e7b0      	b.n	800a0a0 <qsort+0x124>
 800a13e:	4643      	mov	r3, r8
 800a140:	4622      	mov	r2, r4
 800a142:	4639      	mov	r1, r7
 800a144:	4628      	mov	r0, r5
 800a146:	f7ff fee1 	bl	8009f0c <swapfunc>
 800a14a:	e00c      	b.n	800a166 <qsort+0x1ea>
 800a14c:	1b2f      	subs	r7, r5, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	4638      	mov	r0, r7
 800a152:	47d0      	blx	sl
 800a154:	2800      	cmp	r0, #0
 800a156:	dd09      	ble.n	800a16c <qsort+0x1f0>
 800a158:	f1b8 0f00 	cmp.w	r8, #0
 800a15c:	d1ef      	bne.n	800a13e <qsort+0x1c2>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	602a      	str	r2, [r5, #0]
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	463d      	mov	r5, r7
 800a168:	42ae      	cmp	r6, r5
 800a16a:	d3ef      	bcc.n	800a14c <qsort+0x1d0>
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	4423      	add	r3, r4
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	e7bb      	b.n	800a0ec <qsort+0x170>
 800a174:	ebab 0305 	sub.w	r3, fp, r5
 800a178:	1baa      	subs	r2, r5, r6
 800a17a:	429a      	cmp	r2, r3
 800a17c:	bfa8      	it	ge
 800a17e:	461a      	movge	r2, r3
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	b12a      	cbz	r2, 800a190 <qsort+0x214>
 800a184:	4643      	mov	r3, r8
 800a186:	ebab 0102 	sub.w	r1, fp, r2
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff febe 	bl	8009f0c <swapfunc>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	eba3 0209 	sub.w	r2, r3, r9
 800a196:	eba9 0707 	sub.w	r7, r9, r7
 800a19a:	1b12      	subs	r2, r2, r4
 800a19c:	42ba      	cmp	r2, r7
 800a19e:	bf28      	it	cs
 800a1a0:	463a      	movcs	r2, r7
 800a1a2:	b12a      	cbz	r2, 800a1b0 <qsort+0x234>
 800a1a4:	9903      	ldr	r1, [sp, #12]
 800a1a6:	4643      	mov	r3, r8
 800a1a8:	1a89      	subs	r1, r1, r2
 800a1aa:	4658      	mov	r0, fp
 800a1ac:	f7ff feae 	bl	8009f0c <swapfunc>
 800a1b0:	9d01      	ldr	r5, [sp, #4]
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	42af      	cmp	r7, r5
 800a1b6:	eba3 0007 	sub.w	r0, r3, r7
 800a1ba:	d904      	bls.n	800a1c6 <qsort+0x24a>
 800a1bc:	4633      	mov	r3, r6
 800a1be:	463d      	mov	r5, r7
 800a1c0:	9f01      	ldr	r7, [sp, #4]
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	42a7      	cmp	r7, r4
 800a1c8:	d921      	bls.n	800a20e <qsort+0x292>
 800a1ca:	fbb7 f1f4 	udiv	r1, r7, r4
 800a1ce:	9b02      	ldr	r3, [sp, #8]
 800a1d0:	2b07      	cmp	r3, #7
 800a1d2:	d80d      	bhi.n	800a1f0 <qsort+0x274>
 800a1d4:	fbb5 f5f4 	udiv	r5, r5, r4
 800a1d8:	aa16      	add	r2, sp, #88	; 0x58
 800a1da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1de:	f843 6c40 	str.w	r6, [r3, #-64]
 800a1e2:	f843 5c3c 	str.w	r5, [r3, #-60]
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	e6d6      	b.n	8009f9e <qsort+0x22>
 800a1f0:	4653      	mov	r3, sl
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	f7ff fec2 	bl	8009f7c <qsort>
 800a1f8:	42a5      	cmp	r5, r4
 800a1fa:	d80b      	bhi.n	800a214 <qsort+0x298>
 800a1fc:	9b02      	ldr	r3, [sp, #8]
 800a1fe:	aa16      	add	r2, sp, #88	; 0x58
 800a200:	3b01      	subs	r3, #1
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a208:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800a20c:	e7ee      	b.n	800a1ec <qsort+0x270>
 800a20e:	42a5      	cmp	r5, r4
 800a210:	f67f aed2 	bls.w	8009fb8 <qsort+0x3c>
 800a214:	fbb5 f1f4 	udiv	r1, r5, r4
 800a218:	4630      	mov	r0, r6
 800a21a:	e7e7      	b.n	800a1ec <qsort+0x270>

0800a21c <nanf>:
 800a21c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a224 <nanf+0x8>
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	7fc00000 	.word	0x7fc00000

0800a228 <siprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b500      	push	{lr}
 800a22c:	b09c      	sub	sp, #112	; 0x70
 800a22e:	ab1d      	add	r3, sp, #116	; 0x74
 800a230:	9002      	str	r0, [sp, #8]
 800a232:	9006      	str	r0, [sp, #24]
 800a234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <siprintf+0x38>)
 800a23a:	9107      	str	r1, [sp, #28]
 800a23c:	9104      	str	r1, [sp, #16]
 800a23e:	4909      	ldr	r1, [pc, #36]	; (800a264 <siprintf+0x3c>)
 800a240:	f853 2b04 	ldr.w	r2, [r3], #4
 800a244:	9105      	str	r1, [sp, #20]
 800a246:	6800      	ldr	r0, [r0, #0]
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	a902      	add	r1, sp, #8
 800a24c:	f002 ff02 	bl	800d054 <_svfiprintf_r>
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
 800a256:	b01c      	add	sp, #112	; 0x70
 800a258:	f85d eb04 	ldr.w	lr, [sp], #4
 800a25c:	b003      	add	sp, #12
 800a25e:	4770      	bx	lr
 800a260:	2000003c 	.word	0x2000003c
 800a264:	ffff0208 	.word	0xffff0208

0800a268 <sulp>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4604      	mov	r4, r0
 800a26c:	460d      	mov	r5, r1
 800a26e:	ec45 4b10 	vmov	d0, r4, r5
 800a272:	4616      	mov	r6, r2
 800a274:	f002 fc4c 	bl	800cb10 <__ulp>
 800a278:	ec51 0b10 	vmov	r0, r1, d0
 800a27c:	b17e      	cbz	r6, 800a29e <sulp+0x36>
 800a27e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a282:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a286:	2b00      	cmp	r3, #0
 800a288:	dd09      	ble.n	800a29e <sulp+0x36>
 800a28a:	051b      	lsls	r3, r3, #20
 800a28c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a290:	2400      	movs	r4, #0
 800a292:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	f7f6 f9cd 	bl	8000638 <__aeabi_dmul>
 800a29e:	bd70      	pop	{r4, r5, r6, pc}

0800a2a0 <_strtod_l>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	ed2d 8b02 	vpush	{d8}
 800a2a8:	b09d      	sub	sp, #116	; 0x74
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9318      	str	r3, [sp, #96]	; 0x60
 800a2b0:	4ba2      	ldr	r3, [pc, #648]	; (800a53c <_strtod_l+0x29c>)
 800a2b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	4688      	mov	r8, r1
 800a2be:	f7f5 ffa7 	bl	8000210 <strlen>
 800a2c2:	f04f 0a00 	mov.w	sl, #0
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	f04f 0b00 	mov.w	fp, #0
 800a2cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2d2:	781a      	ldrb	r2, [r3, #0]
 800a2d4:	2a2b      	cmp	r2, #43	; 0x2b
 800a2d6:	d04e      	beq.n	800a376 <_strtod_l+0xd6>
 800a2d8:	d83b      	bhi.n	800a352 <_strtod_l+0xb2>
 800a2da:	2a0d      	cmp	r2, #13
 800a2dc:	d834      	bhi.n	800a348 <_strtod_l+0xa8>
 800a2de:	2a08      	cmp	r2, #8
 800a2e0:	d834      	bhi.n	800a34c <_strtod_l+0xac>
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d03e      	beq.n	800a364 <_strtod_l+0xc4>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2ec:	7833      	ldrb	r3, [r6, #0]
 800a2ee:	2b30      	cmp	r3, #48	; 0x30
 800a2f0:	f040 80b0 	bne.w	800a454 <_strtod_l+0x1b4>
 800a2f4:	7873      	ldrb	r3, [r6, #1]
 800a2f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2fa:	2b58      	cmp	r3, #88	; 0x58
 800a2fc:	d168      	bne.n	800a3d0 <_strtod_l+0x130>
 800a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	ab18      	add	r3, sp, #96	; 0x60
 800a304:	9702      	str	r7, [sp, #8]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4a8d      	ldr	r2, [pc, #564]	; (800a540 <_strtod_l+0x2a0>)
 800a30a:	ab19      	add	r3, sp, #100	; 0x64
 800a30c:	a917      	add	r1, sp, #92	; 0x5c
 800a30e:	4620      	mov	r0, r4
 800a310:	f001 fd58 	bl	800bdc4 <__gethex>
 800a314:	f010 0707 	ands.w	r7, r0, #7
 800a318:	4605      	mov	r5, r0
 800a31a:	d005      	beq.n	800a328 <_strtod_l+0x88>
 800a31c:	2f06      	cmp	r7, #6
 800a31e:	d12c      	bne.n	800a37a <_strtod_l+0xda>
 800a320:	3601      	adds	r6, #1
 800a322:	2300      	movs	r3, #0
 800a324:	9617      	str	r6, [sp, #92]	; 0x5c
 800a326:	930a      	str	r3, [sp, #40]	; 0x28
 800a328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f040 8590 	bne.w	800ae50 <_strtod_l+0xbb0>
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	b1eb      	cbz	r3, 800a370 <_strtod_l+0xd0>
 800a334:	4652      	mov	r2, sl
 800a336:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a33a:	ec43 2b10 	vmov	d0, r2, r3
 800a33e:	b01d      	add	sp, #116	; 0x74
 800a340:	ecbd 8b02 	vpop	{d8}
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	2a20      	cmp	r2, #32
 800a34a:	d1cc      	bne.n	800a2e6 <_strtod_l+0x46>
 800a34c:	3301      	adds	r3, #1
 800a34e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a350:	e7be      	b.n	800a2d0 <_strtod_l+0x30>
 800a352:	2a2d      	cmp	r2, #45	; 0x2d
 800a354:	d1c7      	bne.n	800a2e6 <_strtod_l+0x46>
 800a356:	2201      	movs	r2, #1
 800a358:	920a      	str	r2, [sp, #40]	; 0x28
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1c2      	bne.n	800a2ea <_strtod_l+0x4a>
 800a364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a366:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f040 856e 	bne.w	800ae4c <_strtod_l+0xbac>
 800a370:	4652      	mov	r2, sl
 800a372:	465b      	mov	r3, fp
 800a374:	e7e1      	b.n	800a33a <_strtod_l+0x9a>
 800a376:	2200      	movs	r2, #0
 800a378:	e7ee      	b.n	800a358 <_strtod_l+0xb8>
 800a37a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a37c:	b13a      	cbz	r2, 800a38e <_strtod_l+0xee>
 800a37e:	2135      	movs	r1, #53	; 0x35
 800a380:	a81a      	add	r0, sp, #104	; 0x68
 800a382:	f002 fcd0 	bl	800cd26 <__copybits>
 800a386:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a388:	4620      	mov	r0, r4
 800a38a:	f002 f88f 	bl	800c4ac <_Bfree>
 800a38e:	3f01      	subs	r7, #1
 800a390:	2f04      	cmp	r7, #4
 800a392:	d806      	bhi.n	800a3a2 <_strtod_l+0x102>
 800a394:	e8df f007 	tbb	[pc, r7]
 800a398:	1714030a 	.word	0x1714030a
 800a39c:	0a          	.byte	0x0a
 800a39d:	00          	.byte	0x00
 800a39e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a3a2:	0728      	lsls	r0, r5, #28
 800a3a4:	d5c0      	bpl.n	800a328 <_strtod_l+0x88>
 800a3a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a3aa:	e7bd      	b.n	800a328 <_strtod_l+0x88>
 800a3ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a3b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a3be:	e7f0      	b.n	800a3a2 <_strtod_l+0x102>
 800a3c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a544 <_strtod_l+0x2a4>
 800a3c4:	e7ed      	b.n	800a3a2 <_strtod_l+0x102>
 800a3c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a3ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a3ce:	e7e8      	b.n	800a3a2 <_strtod_l+0x102>
 800a3d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	2b30      	cmp	r3, #48	; 0x30
 800a3da:	d0f9      	beq.n	800a3d0 <_strtod_l+0x130>
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0a3      	beq.n	800a328 <_strtod_l+0x88>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3ea:	9308      	str	r3, [sp, #32]
 800a3ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3f0:	464f      	mov	r7, r9
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a3f6:	7806      	ldrb	r6, [r0, #0]
 800a3f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a3fc:	b2d9      	uxtb	r1, r3
 800a3fe:	2909      	cmp	r1, #9
 800a400:	d92a      	bls.n	800a458 <_strtod_l+0x1b8>
 800a402:	9905      	ldr	r1, [sp, #20]
 800a404:	462a      	mov	r2, r5
 800a406:	f002 ff3f 	bl	800d288 <strncmp>
 800a40a:	b398      	cbz	r0, 800a474 <_strtod_l+0x1d4>
 800a40c:	2000      	movs	r0, #0
 800a40e:	4632      	mov	r2, r6
 800a410:	463d      	mov	r5, r7
 800a412:	9005      	str	r0, [sp, #20]
 800a414:	4603      	mov	r3, r0
 800a416:	2a65      	cmp	r2, #101	; 0x65
 800a418:	d001      	beq.n	800a41e <_strtod_l+0x17e>
 800a41a:	2a45      	cmp	r2, #69	; 0x45
 800a41c:	d118      	bne.n	800a450 <_strtod_l+0x1b0>
 800a41e:	b91d      	cbnz	r5, 800a428 <_strtod_l+0x188>
 800a420:	9a04      	ldr	r2, [sp, #16]
 800a422:	4302      	orrs	r2, r0
 800a424:	d09e      	beq.n	800a364 <_strtod_l+0xc4>
 800a426:	2500      	movs	r5, #0
 800a428:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a42c:	f108 0201 	add.w	r2, r8, #1
 800a430:	9217      	str	r2, [sp, #92]	; 0x5c
 800a432:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a436:	2a2b      	cmp	r2, #43	; 0x2b
 800a438:	d075      	beq.n	800a526 <_strtod_l+0x286>
 800a43a:	2a2d      	cmp	r2, #45	; 0x2d
 800a43c:	d07b      	beq.n	800a536 <_strtod_l+0x296>
 800a43e:	f04f 0c00 	mov.w	ip, #0
 800a442:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a446:	2909      	cmp	r1, #9
 800a448:	f240 8082 	bls.w	800a550 <_strtod_l+0x2b0>
 800a44c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a450:	2600      	movs	r6, #0
 800a452:	e09d      	b.n	800a590 <_strtod_l+0x2f0>
 800a454:	2300      	movs	r3, #0
 800a456:	e7c4      	b.n	800a3e2 <_strtod_l+0x142>
 800a458:	2f08      	cmp	r7, #8
 800a45a:	bfd8      	it	le
 800a45c:	9907      	ldrle	r1, [sp, #28]
 800a45e:	f100 0001 	add.w	r0, r0, #1
 800a462:	bfda      	itte	le
 800a464:	fb02 3301 	mlale	r3, r2, r1, r3
 800a468:	9307      	strle	r3, [sp, #28]
 800a46a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a46e:	3701      	adds	r7, #1
 800a470:	9017      	str	r0, [sp, #92]	; 0x5c
 800a472:	e7bf      	b.n	800a3f4 <_strtod_l+0x154>
 800a474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a476:	195a      	adds	r2, r3, r5
 800a478:	9217      	str	r2, [sp, #92]	; 0x5c
 800a47a:	5d5a      	ldrb	r2, [r3, r5]
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	d037      	beq.n	800a4f0 <_strtod_l+0x250>
 800a480:	9005      	str	r0, [sp, #20]
 800a482:	463d      	mov	r5, r7
 800a484:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a488:	2b09      	cmp	r3, #9
 800a48a:	d912      	bls.n	800a4b2 <_strtod_l+0x212>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e7c2      	b.n	800a416 <_strtod_l+0x176>
 800a490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	9217      	str	r2, [sp, #92]	; 0x5c
 800a496:	785a      	ldrb	r2, [r3, #1]
 800a498:	3001      	adds	r0, #1
 800a49a:	2a30      	cmp	r2, #48	; 0x30
 800a49c:	d0f8      	beq.n	800a490 <_strtod_l+0x1f0>
 800a49e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a4a2:	2b08      	cmp	r3, #8
 800a4a4:	f200 84d9 	bhi.w	800ae5a <_strtod_l+0xbba>
 800a4a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4aa:	9005      	str	r0, [sp, #20]
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	9308      	str	r3, [sp, #32]
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	3a30      	subs	r2, #48	; 0x30
 800a4b4:	f100 0301 	add.w	r3, r0, #1
 800a4b8:	d014      	beq.n	800a4e4 <_strtod_l+0x244>
 800a4ba:	9905      	ldr	r1, [sp, #20]
 800a4bc:	4419      	add	r1, r3
 800a4be:	9105      	str	r1, [sp, #20]
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	eb00 0e05 	add.w	lr, r0, r5
 800a4c6:	210a      	movs	r1, #10
 800a4c8:	4573      	cmp	r3, lr
 800a4ca:	d113      	bne.n	800a4f4 <_strtod_l+0x254>
 800a4cc:	182b      	adds	r3, r5, r0
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	f105 0501 	add.w	r5, r5, #1
 800a4d4:	4405      	add	r5, r0
 800a4d6:	dc1c      	bgt.n	800a512 <_strtod_l+0x272>
 800a4d8:	9907      	ldr	r1, [sp, #28]
 800a4da:	230a      	movs	r3, #10
 800a4dc:	fb03 2301 	mla	r3, r3, r1, r2
 800a4e0:	9307      	str	r3, [sp, #28]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4e6:	1c51      	adds	r1, r2, #1
 800a4e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a4ea:	7852      	ldrb	r2, [r2, #1]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	e7c9      	b.n	800a484 <_strtod_l+0x1e4>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	e7d2      	b.n	800a49a <_strtod_l+0x1fa>
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	dc04      	bgt.n	800a502 <_strtod_l+0x262>
 800a4f8:	9e07      	ldr	r6, [sp, #28]
 800a4fa:	434e      	muls	r6, r1
 800a4fc:	9607      	str	r6, [sp, #28]
 800a4fe:	3301      	adds	r3, #1
 800a500:	e7e2      	b.n	800a4c8 <_strtod_l+0x228>
 800a502:	f103 0c01 	add.w	ip, r3, #1
 800a506:	f1bc 0f10 	cmp.w	ip, #16
 800a50a:	bfd8      	it	le
 800a50c:	fb01 f909 	mulle.w	r9, r1, r9
 800a510:	e7f5      	b.n	800a4fe <_strtod_l+0x25e>
 800a512:	2d10      	cmp	r5, #16
 800a514:	bfdc      	itt	le
 800a516:	230a      	movle	r3, #10
 800a518:	fb03 2909 	mlale	r9, r3, r9, r2
 800a51c:	e7e1      	b.n	800a4e2 <_strtod_l+0x242>
 800a51e:	2300      	movs	r3, #0
 800a520:	9305      	str	r3, [sp, #20]
 800a522:	2301      	movs	r3, #1
 800a524:	e77c      	b.n	800a420 <_strtod_l+0x180>
 800a526:	f04f 0c00 	mov.w	ip, #0
 800a52a:	f108 0202 	add.w	r2, r8, #2
 800a52e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a530:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a534:	e785      	b.n	800a442 <_strtod_l+0x1a2>
 800a536:	f04f 0c01 	mov.w	ip, #1
 800a53a:	e7f6      	b.n	800a52a <_strtod_l+0x28a>
 800a53c:	0800e638 	.word	0x0800e638
 800a540:	0800e3ec 	.word	0x0800e3ec
 800a544:	7ff00000 	.word	0x7ff00000
 800a548:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a54a:	1c51      	adds	r1, r2, #1
 800a54c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a54e:	7852      	ldrb	r2, [r2, #1]
 800a550:	2a30      	cmp	r2, #48	; 0x30
 800a552:	d0f9      	beq.n	800a548 <_strtod_l+0x2a8>
 800a554:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a558:	2908      	cmp	r1, #8
 800a55a:	f63f af79 	bhi.w	800a450 <_strtod_l+0x1b0>
 800a55e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a564:	9206      	str	r2, [sp, #24]
 800a566:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a568:	1c51      	adds	r1, r2, #1
 800a56a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a56c:	7852      	ldrb	r2, [r2, #1]
 800a56e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a572:	2e09      	cmp	r6, #9
 800a574:	d937      	bls.n	800a5e6 <_strtod_l+0x346>
 800a576:	9e06      	ldr	r6, [sp, #24]
 800a578:	1b89      	subs	r1, r1, r6
 800a57a:	2908      	cmp	r1, #8
 800a57c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a580:	dc02      	bgt.n	800a588 <_strtod_l+0x2e8>
 800a582:	4576      	cmp	r6, lr
 800a584:	bfa8      	it	ge
 800a586:	4676      	movge	r6, lr
 800a588:	f1bc 0f00 	cmp.w	ip, #0
 800a58c:	d000      	beq.n	800a590 <_strtod_l+0x2f0>
 800a58e:	4276      	negs	r6, r6
 800a590:	2d00      	cmp	r5, #0
 800a592:	d14d      	bne.n	800a630 <_strtod_l+0x390>
 800a594:	9904      	ldr	r1, [sp, #16]
 800a596:	4301      	orrs	r1, r0
 800a598:	f47f aec6 	bne.w	800a328 <_strtod_l+0x88>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f47f aee1 	bne.w	800a364 <_strtod_l+0xc4>
 800a5a2:	2a69      	cmp	r2, #105	; 0x69
 800a5a4:	d027      	beq.n	800a5f6 <_strtod_l+0x356>
 800a5a6:	dc24      	bgt.n	800a5f2 <_strtod_l+0x352>
 800a5a8:	2a49      	cmp	r2, #73	; 0x49
 800a5aa:	d024      	beq.n	800a5f6 <_strtod_l+0x356>
 800a5ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a5ae:	f47f aed9 	bne.w	800a364 <_strtod_l+0xc4>
 800a5b2:	499f      	ldr	r1, [pc, #636]	; (800a830 <_strtod_l+0x590>)
 800a5b4:	a817      	add	r0, sp, #92	; 0x5c
 800a5b6:	f001 fe5d 	bl	800c274 <__match>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aed2 	beq.w	800a364 <_strtod_l+0xc4>
 800a5c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b28      	cmp	r3, #40	; 0x28
 800a5c6:	d12d      	bne.n	800a624 <_strtod_l+0x384>
 800a5c8:	499a      	ldr	r1, [pc, #616]	; (800a834 <_strtod_l+0x594>)
 800a5ca:	aa1a      	add	r2, sp, #104	; 0x68
 800a5cc:	a817      	add	r0, sp, #92	; 0x5c
 800a5ce:	f001 fe65 	bl	800c29c <__hexnan>
 800a5d2:	2805      	cmp	r0, #5
 800a5d4:	d126      	bne.n	800a624 <_strtod_l+0x384>
 800a5d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a5dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a5e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a5e4:	e6a0      	b.n	800a328 <_strtod_l+0x88>
 800a5e6:	210a      	movs	r1, #10
 800a5e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a5ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5f0:	e7b9      	b.n	800a566 <_strtod_l+0x2c6>
 800a5f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a5f4:	e7db      	b.n	800a5ae <_strtod_l+0x30e>
 800a5f6:	4990      	ldr	r1, [pc, #576]	; (800a838 <_strtod_l+0x598>)
 800a5f8:	a817      	add	r0, sp, #92	; 0x5c
 800a5fa:	f001 fe3b 	bl	800c274 <__match>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f aeb0 	beq.w	800a364 <_strtod_l+0xc4>
 800a604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a606:	498d      	ldr	r1, [pc, #564]	; (800a83c <_strtod_l+0x59c>)
 800a608:	3b01      	subs	r3, #1
 800a60a:	a817      	add	r0, sp, #92	; 0x5c
 800a60c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a60e:	f001 fe31 	bl	800c274 <__match>
 800a612:	b910      	cbnz	r0, 800a61a <_strtod_l+0x37a>
 800a614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a616:	3301      	adds	r3, #1
 800a618:	9317      	str	r3, [sp, #92]	; 0x5c
 800a61a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a84c <_strtod_l+0x5ac>
 800a61e:	f04f 0a00 	mov.w	sl, #0
 800a622:	e681      	b.n	800a328 <_strtod_l+0x88>
 800a624:	4886      	ldr	r0, [pc, #536]	; (800a840 <_strtod_l+0x5a0>)
 800a626:	f002 fe17 	bl	800d258 <nan>
 800a62a:	ec5b ab10 	vmov	sl, fp, d0
 800a62e:	e67b      	b.n	800a328 <_strtod_l+0x88>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	9807      	ldr	r0, [sp, #28]
 800a634:	1af3      	subs	r3, r6, r3
 800a636:	2f00      	cmp	r7, #0
 800a638:	bf08      	it	eq
 800a63a:	462f      	moveq	r7, r5
 800a63c:	2d10      	cmp	r5, #16
 800a63e:	9306      	str	r3, [sp, #24]
 800a640:	46a8      	mov	r8, r5
 800a642:	bfa8      	it	ge
 800a644:	f04f 0810 	movge.w	r8, #16
 800a648:	f7f5 ff7c 	bl	8000544 <__aeabi_ui2d>
 800a64c:	2d09      	cmp	r5, #9
 800a64e:	4682      	mov	sl, r0
 800a650:	468b      	mov	fp, r1
 800a652:	dd13      	ble.n	800a67c <_strtod_l+0x3dc>
 800a654:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <_strtod_l+0x5a4>)
 800a656:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a65a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a65e:	f7f5 ffeb 	bl	8000638 <__aeabi_dmul>
 800a662:	4682      	mov	sl, r0
 800a664:	4648      	mov	r0, r9
 800a666:	468b      	mov	fp, r1
 800a668:	f7f5 ff6c 	bl	8000544 <__aeabi_ui2d>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	f7f5 fe2a 	bl	80002cc <__adddf3>
 800a678:	4682      	mov	sl, r0
 800a67a:	468b      	mov	fp, r1
 800a67c:	2d0f      	cmp	r5, #15
 800a67e:	dc38      	bgt.n	800a6f2 <_strtod_l+0x452>
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f43f ae50 	beq.w	800a328 <_strtod_l+0x88>
 800a688:	dd24      	ble.n	800a6d4 <_strtod_l+0x434>
 800a68a:	2b16      	cmp	r3, #22
 800a68c:	dc0b      	bgt.n	800a6a6 <_strtod_l+0x406>
 800a68e:	496d      	ldr	r1, [pc, #436]	; (800a844 <_strtod_l+0x5a4>)
 800a690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a698:	4652      	mov	r2, sl
 800a69a:	465b      	mov	r3, fp
 800a69c:	f7f5 ffcc 	bl	8000638 <__aeabi_dmul>
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	468b      	mov	fp, r1
 800a6a4:	e640      	b.n	800a328 <_strtod_l+0x88>
 800a6a6:	9a06      	ldr	r2, [sp, #24]
 800a6a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	db20      	blt.n	800a6f2 <_strtod_l+0x452>
 800a6b0:	4c64      	ldr	r4, [pc, #400]	; (800a844 <_strtod_l+0x5a4>)
 800a6b2:	f1c5 050f 	rsb	r5, r5, #15
 800a6b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c2:	f7f5 ffb9 	bl	8000638 <__aeabi_dmul>
 800a6c6:	9b06      	ldr	r3, [sp, #24]
 800a6c8:	1b5d      	subs	r5, r3, r5
 800a6ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6d2:	e7e3      	b.n	800a69c <_strtod_l+0x3fc>
 800a6d4:	9b06      	ldr	r3, [sp, #24]
 800a6d6:	3316      	adds	r3, #22
 800a6d8:	db0b      	blt.n	800a6f2 <_strtod_l+0x452>
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	1b9e      	subs	r6, r3, r6
 800a6de:	4b59      	ldr	r3, [pc, #356]	; (800a844 <_strtod_l+0x5a4>)
 800a6e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a6e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	f7f6 f8ce 	bl	800088c <__aeabi_ddiv>
 800a6f0:	e7d6      	b.n	800a6a0 <_strtod_l+0x400>
 800a6f2:	9b06      	ldr	r3, [sp, #24]
 800a6f4:	eba5 0808 	sub.w	r8, r5, r8
 800a6f8:	4498      	add	r8, r3
 800a6fa:	f1b8 0f00 	cmp.w	r8, #0
 800a6fe:	dd74      	ble.n	800a7ea <_strtod_l+0x54a>
 800a700:	f018 030f 	ands.w	r3, r8, #15
 800a704:	d00a      	beq.n	800a71c <_strtod_l+0x47c>
 800a706:	494f      	ldr	r1, [pc, #316]	; (800a844 <_strtod_l+0x5a4>)
 800a708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a70c:	4652      	mov	r2, sl
 800a70e:	465b      	mov	r3, fp
 800a710:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a714:	f7f5 ff90 	bl	8000638 <__aeabi_dmul>
 800a718:	4682      	mov	sl, r0
 800a71a:	468b      	mov	fp, r1
 800a71c:	f038 080f 	bics.w	r8, r8, #15
 800a720:	d04f      	beq.n	800a7c2 <_strtod_l+0x522>
 800a722:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a726:	dd22      	ble.n	800a76e <_strtod_l+0x4ce>
 800a728:	2500      	movs	r5, #0
 800a72a:	462e      	mov	r6, r5
 800a72c:	9507      	str	r5, [sp, #28]
 800a72e:	9505      	str	r5, [sp, #20]
 800a730:	2322      	movs	r3, #34	; 0x22
 800a732:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a84c <_strtod_l+0x5ac>
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	f04f 0a00 	mov.w	sl, #0
 800a73c:	9b07      	ldr	r3, [sp, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f43f adf2 	beq.w	800a328 <_strtod_l+0x88>
 800a744:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a746:	4620      	mov	r0, r4
 800a748:	f001 feb0 	bl	800c4ac <_Bfree>
 800a74c:	9905      	ldr	r1, [sp, #20]
 800a74e:	4620      	mov	r0, r4
 800a750:	f001 feac 	bl	800c4ac <_Bfree>
 800a754:	4631      	mov	r1, r6
 800a756:	4620      	mov	r0, r4
 800a758:	f001 fea8 	bl	800c4ac <_Bfree>
 800a75c:	9907      	ldr	r1, [sp, #28]
 800a75e:	4620      	mov	r0, r4
 800a760:	f001 fea4 	bl	800c4ac <_Bfree>
 800a764:	4629      	mov	r1, r5
 800a766:	4620      	mov	r0, r4
 800a768:	f001 fea0 	bl	800c4ac <_Bfree>
 800a76c:	e5dc      	b.n	800a328 <_strtod_l+0x88>
 800a76e:	4b36      	ldr	r3, [pc, #216]	; (800a848 <_strtod_l+0x5a8>)
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	2300      	movs	r3, #0
 800a774:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a778:	4650      	mov	r0, sl
 800a77a:	4659      	mov	r1, fp
 800a77c:	4699      	mov	r9, r3
 800a77e:	f1b8 0f01 	cmp.w	r8, #1
 800a782:	dc21      	bgt.n	800a7c8 <_strtod_l+0x528>
 800a784:	b10b      	cbz	r3, 800a78a <_strtod_l+0x4ea>
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	4b2f      	ldr	r3, [pc, #188]	; (800a848 <_strtod_l+0x5a8>)
 800a78c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a790:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a794:	4652      	mov	r2, sl
 800a796:	465b      	mov	r3, fp
 800a798:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a79c:	f7f5 ff4c 	bl	8000638 <__aeabi_dmul>
 800a7a0:	4b2a      	ldr	r3, [pc, #168]	; (800a84c <_strtod_l+0x5ac>)
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	400b      	ands	r3, r1
 800a7a6:	492a      	ldr	r1, [pc, #168]	; (800a850 <_strtod_l+0x5b0>)
 800a7a8:	428b      	cmp	r3, r1
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	d8bc      	bhi.n	800a728 <_strtod_l+0x488>
 800a7ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a7b2:	428b      	cmp	r3, r1
 800a7b4:	bf86      	itte	hi
 800a7b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a854 <_strtod_l+0x5b4>
 800a7ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a7be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	e084      	b.n	800a8d2 <_strtod_l+0x632>
 800a7c8:	f018 0f01 	tst.w	r8, #1
 800a7cc:	d005      	beq.n	800a7da <_strtod_l+0x53a>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 ff30 	bl	8000638 <__aeabi_dmul>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	9a04      	ldr	r2, [sp, #16]
 800a7dc:	3208      	adds	r2, #8
 800a7de:	f109 0901 	add.w	r9, r9, #1
 800a7e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7e6:	9204      	str	r2, [sp, #16]
 800a7e8:	e7c9      	b.n	800a77e <_strtod_l+0x4de>
 800a7ea:	d0ea      	beq.n	800a7c2 <_strtod_l+0x522>
 800a7ec:	f1c8 0800 	rsb	r8, r8, #0
 800a7f0:	f018 020f 	ands.w	r2, r8, #15
 800a7f4:	d00a      	beq.n	800a80c <_strtod_l+0x56c>
 800a7f6:	4b13      	ldr	r3, [pc, #76]	; (800a844 <_strtod_l+0x5a4>)
 800a7f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	4659      	mov	r1, fp
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	f7f6 f842 	bl	800088c <__aeabi_ddiv>
 800a808:	4682      	mov	sl, r0
 800a80a:	468b      	mov	fp, r1
 800a80c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a810:	d0d7      	beq.n	800a7c2 <_strtod_l+0x522>
 800a812:	f1b8 0f1f 	cmp.w	r8, #31
 800a816:	dd1f      	ble.n	800a858 <_strtod_l+0x5b8>
 800a818:	2500      	movs	r5, #0
 800a81a:	462e      	mov	r6, r5
 800a81c:	9507      	str	r5, [sp, #28]
 800a81e:	9505      	str	r5, [sp, #20]
 800a820:	2322      	movs	r3, #34	; 0x22
 800a822:	f04f 0a00 	mov.w	sl, #0
 800a826:	f04f 0b00 	mov.w	fp, #0
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	e786      	b.n	800a73c <_strtod_l+0x49c>
 800a82e:	bf00      	nop
 800a830:	0800e3bd 	.word	0x0800e3bd
 800a834:	0800e400 	.word	0x0800e400
 800a838:	0800e3b5 	.word	0x0800e3b5
 800a83c:	0800e544 	.word	0x0800e544
 800a840:	0800e7f0 	.word	0x0800e7f0
 800a844:	0800e6d0 	.word	0x0800e6d0
 800a848:	0800e6a8 	.word	0x0800e6a8
 800a84c:	7ff00000 	.word	0x7ff00000
 800a850:	7ca00000 	.word	0x7ca00000
 800a854:	7fefffff 	.word	0x7fefffff
 800a858:	f018 0310 	ands.w	r3, r8, #16
 800a85c:	bf18      	it	ne
 800a85e:	236a      	movne	r3, #106	; 0x6a
 800a860:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ac10 <_strtod_l+0x970>
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	4650      	mov	r0, sl
 800a868:	4659      	mov	r1, fp
 800a86a:	2300      	movs	r3, #0
 800a86c:	f018 0f01 	tst.w	r8, #1
 800a870:	d004      	beq.n	800a87c <_strtod_l+0x5dc>
 800a872:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a876:	f7f5 fedf 	bl	8000638 <__aeabi_dmul>
 800a87a:	2301      	movs	r3, #1
 800a87c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a880:	f109 0908 	add.w	r9, r9, #8
 800a884:	d1f2      	bne.n	800a86c <_strtod_l+0x5cc>
 800a886:	b10b      	cbz	r3, 800a88c <_strtod_l+0x5ec>
 800a888:	4682      	mov	sl, r0
 800a88a:	468b      	mov	fp, r1
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	b1c3      	cbz	r3, 800a8c2 <_strtod_l+0x622>
 800a890:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a894:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a898:	2b00      	cmp	r3, #0
 800a89a:	4659      	mov	r1, fp
 800a89c:	dd11      	ble.n	800a8c2 <_strtod_l+0x622>
 800a89e:	2b1f      	cmp	r3, #31
 800a8a0:	f340 8124 	ble.w	800aaec <_strtod_l+0x84c>
 800a8a4:	2b34      	cmp	r3, #52	; 0x34
 800a8a6:	bfde      	ittt	le
 800a8a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a8ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a8b0:	fa03 f202 	lslle.w	r2, r3, r2
 800a8b4:	f04f 0a00 	mov.w	sl, #0
 800a8b8:	bfcc      	ite	gt
 800a8ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a8be:	ea02 0b01 	andle.w	fp, r2, r1
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4650      	mov	r0, sl
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	f7f6 f91d 	bl	8000b08 <__aeabi_dcmpeq>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1a2      	bne.n	800a818 <_strtod_l+0x578>
 800a8d2:	9b07      	ldr	r3, [sp, #28]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	9908      	ldr	r1, [sp, #32]
 800a8d8:	462b      	mov	r3, r5
 800a8da:	463a      	mov	r2, r7
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f001 fe4d 	bl	800c57c <__s2b>
 800a8e2:	9007      	str	r0, [sp, #28]
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f43f af1f 	beq.w	800a728 <_strtod_l+0x488>
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	1b9e      	subs	r6, r3, r6
 800a8ee:	9b06      	ldr	r3, [sp, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfb4      	ite	lt
 800a8f4:	4633      	movlt	r3, r6
 800a8f6:	2300      	movge	r3, #0
 800a8f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a902:	9312      	str	r3, [sp, #72]	; 0x48
 800a904:	462e      	mov	r6, r5
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	4620      	mov	r0, r4
 800a90a:	6859      	ldr	r1, [r3, #4]
 800a90c:	f001 fd8e 	bl	800c42c <_Balloc>
 800a910:	9005      	str	r0, [sp, #20]
 800a912:	2800      	cmp	r0, #0
 800a914:	f43f af0c 	beq.w	800a730 <_strtod_l+0x490>
 800a918:	9b07      	ldr	r3, [sp, #28]
 800a91a:	691a      	ldr	r2, [r3, #16]
 800a91c:	3202      	adds	r2, #2
 800a91e:	f103 010c 	add.w	r1, r3, #12
 800a922:	0092      	lsls	r2, r2, #2
 800a924:	300c      	adds	r0, #12
 800a926:	f001 fd73 	bl	800c410 <memcpy>
 800a92a:	ec4b ab10 	vmov	d0, sl, fp
 800a92e:	aa1a      	add	r2, sp, #104	; 0x68
 800a930:	a919      	add	r1, sp, #100	; 0x64
 800a932:	4620      	mov	r0, r4
 800a934:	f002 f968 	bl	800cc08 <__d2b>
 800a938:	ec4b ab18 	vmov	d8, sl, fp
 800a93c:	9018      	str	r0, [sp, #96]	; 0x60
 800a93e:	2800      	cmp	r0, #0
 800a940:	f43f aef6 	beq.w	800a730 <_strtod_l+0x490>
 800a944:	2101      	movs	r1, #1
 800a946:	4620      	mov	r0, r4
 800a948:	f001 feb2 	bl	800c6b0 <__i2b>
 800a94c:	4606      	mov	r6, r0
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f aeee 	beq.w	800a730 <_strtod_l+0x490>
 800a954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a956:	9904      	ldr	r1, [sp, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfab      	itete	ge
 800a95c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a95e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a960:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a962:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a966:	bfac      	ite	ge
 800a968:	eb03 0902 	addge.w	r9, r3, r2
 800a96c:	1ad7      	sublt	r7, r2, r3
 800a96e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a970:	eba3 0801 	sub.w	r8, r3, r1
 800a974:	4490      	add	r8, r2
 800a976:	4ba1      	ldr	r3, [pc, #644]	; (800abfc <_strtod_l+0x95c>)
 800a978:	f108 38ff 	add.w	r8, r8, #4294967295
 800a97c:	4598      	cmp	r8, r3
 800a97e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a982:	f280 80c7 	bge.w	800ab14 <_strtod_l+0x874>
 800a986:	eba3 0308 	sub.w	r3, r3, r8
 800a98a:	2b1f      	cmp	r3, #31
 800a98c:	eba2 0203 	sub.w	r2, r2, r3
 800a990:	f04f 0101 	mov.w	r1, #1
 800a994:	f300 80b1 	bgt.w	800aafa <_strtod_l+0x85a>
 800a998:	fa01 f303 	lsl.w	r3, r1, r3
 800a99c:	930d      	str	r3, [sp, #52]	; 0x34
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	eb09 0802 	add.w	r8, r9, r2
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	45c1      	cmp	r9, r8
 800a9aa:	4417      	add	r7, r2
 800a9ac:	441f      	add	r7, r3
 800a9ae:	464b      	mov	r3, r9
 800a9b0:	bfa8      	it	ge
 800a9b2:	4643      	movge	r3, r8
 800a9b4:	42bb      	cmp	r3, r7
 800a9b6:	bfa8      	it	ge
 800a9b8:	463b      	movge	r3, r7
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	bfc2      	ittt	gt
 800a9be:	eba8 0803 	subgt.w	r8, r8, r3
 800a9c2:	1aff      	subgt	r7, r7, r3
 800a9c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	dd17      	ble.n	800a9fe <_strtod_l+0x75e>
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f001 ff2c 	bl	800c830 <__pow5mult>
 800a9d8:	4606      	mov	r6, r0
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f aea8 	beq.w	800a730 <_strtod_l+0x490>
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f001 fe79 	bl	800c6dc <__multiply>
 800a9ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f43f ae9f 	beq.w	800a730 <_strtod_l+0x490>
 800a9f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f001 fd59 	bl	800c4ac <_Bfree>
 800a9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a9fe:	f1b8 0f00 	cmp.w	r8, #0
 800aa02:	f300 808c 	bgt.w	800ab1e <_strtod_l+0x87e>
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dd08      	ble.n	800aa1e <_strtod_l+0x77e>
 800aa0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa0e:	9905      	ldr	r1, [sp, #20]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f001 ff0d 	bl	800c830 <__pow5mult>
 800aa16:	9005      	str	r0, [sp, #20]
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	f43f ae89 	beq.w	800a730 <_strtod_l+0x490>
 800aa1e:	2f00      	cmp	r7, #0
 800aa20:	dd08      	ble.n	800aa34 <_strtod_l+0x794>
 800aa22:	9905      	ldr	r1, [sp, #20]
 800aa24:	463a      	mov	r2, r7
 800aa26:	4620      	mov	r0, r4
 800aa28:	f001 ff5c 	bl	800c8e4 <__lshift>
 800aa2c:	9005      	str	r0, [sp, #20]
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f43f ae7e 	beq.w	800a730 <_strtod_l+0x490>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	dd08      	ble.n	800aa4c <_strtod_l+0x7ac>
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	464a      	mov	r2, r9
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 ff50 	bl	800c8e4 <__lshift>
 800aa44:	4606      	mov	r6, r0
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f ae72 	beq.w	800a730 <_strtod_l+0x490>
 800aa4c:	9a05      	ldr	r2, [sp, #20]
 800aa4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa50:	4620      	mov	r0, r4
 800aa52:	f001 ffd3 	bl	800c9fc <__mdiff>
 800aa56:	4605      	mov	r5, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f43f ae69 	beq.w	800a730 <_strtod_l+0x490>
 800aa5e:	68c3      	ldr	r3, [r0, #12]
 800aa60:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa62:	2300      	movs	r3, #0
 800aa64:	60c3      	str	r3, [r0, #12]
 800aa66:	4631      	mov	r1, r6
 800aa68:	f001 ffac 	bl	800c9c4 <__mcmp>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	da60      	bge.n	800ab32 <_strtod_l+0x892>
 800aa70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa72:	ea53 030a 	orrs.w	r3, r3, sl
 800aa76:	f040 8082 	bne.w	800ab7e <_strtod_l+0x8de>
 800aa7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d17d      	bne.n	800ab7e <_strtod_l+0x8de>
 800aa82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa86:	0d1b      	lsrs	r3, r3, #20
 800aa88:	051b      	lsls	r3, r3, #20
 800aa8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa8e:	d976      	bls.n	800ab7e <_strtod_l+0x8de>
 800aa90:	696b      	ldr	r3, [r5, #20]
 800aa92:	b913      	cbnz	r3, 800aa9a <_strtod_l+0x7fa>
 800aa94:	692b      	ldr	r3, [r5, #16]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	dd71      	ble.n	800ab7e <_strtod_l+0x8de>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f001 ff20 	bl	800c8e4 <__lshift>
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	f001 ff8c 	bl	800c9c4 <__mcmp>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	dd66      	ble.n	800ab7e <_strtod_l+0x8de>
 800aab0:	9904      	ldr	r1, [sp, #16]
 800aab2:	4a53      	ldr	r2, [pc, #332]	; (800ac00 <_strtod_l+0x960>)
 800aab4:	465b      	mov	r3, fp
 800aab6:	2900      	cmp	r1, #0
 800aab8:	f000 8081 	beq.w	800abbe <_strtod_l+0x91e>
 800aabc:	ea02 010b 	and.w	r1, r2, fp
 800aac0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aac4:	dc7b      	bgt.n	800abbe <_strtod_l+0x91e>
 800aac6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aaca:	f77f aea9 	ble.w	800a820 <_strtod_l+0x580>
 800aace:	4b4d      	ldr	r3, [pc, #308]	; (800ac04 <_strtod_l+0x964>)
 800aad0:	4650      	mov	r0, sl
 800aad2:	4659      	mov	r1, fp
 800aad4:	2200      	movs	r2, #0
 800aad6:	f7f5 fdaf 	bl	8000638 <__aeabi_dmul>
 800aada:	460b      	mov	r3, r1
 800aadc:	4303      	orrs	r3, r0
 800aade:	bf08      	it	eq
 800aae0:	2322      	moveq	r3, #34	; 0x22
 800aae2:	4682      	mov	sl, r0
 800aae4:	468b      	mov	fp, r1
 800aae6:	bf08      	it	eq
 800aae8:	6023      	streq	r3, [r4, #0]
 800aaea:	e62b      	b.n	800a744 <_strtod_l+0x4a4>
 800aaec:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	ea03 0a0a 	and.w	sl, r3, sl
 800aaf8:	e6e3      	b.n	800a8c2 <_strtod_l+0x622>
 800aafa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aafe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ab02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ab06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ab0a:	fa01 f308 	lsl.w	r3, r1, r8
 800ab0e:	9308      	str	r3, [sp, #32]
 800ab10:	910d      	str	r1, [sp, #52]	; 0x34
 800ab12:	e746      	b.n	800a9a2 <_strtod_l+0x702>
 800ab14:	2300      	movs	r3, #0
 800ab16:	9308      	str	r3, [sp, #32]
 800ab18:	2301      	movs	r3, #1
 800ab1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab1c:	e741      	b.n	800a9a2 <_strtod_l+0x702>
 800ab1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab20:	4642      	mov	r2, r8
 800ab22:	4620      	mov	r0, r4
 800ab24:	f001 fede 	bl	800c8e4 <__lshift>
 800ab28:	9018      	str	r0, [sp, #96]	; 0x60
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f47f af6b 	bne.w	800aa06 <_strtod_l+0x766>
 800ab30:	e5fe      	b.n	800a730 <_strtod_l+0x490>
 800ab32:	465f      	mov	r7, fp
 800ab34:	d16e      	bne.n	800ac14 <_strtod_l+0x974>
 800ab36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab3c:	b342      	cbz	r2, 800ab90 <_strtod_l+0x8f0>
 800ab3e:	4a32      	ldr	r2, [pc, #200]	; (800ac08 <_strtod_l+0x968>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d128      	bne.n	800ab96 <_strtod_l+0x8f6>
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	4651      	mov	r1, sl
 800ab48:	b1eb      	cbz	r3, 800ab86 <_strtod_l+0x8e6>
 800ab4a:	4b2d      	ldr	r3, [pc, #180]	; (800ac00 <_strtod_l+0x960>)
 800ab4c:	403b      	ands	r3, r7
 800ab4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	d819      	bhi.n	800ab8c <_strtod_l+0x8ec>
 800ab58:	0d1b      	lsrs	r3, r3, #20
 800ab5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab62:	4299      	cmp	r1, r3
 800ab64:	d117      	bne.n	800ab96 <_strtod_l+0x8f6>
 800ab66:	4b29      	ldr	r3, [pc, #164]	; (800ac0c <_strtod_l+0x96c>)
 800ab68:	429f      	cmp	r7, r3
 800ab6a:	d102      	bne.n	800ab72 <_strtod_l+0x8d2>
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	f43f addf 	beq.w	800a730 <_strtod_l+0x490>
 800ab72:	4b23      	ldr	r3, [pc, #140]	; (800ac00 <_strtod_l+0x960>)
 800ab74:	403b      	ands	r3, r7
 800ab76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab7a:	f04f 0a00 	mov.w	sl, #0
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1a4      	bne.n	800aace <_strtod_l+0x82e>
 800ab84:	e5de      	b.n	800a744 <_strtod_l+0x4a4>
 800ab86:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8a:	e7ea      	b.n	800ab62 <_strtod_l+0x8c2>
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	e7e8      	b.n	800ab62 <_strtod_l+0x8c2>
 800ab90:	ea53 030a 	orrs.w	r3, r3, sl
 800ab94:	d08c      	beq.n	800aab0 <_strtod_l+0x810>
 800ab96:	9b08      	ldr	r3, [sp, #32]
 800ab98:	b1db      	cbz	r3, 800abd2 <_strtod_l+0x932>
 800ab9a:	423b      	tst	r3, r7
 800ab9c:	d0ef      	beq.n	800ab7e <_strtod_l+0x8de>
 800ab9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba0:	9a04      	ldr	r2, [sp, #16]
 800aba2:	4650      	mov	r0, sl
 800aba4:	4659      	mov	r1, fp
 800aba6:	b1c3      	cbz	r3, 800abda <_strtod_l+0x93a>
 800aba8:	f7ff fb5e 	bl	800a268 <sulp>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	ec51 0b18 	vmov	r0, r1, d8
 800abb4:	f7f5 fb8a 	bl	80002cc <__adddf3>
 800abb8:	4682      	mov	sl, r0
 800abba:	468b      	mov	fp, r1
 800abbc:	e7df      	b.n	800ab7e <_strtod_l+0x8de>
 800abbe:	4013      	ands	r3, r2
 800abc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abcc:	f04f 3aff 	mov.w	sl, #4294967295
 800abd0:	e7d5      	b.n	800ab7e <_strtod_l+0x8de>
 800abd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd4:	ea13 0f0a 	tst.w	r3, sl
 800abd8:	e7e0      	b.n	800ab9c <_strtod_l+0x8fc>
 800abda:	f7ff fb45 	bl	800a268 <sulp>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	ec51 0b18 	vmov	r0, r1, d8
 800abe6:	f7f5 fb6f 	bl	80002c8 <__aeabi_dsub>
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	4682      	mov	sl, r0
 800abf0:	468b      	mov	fp, r1
 800abf2:	f7f5 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d0c1      	beq.n	800ab7e <_strtod_l+0x8de>
 800abfa:	e611      	b.n	800a820 <_strtod_l+0x580>
 800abfc:	fffffc02 	.word	0xfffffc02
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	39500000 	.word	0x39500000
 800ac08:	000fffff 	.word	0x000fffff
 800ac0c:	7fefffff 	.word	0x7fefffff
 800ac10:	0800e418 	.word	0x0800e418
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	f002 f852 	bl	800ccc0 <__ratio>
 800ac1c:	ec59 8b10 	vmov	r8, r9, d0
 800ac20:	ee10 0a10 	vmov	r0, s0
 800ac24:	2200      	movs	r2, #0
 800ac26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	f7f5 ff80 	bl	8000b30 <__aeabi_dcmple>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d07a      	beq.n	800ad2a <_strtod_l+0xa8a>
 800ac34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d04a      	beq.n	800acd0 <_strtod_l+0xa30>
 800ac3a:	4b95      	ldr	r3, [pc, #596]	; (800ae90 <_strtod_l+0xbf0>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae90 <_strtod_l+0xbf0>
 800ac46:	f04f 0800 	mov.w	r8, #0
 800ac4a:	4b92      	ldr	r3, [pc, #584]	; (800ae94 <_strtod_l+0xbf4>)
 800ac4c:	403b      	ands	r3, r7
 800ac4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac52:	4b91      	ldr	r3, [pc, #580]	; (800ae98 <_strtod_l+0xbf8>)
 800ac54:	429a      	cmp	r2, r3
 800ac56:	f040 80b0 	bne.w	800adba <_strtod_l+0xb1a>
 800ac5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ac62:	ec4b ab10 	vmov	d0, sl, fp
 800ac66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac6a:	f001 ff51 	bl	800cb10 <__ulp>
 800ac6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac72:	ec53 2b10 	vmov	r2, r3, d0
 800ac76:	f7f5 fcdf 	bl	8000638 <__aeabi_dmul>
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	f7f5 fb25 	bl	80002cc <__adddf3>
 800ac82:	460b      	mov	r3, r1
 800ac84:	4983      	ldr	r1, [pc, #524]	; (800ae94 <_strtod_l+0xbf4>)
 800ac86:	4a85      	ldr	r2, [pc, #532]	; (800ae9c <_strtod_l+0xbfc>)
 800ac88:	4019      	ands	r1, r3
 800ac8a:	4291      	cmp	r1, r2
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	d960      	bls.n	800ad52 <_strtod_l+0xab2>
 800ac90:	ee18 3a90 	vmov	r3, s17
 800ac94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d104      	bne.n	800aca6 <_strtod_l+0xa06>
 800ac9c:	ee18 3a10 	vmov	r3, s16
 800aca0:	3301      	adds	r3, #1
 800aca2:	f43f ad45 	beq.w	800a730 <_strtod_l+0x490>
 800aca6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aea8 <_strtod_l+0xc08>
 800acaa:	f04f 3aff 	mov.w	sl, #4294967295
 800acae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acb0:	4620      	mov	r0, r4
 800acb2:	f001 fbfb 	bl	800c4ac <_Bfree>
 800acb6:	9905      	ldr	r1, [sp, #20]
 800acb8:	4620      	mov	r0, r4
 800acba:	f001 fbf7 	bl	800c4ac <_Bfree>
 800acbe:	4631      	mov	r1, r6
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 fbf3 	bl	800c4ac <_Bfree>
 800acc6:	4629      	mov	r1, r5
 800acc8:	4620      	mov	r0, r4
 800acca:	f001 fbef 	bl	800c4ac <_Bfree>
 800acce:	e61a      	b.n	800a906 <_strtod_l+0x666>
 800acd0:	f1ba 0f00 	cmp.w	sl, #0
 800acd4:	d11b      	bne.n	800ad0e <_strtod_l+0xa6e>
 800acd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acda:	b9f3      	cbnz	r3, 800ad1a <_strtod_l+0xa7a>
 800acdc:	4b6c      	ldr	r3, [pc, #432]	; (800ae90 <_strtod_l+0xbf0>)
 800acde:	2200      	movs	r2, #0
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 ff1a 	bl	8000b1c <__aeabi_dcmplt>
 800ace8:	b9d0      	cbnz	r0, 800ad20 <_strtod_l+0xa80>
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	4b6c      	ldr	r3, [pc, #432]	; (800aea0 <_strtod_l+0xc00>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	f7f5 fca1 	bl	8000638 <__aeabi_dmul>
 800acf6:	4680      	mov	r8, r0
 800acf8:	4689      	mov	r9, r1
 800acfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ad02:	9315      	str	r3, [sp, #84]	; 0x54
 800ad04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad0c:	e79d      	b.n	800ac4a <_strtod_l+0x9aa>
 800ad0e:	f1ba 0f01 	cmp.w	sl, #1
 800ad12:	d102      	bne.n	800ad1a <_strtod_l+0xa7a>
 800ad14:	2f00      	cmp	r7, #0
 800ad16:	f43f ad83 	beq.w	800a820 <_strtod_l+0x580>
 800ad1a:	4b62      	ldr	r3, [pc, #392]	; (800aea4 <_strtod_l+0xc04>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	e78e      	b.n	800ac3e <_strtod_l+0x99e>
 800ad20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aea0 <_strtod_l+0xc00>
 800ad24:	f04f 0800 	mov.w	r8, #0
 800ad28:	e7e7      	b.n	800acfa <_strtod_l+0xa5a>
 800ad2a:	4b5d      	ldr	r3, [pc, #372]	; (800aea0 <_strtod_l+0xc00>)
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7f5 fc81 	bl	8000638 <__aeabi_dmul>
 800ad36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4689      	mov	r9, r1
 800ad3c:	b933      	cbnz	r3, 800ad4c <_strtod_l+0xaac>
 800ad3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad42:	900e      	str	r0, [sp, #56]	; 0x38
 800ad44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ad4a:	e7dd      	b.n	800ad08 <_strtod_l+0xa68>
 800ad4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ad50:	e7f9      	b.n	800ad46 <_strtod_l+0xaa6>
 800ad52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1a8      	bne.n	800acae <_strtod_l+0xa0e>
 800ad5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad62:	0d1b      	lsrs	r3, r3, #20
 800ad64:	051b      	lsls	r3, r3, #20
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d1a1      	bne.n	800acae <_strtod_l+0xa0e>
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	f7f5 ffc3 	bl	8000cf8 <__aeabi_d2lz>
 800ad72:	f7f5 fc33 	bl	80005dc <__aeabi_l2d>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 faa3 	bl	80002c8 <__aeabi_dsub>
 800ad82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad88:	ea43 030a 	orr.w	r3, r3, sl
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	4680      	mov	r8, r0
 800ad90:	4689      	mov	r9, r1
 800ad92:	d055      	beq.n	800ae40 <_strtod_l+0xba0>
 800ad94:	a336      	add	r3, pc, #216	; (adr r3, 800ae70 <_strtod_l+0xbd0>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 febf 	bl	8000b1c <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f47f acd0 	bne.w	800a744 <_strtod_l+0x4a4>
 800ada4:	a334      	add	r3, pc, #208	; (adr r3, 800ae78 <_strtod_l+0xbd8>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fed3 	bl	8000b58 <__aeabi_dcmpgt>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	f43f af7b 	beq.w	800acae <_strtod_l+0xa0e>
 800adb8:	e4c4      	b.n	800a744 <_strtod_l+0x4a4>
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	b333      	cbz	r3, 800ae0c <_strtod_l+0xb6c>
 800adbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adc4:	d822      	bhi.n	800ae0c <_strtod_l+0xb6c>
 800adc6:	a32e      	add	r3, pc, #184	; (adr r3, 800ae80 <_strtod_l+0xbe0>)
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	4640      	mov	r0, r8
 800adce:	4649      	mov	r1, r9
 800add0:	f7f5 feae 	bl	8000b30 <__aeabi_dcmple>
 800add4:	b1a0      	cbz	r0, 800ae00 <_strtod_l+0xb60>
 800add6:	4649      	mov	r1, r9
 800add8:	4640      	mov	r0, r8
 800adda:	f7f5 ff05 	bl	8000be8 <__aeabi_d2uiz>
 800adde:	2801      	cmp	r0, #1
 800ade0:	bf38      	it	cc
 800ade2:	2001      	movcc	r0, #1
 800ade4:	f7f5 fbae 	bl	8000544 <__aeabi_ui2d>
 800ade8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adea:	4680      	mov	r8, r0
 800adec:	4689      	mov	r9, r1
 800adee:	bb23      	cbnz	r3, 800ae3a <_strtod_l+0xb9a>
 800adf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adf4:	9010      	str	r0, [sp, #64]	; 0x40
 800adf6:	9311      	str	r3, [sp, #68]	; 0x44
 800adf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae10:	eeb0 0a48 	vmov.f32	s0, s16
 800ae14:	eef0 0a68 	vmov.f32	s1, s17
 800ae18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae1c:	f001 fe78 	bl	800cb10 <__ulp>
 800ae20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae24:	ec53 2b10 	vmov	r2, r3, d0
 800ae28:	f7f5 fc06 	bl	8000638 <__aeabi_dmul>
 800ae2c:	ec53 2b18 	vmov	r2, r3, d8
 800ae30:	f7f5 fa4c 	bl	80002cc <__adddf3>
 800ae34:	4682      	mov	sl, r0
 800ae36:	468b      	mov	fp, r1
 800ae38:	e78d      	b.n	800ad56 <_strtod_l+0xab6>
 800ae3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ae3e:	e7db      	b.n	800adf8 <_strtod_l+0xb58>
 800ae40:	a311      	add	r3, pc, #68	; (adr r3, 800ae88 <_strtod_l+0xbe8>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 fe69 	bl	8000b1c <__aeabi_dcmplt>
 800ae4a:	e7b2      	b.n	800adb2 <_strtod_l+0xb12>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	f7ff ba6b 	b.w	800a330 <_strtod_l+0x90>
 800ae5a:	2a65      	cmp	r2, #101	; 0x65
 800ae5c:	f43f ab5f 	beq.w	800a51e <_strtod_l+0x27e>
 800ae60:	2a45      	cmp	r2, #69	; 0x45
 800ae62:	f43f ab5c 	beq.w	800a51e <_strtod_l+0x27e>
 800ae66:	2301      	movs	r3, #1
 800ae68:	f7ff bb94 	b.w	800a594 <_strtod_l+0x2f4>
 800ae6c:	f3af 8000 	nop.w
 800ae70:	94a03595 	.word	0x94a03595
 800ae74:	3fdfffff 	.word	0x3fdfffff
 800ae78:	35afe535 	.word	0x35afe535
 800ae7c:	3fe00000 	.word	0x3fe00000
 800ae80:	ffc00000 	.word	0xffc00000
 800ae84:	41dfffff 	.word	0x41dfffff
 800ae88:	94a03595 	.word	0x94a03595
 800ae8c:	3fcfffff 	.word	0x3fcfffff
 800ae90:	3ff00000 	.word	0x3ff00000
 800ae94:	7ff00000 	.word	0x7ff00000
 800ae98:	7fe00000 	.word	0x7fe00000
 800ae9c:	7c9fffff 	.word	0x7c9fffff
 800aea0:	3fe00000 	.word	0x3fe00000
 800aea4:	bff00000 	.word	0xbff00000
 800aea8:	7fefffff 	.word	0x7fefffff

0800aeac <_strtod_r>:
 800aeac:	4b01      	ldr	r3, [pc, #4]	; (800aeb4 <_strtod_r+0x8>)
 800aeae:	f7ff b9f7 	b.w	800a2a0 <_strtod_l>
 800aeb2:	bf00      	nop
 800aeb4:	200000a4 	.word	0x200000a4

0800aeb8 <_strtol_l.constprop.0>:
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aebe:	d001      	beq.n	800aec4 <_strtol_l.constprop.0+0xc>
 800aec0:	2b24      	cmp	r3, #36	; 0x24
 800aec2:	d906      	bls.n	800aed2 <_strtol_l.constprop.0+0x1a>
 800aec4:	f7fe f976 	bl	80091b4 <__errno>
 800aec8:	2316      	movs	r3, #22
 800aeca:	6003      	str	r3, [r0, #0]
 800aecc:	2000      	movs	r0, #0
 800aece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afb8 <_strtol_l.constprop.0+0x100>
 800aed6:	460d      	mov	r5, r1
 800aed8:	462e      	mov	r6, r5
 800aeda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aede:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aee2:	f017 0708 	ands.w	r7, r7, #8
 800aee6:	d1f7      	bne.n	800aed8 <_strtol_l.constprop.0+0x20>
 800aee8:	2c2d      	cmp	r4, #45	; 0x2d
 800aeea:	d132      	bne.n	800af52 <_strtol_l.constprop.0+0x9a>
 800aeec:	782c      	ldrb	r4, [r5, #0]
 800aeee:	2701      	movs	r7, #1
 800aef0:	1cb5      	adds	r5, r6, #2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d05b      	beq.n	800afae <_strtol_l.constprop.0+0xf6>
 800aef6:	2b10      	cmp	r3, #16
 800aef8:	d109      	bne.n	800af0e <_strtol_l.constprop.0+0x56>
 800aefa:	2c30      	cmp	r4, #48	; 0x30
 800aefc:	d107      	bne.n	800af0e <_strtol_l.constprop.0+0x56>
 800aefe:	782c      	ldrb	r4, [r5, #0]
 800af00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af04:	2c58      	cmp	r4, #88	; 0x58
 800af06:	d14d      	bne.n	800afa4 <_strtol_l.constprop.0+0xec>
 800af08:	786c      	ldrb	r4, [r5, #1]
 800af0a:	2310      	movs	r3, #16
 800af0c:	3502      	adds	r5, #2
 800af0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af12:	f108 38ff 	add.w	r8, r8, #4294967295
 800af16:	f04f 0c00 	mov.w	ip, #0
 800af1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800af1e:	4666      	mov	r6, ip
 800af20:	fb03 8a19 	mls	sl, r3, r9, r8
 800af24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af28:	f1be 0f09 	cmp.w	lr, #9
 800af2c:	d816      	bhi.n	800af5c <_strtol_l.constprop.0+0xa4>
 800af2e:	4674      	mov	r4, lr
 800af30:	42a3      	cmp	r3, r4
 800af32:	dd24      	ble.n	800af7e <_strtol_l.constprop.0+0xc6>
 800af34:	f1bc 0f00 	cmp.w	ip, #0
 800af38:	db1e      	blt.n	800af78 <_strtol_l.constprop.0+0xc0>
 800af3a:	45b1      	cmp	r9, r6
 800af3c:	d31c      	bcc.n	800af78 <_strtol_l.constprop.0+0xc0>
 800af3e:	d101      	bne.n	800af44 <_strtol_l.constprop.0+0x8c>
 800af40:	45a2      	cmp	sl, r4
 800af42:	db19      	blt.n	800af78 <_strtol_l.constprop.0+0xc0>
 800af44:	fb06 4603 	mla	r6, r6, r3, r4
 800af48:	f04f 0c01 	mov.w	ip, #1
 800af4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af50:	e7e8      	b.n	800af24 <_strtol_l.constprop.0+0x6c>
 800af52:	2c2b      	cmp	r4, #43	; 0x2b
 800af54:	bf04      	itt	eq
 800af56:	782c      	ldrbeq	r4, [r5, #0]
 800af58:	1cb5      	addeq	r5, r6, #2
 800af5a:	e7ca      	b.n	800aef2 <_strtol_l.constprop.0+0x3a>
 800af5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800af60:	f1be 0f19 	cmp.w	lr, #25
 800af64:	d801      	bhi.n	800af6a <_strtol_l.constprop.0+0xb2>
 800af66:	3c37      	subs	r4, #55	; 0x37
 800af68:	e7e2      	b.n	800af30 <_strtol_l.constprop.0+0x78>
 800af6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800af6e:	f1be 0f19 	cmp.w	lr, #25
 800af72:	d804      	bhi.n	800af7e <_strtol_l.constprop.0+0xc6>
 800af74:	3c57      	subs	r4, #87	; 0x57
 800af76:	e7db      	b.n	800af30 <_strtol_l.constprop.0+0x78>
 800af78:	f04f 3cff 	mov.w	ip, #4294967295
 800af7c:	e7e6      	b.n	800af4c <_strtol_l.constprop.0+0x94>
 800af7e:	f1bc 0f00 	cmp.w	ip, #0
 800af82:	da05      	bge.n	800af90 <_strtol_l.constprop.0+0xd8>
 800af84:	2322      	movs	r3, #34	; 0x22
 800af86:	6003      	str	r3, [r0, #0]
 800af88:	4646      	mov	r6, r8
 800af8a:	b942      	cbnz	r2, 800af9e <_strtol_l.constprop.0+0xe6>
 800af8c:	4630      	mov	r0, r6
 800af8e:	e79e      	b.n	800aece <_strtol_l.constprop.0+0x16>
 800af90:	b107      	cbz	r7, 800af94 <_strtol_l.constprop.0+0xdc>
 800af92:	4276      	negs	r6, r6
 800af94:	2a00      	cmp	r2, #0
 800af96:	d0f9      	beq.n	800af8c <_strtol_l.constprop.0+0xd4>
 800af98:	f1bc 0f00 	cmp.w	ip, #0
 800af9c:	d000      	beq.n	800afa0 <_strtol_l.constprop.0+0xe8>
 800af9e:	1e69      	subs	r1, r5, #1
 800afa0:	6011      	str	r1, [r2, #0]
 800afa2:	e7f3      	b.n	800af8c <_strtol_l.constprop.0+0xd4>
 800afa4:	2430      	movs	r4, #48	; 0x30
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1b1      	bne.n	800af0e <_strtol_l.constprop.0+0x56>
 800afaa:	2308      	movs	r3, #8
 800afac:	e7af      	b.n	800af0e <_strtol_l.constprop.0+0x56>
 800afae:	2c30      	cmp	r4, #48	; 0x30
 800afb0:	d0a5      	beq.n	800aefe <_strtol_l.constprop.0+0x46>
 800afb2:	230a      	movs	r3, #10
 800afb4:	e7ab      	b.n	800af0e <_strtol_l.constprop.0+0x56>
 800afb6:	bf00      	nop
 800afb8:	0800e441 	.word	0x0800e441

0800afbc <_strtol_r>:
 800afbc:	f7ff bf7c 	b.w	800aeb8 <_strtol_l.constprop.0>

0800afc0 <_vsiprintf_r>:
 800afc0:	b500      	push	{lr}
 800afc2:	b09b      	sub	sp, #108	; 0x6c
 800afc4:	9100      	str	r1, [sp, #0]
 800afc6:	9104      	str	r1, [sp, #16]
 800afc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afcc:	9105      	str	r1, [sp, #20]
 800afce:	9102      	str	r1, [sp, #8]
 800afd0:	4905      	ldr	r1, [pc, #20]	; (800afe8 <_vsiprintf_r+0x28>)
 800afd2:	9103      	str	r1, [sp, #12]
 800afd4:	4669      	mov	r1, sp
 800afd6:	f002 f83d 	bl	800d054 <_svfiprintf_r>
 800afda:	9b00      	ldr	r3, [sp, #0]
 800afdc:	2200      	movs	r2, #0
 800afde:	701a      	strb	r2, [r3, #0]
 800afe0:	b01b      	add	sp, #108	; 0x6c
 800afe2:	f85d fb04 	ldr.w	pc, [sp], #4
 800afe6:	bf00      	nop
 800afe8:	ffff0208 	.word	0xffff0208

0800afec <vsiprintf>:
 800afec:	4613      	mov	r3, r2
 800afee:	460a      	mov	r2, r1
 800aff0:	4601      	mov	r1, r0
 800aff2:	4802      	ldr	r0, [pc, #8]	; (800affc <vsiprintf+0x10>)
 800aff4:	6800      	ldr	r0, [r0, #0]
 800aff6:	f7ff bfe3 	b.w	800afc0 <_vsiprintf_r>
 800affa:	bf00      	nop
 800affc:	2000003c 	.word	0x2000003c

0800b000 <quorem>:
 800b000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	6903      	ldr	r3, [r0, #16]
 800b006:	690c      	ldr	r4, [r1, #16]
 800b008:	42a3      	cmp	r3, r4
 800b00a:	4607      	mov	r7, r0
 800b00c:	f2c0 8081 	blt.w	800b112 <quorem+0x112>
 800b010:	3c01      	subs	r4, #1
 800b012:	f101 0814 	add.w	r8, r1, #20
 800b016:	f100 0514 	add.w	r5, r0, #20
 800b01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b028:	3301      	adds	r3, #1
 800b02a:	429a      	cmp	r2, r3
 800b02c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b034:	fbb2 f6f3 	udiv	r6, r2, r3
 800b038:	d331      	bcc.n	800b09e <quorem+0x9e>
 800b03a:	f04f 0e00 	mov.w	lr, #0
 800b03e:	4640      	mov	r0, r8
 800b040:	46ac      	mov	ip, r5
 800b042:	46f2      	mov	sl, lr
 800b044:	f850 2b04 	ldr.w	r2, [r0], #4
 800b048:	b293      	uxth	r3, r2
 800b04a:	fb06 e303 	mla	r3, r6, r3, lr
 800b04e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b052:	b29b      	uxth	r3, r3
 800b054:	ebaa 0303 	sub.w	r3, sl, r3
 800b058:	f8dc a000 	ldr.w	sl, [ip]
 800b05c:	0c12      	lsrs	r2, r2, #16
 800b05e:	fa13 f38a 	uxtah	r3, r3, sl
 800b062:	fb06 e202 	mla	r2, r6, r2, lr
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b06e:	b292      	uxth	r2, r2
 800b070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b078:	f8bd 3000 	ldrh.w	r3, [sp]
 800b07c:	4581      	cmp	r9, r0
 800b07e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b082:	f84c 3b04 	str.w	r3, [ip], #4
 800b086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b08a:	d2db      	bcs.n	800b044 <quorem+0x44>
 800b08c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b090:	b92b      	cbnz	r3, 800b09e <quorem+0x9e>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	3b04      	subs	r3, #4
 800b096:	429d      	cmp	r5, r3
 800b098:	461a      	mov	r2, r3
 800b09a:	d32e      	bcc.n	800b0fa <quorem+0xfa>
 800b09c:	613c      	str	r4, [r7, #16]
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f001 fc90 	bl	800c9c4 <__mcmp>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	db24      	blt.n	800b0f2 <quorem+0xf2>
 800b0a8:	3601      	adds	r6, #1
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f04f 0c00 	mov.w	ip, #0
 800b0b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0b4:	f8d0 e000 	ldr.w	lr, [r0]
 800b0b8:	b293      	uxth	r3, r2
 800b0ba:	ebac 0303 	sub.w	r3, ip, r3
 800b0be:	0c12      	lsrs	r2, r2, #16
 800b0c0:	fa13 f38e 	uxtah	r3, r3, lr
 800b0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0d2:	45c1      	cmp	r9, r8
 800b0d4:	f840 3b04 	str.w	r3, [r0], #4
 800b0d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0dc:	d2e8      	bcs.n	800b0b0 <quorem+0xb0>
 800b0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e6:	b922      	cbnz	r2, 800b0f2 <quorem+0xf2>
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	429d      	cmp	r5, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	d30a      	bcc.n	800b106 <quorem+0x106>
 800b0f0:	613c      	str	r4, [r7, #16]
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	b003      	add	sp, #12
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	d1cc      	bne.n	800b09c <quorem+0x9c>
 800b102:	3c01      	subs	r4, #1
 800b104:	e7c7      	b.n	800b096 <quorem+0x96>
 800b106:	6812      	ldr	r2, [r2, #0]
 800b108:	3b04      	subs	r3, #4
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	d1f0      	bne.n	800b0f0 <quorem+0xf0>
 800b10e:	3c01      	subs	r4, #1
 800b110:	e7eb      	b.n	800b0ea <quorem+0xea>
 800b112:	2000      	movs	r0, #0
 800b114:	e7ee      	b.n	800b0f4 <quorem+0xf4>
	...

0800b118 <_dtoa_r>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	ed2d 8b04 	vpush	{d8-d9}
 800b120:	ec57 6b10 	vmov	r6, r7, d0
 800b124:	b093      	sub	sp, #76	; 0x4c
 800b126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b12c:	9106      	str	r1, [sp, #24]
 800b12e:	ee10 aa10 	vmov	sl, s0
 800b132:	4604      	mov	r4, r0
 800b134:	9209      	str	r2, [sp, #36]	; 0x24
 800b136:	930c      	str	r3, [sp, #48]	; 0x30
 800b138:	46bb      	mov	fp, r7
 800b13a:	b975      	cbnz	r5, 800b15a <_dtoa_r+0x42>
 800b13c:	2010      	movs	r0, #16
 800b13e:	f001 f94d 	bl	800c3dc <malloc>
 800b142:	4602      	mov	r2, r0
 800b144:	6260      	str	r0, [r4, #36]	; 0x24
 800b146:	b920      	cbnz	r0, 800b152 <_dtoa_r+0x3a>
 800b148:	4ba7      	ldr	r3, [pc, #668]	; (800b3e8 <_dtoa_r+0x2d0>)
 800b14a:	21ea      	movs	r1, #234	; 0xea
 800b14c:	48a7      	ldr	r0, [pc, #668]	; (800b3ec <_dtoa_r+0x2d4>)
 800b14e:	f002 f8bd 	bl	800d2cc <__assert_func>
 800b152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b156:	6005      	str	r5, [r0, #0]
 800b158:	60c5      	str	r5, [r0, #12]
 800b15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15c:	6819      	ldr	r1, [r3, #0]
 800b15e:	b151      	cbz	r1, 800b176 <_dtoa_r+0x5e>
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	604a      	str	r2, [r1, #4]
 800b164:	2301      	movs	r3, #1
 800b166:	4093      	lsls	r3, r2
 800b168:	608b      	str	r3, [r1, #8]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f001 f99e 	bl	800c4ac <_Bfree>
 800b170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	1e3b      	subs	r3, r7, #0
 800b178:	bfaa      	itet	ge
 800b17a:	2300      	movge	r3, #0
 800b17c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b180:	f8c8 3000 	strge.w	r3, [r8]
 800b184:	4b9a      	ldr	r3, [pc, #616]	; (800b3f0 <_dtoa_r+0x2d8>)
 800b186:	bfbc      	itt	lt
 800b188:	2201      	movlt	r2, #1
 800b18a:	f8c8 2000 	strlt.w	r2, [r8]
 800b18e:	ea33 030b 	bics.w	r3, r3, fp
 800b192:	d11b      	bne.n	800b1cc <_dtoa_r+0xb4>
 800b194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b196:	f242 730f 	movw	r3, #9999	; 0x270f
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a0:	4333      	orrs	r3, r6
 800b1a2:	f000 8592 	beq.w	800bcca <_dtoa_r+0xbb2>
 800b1a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1a8:	b963      	cbnz	r3, 800b1c4 <_dtoa_r+0xac>
 800b1aa:	4b92      	ldr	r3, [pc, #584]	; (800b3f4 <_dtoa_r+0x2dc>)
 800b1ac:	e022      	b.n	800b1f4 <_dtoa_r+0xdc>
 800b1ae:	4b92      	ldr	r3, [pc, #584]	; (800b3f8 <_dtoa_r+0x2e0>)
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	b013      	add	sp, #76	; 0x4c
 800b1bc:	ecbd 8b04 	vpop	{d8-d9}
 800b1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	4b8b      	ldr	r3, [pc, #556]	; (800b3f4 <_dtoa_r+0x2dc>)
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	3303      	adds	r3, #3
 800b1ca:	e7f3      	b.n	800b1b4 <_dtoa_r+0x9c>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	f7f5 fc98 	bl	8000b08 <__aeabi_dcmpeq>
 800b1d8:	ec4b ab19 	vmov	d9, sl, fp
 800b1dc:	4680      	mov	r8, r0
 800b1de:	b158      	cbz	r0, 800b1f8 <_dtoa_r+0xe0>
 800b1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 856b 	beq.w	800bcc4 <_dtoa_r+0xbac>
 800b1ee:	4883      	ldr	r0, [pc, #524]	; (800b3fc <_dtoa_r+0x2e4>)
 800b1f0:	6018      	str	r0, [r3, #0]
 800b1f2:	1e43      	subs	r3, r0, #1
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	e7df      	b.n	800b1b8 <_dtoa_r+0xa0>
 800b1f8:	ec4b ab10 	vmov	d0, sl, fp
 800b1fc:	aa10      	add	r2, sp, #64	; 0x40
 800b1fe:	a911      	add	r1, sp, #68	; 0x44
 800b200:	4620      	mov	r0, r4
 800b202:	f001 fd01 	bl	800cc08 <__d2b>
 800b206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b20a:	ee08 0a10 	vmov	s16, r0
 800b20e:	2d00      	cmp	r5, #0
 800b210:	f000 8084 	beq.w	800b31c <_dtoa_r+0x204>
 800b214:	ee19 3a90 	vmov	r3, s19
 800b218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b21c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b220:	4656      	mov	r6, sl
 800b222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b22a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b22e:	4b74      	ldr	r3, [pc, #464]	; (800b400 <_dtoa_r+0x2e8>)
 800b230:	2200      	movs	r2, #0
 800b232:	4630      	mov	r0, r6
 800b234:	4639      	mov	r1, r7
 800b236:	f7f5 f847 	bl	80002c8 <__aeabi_dsub>
 800b23a:	a365      	add	r3, pc, #404	; (adr r3, 800b3d0 <_dtoa_r+0x2b8>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f7f5 f9fa 	bl	8000638 <__aeabi_dmul>
 800b244:	a364      	add	r3, pc, #400	; (adr r3, 800b3d8 <_dtoa_r+0x2c0>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f7f5 f83f 	bl	80002cc <__adddf3>
 800b24e:	4606      	mov	r6, r0
 800b250:	4628      	mov	r0, r5
 800b252:	460f      	mov	r7, r1
 800b254:	f7f5 f986 	bl	8000564 <__aeabi_i2d>
 800b258:	a361      	add	r3, pc, #388	; (adr r3, 800b3e0 <_dtoa_r+0x2c8>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f9eb 	bl	8000638 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f5 f82f 	bl	80002cc <__adddf3>
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	f7f5 fc91 	bl	8000b98 <__aeabi_d2iz>
 800b276:	2200      	movs	r2, #0
 800b278:	9000      	str	r0, [sp, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 fc4c 	bl	8000b1c <__aeabi_dcmplt>
 800b284:	b150      	cbz	r0, 800b29c <_dtoa_r+0x184>
 800b286:	9800      	ldr	r0, [sp, #0]
 800b288:	f7f5 f96c 	bl	8000564 <__aeabi_i2d>
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	f7f5 fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 800b294:	b910      	cbnz	r0, 800b29c <_dtoa_r+0x184>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	3b01      	subs	r3, #1
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	9b00      	ldr	r3, [sp, #0]
 800b29e:	2b16      	cmp	r3, #22
 800b2a0:	d85a      	bhi.n	800b358 <_dtoa_r+0x240>
 800b2a2:	9a00      	ldr	r2, [sp, #0]
 800b2a4:	4b57      	ldr	r3, [pc, #348]	; (800b404 <_dtoa_r+0x2ec>)
 800b2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	ec51 0b19 	vmov	r0, r1, d9
 800b2b2:	f7f5 fc33 	bl	8000b1c <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d050      	beq.n	800b35c <_dtoa_r+0x244>
 800b2ba:	9b00      	ldr	r3, [sp, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2c6:	1b5d      	subs	r5, r3, r5
 800b2c8:	1e6b      	subs	r3, r5, #1
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	bf45      	ittet	mi
 800b2ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2d2:	9304      	strmi	r3, [sp, #16]
 800b2d4:	2300      	movpl	r3, #0
 800b2d6:	2300      	movmi	r3, #0
 800b2d8:	bf4c      	ite	mi
 800b2da:	9305      	strmi	r3, [sp, #20]
 800b2dc:	9304      	strpl	r3, [sp, #16]
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	db3d      	blt.n	800b360 <_dtoa_r+0x248>
 800b2e4:	9b05      	ldr	r3, [sp, #20]
 800b2e6:	9a00      	ldr	r2, [sp, #0]
 800b2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ea:	4413      	add	r3, r2
 800b2ec:	9305      	str	r3, [sp, #20]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	f200 8089 	bhi.w	800b40c <_dtoa_r+0x2f4>
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	bfc4      	itt	gt
 800b2fe:	3b04      	subgt	r3, #4
 800b300:	9306      	strgt	r3, [sp, #24]
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	f1a3 0302 	sub.w	r3, r3, #2
 800b308:	bfcc      	ite	gt
 800b30a:	2500      	movgt	r5, #0
 800b30c:	2501      	movle	r5, #1
 800b30e:	2b03      	cmp	r3, #3
 800b310:	f200 8087 	bhi.w	800b422 <_dtoa_r+0x30a>
 800b314:	e8df f003 	tbb	[pc, r3]
 800b318:	59383a2d 	.word	0x59383a2d
 800b31c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b320:	441d      	add	r5, r3
 800b322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b326:	2b20      	cmp	r3, #32
 800b328:	bfc1      	itttt	gt
 800b32a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b32e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b332:	fa0b f303 	lslgt.w	r3, fp, r3
 800b336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b33a:	bfda      	itte	le
 800b33c:	f1c3 0320 	rsble	r3, r3, #32
 800b340:	fa06 f003 	lslle.w	r0, r6, r3
 800b344:	4318      	orrgt	r0, r3
 800b346:	f7f5 f8fd 	bl	8000544 <__aeabi_ui2d>
 800b34a:	2301      	movs	r3, #1
 800b34c:	4606      	mov	r6, r0
 800b34e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b352:	3d01      	subs	r5, #1
 800b354:	930e      	str	r3, [sp, #56]	; 0x38
 800b356:	e76a      	b.n	800b22e <_dtoa_r+0x116>
 800b358:	2301      	movs	r3, #1
 800b35a:	e7b2      	b.n	800b2c2 <_dtoa_r+0x1aa>
 800b35c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b35e:	e7b1      	b.n	800b2c4 <_dtoa_r+0x1ac>
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	9a00      	ldr	r2, [sp, #0]
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	4253      	negs	r3, r2
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	2300      	movs	r3, #0
 800b36e:	930a      	str	r3, [sp, #40]	; 0x28
 800b370:	e7bf      	b.n	800b2f2 <_dtoa_r+0x1da>
 800b372:	2300      	movs	r3, #0
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dc55      	bgt.n	800b428 <_dtoa_r+0x310>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b382:	461a      	mov	r2, r3
 800b384:	9209      	str	r2, [sp, #36]	; 0x24
 800b386:	e00c      	b.n	800b3a2 <_dtoa_r+0x28a>
 800b388:	2301      	movs	r3, #1
 800b38a:	e7f3      	b.n	800b374 <_dtoa_r+0x25c>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b390:	9308      	str	r3, [sp, #32]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	4413      	add	r3, r2
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	3301      	adds	r3, #1
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	9303      	str	r3, [sp, #12]
 800b39e:	bfb8      	it	lt
 800b3a0:	2301      	movlt	r3, #1
 800b3a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	6042      	str	r2, [r0, #4]
 800b3a8:	2204      	movs	r2, #4
 800b3aa:	f102 0614 	add.w	r6, r2, #20
 800b3ae:	429e      	cmp	r6, r3
 800b3b0:	6841      	ldr	r1, [r0, #4]
 800b3b2:	d93d      	bls.n	800b430 <_dtoa_r+0x318>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f001 f839 	bl	800c42c <_Balloc>
 800b3ba:	9001      	str	r0, [sp, #4]
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d13b      	bne.n	800b438 <_dtoa_r+0x320>
 800b3c0:	4b11      	ldr	r3, [pc, #68]	; (800b408 <_dtoa_r+0x2f0>)
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3c8:	e6c0      	b.n	800b14c <_dtoa_r+0x34>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e7df      	b.n	800b38e <_dtoa_r+0x276>
 800b3ce:	bf00      	nop
 800b3d0:	636f4361 	.word	0x636f4361
 800b3d4:	3fd287a7 	.word	0x3fd287a7
 800b3d8:	8b60c8b3 	.word	0x8b60c8b3
 800b3dc:	3fc68a28 	.word	0x3fc68a28
 800b3e0:	509f79fb 	.word	0x509f79fb
 800b3e4:	3fd34413 	.word	0x3fd34413
 800b3e8:	0800e54e 	.word	0x0800e54e
 800b3ec:	0800e565 	.word	0x0800e565
 800b3f0:	7ff00000 	.word	0x7ff00000
 800b3f4:	0800e54a 	.word	0x0800e54a
 800b3f8:	0800e541 	.word	0x0800e541
 800b3fc:	0800e3c1 	.word	0x0800e3c1
 800b400:	3ff80000 	.word	0x3ff80000
 800b404:	0800e6d0 	.word	0x0800e6d0
 800b408:	0800e5c0 	.word	0x0800e5c0
 800b40c:	2501      	movs	r5, #1
 800b40e:	2300      	movs	r3, #0
 800b410:	9306      	str	r3, [sp, #24]
 800b412:	9508      	str	r5, [sp, #32]
 800b414:	f04f 33ff 	mov.w	r3, #4294967295
 800b418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	2312      	movs	r3, #18
 800b420:	e7b0      	b.n	800b384 <_dtoa_r+0x26c>
 800b422:	2301      	movs	r3, #1
 800b424:	9308      	str	r3, [sp, #32]
 800b426:	e7f5      	b.n	800b414 <_dtoa_r+0x2fc>
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b42e:	e7b8      	b.n	800b3a2 <_dtoa_r+0x28a>
 800b430:	3101      	adds	r1, #1
 800b432:	6041      	str	r1, [r0, #4]
 800b434:	0052      	lsls	r2, r2, #1
 800b436:	e7b8      	b.n	800b3aa <_dtoa_r+0x292>
 800b438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43a:	9a01      	ldr	r2, [sp, #4]
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	2b0e      	cmp	r3, #14
 800b442:	f200 809d 	bhi.w	800b580 <_dtoa_r+0x468>
 800b446:	2d00      	cmp	r5, #0
 800b448:	f000 809a 	beq.w	800b580 <_dtoa_r+0x468>
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dd32      	ble.n	800b4b8 <_dtoa_r+0x3a0>
 800b452:	4ab7      	ldr	r2, [pc, #732]	; (800b730 <_dtoa_r+0x618>)
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	05d8      	lsls	r0, r3, #23
 800b464:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b468:	d516      	bpl.n	800b498 <_dtoa_r+0x380>
 800b46a:	4bb2      	ldr	r3, [pc, #712]	; (800b734 <_dtoa_r+0x61c>)
 800b46c:	ec51 0b19 	vmov	r0, r1, d9
 800b470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b474:	f7f5 fa0a 	bl	800088c <__aeabi_ddiv>
 800b478:	f007 070f 	and.w	r7, r7, #15
 800b47c:	4682      	mov	sl, r0
 800b47e:	468b      	mov	fp, r1
 800b480:	2503      	movs	r5, #3
 800b482:	4eac      	ldr	r6, [pc, #688]	; (800b734 <_dtoa_r+0x61c>)
 800b484:	b957      	cbnz	r7, 800b49c <_dtoa_r+0x384>
 800b486:	4642      	mov	r2, r8
 800b488:	464b      	mov	r3, r9
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f5 f9fd 	bl	800088c <__aeabi_ddiv>
 800b492:	4682      	mov	sl, r0
 800b494:	468b      	mov	fp, r1
 800b496:	e028      	b.n	800b4ea <_dtoa_r+0x3d2>
 800b498:	2502      	movs	r5, #2
 800b49a:	e7f2      	b.n	800b482 <_dtoa_r+0x36a>
 800b49c:	07f9      	lsls	r1, r7, #31
 800b49e:	d508      	bpl.n	800b4b2 <_dtoa_r+0x39a>
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4a8:	f7f5 f8c6 	bl	8000638 <__aeabi_dmul>
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4689      	mov	r9, r1
 800b4b2:	107f      	asrs	r7, r7, #1
 800b4b4:	3608      	adds	r6, #8
 800b4b6:	e7e5      	b.n	800b484 <_dtoa_r+0x36c>
 800b4b8:	f000 809b 	beq.w	800b5f2 <_dtoa_r+0x4da>
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	4f9d      	ldr	r7, [pc, #628]	; (800b734 <_dtoa_r+0x61c>)
 800b4c0:	425e      	negs	r6, r3
 800b4c2:	4b9b      	ldr	r3, [pc, #620]	; (800b730 <_dtoa_r+0x618>)
 800b4c4:	f006 020f 	and.w	r2, r6, #15
 800b4c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	ec51 0b19 	vmov	r0, r1, d9
 800b4d4:	f7f5 f8b0 	bl	8000638 <__aeabi_dmul>
 800b4d8:	1136      	asrs	r6, r6, #4
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	2300      	movs	r3, #0
 800b4e0:	2502      	movs	r5, #2
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d17a      	bne.n	800b5dc <_dtoa_r+0x4c4>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1d3      	bne.n	800b492 <_dtoa_r+0x37a>
 800b4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8082 	beq.w	800b5f6 <_dtoa_r+0x4de>
 800b4f2:	4b91      	ldr	r3, [pc, #580]	; (800b738 <_dtoa_r+0x620>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4650      	mov	r0, sl
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	f7f5 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d079      	beq.n	800b5f6 <_dtoa_r+0x4de>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d076      	beq.n	800b5f6 <_dtoa_r+0x4de>
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	dd36      	ble.n	800b57c <_dtoa_r+0x464>
 800b50e:	9b00      	ldr	r3, [sp, #0]
 800b510:	4650      	mov	r0, sl
 800b512:	4659      	mov	r1, fp
 800b514:	1e5f      	subs	r7, r3, #1
 800b516:	2200      	movs	r2, #0
 800b518:	4b88      	ldr	r3, [pc, #544]	; (800b73c <_dtoa_r+0x624>)
 800b51a:	f7f5 f88d 	bl	8000638 <__aeabi_dmul>
 800b51e:	9e02      	ldr	r6, [sp, #8]
 800b520:	4682      	mov	sl, r0
 800b522:	468b      	mov	fp, r1
 800b524:	3501      	adds	r5, #1
 800b526:	4628      	mov	r0, r5
 800b528:	f7f5 f81c 	bl	8000564 <__aeabi_i2d>
 800b52c:	4652      	mov	r2, sl
 800b52e:	465b      	mov	r3, fp
 800b530:	f7f5 f882 	bl	8000638 <__aeabi_dmul>
 800b534:	4b82      	ldr	r3, [pc, #520]	; (800b740 <_dtoa_r+0x628>)
 800b536:	2200      	movs	r2, #0
 800b538:	f7f4 fec8 	bl	80002cc <__adddf3>
 800b53c:	46d0      	mov	r8, sl
 800b53e:	46d9      	mov	r9, fp
 800b540:	4682      	mov	sl, r0
 800b542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b546:	2e00      	cmp	r6, #0
 800b548:	d158      	bne.n	800b5fc <_dtoa_r+0x4e4>
 800b54a:	4b7e      	ldr	r3, [pc, #504]	; (800b744 <_dtoa_r+0x62c>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	4640      	mov	r0, r8
 800b550:	4649      	mov	r1, r9
 800b552:	f7f4 feb9 	bl	80002c8 <__aeabi_dsub>
 800b556:	4652      	mov	r2, sl
 800b558:	465b      	mov	r3, fp
 800b55a:	4680      	mov	r8, r0
 800b55c:	4689      	mov	r9, r1
 800b55e:	f7f5 fafb 	bl	8000b58 <__aeabi_dcmpgt>
 800b562:	2800      	cmp	r0, #0
 800b564:	f040 8295 	bne.w	800ba92 <_dtoa_r+0x97a>
 800b568:	4652      	mov	r2, sl
 800b56a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f5 fad3 	bl	8000b1c <__aeabi_dcmplt>
 800b576:	2800      	cmp	r0, #0
 800b578:	f040 8289 	bne.w	800ba8e <_dtoa_r+0x976>
 800b57c:	ec5b ab19 	vmov	sl, fp, d9
 800b580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b582:	2b00      	cmp	r3, #0
 800b584:	f2c0 8148 	blt.w	800b818 <_dtoa_r+0x700>
 800b588:	9a00      	ldr	r2, [sp, #0]
 800b58a:	2a0e      	cmp	r2, #14
 800b58c:	f300 8144 	bgt.w	800b818 <_dtoa_r+0x700>
 800b590:	4b67      	ldr	r3, [pc, #412]	; (800b730 <_dtoa_r+0x618>)
 800b592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f280 80d5 	bge.w	800b74c <_dtoa_r+0x634>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f300 80d1 	bgt.w	800b74c <_dtoa_r+0x634>
 800b5aa:	f040 826f 	bne.w	800ba8c <_dtoa_r+0x974>
 800b5ae:	4b65      	ldr	r3, [pc, #404]	; (800b744 <_dtoa_r+0x62c>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f5 f83f 	bl	8000638 <__aeabi_dmul>
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	465b      	mov	r3, fp
 800b5be:	f7f5 fac1 	bl	8000b44 <__aeabi_dcmpge>
 800b5c2:	9e03      	ldr	r6, [sp, #12]
 800b5c4:	4637      	mov	r7, r6
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f040 8245 	bne.w	800ba56 <_dtoa_r+0x93e>
 800b5cc:	9d01      	ldr	r5, [sp, #4]
 800b5ce:	2331      	movs	r3, #49	; 0x31
 800b5d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	e240      	b.n	800ba5e <_dtoa_r+0x946>
 800b5dc:	07f2      	lsls	r2, r6, #31
 800b5de:	d505      	bpl.n	800b5ec <_dtoa_r+0x4d4>
 800b5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e4:	f7f5 f828 	bl	8000638 <__aeabi_dmul>
 800b5e8:	3501      	adds	r5, #1
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	1076      	asrs	r6, r6, #1
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	e777      	b.n	800b4e2 <_dtoa_r+0x3ca>
 800b5f2:	2502      	movs	r5, #2
 800b5f4:	e779      	b.n	800b4ea <_dtoa_r+0x3d2>
 800b5f6:	9f00      	ldr	r7, [sp, #0]
 800b5f8:	9e03      	ldr	r6, [sp, #12]
 800b5fa:	e794      	b.n	800b526 <_dtoa_r+0x40e>
 800b5fc:	9901      	ldr	r1, [sp, #4]
 800b5fe:	4b4c      	ldr	r3, [pc, #304]	; (800b730 <_dtoa_r+0x618>)
 800b600:	4431      	add	r1, r6
 800b602:	910d      	str	r1, [sp, #52]	; 0x34
 800b604:	9908      	ldr	r1, [sp, #32]
 800b606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b60e:	2900      	cmp	r1, #0
 800b610:	d043      	beq.n	800b69a <_dtoa_r+0x582>
 800b612:	494d      	ldr	r1, [pc, #308]	; (800b748 <_dtoa_r+0x630>)
 800b614:	2000      	movs	r0, #0
 800b616:	f7f5 f939 	bl	800088c <__aeabi_ddiv>
 800b61a:	4652      	mov	r2, sl
 800b61c:	465b      	mov	r3, fp
 800b61e:	f7f4 fe53 	bl	80002c8 <__aeabi_dsub>
 800b622:	9d01      	ldr	r5, [sp, #4]
 800b624:	4682      	mov	sl, r0
 800b626:	468b      	mov	fp, r1
 800b628:	4649      	mov	r1, r9
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7f5 fab4 	bl	8000b98 <__aeabi_d2iz>
 800b630:	4606      	mov	r6, r0
 800b632:	f7f4 ff97 	bl	8000564 <__aeabi_i2d>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fe43 	bl	80002c8 <__aeabi_dsub>
 800b642:	3630      	adds	r6, #48	; 0x30
 800b644:	f805 6b01 	strb.w	r6, [r5], #1
 800b648:	4652      	mov	r2, sl
 800b64a:	465b      	mov	r3, fp
 800b64c:	4680      	mov	r8, r0
 800b64e:	4689      	mov	r9, r1
 800b650:	f7f5 fa64 	bl	8000b1c <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	d163      	bne.n	800b720 <_dtoa_r+0x608>
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	4936      	ldr	r1, [pc, #216]	; (800b738 <_dtoa_r+0x620>)
 800b65e:	2000      	movs	r0, #0
 800b660:	f7f4 fe32 	bl	80002c8 <__aeabi_dsub>
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	f7f5 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	f040 80b5 	bne.w	800b7dc <_dtoa_r+0x6c4>
 800b672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b674:	429d      	cmp	r5, r3
 800b676:	d081      	beq.n	800b57c <_dtoa_r+0x464>
 800b678:	4b30      	ldr	r3, [pc, #192]	; (800b73c <_dtoa_r+0x624>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	4650      	mov	r0, sl
 800b67e:	4659      	mov	r1, fp
 800b680:	f7f4 ffda 	bl	8000638 <__aeabi_dmul>
 800b684:	4b2d      	ldr	r3, [pc, #180]	; (800b73c <_dtoa_r+0x624>)
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	4640      	mov	r0, r8
 800b68c:	4649      	mov	r1, r9
 800b68e:	2200      	movs	r2, #0
 800b690:	f7f4 ffd2 	bl	8000638 <__aeabi_dmul>
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	e7c6      	b.n	800b628 <_dtoa_r+0x510>
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 ffcb 	bl	8000638 <__aeabi_dmul>
 800b6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6a4:	9d01      	ldr	r5, [sp, #4]
 800b6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	468b      	mov	fp, r1
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7f5 fa72 	bl	8000b98 <__aeabi_d2iz>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	f7f4 ff55 	bl	8000564 <__aeabi_i2d>
 800b6ba:	3630      	adds	r6, #48	; 0x30
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	f7f4 fe00 	bl	80002c8 <__aeabi_dsub>
 800b6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	4689      	mov	r9, r1
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	d124      	bne.n	800b724 <_dtoa_r+0x60c>
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <_dtoa_r+0x630>)
 800b6dc:	4650      	mov	r0, sl
 800b6de:	4659      	mov	r1, fp
 800b6e0:	f7f4 fdf4 	bl	80002cc <__adddf3>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f5 fa34 	bl	8000b58 <__aeabi_dcmpgt>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d173      	bne.n	800b7dc <_dtoa_r+0x6c4>
 800b6f4:	4652      	mov	r2, sl
 800b6f6:	465b      	mov	r3, fp
 800b6f8:	4913      	ldr	r1, [pc, #76]	; (800b748 <_dtoa_r+0x630>)
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f7f4 fde4 	bl	80002c8 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4640      	mov	r0, r8
 800b706:	4649      	mov	r1, r9
 800b708:	f7f5 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f af35 	beq.w	800b57c <_dtoa_r+0x464>
 800b712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b714:	1e6b      	subs	r3, r5, #1
 800b716:	930f      	str	r3, [sp, #60]	; 0x3c
 800b718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b71c:	2b30      	cmp	r3, #48	; 0x30
 800b71e:	d0f8      	beq.n	800b712 <_dtoa_r+0x5fa>
 800b720:	9700      	str	r7, [sp, #0]
 800b722:	e049      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <_dtoa_r+0x624>)
 800b726:	f7f4 ff87 	bl	8000638 <__aeabi_dmul>
 800b72a:	4680      	mov	r8, r0
 800b72c:	4689      	mov	r9, r1
 800b72e:	e7bd      	b.n	800b6ac <_dtoa_r+0x594>
 800b730:	0800e6d0 	.word	0x0800e6d0
 800b734:	0800e6a8 	.word	0x0800e6a8
 800b738:	3ff00000 	.word	0x3ff00000
 800b73c:	40240000 	.word	0x40240000
 800b740:	401c0000 	.word	0x401c0000
 800b744:	40140000 	.word	0x40140000
 800b748:	3fe00000 	.word	0x3fe00000
 800b74c:	9d01      	ldr	r5, [sp, #4]
 800b74e:	4656      	mov	r6, sl
 800b750:	465f      	mov	r7, fp
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f5 f897 	bl	800088c <__aeabi_ddiv>
 800b75e:	f7f5 fa1b 	bl	8000b98 <__aeabi_d2iz>
 800b762:	4682      	mov	sl, r0
 800b764:	f7f4 fefe 	bl	8000564 <__aeabi_i2d>
 800b768:	4642      	mov	r2, r8
 800b76a:	464b      	mov	r3, r9
 800b76c:	f7f4 ff64 	bl	8000638 <__aeabi_dmul>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b77c:	f7f4 fda4 	bl	80002c8 <__aeabi_dsub>
 800b780:	f805 6b01 	strb.w	r6, [r5], #1
 800b784:	9e01      	ldr	r6, [sp, #4]
 800b786:	9f03      	ldr	r7, [sp, #12]
 800b788:	1bae      	subs	r6, r5, r6
 800b78a:	42b7      	cmp	r7, r6
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	d135      	bne.n	800b7fe <_dtoa_r+0x6e6>
 800b792:	f7f4 fd9b 	bl	80002cc <__adddf3>
 800b796:	4642      	mov	r2, r8
 800b798:	464b      	mov	r3, r9
 800b79a:	4606      	mov	r6, r0
 800b79c:	460f      	mov	r7, r1
 800b79e:	f7f5 f9db 	bl	8000b58 <__aeabi_dcmpgt>
 800b7a2:	b9d0      	cbnz	r0, 800b7da <_dtoa_r+0x6c2>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f5 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 800b7b0:	b110      	cbz	r0, 800b7b8 <_dtoa_r+0x6a0>
 800b7b2:	f01a 0f01 	tst.w	sl, #1
 800b7b6:	d110      	bne.n	800b7da <_dtoa_r+0x6c2>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	ee18 1a10 	vmov	r1, s16
 800b7be:	f000 fe75 	bl	800c4ac <_Bfree>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9800      	ldr	r0, [sp, #0]
 800b7c6:	702b      	strb	r3, [r5, #0]
 800b7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	6018      	str	r0, [r3, #0]
 800b7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f43f acf1 	beq.w	800b1b8 <_dtoa_r+0xa0>
 800b7d6:	601d      	str	r5, [r3, #0]
 800b7d8:	e4ee      	b.n	800b1b8 <_dtoa_r+0xa0>
 800b7da:	9f00      	ldr	r7, [sp, #0]
 800b7dc:	462b      	mov	r3, r5
 800b7de:	461d      	mov	r5, r3
 800b7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e4:	2a39      	cmp	r2, #57	; 0x39
 800b7e6:	d106      	bne.n	800b7f6 <_dtoa_r+0x6de>
 800b7e8:	9a01      	ldr	r2, [sp, #4]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d1f7      	bne.n	800b7de <_dtoa_r+0x6c6>
 800b7ee:	9901      	ldr	r1, [sp, #4]
 800b7f0:	2230      	movs	r2, #48	; 0x30
 800b7f2:	3701      	adds	r7, #1
 800b7f4:	700a      	strb	r2, [r1, #0]
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	e790      	b.n	800b720 <_dtoa_r+0x608>
 800b7fe:	4ba6      	ldr	r3, [pc, #664]	; (800ba98 <_dtoa_r+0x980>)
 800b800:	2200      	movs	r2, #0
 800b802:	f7f4 ff19 	bl	8000638 <__aeabi_dmul>
 800b806:	2200      	movs	r2, #0
 800b808:	2300      	movs	r3, #0
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	f7f5 f97b 	bl	8000b08 <__aeabi_dcmpeq>
 800b812:	2800      	cmp	r0, #0
 800b814:	d09d      	beq.n	800b752 <_dtoa_r+0x63a>
 800b816:	e7cf      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800b818:	9a08      	ldr	r2, [sp, #32]
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	f000 80d7 	beq.w	800b9ce <_dtoa_r+0x8b6>
 800b820:	9a06      	ldr	r2, [sp, #24]
 800b822:	2a01      	cmp	r2, #1
 800b824:	f300 80ba 	bgt.w	800b99c <_dtoa_r+0x884>
 800b828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	f000 80b2 	beq.w	800b994 <_dtoa_r+0x87c>
 800b830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b834:	9e07      	ldr	r6, [sp, #28]
 800b836:	9d04      	ldr	r5, [sp, #16]
 800b838:	9a04      	ldr	r2, [sp, #16]
 800b83a:	441a      	add	r2, r3
 800b83c:	9204      	str	r2, [sp, #16]
 800b83e:	9a05      	ldr	r2, [sp, #20]
 800b840:	2101      	movs	r1, #1
 800b842:	441a      	add	r2, r3
 800b844:	4620      	mov	r0, r4
 800b846:	9205      	str	r2, [sp, #20]
 800b848:	f000 ff32 	bl	800c6b0 <__i2b>
 800b84c:	4607      	mov	r7, r0
 800b84e:	2d00      	cmp	r5, #0
 800b850:	dd0c      	ble.n	800b86c <_dtoa_r+0x754>
 800b852:	9b05      	ldr	r3, [sp, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd09      	ble.n	800b86c <_dtoa_r+0x754>
 800b858:	42ab      	cmp	r3, r5
 800b85a:	9a04      	ldr	r2, [sp, #16]
 800b85c:	bfa8      	it	ge
 800b85e:	462b      	movge	r3, r5
 800b860:	1ad2      	subs	r2, r2, r3
 800b862:	9204      	str	r2, [sp, #16]
 800b864:	9a05      	ldr	r2, [sp, #20]
 800b866:	1aed      	subs	r5, r5, r3
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	b31b      	cbz	r3, 800b8b8 <_dtoa_r+0x7a0>
 800b870:	9b08      	ldr	r3, [sp, #32]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 80af 	beq.w	800b9d6 <_dtoa_r+0x8be>
 800b878:	2e00      	cmp	r6, #0
 800b87a:	dd13      	ble.n	800b8a4 <_dtoa_r+0x78c>
 800b87c:	4639      	mov	r1, r7
 800b87e:	4632      	mov	r2, r6
 800b880:	4620      	mov	r0, r4
 800b882:	f000 ffd5 	bl	800c830 <__pow5mult>
 800b886:	ee18 2a10 	vmov	r2, s16
 800b88a:	4601      	mov	r1, r0
 800b88c:	4607      	mov	r7, r0
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 ff24 	bl	800c6dc <__multiply>
 800b894:	ee18 1a10 	vmov	r1, s16
 800b898:	4680      	mov	r8, r0
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fe06 	bl	800c4ac <_Bfree>
 800b8a0:	ee08 8a10 	vmov	s16, r8
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	1b9a      	subs	r2, r3, r6
 800b8a8:	d006      	beq.n	800b8b8 <_dtoa_r+0x7a0>
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 ffbe 	bl	800c830 <__pow5mult>
 800b8b4:	ee08 0a10 	vmov	s16, r0
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fef8 	bl	800c6b0 <__i2b>
 800b8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	f340 8088 	ble.w	800b9da <_dtoa_r+0x8c2>
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 ffae 	bl	800c830 <__pow5mult>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	4606      	mov	r6, r0
 800b8da:	f340 8081 	ble.w	800b9e0 <_dtoa_r+0x8c8>
 800b8de:	f04f 0800 	mov.w	r8, #0
 800b8e2:	6933      	ldr	r3, [r6, #16]
 800b8e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8e8:	6918      	ldr	r0, [r3, #16]
 800b8ea:	f000 fe91 	bl	800c610 <__hi0bits>
 800b8ee:	f1c0 0020 	rsb	r0, r0, #32
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	4418      	add	r0, r3
 800b8f6:	f010 001f 	ands.w	r0, r0, #31
 800b8fa:	f000 8092 	beq.w	800ba22 <_dtoa_r+0x90a>
 800b8fe:	f1c0 0320 	rsb	r3, r0, #32
 800b902:	2b04      	cmp	r3, #4
 800b904:	f340 808a 	ble.w	800ba1c <_dtoa_r+0x904>
 800b908:	f1c0 001c 	rsb	r0, r0, #28
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	4403      	add	r3, r0
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	4403      	add	r3, r0
 800b916:	4405      	add	r5, r0
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dd07      	ble.n	800b930 <_dtoa_r+0x818>
 800b920:	ee18 1a10 	vmov	r1, s16
 800b924:	461a      	mov	r2, r3
 800b926:	4620      	mov	r0, r4
 800b928:	f000 ffdc 	bl	800c8e4 <__lshift>
 800b92c:	ee08 0a10 	vmov	s16, r0
 800b930:	9b05      	ldr	r3, [sp, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	dd05      	ble.n	800b942 <_dtoa_r+0x82a>
 800b936:	4631      	mov	r1, r6
 800b938:	461a      	mov	r2, r3
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 ffd2 	bl	800c8e4 <__lshift>
 800b940:	4606      	mov	r6, r0
 800b942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d06e      	beq.n	800ba26 <_dtoa_r+0x90e>
 800b948:	ee18 0a10 	vmov	r0, s16
 800b94c:	4631      	mov	r1, r6
 800b94e:	f001 f839 	bl	800c9c4 <__mcmp>
 800b952:	2800      	cmp	r0, #0
 800b954:	da67      	bge.n	800ba26 <_dtoa_r+0x90e>
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	3b01      	subs	r3, #1
 800b95a:	ee18 1a10 	vmov	r1, s16
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	220a      	movs	r2, #10
 800b962:	2300      	movs	r3, #0
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fdc3 	bl	800c4f0 <__multadd>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	ee08 0a10 	vmov	s16, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 81b1 	beq.w	800bcd8 <_dtoa_r+0xbc0>
 800b976:	2300      	movs	r3, #0
 800b978:	4639      	mov	r1, r7
 800b97a:	220a      	movs	r2, #10
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fdb7 	bl	800c4f0 <__multadd>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	4607      	mov	r7, r0
 800b988:	f300 808e 	bgt.w	800baa8 <_dtoa_r+0x990>
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	2b02      	cmp	r3, #2
 800b990:	dc51      	bgt.n	800ba36 <_dtoa_r+0x91e>
 800b992:	e089      	b.n	800baa8 <_dtoa_r+0x990>
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b99a:	e74b      	b.n	800b834 <_dtoa_r+0x71c>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1e5e      	subs	r6, r3, #1
 800b9a0:	9b07      	ldr	r3, [sp, #28]
 800b9a2:	42b3      	cmp	r3, r6
 800b9a4:	bfbf      	itttt	lt
 800b9a6:	9b07      	ldrlt	r3, [sp, #28]
 800b9a8:	9607      	strlt	r6, [sp, #28]
 800b9aa:	1af2      	sublt	r2, r6, r3
 800b9ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9ae:	bfb6      	itet	lt
 800b9b0:	189b      	addlt	r3, r3, r2
 800b9b2:	1b9e      	subge	r6, r3, r6
 800b9b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	bfb8      	it	lt
 800b9ba:	2600      	movlt	r6, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfb7      	itett	lt
 800b9c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9c8:	1a9d      	sublt	r5, r3, r2
 800b9ca:	2300      	movlt	r3, #0
 800b9cc:	e734      	b.n	800b838 <_dtoa_r+0x720>
 800b9ce:	9e07      	ldr	r6, [sp, #28]
 800b9d0:	9d04      	ldr	r5, [sp, #16]
 800b9d2:	9f08      	ldr	r7, [sp, #32]
 800b9d4:	e73b      	b.n	800b84e <_dtoa_r+0x736>
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	e767      	b.n	800b8aa <_dtoa_r+0x792>
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	dc18      	bgt.n	800ba12 <_dtoa_r+0x8fa>
 800b9e0:	f1ba 0f00 	cmp.w	sl, #0
 800b9e4:	d115      	bne.n	800ba12 <_dtoa_r+0x8fa>
 800b9e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ea:	b993      	cbnz	r3, 800ba12 <_dtoa_r+0x8fa>
 800b9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9f0:	0d1b      	lsrs	r3, r3, #20
 800b9f2:	051b      	lsls	r3, r3, #20
 800b9f4:	b183      	cbz	r3, 800ba18 <_dtoa_r+0x900>
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	9304      	str	r3, [sp, #16]
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	f04f 0801 	mov.w	r8, #1
 800ba06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f47f af6a 	bne.w	800b8e2 <_dtoa_r+0x7ca>
 800ba0e:	2001      	movs	r0, #1
 800ba10:	e76f      	b.n	800b8f2 <_dtoa_r+0x7da>
 800ba12:	f04f 0800 	mov.w	r8, #0
 800ba16:	e7f6      	b.n	800ba06 <_dtoa_r+0x8ee>
 800ba18:	4698      	mov	r8, r3
 800ba1a:	e7f4      	b.n	800ba06 <_dtoa_r+0x8ee>
 800ba1c:	f43f af7d 	beq.w	800b91a <_dtoa_r+0x802>
 800ba20:	4618      	mov	r0, r3
 800ba22:	301c      	adds	r0, #28
 800ba24:	e772      	b.n	800b90c <_dtoa_r+0x7f4>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dc37      	bgt.n	800ba9c <_dtoa_r+0x984>
 800ba2c:	9b06      	ldr	r3, [sp, #24]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	dd34      	ble.n	800ba9c <_dtoa_r+0x984>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	9302      	str	r3, [sp, #8]
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	b96b      	cbnz	r3, 800ba56 <_dtoa_r+0x93e>
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fd56 	bl	800c4f0 <__multadd>
 800ba44:	4601      	mov	r1, r0
 800ba46:	4606      	mov	r6, r0
 800ba48:	ee18 0a10 	vmov	r0, s16
 800ba4c:	f000 ffba 	bl	800c9c4 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f73f adbb 	bgt.w	800b5cc <_dtoa_r+0x4b4>
 800ba56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba58:	9d01      	ldr	r5, [sp, #4]
 800ba5a:	43db      	mvns	r3, r3
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	f04f 0800 	mov.w	r8, #0
 800ba62:	4631      	mov	r1, r6
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fd21 	bl	800c4ac <_Bfree>
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	f43f aea4 	beq.w	800b7b8 <_dtoa_r+0x6a0>
 800ba70:	f1b8 0f00 	cmp.w	r8, #0
 800ba74:	d005      	beq.n	800ba82 <_dtoa_r+0x96a>
 800ba76:	45b8      	cmp	r8, r7
 800ba78:	d003      	beq.n	800ba82 <_dtoa_r+0x96a>
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fd15 	bl	800c4ac <_Bfree>
 800ba82:	4639      	mov	r1, r7
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fd11 	bl	800c4ac <_Bfree>
 800ba8a:	e695      	b.n	800b7b8 <_dtoa_r+0x6a0>
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	4637      	mov	r7, r6
 800ba90:	e7e1      	b.n	800ba56 <_dtoa_r+0x93e>
 800ba92:	9700      	str	r7, [sp, #0]
 800ba94:	4637      	mov	r7, r6
 800ba96:	e599      	b.n	800b5cc <_dtoa_r+0x4b4>
 800ba98:	40240000 	.word	0x40240000
 800ba9c:	9b08      	ldr	r3, [sp, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80ca 	beq.w	800bc38 <_dtoa_r+0xb20>
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	dd05      	ble.n	800bab8 <_dtoa_r+0x9a0>
 800baac:	4639      	mov	r1, r7
 800baae:	462a      	mov	r2, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 ff17 	bl	800c8e4 <__lshift>
 800bab6:	4607      	mov	r7, r0
 800bab8:	f1b8 0f00 	cmp.w	r8, #0
 800babc:	d05b      	beq.n	800bb76 <_dtoa_r+0xa5e>
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 fcb3 	bl	800c42c <_Balloc>
 800bac6:	4605      	mov	r5, r0
 800bac8:	b928      	cbnz	r0, 800bad6 <_dtoa_r+0x9be>
 800baca:	4b87      	ldr	r3, [pc, #540]	; (800bce8 <_dtoa_r+0xbd0>)
 800bacc:	4602      	mov	r2, r0
 800bace:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bad2:	f7ff bb3b 	b.w	800b14c <_dtoa_r+0x34>
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	3202      	adds	r2, #2
 800bada:	0092      	lsls	r2, r2, #2
 800badc:	f107 010c 	add.w	r1, r7, #12
 800bae0:	300c      	adds	r0, #12
 800bae2:	f000 fc95 	bl	800c410 <memcpy>
 800bae6:	2201      	movs	r2, #1
 800bae8:	4629      	mov	r1, r5
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fefa 	bl	800c8e4 <__lshift>
 800baf0:	9b01      	ldr	r3, [sp, #4]
 800baf2:	f103 0901 	add.w	r9, r3, #1
 800baf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	f00a 0301 	and.w	r3, sl, #1
 800bb02:	46b8      	mov	r8, r7
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	4607      	mov	r7, r0
 800bb08:	4631      	mov	r1, r6
 800bb0a:	ee18 0a10 	vmov	r0, s16
 800bb0e:	f7ff fa77 	bl	800b000 <quorem>
 800bb12:	4641      	mov	r1, r8
 800bb14:	9002      	str	r0, [sp, #8]
 800bb16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	f000 ff51 	bl	800c9c4 <__mcmp>
 800bb22:	463a      	mov	r2, r7
 800bb24:	9003      	str	r0, [sp, #12]
 800bb26:	4631      	mov	r1, r6
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 ff67 	bl	800c9fc <__mdiff>
 800bb2e:	68c2      	ldr	r2, [r0, #12]
 800bb30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb34:	4605      	mov	r5, r0
 800bb36:	bb02      	cbnz	r2, 800bb7a <_dtoa_r+0xa62>
 800bb38:	4601      	mov	r1, r0
 800bb3a:	ee18 0a10 	vmov	r0, s16
 800bb3e:	f000 ff41 	bl	800c9c4 <__mcmp>
 800bb42:	4602      	mov	r2, r0
 800bb44:	4629      	mov	r1, r5
 800bb46:	4620      	mov	r0, r4
 800bb48:	9207      	str	r2, [sp, #28]
 800bb4a:	f000 fcaf 	bl	800c4ac <_Bfree>
 800bb4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb52:	ea43 0102 	orr.w	r1, r3, r2
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	464d      	mov	r5, r9
 800bb5c:	d10f      	bne.n	800bb7e <_dtoa_r+0xa66>
 800bb5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb62:	d02a      	beq.n	800bbba <_dtoa_r+0xaa2>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dd02      	ble.n	800bb70 <_dtoa_r+0xa58>
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb70:	f88b a000 	strb.w	sl, [fp]
 800bb74:	e775      	b.n	800ba62 <_dtoa_r+0x94a>
 800bb76:	4638      	mov	r0, r7
 800bb78:	e7ba      	b.n	800baf0 <_dtoa_r+0x9d8>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	e7e2      	b.n	800bb44 <_dtoa_r+0xa2c>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	db04      	blt.n	800bb8e <_dtoa_r+0xa76>
 800bb84:	9906      	ldr	r1, [sp, #24]
 800bb86:	430b      	orrs	r3, r1
 800bb88:	9904      	ldr	r1, [sp, #16]
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	d122      	bne.n	800bbd4 <_dtoa_r+0xabc>
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	ddee      	ble.n	800bb70 <_dtoa_r+0xa58>
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	2201      	movs	r2, #1
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fea3 	bl	800c8e4 <__lshift>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	ee08 0a10 	vmov	s16, r0
 800bba4:	f000 ff0e 	bl	800c9c4 <__mcmp>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	dc03      	bgt.n	800bbb4 <_dtoa_r+0xa9c>
 800bbac:	d1e0      	bne.n	800bb70 <_dtoa_r+0xa58>
 800bbae:	f01a 0f01 	tst.w	sl, #1
 800bbb2:	d0dd      	beq.n	800bb70 <_dtoa_r+0xa58>
 800bbb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbb8:	d1d7      	bne.n	800bb6a <_dtoa_r+0xa52>
 800bbba:	2339      	movs	r3, #57	; 0x39
 800bbbc:	f88b 3000 	strb.w	r3, [fp]
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	461d      	mov	r5, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbca:	2a39      	cmp	r2, #57	; 0x39
 800bbcc:	d071      	beq.n	800bcb2 <_dtoa_r+0xb9a>
 800bbce:	3201      	adds	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e746      	b.n	800ba62 <_dtoa_r+0x94a>
 800bbd4:	2a00      	cmp	r2, #0
 800bbd6:	dd07      	ble.n	800bbe8 <_dtoa_r+0xad0>
 800bbd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbdc:	d0ed      	beq.n	800bbba <_dtoa_r+0xaa2>
 800bbde:	f10a 0301 	add.w	r3, sl, #1
 800bbe2:	f88b 3000 	strb.w	r3, [fp]
 800bbe6:	e73c      	b.n	800ba62 <_dtoa_r+0x94a>
 800bbe8:	9b05      	ldr	r3, [sp, #20]
 800bbea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbee:	4599      	cmp	r9, r3
 800bbf0:	d047      	beq.n	800bc82 <_dtoa_r+0xb6a>
 800bbf2:	ee18 1a10 	vmov	r1, s16
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 fc78 	bl	800c4f0 <__multadd>
 800bc00:	45b8      	cmp	r8, r7
 800bc02:	ee08 0a10 	vmov	s16, r0
 800bc06:	f04f 0300 	mov.w	r3, #0
 800bc0a:	f04f 020a 	mov.w	r2, #10
 800bc0e:	4641      	mov	r1, r8
 800bc10:	4620      	mov	r0, r4
 800bc12:	d106      	bne.n	800bc22 <_dtoa_r+0xb0a>
 800bc14:	f000 fc6c 	bl	800c4f0 <__multadd>
 800bc18:	4680      	mov	r8, r0
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f109 0901 	add.w	r9, r9, #1
 800bc20:	e772      	b.n	800bb08 <_dtoa_r+0x9f0>
 800bc22:	f000 fc65 	bl	800c4f0 <__multadd>
 800bc26:	4639      	mov	r1, r7
 800bc28:	4680      	mov	r8, r0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 fc5e 	bl	800c4f0 <__multadd>
 800bc34:	4607      	mov	r7, r0
 800bc36:	e7f1      	b.n	800bc1c <_dtoa_r+0xb04>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	9302      	str	r3, [sp, #8]
 800bc3c:	9d01      	ldr	r5, [sp, #4]
 800bc3e:	ee18 0a10 	vmov	r0, s16
 800bc42:	4631      	mov	r1, r6
 800bc44:	f7ff f9dc 	bl	800b000 <quorem>
 800bc48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc4c:	9b01      	ldr	r3, [sp, #4]
 800bc4e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc52:	1aea      	subs	r2, r5, r3
 800bc54:	9b02      	ldr	r3, [sp, #8]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	dd09      	ble.n	800bc6e <_dtoa_r+0xb56>
 800bc5a:	ee18 1a10 	vmov	r1, s16
 800bc5e:	2300      	movs	r3, #0
 800bc60:	220a      	movs	r2, #10
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 fc44 	bl	800c4f0 <__multadd>
 800bc68:	ee08 0a10 	vmov	s16, r0
 800bc6c:	e7e7      	b.n	800bc3e <_dtoa_r+0xb26>
 800bc6e:	9b02      	ldr	r3, [sp, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfc8      	it	gt
 800bc74:	461d      	movgt	r5, r3
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	bfd8      	it	le
 800bc7a:	2501      	movle	r5, #1
 800bc7c:	441d      	add	r5, r3
 800bc7e:	f04f 0800 	mov.w	r8, #0
 800bc82:	ee18 1a10 	vmov	r1, s16
 800bc86:	2201      	movs	r2, #1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fe2b 	bl	800c8e4 <__lshift>
 800bc8e:	4631      	mov	r1, r6
 800bc90:	ee08 0a10 	vmov	s16, r0
 800bc94:	f000 fe96 	bl	800c9c4 <__mcmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	dc91      	bgt.n	800bbc0 <_dtoa_r+0xaa8>
 800bc9c:	d102      	bne.n	800bca4 <_dtoa_r+0xb8c>
 800bc9e:	f01a 0f01 	tst.w	sl, #1
 800bca2:	d18d      	bne.n	800bbc0 <_dtoa_r+0xaa8>
 800bca4:	462b      	mov	r3, r5
 800bca6:	461d      	mov	r5, r3
 800bca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcac:	2a30      	cmp	r2, #48	; 0x30
 800bcae:	d0fa      	beq.n	800bca6 <_dtoa_r+0xb8e>
 800bcb0:	e6d7      	b.n	800ba62 <_dtoa_r+0x94a>
 800bcb2:	9a01      	ldr	r2, [sp, #4]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d184      	bne.n	800bbc2 <_dtoa_r+0xaaa>
 800bcb8:	9b00      	ldr	r3, [sp, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2331      	movs	r3, #49	; 0x31
 800bcc0:	7013      	strb	r3, [r2, #0]
 800bcc2:	e6ce      	b.n	800ba62 <_dtoa_r+0x94a>
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <_dtoa_r+0xbd4>)
 800bcc6:	f7ff ba95 	b.w	800b1f4 <_dtoa_r+0xdc>
 800bcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f47f aa6e 	bne.w	800b1ae <_dtoa_r+0x96>
 800bcd2:	4b07      	ldr	r3, [pc, #28]	; (800bcf0 <_dtoa_r+0xbd8>)
 800bcd4:	f7ff ba8e 	b.w	800b1f4 <_dtoa_r+0xdc>
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dcae      	bgt.n	800bc3c <_dtoa_r+0xb24>
 800bcde:	9b06      	ldr	r3, [sp, #24]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	f73f aea8 	bgt.w	800ba36 <_dtoa_r+0x91e>
 800bce6:	e7a9      	b.n	800bc3c <_dtoa_r+0xb24>
 800bce8:	0800e5c0 	.word	0x0800e5c0
 800bcec:	0800e3c0 	.word	0x0800e3c0
 800bcf0:	0800e541 	.word	0x0800e541

0800bcf4 <rshift>:
 800bcf4:	6903      	ldr	r3, [r0, #16]
 800bcf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd02:	f100 0414 	add.w	r4, r0, #20
 800bd06:	dd45      	ble.n	800bd94 <rshift+0xa0>
 800bd08:	f011 011f 	ands.w	r1, r1, #31
 800bd0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd14:	d10c      	bne.n	800bd30 <rshift+0x3c>
 800bd16:	f100 0710 	add.w	r7, r0, #16
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	42b1      	cmp	r1, r6
 800bd1e:	d334      	bcc.n	800bd8a <rshift+0x96>
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	1eea      	subs	r2, r5, #3
 800bd26:	4296      	cmp	r6, r2
 800bd28:	bf38      	it	cc
 800bd2a:	2300      	movcc	r3, #0
 800bd2c:	4423      	add	r3, r4
 800bd2e:	e015      	b.n	800bd5c <rshift+0x68>
 800bd30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd34:	f1c1 0820 	rsb	r8, r1, #32
 800bd38:	40cf      	lsrs	r7, r1
 800bd3a:	f105 0e04 	add.w	lr, r5, #4
 800bd3e:	46a1      	mov	r9, r4
 800bd40:	4576      	cmp	r6, lr
 800bd42:	46f4      	mov	ip, lr
 800bd44:	d815      	bhi.n	800bd72 <rshift+0x7e>
 800bd46:	1a9a      	subs	r2, r3, r2
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	3a04      	subs	r2, #4
 800bd4c:	3501      	adds	r5, #1
 800bd4e:	42ae      	cmp	r6, r5
 800bd50:	bf38      	it	cc
 800bd52:	2200      	movcc	r2, #0
 800bd54:	18a3      	adds	r3, r4, r2
 800bd56:	50a7      	str	r7, [r4, r2]
 800bd58:	b107      	cbz	r7, 800bd5c <rshift+0x68>
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	1b1a      	subs	r2, r3, r4
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd64:	bf08      	it	eq
 800bd66:	2300      	moveq	r3, #0
 800bd68:	6102      	str	r2, [r0, #16]
 800bd6a:	bf08      	it	eq
 800bd6c:	6143      	streq	r3, [r0, #20]
 800bd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd72:	f8dc c000 	ldr.w	ip, [ip]
 800bd76:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd7a:	ea4c 0707 	orr.w	r7, ip, r7
 800bd7e:	f849 7b04 	str.w	r7, [r9], #4
 800bd82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd86:	40cf      	lsrs	r7, r1
 800bd88:	e7da      	b.n	800bd40 <rshift+0x4c>
 800bd8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd92:	e7c3      	b.n	800bd1c <rshift+0x28>
 800bd94:	4623      	mov	r3, r4
 800bd96:	e7e1      	b.n	800bd5c <rshift+0x68>

0800bd98 <__hexdig_fun>:
 800bd98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d802      	bhi.n	800bda6 <__hexdig_fun+0xe>
 800bda0:	3820      	subs	r0, #32
 800bda2:	b2c0      	uxtb	r0, r0
 800bda4:	4770      	bx	lr
 800bda6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bdaa:	2b05      	cmp	r3, #5
 800bdac:	d801      	bhi.n	800bdb2 <__hexdig_fun+0x1a>
 800bdae:	3847      	subs	r0, #71	; 0x47
 800bdb0:	e7f7      	b.n	800bda2 <__hexdig_fun+0xa>
 800bdb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d801      	bhi.n	800bdbe <__hexdig_fun+0x26>
 800bdba:	3827      	subs	r0, #39	; 0x27
 800bdbc:	e7f1      	b.n	800bda2 <__hexdig_fun+0xa>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <__gethex>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	ed2d 8b02 	vpush	{d8}
 800bdcc:	b089      	sub	sp, #36	; 0x24
 800bdce:	ee08 0a10 	vmov	s16, r0
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	4bb4      	ldr	r3, [pc, #720]	; (800c0a8 <__gethex+0x2e4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	4618      	mov	r0, r3
 800bddc:	468b      	mov	fp, r1
 800bdde:	4690      	mov	r8, r2
 800bde0:	f7f4 fa16 	bl	8000210 <strlen>
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	f8db 2000 	ldr.w	r2, [fp]
 800bdea:	4403      	add	r3, r0
 800bdec:	4682      	mov	sl, r0
 800bdee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bdf2:	9305      	str	r3, [sp, #20]
 800bdf4:	1c93      	adds	r3, r2, #2
 800bdf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bdfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bdfe:	32fe      	adds	r2, #254	; 0xfe
 800be00:	18d1      	adds	r1, r2, r3
 800be02:	461f      	mov	r7, r3
 800be04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be08:	9100      	str	r1, [sp, #0]
 800be0a:	2830      	cmp	r0, #48	; 0x30
 800be0c:	d0f8      	beq.n	800be00 <__gethex+0x3c>
 800be0e:	f7ff ffc3 	bl	800bd98 <__hexdig_fun>
 800be12:	4604      	mov	r4, r0
 800be14:	2800      	cmp	r0, #0
 800be16:	d13a      	bne.n	800be8e <__gethex+0xca>
 800be18:	9901      	ldr	r1, [sp, #4]
 800be1a:	4652      	mov	r2, sl
 800be1c:	4638      	mov	r0, r7
 800be1e:	f001 fa33 	bl	800d288 <strncmp>
 800be22:	4605      	mov	r5, r0
 800be24:	2800      	cmp	r0, #0
 800be26:	d168      	bne.n	800befa <__gethex+0x136>
 800be28:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be2c:	eb07 060a 	add.w	r6, r7, sl
 800be30:	f7ff ffb2 	bl	800bd98 <__hexdig_fun>
 800be34:	2800      	cmp	r0, #0
 800be36:	d062      	beq.n	800befe <__gethex+0x13a>
 800be38:	4633      	mov	r3, r6
 800be3a:	7818      	ldrb	r0, [r3, #0]
 800be3c:	2830      	cmp	r0, #48	; 0x30
 800be3e:	461f      	mov	r7, r3
 800be40:	f103 0301 	add.w	r3, r3, #1
 800be44:	d0f9      	beq.n	800be3a <__gethex+0x76>
 800be46:	f7ff ffa7 	bl	800bd98 <__hexdig_fun>
 800be4a:	2301      	movs	r3, #1
 800be4c:	fab0 f480 	clz	r4, r0
 800be50:	0964      	lsrs	r4, r4, #5
 800be52:	4635      	mov	r5, r6
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	463a      	mov	r2, r7
 800be58:	4616      	mov	r6, r2
 800be5a:	3201      	adds	r2, #1
 800be5c:	7830      	ldrb	r0, [r6, #0]
 800be5e:	f7ff ff9b 	bl	800bd98 <__hexdig_fun>
 800be62:	2800      	cmp	r0, #0
 800be64:	d1f8      	bne.n	800be58 <__gethex+0x94>
 800be66:	9901      	ldr	r1, [sp, #4]
 800be68:	4652      	mov	r2, sl
 800be6a:	4630      	mov	r0, r6
 800be6c:	f001 fa0c 	bl	800d288 <strncmp>
 800be70:	b980      	cbnz	r0, 800be94 <__gethex+0xd0>
 800be72:	b94d      	cbnz	r5, 800be88 <__gethex+0xc4>
 800be74:	eb06 050a 	add.w	r5, r6, sl
 800be78:	462a      	mov	r2, r5
 800be7a:	4616      	mov	r6, r2
 800be7c:	3201      	adds	r2, #1
 800be7e:	7830      	ldrb	r0, [r6, #0]
 800be80:	f7ff ff8a 	bl	800bd98 <__hexdig_fun>
 800be84:	2800      	cmp	r0, #0
 800be86:	d1f8      	bne.n	800be7a <__gethex+0xb6>
 800be88:	1bad      	subs	r5, r5, r6
 800be8a:	00ad      	lsls	r5, r5, #2
 800be8c:	e004      	b.n	800be98 <__gethex+0xd4>
 800be8e:	2400      	movs	r4, #0
 800be90:	4625      	mov	r5, r4
 800be92:	e7e0      	b.n	800be56 <__gethex+0x92>
 800be94:	2d00      	cmp	r5, #0
 800be96:	d1f7      	bne.n	800be88 <__gethex+0xc4>
 800be98:	7833      	ldrb	r3, [r6, #0]
 800be9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be9e:	2b50      	cmp	r3, #80	; 0x50
 800bea0:	d13b      	bne.n	800bf1a <__gethex+0x156>
 800bea2:	7873      	ldrb	r3, [r6, #1]
 800bea4:	2b2b      	cmp	r3, #43	; 0x2b
 800bea6:	d02c      	beq.n	800bf02 <__gethex+0x13e>
 800bea8:	2b2d      	cmp	r3, #45	; 0x2d
 800beaa:	d02e      	beq.n	800bf0a <__gethex+0x146>
 800beac:	1c71      	adds	r1, r6, #1
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	7808      	ldrb	r0, [r1, #0]
 800beb4:	f7ff ff70 	bl	800bd98 <__hexdig_fun>
 800beb8:	1e43      	subs	r3, r0, #1
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b18      	cmp	r3, #24
 800bebe:	d82c      	bhi.n	800bf1a <__gethex+0x156>
 800bec0:	f1a0 0210 	sub.w	r2, r0, #16
 800bec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bec8:	f7ff ff66 	bl	800bd98 <__hexdig_fun>
 800becc:	1e43      	subs	r3, r0, #1
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b18      	cmp	r3, #24
 800bed2:	d91d      	bls.n	800bf10 <__gethex+0x14c>
 800bed4:	f1b9 0f00 	cmp.w	r9, #0
 800bed8:	d000      	beq.n	800bedc <__gethex+0x118>
 800beda:	4252      	negs	r2, r2
 800bedc:	4415      	add	r5, r2
 800bede:	f8cb 1000 	str.w	r1, [fp]
 800bee2:	b1e4      	cbz	r4, 800bf1e <__gethex+0x15a>
 800bee4:	9b00      	ldr	r3, [sp, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bf14      	ite	ne
 800beea:	2700      	movne	r7, #0
 800beec:	2706      	moveq	r7, #6
 800beee:	4638      	mov	r0, r7
 800bef0:	b009      	add	sp, #36	; 0x24
 800bef2:	ecbd 8b02 	vpop	{d8}
 800bef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befa:	463e      	mov	r6, r7
 800befc:	4625      	mov	r5, r4
 800befe:	2401      	movs	r4, #1
 800bf00:	e7ca      	b.n	800be98 <__gethex+0xd4>
 800bf02:	f04f 0900 	mov.w	r9, #0
 800bf06:	1cb1      	adds	r1, r6, #2
 800bf08:	e7d3      	b.n	800beb2 <__gethex+0xee>
 800bf0a:	f04f 0901 	mov.w	r9, #1
 800bf0e:	e7fa      	b.n	800bf06 <__gethex+0x142>
 800bf10:	230a      	movs	r3, #10
 800bf12:	fb03 0202 	mla	r2, r3, r2, r0
 800bf16:	3a10      	subs	r2, #16
 800bf18:	e7d4      	b.n	800bec4 <__gethex+0x100>
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	e7df      	b.n	800bede <__gethex+0x11a>
 800bf1e:	1bf3      	subs	r3, r6, r7
 800bf20:	3b01      	subs	r3, #1
 800bf22:	4621      	mov	r1, r4
 800bf24:	2b07      	cmp	r3, #7
 800bf26:	dc0b      	bgt.n	800bf40 <__gethex+0x17c>
 800bf28:	ee18 0a10 	vmov	r0, s16
 800bf2c:	f000 fa7e 	bl	800c42c <_Balloc>
 800bf30:	4604      	mov	r4, r0
 800bf32:	b940      	cbnz	r0, 800bf46 <__gethex+0x182>
 800bf34:	4b5d      	ldr	r3, [pc, #372]	; (800c0ac <__gethex+0x2e8>)
 800bf36:	4602      	mov	r2, r0
 800bf38:	21de      	movs	r1, #222	; 0xde
 800bf3a:	485d      	ldr	r0, [pc, #372]	; (800c0b0 <__gethex+0x2ec>)
 800bf3c:	f001 f9c6 	bl	800d2cc <__assert_func>
 800bf40:	3101      	adds	r1, #1
 800bf42:	105b      	asrs	r3, r3, #1
 800bf44:	e7ee      	b.n	800bf24 <__gethex+0x160>
 800bf46:	f100 0914 	add.w	r9, r0, #20
 800bf4a:	f04f 0b00 	mov.w	fp, #0
 800bf4e:	f1ca 0301 	rsb	r3, sl, #1
 800bf52:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf56:	f8cd b000 	str.w	fp, [sp]
 800bf5a:	9306      	str	r3, [sp, #24]
 800bf5c:	42b7      	cmp	r7, r6
 800bf5e:	d340      	bcc.n	800bfe2 <__gethex+0x21e>
 800bf60:	9802      	ldr	r0, [sp, #8]
 800bf62:	9b00      	ldr	r3, [sp, #0]
 800bf64:	f840 3b04 	str.w	r3, [r0], #4
 800bf68:	eba0 0009 	sub.w	r0, r0, r9
 800bf6c:	1080      	asrs	r0, r0, #2
 800bf6e:	0146      	lsls	r6, r0, #5
 800bf70:	6120      	str	r0, [r4, #16]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fb4c 	bl	800c610 <__hi0bits>
 800bf78:	1a30      	subs	r0, r6, r0
 800bf7a:	f8d8 6000 	ldr.w	r6, [r8]
 800bf7e:	42b0      	cmp	r0, r6
 800bf80:	dd63      	ble.n	800c04a <__gethex+0x286>
 800bf82:	1b87      	subs	r7, r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fef0 	bl	800cd6c <__any_on>
 800bf8c:	4682      	mov	sl, r0
 800bf8e:	b1a8      	cbz	r0, 800bfbc <__gethex+0x1f8>
 800bf90:	1e7b      	subs	r3, r7, #1
 800bf92:	1159      	asrs	r1, r3, #5
 800bf94:	f003 021f 	and.w	r2, r3, #31
 800bf98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf9c:	f04f 0a01 	mov.w	sl, #1
 800bfa0:	fa0a f202 	lsl.w	r2, sl, r2
 800bfa4:	420a      	tst	r2, r1
 800bfa6:	d009      	beq.n	800bfbc <__gethex+0x1f8>
 800bfa8:	4553      	cmp	r3, sl
 800bfaa:	dd05      	ble.n	800bfb8 <__gethex+0x1f4>
 800bfac:	1eb9      	subs	r1, r7, #2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 fedc 	bl	800cd6c <__any_on>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d145      	bne.n	800c044 <__gethex+0x280>
 800bfb8:	f04f 0a02 	mov.w	sl, #2
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f7ff fe98 	bl	800bcf4 <rshift>
 800bfc4:	443d      	add	r5, r7
 800bfc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfca:	42ab      	cmp	r3, r5
 800bfcc:	da4c      	bge.n	800c068 <__gethex+0x2a4>
 800bfce:	ee18 0a10 	vmov	r0, s16
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f000 fa6a 	bl	800c4ac <_Bfree>
 800bfd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfda:	2300      	movs	r3, #0
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	27a3      	movs	r7, #163	; 0xa3
 800bfe0:	e785      	b.n	800beee <__gethex+0x12a>
 800bfe2:	1e73      	subs	r3, r6, #1
 800bfe4:	9a05      	ldr	r2, [sp, #20]
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d019      	beq.n	800c024 <__gethex+0x260>
 800bff0:	f1bb 0f20 	cmp.w	fp, #32
 800bff4:	d107      	bne.n	800c006 <__gethex+0x242>
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	9a00      	ldr	r2, [sp, #0]
 800bffa:	f843 2b04 	str.w	r2, [r3], #4
 800bffe:	9302      	str	r3, [sp, #8]
 800c000:	2300      	movs	r3, #0
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	469b      	mov	fp, r3
 800c006:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c00a:	f7ff fec5 	bl	800bd98 <__hexdig_fun>
 800c00e:	9b00      	ldr	r3, [sp, #0]
 800c010:	f000 000f 	and.w	r0, r0, #15
 800c014:	fa00 f00b 	lsl.w	r0, r0, fp
 800c018:	4303      	orrs	r3, r0
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	f10b 0b04 	add.w	fp, fp, #4
 800c020:	9b03      	ldr	r3, [sp, #12]
 800c022:	e00d      	b.n	800c040 <__gethex+0x27c>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	9a06      	ldr	r2, [sp, #24]
 800c028:	4413      	add	r3, r2
 800c02a:	42bb      	cmp	r3, r7
 800c02c:	d3e0      	bcc.n	800bff0 <__gethex+0x22c>
 800c02e:	4618      	mov	r0, r3
 800c030:	9901      	ldr	r1, [sp, #4]
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	4652      	mov	r2, sl
 800c036:	f001 f927 	bl	800d288 <strncmp>
 800c03a:	9b07      	ldr	r3, [sp, #28]
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d1d7      	bne.n	800bff0 <__gethex+0x22c>
 800c040:	461e      	mov	r6, r3
 800c042:	e78b      	b.n	800bf5c <__gethex+0x198>
 800c044:	f04f 0a03 	mov.w	sl, #3
 800c048:	e7b8      	b.n	800bfbc <__gethex+0x1f8>
 800c04a:	da0a      	bge.n	800c062 <__gethex+0x29e>
 800c04c:	1a37      	subs	r7, r6, r0
 800c04e:	4621      	mov	r1, r4
 800c050:	ee18 0a10 	vmov	r0, s16
 800c054:	463a      	mov	r2, r7
 800c056:	f000 fc45 	bl	800c8e4 <__lshift>
 800c05a:	1bed      	subs	r5, r5, r7
 800c05c:	4604      	mov	r4, r0
 800c05e:	f100 0914 	add.w	r9, r0, #20
 800c062:	f04f 0a00 	mov.w	sl, #0
 800c066:	e7ae      	b.n	800bfc6 <__gethex+0x202>
 800c068:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c06c:	42a8      	cmp	r0, r5
 800c06e:	dd72      	ble.n	800c156 <__gethex+0x392>
 800c070:	1b45      	subs	r5, r0, r5
 800c072:	42ae      	cmp	r6, r5
 800c074:	dc36      	bgt.n	800c0e4 <__gethex+0x320>
 800c076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d02a      	beq.n	800c0d4 <__gethex+0x310>
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d02c      	beq.n	800c0dc <__gethex+0x318>
 800c082:	2b01      	cmp	r3, #1
 800c084:	d11c      	bne.n	800c0c0 <__gethex+0x2fc>
 800c086:	42ae      	cmp	r6, r5
 800c088:	d11a      	bne.n	800c0c0 <__gethex+0x2fc>
 800c08a:	2e01      	cmp	r6, #1
 800c08c:	d112      	bne.n	800c0b4 <__gethex+0x2f0>
 800c08e:	9a04      	ldr	r2, [sp, #16]
 800c090:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	2301      	movs	r3, #1
 800c098:	6123      	str	r3, [r4, #16]
 800c09a:	f8c9 3000 	str.w	r3, [r9]
 800c09e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0a0:	2762      	movs	r7, #98	; 0x62
 800c0a2:	601c      	str	r4, [r3, #0]
 800c0a4:	e723      	b.n	800beee <__gethex+0x12a>
 800c0a6:	bf00      	nop
 800c0a8:	0800e638 	.word	0x0800e638
 800c0ac:	0800e5c0 	.word	0x0800e5c0
 800c0b0:	0800e5d1 	.word	0x0800e5d1
 800c0b4:	1e71      	subs	r1, r6, #1
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fe58 	bl	800cd6c <__any_on>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e6      	bne.n	800c08e <__gethex+0x2ca>
 800c0c0:	ee18 0a10 	vmov	r0, s16
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	f000 f9f1 	bl	800c4ac <_Bfree>
 800c0ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	2750      	movs	r7, #80	; 0x50
 800c0d2:	e70c      	b.n	800beee <__gethex+0x12a>
 800c0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f2      	bne.n	800c0c0 <__gethex+0x2fc>
 800c0da:	e7d8      	b.n	800c08e <__gethex+0x2ca>
 800c0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1d5      	bne.n	800c08e <__gethex+0x2ca>
 800c0e2:	e7ed      	b.n	800c0c0 <__gethex+0x2fc>
 800c0e4:	1e6f      	subs	r7, r5, #1
 800c0e6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ea:	d131      	bne.n	800c150 <__gethex+0x38c>
 800c0ec:	b127      	cbz	r7, 800c0f8 <__gethex+0x334>
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f000 fe3b 	bl	800cd6c <__any_on>
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	117b      	asrs	r3, r7, #5
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c100:	f007 071f 	and.w	r7, r7, #31
 800c104:	fa01 f707 	lsl.w	r7, r1, r7
 800c108:	421f      	tst	r7, r3
 800c10a:	4629      	mov	r1, r5
 800c10c:	4620      	mov	r0, r4
 800c10e:	bf18      	it	ne
 800c110:	f04a 0a02 	orrne.w	sl, sl, #2
 800c114:	1b76      	subs	r6, r6, r5
 800c116:	f7ff fded 	bl	800bcf4 <rshift>
 800c11a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c11e:	2702      	movs	r7, #2
 800c120:	f1ba 0f00 	cmp.w	sl, #0
 800c124:	d048      	beq.n	800c1b8 <__gethex+0x3f4>
 800c126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d015      	beq.n	800c15a <__gethex+0x396>
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d017      	beq.n	800c162 <__gethex+0x39e>
 800c132:	2b01      	cmp	r3, #1
 800c134:	d109      	bne.n	800c14a <__gethex+0x386>
 800c136:	f01a 0f02 	tst.w	sl, #2
 800c13a:	d006      	beq.n	800c14a <__gethex+0x386>
 800c13c:	f8d9 0000 	ldr.w	r0, [r9]
 800c140:	ea4a 0a00 	orr.w	sl, sl, r0
 800c144:	f01a 0f01 	tst.w	sl, #1
 800c148:	d10e      	bne.n	800c168 <__gethex+0x3a4>
 800c14a:	f047 0710 	orr.w	r7, r7, #16
 800c14e:	e033      	b.n	800c1b8 <__gethex+0x3f4>
 800c150:	f04f 0a01 	mov.w	sl, #1
 800c154:	e7d0      	b.n	800c0f8 <__gethex+0x334>
 800c156:	2701      	movs	r7, #1
 800c158:	e7e2      	b.n	800c120 <__gethex+0x35c>
 800c15a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c15c:	f1c3 0301 	rsb	r3, r3, #1
 800c160:	9315      	str	r3, [sp, #84]	; 0x54
 800c162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c164:	2b00      	cmp	r3, #0
 800c166:	d0f0      	beq.n	800c14a <__gethex+0x386>
 800c168:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c16c:	f104 0314 	add.w	r3, r4, #20
 800c170:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c174:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c178:	f04f 0c00 	mov.w	ip, #0
 800c17c:	4618      	mov	r0, r3
 800c17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c182:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c186:	d01c      	beq.n	800c1c2 <__gethex+0x3fe>
 800c188:	3201      	adds	r2, #1
 800c18a:	6002      	str	r2, [r0, #0]
 800c18c:	2f02      	cmp	r7, #2
 800c18e:	f104 0314 	add.w	r3, r4, #20
 800c192:	d13f      	bne.n	800c214 <__gethex+0x450>
 800c194:	f8d8 2000 	ldr.w	r2, [r8]
 800c198:	3a01      	subs	r2, #1
 800c19a:	42b2      	cmp	r2, r6
 800c19c:	d10a      	bne.n	800c1b4 <__gethex+0x3f0>
 800c19e:	1171      	asrs	r1, r6, #5
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1a6:	f006 061f 	and.w	r6, r6, #31
 800c1aa:	fa02 f606 	lsl.w	r6, r2, r6
 800c1ae:	421e      	tst	r6, r3
 800c1b0:	bf18      	it	ne
 800c1b2:	4617      	movne	r7, r2
 800c1b4:	f047 0720 	orr.w	r7, r7, #32
 800c1b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ba:	601c      	str	r4, [r3, #0]
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	601d      	str	r5, [r3, #0]
 800c1c0:	e695      	b.n	800beee <__gethex+0x12a>
 800c1c2:	4299      	cmp	r1, r3
 800c1c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1c8:	d8d8      	bhi.n	800c17c <__gethex+0x3b8>
 800c1ca:	68a3      	ldr	r3, [r4, #8]
 800c1cc:	459b      	cmp	fp, r3
 800c1ce:	db19      	blt.n	800c204 <__gethex+0x440>
 800c1d0:	6861      	ldr	r1, [r4, #4]
 800c1d2:	ee18 0a10 	vmov	r0, s16
 800c1d6:	3101      	adds	r1, #1
 800c1d8:	f000 f928 	bl	800c42c <_Balloc>
 800c1dc:	4681      	mov	r9, r0
 800c1de:	b918      	cbnz	r0, 800c1e8 <__gethex+0x424>
 800c1e0:	4b1a      	ldr	r3, [pc, #104]	; (800c24c <__gethex+0x488>)
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	2184      	movs	r1, #132	; 0x84
 800c1e6:	e6a8      	b.n	800bf3a <__gethex+0x176>
 800c1e8:	6922      	ldr	r2, [r4, #16]
 800c1ea:	3202      	adds	r2, #2
 800c1ec:	f104 010c 	add.w	r1, r4, #12
 800c1f0:	0092      	lsls	r2, r2, #2
 800c1f2:	300c      	adds	r0, #12
 800c1f4:	f000 f90c 	bl	800c410 <memcpy>
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	ee18 0a10 	vmov	r0, s16
 800c1fe:	f000 f955 	bl	800c4ac <_Bfree>
 800c202:	464c      	mov	r4, r9
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c20c:	6122      	str	r2, [r4, #16]
 800c20e:	2201      	movs	r2, #1
 800c210:	615a      	str	r2, [r3, #20]
 800c212:	e7bb      	b.n	800c18c <__gethex+0x3c8>
 800c214:	6922      	ldr	r2, [r4, #16]
 800c216:	455a      	cmp	r2, fp
 800c218:	dd0b      	ble.n	800c232 <__gethex+0x46e>
 800c21a:	2101      	movs	r1, #1
 800c21c:	4620      	mov	r0, r4
 800c21e:	f7ff fd69 	bl	800bcf4 <rshift>
 800c222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c226:	3501      	adds	r5, #1
 800c228:	42ab      	cmp	r3, r5
 800c22a:	f6ff aed0 	blt.w	800bfce <__gethex+0x20a>
 800c22e:	2701      	movs	r7, #1
 800c230:	e7c0      	b.n	800c1b4 <__gethex+0x3f0>
 800c232:	f016 061f 	ands.w	r6, r6, #31
 800c236:	d0fa      	beq.n	800c22e <__gethex+0x46a>
 800c238:	4453      	add	r3, sl
 800c23a:	f1c6 0620 	rsb	r6, r6, #32
 800c23e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c242:	f000 f9e5 	bl	800c610 <__hi0bits>
 800c246:	42b0      	cmp	r0, r6
 800c248:	dbe7      	blt.n	800c21a <__gethex+0x456>
 800c24a:	e7f0      	b.n	800c22e <__gethex+0x46a>
 800c24c:	0800e5c0 	.word	0x0800e5c0

0800c250 <L_shift>:
 800c250:	f1c2 0208 	rsb	r2, r2, #8
 800c254:	0092      	lsls	r2, r2, #2
 800c256:	b570      	push	{r4, r5, r6, lr}
 800c258:	f1c2 0620 	rsb	r6, r2, #32
 800c25c:	6843      	ldr	r3, [r0, #4]
 800c25e:	6804      	ldr	r4, [r0, #0]
 800c260:	fa03 f506 	lsl.w	r5, r3, r6
 800c264:	432c      	orrs	r4, r5
 800c266:	40d3      	lsrs	r3, r2
 800c268:	6004      	str	r4, [r0, #0]
 800c26a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c26e:	4288      	cmp	r0, r1
 800c270:	d3f4      	bcc.n	800c25c <L_shift+0xc>
 800c272:	bd70      	pop	{r4, r5, r6, pc}

0800c274 <__match>:
 800c274:	b530      	push	{r4, r5, lr}
 800c276:	6803      	ldr	r3, [r0, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c27e:	b914      	cbnz	r4, 800c286 <__match+0x12>
 800c280:	6003      	str	r3, [r0, #0]
 800c282:	2001      	movs	r0, #1
 800c284:	bd30      	pop	{r4, r5, pc}
 800c286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c28e:	2d19      	cmp	r5, #25
 800c290:	bf98      	it	ls
 800c292:	3220      	addls	r2, #32
 800c294:	42a2      	cmp	r2, r4
 800c296:	d0f0      	beq.n	800c27a <__match+0x6>
 800c298:	2000      	movs	r0, #0
 800c29a:	e7f3      	b.n	800c284 <__match+0x10>

0800c29c <__hexnan>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	680b      	ldr	r3, [r1, #0]
 800c2a2:	115e      	asrs	r6, r3, #5
 800c2a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2a8:	f013 031f 	ands.w	r3, r3, #31
 800c2ac:	b087      	sub	sp, #28
 800c2ae:	bf18      	it	ne
 800c2b0:	3604      	addne	r6, #4
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	1f37      	subs	r7, r6, #4
 800c2b6:	4690      	mov	r8, r2
 800c2b8:	6802      	ldr	r2, [r0, #0]
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	4682      	mov	sl, r0
 800c2be:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2c2:	46b9      	mov	r9, r7
 800c2c4:	463c      	mov	r4, r7
 800c2c6:	9502      	str	r5, [sp, #8]
 800c2c8:	46ab      	mov	fp, r5
 800c2ca:	7851      	ldrb	r1, [r2, #1]
 800c2cc:	1c53      	adds	r3, r2, #1
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	b341      	cbz	r1, 800c324 <__hexnan+0x88>
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	9205      	str	r2, [sp, #20]
 800c2d6:	9104      	str	r1, [sp, #16]
 800c2d8:	f7ff fd5e 	bl	800bd98 <__hexdig_fun>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d14f      	bne.n	800c380 <__hexnan+0xe4>
 800c2e0:	9904      	ldr	r1, [sp, #16]
 800c2e2:	9a05      	ldr	r2, [sp, #20]
 800c2e4:	2920      	cmp	r1, #32
 800c2e6:	d818      	bhi.n	800c31a <__hexnan+0x7e>
 800c2e8:	9b02      	ldr	r3, [sp, #8]
 800c2ea:	459b      	cmp	fp, r3
 800c2ec:	dd13      	ble.n	800c316 <__hexnan+0x7a>
 800c2ee:	454c      	cmp	r4, r9
 800c2f0:	d206      	bcs.n	800c300 <__hexnan+0x64>
 800c2f2:	2d07      	cmp	r5, #7
 800c2f4:	dc04      	bgt.n	800c300 <__hexnan+0x64>
 800c2f6:	462a      	mov	r2, r5
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f7ff ffa8 	bl	800c250 <L_shift>
 800c300:	4544      	cmp	r4, r8
 800c302:	d950      	bls.n	800c3a6 <__hexnan+0x10a>
 800c304:	2300      	movs	r3, #0
 800c306:	f1a4 0904 	sub.w	r9, r4, #4
 800c30a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c30e:	f8cd b008 	str.w	fp, [sp, #8]
 800c312:	464c      	mov	r4, r9
 800c314:	461d      	mov	r5, r3
 800c316:	9a03      	ldr	r2, [sp, #12]
 800c318:	e7d7      	b.n	800c2ca <__hexnan+0x2e>
 800c31a:	2929      	cmp	r1, #41	; 0x29
 800c31c:	d156      	bne.n	800c3cc <__hexnan+0x130>
 800c31e:	3202      	adds	r2, #2
 800c320:	f8ca 2000 	str.w	r2, [sl]
 800c324:	f1bb 0f00 	cmp.w	fp, #0
 800c328:	d050      	beq.n	800c3cc <__hexnan+0x130>
 800c32a:	454c      	cmp	r4, r9
 800c32c:	d206      	bcs.n	800c33c <__hexnan+0xa0>
 800c32e:	2d07      	cmp	r5, #7
 800c330:	dc04      	bgt.n	800c33c <__hexnan+0xa0>
 800c332:	462a      	mov	r2, r5
 800c334:	4649      	mov	r1, r9
 800c336:	4620      	mov	r0, r4
 800c338:	f7ff ff8a 	bl	800c250 <L_shift>
 800c33c:	4544      	cmp	r4, r8
 800c33e:	d934      	bls.n	800c3aa <__hexnan+0x10e>
 800c340:	f1a8 0204 	sub.w	r2, r8, #4
 800c344:	4623      	mov	r3, r4
 800c346:	f853 1b04 	ldr.w	r1, [r3], #4
 800c34a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c34e:	429f      	cmp	r7, r3
 800c350:	d2f9      	bcs.n	800c346 <__hexnan+0xaa>
 800c352:	1b3b      	subs	r3, r7, r4
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	3304      	adds	r3, #4
 800c35a:	3401      	adds	r4, #1
 800c35c:	3e03      	subs	r6, #3
 800c35e:	42b4      	cmp	r4, r6
 800c360:	bf88      	it	hi
 800c362:	2304      	movhi	r3, #4
 800c364:	4443      	add	r3, r8
 800c366:	2200      	movs	r2, #0
 800c368:	f843 2b04 	str.w	r2, [r3], #4
 800c36c:	429f      	cmp	r7, r3
 800c36e:	d2fb      	bcs.n	800c368 <__hexnan+0xcc>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	b91b      	cbnz	r3, 800c37c <__hexnan+0xe0>
 800c374:	4547      	cmp	r7, r8
 800c376:	d127      	bne.n	800c3c8 <__hexnan+0x12c>
 800c378:	2301      	movs	r3, #1
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	2005      	movs	r0, #5
 800c37e:	e026      	b.n	800c3ce <__hexnan+0x132>
 800c380:	3501      	adds	r5, #1
 800c382:	2d08      	cmp	r5, #8
 800c384:	f10b 0b01 	add.w	fp, fp, #1
 800c388:	dd06      	ble.n	800c398 <__hexnan+0xfc>
 800c38a:	4544      	cmp	r4, r8
 800c38c:	d9c3      	bls.n	800c316 <__hexnan+0x7a>
 800c38e:	2300      	movs	r3, #0
 800c390:	f844 3c04 	str.w	r3, [r4, #-4]
 800c394:	2501      	movs	r5, #1
 800c396:	3c04      	subs	r4, #4
 800c398:	6822      	ldr	r2, [r4, #0]
 800c39a:	f000 000f 	and.w	r0, r0, #15
 800c39e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c3a2:	6022      	str	r2, [r4, #0]
 800c3a4:	e7b7      	b.n	800c316 <__hexnan+0x7a>
 800c3a6:	2508      	movs	r5, #8
 800c3a8:	e7b5      	b.n	800c316 <__hexnan+0x7a>
 800c3aa:	9b01      	ldr	r3, [sp, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0df      	beq.n	800c370 <__hexnan+0xd4>
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b4:	f1c3 0320 	rsb	r3, r3, #32
 800c3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3c0:	401a      	ands	r2, r3
 800c3c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c3c6:	e7d3      	b.n	800c370 <__hexnan+0xd4>
 800c3c8:	3f04      	subs	r7, #4
 800c3ca:	e7d1      	b.n	800c370 <__hexnan+0xd4>
 800c3cc:	2004      	movs	r0, #4
 800c3ce:	b007      	add	sp, #28
 800c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3d4 <_localeconv_r>:
 800c3d4:	4800      	ldr	r0, [pc, #0]	; (800c3d8 <_localeconv_r+0x4>)
 800c3d6:	4770      	bx	lr
 800c3d8:	20000194 	.word	0x20000194

0800c3dc <malloc>:
 800c3dc:	4b02      	ldr	r3, [pc, #8]	; (800c3e8 <malloc+0xc>)
 800c3de:	4601      	mov	r1, r0
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	f000 bd67 	b.w	800ceb4 <_malloc_r>
 800c3e6:	bf00      	nop
 800c3e8:	2000003c 	.word	0x2000003c

0800c3ec <__ascii_mbtowc>:
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	b901      	cbnz	r1, 800c3f2 <__ascii_mbtowc+0x6>
 800c3f0:	a901      	add	r1, sp, #4
 800c3f2:	b142      	cbz	r2, 800c406 <__ascii_mbtowc+0x1a>
 800c3f4:	b14b      	cbz	r3, 800c40a <__ascii_mbtowc+0x1e>
 800c3f6:	7813      	ldrb	r3, [r2, #0]
 800c3f8:	600b      	str	r3, [r1, #0]
 800c3fa:	7812      	ldrb	r2, [r2, #0]
 800c3fc:	1e10      	subs	r0, r2, #0
 800c3fe:	bf18      	it	ne
 800c400:	2001      	movne	r0, #1
 800c402:	b002      	add	sp, #8
 800c404:	4770      	bx	lr
 800c406:	4610      	mov	r0, r2
 800c408:	e7fb      	b.n	800c402 <__ascii_mbtowc+0x16>
 800c40a:	f06f 0001 	mvn.w	r0, #1
 800c40e:	e7f8      	b.n	800c402 <__ascii_mbtowc+0x16>

0800c410 <memcpy>:
 800c410:	440a      	add	r2, r1
 800c412:	4291      	cmp	r1, r2
 800c414:	f100 33ff 	add.w	r3, r0, #4294967295
 800c418:	d100      	bne.n	800c41c <memcpy+0xc>
 800c41a:	4770      	bx	lr
 800c41c:	b510      	push	{r4, lr}
 800c41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c426:	4291      	cmp	r1, r2
 800c428:	d1f9      	bne.n	800c41e <memcpy+0xe>
 800c42a:	bd10      	pop	{r4, pc}

0800c42c <_Balloc>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c430:	4604      	mov	r4, r0
 800c432:	460d      	mov	r5, r1
 800c434:	b976      	cbnz	r6, 800c454 <_Balloc+0x28>
 800c436:	2010      	movs	r0, #16
 800c438:	f7ff ffd0 	bl	800c3dc <malloc>
 800c43c:	4602      	mov	r2, r0
 800c43e:	6260      	str	r0, [r4, #36]	; 0x24
 800c440:	b920      	cbnz	r0, 800c44c <_Balloc+0x20>
 800c442:	4b18      	ldr	r3, [pc, #96]	; (800c4a4 <_Balloc+0x78>)
 800c444:	4818      	ldr	r0, [pc, #96]	; (800c4a8 <_Balloc+0x7c>)
 800c446:	2166      	movs	r1, #102	; 0x66
 800c448:	f000 ff40 	bl	800d2cc <__assert_func>
 800c44c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c450:	6006      	str	r6, [r0, #0]
 800c452:	60c6      	str	r6, [r0, #12]
 800c454:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c456:	68f3      	ldr	r3, [r6, #12]
 800c458:	b183      	cbz	r3, 800c47c <_Balloc+0x50>
 800c45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c462:	b9b8      	cbnz	r0, 800c494 <_Balloc+0x68>
 800c464:	2101      	movs	r1, #1
 800c466:	fa01 f605 	lsl.w	r6, r1, r5
 800c46a:	1d72      	adds	r2, r6, #5
 800c46c:	0092      	lsls	r2, r2, #2
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fc9d 	bl	800cdae <_calloc_r>
 800c474:	b160      	cbz	r0, 800c490 <_Balloc+0x64>
 800c476:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c47a:	e00e      	b.n	800c49a <_Balloc+0x6e>
 800c47c:	2221      	movs	r2, #33	; 0x21
 800c47e:	2104      	movs	r1, #4
 800c480:	4620      	mov	r0, r4
 800c482:	f000 fc94 	bl	800cdae <_calloc_r>
 800c486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c488:	60f0      	str	r0, [r6, #12]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e4      	bne.n	800c45a <_Balloc+0x2e>
 800c490:	2000      	movs	r0, #0
 800c492:	bd70      	pop	{r4, r5, r6, pc}
 800c494:	6802      	ldr	r2, [r0, #0]
 800c496:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c49a:	2300      	movs	r3, #0
 800c49c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4a0:	e7f7      	b.n	800c492 <_Balloc+0x66>
 800c4a2:	bf00      	nop
 800c4a4:	0800e54e 	.word	0x0800e54e
 800c4a8:	0800e64c 	.word	0x0800e64c

0800c4ac <_Bfree>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	b976      	cbnz	r6, 800c4d4 <_Bfree+0x28>
 800c4b6:	2010      	movs	r0, #16
 800c4b8:	f7ff ff90 	bl	800c3dc <malloc>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	6268      	str	r0, [r5, #36]	; 0x24
 800c4c0:	b920      	cbnz	r0, 800c4cc <_Bfree+0x20>
 800c4c2:	4b09      	ldr	r3, [pc, #36]	; (800c4e8 <_Bfree+0x3c>)
 800c4c4:	4809      	ldr	r0, [pc, #36]	; (800c4ec <_Bfree+0x40>)
 800c4c6:	218a      	movs	r1, #138	; 0x8a
 800c4c8:	f000 ff00 	bl	800d2cc <__assert_func>
 800c4cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d0:	6006      	str	r6, [r0, #0]
 800c4d2:	60c6      	str	r6, [r0, #12]
 800c4d4:	b13c      	cbz	r4, 800c4e6 <_Bfree+0x3a>
 800c4d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4d8:	6862      	ldr	r2, [r4, #4]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4e0:	6021      	str	r1, [r4, #0]
 800c4e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	0800e54e 	.word	0x0800e54e
 800c4ec:	0800e64c 	.word	0x0800e64c

0800c4f0 <__multadd>:
 800c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f4:	690d      	ldr	r5, [r1, #16]
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	461e      	mov	r6, r3
 800c4fc:	f101 0c14 	add.w	ip, r1, #20
 800c500:	2000      	movs	r0, #0
 800c502:	f8dc 3000 	ldr.w	r3, [ip]
 800c506:	b299      	uxth	r1, r3
 800c508:	fb02 6101 	mla	r1, r2, r1, r6
 800c50c:	0c1e      	lsrs	r6, r3, #16
 800c50e:	0c0b      	lsrs	r3, r1, #16
 800c510:	fb02 3306 	mla	r3, r2, r6, r3
 800c514:	b289      	uxth	r1, r1
 800c516:	3001      	adds	r0, #1
 800c518:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c51c:	4285      	cmp	r5, r0
 800c51e:	f84c 1b04 	str.w	r1, [ip], #4
 800c522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c526:	dcec      	bgt.n	800c502 <__multadd+0x12>
 800c528:	b30e      	cbz	r6, 800c56e <__multadd+0x7e>
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	42ab      	cmp	r3, r5
 800c52e:	dc19      	bgt.n	800c564 <__multadd+0x74>
 800c530:	6861      	ldr	r1, [r4, #4]
 800c532:	4638      	mov	r0, r7
 800c534:	3101      	adds	r1, #1
 800c536:	f7ff ff79 	bl	800c42c <_Balloc>
 800c53a:	4680      	mov	r8, r0
 800c53c:	b928      	cbnz	r0, 800c54a <__multadd+0x5a>
 800c53e:	4602      	mov	r2, r0
 800c540:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <__multadd+0x84>)
 800c542:	480d      	ldr	r0, [pc, #52]	; (800c578 <__multadd+0x88>)
 800c544:	21b5      	movs	r1, #181	; 0xb5
 800c546:	f000 fec1 	bl	800d2cc <__assert_func>
 800c54a:	6922      	ldr	r2, [r4, #16]
 800c54c:	3202      	adds	r2, #2
 800c54e:	f104 010c 	add.w	r1, r4, #12
 800c552:	0092      	lsls	r2, r2, #2
 800c554:	300c      	adds	r0, #12
 800c556:	f7ff ff5b 	bl	800c410 <memcpy>
 800c55a:	4621      	mov	r1, r4
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7ff ffa5 	bl	800c4ac <_Bfree>
 800c562:	4644      	mov	r4, r8
 800c564:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c568:	3501      	adds	r5, #1
 800c56a:	615e      	str	r6, [r3, #20]
 800c56c:	6125      	str	r5, [r4, #16]
 800c56e:	4620      	mov	r0, r4
 800c570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c574:	0800e5c0 	.word	0x0800e5c0
 800c578:	0800e64c 	.word	0x0800e64c

0800c57c <__s2b>:
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	460c      	mov	r4, r1
 800c582:	4615      	mov	r5, r2
 800c584:	461f      	mov	r7, r3
 800c586:	2209      	movs	r2, #9
 800c588:	3308      	adds	r3, #8
 800c58a:	4606      	mov	r6, r0
 800c58c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c590:	2100      	movs	r1, #0
 800c592:	2201      	movs	r2, #1
 800c594:	429a      	cmp	r2, r3
 800c596:	db09      	blt.n	800c5ac <__s2b+0x30>
 800c598:	4630      	mov	r0, r6
 800c59a:	f7ff ff47 	bl	800c42c <_Balloc>
 800c59e:	b940      	cbnz	r0, 800c5b2 <__s2b+0x36>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4b19      	ldr	r3, [pc, #100]	; (800c608 <__s2b+0x8c>)
 800c5a4:	4819      	ldr	r0, [pc, #100]	; (800c60c <__s2b+0x90>)
 800c5a6:	21ce      	movs	r1, #206	; 0xce
 800c5a8:	f000 fe90 	bl	800d2cc <__assert_func>
 800c5ac:	0052      	lsls	r2, r2, #1
 800c5ae:	3101      	adds	r1, #1
 800c5b0:	e7f0      	b.n	800c594 <__s2b+0x18>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	6143      	str	r3, [r0, #20]
 800c5b6:	2d09      	cmp	r5, #9
 800c5b8:	f04f 0301 	mov.w	r3, #1
 800c5bc:	6103      	str	r3, [r0, #16]
 800c5be:	dd16      	ble.n	800c5ee <__s2b+0x72>
 800c5c0:	f104 0909 	add.w	r9, r4, #9
 800c5c4:	46c8      	mov	r8, r9
 800c5c6:	442c      	add	r4, r5
 800c5c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	3b30      	subs	r3, #48	; 0x30
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff8c 	bl	800c4f0 <__multadd>
 800c5d8:	45a0      	cmp	r8, r4
 800c5da:	d1f5      	bne.n	800c5c8 <__s2b+0x4c>
 800c5dc:	f1a5 0408 	sub.w	r4, r5, #8
 800c5e0:	444c      	add	r4, r9
 800c5e2:	1b2d      	subs	r5, r5, r4
 800c5e4:	1963      	adds	r3, r4, r5
 800c5e6:	42bb      	cmp	r3, r7
 800c5e8:	db04      	blt.n	800c5f4 <__s2b+0x78>
 800c5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ee:	340a      	adds	r4, #10
 800c5f0:	2509      	movs	r5, #9
 800c5f2:	e7f6      	b.n	800c5e2 <__s2b+0x66>
 800c5f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	3b30      	subs	r3, #48	; 0x30
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7ff ff76 	bl	800c4f0 <__multadd>
 800c604:	e7ee      	b.n	800c5e4 <__s2b+0x68>
 800c606:	bf00      	nop
 800c608:	0800e5c0 	.word	0x0800e5c0
 800c60c:	0800e64c 	.word	0x0800e64c

0800c610 <__hi0bits>:
 800c610:	0c03      	lsrs	r3, r0, #16
 800c612:	041b      	lsls	r3, r3, #16
 800c614:	b9d3      	cbnz	r3, 800c64c <__hi0bits+0x3c>
 800c616:	0400      	lsls	r0, r0, #16
 800c618:	2310      	movs	r3, #16
 800c61a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c61e:	bf04      	itt	eq
 800c620:	0200      	lsleq	r0, r0, #8
 800c622:	3308      	addeq	r3, #8
 800c624:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c628:	bf04      	itt	eq
 800c62a:	0100      	lsleq	r0, r0, #4
 800c62c:	3304      	addeq	r3, #4
 800c62e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c632:	bf04      	itt	eq
 800c634:	0080      	lsleq	r0, r0, #2
 800c636:	3302      	addeq	r3, #2
 800c638:	2800      	cmp	r0, #0
 800c63a:	db05      	blt.n	800c648 <__hi0bits+0x38>
 800c63c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c640:	f103 0301 	add.w	r3, r3, #1
 800c644:	bf08      	it	eq
 800c646:	2320      	moveq	r3, #32
 800c648:	4618      	mov	r0, r3
 800c64a:	4770      	bx	lr
 800c64c:	2300      	movs	r3, #0
 800c64e:	e7e4      	b.n	800c61a <__hi0bits+0xa>

0800c650 <__lo0bits>:
 800c650:	6803      	ldr	r3, [r0, #0]
 800c652:	f013 0207 	ands.w	r2, r3, #7
 800c656:	4601      	mov	r1, r0
 800c658:	d00b      	beq.n	800c672 <__lo0bits+0x22>
 800c65a:	07da      	lsls	r2, r3, #31
 800c65c:	d423      	bmi.n	800c6a6 <__lo0bits+0x56>
 800c65e:	0798      	lsls	r0, r3, #30
 800c660:	bf49      	itett	mi
 800c662:	085b      	lsrmi	r3, r3, #1
 800c664:	089b      	lsrpl	r3, r3, #2
 800c666:	2001      	movmi	r0, #1
 800c668:	600b      	strmi	r3, [r1, #0]
 800c66a:	bf5c      	itt	pl
 800c66c:	600b      	strpl	r3, [r1, #0]
 800c66e:	2002      	movpl	r0, #2
 800c670:	4770      	bx	lr
 800c672:	b298      	uxth	r0, r3
 800c674:	b9a8      	cbnz	r0, 800c6a2 <__lo0bits+0x52>
 800c676:	0c1b      	lsrs	r3, r3, #16
 800c678:	2010      	movs	r0, #16
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	b90a      	cbnz	r2, 800c682 <__lo0bits+0x32>
 800c67e:	3008      	adds	r0, #8
 800c680:	0a1b      	lsrs	r3, r3, #8
 800c682:	071a      	lsls	r2, r3, #28
 800c684:	bf04      	itt	eq
 800c686:	091b      	lsreq	r3, r3, #4
 800c688:	3004      	addeq	r0, #4
 800c68a:	079a      	lsls	r2, r3, #30
 800c68c:	bf04      	itt	eq
 800c68e:	089b      	lsreq	r3, r3, #2
 800c690:	3002      	addeq	r0, #2
 800c692:	07da      	lsls	r2, r3, #31
 800c694:	d403      	bmi.n	800c69e <__lo0bits+0x4e>
 800c696:	085b      	lsrs	r3, r3, #1
 800c698:	f100 0001 	add.w	r0, r0, #1
 800c69c:	d005      	beq.n	800c6aa <__lo0bits+0x5a>
 800c69e:	600b      	str	r3, [r1, #0]
 800c6a0:	4770      	bx	lr
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	e7e9      	b.n	800c67a <__lo0bits+0x2a>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	4770      	bx	lr
 800c6aa:	2020      	movs	r0, #32
 800c6ac:	4770      	bx	lr
	...

0800c6b0 <__i2b>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	f7ff feb9 	bl	800c42c <_Balloc>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	b928      	cbnz	r0, 800c6ca <__i2b+0x1a>
 800c6be:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <__i2b+0x24>)
 800c6c0:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <__i2b+0x28>)
 800c6c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6c6:	f000 fe01 	bl	800d2cc <__assert_func>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	6144      	str	r4, [r0, #20]
 800c6ce:	6103      	str	r3, [r0, #16]
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800e5c0 	.word	0x0800e5c0
 800c6d8:	0800e64c 	.word	0x0800e64c

0800c6dc <__multiply>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	4691      	mov	r9, r2
 800c6e2:	690a      	ldr	r2, [r1, #16]
 800c6e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	bfb8      	it	lt
 800c6ec:	460b      	movlt	r3, r1
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	bfbc      	itt	lt
 800c6f2:	464c      	movlt	r4, r9
 800c6f4:	4699      	movlt	r9, r3
 800c6f6:	6927      	ldr	r7, [r4, #16]
 800c6f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6fc:	68a3      	ldr	r3, [r4, #8]
 800c6fe:	6861      	ldr	r1, [r4, #4]
 800c700:	eb07 060a 	add.w	r6, r7, sl
 800c704:	42b3      	cmp	r3, r6
 800c706:	b085      	sub	sp, #20
 800c708:	bfb8      	it	lt
 800c70a:	3101      	addlt	r1, #1
 800c70c:	f7ff fe8e 	bl	800c42c <_Balloc>
 800c710:	b930      	cbnz	r0, 800c720 <__multiply+0x44>
 800c712:	4602      	mov	r2, r0
 800c714:	4b44      	ldr	r3, [pc, #272]	; (800c828 <__multiply+0x14c>)
 800c716:	4845      	ldr	r0, [pc, #276]	; (800c82c <__multiply+0x150>)
 800c718:	f240 115d 	movw	r1, #349	; 0x15d
 800c71c:	f000 fdd6 	bl	800d2cc <__assert_func>
 800c720:	f100 0514 	add.w	r5, r0, #20
 800c724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c728:	462b      	mov	r3, r5
 800c72a:	2200      	movs	r2, #0
 800c72c:	4543      	cmp	r3, r8
 800c72e:	d321      	bcc.n	800c774 <__multiply+0x98>
 800c730:	f104 0314 	add.w	r3, r4, #20
 800c734:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c738:	f109 0314 	add.w	r3, r9, #20
 800c73c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c740:	9202      	str	r2, [sp, #8]
 800c742:	1b3a      	subs	r2, r7, r4
 800c744:	3a15      	subs	r2, #21
 800c746:	f022 0203 	bic.w	r2, r2, #3
 800c74a:	3204      	adds	r2, #4
 800c74c:	f104 0115 	add.w	r1, r4, #21
 800c750:	428f      	cmp	r7, r1
 800c752:	bf38      	it	cc
 800c754:	2204      	movcc	r2, #4
 800c756:	9201      	str	r2, [sp, #4]
 800c758:	9a02      	ldr	r2, [sp, #8]
 800c75a:	9303      	str	r3, [sp, #12]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d80c      	bhi.n	800c77a <__multiply+0x9e>
 800c760:	2e00      	cmp	r6, #0
 800c762:	dd03      	ble.n	800c76c <__multiply+0x90>
 800c764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d05a      	beq.n	800c822 <__multiply+0x146>
 800c76c:	6106      	str	r6, [r0, #16]
 800c76e:	b005      	add	sp, #20
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	f843 2b04 	str.w	r2, [r3], #4
 800c778:	e7d8      	b.n	800c72c <__multiply+0x50>
 800c77a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c77e:	f1ba 0f00 	cmp.w	sl, #0
 800c782:	d024      	beq.n	800c7ce <__multiply+0xf2>
 800c784:	f104 0e14 	add.w	lr, r4, #20
 800c788:	46a9      	mov	r9, r5
 800c78a:	f04f 0c00 	mov.w	ip, #0
 800c78e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c792:	f8d9 1000 	ldr.w	r1, [r9]
 800c796:	fa1f fb82 	uxth.w	fp, r2
 800c79a:	b289      	uxth	r1, r1
 800c79c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7a4:	f8d9 2000 	ldr.w	r2, [r9]
 800c7a8:	4461      	add	r1, ip
 800c7aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7b6:	b289      	uxth	r1, r1
 800c7b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7bc:	4577      	cmp	r7, lr
 800c7be:	f849 1b04 	str.w	r1, [r9], #4
 800c7c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7c6:	d8e2      	bhi.n	800c78e <__multiply+0xb2>
 800c7c8:	9a01      	ldr	r2, [sp, #4]
 800c7ca:	f845 c002 	str.w	ip, [r5, r2]
 800c7ce:	9a03      	ldr	r2, [sp, #12]
 800c7d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	f1b9 0f00 	cmp.w	r9, #0
 800c7da:	d020      	beq.n	800c81e <__multiply+0x142>
 800c7dc:	6829      	ldr	r1, [r5, #0]
 800c7de:	f104 0c14 	add.w	ip, r4, #20
 800c7e2:	46ae      	mov	lr, r5
 800c7e4:	f04f 0a00 	mov.w	sl, #0
 800c7e8:	f8bc b000 	ldrh.w	fp, [ip]
 800c7ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7f0:	fb09 220b 	mla	r2, r9, fp, r2
 800c7f4:	4492      	add	sl, r2
 800c7f6:	b289      	uxth	r1, r1
 800c7f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c7fc:	f84e 1b04 	str.w	r1, [lr], #4
 800c800:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c804:	f8be 1000 	ldrh.w	r1, [lr]
 800c808:	0c12      	lsrs	r2, r2, #16
 800c80a:	fb09 1102 	mla	r1, r9, r2, r1
 800c80e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c812:	4567      	cmp	r7, ip
 800c814:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c818:	d8e6      	bhi.n	800c7e8 <__multiply+0x10c>
 800c81a:	9a01      	ldr	r2, [sp, #4]
 800c81c:	50a9      	str	r1, [r5, r2]
 800c81e:	3504      	adds	r5, #4
 800c820:	e79a      	b.n	800c758 <__multiply+0x7c>
 800c822:	3e01      	subs	r6, #1
 800c824:	e79c      	b.n	800c760 <__multiply+0x84>
 800c826:	bf00      	nop
 800c828:	0800e5c0 	.word	0x0800e5c0
 800c82c:	0800e64c 	.word	0x0800e64c

0800c830 <__pow5mult>:
 800c830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c834:	4615      	mov	r5, r2
 800c836:	f012 0203 	ands.w	r2, r2, #3
 800c83a:	4606      	mov	r6, r0
 800c83c:	460f      	mov	r7, r1
 800c83e:	d007      	beq.n	800c850 <__pow5mult+0x20>
 800c840:	4c25      	ldr	r4, [pc, #148]	; (800c8d8 <__pow5mult+0xa8>)
 800c842:	3a01      	subs	r2, #1
 800c844:	2300      	movs	r3, #0
 800c846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c84a:	f7ff fe51 	bl	800c4f0 <__multadd>
 800c84e:	4607      	mov	r7, r0
 800c850:	10ad      	asrs	r5, r5, #2
 800c852:	d03d      	beq.n	800c8d0 <__pow5mult+0xa0>
 800c854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c856:	b97c      	cbnz	r4, 800c878 <__pow5mult+0x48>
 800c858:	2010      	movs	r0, #16
 800c85a:	f7ff fdbf 	bl	800c3dc <malloc>
 800c85e:	4602      	mov	r2, r0
 800c860:	6270      	str	r0, [r6, #36]	; 0x24
 800c862:	b928      	cbnz	r0, 800c870 <__pow5mult+0x40>
 800c864:	4b1d      	ldr	r3, [pc, #116]	; (800c8dc <__pow5mult+0xac>)
 800c866:	481e      	ldr	r0, [pc, #120]	; (800c8e0 <__pow5mult+0xb0>)
 800c868:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c86c:	f000 fd2e 	bl	800d2cc <__assert_func>
 800c870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c874:	6004      	str	r4, [r0, #0]
 800c876:	60c4      	str	r4, [r0, #12]
 800c878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c87c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c880:	b94c      	cbnz	r4, 800c896 <__pow5mult+0x66>
 800c882:	f240 2171 	movw	r1, #625	; 0x271
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff ff12 	bl	800c6b0 <__i2b>
 800c88c:	2300      	movs	r3, #0
 800c88e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c892:	4604      	mov	r4, r0
 800c894:	6003      	str	r3, [r0, #0]
 800c896:	f04f 0900 	mov.w	r9, #0
 800c89a:	07eb      	lsls	r3, r5, #31
 800c89c:	d50a      	bpl.n	800c8b4 <__pow5mult+0x84>
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f7ff ff1a 	bl	800c6dc <__multiply>
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7ff fdfd 	bl	800c4ac <_Bfree>
 800c8b2:	4647      	mov	r7, r8
 800c8b4:	106d      	asrs	r5, r5, #1
 800c8b6:	d00b      	beq.n	800c8d0 <__pow5mult+0xa0>
 800c8b8:	6820      	ldr	r0, [r4, #0]
 800c8ba:	b938      	cbnz	r0, 800c8cc <__pow5mult+0x9c>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7ff ff0b 	bl	800c6dc <__multiply>
 800c8c6:	6020      	str	r0, [r4, #0]
 800c8c8:	f8c0 9000 	str.w	r9, [r0]
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	e7e4      	b.n	800c89a <__pow5mult+0x6a>
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0800e798 	.word	0x0800e798
 800c8dc:	0800e54e 	.word	0x0800e54e
 800c8e0:	0800e64c 	.word	0x0800e64c

0800c8e4 <__lshift>:
 800c8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	6849      	ldr	r1, [r1, #4]
 800c8ec:	6923      	ldr	r3, [r4, #16]
 800c8ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	4691      	mov	r9, r2
 800c8f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8fc:	f108 0601 	add.w	r6, r8, #1
 800c900:	42b3      	cmp	r3, r6
 800c902:	db0b      	blt.n	800c91c <__lshift+0x38>
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff fd91 	bl	800c42c <_Balloc>
 800c90a:	4605      	mov	r5, r0
 800c90c:	b948      	cbnz	r0, 800c922 <__lshift+0x3e>
 800c90e:	4602      	mov	r2, r0
 800c910:	4b2a      	ldr	r3, [pc, #168]	; (800c9bc <__lshift+0xd8>)
 800c912:	482b      	ldr	r0, [pc, #172]	; (800c9c0 <__lshift+0xdc>)
 800c914:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c918:	f000 fcd8 	bl	800d2cc <__assert_func>
 800c91c:	3101      	adds	r1, #1
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	e7ee      	b.n	800c900 <__lshift+0x1c>
 800c922:	2300      	movs	r3, #0
 800c924:	f100 0114 	add.w	r1, r0, #20
 800c928:	f100 0210 	add.w	r2, r0, #16
 800c92c:	4618      	mov	r0, r3
 800c92e:	4553      	cmp	r3, sl
 800c930:	db37      	blt.n	800c9a2 <__lshift+0xbe>
 800c932:	6920      	ldr	r0, [r4, #16]
 800c934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c938:	f104 0314 	add.w	r3, r4, #20
 800c93c:	f019 091f 	ands.w	r9, r9, #31
 800c940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c948:	d02f      	beq.n	800c9aa <__lshift+0xc6>
 800c94a:	f1c9 0e20 	rsb	lr, r9, #32
 800c94e:	468a      	mov	sl, r1
 800c950:	f04f 0c00 	mov.w	ip, #0
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	fa02 f209 	lsl.w	r2, r2, r9
 800c95a:	ea42 020c 	orr.w	r2, r2, ip
 800c95e:	f84a 2b04 	str.w	r2, [sl], #4
 800c962:	f853 2b04 	ldr.w	r2, [r3], #4
 800c966:	4298      	cmp	r0, r3
 800c968:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c96c:	d8f2      	bhi.n	800c954 <__lshift+0x70>
 800c96e:	1b03      	subs	r3, r0, r4
 800c970:	3b15      	subs	r3, #21
 800c972:	f023 0303 	bic.w	r3, r3, #3
 800c976:	3304      	adds	r3, #4
 800c978:	f104 0215 	add.w	r2, r4, #21
 800c97c:	4290      	cmp	r0, r2
 800c97e:	bf38      	it	cc
 800c980:	2304      	movcc	r3, #4
 800c982:	f841 c003 	str.w	ip, [r1, r3]
 800c986:	f1bc 0f00 	cmp.w	ip, #0
 800c98a:	d001      	beq.n	800c990 <__lshift+0xac>
 800c98c:	f108 0602 	add.w	r6, r8, #2
 800c990:	3e01      	subs	r6, #1
 800c992:	4638      	mov	r0, r7
 800c994:	612e      	str	r6, [r5, #16]
 800c996:	4621      	mov	r1, r4
 800c998:	f7ff fd88 	bl	800c4ac <_Bfree>
 800c99c:	4628      	mov	r0, r5
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	e7c1      	b.n	800c92e <__lshift+0x4a>
 800c9aa:	3904      	subs	r1, #4
 800c9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9b4:	4298      	cmp	r0, r3
 800c9b6:	d8f9      	bhi.n	800c9ac <__lshift+0xc8>
 800c9b8:	e7ea      	b.n	800c990 <__lshift+0xac>
 800c9ba:	bf00      	nop
 800c9bc:	0800e5c0 	.word	0x0800e5c0
 800c9c0:	0800e64c 	.word	0x0800e64c

0800c9c4 <__mcmp>:
 800c9c4:	b530      	push	{r4, r5, lr}
 800c9c6:	6902      	ldr	r2, [r0, #16]
 800c9c8:	690c      	ldr	r4, [r1, #16]
 800c9ca:	1b12      	subs	r2, r2, r4
 800c9cc:	d10e      	bne.n	800c9ec <__mcmp+0x28>
 800c9ce:	f100 0314 	add.w	r3, r0, #20
 800c9d2:	3114      	adds	r1, #20
 800c9d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9e4:	42a5      	cmp	r5, r4
 800c9e6:	d003      	beq.n	800c9f0 <__mcmp+0x2c>
 800c9e8:	d305      	bcc.n	800c9f6 <__mcmp+0x32>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	bd30      	pop	{r4, r5, pc}
 800c9f0:	4283      	cmp	r3, r0
 800c9f2:	d3f3      	bcc.n	800c9dc <__mcmp+0x18>
 800c9f4:	e7fa      	b.n	800c9ec <__mcmp+0x28>
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	e7f7      	b.n	800c9ec <__mcmp+0x28>

0800c9fc <__mdiff>:
 800c9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	460c      	mov	r4, r1
 800ca02:	4606      	mov	r6, r0
 800ca04:	4611      	mov	r1, r2
 800ca06:	4620      	mov	r0, r4
 800ca08:	4690      	mov	r8, r2
 800ca0a:	f7ff ffdb 	bl	800c9c4 <__mcmp>
 800ca0e:	1e05      	subs	r5, r0, #0
 800ca10:	d110      	bne.n	800ca34 <__mdiff+0x38>
 800ca12:	4629      	mov	r1, r5
 800ca14:	4630      	mov	r0, r6
 800ca16:	f7ff fd09 	bl	800c42c <_Balloc>
 800ca1a:	b930      	cbnz	r0, 800ca2a <__mdiff+0x2e>
 800ca1c:	4b3a      	ldr	r3, [pc, #232]	; (800cb08 <__mdiff+0x10c>)
 800ca1e:	4602      	mov	r2, r0
 800ca20:	f240 2132 	movw	r1, #562	; 0x232
 800ca24:	4839      	ldr	r0, [pc, #228]	; (800cb0c <__mdiff+0x110>)
 800ca26:	f000 fc51 	bl	800d2cc <__assert_func>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	bfa4      	itt	ge
 800ca36:	4643      	movge	r3, r8
 800ca38:	46a0      	movge	r8, r4
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca40:	bfa6      	itte	ge
 800ca42:	461c      	movge	r4, r3
 800ca44:	2500      	movge	r5, #0
 800ca46:	2501      	movlt	r5, #1
 800ca48:	f7ff fcf0 	bl	800c42c <_Balloc>
 800ca4c:	b920      	cbnz	r0, 800ca58 <__mdiff+0x5c>
 800ca4e:	4b2e      	ldr	r3, [pc, #184]	; (800cb08 <__mdiff+0x10c>)
 800ca50:	4602      	mov	r2, r0
 800ca52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca56:	e7e5      	b.n	800ca24 <__mdiff+0x28>
 800ca58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca5c:	6926      	ldr	r6, [r4, #16]
 800ca5e:	60c5      	str	r5, [r0, #12]
 800ca60:	f104 0914 	add.w	r9, r4, #20
 800ca64:	f108 0514 	add.w	r5, r8, #20
 800ca68:	f100 0e14 	add.w	lr, r0, #20
 800ca6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca74:	f108 0210 	add.w	r2, r8, #16
 800ca78:	46f2      	mov	sl, lr
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca84:	fa1f f883 	uxth.w	r8, r3
 800ca88:	fa11 f18b 	uxtah	r1, r1, fp
 800ca8c:	0c1b      	lsrs	r3, r3, #16
 800ca8e:	eba1 0808 	sub.w	r8, r1, r8
 800ca92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca9a:	fa1f f888 	uxth.w	r8, r8
 800ca9e:	1419      	asrs	r1, r3, #16
 800caa0:	454e      	cmp	r6, r9
 800caa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800caa6:	f84a 3b04 	str.w	r3, [sl], #4
 800caaa:	d8e7      	bhi.n	800ca7c <__mdiff+0x80>
 800caac:	1b33      	subs	r3, r6, r4
 800caae:	3b15      	subs	r3, #21
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	3304      	adds	r3, #4
 800cab6:	3415      	adds	r4, #21
 800cab8:	42a6      	cmp	r6, r4
 800caba:	bf38      	it	cc
 800cabc:	2304      	movcc	r3, #4
 800cabe:	441d      	add	r5, r3
 800cac0:	4473      	add	r3, lr
 800cac2:	469e      	mov	lr, r3
 800cac4:	462e      	mov	r6, r5
 800cac6:	4566      	cmp	r6, ip
 800cac8:	d30e      	bcc.n	800cae8 <__mdiff+0xec>
 800caca:	f10c 0203 	add.w	r2, ip, #3
 800cace:	1b52      	subs	r2, r2, r5
 800cad0:	f022 0203 	bic.w	r2, r2, #3
 800cad4:	3d03      	subs	r5, #3
 800cad6:	45ac      	cmp	ip, r5
 800cad8:	bf38      	it	cc
 800cada:	2200      	movcc	r2, #0
 800cadc:	441a      	add	r2, r3
 800cade:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cae2:	b17b      	cbz	r3, 800cb04 <__mdiff+0x108>
 800cae4:	6107      	str	r7, [r0, #16]
 800cae6:	e7a3      	b.n	800ca30 <__mdiff+0x34>
 800cae8:	f856 8b04 	ldr.w	r8, [r6], #4
 800caec:	fa11 f288 	uxtah	r2, r1, r8
 800caf0:	1414      	asrs	r4, r2, #16
 800caf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800caf6:	b292      	uxth	r2, r2
 800caf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cafc:	f84e 2b04 	str.w	r2, [lr], #4
 800cb00:	1421      	asrs	r1, r4, #16
 800cb02:	e7e0      	b.n	800cac6 <__mdiff+0xca>
 800cb04:	3f01      	subs	r7, #1
 800cb06:	e7ea      	b.n	800cade <__mdiff+0xe2>
 800cb08:	0800e5c0 	.word	0x0800e5c0
 800cb0c:	0800e64c 	.word	0x0800e64c

0800cb10 <__ulp>:
 800cb10:	b082      	sub	sp, #8
 800cb12:	ed8d 0b00 	vstr	d0, [sp]
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	4912      	ldr	r1, [pc, #72]	; (800cb64 <__ulp+0x54>)
 800cb1a:	4019      	ands	r1, r3
 800cb1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb20:	2900      	cmp	r1, #0
 800cb22:	dd05      	ble.n	800cb30 <__ulp+0x20>
 800cb24:	2200      	movs	r2, #0
 800cb26:	460b      	mov	r3, r1
 800cb28:	ec43 2b10 	vmov	d0, r2, r3
 800cb2c:	b002      	add	sp, #8
 800cb2e:	4770      	bx	lr
 800cb30:	4249      	negs	r1, r1
 800cb32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb36:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb3a:	f04f 0200 	mov.w	r2, #0
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	da04      	bge.n	800cb4e <__ulp+0x3e>
 800cb44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb48:	fa41 f300 	asr.w	r3, r1, r0
 800cb4c:	e7ec      	b.n	800cb28 <__ulp+0x18>
 800cb4e:	f1a0 0114 	sub.w	r1, r0, #20
 800cb52:	291e      	cmp	r1, #30
 800cb54:	bfda      	itte	le
 800cb56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb5a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb5e:	2101      	movgt	r1, #1
 800cb60:	460a      	mov	r2, r1
 800cb62:	e7e1      	b.n	800cb28 <__ulp+0x18>
 800cb64:	7ff00000 	.word	0x7ff00000

0800cb68 <__b2d>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	6905      	ldr	r5, [r0, #16]
 800cb6c:	f100 0714 	add.w	r7, r0, #20
 800cb70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb74:	1f2e      	subs	r6, r5, #4
 800cb76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f7ff fd48 	bl	800c610 <__hi0bits>
 800cb80:	f1c0 0320 	rsb	r3, r0, #32
 800cb84:	280a      	cmp	r0, #10
 800cb86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc04 <__b2d+0x9c>
 800cb8a:	600b      	str	r3, [r1, #0]
 800cb8c:	dc14      	bgt.n	800cbb8 <__b2d+0x50>
 800cb8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cb92:	fa24 f10e 	lsr.w	r1, r4, lr
 800cb96:	42b7      	cmp	r7, r6
 800cb98:	ea41 030c 	orr.w	r3, r1, ip
 800cb9c:	bf34      	ite	cc
 800cb9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cba2:	2100      	movcs	r1, #0
 800cba4:	3015      	adds	r0, #21
 800cba6:	fa04 f000 	lsl.w	r0, r4, r0
 800cbaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbae:	ea40 0201 	orr.w	r2, r0, r1
 800cbb2:	ec43 2b10 	vmov	d0, r2, r3
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb8:	42b7      	cmp	r7, r6
 800cbba:	bf3a      	itte	cc
 800cbbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbc0:	f1a5 0608 	subcc.w	r6, r5, #8
 800cbc4:	2100      	movcs	r1, #0
 800cbc6:	380b      	subs	r0, #11
 800cbc8:	d017      	beq.n	800cbfa <__b2d+0x92>
 800cbca:	f1c0 0c20 	rsb	ip, r0, #32
 800cbce:	fa04 f500 	lsl.w	r5, r4, r0
 800cbd2:	42be      	cmp	r6, r7
 800cbd4:	fa21 f40c 	lsr.w	r4, r1, ip
 800cbd8:	ea45 0504 	orr.w	r5, r5, r4
 800cbdc:	bf8c      	ite	hi
 800cbde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cbe2:	2400      	movls	r4, #0
 800cbe4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cbe8:	fa01 f000 	lsl.w	r0, r1, r0
 800cbec:	fa24 f40c 	lsr.w	r4, r4, ip
 800cbf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cbf4:	ea40 0204 	orr.w	r2, r0, r4
 800cbf8:	e7db      	b.n	800cbb2 <__b2d+0x4a>
 800cbfa:	ea44 030c 	orr.w	r3, r4, ip
 800cbfe:	460a      	mov	r2, r1
 800cc00:	e7d7      	b.n	800cbb2 <__b2d+0x4a>
 800cc02:	bf00      	nop
 800cc04:	3ff00000 	.word	0x3ff00000

0800cc08 <__d2b>:
 800cc08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	4689      	mov	r9, r1
 800cc0e:	2101      	movs	r1, #1
 800cc10:	ec57 6b10 	vmov	r6, r7, d0
 800cc14:	4690      	mov	r8, r2
 800cc16:	f7ff fc09 	bl	800c42c <_Balloc>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	b930      	cbnz	r0, 800cc2c <__d2b+0x24>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	4b25      	ldr	r3, [pc, #148]	; (800ccb8 <__d2b+0xb0>)
 800cc22:	4826      	ldr	r0, [pc, #152]	; (800ccbc <__d2b+0xb4>)
 800cc24:	f240 310a 	movw	r1, #778	; 0x30a
 800cc28:	f000 fb50 	bl	800d2cc <__assert_func>
 800cc2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc34:	bb35      	cbnz	r5, 800cc84 <__d2b+0x7c>
 800cc36:	2e00      	cmp	r6, #0
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	d028      	beq.n	800cc8e <__d2b+0x86>
 800cc3c:	4668      	mov	r0, sp
 800cc3e:	9600      	str	r6, [sp, #0]
 800cc40:	f7ff fd06 	bl	800c650 <__lo0bits>
 800cc44:	9900      	ldr	r1, [sp, #0]
 800cc46:	b300      	cbz	r0, 800cc8a <__d2b+0x82>
 800cc48:	9a01      	ldr	r2, [sp, #4]
 800cc4a:	f1c0 0320 	rsb	r3, r0, #32
 800cc4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc52:	430b      	orrs	r3, r1
 800cc54:	40c2      	lsrs	r2, r0
 800cc56:	6163      	str	r3, [r4, #20]
 800cc58:	9201      	str	r2, [sp, #4]
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	61a3      	str	r3, [r4, #24]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bf14      	ite	ne
 800cc62:	2202      	movne	r2, #2
 800cc64:	2201      	moveq	r2, #1
 800cc66:	6122      	str	r2, [r4, #16]
 800cc68:	b1d5      	cbz	r5, 800cca0 <__d2b+0x98>
 800cc6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc6e:	4405      	add	r5, r0
 800cc70:	f8c9 5000 	str.w	r5, [r9]
 800cc74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc78:	f8c8 0000 	str.w	r0, [r8]
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	b003      	add	sp, #12
 800cc80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc88:	e7d5      	b.n	800cc36 <__d2b+0x2e>
 800cc8a:	6161      	str	r1, [r4, #20]
 800cc8c:	e7e5      	b.n	800cc5a <__d2b+0x52>
 800cc8e:	a801      	add	r0, sp, #4
 800cc90:	f7ff fcde 	bl	800c650 <__lo0bits>
 800cc94:	9b01      	ldr	r3, [sp, #4]
 800cc96:	6163      	str	r3, [r4, #20]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	6122      	str	r2, [r4, #16]
 800cc9c:	3020      	adds	r0, #32
 800cc9e:	e7e3      	b.n	800cc68 <__d2b+0x60>
 800cca0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cca8:	f8c9 0000 	str.w	r0, [r9]
 800ccac:	6918      	ldr	r0, [r3, #16]
 800ccae:	f7ff fcaf 	bl	800c610 <__hi0bits>
 800ccb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccb6:	e7df      	b.n	800cc78 <__d2b+0x70>
 800ccb8:	0800e5c0 	.word	0x0800e5c0
 800ccbc:	0800e64c 	.word	0x0800e64c

0800ccc0 <__ratio>:
 800ccc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	4688      	mov	r8, r1
 800ccc6:	4669      	mov	r1, sp
 800ccc8:	4681      	mov	r9, r0
 800ccca:	f7ff ff4d 	bl	800cb68 <__b2d>
 800ccce:	a901      	add	r1, sp, #4
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	ec55 4b10 	vmov	r4, r5, d0
 800ccd6:	f7ff ff47 	bl	800cb68 <__b2d>
 800ccda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cce2:	eba3 0c02 	sub.w	ip, r3, r2
 800cce6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccf0:	ec51 0b10 	vmov	r0, r1, d0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bfd6      	itet	le
 800ccf8:	460a      	movle	r2, r1
 800ccfa:	462a      	movgt	r2, r5
 800ccfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd00:	468b      	mov	fp, r1
 800cd02:	462f      	mov	r7, r5
 800cd04:	bfd4      	ite	le
 800cd06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd0e:	4620      	mov	r0, r4
 800cd10:	ee10 2a10 	vmov	r2, s0
 800cd14:	465b      	mov	r3, fp
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 fdb8 	bl	800088c <__aeabi_ddiv>
 800cd1c:	ec41 0b10 	vmov	d0, r0, r1
 800cd20:	b003      	add	sp, #12
 800cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd26 <__copybits>:
 800cd26:	3901      	subs	r1, #1
 800cd28:	b570      	push	{r4, r5, r6, lr}
 800cd2a:	1149      	asrs	r1, r1, #5
 800cd2c:	6914      	ldr	r4, [r2, #16]
 800cd2e:	3101      	adds	r1, #1
 800cd30:	f102 0314 	add.w	r3, r2, #20
 800cd34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd3c:	1f05      	subs	r5, r0, #4
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	d30c      	bcc.n	800cd5c <__copybits+0x36>
 800cd42:	1aa3      	subs	r3, r4, r2
 800cd44:	3b11      	subs	r3, #17
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	3211      	adds	r2, #17
 800cd4c:	42a2      	cmp	r2, r4
 800cd4e:	bf88      	it	hi
 800cd50:	2300      	movhi	r3, #0
 800cd52:	4418      	add	r0, r3
 800cd54:	2300      	movs	r3, #0
 800cd56:	4288      	cmp	r0, r1
 800cd58:	d305      	bcc.n	800cd66 <__copybits+0x40>
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd60:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd64:	e7eb      	b.n	800cd3e <__copybits+0x18>
 800cd66:	f840 3b04 	str.w	r3, [r0], #4
 800cd6a:	e7f4      	b.n	800cd56 <__copybits+0x30>

0800cd6c <__any_on>:
 800cd6c:	f100 0214 	add.w	r2, r0, #20
 800cd70:	6900      	ldr	r0, [r0, #16]
 800cd72:	114b      	asrs	r3, r1, #5
 800cd74:	4298      	cmp	r0, r3
 800cd76:	b510      	push	{r4, lr}
 800cd78:	db11      	blt.n	800cd9e <__any_on+0x32>
 800cd7a:	dd0a      	ble.n	800cd92 <__any_on+0x26>
 800cd7c:	f011 011f 	ands.w	r1, r1, #31
 800cd80:	d007      	beq.n	800cd92 <__any_on+0x26>
 800cd82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd86:	fa24 f001 	lsr.w	r0, r4, r1
 800cd8a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd8e:	428c      	cmp	r4, r1
 800cd90:	d10b      	bne.n	800cdaa <__any_on+0x3e>
 800cd92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d803      	bhi.n	800cda2 <__any_on+0x36>
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	4603      	mov	r3, r0
 800cda0:	e7f7      	b.n	800cd92 <__any_on+0x26>
 800cda2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cda6:	2900      	cmp	r1, #0
 800cda8:	d0f5      	beq.n	800cd96 <__any_on+0x2a>
 800cdaa:	2001      	movs	r0, #1
 800cdac:	e7f6      	b.n	800cd9c <__any_on+0x30>

0800cdae <_calloc_r>:
 800cdae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdb0:	fba1 2402 	umull	r2, r4, r1, r2
 800cdb4:	b94c      	cbnz	r4, 800cdca <_calloc_r+0x1c>
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	9201      	str	r2, [sp, #4]
 800cdba:	f000 f87b 	bl	800ceb4 <_malloc_r>
 800cdbe:	9a01      	ldr	r2, [sp, #4]
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	b930      	cbnz	r0, 800cdd2 <_calloc_r+0x24>
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	b003      	add	sp, #12
 800cdc8:	bd30      	pop	{r4, r5, pc}
 800cdca:	220c      	movs	r2, #12
 800cdcc:	6002      	str	r2, [r0, #0]
 800cdce:	2500      	movs	r5, #0
 800cdd0:	e7f8      	b.n	800cdc4 <_calloc_r+0x16>
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f7fc fa18 	bl	8009208 <memset>
 800cdd8:	e7f4      	b.n	800cdc4 <_calloc_r+0x16>
	...

0800cddc <_free_r>:
 800cddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdde:	2900      	cmp	r1, #0
 800cde0:	d044      	beq.n	800ce6c <_free_r+0x90>
 800cde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde6:	9001      	str	r0, [sp, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f1a1 0404 	sub.w	r4, r1, #4
 800cdee:	bfb8      	it	lt
 800cdf0:	18e4      	addlt	r4, r4, r3
 800cdf2:	f000 fab5 	bl	800d360 <__malloc_lock>
 800cdf6:	4a1e      	ldr	r2, [pc, #120]	; (800ce70 <_free_r+0x94>)
 800cdf8:	9801      	ldr	r0, [sp, #4]
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	b933      	cbnz	r3, 800ce0c <_free_r+0x30>
 800cdfe:	6063      	str	r3, [r4, #4]
 800ce00:	6014      	str	r4, [r2, #0]
 800ce02:	b003      	add	sp, #12
 800ce04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce08:	f000 bab0 	b.w	800d36c <__malloc_unlock>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d908      	bls.n	800ce22 <_free_r+0x46>
 800ce10:	6825      	ldr	r5, [r4, #0]
 800ce12:	1961      	adds	r1, r4, r5
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf01      	itttt	eq
 800ce18:	6819      	ldreq	r1, [r3, #0]
 800ce1a:	685b      	ldreq	r3, [r3, #4]
 800ce1c:	1949      	addeq	r1, r1, r5
 800ce1e:	6021      	streq	r1, [r4, #0]
 800ce20:	e7ed      	b.n	800cdfe <_free_r+0x22>
 800ce22:	461a      	mov	r2, r3
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	b10b      	cbz	r3, 800ce2c <_free_r+0x50>
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d9fa      	bls.n	800ce22 <_free_r+0x46>
 800ce2c:	6811      	ldr	r1, [r2, #0]
 800ce2e:	1855      	adds	r5, r2, r1
 800ce30:	42a5      	cmp	r5, r4
 800ce32:	d10b      	bne.n	800ce4c <_free_r+0x70>
 800ce34:	6824      	ldr	r4, [r4, #0]
 800ce36:	4421      	add	r1, r4
 800ce38:	1854      	adds	r4, r2, r1
 800ce3a:	42a3      	cmp	r3, r4
 800ce3c:	6011      	str	r1, [r2, #0]
 800ce3e:	d1e0      	bne.n	800ce02 <_free_r+0x26>
 800ce40:	681c      	ldr	r4, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	6053      	str	r3, [r2, #4]
 800ce46:	4421      	add	r1, r4
 800ce48:	6011      	str	r1, [r2, #0]
 800ce4a:	e7da      	b.n	800ce02 <_free_r+0x26>
 800ce4c:	d902      	bls.n	800ce54 <_free_r+0x78>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	e7d6      	b.n	800ce02 <_free_r+0x26>
 800ce54:	6825      	ldr	r5, [r4, #0]
 800ce56:	1961      	adds	r1, r4, r5
 800ce58:	428b      	cmp	r3, r1
 800ce5a:	bf04      	itt	eq
 800ce5c:	6819      	ldreq	r1, [r3, #0]
 800ce5e:	685b      	ldreq	r3, [r3, #4]
 800ce60:	6063      	str	r3, [r4, #4]
 800ce62:	bf04      	itt	eq
 800ce64:	1949      	addeq	r1, r1, r5
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	6054      	str	r4, [r2, #4]
 800ce6a:	e7ca      	b.n	800ce02 <_free_r+0x26>
 800ce6c:	b003      	add	sp, #12
 800ce6e:	bd30      	pop	{r4, r5, pc}
 800ce70:	20000738 	.word	0x20000738

0800ce74 <sbrk_aligned>:
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	4e0e      	ldr	r6, [pc, #56]	; (800ceb0 <sbrk_aligned+0x3c>)
 800ce78:	460c      	mov	r4, r1
 800ce7a:	6831      	ldr	r1, [r6, #0]
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	b911      	cbnz	r1, 800ce86 <sbrk_aligned+0x12>
 800ce80:	f000 f9f2 	bl	800d268 <_sbrk_r>
 800ce84:	6030      	str	r0, [r6, #0]
 800ce86:	4621      	mov	r1, r4
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 f9ed 	bl	800d268 <_sbrk_r>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	d00a      	beq.n	800cea8 <sbrk_aligned+0x34>
 800ce92:	1cc4      	adds	r4, r0, #3
 800ce94:	f024 0403 	bic.w	r4, r4, #3
 800ce98:	42a0      	cmp	r0, r4
 800ce9a:	d007      	beq.n	800ceac <sbrk_aligned+0x38>
 800ce9c:	1a21      	subs	r1, r4, r0
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f9e2 	bl	800d268 <_sbrk_r>
 800cea4:	3001      	adds	r0, #1
 800cea6:	d101      	bne.n	800ceac <sbrk_aligned+0x38>
 800cea8:	f04f 34ff 	mov.w	r4, #4294967295
 800ceac:	4620      	mov	r0, r4
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	2000073c 	.word	0x2000073c

0800ceb4 <_malloc_r>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	1ccd      	adds	r5, r1, #3
 800ceba:	f025 0503 	bic.w	r5, r5, #3
 800cebe:	3508      	adds	r5, #8
 800cec0:	2d0c      	cmp	r5, #12
 800cec2:	bf38      	it	cc
 800cec4:	250c      	movcc	r5, #12
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	4607      	mov	r7, r0
 800ceca:	db01      	blt.n	800ced0 <_malloc_r+0x1c>
 800cecc:	42a9      	cmp	r1, r5
 800cece:	d905      	bls.n	800cedc <_malloc_r+0x28>
 800ced0:	230c      	movs	r3, #12
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	2600      	movs	r6, #0
 800ced6:	4630      	mov	r0, r6
 800ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cedc:	4e2e      	ldr	r6, [pc, #184]	; (800cf98 <_malloc_r+0xe4>)
 800cede:	f000 fa3f 	bl	800d360 <__malloc_lock>
 800cee2:	6833      	ldr	r3, [r6, #0]
 800cee4:	461c      	mov	r4, r3
 800cee6:	bb34      	cbnz	r4, 800cf36 <_malloc_r+0x82>
 800cee8:	4629      	mov	r1, r5
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7ff ffc2 	bl	800ce74 <sbrk_aligned>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	4604      	mov	r4, r0
 800cef4:	d14d      	bne.n	800cf92 <_malloc_r+0xde>
 800cef6:	6834      	ldr	r4, [r6, #0]
 800cef8:	4626      	mov	r6, r4
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	d140      	bne.n	800cf80 <_malloc_r+0xcc>
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	4631      	mov	r1, r6
 800cf02:	4638      	mov	r0, r7
 800cf04:	eb04 0803 	add.w	r8, r4, r3
 800cf08:	f000 f9ae 	bl	800d268 <_sbrk_r>
 800cf0c:	4580      	cmp	r8, r0
 800cf0e:	d13a      	bne.n	800cf86 <_malloc_r+0xd2>
 800cf10:	6821      	ldr	r1, [r4, #0]
 800cf12:	3503      	adds	r5, #3
 800cf14:	1a6d      	subs	r5, r5, r1
 800cf16:	f025 0503 	bic.w	r5, r5, #3
 800cf1a:	3508      	adds	r5, #8
 800cf1c:	2d0c      	cmp	r5, #12
 800cf1e:	bf38      	it	cc
 800cf20:	250c      	movcc	r5, #12
 800cf22:	4629      	mov	r1, r5
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ffa5 	bl	800ce74 <sbrk_aligned>
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	d02b      	beq.n	800cf86 <_malloc_r+0xd2>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	442b      	add	r3, r5
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	e00e      	b.n	800cf54 <_malloc_r+0xa0>
 800cf36:	6822      	ldr	r2, [r4, #0]
 800cf38:	1b52      	subs	r2, r2, r5
 800cf3a:	d41e      	bmi.n	800cf7a <_malloc_r+0xc6>
 800cf3c:	2a0b      	cmp	r2, #11
 800cf3e:	d916      	bls.n	800cf6e <_malloc_r+0xba>
 800cf40:	1961      	adds	r1, r4, r5
 800cf42:	42a3      	cmp	r3, r4
 800cf44:	6025      	str	r5, [r4, #0]
 800cf46:	bf18      	it	ne
 800cf48:	6059      	strne	r1, [r3, #4]
 800cf4a:	6863      	ldr	r3, [r4, #4]
 800cf4c:	bf08      	it	eq
 800cf4e:	6031      	streq	r1, [r6, #0]
 800cf50:	5162      	str	r2, [r4, r5]
 800cf52:	604b      	str	r3, [r1, #4]
 800cf54:	4638      	mov	r0, r7
 800cf56:	f104 060b 	add.w	r6, r4, #11
 800cf5a:	f000 fa07 	bl	800d36c <__malloc_unlock>
 800cf5e:	f026 0607 	bic.w	r6, r6, #7
 800cf62:	1d23      	adds	r3, r4, #4
 800cf64:	1af2      	subs	r2, r6, r3
 800cf66:	d0b6      	beq.n	800ced6 <_malloc_r+0x22>
 800cf68:	1b9b      	subs	r3, r3, r6
 800cf6a:	50a3      	str	r3, [r4, r2]
 800cf6c:	e7b3      	b.n	800ced6 <_malloc_r+0x22>
 800cf6e:	6862      	ldr	r2, [r4, #4]
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	bf0c      	ite	eq
 800cf74:	6032      	streq	r2, [r6, #0]
 800cf76:	605a      	strne	r2, [r3, #4]
 800cf78:	e7ec      	b.n	800cf54 <_malloc_r+0xa0>
 800cf7a:	4623      	mov	r3, r4
 800cf7c:	6864      	ldr	r4, [r4, #4]
 800cf7e:	e7b2      	b.n	800cee6 <_malloc_r+0x32>
 800cf80:	4634      	mov	r4, r6
 800cf82:	6876      	ldr	r6, [r6, #4]
 800cf84:	e7b9      	b.n	800cefa <_malloc_r+0x46>
 800cf86:	230c      	movs	r3, #12
 800cf88:	603b      	str	r3, [r7, #0]
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	f000 f9ee 	bl	800d36c <__malloc_unlock>
 800cf90:	e7a1      	b.n	800ced6 <_malloc_r+0x22>
 800cf92:	6025      	str	r5, [r4, #0]
 800cf94:	e7de      	b.n	800cf54 <_malloc_r+0xa0>
 800cf96:	bf00      	nop
 800cf98:	20000738 	.word	0x20000738

0800cf9c <__ssputs_r>:
 800cf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa0:	688e      	ldr	r6, [r1, #8]
 800cfa2:	429e      	cmp	r6, r3
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	4690      	mov	r8, r2
 800cfaa:	461f      	mov	r7, r3
 800cfac:	d838      	bhi.n	800d020 <__ssputs_r+0x84>
 800cfae:	898a      	ldrh	r2, [r1, #12]
 800cfb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfb4:	d032      	beq.n	800d01c <__ssputs_r+0x80>
 800cfb6:	6825      	ldr	r5, [r4, #0]
 800cfb8:	6909      	ldr	r1, [r1, #16]
 800cfba:	eba5 0901 	sub.w	r9, r5, r1
 800cfbe:	6965      	ldr	r5, [r4, #20]
 800cfc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfc8:	3301      	adds	r3, #1
 800cfca:	444b      	add	r3, r9
 800cfcc:	106d      	asrs	r5, r5, #1
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	bf38      	it	cc
 800cfd2:	461d      	movcc	r5, r3
 800cfd4:	0553      	lsls	r3, r2, #21
 800cfd6:	d531      	bpl.n	800d03c <__ssputs_r+0xa0>
 800cfd8:	4629      	mov	r1, r5
 800cfda:	f7ff ff6b 	bl	800ceb4 <_malloc_r>
 800cfde:	4606      	mov	r6, r0
 800cfe0:	b950      	cbnz	r0, 800cff8 <__ssputs_r+0x5c>
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	f8ca 3000 	str.w	r3, [sl]
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295
 800cff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff8:	6921      	ldr	r1, [r4, #16]
 800cffa:	464a      	mov	r2, r9
 800cffc:	f7ff fa08 	bl	800c410 <memcpy>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	6126      	str	r6, [r4, #16]
 800d00e:	6165      	str	r5, [r4, #20]
 800d010:	444e      	add	r6, r9
 800d012:	eba5 0509 	sub.w	r5, r5, r9
 800d016:	6026      	str	r6, [r4, #0]
 800d018:	60a5      	str	r5, [r4, #8]
 800d01a:	463e      	mov	r6, r7
 800d01c:	42be      	cmp	r6, r7
 800d01e:	d900      	bls.n	800d022 <__ssputs_r+0x86>
 800d020:	463e      	mov	r6, r7
 800d022:	6820      	ldr	r0, [r4, #0]
 800d024:	4632      	mov	r2, r6
 800d026:	4641      	mov	r1, r8
 800d028:	f000 f980 	bl	800d32c <memmove>
 800d02c:	68a3      	ldr	r3, [r4, #8]
 800d02e:	1b9b      	subs	r3, r3, r6
 800d030:	60a3      	str	r3, [r4, #8]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	4433      	add	r3, r6
 800d036:	6023      	str	r3, [r4, #0]
 800d038:	2000      	movs	r0, #0
 800d03a:	e7db      	b.n	800cff4 <__ssputs_r+0x58>
 800d03c:	462a      	mov	r2, r5
 800d03e:	f000 f99b 	bl	800d378 <_realloc_r>
 800d042:	4606      	mov	r6, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	d1e1      	bne.n	800d00c <__ssputs_r+0x70>
 800d048:	6921      	ldr	r1, [r4, #16]
 800d04a:	4650      	mov	r0, sl
 800d04c:	f7ff fec6 	bl	800cddc <_free_r>
 800d050:	e7c7      	b.n	800cfe2 <__ssputs_r+0x46>
	...

0800d054 <_svfiprintf_r>:
 800d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d058:	4698      	mov	r8, r3
 800d05a:	898b      	ldrh	r3, [r1, #12]
 800d05c:	061b      	lsls	r3, r3, #24
 800d05e:	b09d      	sub	sp, #116	; 0x74
 800d060:	4607      	mov	r7, r0
 800d062:	460d      	mov	r5, r1
 800d064:	4614      	mov	r4, r2
 800d066:	d50e      	bpl.n	800d086 <_svfiprintf_r+0x32>
 800d068:	690b      	ldr	r3, [r1, #16]
 800d06a:	b963      	cbnz	r3, 800d086 <_svfiprintf_r+0x32>
 800d06c:	2140      	movs	r1, #64	; 0x40
 800d06e:	f7ff ff21 	bl	800ceb4 <_malloc_r>
 800d072:	6028      	str	r0, [r5, #0]
 800d074:	6128      	str	r0, [r5, #16]
 800d076:	b920      	cbnz	r0, 800d082 <_svfiprintf_r+0x2e>
 800d078:	230c      	movs	r3, #12
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	f04f 30ff 	mov.w	r0, #4294967295
 800d080:	e0d1      	b.n	800d226 <_svfiprintf_r+0x1d2>
 800d082:	2340      	movs	r3, #64	; 0x40
 800d084:	616b      	str	r3, [r5, #20]
 800d086:	2300      	movs	r3, #0
 800d088:	9309      	str	r3, [sp, #36]	; 0x24
 800d08a:	2320      	movs	r3, #32
 800d08c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d090:	f8cd 800c 	str.w	r8, [sp, #12]
 800d094:	2330      	movs	r3, #48	; 0x30
 800d096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d240 <_svfiprintf_r+0x1ec>
 800d09a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d09e:	f04f 0901 	mov.w	r9, #1
 800d0a2:	4623      	mov	r3, r4
 800d0a4:	469a      	mov	sl, r3
 800d0a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0aa:	b10a      	cbz	r2, 800d0b0 <_svfiprintf_r+0x5c>
 800d0ac:	2a25      	cmp	r2, #37	; 0x25
 800d0ae:	d1f9      	bne.n	800d0a4 <_svfiprintf_r+0x50>
 800d0b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d0b4:	d00b      	beq.n	800d0ce <_svfiprintf_r+0x7a>
 800d0b6:	465b      	mov	r3, fp
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f7ff ff6d 	bl	800cf9c <__ssputs_r>
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f000 80aa 	beq.w	800d21c <_svfiprintf_r+0x1c8>
 800d0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ca:	445a      	add	r2, fp
 800d0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80a2 	beq.w	800d21c <_svfiprintf_r+0x1c8>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f04f 32ff 	mov.w	r2, #4294967295
 800d0de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0e2:	f10a 0a01 	add.w	sl, sl, #1
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	9307      	str	r3, [sp, #28]
 800d0ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d0f0:	4654      	mov	r4, sl
 800d0f2:	2205      	movs	r2, #5
 800d0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f8:	4851      	ldr	r0, [pc, #324]	; (800d240 <_svfiprintf_r+0x1ec>)
 800d0fa:	f7f3 f891 	bl	8000220 <memchr>
 800d0fe:	9a04      	ldr	r2, [sp, #16]
 800d100:	b9d8      	cbnz	r0, 800d13a <_svfiprintf_r+0xe6>
 800d102:	06d0      	lsls	r0, r2, #27
 800d104:	bf44      	itt	mi
 800d106:	2320      	movmi	r3, #32
 800d108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d10c:	0711      	lsls	r1, r2, #28
 800d10e:	bf44      	itt	mi
 800d110:	232b      	movmi	r3, #43	; 0x2b
 800d112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d116:	f89a 3000 	ldrb.w	r3, [sl]
 800d11a:	2b2a      	cmp	r3, #42	; 0x2a
 800d11c:	d015      	beq.n	800d14a <_svfiprintf_r+0xf6>
 800d11e:	9a07      	ldr	r2, [sp, #28]
 800d120:	4654      	mov	r4, sl
 800d122:	2000      	movs	r0, #0
 800d124:	f04f 0c0a 	mov.w	ip, #10
 800d128:	4621      	mov	r1, r4
 800d12a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d12e:	3b30      	subs	r3, #48	; 0x30
 800d130:	2b09      	cmp	r3, #9
 800d132:	d94e      	bls.n	800d1d2 <_svfiprintf_r+0x17e>
 800d134:	b1b0      	cbz	r0, 800d164 <_svfiprintf_r+0x110>
 800d136:	9207      	str	r2, [sp, #28]
 800d138:	e014      	b.n	800d164 <_svfiprintf_r+0x110>
 800d13a:	eba0 0308 	sub.w	r3, r0, r8
 800d13e:	fa09 f303 	lsl.w	r3, r9, r3
 800d142:	4313      	orrs	r3, r2
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	46a2      	mov	sl, r4
 800d148:	e7d2      	b.n	800d0f0 <_svfiprintf_r+0x9c>
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	1d19      	adds	r1, r3, #4
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	9103      	str	r1, [sp, #12]
 800d152:	2b00      	cmp	r3, #0
 800d154:	bfbb      	ittet	lt
 800d156:	425b      	neglt	r3, r3
 800d158:	f042 0202 	orrlt.w	r2, r2, #2
 800d15c:	9307      	strge	r3, [sp, #28]
 800d15e:	9307      	strlt	r3, [sp, #28]
 800d160:	bfb8      	it	lt
 800d162:	9204      	strlt	r2, [sp, #16]
 800d164:	7823      	ldrb	r3, [r4, #0]
 800d166:	2b2e      	cmp	r3, #46	; 0x2e
 800d168:	d10c      	bne.n	800d184 <_svfiprintf_r+0x130>
 800d16a:	7863      	ldrb	r3, [r4, #1]
 800d16c:	2b2a      	cmp	r3, #42	; 0x2a
 800d16e:	d135      	bne.n	800d1dc <_svfiprintf_r+0x188>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	1d1a      	adds	r2, r3, #4
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	9203      	str	r2, [sp, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	bfb8      	it	lt
 800d17c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d180:	3402      	adds	r4, #2
 800d182:	9305      	str	r3, [sp, #20]
 800d184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d250 <_svfiprintf_r+0x1fc>
 800d188:	7821      	ldrb	r1, [r4, #0]
 800d18a:	2203      	movs	r2, #3
 800d18c:	4650      	mov	r0, sl
 800d18e:	f7f3 f847 	bl	8000220 <memchr>
 800d192:	b140      	cbz	r0, 800d1a6 <_svfiprintf_r+0x152>
 800d194:	2340      	movs	r3, #64	; 0x40
 800d196:	eba0 000a 	sub.w	r0, r0, sl
 800d19a:	fa03 f000 	lsl.w	r0, r3, r0
 800d19e:	9b04      	ldr	r3, [sp, #16]
 800d1a0:	4303      	orrs	r3, r0
 800d1a2:	3401      	adds	r4, #1
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1aa:	4826      	ldr	r0, [pc, #152]	; (800d244 <_svfiprintf_r+0x1f0>)
 800d1ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1b0:	2206      	movs	r2, #6
 800d1b2:	f7f3 f835 	bl	8000220 <memchr>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d038      	beq.n	800d22c <_svfiprintf_r+0x1d8>
 800d1ba:	4b23      	ldr	r3, [pc, #140]	; (800d248 <_svfiprintf_r+0x1f4>)
 800d1bc:	bb1b      	cbnz	r3, 800d206 <_svfiprintf_r+0x1b2>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	3307      	adds	r3, #7
 800d1c2:	f023 0307 	bic.w	r3, r3, #7
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1cc:	4433      	add	r3, r6
 800d1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d1d0:	e767      	b.n	800d0a2 <_svfiprintf_r+0x4e>
 800d1d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	2001      	movs	r0, #1
 800d1da:	e7a5      	b.n	800d128 <_svfiprintf_r+0xd4>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	3401      	adds	r4, #1
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f04f 0c0a 	mov.w	ip, #10
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ee:	3a30      	subs	r2, #48	; 0x30
 800d1f0:	2a09      	cmp	r2, #9
 800d1f2:	d903      	bls.n	800d1fc <_svfiprintf_r+0x1a8>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0c5      	beq.n	800d184 <_svfiprintf_r+0x130>
 800d1f8:	9105      	str	r1, [sp, #20]
 800d1fa:	e7c3      	b.n	800d184 <_svfiprintf_r+0x130>
 800d1fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d200:	4604      	mov	r4, r0
 800d202:	2301      	movs	r3, #1
 800d204:	e7f0      	b.n	800d1e8 <_svfiprintf_r+0x194>
 800d206:	ab03      	add	r3, sp, #12
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	462a      	mov	r2, r5
 800d20c:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <_svfiprintf_r+0x1f8>)
 800d20e:	a904      	add	r1, sp, #16
 800d210:	4638      	mov	r0, r7
 800d212:	f7fc f8a1 	bl	8009358 <_printf_float>
 800d216:	1c42      	adds	r2, r0, #1
 800d218:	4606      	mov	r6, r0
 800d21a:	d1d6      	bne.n	800d1ca <_svfiprintf_r+0x176>
 800d21c:	89ab      	ldrh	r3, [r5, #12]
 800d21e:	065b      	lsls	r3, r3, #25
 800d220:	f53f af2c 	bmi.w	800d07c <_svfiprintf_r+0x28>
 800d224:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d226:	b01d      	add	sp, #116	; 0x74
 800d228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22c:	ab03      	add	r3, sp, #12
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	462a      	mov	r2, r5
 800d232:	4b06      	ldr	r3, [pc, #24]	; (800d24c <_svfiprintf_r+0x1f8>)
 800d234:	a904      	add	r1, sp, #16
 800d236:	4638      	mov	r0, r7
 800d238:	f7fc fb32 	bl	80098a0 <_printf_i>
 800d23c:	e7eb      	b.n	800d216 <_svfiprintf_r+0x1c2>
 800d23e:	bf00      	nop
 800d240:	0800e7a4 	.word	0x0800e7a4
 800d244:	0800e7ae 	.word	0x0800e7ae
 800d248:	08009359 	.word	0x08009359
 800d24c:	0800cf9d 	.word	0x0800cf9d
 800d250:	0800e7aa 	.word	0x0800e7aa
 800d254:	00000000 	.word	0x00000000

0800d258 <nan>:
 800d258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d260 <nan+0x8>
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	00000000 	.word	0x00000000
 800d264:	7ff80000 	.word	0x7ff80000

0800d268 <_sbrk_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	; (800d284 <_sbrk_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f7 f8b4 	bl	80043e0 <_sbrk>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_sbrk_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_sbrk_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000740 	.word	0x20000740

0800d288 <strncmp>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	b17a      	cbz	r2, 800d2ac <strncmp+0x24>
 800d28c:	4603      	mov	r3, r0
 800d28e:	3901      	subs	r1, #1
 800d290:	1884      	adds	r4, r0, r2
 800d292:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d296:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d29a:	4290      	cmp	r0, r2
 800d29c:	d101      	bne.n	800d2a2 <strncmp+0x1a>
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	d101      	bne.n	800d2a6 <strncmp+0x1e>
 800d2a2:	1a80      	subs	r0, r0, r2
 800d2a4:	bd10      	pop	{r4, pc}
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d1f3      	bne.n	800d292 <strncmp+0xa>
 800d2aa:	e7fa      	b.n	800d2a2 <strncmp+0x1a>
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	e7f9      	b.n	800d2a4 <strncmp+0x1c>

0800d2b0 <__ascii_wctomb>:
 800d2b0:	b149      	cbz	r1, 800d2c6 <__ascii_wctomb+0x16>
 800d2b2:	2aff      	cmp	r2, #255	; 0xff
 800d2b4:	bf85      	ittet	hi
 800d2b6:	238a      	movhi	r3, #138	; 0x8a
 800d2b8:	6003      	strhi	r3, [r0, #0]
 800d2ba:	700a      	strbls	r2, [r1, #0]
 800d2bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2c0:	bf98      	it	ls
 800d2c2:	2001      	movls	r0, #1
 800d2c4:	4770      	bx	lr
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	4770      	bx	lr
	...

0800d2cc <__assert_func>:
 800d2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <__assert_func+0x2c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	68d8      	ldr	r0, [r3, #12]
 800d2da:	b14c      	cbz	r4, 800d2f0 <__assert_func+0x24>
 800d2dc:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <__assert_func+0x30>)
 800d2de:	9100      	str	r1, [sp, #0]
 800d2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2e4:	4906      	ldr	r1, [pc, #24]	; (800d300 <__assert_func+0x34>)
 800d2e6:	462b      	mov	r3, r5
 800d2e8:	f000 f80e 	bl	800d308 <fiprintf>
 800d2ec:	f000 fa8c 	bl	800d808 <abort>
 800d2f0:	4b04      	ldr	r3, [pc, #16]	; (800d304 <__assert_func+0x38>)
 800d2f2:	461c      	mov	r4, r3
 800d2f4:	e7f3      	b.n	800d2de <__assert_func+0x12>
 800d2f6:	bf00      	nop
 800d2f8:	2000003c 	.word	0x2000003c
 800d2fc:	0800e7b5 	.word	0x0800e7b5
 800d300:	0800e7c2 	.word	0x0800e7c2
 800d304:	0800e7f0 	.word	0x0800e7f0

0800d308 <fiprintf>:
 800d308:	b40e      	push	{r1, r2, r3}
 800d30a:	b503      	push	{r0, r1, lr}
 800d30c:	4601      	mov	r1, r0
 800d30e:	ab03      	add	r3, sp, #12
 800d310:	4805      	ldr	r0, [pc, #20]	; (800d328 <fiprintf+0x20>)
 800d312:	f853 2b04 	ldr.w	r2, [r3], #4
 800d316:	6800      	ldr	r0, [r0, #0]
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	f000 f885 	bl	800d428 <_vfiprintf_r>
 800d31e:	b002      	add	sp, #8
 800d320:	f85d eb04 	ldr.w	lr, [sp], #4
 800d324:	b003      	add	sp, #12
 800d326:	4770      	bx	lr
 800d328:	2000003c 	.word	0x2000003c

0800d32c <memmove>:
 800d32c:	4288      	cmp	r0, r1
 800d32e:	b510      	push	{r4, lr}
 800d330:	eb01 0402 	add.w	r4, r1, r2
 800d334:	d902      	bls.n	800d33c <memmove+0x10>
 800d336:	4284      	cmp	r4, r0
 800d338:	4623      	mov	r3, r4
 800d33a:	d807      	bhi.n	800d34c <memmove+0x20>
 800d33c:	1e43      	subs	r3, r0, #1
 800d33e:	42a1      	cmp	r1, r4
 800d340:	d008      	beq.n	800d354 <memmove+0x28>
 800d342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d34a:	e7f8      	b.n	800d33e <memmove+0x12>
 800d34c:	4402      	add	r2, r0
 800d34e:	4601      	mov	r1, r0
 800d350:	428a      	cmp	r2, r1
 800d352:	d100      	bne.n	800d356 <memmove+0x2a>
 800d354:	bd10      	pop	{r4, pc}
 800d356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d35e:	e7f7      	b.n	800d350 <memmove+0x24>

0800d360 <__malloc_lock>:
 800d360:	4801      	ldr	r0, [pc, #4]	; (800d368 <__malloc_lock+0x8>)
 800d362:	f000 bc11 	b.w	800db88 <__retarget_lock_acquire_recursive>
 800d366:	bf00      	nop
 800d368:	20000744 	.word	0x20000744

0800d36c <__malloc_unlock>:
 800d36c:	4801      	ldr	r0, [pc, #4]	; (800d374 <__malloc_unlock+0x8>)
 800d36e:	f000 bc0c 	b.w	800db8a <__retarget_lock_release_recursive>
 800d372:	bf00      	nop
 800d374:	20000744 	.word	0x20000744

0800d378 <_realloc_r>:
 800d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d37c:	4680      	mov	r8, r0
 800d37e:	4614      	mov	r4, r2
 800d380:	460e      	mov	r6, r1
 800d382:	b921      	cbnz	r1, 800d38e <_realloc_r+0x16>
 800d384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d388:	4611      	mov	r1, r2
 800d38a:	f7ff bd93 	b.w	800ceb4 <_malloc_r>
 800d38e:	b92a      	cbnz	r2, 800d39c <_realloc_r+0x24>
 800d390:	f7ff fd24 	bl	800cddc <_free_r>
 800d394:	4625      	mov	r5, r4
 800d396:	4628      	mov	r0, r5
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39c:	f000 fc5c 	bl	800dc58 <_malloc_usable_size_r>
 800d3a0:	4284      	cmp	r4, r0
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	d802      	bhi.n	800d3ac <_realloc_r+0x34>
 800d3a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3aa:	d812      	bhi.n	800d3d2 <_realloc_r+0x5a>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7ff fd80 	bl	800ceb4 <_malloc_r>
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d0ed      	beq.n	800d396 <_realloc_r+0x1e>
 800d3ba:	42bc      	cmp	r4, r7
 800d3bc:	4622      	mov	r2, r4
 800d3be:	4631      	mov	r1, r6
 800d3c0:	bf28      	it	cs
 800d3c2:	463a      	movcs	r2, r7
 800d3c4:	f7ff f824 	bl	800c410 <memcpy>
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	f7ff fd06 	bl	800cddc <_free_r>
 800d3d0:	e7e1      	b.n	800d396 <_realloc_r+0x1e>
 800d3d2:	4635      	mov	r5, r6
 800d3d4:	e7df      	b.n	800d396 <_realloc_r+0x1e>

0800d3d6 <__sfputc_r>:
 800d3d6:	6893      	ldr	r3, [r2, #8]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	b410      	push	{r4}
 800d3de:	6093      	str	r3, [r2, #8]
 800d3e0:	da08      	bge.n	800d3f4 <__sfputc_r+0x1e>
 800d3e2:	6994      	ldr	r4, [r2, #24]
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	db01      	blt.n	800d3ec <__sfputc_r+0x16>
 800d3e8:	290a      	cmp	r1, #10
 800d3ea:	d103      	bne.n	800d3f4 <__sfputc_r+0x1e>
 800d3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3f0:	f000 b94a 	b.w	800d688 <__swbuf_r>
 800d3f4:	6813      	ldr	r3, [r2, #0]
 800d3f6:	1c58      	adds	r0, r3, #1
 800d3f8:	6010      	str	r0, [r2, #0]
 800d3fa:	7019      	strb	r1, [r3, #0]
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <__sfputs_r>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	4606      	mov	r6, r0
 800d408:	460f      	mov	r7, r1
 800d40a:	4614      	mov	r4, r2
 800d40c:	18d5      	adds	r5, r2, r3
 800d40e:	42ac      	cmp	r4, r5
 800d410:	d101      	bne.n	800d416 <__sfputs_r+0x12>
 800d412:	2000      	movs	r0, #0
 800d414:	e007      	b.n	800d426 <__sfputs_r+0x22>
 800d416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41a:	463a      	mov	r2, r7
 800d41c:	4630      	mov	r0, r6
 800d41e:	f7ff ffda 	bl	800d3d6 <__sfputc_r>
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	d1f3      	bne.n	800d40e <__sfputs_r+0xa>
 800d426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d428 <_vfiprintf_r>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	460d      	mov	r5, r1
 800d42e:	b09d      	sub	sp, #116	; 0x74
 800d430:	4614      	mov	r4, r2
 800d432:	4698      	mov	r8, r3
 800d434:	4606      	mov	r6, r0
 800d436:	b118      	cbz	r0, 800d440 <_vfiprintf_r+0x18>
 800d438:	6983      	ldr	r3, [r0, #24]
 800d43a:	b90b      	cbnz	r3, 800d440 <_vfiprintf_r+0x18>
 800d43c:	f000 fb06 	bl	800da4c <__sinit>
 800d440:	4b89      	ldr	r3, [pc, #548]	; (800d668 <_vfiprintf_r+0x240>)
 800d442:	429d      	cmp	r5, r3
 800d444:	d11b      	bne.n	800d47e <_vfiprintf_r+0x56>
 800d446:	6875      	ldr	r5, [r6, #4]
 800d448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d44a:	07d9      	lsls	r1, r3, #31
 800d44c:	d405      	bmi.n	800d45a <_vfiprintf_r+0x32>
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	059a      	lsls	r2, r3, #22
 800d452:	d402      	bmi.n	800d45a <_vfiprintf_r+0x32>
 800d454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d456:	f000 fb97 	bl	800db88 <__retarget_lock_acquire_recursive>
 800d45a:	89ab      	ldrh	r3, [r5, #12]
 800d45c:	071b      	lsls	r3, r3, #28
 800d45e:	d501      	bpl.n	800d464 <_vfiprintf_r+0x3c>
 800d460:	692b      	ldr	r3, [r5, #16]
 800d462:	b9eb      	cbnz	r3, 800d4a0 <_vfiprintf_r+0x78>
 800d464:	4629      	mov	r1, r5
 800d466:	4630      	mov	r0, r6
 800d468:	f000 f960 	bl	800d72c <__swsetup_r>
 800d46c:	b1c0      	cbz	r0, 800d4a0 <_vfiprintf_r+0x78>
 800d46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d470:	07dc      	lsls	r4, r3, #31
 800d472:	d50e      	bpl.n	800d492 <_vfiprintf_r+0x6a>
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	b01d      	add	sp, #116	; 0x74
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	4b7b      	ldr	r3, [pc, #492]	; (800d66c <_vfiprintf_r+0x244>)
 800d480:	429d      	cmp	r5, r3
 800d482:	d101      	bne.n	800d488 <_vfiprintf_r+0x60>
 800d484:	68b5      	ldr	r5, [r6, #8]
 800d486:	e7df      	b.n	800d448 <_vfiprintf_r+0x20>
 800d488:	4b79      	ldr	r3, [pc, #484]	; (800d670 <_vfiprintf_r+0x248>)
 800d48a:	429d      	cmp	r5, r3
 800d48c:	bf08      	it	eq
 800d48e:	68f5      	ldreq	r5, [r6, #12]
 800d490:	e7da      	b.n	800d448 <_vfiprintf_r+0x20>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	0598      	lsls	r0, r3, #22
 800d496:	d4ed      	bmi.n	800d474 <_vfiprintf_r+0x4c>
 800d498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d49a:	f000 fb76 	bl	800db8a <__retarget_lock_release_recursive>
 800d49e:	e7e9      	b.n	800d474 <_vfiprintf_r+0x4c>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ae:	2330      	movs	r3, #48	; 0x30
 800d4b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d674 <_vfiprintf_r+0x24c>
 800d4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4b8:	f04f 0901 	mov.w	r9, #1
 800d4bc:	4623      	mov	r3, r4
 800d4be:	469a      	mov	sl, r3
 800d4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c4:	b10a      	cbz	r2, 800d4ca <_vfiprintf_r+0xa2>
 800d4c6:	2a25      	cmp	r2, #37	; 0x25
 800d4c8:	d1f9      	bne.n	800d4be <_vfiprintf_r+0x96>
 800d4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ce:	d00b      	beq.n	800d4e8 <_vfiprintf_r+0xc0>
 800d4d0:	465b      	mov	r3, fp
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f7ff ff94 	bl	800d404 <__sfputs_r>
 800d4dc:	3001      	adds	r0, #1
 800d4de:	f000 80aa 	beq.w	800d636 <_vfiprintf_r+0x20e>
 800d4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4e4:	445a      	add	r2, fp
 800d4e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 80a2 	beq.w	800d636 <_vfiprintf_r+0x20e>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4fc:	f10a 0a01 	add.w	sl, sl, #1
 800d500:	9304      	str	r3, [sp, #16]
 800d502:	9307      	str	r3, [sp, #28]
 800d504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d508:	931a      	str	r3, [sp, #104]	; 0x68
 800d50a:	4654      	mov	r4, sl
 800d50c:	2205      	movs	r2, #5
 800d50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d512:	4858      	ldr	r0, [pc, #352]	; (800d674 <_vfiprintf_r+0x24c>)
 800d514:	f7f2 fe84 	bl	8000220 <memchr>
 800d518:	9a04      	ldr	r2, [sp, #16]
 800d51a:	b9d8      	cbnz	r0, 800d554 <_vfiprintf_r+0x12c>
 800d51c:	06d1      	lsls	r1, r2, #27
 800d51e:	bf44      	itt	mi
 800d520:	2320      	movmi	r3, #32
 800d522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d526:	0713      	lsls	r3, r2, #28
 800d528:	bf44      	itt	mi
 800d52a:	232b      	movmi	r3, #43	; 0x2b
 800d52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d530:	f89a 3000 	ldrb.w	r3, [sl]
 800d534:	2b2a      	cmp	r3, #42	; 0x2a
 800d536:	d015      	beq.n	800d564 <_vfiprintf_r+0x13c>
 800d538:	9a07      	ldr	r2, [sp, #28]
 800d53a:	4654      	mov	r4, sl
 800d53c:	2000      	movs	r0, #0
 800d53e:	f04f 0c0a 	mov.w	ip, #10
 800d542:	4621      	mov	r1, r4
 800d544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d548:	3b30      	subs	r3, #48	; 0x30
 800d54a:	2b09      	cmp	r3, #9
 800d54c:	d94e      	bls.n	800d5ec <_vfiprintf_r+0x1c4>
 800d54e:	b1b0      	cbz	r0, 800d57e <_vfiprintf_r+0x156>
 800d550:	9207      	str	r2, [sp, #28]
 800d552:	e014      	b.n	800d57e <_vfiprintf_r+0x156>
 800d554:	eba0 0308 	sub.w	r3, r0, r8
 800d558:	fa09 f303 	lsl.w	r3, r9, r3
 800d55c:	4313      	orrs	r3, r2
 800d55e:	9304      	str	r3, [sp, #16]
 800d560:	46a2      	mov	sl, r4
 800d562:	e7d2      	b.n	800d50a <_vfiprintf_r+0xe2>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	1d19      	adds	r1, r3, #4
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	9103      	str	r1, [sp, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	bfbb      	ittet	lt
 800d570:	425b      	neglt	r3, r3
 800d572:	f042 0202 	orrlt.w	r2, r2, #2
 800d576:	9307      	strge	r3, [sp, #28]
 800d578:	9307      	strlt	r3, [sp, #28]
 800d57a:	bfb8      	it	lt
 800d57c:	9204      	strlt	r2, [sp, #16]
 800d57e:	7823      	ldrb	r3, [r4, #0]
 800d580:	2b2e      	cmp	r3, #46	; 0x2e
 800d582:	d10c      	bne.n	800d59e <_vfiprintf_r+0x176>
 800d584:	7863      	ldrb	r3, [r4, #1]
 800d586:	2b2a      	cmp	r3, #42	; 0x2a
 800d588:	d135      	bne.n	800d5f6 <_vfiprintf_r+0x1ce>
 800d58a:	9b03      	ldr	r3, [sp, #12]
 800d58c:	1d1a      	adds	r2, r3, #4
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	9203      	str	r2, [sp, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	bfb8      	it	lt
 800d596:	f04f 33ff 	movlt.w	r3, #4294967295
 800d59a:	3402      	adds	r4, #2
 800d59c:	9305      	str	r3, [sp, #20]
 800d59e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d684 <_vfiprintf_r+0x25c>
 800d5a2:	7821      	ldrb	r1, [r4, #0]
 800d5a4:	2203      	movs	r2, #3
 800d5a6:	4650      	mov	r0, sl
 800d5a8:	f7f2 fe3a 	bl	8000220 <memchr>
 800d5ac:	b140      	cbz	r0, 800d5c0 <_vfiprintf_r+0x198>
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	eba0 000a 	sub.w	r0, r0, sl
 800d5b4:	fa03 f000 	lsl.w	r0, r3, r0
 800d5b8:	9b04      	ldr	r3, [sp, #16]
 800d5ba:	4303      	orrs	r3, r0
 800d5bc:	3401      	adds	r4, #1
 800d5be:	9304      	str	r3, [sp, #16]
 800d5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c4:	482c      	ldr	r0, [pc, #176]	; (800d678 <_vfiprintf_r+0x250>)
 800d5c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5ca:	2206      	movs	r2, #6
 800d5cc:	f7f2 fe28 	bl	8000220 <memchr>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d03f      	beq.n	800d654 <_vfiprintf_r+0x22c>
 800d5d4:	4b29      	ldr	r3, [pc, #164]	; (800d67c <_vfiprintf_r+0x254>)
 800d5d6:	bb1b      	cbnz	r3, 800d620 <_vfiprintf_r+0x1f8>
 800d5d8:	9b03      	ldr	r3, [sp, #12]
 800d5da:	3307      	adds	r3, #7
 800d5dc:	f023 0307 	bic.w	r3, r3, #7
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	9303      	str	r3, [sp, #12]
 800d5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e6:	443b      	add	r3, r7
 800d5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ea:	e767      	b.n	800d4bc <_vfiprintf_r+0x94>
 800d5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	2001      	movs	r0, #1
 800d5f4:	e7a5      	b.n	800d542 <_vfiprintf_r+0x11a>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	3401      	adds	r4, #1
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	f04f 0c0a 	mov.w	ip, #10
 800d602:	4620      	mov	r0, r4
 800d604:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d608:	3a30      	subs	r2, #48	; 0x30
 800d60a:	2a09      	cmp	r2, #9
 800d60c:	d903      	bls.n	800d616 <_vfiprintf_r+0x1ee>
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d0c5      	beq.n	800d59e <_vfiprintf_r+0x176>
 800d612:	9105      	str	r1, [sp, #20]
 800d614:	e7c3      	b.n	800d59e <_vfiprintf_r+0x176>
 800d616:	fb0c 2101 	mla	r1, ip, r1, r2
 800d61a:	4604      	mov	r4, r0
 800d61c:	2301      	movs	r3, #1
 800d61e:	e7f0      	b.n	800d602 <_vfiprintf_r+0x1da>
 800d620:	ab03      	add	r3, sp, #12
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	462a      	mov	r2, r5
 800d626:	4b16      	ldr	r3, [pc, #88]	; (800d680 <_vfiprintf_r+0x258>)
 800d628:	a904      	add	r1, sp, #16
 800d62a:	4630      	mov	r0, r6
 800d62c:	f7fb fe94 	bl	8009358 <_printf_float>
 800d630:	4607      	mov	r7, r0
 800d632:	1c78      	adds	r0, r7, #1
 800d634:	d1d6      	bne.n	800d5e4 <_vfiprintf_r+0x1bc>
 800d636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d638:	07d9      	lsls	r1, r3, #31
 800d63a:	d405      	bmi.n	800d648 <_vfiprintf_r+0x220>
 800d63c:	89ab      	ldrh	r3, [r5, #12]
 800d63e:	059a      	lsls	r2, r3, #22
 800d640:	d402      	bmi.n	800d648 <_vfiprintf_r+0x220>
 800d642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d644:	f000 faa1 	bl	800db8a <__retarget_lock_release_recursive>
 800d648:	89ab      	ldrh	r3, [r5, #12]
 800d64a:	065b      	lsls	r3, r3, #25
 800d64c:	f53f af12 	bmi.w	800d474 <_vfiprintf_r+0x4c>
 800d650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d652:	e711      	b.n	800d478 <_vfiprintf_r+0x50>
 800d654:	ab03      	add	r3, sp, #12
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	462a      	mov	r2, r5
 800d65a:	4b09      	ldr	r3, [pc, #36]	; (800d680 <_vfiprintf_r+0x258>)
 800d65c:	a904      	add	r1, sp, #16
 800d65e:	4630      	mov	r0, r6
 800d660:	f7fc f91e 	bl	80098a0 <_printf_i>
 800d664:	e7e4      	b.n	800d630 <_vfiprintf_r+0x208>
 800d666:	bf00      	nop
 800d668:	0800e814 	.word	0x0800e814
 800d66c:	0800e834 	.word	0x0800e834
 800d670:	0800e7f4 	.word	0x0800e7f4
 800d674:	0800e7a4 	.word	0x0800e7a4
 800d678:	0800e7ae 	.word	0x0800e7ae
 800d67c:	08009359 	.word	0x08009359
 800d680:	0800d405 	.word	0x0800d405
 800d684:	0800e7aa 	.word	0x0800e7aa

0800d688 <__swbuf_r>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	460e      	mov	r6, r1
 800d68c:	4614      	mov	r4, r2
 800d68e:	4605      	mov	r5, r0
 800d690:	b118      	cbz	r0, 800d69a <__swbuf_r+0x12>
 800d692:	6983      	ldr	r3, [r0, #24]
 800d694:	b90b      	cbnz	r3, 800d69a <__swbuf_r+0x12>
 800d696:	f000 f9d9 	bl	800da4c <__sinit>
 800d69a:	4b21      	ldr	r3, [pc, #132]	; (800d720 <__swbuf_r+0x98>)
 800d69c:	429c      	cmp	r4, r3
 800d69e:	d12b      	bne.n	800d6f8 <__swbuf_r+0x70>
 800d6a0:	686c      	ldr	r4, [r5, #4]
 800d6a2:	69a3      	ldr	r3, [r4, #24]
 800d6a4:	60a3      	str	r3, [r4, #8]
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	071a      	lsls	r2, r3, #28
 800d6aa:	d52f      	bpl.n	800d70c <__swbuf_r+0x84>
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	b36b      	cbz	r3, 800d70c <__swbuf_r+0x84>
 800d6b0:	6923      	ldr	r3, [r4, #16]
 800d6b2:	6820      	ldr	r0, [r4, #0]
 800d6b4:	1ac0      	subs	r0, r0, r3
 800d6b6:	6963      	ldr	r3, [r4, #20]
 800d6b8:	b2f6      	uxtb	r6, r6
 800d6ba:	4283      	cmp	r3, r0
 800d6bc:	4637      	mov	r7, r6
 800d6be:	dc04      	bgt.n	800d6ca <__swbuf_r+0x42>
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f000 f92e 	bl	800d924 <_fflush_r>
 800d6c8:	bb30      	cbnz	r0, 800d718 <__swbuf_r+0x90>
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	60a3      	str	r3, [r4, #8]
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	6022      	str	r2, [r4, #0]
 800d6d6:	701e      	strb	r6, [r3, #0]
 800d6d8:	6963      	ldr	r3, [r4, #20]
 800d6da:	3001      	adds	r0, #1
 800d6dc:	4283      	cmp	r3, r0
 800d6de:	d004      	beq.n	800d6ea <__swbuf_r+0x62>
 800d6e0:	89a3      	ldrh	r3, [r4, #12]
 800d6e2:	07db      	lsls	r3, r3, #31
 800d6e4:	d506      	bpl.n	800d6f4 <__swbuf_r+0x6c>
 800d6e6:	2e0a      	cmp	r6, #10
 800d6e8:	d104      	bne.n	800d6f4 <__swbuf_r+0x6c>
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f000 f919 	bl	800d924 <_fflush_r>
 800d6f2:	b988      	cbnz	r0, 800d718 <__swbuf_r+0x90>
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f8:	4b0a      	ldr	r3, [pc, #40]	; (800d724 <__swbuf_r+0x9c>)
 800d6fa:	429c      	cmp	r4, r3
 800d6fc:	d101      	bne.n	800d702 <__swbuf_r+0x7a>
 800d6fe:	68ac      	ldr	r4, [r5, #8]
 800d700:	e7cf      	b.n	800d6a2 <__swbuf_r+0x1a>
 800d702:	4b09      	ldr	r3, [pc, #36]	; (800d728 <__swbuf_r+0xa0>)
 800d704:	429c      	cmp	r4, r3
 800d706:	bf08      	it	eq
 800d708:	68ec      	ldreq	r4, [r5, #12]
 800d70a:	e7ca      	b.n	800d6a2 <__swbuf_r+0x1a>
 800d70c:	4621      	mov	r1, r4
 800d70e:	4628      	mov	r0, r5
 800d710:	f000 f80c 	bl	800d72c <__swsetup_r>
 800d714:	2800      	cmp	r0, #0
 800d716:	d0cb      	beq.n	800d6b0 <__swbuf_r+0x28>
 800d718:	f04f 37ff 	mov.w	r7, #4294967295
 800d71c:	e7ea      	b.n	800d6f4 <__swbuf_r+0x6c>
 800d71e:	bf00      	nop
 800d720:	0800e814 	.word	0x0800e814
 800d724:	0800e834 	.word	0x0800e834
 800d728:	0800e7f4 	.word	0x0800e7f4

0800d72c <__swsetup_r>:
 800d72c:	4b32      	ldr	r3, [pc, #200]	; (800d7f8 <__swsetup_r+0xcc>)
 800d72e:	b570      	push	{r4, r5, r6, lr}
 800d730:	681d      	ldr	r5, [r3, #0]
 800d732:	4606      	mov	r6, r0
 800d734:	460c      	mov	r4, r1
 800d736:	b125      	cbz	r5, 800d742 <__swsetup_r+0x16>
 800d738:	69ab      	ldr	r3, [r5, #24]
 800d73a:	b913      	cbnz	r3, 800d742 <__swsetup_r+0x16>
 800d73c:	4628      	mov	r0, r5
 800d73e:	f000 f985 	bl	800da4c <__sinit>
 800d742:	4b2e      	ldr	r3, [pc, #184]	; (800d7fc <__swsetup_r+0xd0>)
 800d744:	429c      	cmp	r4, r3
 800d746:	d10f      	bne.n	800d768 <__swsetup_r+0x3c>
 800d748:	686c      	ldr	r4, [r5, #4]
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d750:	0719      	lsls	r1, r3, #28
 800d752:	d42c      	bmi.n	800d7ae <__swsetup_r+0x82>
 800d754:	06dd      	lsls	r5, r3, #27
 800d756:	d411      	bmi.n	800d77c <__swsetup_r+0x50>
 800d758:	2309      	movs	r3, #9
 800d75a:	6033      	str	r3, [r6, #0]
 800d75c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	f04f 30ff 	mov.w	r0, #4294967295
 800d766:	e03e      	b.n	800d7e6 <__swsetup_r+0xba>
 800d768:	4b25      	ldr	r3, [pc, #148]	; (800d800 <__swsetup_r+0xd4>)
 800d76a:	429c      	cmp	r4, r3
 800d76c:	d101      	bne.n	800d772 <__swsetup_r+0x46>
 800d76e:	68ac      	ldr	r4, [r5, #8]
 800d770:	e7eb      	b.n	800d74a <__swsetup_r+0x1e>
 800d772:	4b24      	ldr	r3, [pc, #144]	; (800d804 <__swsetup_r+0xd8>)
 800d774:	429c      	cmp	r4, r3
 800d776:	bf08      	it	eq
 800d778:	68ec      	ldreq	r4, [r5, #12]
 800d77a:	e7e6      	b.n	800d74a <__swsetup_r+0x1e>
 800d77c:	0758      	lsls	r0, r3, #29
 800d77e:	d512      	bpl.n	800d7a6 <__swsetup_r+0x7a>
 800d780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d782:	b141      	cbz	r1, 800d796 <__swsetup_r+0x6a>
 800d784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d788:	4299      	cmp	r1, r3
 800d78a:	d002      	beq.n	800d792 <__swsetup_r+0x66>
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff fb25 	bl	800cddc <_free_r>
 800d792:	2300      	movs	r3, #0
 800d794:	6363      	str	r3, [r4, #52]	; 0x34
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d79c:	81a3      	strh	r3, [r4, #12]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	6063      	str	r3, [r4, #4]
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	f043 0308 	orr.w	r3, r3, #8
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	b94b      	cbnz	r3, 800d7c6 <__swsetup_r+0x9a>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7bc:	d003      	beq.n	800d7c6 <__swsetup_r+0x9a>
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f000 fa09 	bl	800dbd8 <__smakebuf_r>
 800d7c6:	89a0      	ldrh	r0, [r4, #12]
 800d7c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7cc:	f010 0301 	ands.w	r3, r0, #1
 800d7d0:	d00a      	beq.n	800d7e8 <__swsetup_r+0xbc>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60a3      	str	r3, [r4, #8]
 800d7d6:	6963      	ldr	r3, [r4, #20]
 800d7d8:	425b      	negs	r3, r3
 800d7da:	61a3      	str	r3, [r4, #24]
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	b943      	cbnz	r3, 800d7f2 <__swsetup_r+0xc6>
 800d7e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7e4:	d1ba      	bne.n	800d75c <__swsetup_r+0x30>
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}
 800d7e8:	0781      	lsls	r1, r0, #30
 800d7ea:	bf58      	it	pl
 800d7ec:	6963      	ldrpl	r3, [r4, #20]
 800d7ee:	60a3      	str	r3, [r4, #8]
 800d7f0:	e7f4      	b.n	800d7dc <__swsetup_r+0xb0>
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	e7f7      	b.n	800d7e6 <__swsetup_r+0xba>
 800d7f6:	bf00      	nop
 800d7f8:	2000003c 	.word	0x2000003c
 800d7fc:	0800e814 	.word	0x0800e814
 800d800:	0800e834 	.word	0x0800e834
 800d804:	0800e7f4 	.word	0x0800e7f4

0800d808 <abort>:
 800d808:	b508      	push	{r3, lr}
 800d80a:	2006      	movs	r0, #6
 800d80c:	f000 fa54 	bl	800dcb8 <raise>
 800d810:	2001      	movs	r0, #1
 800d812:	f7f6 fd6e 	bl	80042f2 <_exit>
	...

0800d818 <__sflush_r>:
 800d818:	898a      	ldrh	r2, [r1, #12]
 800d81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81e:	4605      	mov	r5, r0
 800d820:	0710      	lsls	r0, r2, #28
 800d822:	460c      	mov	r4, r1
 800d824:	d458      	bmi.n	800d8d8 <__sflush_r+0xc0>
 800d826:	684b      	ldr	r3, [r1, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dc05      	bgt.n	800d838 <__sflush_r+0x20>
 800d82c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dc02      	bgt.n	800d838 <__sflush_r+0x20>
 800d832:	2000      	movs	r0, #0
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d83a:	2e00      	cmp	r6, #0
 800d83c:	d0f9      	beq.n	800d832 <__sflush_r+0x1a>
 800d83e:	2300      	movs	r3, #0
 800d840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d844:	682f      	ldr	r7, [r5, #0]
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	d032      	beq.n	800d8b0 <__sflush_r+0x98>
 800d84a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	075a      	lsls	r2, r3, #29
 800d850:	d505      	bpl.n	800d85e <__sflush_r+0x46>
 800d852:	6863      	ldr	r3, [r4, #4]
 800d854:	1ac0      	subs	r0, r0, r3
 800d856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d858:	b10b      	cbz	r3, 800d85e <__sflush_r+0x46>
 800d85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d85c:	1ac0      	subs	r0, r0, r3
 800d85e:	2300      	movs	r3, #0
 800d860:	4602      	mov	r2, r0
 800d862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d864:	6a21      	ldr	r1, [r4, #32]
 800d866:	4628      	mov	r0, r5
 800d868:	47b0      	blx	r6
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	89a3      	ldrh	r3, [r4, #12]
 800d86e:	d106      	bne.n	800d87e <__sflush_r+0x66>
 800d870:	6829      	ldr	r1, [r5, #0]
 800d872:	291d      	cmp	r1, #29
 800d874:	d82c      	bhi.n	800d8d0 <__sflush_r+0xb8>
 800d876:	4a2a      	ldr	r2, [pc, #168]	; (800d920 <__sflush_r+0x108>)
 800d878:	40ca      	lsrs	r2, r1
 800d87a:	07d6      	lsls	r6, r2, #31
 800d87c:	d528      	bpl.n	800d8d0 <__sflush_r+0xb8>
 800d87e:	2200      	movs	r2, #0
 800d880:	6062      	str	r2, [r4, #4]
 800d882:	04d9      	lsls	r1, r3, #19
 800d884:	6922      	ldr	r2, [r4, #16]
 800d886:	6022      	str	r2, [r4, #0]
 800d888:	d504      	bpl.n	800d894 <__sflush_r+0x7c>
 800d88a:	1c42      	adds	r2, r0, #1
 800d88c:	d101      	bne.n	800d892 <__sflush_r+0x7a>
 800d88e:	682b      	ldr	r3, [r5, #0]
 800d890:	b903      	cbnz	r3, 800d894 <__sflush_r+0x7c>
 800d892:	6560      	str	r0, [r4, #84]	; 0x54
 800d894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d896:	602f      	str	r7, [r5, #0]
 800d898:	2900      	cmp	r1, #0
 800d89a:	d0ca      	beq.n	800d832 <__sflush_r+0x1a>
 800d89c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8a0:	4299      	cmp	r1, r3
 800d8a2:	d002      	beq.n	800d8aa <__sflush_r+0x92>
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f7ff fa99 	bl	800cddc <_free_r>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	6360      	str	r0, [r4, #52]	; 0x34
 800d8ae:	e7c1      	b.n	800d834 <__sflush_r+0x1c>
 800d8b0:	6a21      	ldr	r1, [r4, #32]
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	47b0      	blx	r6
 800d8b8:	1c41      	adds	r1, r0, #1
 800d8ba:	d1c7      	bne.n	800d84c <__sflush_r+0x34>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d0c4      	beq.n	800d84c <__sflush_r+0x34>
 800d8c2:	2b1d      	cmp	r3, #29
 800d8c4:	d001      	beq.n	800d8ca <__sflush_r+0xb2>
 800d8c6:	2b16      	cmp	r3, #22
 800d8c8:	d101      	bne.n	800d8ce <__sflush_r+0xb6>
 800d8ca:	602f      	str	r7, [r5, #0]
 800d8cc:	e7b1      	b.n	800d832 <__sflush_r+0x1a>
 800d8ce:	89a3      	ldrh	r3, [r4, #12]
 800d8d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8d4:	81a3      	strh	r3, [r4, #12]
 800d8d6:	e7ad      	b.n	800d834 <__sflush_r+0x1c>
 800d8d8:	690f      	ldr	r7, [r1, #16]
 800d8da:	2f00      	cmp	r7, #0
 800d8dc:	d0a9      	beq.n	800d832 <__sflush_r+0x1a>
 800d8de:	0793      	lsls	r3, r2, #30
 800d8e0:	680e      	ldr	r6, [r1, #0]
 800d8e2:	bf08      	it	eq
 800d8e4:	694b      	ldreq	r3, [r1, #20]
 800d8e6:	600f      	str	r7, [r1, #0]
 800d8e8:	bf18      	it	ne
 800d8ea:	2300      	movne	r3, #0
 800d8ec:	eba6 0807 	sub.w	r8, r6, r7
 800d8f0:	608b      	str	r3, [r1, #8]
 800d8f2:	f1b8 0f00 	cmp.w	r8, #0
 800d8f6:	dd9c      	ble.n	800d832 <__sflush_r+0x1a>
 800d8f8:	6a21      	ldr	r1, [r4, #32]
 800d8fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8fc:	4643      	mov	r3, r8
 800d8fe:	463a      	mov	r2, r7
 800d900:	4628      	mov	r0, r5
 800d902:	47b0      	blx	r6
 800d904:	2800      	cmp	r0, #0
 800d906:	dc06      	bgt.n	800d916 <__sflush_r+0xfe>
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d90e:	81a3      	strh	r3, [r4, #12]
 800d910:	f04f 30ff 	mov.w	r0, #4294967295
 800d914:	e78e      	b.n	800d834 <__sflush_r+0x1c>
 800d916:	4407      	add	r7, r0
 800d918:	eba8 0800 	sub.w	r8, r8, r0
 800d91c:	e7e9      	b.n	800d8f2 <__sflush_r+0xda>
 800d91e:	bf00      	nop
 800d920:	20400001 	.word	0x20400001

0800d924 <_fflush_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	690b      	ldr	r3, [r1, #16]
 800d928:	4605      	mov	r5, r0
 800d92a:	460c      	mov	r4, r1
 800d92c:	b913      	cbnz	r3, 800d934 <_fflush_r+0x10>
 800d92e:	2500      	movs	r5, #0
 800d930:	4628      	mov	r0, r5
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	b118      	cbz	r0, 800d93e <_fflush_r+0x1a>
 800d936:	6983      	ldr	r3, [r0, #24]
 800d938:	b90b      	cbnz	r3, 800d93e <_fflush_r+0x1a>
 800d93a:	f000 f887 	bl	800da4c <__sinit>
 800d93e:	4b14      	ldr	r3, [pc, #80]	; (800d990 <_fflush_r+0x6c>)
 800d940:	429c      	cmp	r4, r3
 800d942:	d11b      	bne.n	800d97c <_fflush_r+0x58>
 800d944:	686c      	ldr	r4, [r5, #4]
 800d946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d0ef      	beq.n	800d92e <_fflush_r+0xa>
 800d94e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d950:	07d0      	lsls	r0, r2, #31
 800d952:	d404      	bmi.n	800d95e <_fflush_r+0x3a>
 800d954:	0599      	lsls	r1, r3, #22
 800d956:	d402      	bmi.n	800d95e <_fflush_r+0x3a>
 800d958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d95a:	f000 f915 	bl	800db88 <__retarget_lock_acquire_recursive>
 800d95e:	4628      	mov	r0, r5
 800d960:	4621      	mov	r1, r4
 800d962:	f7ff ff59 	bl	800d818 <__sflush_r>
 800d966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d968:	07da      	lsls	r2, r3, #31
 800d96a:	4605      	mov	r5, r0
 800d96c:	d4e0      	bmi.n	800d930 <_fflush_r+0xc>
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	059b      	lsls	r3, r3, #22
 800d972:	d4dd      	bmi.n	800d930 <_fflush_r+0xc>
 800d974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d976:	f000 f908 	bl	800db8a <__retarget_lock_release_recursive>
 800d97a:	e7d9      	b.n	800d930 <_fflush_r+0xc>
 800d97c:	4b05      	ldr	r3, [pc, #20]	; (800d994 <_fflush_r+0x70>)
 800d97e:	429c      	cmp	r4, r3
 800d980:	d101      	bne.n	800d986 <_fflush_r+0x62>
 800d982:	68ac      	ldr	r4, [r5, #8]
 800d984:	e7df      	b.n	800d946 <_fflush_r+0x22>
 800d986:	4b04      	ldr	r3, [pc, #16]	; (800d998 <_fflush_r+0x74>)
 800d988:	429c      	cmp	r4, r3
 800d98a:	bf08      	it	eq
 800d98c:	68ec      	ldreq	r4, [r5, #12]
 800d98e:	e7da      	b.n	800d946 <_fflush_r+0x22>
 800d990:	0800e814 	.word	0x0800e814
 800d994:	0800e834 	.word	0x0800e834
 800d998:	0800e7f4 	.word	0x0800e7f4

0800d99c <std>:
 800d99c:	2300      	movs	r3, #0
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9aa:	6083      	str	r3, [r0, #8]
 800d9ac:	8181      	strh	r1, [r0, #12]
 800d9ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d9b0:	81c2      	strh	r2, [r0, #14]
 800d9b2:	6183      	str	r3, [r0, #24]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	2208      	movs	r2, #8
 800d9b8:	305c      	adds	r0, #92	; 0x5c
 800d9ba:	f7fb fc25 	bl	8009208 <memset>
 800d9be:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <std+0x38>)
 800d9c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d9c2:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <std+0x3c>)
 800d9c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9c6:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <std+0x40>)
 800d9c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9ca:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <std+0x44>)
 800d9cc:	6224      	str	r4, [r4, #32]
 800d9ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d9d0:	bd10      	pop	{r4, pc}
 800d9d2:	bf00      	nop
 800d9d4:	0800dcf1 	.word	0x0800dcf1
 800d9d8:	0800dd13 	.word	0x0800dd13
 800d9dc:	0800dd4b 	.word	0x0800dd4b
 800d9e0:	0800dd6f 	.word	0x0800dd6f

0800d9e4 <_cleanup_r>:
 800d9e4:	4901      	ldr	r1, [pc, #4]	; (800d9ec <_cleanup_r+0x8>)
 800d9e6:	f000 b8af 	b.w	800db48 <_fwalk_reent>
 800d9ea:	bf00      	nop
 800d9ec:	0800d925 	.word	0x0800d925

0800d9f0 <__sfmoreglue>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	2268      	movs	r2, #104	; 0x68
 800d9f4:	1e4d      	subs	r5, r1, #1
 800d9f6:	4355      	muls	r5, r2
 800d9f8:	460e      	mov	r6, r1
 800d9fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9fe:	f7ff fa59 	bl	800ceb4 <_malloc_r>
 800da02:	4604      	mov	r4, r0
 800da04:	b140      	cbz	r0, 800da18 <__sfmoreglue+0x28>
 800da06:	2100      	movs	r1, #0
 800da08:	e9c0 1600 	strd	r1, r6, [r0]
 800da0c:	300c      	adds	r0, #12
 800da0e:	60a0      	str	r0, [r4, #8]
 800da10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da14:	f7fb fbf8 	bl	8009208 <memset>
 800da18:	4620      	mov	r0, r4
 800da1a:	bd70      	pop	{r4, r5, r6, pc}

0800da1c <__sfp_lock_acquire>:
 800da1c:	4801      	ldr	r0, [pc, #4]	; (800da24 <__sfp_lock_acquire+0x8>)
 800da1e:	f000 b8b3 	b.w	800db88 <__retarget_lock_acquire_recursive>
 800da22:	bf00      	nop
 800da24:	20000745 	.word	0x20000745

0800da28 <__sfp_lock_release>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__sfp_lock_release+0x8>)
 800da2a:	f000 b8ae 	b.w	800db8a <__retarget_lock_release_recursive>
 800da2e:	bf00      	nop
 800da30:	20000745 	.word	0x20000745

0800da34 <__sinit_lock_acquire>:
 800da34:	4801      	ldr	r0, [pc, #4]	; (800da3c <__sinit_lock_acquire+0x8>)
 800da36:	f000 b8a7 	b.w	800db88 <__retarget_lock_acquire_recursive>
 800da3a:	bf00      	nop
 800da3c:	20000746 	.word	0x20000746

0800da40 <__sinit_lock_release>:
 800da40:	4801      	ldr	r0, [pc, #4]	; (800da48 <__sinit_lock_release+0x8>)
 800da42:	f000 b8a2 	b.w	800db8a <__retarget_lock_release_recursive>
 800da46:	bf00      	nop
 800da48:	20000746 	.word	0x20000746

0800da4c <__sinit>:
 800da4c:	b510      	push	{r4, lr}
 800da4e:	4604      	mov	r4, r0
 800da50:	f7ff fff0 	bl	800da34 <__sinit_lock_acquire>
 800da54:	69a3      	ldr	r3, [r4, #24]
 800da56:	b11b      	cbz	r3, 800da60 <__sinit+0x14>
 800da58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da5c:	f7ff bff0 	b.w	800da40 <__sinit_lock_release>
 800da60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da64:	6523      	str	r3, [r4, #80]	; 0x50
 800da66:	4b13      	ldr	r3, [pc, #76]	; (800dab4 <__sinit+0x68>)
 800da68:	4a13      	ldr	r2, [pc, #76]	; (800dab8 <__sinit+0x6c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800da6e:	42a3      	cmp	r3, r4
 800da70:	bf04      	itt	eq
 800da72:	2301      	moveq	r3, #1
 800da74:	61a3      	streq	r3, [r4, #24]
 800da76:	4620      	mov	r0, r4
 800da78:	f000 f820 	bl	800dabc <__sfp>
 800da7c:	6060      	str	r0, [r4, #4]
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f81c 	bl	800dabc <__sfp>
 800da84:	60a0      	str	r0, [r4, #8]
 800da86:	4620      	mov	r0, r4
 800da88:	f000 f818 	bl	800dabc <__sfp>
 800da8c:	2200      	movs	r2, #0
 800da8e:	60e0      	str	r0, [r4, #12]
 800da90:	2104      	movs	r1, #4
 800da92:	6860      	ldr	r0, [r4, #4]
 800da94:	f7ff ff82 	bl	800d99c <std>
 800da98:	68a0      	ldr	r0, [r4, #8]
 800da9a:	2201      	movs	r2, #1
 800da9c:	2109      	movs	r1, #9
 800da9e:	f7ff ff7d 	bl	800d99c <std>
 800daa2:	68e0      	ldr	r0, [r4, #12]
 800daa4:	2202      	movs	r2, #2
 800daa6:	2112      	movs	r1, #18
 800daa8:	f7ff ff78 	bl	800d99c <std>
 800daac:	2301      	movs	r3, #1
 800daae:	61a3      	str	r3, [r4, #24]
 800dab0:	e7d2      	b.n	800da58 <__sinit+0xc>
 800dab2:	bf00      	nop
 800dab4:	0800e3ac 	.word	0x0800e3ac
 800dab8:	0800d9e5 	.word	0x0800d9e5

0800dabc <__sfp>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	4607      	mov	r7, r0
 800dac0:	f7ff ffac 	bl	800da1c <__sfp_lock_acquire>
 800dac4:	4b1e      	ldr	r3, [pc, #120]	; (800db40 <__sfp+0x84>)
 800dac6:	681e      	ldr	r6, [r3, #0]
 800dac8:	69b3      	ldr	r3, [r6, #24]
 800daca:	b913      	cbnz	r3, 800dad2 <__sfp+0x16>
 800dacc:	4630      	mov	r0, r6
 800dace:	f7ff ffbd 	bl	800da4c <__sinit>
 800dad2:	3648      	adds	r6, #72	; 0x48
 800dad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dad8:	3b01      	subs	r3, #1
 800dada:	d503      	bpl.n	800dae4 <__sfp+0x28>
 800dadc:	6833      	ldr	r3, [r6, #0]
 800dade:	b30b      	cbz	r3, 800db24 <__sfp+0x68>
 800dae0:	6836      	ldr	r6, [r6, #0]
 800dae2:	e7f7      	b.n	800dad4 <__sfp+0x18>
 800dae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dae8:	b9d5      	cbnz	r5, 800db20 <__sfp+0x64>
 800daea:	4b16      	ldr	r3, [pc, #88]	; (800db44 <__sfp+0x88>)
 800daec:	60e3      	str	r3, [r4, #12]
 800daee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800daf2:	6665      	str	r5, [r4, #100]	; 0x64
 800daf4:	f000 f847 	bl	800db86 <__retarget_lock_init_recursive>
 800daf8:	f7ff ff96 	bl	800da28 <__sfp_lock_release>
 800dafc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db04:	6025      	str	r5, [r4, #0]
 800db06:	61a5      	str	r5, [r4, #24]
 800db08:	2208      	movs	r2, #8
 800db0a:	4629      	mov	r1, r5
 800db0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db10:	f7fb fb7a 	bl	8009208 <memset>
 800db14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db1c:	4620      	mov	r0, r4
 800db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db20:	3468      	adds	r4, #104	; 0x68
 800db22:	e7d9      	b.n	800dad8 <__sfp+0x1c>
 800db24:	2104      	movs	r1, #4
 800db26:	4638      	mov	r0, r7
 800db28:	f7ff ff62 	bl	800d9f0 <__sfmoreglue>
 800db2c:	4604      	mov	r4, r0
 800db2e:	6030      	str	r0, [r6, #0]
 800db30:	2800      	cmp	r0, #0
 800db32:	d1d5      	bne.n	800dae0 <__sfp+0x24>
 800db34:	f7ff ff78 	bl	800da28 <__sfp_lock_release>
 800db38:	230c      	movs	r3, #12
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	e7ee      	b.n	800db1c <__sfp+0x60>
 800db3e:	bf00      	nop
 800db40:	0800e3ac 	.word	0x0800e3ac
 800db44:	ffff0001 	.word	0xffff0001

0800db48 <_fwalk_reent>:
 800db48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db4c:	4606      	mov	r6, r0
 800db4e:	4688      	mov	r8, r1
 800db50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db54:	2700      	movs	r7, #0
 800db56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db5a:	f1b9 0901 	subs.w	r9, r9, #1
 800db5e:	d505      	bpl.n	800db6c <_fwalk_reent+0x24>
 800db60:	6824      	ldr	r4, [r4, #0]
 800db62:	2c00      	cmp	r4, #0
 800db64:	d1f7      	bne.n	800db56 <_fwalk_reent+0xe>
 800db66:	4638      	mov	r0, r7
 800db68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6c:	89ab      	ldrh	r3, [r5, #12]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d907      	bls.n	800db82 <_fwalk_reent+0x3a>
 800db72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db76:	3301      	adds	r3, #1
 800db78:	d003      	beq.n	800db82 <_fwalk_reent+0x3a>
 800db7a:	4629      	mov	r1, r5
 800db7c:	4630      	mov	r0, r6
 800db7e:	47c0      	blx	r8
 800db80:	4307      	orrs	r7, r0
 800db82:	3568      	adds	r5, #104	; 0x68
 800db84:	e7e9      	b.n	800db5a <_fwalk_reent+0x12>

0800db86 <__retarget_lock_init_recursive>:
 800db86:	4770      	bx	lr

0800db88 <__retarget_lock_acquire_recursive>:
 800db88:	4770      	bx	lr

0800db8a <__retarget_lock_release_recursive>:
 800db8a:	4770      	bx	lr

0800db8c <__swhatbuf_r>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	460e      	mov	r6, r1
 800db90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db94:	2900      	cmp	r1, #0
 800db96:	b096      	sub	sp, #88	; 0x58
 800db98:	4614      	mov	r4, r2
 800db9a:	461d      	mov	r5, r3
 800db9c:	da08      	bge.n	800dbb0 <__swhatbuf_r+0x24>
 800db9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	602a      	str	r2, [r5, #0]
 800dba6:	061a      	lsls	r2, r3, #24
 800dba8:	d410      	bmi.n	800dbcc <__swhatbuf_r+0x40>
 800dbaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbae:	e00e      	b.n	800dbce <__swhatbuf_r+0x42>
 800dbb0:	466a      	mov	r2, sp
 800dbb2:	f000 f903 	bl	800ddbc <_fstat_r>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	dbf1      	blt.n	800db9e <__swhatbuf_r+0x12>
 800dbba:	9a01      	ldr	r2, [sp, #4]
 800dbbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbc4:	425a      	negs	r2, r3
 800dbc6:	415a      	adcs	r2, r3
 800dbc8:	602a      	str	r2, [r5, #0]
 800dbca:	e7ee      	b.n	800dbaa <__swhatbuf_r+0x1e>
 800dbcc:	2340      	movs	r3, #64	; 0x40
 800dbce:	2000      	movs	r0, #0
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	b016      	add	sp, #88	; 0x58
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbd8 <__smakebuf_r>:
 800dbd8:	898b      	ldrh	r3, [r1, #12]
 800dbda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbdc:	079d      	lsls	r5, r3, #30
 800dbde:	4606      	mov	r6, r0
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	d507      	bpl.n	800dbf4 <__smakebuf_r+0x1c>
 800dbe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	2301      	movs	r3, #1
 800dbee:	6163      	str	r3, [r4, #20]
 800dbf0:	b002      	add	sp, #8
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	ab01      	add	r3, sp, #4
 800dbf6:	466a      	mov	r2, sp
 800dbf8:	f7ff ffc8 	bl	800db8c <__swhatbuf_r>
 800dbfc:	9900      	ldr	r1, [sp, #0]
 800dbfe:	4605      	mov	r5, r0
 800dc00:	4630      	mov	r0, r6
 800dc02:	f7ff f957 	bl	800ceb4 <_malloc_r>
 800dc06:	b948      	cbnz	r0, 800dc1c <__smakebuf_r+0x44>
 800dc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0c:	059a      	lsls	r2, r3, #22
 800dc0e:	d4ef      	bmi.n	800dbf0 <__smakebuf_r+0x18>
 800dc10:	f023 0303 	bic.w	r3, r3, #3
 800dc14:	f043 0302 	orr.w	r3, r3, #2
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	e7e3      	b.n	800dbe4 <__smakebuf_r+0xc>
 800dc1c:	4b0d      	ldr	r3, [pc, #52]	; (800dc54 <__smakebuf_r+0x7c>)
 800dc1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	6020      	str	r0, [r4, #0]
 800dc24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc28:	81a3      	strh	r3, [r4, #12]
 800dc2a:	9b00      	ldr	r3, [sp, #0]
 800dc2c:	6163      	str	r3, [r4, #20]
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	6120      	str	r0, [r4, #16]
 800dc32:	b15b      	cbz	r3, 800dc4c <__smakebuf_r+0x74>
 800dc34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 f8d1 	bl	800dde0 <_isatty_r>
 800dc3e:	b128      	cbz	r0, 800dc4c <__smakebuf_r+0x74>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	f023 0303 	bic.w	r3, r3, #3
 800dc46:	f043 0301 	orr.w	r3, r3, #1
 800dc4a:	81a3      	strh	r3, [r4, #12]
 800dc4c:	89a0      	ldrh	r0, [r4, #12]
 800dc4e:	4305      	orrs	r5, r0
 800dc50:	81a5      	strh	r5, [r4, #12]
 800dc52:	e7cd      	b.n	800dbf0 <__smakebuf_r+0x18>
 800dc54:	0800d9e5 	.word	0x0800d9e5

0800dc58 <_malloc_usable_size_r>:
 800dc58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc5c:	1f18      	subs	r0, r3, #4
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	bfbc      	itt	lt
 800dc62:	580b      	ldrlt	r3, [r1, r0]
 800dc64:	18c0      	addlt	r0, r0, r3
 800dc66:	4770      	bx	lr

0800dc68 <_raise_r>:
 800dc68:	291f      	cmp	r1, #31
 800dc6a:	b538      	push	{r3, r4, r5, lr}
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	460d      	mov	r5, r1
 800dc70:	d904      	bls.n	800dc7c <_raise_r+0x14>
 800dc72:	2316      	movs	r3, #22
 800dc74:	6003      	str	r3, [r0, #0]
 800dc76:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc7e:	b112      	cbz	r2, 800dc86 <_raise_r+0x1e>
 800dc80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc84:	b94b      	cbnz	r3, 800dc9a <_raise_r+0x32>
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 f830 	bl	800dcec <_getpid_r>
 800dc8c:	462a      	mov	r2, r5
 800dc8e:	4601      	mov	r1, r0
 800dc90:	4620      	mov	r0, r4
 800dc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc96:	f000 b817 	b.w	800dcc8 <_kill_r>
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d00a      	beq.n	800dcb4 <_raise_r+0x4c>
 800dc9e:	1c59      	adds	r1, r3, #1
 800dca0:	d103      	bne.n	800dcaa <_raise_r+0x42>
 800dca2:	2316      	movs	r3, #22
 800dca4:	6003      	str	r3, [r0, #0]
 800dca6:	2001      	movs	r0, #1
 800dca8:	e7e7      	b.n	800dc7a <_raise_r+0x12>
 800dcaa:	2400      	movs	r4, #0
 800dcac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	4798      	blx	r3
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	e7e0      	b.n	800dc7a <_raise_r+0x12>

0800dcb8 <raise>:
 800dcb8:	4b02      	ldr	r3, [pc, #8]	; (800dcc4 <raise+0xc>)
 800dcba:	4601      	mov	r1, r0
 800dcbc:	6818      	ldr	r0, [r3, #0]
 800dcbe:	f7ff bfd3 	b.w	800dc68 <_raise_r>
 800dcc2:	bf00      	nop
 800dcc4:	2000003c 	.word	0x2000003c

0800dcc8 <_kill_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	; (800dce8 <_kill_r+0x20>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	602b      	str	r3, [r5, #0]
 800dcd6:	f7f6 fafc 	bl	80042d2 <_kill>
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	d102      	bne.n	800dce4 <_kill_r+0x1c>
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	b103      	cbz	r3, 800dce4 <_kill_r+0x1c>
 800dce2:	6023      	str	r3, [r4, #0]
 800dce4:	bd38      	pop	{r3, r4, r5, pc}
 800dce6:	bf00      	nop
 800dce8:	20000740 	.word	0x20000740

0800dcec <_getpid_r>:
 800dcec:	f7f6 bae9 	b.w	80042c2 <_getpid>

0800dcf0 <__sread>:
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf8:	f000 f894 	bl	800de24 <_read_r>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	bfab      	itete	ge
 800dd00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd02:	89a3      	ldrhlt	r3, [r4, #12]
 800dd04:	181b      	addge	r3, r3, r0
 800dd06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd0a:	bfac      	ite	ge
 800dd0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd0e:	81a3      	strhlt	r3, [r4, #12]
 800dd10:	bd10      	pop	{r4, pc}

0800dd12 <__swrite>:
 800dd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd16:	461f      	mov	r7, r3
 800dd18:	898b      	ldrh	r3, [r1, #12]
 800dd1a:	05db      	lsls	r3, r3, #23
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	4616      	mov	r6, r2
 800dd22:	d505      	bpl.n	800dd30 <__swrite+0x1e>
 800dd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd28:	2302      	movs	r3, #2
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f000 f868 	bl	800de00 <_lseek_r>
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd3a:	81a3      	strh	r3, [r4, #12]
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	463b      	mov	r3, r7
 800dd40:	4628      	mov	r0, r5
 800dd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	f000 b817 	b.w	800dd78 <_write_r>

0800dd4a <__sseek>:
 800dd4a:	b510      	push	{r4, lr}
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd52:	f000 f855 	bl	800de00 <_lseek_r>
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	bf15      	itete	ne
 800dd5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd66:	81a3      	strheq	r3, [r4, #12]
 800dd68:	bf18      	it	ne
 800dd6a:	81a3      	strhne	r3, [r4, #12]
 800dd6c:	bd10      	pop	{r4, pc}

0800dd6e <__sclose>:
 800dd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd72:	f000 b813 	b.w	800dd9c <_close_r>
	...

0800dd78 <_write_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	4d07      	ldr	r5, [pc, #28]	; (800dd98 <_write_r+0x20>)
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	4608      	mov	r0, r1
 800dd80:	4611      	mov	r1, r2
 800dd82:	2200      	movs	r2, #0
 800dd84:	602a      	str	r2, [r5, #0]
 800dd86:	461a      	mov	r2, r3
 800dd88:	f7f6 fada 	bl	8004340 <_write>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_write_r+0x1e>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_write_r+0x1e>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	20000740 	.word	0x20000740

0800dd9c <_close_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d06      	ldr	r5, [pc, #24]	; (800ddb8 <_close_r+0x1c>)
 800dda0:	2300      	movs	r3, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	602b      	str	r3, [r5, #0]
 800dda8:	f7f6 fae6 	bl	8004378 <_close>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d102      	bne.n	800ddb6 <_close_r+0x1a>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	b103      	cbz	r3, 800ddb6 <_close_r+0x1a>
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	20000740 	.word	0x20000740

0800ddbc <_fstat_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	; (800dddc <_fstat_r+0x20>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f7f6 fae1 	bl	8004390 <_fstat>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d102      	bne.n	800ddd8 <_fstat_r+0x1c>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	b103      	cbz	r3, 800ddd8 <_fstat_r+0x1c>
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	20000740 	.word	0x20000740

0800dde0 <_isatty_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d06      	ldr	r5, [pc, #24]	; (800ddfc <_isatty_r+0x1c>)
 800dde4:	2300      	movs	r3, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	602b      	str	r3, [r5, #0]
 800ddec:	f7f6 fae0 	bl	80043b0 <_isatty>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_isatty_r+0x1a>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_isatty_r+0x1a>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	20000740 	.word	0x20000740

0800de00 <_lseek_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4d07      	ldr	r5, [pc, #28]	; (800de20 <_lseek_r+0x20>)
 800de04:	4604      	mov	r4, r0
 800de06:	4608      	mov	r0, r1
 800de08:	4611      	mov	r1, r2
 800de0a:	2200      	movs	r2, #0
 800de0c:	602a      	str	r2, [r5, #0]
 800de0e:	461a      	mov	r2, r3
 800de10:	f7f6 fad9 	bl	80043c6 <_lseek>
 800de14:	1c43      	adds	r3, r0, #1
 800de16:	d102      	bne.n	800de1e <_lseek_r+0x1e>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	b103      	cbz	r3, 800de1e <_lseek_r+0x1e>
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	20000740 	.word	0x20000740

0800de24 <_read_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	4d07      	ldr	r5, [pc, #28]	; (800de44 <_read_r+0x20>)
 800de28:	4604      	mov	r4, r0
 800de2a:	4608      	mov	r0, r1
 800de2c:	4611      	mov	r1, r2
 800de2e:	2200      	movs	r2, #0
 800de30:	602a      	str	r2, [r5, #0]
 800de32:	461a      	mov	r2, r3
 800de34:	f7f6 fa67 	bl	8004306 <_read>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_read_r+0x1e>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_read_r+0x1e>
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	20000740 	.word	0x20000740

0800de48 <atan>:
 800de48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	ec55 4b10 	vmov	r4, r5, d0
 800de50:	4bc3      	ldr	r3, [pc, #780]	; (800e160 <atan+0x318>)
 800de52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de56:	429e      	cmp	r6, r3
 800de58:	46ab      	mov	fp, r5
 800de5a:	dd18      	ble.n	800de8e <atan+0x46>
 800de5c:	4bc1      	ldr	r3, [pc, #772]	; (800e164 <atan+0x31c>)
 800de5e:	429e      	cmp	r6, r3
 800de60:	dc01      	bgt.n	800de66 <atan+0x1e>
 800de62:	d109      	bne.n	800de78 <atan+0x30>
 800de64:	b144      	cbz	r4, 800de78 <atan+0x30>
 800de66:	4622      	mov	r2, r4
 800de68:	462b      	mov	r3, r5
 800de6a:	4620      	mov	r0, r4
 800de6c:	4629      	mov	r1, r5
 800de6e:	f7f2 fa2d 	bl	80002cc <__adddf3>
 800de72:	4604      	mov	r4, r0
 800de74:	460d      	mov	r5, r1
 800de76:	e006      	b.n	800de86 <atan+0x3e>
 800de78:	f1bb 0f00 	cmp.w	fp, #0
 800de7c:	f300 8131 	bgt.w	800e0e2 <atan+0x29a>
 800de80:	a59b      	add	r5, pc, #620	; (adr r5, 800e0f0 <atan+0x2a8>)
 800de82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de86:	ec45 4b10 	vmov	d0, r4, r5
 800de8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8e:	4bb6      	ldr	r3, [pc, #728]	; (800e168 <atan+0x320>)
 800de90:	429e      	cmp	r6, r3
 800de92:	dc14      	bgt.n	800debe <atan+0x76>
 800de94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800de98:	429e      	cmp	r6, r3
 800de9a:	dc0d      	bgt.n	800deb8 <atan+0x70>
 800de9c:	a396      	add	r3, pc, #600	; (adr r3, 800e0f8 <atan+0x2b0>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	ee10 0a10 	vmov	r0, s0
 800dea6:	4629      	mov	r1, r5
 800dea8:	f7f2 fa10 	bl	80002cc <__adddf3>
 800deac:	4baf      	ldr	r3, [pc, #700]	; (800e16c <atan+0x324>)
 800deae:	2200      	movs	r2, #0
 800deb0:	f7f2 fe52 	bl	8000b58 <__aeabi_dcmpgt>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d1e6      	bne.n	800de86 <atan+0x3e>
 800deb8:	f04f 3aff 	mov.w	sl, #4294967295
 800debc:	e02b      	b.n	800df16 <atan+0xce>
 800debe:	f000 f963 	bl	800e188 <fabs>
 800dec2:	4bab      	ldr	r3, [pc, #684]	; (800e170 <atan+0x328>)
 800dec4:	429e      	cmp	r6, r3
 800dec6:	ec55 4b10 	vmov	r4, r5, d0
 800deca:	f300 80bf 	bgt.w	800e04c <atan+0x204>
 800dece:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ded2:	429e      	cmp	r6, r3
 800ded4:	f300 80a0 	bgt.w	800e018 <atan+0x1d0>
 800ded8:	ee10 2a10 	vmov	r2, s0
 800dedc:	ee10 0a10 	vmov	r0, s0
 800dee0:	462b      	mov	r3, r5
 800dee2:	4629      	mov	r1, r5
 800dee4:	f7f2 f9f2 	bl	80002cc <__adddf3>
 800dee8:	4ba0      	ldr	r3, [pc, #640]	; (800e16c <atan+0x324>)
 800deea:	2200      	movs	r2, #0
 800deec:	f7f2 f9ec 	bl	80002c8 <__aeabi_dsub>
 800def0:	2200      	movs	r2, #0
 800def2:	4606      	mov	r6, r0
 800def4:	460f      	mov	r7, r1
 800def6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800defa:	4620      	mov	r0, r4
 800defc:	4629      	mov	r1, r5
 800defe:	f7f2 f9e5 	bl	80002cc <__adddf3>
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	4630      	mov	r0, r6
 800df08:	4639      	mov	r1, r7
 800df0a:	f7f2 fcbf 	bl	800088c <__aeabi_ddiv>
 800df0e:	f04f 0a00 	mov.w	sl, #0
 800df12:	4604      	mov	r4, r0
 800df14:	460d      	mov	r5, r1
 800df16:	4622      	mov	r2, r4
 800df18:	462b      	mov	r3, r5
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7f2 fb8b 	bl	8000638 <__aeabi_dmul>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	4680      	mov	r8, r0
 800df28:	4689      	mov	r9, r1
 800df2a:	f7f2 fb85 	bl	8000638 <__aeabi_dmul>
 800df2e:	a374      	add	r3, pc, #464	; (adr r3, 800e100 <atan+0x2b8>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	4606      	mov	r6, r0
 800df36:	460f      	mov	r7, r1
 800df38:	f7f2 fb7e 	bl	8000638 <__aeabi_dmul>
 800df3c:	a372      	add	r3, pc, #456	; (adr r3, 800e108 <atan+0x2c0>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9c3 	bl	80002cc <__adddf3>
 800df46:	4632      	mov	r2, r6
 800df48:	463b      	mov	r3, r7
 800df4a:	f7f2 fb75 	bl	8000638 <__aeabi_dmul>
 800df4e:	a370      	add	r3, pc, #448	; (adr r3, 800e110 <atan+0x2c8>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f9ba 	bl	80002cc <__adddf3>
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	f7f2 fb6c 	bl	8000638 <__aeabi_dmul>
 800df60:	a36d      	add	r3, pc, #436	; (adr r3, 800e118 <atan+0x2d0>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f9b1 	bl	80002cc <__adddf3>
 800df6a:	4632      	mov	r2, r6
 800df6c:	463b      	mov	r3, r7
 800df6e:	f7f2 fb63 	bl	8000638 <__aeabi_dmul>
 800df72:	a36b      	add	r3, pc, #428	; (adr r3, 800e120 <atan+0x2d8>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 f9a8 	bl	80002cc <__adddf3>
 800df7c:	4632      	mov	r2, r6
 800df7e:	463b      	mov	r3, r7
 800df80:	f7f2 fb5a 	bl	8000638 <__aeabi_dmul>
 800df84:	a368      	add	r3, pc, #416	; (adr r3, 800e128 <atan+0x2e0>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 f99f 	bl	80002cc <__adddf3>
 800df8e:	4642      	mov	r2, r8
 800df90:	464b      	mov	r3, r9
 800df92:	f7f2 fb51 	bl	8000638 <__aeabi_dmul>
 800df96:	a366      	add	r3, pc, #408	; (adr r3, 800e130 <atan+0x2e8>)
 800df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9c:	4680      	mov	r8, r0
 800df9e:	4689      	mov	r9, r1
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	f7f2 fb48 	bl	8000638 <__aeabi_dmul>
 800dfa8:	a363      	add	r3, pc, #396	; (adr r3, 800e138 <atan+0x2f0>)
 800dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfae:	f7f2 f98b 	bl	80002c8 <__aeabi_dsub>
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	463b      	mov	r3, r7
 800dfb6:	f7f2 fb3f 	bl	8000638 <__aeabi_dmul>
 800dfba:	a361      	add	r3, pc, #388	; (adr r3, 800e140 <atan+0x2f8>)
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f7f2 f982 	bl	80002c8 <__aeabi_dsub>
 800dfc4:	4632      	mov	r2, r6
 800dfc6:	463b      	mov	r3, r7
 800dfc8:	f7f2 fb36 	bl	8000638 <__aeabi_dmul>
 800dfcc:	a35e      	add	r3, pc, #376	; (adr r3, 800e148 <atan+0x300>)
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	f7f2 f979 	bl	80002c8 <__aeabi_dsub>
 800dfd6:	4632      	mov	r2, r6
 800dfd8:	463b      	mov	r3, r7
 800dfda:	f7f2 fb2d 	bl	8000638 <__aeabi_dmul>
 800dfde:	a35c      	add	r3, pc, #368	; (adr r3, 800e150 <atan+0x308>)
 800dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe4:	f7f2 f970 	bl	80002c8 <__aeabi_dsub>
 800dfe8:	4632      	mov	r2, r6
 800dfea:	463b      	mov	r3, r7
 800dfec:	f7f2 fb24 	bl	8000638 <__aeabi_dmul>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	f7f2 f968 	bl	80002cc <__adddf3>
 800dffc:	4622      	mov	r2, r4
 800dffe:	462b      	mov	r3, r5
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e008:	4602      	mov	r2, r0
 800e00a:	460b      	mov	r3, r1
 800e00c:	d14b      	bne.n	800e0a6 <atan+0x25e>
 800e00e:	4620      	mov	r0, r4
 800e010:	4629      	mov	r1, r5
 800e012:	f7f2 f959 	bl	80002c8 <__aeabi_dsub>
 800e016:	e72c      	b.n	800de72 <atan+0x2a>
 800e018:	ee10 0a10 	vmov	r0, s0
 800e01c:	4b53      	ldr	r3, [pc, #332]	; (800e16c <atan+0x324>)
 800e01e:	2200      	movs	r2, #0
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 f951 	bl	80002c8 <__aeabi_dsub>
 800e026:	4b51      	ldr	r3, [pc, #324]	; (800e16c <atan+0x324>)
 800e028:	4606      	mov	r6, r0
 800e02a:	460f      	mov	r7, r1
 800e02c:	2200      	movs	r2, #0
 800e02e:	4620      	mov	r0, r4
 800e030:	4629      	mov	r1, r5
 800e032:	f7f2 f94b 	bl	80002cc <__adddf3>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4630      	mov	r0, r6
 800e03c:	4639      	mov	r1, r7
 800e03e:	f7f2 fc25 	bl	800088c <__aeabi_ddiv>
 800e042:	f04f 0a01 	mov.w	sl, #1
 800e046:	4604      	mov	r4, r0
 800e048:	460d      	mov	r5, r1
 800e04a:	e764      	b.n	800df16 <atan+0xce>
 800e04c:	4b49      	ldr	r3, [pc, #292]	; (800e174 <atan+0x32c>)
 800e04e:	429e      	cmp	r6, r3
 800e050:	da1d      	bge.n	800e08e <atan+0x246>
 800e052:	ee10 0a10 	vmov	r0, s0
 800e056:	4b48      	ldr	r3, [pc, #288]	; (800e178 <atan+0x330>)
 800e058:	2200      	movs	r2, #0
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 f934 	bl	80002c8 <__aeabi_dsub>
 800e060:	4b45      	ldr	r3, [pc, #276]	; (800e178 <atan+0x330>)
 800e062:	4606      	mov	r6, r0
 800e064:	460f      	mov	r7, r1
 800e066:	2200      	movs	r2, #0
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 fae4 	bl	8000638 <__aeabi_dmul>
 800e070:	4b3e      	ldr	r3, [pc, #248]	; (800e16c <atan+0x324>)
 800e072:	2200      	movs	r2, #0
 800e074:	f7f2 f92a 	bl	80002cc <__adddf3>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4630      	mov	r0, r6
 800e07e:	4639      	mov	r1, r7
 800e080:	f7f2 fc04 	bl	800088c <__aeabi_ddiv>
 800e084:	f04f 0a02 	mov.w	sl, #2
 800e088:	4604      	mov	r4, r0
 800e08a:	460d      	mov	r5, r1
 800e08c:	e743      	b.n	800df16 <atan+0xce>
 800e08e:	462b      	mov	r3, r5
 800e090:	ee10 2a10 	vmov	r2, s0
 800e094:	4939      	ldr	r1, [pc, #228]	; (800e17c <atan+0x334>)
 800e096:	2000      	movs	r0, #0
 800e098:	f7f2 fbf8 	bl	800088c <__aeabi_ddiv>
 800e09c:	f04f 0a03 	mov.w	sl, #3
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	e737      	b.n	800df16 <atan+0xce>
 800e0a6:	4b36      	ldr	r3, [pc, #216]	; (800e180 <atan+0x338>)
 800e0a8:	4e36      	ldr	r6, [pc, #216]	; (800e184 <atan+0x33c>)
 800e0aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e0ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e0b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e0b6:	f7f2 f907 	bl	80002c8 <__aeabi_dsub>
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	462b      	mov	r3, r5
 800e0be:	f7f2 f903 	bl	80002c8 <__aeabi_dsub>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e0ca:	f7f2 f8fd 	bl	80002c8 <__aeabi_dsub>
 800e0ce:	f1bb 0f00 	cmp.w	fp, #0
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	f6bf aed6 	bge.w	800de86 <atan+0x3e>
 800e0da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0de:	461d      	mov	r5, r3
 800e0e0:	e6d1      	b.n	800de86 <atan+0x3e>
 800e0e2:	a51d      	add	r5, pc, #116	; (adr r5, 800e158 <atan+0x310>)
 800e0e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0e8:	e6cd      	b.n	800de86 <atan+0x3e>
 800e0ea:	bf00      	nop
 800e0ec:	f3af 8000 	nop.w
 800e0f0:	54442d18 	.word	0x54442d18
 800e0f4:	bff921fb 	.word	0xbff921fb
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	7e37e43c 	.word	0x7e37e43c
 800e100:	e322da11 	.word	0xe322da11
 800e104:	3f90ad3a 	.word	0x3f90ad3a
 800e108:	24760deb 	.word	0x24760deb
 800e10c:	3fa97b4b 	.word	0x3fa97b4b
 800e110:	a0d03d51 	.word	0xa0d03d51
 800e114:	3fb10d66 	.word	0x3fb10d66
 800e118:	c54c206e 	.word	0xc54c206e
 800e11c:	3fb745cd 	.word	0x3fb745cd
 800e120:	920083ff 	.word	0x920083ff
 800e124:	3fc24924 	.word	0x3fc24924
 800e128:	5555550d 	.word	0x5555550d
 800e12c:	3fd55555 	.word	0x3fd55555
 800e130:	2c6a6c2f 	.word	0x2c6a6c2f
 800e134:	bfa2b444 	.word	0xbfa2b444
 800e138:	52defd9a 	.word	0x52defd9a
 800e13c:	3fadde2d 	.word	0x3fadde2d
 800e140:	af749a6d 	.word	0xaf749a6d
 800e144:	3fb3b0f2 	.word	0x3fb3b0f2
 800e148:	fe231671 	.word	0xfe231671
 800e14c:	3fbc71c6 	.word	0x3fbc71c6
 800e150:	9998ebc4 	.word	0x9998ebc4
 800e154:	3fc99999 	.word	0x3fc99999
 800e158:	54442d18 	.word	0x54442d18
 800e15c:	3ff921fb 	.word	0x3ff921fb
 800e160:	440fffff 	.word	0x440fffff
 800e164:	7ff00000 	.word	0x7ff00000
 800e168:	3fdbffff 	.word	0x3fdbffff
 800e16c:	3ff00000 	.word	0x3ff00000
 800e170:	3ff2ffff 	.word	0x3ff2ffff
 800e174:	40038000 	.word	0x40038000
 800e178:	3ff80000 	.word	0x3ff80000
 800e17c:	bff00000 	.word	0xbff00000
 800e180:	0800e878 	.word	0x0800e878
 800e184:	0800e858 	.word	0x0800e858

0800e188 <fabs>:
 800e188:	ec51 0b10 	vmov	r0, r1, d0
 800e18c:	ee10 2a10 	vmov	r2, s0
 800e190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e194:	ec43 2b10 	vmov	d0, r2, r3
 800e198:	4770      	bx	lr
	...

0800e19c <_init>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	bf00      	nop
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <_fini>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	bf00      	nop
 800e1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ae:	bc08      	pop	{r3}
 800e1b0:	469e      	mov	lr, r3
 800e1b2:	4770      	bx	lr
