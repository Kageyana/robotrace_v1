
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800d598  0800d598  0001d598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc50  0800dc50  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc50  0800dc50  0001dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc58  0800dc58  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc5c  0800dc5c  0001dc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800dc60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000200  0800de5c  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800de5c  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b5d  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9b  00000000  00000000  00039d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bb3  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020571  00000000  00000000  00068ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e45f4  00000000  00000000  0008942c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016da20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070cc  00000000  00000000  0016da70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d57c 	.word	0x0800d57c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800d57c 	.word	0x0800d57c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f004 fe40 	bl	8005cdc <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200003bc 	.word	0x200003bc

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f004 fe28 	bl	8005cdc <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200003bc 	.word	0x200003bc

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f003 fa55 	bl	800454c <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f003 fa4f 	bl	800454c <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f003 fa49 	bl	800454c <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f003 fa43 	bl	800454c <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f003 fa3d 	bl	800454c <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fa37 	bl	800454c <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f003 fa31 	bl	800454c <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f003 fa2b 	bl	800454c <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f003 fa25 	bl	800454c <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f003 fa1f 	bl	800454c <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	2000023a 	.word	0x2000023a
 800125c:	20000238 	.word	0x20000238
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	2000021c 	.word	0x2000021c

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000236 	.word	0x20000236

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f009 f86d 	bl	800a3cc <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	20000224 	.word	0x20000224
 8001358:	20000236 	.word	0x20000236
 800135c:	2000021c 	.word	0x2000021c
 8001360:	2000023a 	.word	0x2000023a

08001364 <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	// Encoder count
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <systemInit+0xf0>)
 800136e:	f006 f875 	bl	800745c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001372:	213c      	movs	r1, #60	; 0x3c
 8001374:	4838      	ldr	r0, [pc, #224]	; (8001458 <systemInit+0xf4>)
 8001376:	f006 f871 	bl	800745c <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *) analogVal, 14) != HAL_OK)	Error_Handler();
 800137a:	220e      	movs	r2, #14
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <systemInit+0xf8>)
 800137e:	4838      	ldr	r0, [pc, #224]	; (8001460 <systemInit+0xfc>)
 8001380:	f003 f94c 	bl	800461c <HAL_ADC_Start_DMA>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <systemInit+0x2a>
 800138a:	f001 fa95 	bl	80028b8 <Error_Handler>
	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 800138e:	2100      	movs	r1, #0
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <systemInit+0x100>)
 8001392:	f005 fef5 	bl	8007180 <HAL_TIM_PWM_Start>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <systemInit+0x3c>
 800139c:	f001 fa8c 	bl	80028b8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 80013a0:	2104      	movs	r1, #4
 80013a2:	4830      	ldr	r0, [pc, #192]	; (8001464 <systemInit+0x100>)
 80013a4:	f005 feec 	bl	8007180 <HAL_TIM_PWM_Start>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <systemInit+0x4e>
 80013ae:	f001 fa83 	bl	80028b8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 80013b2:	2108      	movs	r1, #8
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <systemInit+0x100>)
 80013b6:	f005 fee3 	bl	8007180 <HAL_TIM_PWM_Start>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <systemInit+0x60>
 80013c0:	f001 fa7a 	bl	80028b8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 80013c4:	210c      	movs	r1, #12
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <systemInit+0x100>)
 80013c8:	f005 feda 	bl	8007180 <HAL_TIM_PWM_Start>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <systemInit+0x72>
 80013d2:	f001 fa71 	bl	80028b8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 80013d6:	2100      	movs	r1, #0
 80013d8:	4823      	ldr	r0, [pc, #140]	; (8001468 <systemInit+0x104>)
 80013da:	f005 fed1 	bl	8007180 <HAL_TIM_PWM_Start>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <systemInit+0x84>
 80013e4:	f001 fa68 	bl	80028b8 <Error_Handler>

	// MAX22201 sleepmode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <systemInit+0x100>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <systemInit+0x100>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <systemInit+0x100>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <systemInit+0x100>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <systemInit+0x104>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f003 f896 	bl	800454c <HAL_Delay>

	intiLcd();  	// LCD initialize
 8001420:	f7ff fe3a 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <systemInit+0x108>)
 8001426:	f005 fdeb 	bl	8007000 <HAL_TIM_Base_Start_IT>
	// while(1) {
	//   lcdRowPrintf(UPROW, "5ax %4d",analogVal[12]);
	//   lcdRowPrintf(LOWROW, "dip %4d",analogVal[13]);
	// }

	for (int i = 0; i < NUM_SENSORS; i ++) lSensors_list[i].index = i;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e008      	b.n	8001442 <systemInit+0xde>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <systemInit+0x10c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0b      	cmp	r3, #11
 8001446:	ddf3      	ble.n	8001430 <systemInit+0xcc>

	// lcdRowPrintf(UPROW, "who am i");
	// lcdRowPrintf(LOWROW, "    %#x",initBNO055());
	// HAL_Delay(700);
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000550 	.word	0x20000550
 8001458:	20000598 	.word	0x20000598
 800145c:	20000240 	.word	0x20000240
 8001460:	20000314 	.word	0x20000314
 8001464:	200004c0 	.word	0x200004c0
 8001468:	20000508 	.word	0x20000508
 800146c:	200005e0 	.word	0x200005e0
 8001470:	200002c4 	.word	0x200002c4

08001474 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

	// if (pattern > 0 )
	switch (pattern) {
 8001478:	4b9c      	ldr	r3, [pc, #624]	; (80016ec <systemLoop+0x278>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b66      	cmp	r3, #102	; 0x66
 800147e:	f000 8100 	beq.w	8001682 <systemLoop+0x20e>
 8001482:	2b66      	cmp	r3, #102	; 0x66
 8001484:	f300 8128 	bgt.w	80016d8 <systemLoop+0x264>
 8001488:	2b65      	cmp	r3, #101	; 0x65
 800148a:	f000 80cb 	beq.w	8001624 <systemLoop+0x1b0>
 800148e:	2b65      	cmp	r3, #101	; 0x65
 8001490:	f300 8122 	bgt.w	80016d8 <systemLoop+0x264>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <systemLoop+0x2a>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d021      	beq.n	80014e0 <systemLoop+0x6c>
			// 	}
			// }
			break;
    
      	default:
        	break;
 800149c:	e11c      	b.n	80016d8 <systemLoop+0x264>
			setup();
 800149e:	f001 fb11 	bl	8002ac4 <setup>
			if (start) {
 80014a2:	4b93      	ldr	r3, [pc, #588]	; (80016f0 <systemLoop+0x27c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8118 	beq.w	80016dc <systemLoop+0x268>
				lcdRowPrintf(UPROW, "ready   ");
 80014ac:	4991      	ldr	r1, [pc, #580]	; (80016f4 <systemLoop+0x280>)
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff00 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 80014b4:	4990      	ldr	r1, [pc, #576]	; (80016f8 <systemLoop+0x284>)
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fefc 	bl	80012b4 <lcdRowPrintf>
				HAL_Delay(2000);
 80014bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c0:	f003 f844 	bl	800454c <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 80014c4:	498d      	ldr	r1, [pc, #564]	; (80016fc <systemLoop+0x288>)
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fef4 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 80014cc:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <systemLoop+0x28c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
				cnt1 = 0;
 80014d2:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <systemLoop+0x290>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
				pattern = 1;
 80014d8:	4b84      	ldr	r3, [pc, #528]	; (80016ec <systemLoop+0x278>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			break;
 80014de:	e0fd      	b.n	80016dc <systemLoop+0x268>
			if (!modeCurve) {
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <systemLoop+0x294>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d117      	bne.n	8001518 <systemLoop+0xa4>
				targetSpeed = paramSpeed[INDEX_STRAIGHT]*PALSE_MILLIMETER/10;
 80014e8:	4b88      	ldr	r3, [pc, #544]	; (800170c <systemLoop+0x298>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001710 <systemLoop+0x29c>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001500:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001504:	ee16 0a90 	vmov	r0, s13
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4980      	ldr	r1, [pc, #512]	; (8001714 <systemLoop+0x2a0>)
 8001512:	e9c1 2300 	strd	r2, r3, [r1]
 8001516:	e016      	b.n	8001546 <systemLoop+0xd2>
				targetSpeed = paramSpeed[INDEX_CURVE]*PALSE_MILLIMETER/10;
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <systemLoop+0x298>)
 800151a:	78db      	ldrb	r3, [r3, #3]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001710 <systemLoop+0x29c>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001534:	ee16 0a90 	vmov	r0, s13
 8001538:	f7ff f826 	bl	8000588 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4974      	ldr	r1, [pc, #464]	; (8001714 <systemLoop+0x2a0>)
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 8001546:	4b74      	ldr	r3, [pc, #464]	; (8001718 <systemLoop+0x2a4>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	461a      	mov	r2, r3
 800154e:	4b73      	ldr	r3, [pc, #460]	; (800171c <systemLoop+0x2a8>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f001 fa72 	bl	8002a40 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800155c:	4b70      	ldr	r3, [pc, #448]	; (8001720 <systemLoop+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
			if (checkMarker() == RIGHTMARKER) {
 8001566:	f001 f9d9 	bl	800291c <checkMarker>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d117      	bne.n	80015a0 <systemLoop+0x12c>
				if (SGmarker == 0) {
 8001570:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <systemLoop+0x2b0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <systemLoop+0x10c>
					SGmarker = STARTMARKER;
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <systemLoop+0x2b0>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e00f      	b.n	80015a0 <systemLoop+0x12c>
				} else if (SGmarker == STARTMARKER && encTotalN > encMM(1000)) {
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <systemLoop+0x2b0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <systemLoop+0x12c>
 8001588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158c:	f000 f94a 	bl	8001824 <encMM>
 8001590:	4602      	mov	r2, r0
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <systemLoop+0x28c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	da02      	bge.n	80015a0 <systemLoop+0x12c>
					SGmarker = GOALMARKER;
 800159a:	4b62      	ldr	r3, [pc, #392]	; (8001724 <systemLoop+0x2b0>)
 800159c:	2202      	movs	r2, #2
 800159e:	701a      	strb	r2, [r3, #0]
			if (angleSensor > 11 || angleSensor < -11) {
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <systemLoop+0x2b4>)
 80015a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <systemLoop+0x2b8>)
 80015ac:	f7ff fad4 	bl	8000b58 <__aeabi_dcmpgt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <systemLoop+0x158>
 80015b6:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <systemLoop+0x2b4>)
 80015b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b5b      	ldr	r3, [pc, #364]	; (8001730 <systemLoop+0x2bc>)
 80015c2:	f7ff faab 	bl	8000b1c <__aeabi_dcmplt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <systemLoop+0x160>
				modeCurve = 1;
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <systemLoop+0x294>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e018      	b.n	8001606 <systemLoop+0x192>
			} else if (angleSensor < 11 && angleSensor > -11) {
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <systemLoop+0x2b4>)
 80015d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b53      	ldr	r3, [pc, #332]	; (800172c <systemLoop+0x2b8>)
 80015e0:	f7ff fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <systemLoop+0x192>
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <systemLoop+0x2b4>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <systemLoop+0x2bc>)
 80015f6:	f7ff faaf 	bl	8000b58 <__aeabi_dcmpgt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <systemLoop+0x192>
				modeCurve = 0;
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <systemLoop+0x294>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
			if (SGmarker == GOALMARKER) {
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <systemLoop+0x2b0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d168      	bne.n	80016e0 <systemLoop+0x26c>
				goalTime = cnt1;
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <systemLoop+0x290>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a48      	ldr	r2, [pc, #288]	; (8001734 <systemLoop+0x2c0>)
 8001614:	6013      	str	r3, [r2, #0]
				enc1 = 0;
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <systemLoop+0x2c4>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
				pattern = 101;
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <systemLoop+0x278>)
 800161e:	2265      	movs	r2, #101	; 0x65
 8001620:	701a      	strb	r2, [r3, #0]
			break;
 8001622:	e05d      	b.n	80016e0 <systemLoop+0x26c>
			targetSpeed = paramSpeed[INDEX_STOP]*PALSE_MILLIMETER/10;
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <systemLoop+0x298>)
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001710 <systemLoop+0x29c>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800163c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001640:	ee16 0a90 	vmov	r0, s13
 8001644:	f7fe ffa0 	bl	8000588 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4931      	ldr	r1, [pc, #196]	; (8001714 <systemLoop+0x2a0>)
 800164e:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <systemLoop+0x2a4>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	461a      	mov	r2, r3
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <systemLoop+0x2a8>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f001 f9ec 	bl	8002a40 <motorPwmOutSynth>
			if (enc1 >= encMM(500)) {
 8001668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166c:	f000 f8da 	bl	8001824 <encMM>
 8001670:	4602      	mov	r2, r0
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <systemLoop+0x2c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	dc34      	bgt.n	80016e4 <systemLoop+0x270>
				pattern = 102;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <systemLoop+0x278>)
 800167c:	2266      	movs	r2, #102	; 0x66
 800167e:	701a      	strb	r2, [r3, #0]
			break;
 8001680:	e030      	b.n	80016e4 <systemLoop+0x270>
			targetSpeed = 0;
 8001682:	4924      	ldr	r1, [pc, #144]	; (8001714 <systemLoop+0x2a0>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <systemLoop+0x2c8>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d104      	bne.n	80016a4 <systemLoop+0x230>
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f001 f9cf 	bl	8002a40 <motorPwmOutSynth>
 80016a2:	e006      	b.n	80016b2 <systemLoop+0x23e>
			else                  motorPwmOutSynth( 0, speedPwm );
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <systemLoop+0x2a8>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	4619      	mov	r1, r3
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 f9c7 	bl	8002a40 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <systemLoop+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(UPROW, "   %5d",encTotalN);
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <systemLoop+0x28c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	491f      	ldr	r1, [pc, #124]	; (8001740 <systemLoop+0x2cc>)
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fdf6 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "   %5d",encMarker);
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <systemLoop+0x2d0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	491c      	ldr	r1, [pc, #112]	; (8001740 <systemLoop+0x2cc>)
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fdef 	bl	80012b4 <lcdRowPrintf>
			break;
 80016d6:	e006      	b.n	80016e6 <systemLoop+0x272>
        	break;
 80016d8:	bf00      	nop
 80016da:	e004      	b.n	80016e6 <systemLoop+0x272>
			break;
 80016dc:	bf00      	nop
 80016de:	e002      	b.n	80016e6 <systemLoop+0x272>
			break;
 80016e0:	bf00      	nop
 80016e2:	e000      	b.n	80016e6 <systemLoop+0x272>
			break;
 80016e4:	bf00      	nop
    } // switch case
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000023c 	.word	0x2000023c
 80016f0:	20000674 	.word	0x20000674
 80016f4:	0800d598 	.word	0x0800d598
 80016f8:	0800d5a4 	.word	0x0800d5a4
 80016fc:	0800d5b0 	.word	0x0800d5b0
 8001700:	20000274 	.word	0x20000274
 8001704:	20000690 	.word	0x20000690
 8001708:	2000023d 	.word	0x2000023d
 800170c:	20000004 	.word	0x20000004
 8001710:	427047ae 	.word	0x427047ae
 8001714:	20000698 	.word	0x20000698
 8001718:	20000302 	.word	0x20000302
 800171c:	20000694 	.word	0x20000694
 8001720:	20000508 	.word	0x20000508
 8001724:	2000066c 	.word	0x2000066c
 8001728:	200002f8 	.word	0x200002f8
 800172c:	40260000 	.word	0x40260000
 8001730:	c0260000 	.word	0xc0260000
 8001734:	2000025c 	.word	0x2000025c
 8001738:	20000278 	.word	0x20000278
 800173c:	20000268 	.word	0x20000268
 8001740:	0800d5bc 	.word	0x0800d5bc
 8001744:	20000670 	.word	0x20000670

08001748 <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <getEncoder+0xb0>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <getEncoder+0xb4>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <getEncoder+0xb8>)
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	b21a      	sxth	r2, r3
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <getEncoder+0xbc>)
 8001768:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <getEncoder+0xc0>)
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <getEncoder+0xc4>)
 8001778:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <getEncoder+0xbc>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	461a      	mov	r2, r3
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <getEncoder+0xc4>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	4413      	add	r3, r2
 800178a:	0fda      	lsrs	r2, r3, #31
 800178c:	4413      	add	r3, r2
 800178e:	105b      	asrs	r3, r3, #1
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <getEncoder+0xc8>)
 8001794:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <getEncoder+0xbc>)
 8001798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179c:	461a      	mov	r2, r3
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <getEncoder+0xcc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <getEncoder+0xcc>)
 80017a6:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <getEncoder+0xc4>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <getEncoder+0xd0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <getEncoder+0xd0>)
 80017b8:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <getEncoder+0xc8>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <getEncoder+0xd4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <getEncoder+0xd4>)
 80017ca:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <getEncoder+0xc8>)
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <getEncoder+0xd8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <getEncoder+0xd8>)
 80017dc:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <getEncoder+0xb8>)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <getEncoder+0xc0>)
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	8013      	strh	r3, [r2, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40000800 	.word	0x40000800
 80017fc:	40000400 	.word	0x40000400
 8001800:	20000260 	.word	0x20000260
 8001804:	20000264 	.word	0x20000264
 8001808:	20000262 	.word	0x20000262
 800180c:	20000266 	.word	0x20000266
 8001810:	20000268 	.word	0x20000268
 8001814:	2000026c 	.word	0x2000026c
 8001818:	20000270 	.word	0x20000270
 800181c:	20000274 	.word	0x20000274
 8001820:	20000278 	.word	0x20000278

08001824 <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bfb8      	it	lt
 8001836:	425b      	neglt	r3, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001860 <encMM+0x3c>
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184e:	ee17 3a90 	vmov	r3, s15
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	427047ae 	.word	0x427047ae

08001864 <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <ledOut+0x22>
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <ledOut+0x78>)
 8001880:	f004 f8ce 	bl	8005a20 <HAL_GPIO_WritePin>
 8001884:	e005      	b.n	8001892 <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <ledOut+0x78>)
 800188e:	f004 f8c7 	bl	8005a20 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <ledOut+0x44>
 800189c:	2200      	movs	r2, #0
 800189e:	2110      	movs	r1, #16
 80018a0:	480f      	ldr	r0, [pc, #60]	; (80018e0 <ledOut+0x7c>)
 80018a2:	f004 f8bd 	bl	8005a20 <HAL_GPIO_WritePin>
 80018a6:	e004      	b.n	80018b2 <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	2110      	movs	r1, #16
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <ledOut+0x7c>)
 80018ae:	f004 f8b7 	bl	8005a20 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <ledOut+0x64>
 80018bc:	2200      	movs	r2, #0
 80018be:	2120      	movs	r1, #32
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <ledOut+0x7c>)
 80018c2:	f004 f8ad 	bl	8005a20 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80018c6:	e004      	b.n	80018d2 <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2120      	movs	r1, #32
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <ledOut+0x7c>)
 80018ce:	f004 f8a7 	bl	8005a20 <HAL_GPIO_WritePin>
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400

080018e4 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
	uint8_t i;
	cntls++;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <getLineSensor+0xa0>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <getLineSensor+0xa0>)
 80018f4:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	e010      	b.n	800191e <getLineSensor+0x3a>
		lSensorInt[i] += analogVal[i];
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <getLineSensor+0xa4>)
 8001900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4921      	ldr	r1, [pc, #132]	; (800198c <getLineSensor+0xa8>)
 8001908:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800190c:	4619      	mov	r1, r3
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	440a      	add	r2, r1
 8001912:	491d      	ldr	r1, [pc, #116]	; (8001988 <getLineSensor+0xa4>)
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for ( i=0;i<NUM_SENSORS;i++) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	3301      	adds	r3, #1
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b0b      	cmp	r3, #11
 8001922:	d9eb      	bls.n	80018fc <getLineSensor+0x18>
	}

	if (cntls > 16) {
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <getLineSensor+0xa0>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b10      	cmp	r3, #16
 800192a:	d924      	bls.n	8001976 <getLineSensor+0x92>
		for ( i=0;i<NUM_SENSORS;i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	e01b      	b.n	800196a <getLineSensor+0x86>
			lSensor[i] = lSensorInt[i]>>4;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <getLineSensor+0xa4>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	091a      	lsrs	r2, r3, #4
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	b291      	uxth	r1, r2
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <getLineSensor+0xac>)
 8001942:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensors_list[i].value = lSensor[i];
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4911      	ldr	r1, [pc, #68]	; (8001990 <getLineSensor+0xac>)
 800194c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <getLineSensor+0xb0>)
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	805a      	strh	r2, [r3, #2]
			lSensorInt[i] = 0;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <getLineSensor+0xa4>)
 800195e:	2100      	movs	r1, #0
 8001960:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for ( i=0;i<NUM_SENSORS;i++) {
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	3301      	adds	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b0b      	cmp	r3, #11
 800196e:	d9e0      	bls.n	8001932 <getLineSensor+0x4e>
		}
		cntls = 0;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <getLineSensor+0xa0>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
	}
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000300 	.word	0x20000300
 8001988:	2000027c 	.word	0x2000027c
 800198c:	20000240 	.word	0x20000240
 8001990:	200002ac 	.word	0x200002ac
 8001994:	200002c4 	.word	0x200002c4

08001998 <cmpare_lSensors>:
/* qsort関数に渡す比較用の関数（昇順） */
int cmpare_lSensors(const void *n1, const void *n2) {
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    if (((lSensors *)n1)->value > ((lSensors *)n2)->value) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	885a      	ldrh	r2, [r3, #2]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	885b      	ldrh	r3, [r3, #2]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d901      	bls.n	80019b2 <cmpare_lSensors+0x1a>
        return 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e009      	b.n	80019c6 <cmpare_lSensors+0x2e>
    } else if (((lSensors *)n1)->value < ((lSensors *)n2)->value) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	885a      	ldrh	r2, [r3, #2]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d202      	bcs.n	80019c4 <cmpare_lSensors+0x2c>
        return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e000      	b.n	80019c6 <cmpare_lSensors+0x2e>
    }
    return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	0000      	movs	r0, r0
 80019d4:	0000      	movs	r0, r0
	...

080019d8 <getAngleSensor>:
// モジュール名 getAngleSensor
// 処理概要  	ラインセンサのAD値からステア角を算出する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getAngleSensor(void) {
 80019d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019dc:	b08c      	sub	sp, #48	; 0x30
 80019de:	af00      	add	r7, sp, #0
	uint16_t index, sen1, sen2;
	double nsen1, nsen2, phi, dthita;

	// 昇順ソート
	qsort(lSensors_list, NUM_SENSORS, sizeof(lSensors), cmpare_lSensors);
 80019e0:	4b8f      	ldr	r3, [pc, #572]	; (8001c20 <getAngleSensor+0x248>)
 80019e2:	2204      	movs	r2, #4
 80019e4:	210c      	movs	r1, #12
 80019e6:	488f      	ldr	r0, [pc, #572]	; (8001c24 <getAngleSensor+0x24c>)
 80019e8:	f007 fcb6 	bl	8009358 <qsort>
	index = lSensors_list[0].index;
 80019ec:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <getAngleSensor+0x24c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if (index !=0 && index != NUM_SENSORS -1 ) {
 80019f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80f1 	beq.w	8001bdc <getAngleSensor+0x204>
 80019fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019fc:	2b0b      	cmp	r3, #11
 80019fe:	f000 80ed 	beq.w	8001bdc <getAngleSensor+0x204>
		// 白線に一番近いセンサの両隣のセンサ値を取得
		sen1 = lSensor[index-1];
 8001a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a04:	3b01      	subs	r3, #1
 8001a06:	4a88      	ldr	r2, [pc, #544]	; (8001c28 <getAngleSensor+0x250>)
 8001a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0c:	843b      	strh	r3, [r7, #32]
		sen2 = lSensor[index+1];
 8001a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a85      	ldr	r2, [pc, #532]	; (8001c28 <getAngleSensor+0x250>)
 8001a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a18:	83fb      	strh	r3, [r7, #30]

		// 正規化
		nsen1 = (double)sen1 / (sen1 + sen2);
 8001a1a:	8c3b      	ldrh	r3, [r7, #32]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd91 	bl	8000544 <__aeabi_ui2d>
 8001a22:	4680      	mov	r8, r0
 8001a24:	4689      	mov	r9, r1
 8001a26:	8c3a      	ldrh	r2, [r7, #32]
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd99 	bl	8000564 <__aeabi_i2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4640      	mov	r0, r8
 8001a38:	4649      	mov	r1, r9
 8001a3a:	f7fe ff27 	bl	800088c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	e9c7 2304 	strd	r2, r3, [r7, #16]
		nsen2 = (double)sen2 / (sen1 + sen2);
 8001a46:	8bfb      	ldrh	r3, [r7, #30]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd7b 	bl	8000544 <__aeabi_ui2d>
 8001a4e:	4680      	mov	r8, r0
 8001a50:	4689      	mov	r9, r1
 8001a52:	8c3a      	ldrh	r2, [r7, #32]
 8001a54:	8bfb      	ldrh	r3, [r7, #30]
 8001a56:	4413      	add	r3, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd83 	bl	8000564 <__aeabi_i2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4640      	mov	r0, r8
 8001a64:	4649      	mov	r1, r9
 8001a66:	f7fe ff11 	bl	800088c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (index >= NUM_SENSORS/2) phi = atan( (nsen1 - nsen2)/1 );		// 偏角φ計算
 8001a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d912      	bls.n	8001a9e <getAngleSensor+0xc6>
 8001a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a80:	f7fe fc22 	bl	80002c8 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ec43 2b17 	vmov	d7, r2, r3
 8001a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a90:	eef0 0a67 	vmov.f32	s1, s15
 8001a94:	f00b fbc8 	bl	800d228 <atan>
 8001a98:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001a9c:	e011      	b.n	8001ac2 <getAngleSensor+0xea>
		else 						phi = atan( (nsen2 - nsen1)/1 );		// 偏角φ計算
 8001a9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aa6:	f7fe fc0f 	bl	80002c8 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ec43 2b17 	vmov	d7, r2, r3
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	f00b fbb5 	bl	800d228 <atan>
 8001abe:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		
		dthita = (phi*THITA_SENSOR* (M_PI/180.0)/2) / (M_PI/4);	// 微小角度dθ計算
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <getAngleSensor+0x254>)
 8001ac8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001acc:	f7fe fdb4 	bl	8000638 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	a34b      	add	r3, pc, #300	; (adr r3, 8001c08 <getAngleSensor+0x230>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fdab 	bl	8000638 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af2:	f7fe fecb 	bl	800088c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	a344      	add	r3, pc, #272	; (adr r3, 8001c10 <getAngleSensor+0x238>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fec2 	bl	800088c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 2300 	strd	r2, r3, [r7]

		
		if (index >= NUM_SENSORS/2) {
 8001b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d928      	bls.n	8001b68 <getAngleSensor+0x190>
			angleSensor = ( (index-5.5)*THITA_SENSOR * (M_PI/180.0)) + dthita;
 8001b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd23 	bl	8000564 <__aeabi_i2d>
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <getAngleSensor+0x258>)
 8001b24:	f7fe fbd0 	bl	80002c8 <__aeabi_dsub>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <getAngleSensor+0x254>)
 8001b36:	f7fe fd7f 	bl	8000638 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	a331      	add	r3, pc, #196	; (adr r3, 8001c08 <getAngleSensor+0x230>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fd76 	bl	8000638 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b58:	f7fe fbb8 	bl	80002cc <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <getAngleSensor+0x25c>)
 8001b62:	e9c1 2300 	strd	r2, r3, [r1]
 8001b66:	e02c      	b.n	8001bc2 <getAngleSensor+0x1ea>
		} else {
			angleSensor = -( ( (5.5-index)*THITA_SENSOR * (M_PI/180.0)) + dthita );
 8001b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcfa 	bl	8000564 <__aeabi_i2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	492d      	ldr	r1, [pc, #180]	; (8001c30 <getAngleSensor+0x258>)
 8001b7a:	f7fe fba5 	bl	80002c8 <__aeabi_dsub>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <getAngleSensor+0x254>)
 8001b8c:	f7fe fd54 	bl	8000638 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	a31b      	add	r3, pc, #108	; (adr r3, 8001c08 <getAngleSensor+0x230>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fd4b 	bl	8000638 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bae:	f7fe fb8d 	bl	80002cc <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <getAngleSensor+0x25c>)
 8001bbe:	e9c3 4500 	strd	r4, r5, [r3]
		}
		angleSensor = angleSensor*(180.0/M_PI);
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <getAngleSensor+0x25c>)
 8001bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc8:	a313      	add	r3, pc, #76	; (adr r3, 8001c18 <getAngleSensor+0x240>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4917      	ldr	r1, [pc, #92]	; (8001c34 <getAngleSensor+0x25c>)
 8001bd8:	e9c1 2300 	strd	r2, r3, [r1]
		
	}

	for (int i = 0; i < NUM_SENSORS; i ++) lSensors_list[i].index = i;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e008      	b.n	8001bf4 <getAngleSensor+0x21c>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <getAngleSensor+0x24c>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	2b0b      	cmp	r3, #11
 8001bf8:	ddf3      	ble.n	8001be2 <getAngleSensor+0x20a>

	
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3730      	adds	r7, #48	; 0x30
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c06:	bf00      	nop
 8001c08:	63f11168 	.word	0x63f11168
 8001c0c:	3f91df46 	.word	0x3f91df46
 8001c10:	fc8b007a 	.word	0xfc8b007a
 8001c14:	3fe921fa 	.word	0x3fe921fa
 8001c18:	7e61df46 	.word	0x7e61df46
 8001c1c:	404ca5dc 	.word	0x404ca5dc
 8001c20:	08001999 	.word	0x08001999
 8001c24:	200002c4 	.word	0x200002c4
 8001c28:	200002ac 	.word	0x200002ac
 8001c2c:	40260000 	.word	0x40260000
 8001c30:	40160000 	.word	0x40160000
 8001c34:	200002f8 	.word	0x200002f8

08001c38 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
	// 	kp = kp1_buff;
	// 	ki = ki1_buff;
	// 	kd = kd1_buff;
	// 	Dev = lSensor[4] - lSensor[7];
	// }
	kp = kp1_buff;
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <motorControlTrace+0x148>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	623b      	str	r3, [r7, #32]
	ki = ki1_buff;
 8001c44:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <motorControlTrace+0x14c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	61fb      	str	r3, [r7, #28]
	kd = kd1_buff;
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <motorControlTrace+0x150>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
	Dev = lSensor[4] - lSensor[7];
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <motorControlTrace+0x154>)
 8001c52:	891b      	ldrh	r3, [r3, #8]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <motorControlTrace+0x154>)
 8001c58:	89db      	ldrh	r3, [r3, #14]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
	// I成分積算
	Int += (double)Dev * 0.001;
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7fe fc80 	bl	8000564 <__aeabi_i2d>
 8001c64:	a340      	add	r3, pc, #256	; (adr r3, 8001d68 <motorControlTrace+0x130>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fce5 	bl	8000638 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <motorControlTrace+0x158>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fb26 	bl	80002cc <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4942      	ldr	r1, [pc, #264]	; (8001d90 <motorControlTrace+0x158>)
 8001c86:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <motorControlTrace+0x158>)
 8001c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c90:	a337      	add	r3, pc, #220	; (adr r3, 8001d70 <motorControlTrace+0x138>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe ff5f 	bl	8000b58 <__aeabi_dcmpgt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <motorControlTrace+0x76>
 8001ca0:	493b      	ldr	r1, [pc, #236]	; (8001d90 <motorControlTrace+0x158>)
 8001ca2:	a333      	add	r3, pc, #204	; (adr r3, 8001d70 <motorControlTrace+0x138>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	e9c1 2300 	strd	r2, r3, [r1]
 8001cac:	e010      	b.n	8001cd0 <motorControlTrace+0x98>
	else if ( Int < -10000 ) Int = -10000;
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <motorControlTrace+0x158>)
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	a330      	add	r3, pc, #192	; (adr r3, 8001d78 <motorControlTrace+0x140>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe ff2f 	bl	8000b1c <__aeabi_dcmplt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <motorControlTrace+0x98>
 8001cc4:	4932      	ldr	r1, [pc, #200]	; (8001d90 <motorControlTrace+0x158>)
 8001cc6:	a32c      	add	r3, pc, #176	; (adr r3, 8001d78 <motorControlTrace+0x140>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <motorControlTrace+0x15c>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]

	iP = (int32_t)kp1_buff * Dev;	// 比例
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <motorControlTrace+0x148>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
	iI = (double)ki1_buff * Int;	// 積分
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <motorControlTrace+0x14c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc27 	bl	8000544 <__aeabi_ui2d>
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <motorControlTrace+0x158>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc9c 	bl	8000638 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff46 	bl	8000b98 <__aeabi_d2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd1_buff * Dif;	// 微分
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <motorControlTrace+0x150>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4413      	add	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	119b      	asrs	r3, r3, #6
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d36:	dd02      	ble.n	8001d3e <motorControlTrace+0x106>
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d44:	da01      	bge.n	8001d4a <motorControlTrace+0x112>
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <motorControlTrace+0x160>)
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
	
	tracePwm = iRet;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <motorControlTrace+0x164>)
 8001d50:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <motorControlTrace+0x15c>)
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	f3af 8000 	nop.w
 8001d68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d6c:	3f50624d 	.word	0x3f50624d
 8001d70:	00000000 	.word	0x00000000
 8001d74:	40c38800 	.word	0x40c38800
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	c0c38800 	.word	0xc0c38800
 8001d80:	2000000e 	.word	0x2000000e
 8001d84:	20000310 	.word	0x20000310
 8001d88:	2000000f 	.word	0x2000000f
 8001d8c:	200002ac 	.word	0x200002ac
 8001d90:	20000308 	.word	0x20000308
 8001d94:	20000304 	.word	0x20000304
 8001d98:	fffffc18 	.word	0xfffffc18
 8001d9c:	20000302 	.word	0x20000302

08001da0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001da8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001db8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dbc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001dc0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dc8:	e000      	b.n	8001dcc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001dcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f9      	beq.n	8001dca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001dd6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f002 fb39 	bl	8004468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 f81d 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f000 fc69 	bl	80026d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfe:	f000 fc47 	bl	8002690 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e02:	f000 f889 	bl	8001f18 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e06:	f000 f991 	bl	800212c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e0a:	f000 f9bd 	bl	8002188 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001e0e:	f000 fa27 	bl	8002260 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e12:	f000 fadd 	bl	80023d0 <MX_TIM2_Init>
  MX_UART5_Init();
 8001e16:	f000 fc11 	bl	800263c <MX_UART5_Init>
  MX_TIM3_Init();
 8001e1a:	f000 fb31 	bl	8002480 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e1e:	f000 fb83 	bl	8002528 <MX_TIM4_Init>
  MX_SPI3_Init();
 8001e22:	f000 f9e7 	bl	80021f4 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001e26:	f000 fbd3 	bl	80025d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8001e2a:	f7ff fa9b 	bl	8001364 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8001e2e:	f7ff fb21 	bl	8001474 <systemLoop>
 8001e32:	e7fc      	b.n	8001e2e <main+0x40>

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	2234      	movs	r2, #52	; 0x34
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 fbce 	bl	80085e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <SystemClock_Config+0xe0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <SystemClock_Config+0xe0>)
 8001e7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <SystemClock_Config+0xe0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ea8:	23b4      	movs	r3, #180	; 0xb4
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 fd29 	bl	8006914 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ec8:	f000 fcf6 	bl	80028b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ecc:	f004 fa0e 	bl	80062ec <HAL_PWREx_EnableOverDrive>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ed6:	f000 fcef 	bl	80028b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eda:	230f      	movs	r3, #15
 8001edc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	2105      	movs	r1, #5
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fa47 	bl	800638c <HAL_RCC_ClockConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f04:	f000 fcd8 	bl	80028b8 <Error_Handler>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3750      	adds	r7, #80	; 0x50
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f2c:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <MX_ADC1_Init+0x20c>)
 8001f2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f38:	4b79      	ldr	r3, [pc, #484]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f3e:	4b78      	ldr	r3, [pc, #480]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f44:	4b76      	ldr	r3, [pc, #472]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f4a:	4b75      	ldr	r3, [pc, #468]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f58:	4b71      	ldr	r3, [pc, #452]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f5a:	4a73      	ldr	r2, [pc, #460]	; (8002128 <MX_ADC1_Init+0x210>)
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8001f64:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f66:	220e      	movs	r2, #14
 8001f68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f78:	4869      	ldr	r0, [pc, #420]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f7a:	f002 fb0b 	bl	8004594 <HAL_ADC_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f84:	f000 fc98 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f88:	230b      	movs	r3, #11
 8001f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001f90:	2304      	movs	r3, #4
 8001f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4861      	ldr	r0, [pc, #388]	; (8002120 <MX_ADC1_Init+0x208>)
 8001f9a:	f002 fc63 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fa4:	f000 fc88 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	485a      	ldr	r0, [pc, #360]	; (8002120 <MX_ADC1_Init+0x208>)
 8001fb6:	f002 fc55 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fc0:	f000 fc7a 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001fc4:	230d      	movs	r3, #13
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4853      	ldr	r0, [pc, #332]	; (8002120 <MX_ADC1_Init+0x208>)
 8001fd2:	f002 fc47 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001fdc:	f000 fc6c 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	4619      	mov	r1, r3
 8001fec:	484c      	ldr	r0, [pc, #304]	; (8002120 <MX_ADC1_Init+0x208>)
 8001fee:	f002 fc39 	bl	8004864 <HAL_ADC_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ff8:	f000 fc5e 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002000:	2305      	movs	r3, #5
 8002002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	4619      	mov	r1, r3
 8002008:	4845      	ldr	r0, [pc, #276]	; (8002120 <MX_ADC1_Init+0x208>)
 800200a:	f002 fc2b 	bl	8004864 <HAL_ADC_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002014:	f000 fc50 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002018:	2302      	movs	r3, #2
 800201a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800201c:	2306      	movs	r3, #6
 800201e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	483e      	ldr	r0, [pc, #248]	; (8002120 <MX_ADC1_Init+0x208>)
 8002026:	f002 fc1d 	bl	8004864 <HAL_ADC_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002030:	f000 fc42 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002034:	2303      	movs	r3, #3
 8002036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002038:	2307      	movs	r3, #7
 800203a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203c:	463b      	mov	r3, r7
 800203e:	4619      	mov	r1, r3
 8002040:	4837      	ldr	r0, [pc, #220]	; (8002120 <MX_ADC1_Init+0x208>)
 8002042:	f002 fc0f 	bl	8004864 <HAL_ADC_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800204c:	f000 fc34 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002050:	2304      	movs	r3, #4
 8002052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002054:	2308      	movs	r3, #8
 8002056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4830      	ldr	r0, [pc, #192]	; (8002120 <MX_ADC1_Init+0x208>)
 800205e:	f002 fc01 	bl	8004864 <HAL_ADC_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002068:	f000 fc26 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800206c:	2305      	movs	r3, #5
 800206e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002070:	2309      	movs	r3, #9
 8002072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4829      	ldr	r0, [pc, #164]	; (8002120 <MX_ADC1_Init+0x208>)
 800207a:	f002 fbf3 	bl	8004864 <HAL_ADC_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002084:	f000 fc18 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002088:	2306      	movs	r3, #6
 800208a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800208c:	230a      	movs	r3, #10
 800208e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4822      	ldr	r0, [pc, #136]	; (8002120 <MX_ADC1_Init+0x208>)
 8002096:	f002 fbe5 	bl	8004864 <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80020a0:	f000 fc0a 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020a4:	2307      	movs	r3, #7
 80020a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80020a8:	230b      	movs	r3, #11
 80020aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	481b      	ldr	r0, [pc, #108]	; (8002120 <MX_ADC1_Init+0x208>)
 80020b2:	f002 fbd7 	bl	8004864 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80020bc:	f000 fbfc 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80020c0:	230e      	movs	r3, #14
 80020c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80020c4:	230c      	movs	r3, #12
 80020c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <MX_ADC1_Init+0x208>)
 80020ce:	f002 fbc9 	bl	8004864 <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80020d8:	f000 fbee 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020dc:	230a      	movs	r3, #10
 80020de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80020e0:	230d      	movs	r3, #13
 80020e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020e4:	2307      	movs	r3, #7
 80020e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_ADC1_Init+0x208>)
 80020ee:	f002 fbb9 	bl	8004864 <HAL_ADC_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 80020f8:	f000 fbde 	bl	80028b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80020fc:	230f      	movs	r3, #15
 80020fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002100:	230e      	movs	r3, #14
 8002102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_ADC1_Init+0x208>)
 800210a:	f002 fbab 	bl	8004864 <HAL_ADC_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8002114:	f000 fbd0 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000314 	.word	0x20000314
 8002124:	40012000 	.word	0x40012000
 8002128:	0f000001 	.word	0x0f000001

0800212c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_I2C1_Init+0x50>)
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <MX_I2C1_Init+0x54>)
 8002134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_I2C1_Init+0x50>)
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_I2C1_Init+0x58>)
 800213a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_I2C1_Init+0x50>)
 800214a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800214e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_I2C1_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_I2C1_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_I2C1_Init+0x50>)
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_I2C1_Init+0x50>)
 800216a:	f003 fc73 	bl	8005a54 <HAL_I2C_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002174:	f000 fba0 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200003bc 	.word	0x200003bc
 8002180:	40005400 	.word	0x40005400
 8002184:	00061a80 	.word	0x00061a80

08002188 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MX_SPI2_Init+0x64>)
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <MX_SPI2_Init+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_SPI2_Init+0x64>)
 8002194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_SPI2_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_SPI2_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_SPI2_Init+0x64>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_SPI2_Init+0x64>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_SPI2_Init+0x64>)
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_SPI2_Init+0x64>)
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <MX_SPI2_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_SPI2_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <MX_SPI2_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_SPI2_Init+0x64>)
 80021d4:	220a      	movs	r2, #10
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MX_SPI2_Init+0x64>)
 80021da:	f004 fe39 	bl	8006e50 <HAL_SPI_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021e4:	f000 fb68 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000410 	.word	0x20000410
 80021f0:	40003800 	.word	0x40003800

080021f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <MX_SPI3_Init+0x64>)
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <MX_SPI3_Init+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <MX_SPI3_Init+0x64>)
 8002200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002204:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_SPI3_Init+0x64>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_SPI3_Init+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_SPI3_Init+0x64>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_SPI3_Init+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_SPI3_Init+0x64>)
 8002220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002224:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_SPI3_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_SPI3_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_SPI3_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_SPI3_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_SPI3_Init+0x64>)
 8002240:	220a      	movs	r2, #10
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_SPI3_Init+0x64>)
 8002246:	f004 fe03 	bl	8006e50 <HAL_SPI_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002250:	f000 fb32 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000468 	.word	0x20000468
 800225c:	40003c00 	.word	0x40003c00

08002260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b092      	sub	sp, #72	; 0x48
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
 8002280:	615a      	str	r2, [r3, #20]
 8002282:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2220      	movs	r2, #32
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f006 f9aa 	bl	80085e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002292:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <MX_TIM1_Init+0x16c>)
 8002294:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002298:	220b      	movs	r2, #11
 800229a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <MX_TIM1_Init+0x168>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80022a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022b0:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022bc:	4842      	ldr	r0, [pc, #264]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022be:	f004 ff0f 	bl	80070e0 <HAL_TIM_PWM_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80022c8:	f000 faf6 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022d8:	4619      	mov	r1, r3
 80022da:	483b      	ldr	r0, [pc, #236]	; (80023c8 <MX_TIM1_Init+0x168>)
 80022dc:	f005 fdb4 	bl	8007e48 <HAL_TIMEx_MasterConfigSynchronization>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80022e6:	f000 fae7 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ea:	2360      	movs	r3, #96	; 0x60
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022f6:	2300      	movs	r3, #0
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	482e      	ldr	r0, [pc, #184]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002310:	f005 fa3a 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800231a:	f000 facd 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	2204      	movs	r2, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4828      	ldr	r0, [pc, #160]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002328:	f005 fa2e 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002332:	f000 fac1 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	4822      	ldr	r0, [pc, #136]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002340:	f005 fa22 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800234a:	f000 fab5 	bl	80028b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0208 	bic.w	r2, r2, #8
 800235c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800235e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002362:	220c      	movs	r2, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002368:	f005 fa0e 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002372:	f000 faa1 	bl	80028b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <MX_TIM1_Init+0x168>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <MX_TIM1_Init+0x168>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002384:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800239a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <MX_TIM1_Init+0x168>)
 80023aa:	f005 fdc9 	bl	8007f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80023b4:	f000 fa80 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <MX_TIM1_Init+0x168>)
 80023ba:	f001 fc37 	bl	8003c2c <HAL_TIM_MspPostInit>

}
 80023be:	bf00      	nop
 80023c0:	3748      	adds	r7, #72	; 0x48
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200004c0 	.word	0x200004c0
 80023cc:	40010000 	.word	0x40010000

080023d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <MX_TIM2_Init+0xac>)
 80023f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <MX_TIM2_Init+0xac>)
 80023fc:	220b      	movs	r2, #11
 80023fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <MX_TIM2_Init+0xac>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <MX_TIM2_Init+0xac>)
 8002408:	f240 52db 	movw	r2, #1499	; 0x5db
 800240c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <MX_TIM2_Init+0xac>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_TIM2_Init+0xac>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800241a:	4818      	ldr	r0, [pc, #96]	; (800247c <MX_TIM2_Init+0xac>)
 800241c:	f004 fe60 	bl	80070e0 <HAL_TIM_PWM_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002426:	f000 fa47 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002432:	f107 0320 	add.w	r3, r7, #32
 8002436:	4619      	mov	r1, r3
 8002438:	4810      	ldr	r0, [pc, #64]	; (800247c <MX_TIM2_Init+0xac>)
 800243a:	f005 fd05 	bl	8007e48 <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002444:	f000 fa38 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002448:	2360      	movs	r3, #96	; 0x60
 800244a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_TIM2_Init+0xac>)
 8002460:	f005 f992 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800246a:	f000 fa25 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800246e:	4803      	ldr	r0, [pc, #12]	; (800247c <MX_TIM2_Init+0xac>)
 8002470:	f001 fbdc 	bl	8003c2c <HAL_TIM_MspPostInit>

}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000508 	.word	0x20000508

08002480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f006 f8a8 	bl	80085e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <MX_TIM3_Init+0xa0>)
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <MX_TIM3_Init+0xa4>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024c2:	2303      	movs	r3, #3
 80024c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ca:	2301      	movs	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80024d6:	2302      	movs	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_TIM3_Init+0xa0>)
 80024ee:	f004 ff0f 	bl	8007310 <HAL_TIM_Encoder_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024f8:	f000 f9de 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_TIM3_Init+0xa0>)
 800250a:	f005 fc9d 	bl	8007e48 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002514:	f000 f9d0 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3730      	adds	r7, #48	; 0x30
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000550 	.word	0x20000550
 8002524:	40000400 	.word	0x40000400

08002528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	2224      	movs	r2, #36	; 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f006 f854 	bl	80085e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <MX_TIM4_Init+0xa4>)
 8002548:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <MX_TIM4_Init+0xa0>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800256a:	2303      	movs	r3, #3
 800256c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002582:	2301      	movs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	4619      	mov	r1, r3
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_TIM4_Init+0xa0>)
 8002596:	f004 febb 	bl	8007310 <HAL_TIM_Encoder_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025a0:	f000 f98a 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_TIM4_Init+0xa0>)
 80025b2:	f005 fc49 	bl	8007e48 <HAL_TIMEx_MasterConfigSynchronization>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80025bc:	f000 f97c 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000598 	.word	0x20000598
 80025cc:	40000800 	.word	0x40000800

080025d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d6:	463b      	mov	r3, r7
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <MX_TIM6_Init+0x64>)
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <MX_TIM6_Init+0x68>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <MX_TIM6_Init+0x64>)
 80025e6:	220b      	movs	r2, #11
 80025e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <MX_TIM6_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_TIM6_Init+0x64>)
 80025f2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80025f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_TIM6_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025fe:	480d      	ldr	r0, [pc, #52]	; (8002634 <MX_TIM6_Init+0x64>)
 8002600:	f004 fcaf 	bl	8006f62 <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800260a:	f000 f955 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002616:	463b      	mov	r3, r7
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <MX_TIM6_Init+0x64>)
 800261c:	f005 fc14 	bl	8007e48 <HAL_TIMEx_MasterConfigSynchronization>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002626:	f000 f947 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200005e0 	.word	0x200005e0
 8002638:	40001000 	.word	0x40001000

0800263c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_UART5_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_UART5_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_UART5_Init+0x4c>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_UART5_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_UART5_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_UART5_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_UART5_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_UART5_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_UART5_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_UART5_Init+0x4c>)
 8002674:	f005 fcca 	bl	800800c <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800267e:	f000 f91b 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000628 	.word	0x20000628
 800268c:	40005000 	.word	0x40005000

08002690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_DMA_Init+0x3c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <MX_DMA_Init+0x3c>)
 80026a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_DMA_Init+0x3c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2038      	movs	r0, #56	; 0x38
 80026b8:	f002 fc5f 	bl	8004f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026bc:	2038      	movs	r0, #56	; 0x38
 80026be:	f002 fc78 	bl	8004fb2 <HAL_NVIC_EnableIRQ>

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <MX_GPIO_Init+0x18c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a5b      	ldr	r2, [pc, #364]	; (800285c <MX_GPIO_Init+0x18c>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <MX_GPIO_Init+0x18c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b55      	ldr	r3, [pc, #340]	; (800285c <MX_GPIO_Init+0x18c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a54      	ldr	r2, [pc, #336]	; (800285c <MX_GPIO_Init+0x18c>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <MX_GPIO_Init+0x18c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b4e      	ldr	r3, [pc, #312]	; (800285c <MX_GPIO_Init+0x18c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a4d      	ldr	r2, [pc, #308]	; (800285c <MX_GPIO_Init+0x18c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <MX_GPIO_Init+0x18c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <MX_GPIO_Init+0x18c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a46      	ldr	r2, [pc, #280]	; (800285c <MX_GPIO_Init+0x18c>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <MX_GPIO_Init+0x18c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <MX_GPIO_Init+0x18c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a3f      	ldr	r2, [pc, #252]	; (800285c <MX_GPIO_Init+0x18c>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <MX_GPIO_Init+0x18c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002778:	4839      	ldr	r0, [pc, #228]	; (8002860 <MX_GPIO_Init+0x190>)
 800277a:	f003 f951 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	f243 0130 	movw	r1, #12336	; 0x3030
 8002784:	4837      	ldr	r0, [pc, #220]	; (8002864 <MX_GPIO_Init+0x194>)
 8002786:	f003 f94b 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002790:	4835      	ldr	r0, [pc, #212]	; (8002868 <MX_GPIO_Init+0x198>)
 8002792:	f003 f945 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	482d      	ldr	r0, [pc, #180]	; (8002860 <MX_GPIO_Init+0x190>)
 80027ac:	f002 ff8c 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 80027b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4825      	ldr	r0, [pc, #148]	; (8002860 <MX_GPIO_Init+0x190>)
 80027ca:	f002 ff7d 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80027ce:	2302      	movs	r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4820      	ldr	r0, [pc, #128]	; (8002864 <MX_GPIO_Init+0x194>)
 80027e2:	f002 ff71 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 80027e6:	2304      	movs	r3, #4
 80027e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	481a      	ldr	r0, [pc, #104]	; (8002864 <MX_GPIO_Init+0x194>)
 80027fa:	f002 ff65 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 80027fe:	f243 0330 	movw	r3, #12336	; 0x3030
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	2301      	movs	r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4813      	ldr	r0, [pc, #76]	; (8002864 <MX_GPIO_Init+0x194>)
 8002818:	f002 ff56 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 800281c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <MX_GPIO_Init+0x190>)
 8002832:	f002 ff49 	bl	80056c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4806      	ldr	r0, [pc, #24]	; (8002868 <MX_GPIO_Init+0x198>)
 8002850:	f002 ff3a 	bl	80056c8 <HAL_GPIO_Init>

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40020800 	.word	0x40020800
 8002864:	40020400 	.word	0x40020400
 8002868:	40020000 	.word	0x40020000

0800286c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  getLineSensor();
 8002874:	f7ff f836 	bl	80018e4 <getLineSensor>
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_write>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);

	return val;
}
int _write(int file, char *ptr, int len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e009      	b.n	80028a6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	60ba      	str	r2, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fa80 	bl	8001da0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dbf1      	blt.n	8002892 <_write+0x12>
  }
  return len;
 80028ae:	687b      	ldr	r3, [r7, #4]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <Error_Handler+0x8>
	...

080028c4 <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 80028ca:	2301      	movs	r3, #1
 80028cc:	71bb      	strb	r3, [r7, #6]
 80028ce:	2301      	movs	r3, #1
 80028d0:	717b      	strb	r3, [r7, #5]
 80028d2:	2300      	movs	r3, #0
 80028d4:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 80028d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <getMarkerSensor+0x50>)
 80028dc:	f003 f888 	bl	80059f0 <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 80028e4:	2102      	movs	r1, #2
 80028e6:	480c      	ldr	r0, [pc, #48]	; (8002918 <getMarkerSensor+0x54>)
 80028e8:	f003 f882 	bl	80059f0 <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += 0x01;
 80028f0:	79bb      	ldrb	r3, [r7, #6]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <getMarkerSensor+0x38>
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	3301      	adds	r3, #1
 80028fa:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += 0x02;
 80028fc:	797b      	ldrb	r3, [r7, #5]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <getMarkerSensor+0x44>
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	3302      	adds	r3, #2
 8002906:	71fb      	strb	r3, [r7, #7]

	return ret;
 8002908:	79fb      	ldrb	r3, [r7, #7]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020800 	.word	0x40020800
 8002918:	40020400 	.word	0x40020400

0800291c <checkMarker>:
// モジュール名 checkMarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkMarker( void ) {
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	71fb      	strb	r3, [r7, #7]

	if ( getMarkerSensor() ) {
 8002926:	f7ff ffcd 	bl	80028c4 <getMarkerSensor>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01a      	beq.n	8002966 <checkMarker+0x4a>
		if (encMarker == 0) {
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <checkMarker+0x54>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <checkMarker+0x26>
			encMarker = encTotalN;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <checkMarker+0x58>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <checkMarker+0x54>)
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e011      	b.n	8002966 <checkMarker+0x4a>
		} else if (encTotalN - encMarker >= encMM(35)) {
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <checkMarker+0x58>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <checkMarker+0x54>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1ad4      	subs	r4, r2, r3
 800294c:	2023      	movs	r0, #35	; 0x23
 800294e:	f7fe ff69 	bl	8001824 <encMM>
 8002952:	4603      	mov	r3, r0
 8002954:	429c      	cmp	r4, r3
 8002956:	db06      	blt.n	8002966 <checkMarker+0x4a>
			encMarker = 0;
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <checkMarker+0x54>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
			ret = getMarkerSensor();
 800295e:	f7ff ffb1 	bl	80028c4 <getMarkerSensor>
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	20000670 	.word	0x20000670
 8002974:	20000274 	.word	0x20000274

08002978 <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	460a      	mov	r2, r1
 8002982:	80fb      	strh	r3, [r7, #6]
 8002984:	4613      	mov	r3, r2
 8002986:	80bb      	strh	r3, [r7, #4]

    if (pwmL > 0) {
 8002988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	dd09      	ble.n	80029a4 <motorPwmOut+0x2c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <motorPwmOut+0xc4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <motorPwmOut+0xc4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
 80029a2:	e01b      	b.n	80029dc <motorPwmOut+0x64>
    } else if (pwmL == 0) {
 80029a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <motorPwmOut+0x4a>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <motorPwmOut+0xc4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <motorPwmOut+0xc4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
 80029c0:	e00c      	b.n	80029dc <motorPwmOut+0x64>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfb8      	it	lt
 80029ca:	425b      	neglt	r3, r3
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <motorPwmOut+0xc4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <motorPwmOut+0xc4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (pwmR > 0) {
 80029dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	dd09      	ble.n	80029f8 <motorPwmOut+0x80>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <motorPwmOut+0xc4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmR);
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <motorPwmOut+0xc4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
    }

}
 80029f6:	e01b      	b.n	8002a30 <motorPwmOut+0xb8>
    } else if (pwmR == 0) {
 80029f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <motorPwmOut+0x9e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <motorPwmOut+0xc4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <motorPwmOut+0xc4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a14:	e00c      	b.n	8002a30 <motorPwmOut+0xb8>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
 8002a16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfb8      	it	lt
 8002a1e:	425b      	neglt	r3, r3
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <motorPwmOut+0xc4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <motorPwmOut+0xc4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	200004c0 	.word	0x200004c0

08002a40 <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	460a      	mov	r2, r1
 8002a4a:	80fb      	strh	r3, [r7, #6]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 8002a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dd14      	ble.n	8002a82 <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 8002a58:	88ba      	ldrh	r2, [r7, #4]
 8002a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bfb8      	it	lt
 8002a62:	425b      	neglt	r3, r3
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 8002a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bfb8      	it	lt
 8002a74:	425b      	neglt	r3, r3
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	81bb      	strh	r3, [r7, #12]
 8002a80:	e013      	b.n	8002aaa <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bfb8      	it	lt
 8002a8a:	425b      	neglt	r3, r3
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	88bb      	ldrh	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8002a96:	88ba      	ldrh	r2, [r7, #4]
 8002a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bfb8      	it	lt
 8002aa0:	425b      	neglt	r3, r3
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 8002aaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002aae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5f 	bl	8002978 <motorPwmOut>
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af02      	add	r7, sp, #8
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	// if ( cntSW >= 100 ) {
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	switch ( swValRotary ) {
 8002aca:	4bae      	ldr	r3, [pc, #696]	; (8002d84 <setup+0x2c0>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	f200 84bd 	bhi.w	800344e <setup+0x98a>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <setup+0x18>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b21 	.word	0x08002b21
 8002ae4:	0800344f 	.word	0x0800344f
 8002ae8:	0800344f 	.word	0x0800344f
 8002aec:	0800344f 	.word	0x0800344f
 8002af0:	08002c35 	.word	0x08002c35
 8002af4:	08002e1d 	.word	0x08002e1d
 8002af8:	08002f95 	.word	0x08002f95
 8002afc:	0800344f 	.word	0x0800344f
 8002b00:	0800311f 	.word	0x0800311f
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8002b04:	2102      	movs	r1, #2
 8002b06:	48a0      	ldr	r0, [pc, #640]	; (8002d88 <setup+0x2c4>)
 8002b08:	f000 fcd4 	bl	80034b4 <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8002b0c:	499f      	ldr	r1, [pc, #636]	; (8002d8c <setup+0x2c8>)
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe fbd0 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8002b14:	499e      	ldr	r1, [pc, #632]	; (8002d90 <setup+0x2cc>)
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe fbcc 	bl	80012b4 <lcdRowPrintf>
			break;
 8002b1c:	f000 bcad 	b.w	800347a <setup+0x9b6>
		//------------------------------------------------------------------
		// パラメータ調整(通常トレース)
		//------------------------------------------------------------------
		case 0x1:
			dataTuningLR( &pattern_parameter1, 1 );
 8002b20:	2101      	movs	r1, #1
 8002b22:	489c      	ldr	r0, [pc, #624]	; (8002d94 <setup+0x2d0>)
 8002b24:	f000 fd80 	bl	8003628 <dataTuningLR>
			
			if ( pattern_parameter1 == 5 ) pattern_parameter1 = 1;
 8002b28:	4b9a      	ldr	r3, [pc, #616]	; (8002d94 <setup+0x2d0>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d103      	bne.n	8002b38 <setup+0x74>
 8002b30:	4b98      	ldr	r3, [pc, #608]	; (8002d94 <setup+0x2d0>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e006      	b.n	8002b46 <setup+0x82>
			else if ( pattern_parameter1 == 0 ) pattern_parameter1 = 4;
 8002b38:	4b96      	ldr	r3, [pc, #600]	; (8002d94 <setup+0x2d0>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <setup+0x82>
 8002b40:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <setup+0x2d0>)
 8002b42:	2204      	movs	r2, #4
 8002b44:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_parameter1 ) {
 8002b46:	4b93      	ldr	r3, [pc, #588]	; (8002d94 <setup+0x2d0>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	f200 848b 	bhi.w	8003468 <setup+0x9a4>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <setup+0x94>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b9b 	.word	0x08002b9b
 8002b60:	08002bcd 	.word	0x08002bcd
 8002b64:	08002bff 	.word	0x08002bff
				case 1:
					// 通常走行速度
					lcdRowPrintf(UPROW, "STRAIGHT");
 8002b68:	498b      	ldr	r1, [pc, #556]	; (8002d98 <setup+0x2d4>)
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fe fba2 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STRAIGHT] / 10);
 8002b70:	4b8a      	ldr	r3, [pc, #552]	; (8002d9c <setup+0x2d8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fce5 	bl	8000544 <__aeabi_ui2d>
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <setup+0x2dc>)
 8002b80:	f7fd fe84 	bl	800088c <__aeabi_ddiv>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4986      	ldr	r1, [pc, #536]	; (8002da4 <setup+0x2e0>)
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7fe fb92 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STRAIGHT], 1 );
 8002b90:	2101      	movs	r1, #1
 8002b92:	4882      	ldr	r0, [pc, #520]	; (8002d9c <setup+0x2d8>)
 8002b94:	f000 fcc4 	bl	8003520 <dataTuningUD>
					break;
 8002b98:	e04a      	b.n	8002c30 <setup+0x16c>
				case 2:
					// 停止速度
					lcdRowPrintf(UPROW, "CURVE   ");
 8002b9a:	4983      	ldr	r1, [pc, #524]	; (8002da8 <setup+0x2e4>)
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fb89 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVE] / 10);
 8002ba2:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <setup+0x2d8>)
 8002ba4:	78db      	ldrb	r3, [r3, #3]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fccc 	bl	8000544 <__aeabi_ui2d>
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <setup+0x2dc>)
 8002bb2:	f7fd fe6b 	bl	800088c <__aeabi_ddiv>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	497a      	ldr	r1, [pc, #488]	; (8002da4 <setup+0x2e0>)
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe fb79 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVE], 1 );
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4879      	ldr	r0, [pc, #484]	; (8002dac <setup+0x2e8>)
 8002bc6:	f000 fcab 	bl	8003520 <dataTuningUD>
					break;
 8002bca:	e031      	b.n	8002c30 <setup+0x16c>
				case 3:
					// カーブブレーキ
					lcdRowPrintf(UPROW, "BRAKE   ");
 8002bcc:	4978      	ldr	r1, [pc, #480]	; (8002db0 <setup+0x2ec>)
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe fb70 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVEBREAK] / 10);
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <setup+0x2d8>)
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fcb3 	bl	8000544 <__aeabi_ui2d>
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <setup+0x2dc>)
 8002be4:	f7fd fe52 	bl	800088c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	496d      	ldr	r1, [pc, #436]	; (8002da4 <setup+0x2e0>)
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7fe fb60 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVEBREAK], 1 );
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	486f      	ldr	r0, [pc, #444]	; (8002db4 <setup+0x2f0>)
 8002bf8:	f000 fc92 	bl	8003520 <dataTuningUD>
					break;
 8002bfc:	e018      	b.n	8002c30 <setup+0x16c>
				case 4:
					// 停止速度
					lcdRowPrintf(UPROW, "STOP    ");
 8002bfe:	496e      	ldr	r1, [pc, #440]	; (8002db8 <setup+0x2f4>)
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fb57 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STOP] / 10);
 8002c06:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <setup+0x2d8>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc9a 	bl	8000544 <__aeabi_ui2d>
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	4b62      	ldr	r3, [pc, #392]	; (8002da0 <setup+0x2dc>)
 8002c16:	f7fd fe39 	bl	800088c <__aeabi_ddiv>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4961      	ldr	r1, [pc, #388]	; (8002da4 <setup+0x2e0>)
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fe fb47 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STOP], 1 );
 8002c26:	2101      	movs	r1, #1
 8002c28:	4864      	ldr	r0, [pc, #400]	; (8002dbc <setup+0x2f8>)
 8002c2a:	f000 fc79 	bl	8003520 <dataTuningUD>
					break;
 8002c2e:	bf00      	nop
				
			}
			break;
 8002c30:	f000 bc1a 	b.w	8003468 <setup+0x9a4>
		// 	break;
		//------------------------------------------------------------------
		// ゲイン調整(直線トレース)
		//------------------------------------------------------------------
		case 0x5:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002c34:	4962      	ldr	r1, [pc, #392]	; (8002dc0 <setup+0x2fc>)
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe fb3c 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4861      	ldr	r0, [pc, #388]	; (8002dc4 <setup+0x300>)
 8002c40:	f000 fc38 	bl	80034b4 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <setup+0x300>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <setup+0x1a2>
				motorPwmOutSynth( tracePwm, 0 );
 8002c4c:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <setup+0x304>)
 8002c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fef3 	bl	8002a40 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <setup+0x308>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
 8002c64:	e007      	b.n	8002c76 <setup+0x1b2>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002c66:	2100      	movs	r1, #0
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7ff fee9 	bl	8002a40 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002c6e:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <setup+0x308>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002c76:	2101      	movs	r1, #1
 8002c78:	4855      	ldr	r0, [pc, #340]	; (8002dd0 <setup+0x30c>)
 8002c7a:	f000 fcd5 	bl	8003628 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <setup+0x30c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d103      	bne.n	8002c8e <setup+0x1ca>
 8002c86:	4b52      	ldr	r3, [pc, #328]	; (8002dd0 <setup+0x30c>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e006      	b.n	8002c9c <setup+0x1d8>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <setup+0x30c>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <setup+0x1d8>
 8002c96:	4b4e      	ldr	r3, [pc, #312]	; (8002dd0 <setup+0x30c>)
 8002c98:	2203      	movs	r2, #3
 8002c9a:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <setup+0x30c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d059      	beq.n	8002d58 <setup+0x294>
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	f300 83e1 	bgt.w	800346c <setup+0x9a8>
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d002      	beq.n	8002cb4 <setup+0x1f0>
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d029      	beq.n	8002d06 <setup+0x242>
					}
					
					dataTuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 8002cb2:	e3db      	b.n	800346c <setup+0x9a8>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <setup+0x310>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cbc:	d302      	bcc.n	8002cc4 <setup+0x200>
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <setup+0x310>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <setup+0x310>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	2bf9      	cmp	r3, #249	; 0xf9
 8002cca:	d809      	bhi.n	8002ce0 <setup+0x21c>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 8002ccc:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <setup+0x314>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <setup+0x318>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	4942      	ldr	r1, [pc, #264]	; (8002de0 <setup+0x31c>)
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7fe faeb 	bl	80012b4 <lcdRowPrintf>
 8002cde:	e00d      	b.n	8002cfc <setup+0x238>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <setup+0x320>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <setup+0x314>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <setup+0x318>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	493c      	ldr	r1, [pc, #240]	; (8002de8 <setup+0x324>)
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f7fe fadc 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1_buff, 1 );
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4839      	ldr	r0, [pc, #228]	; (8002de4 <setup+0x320>)
 8002d00:	f000 fc0e 	bl	8003520 <dataTuningUD>
					break;
 8002d04:	e089      	b.n	8002e1a <setup+0x356>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <setup+0x310>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d0e:	d302      	bcc.n	8002d16 <setup+0x252>
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <setup+0x310>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <setup+0x310>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2bf9      	cmp	r3, #249	; 0xf9
 8002d1c:	d809      	bhi.n	8002d32 <setup+0x26e>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <setup+0x320>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <setup+0x318>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4930      	ldr	r1, [pc, #192]	; (8002dec <setup+0x328>)
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fe fac2 	bl	80012b4 <lcdRowPrintf>
 8002d30:	e00d      	b.n	8002d4e <setup+0x28a>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <setup+0x320>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <setup+0x314>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <setup+0x318>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	460b      	mov	r3, r1
 8002d46:	4928      	ldr	r1, [pc, #160]	; (8002de8 <setup+0x324>)
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fab3 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1_buff, 1 );
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4821      	ldr	r0, [pc, #132]	; (8002dd8 <setup+0x314>)
 8002d52:	f000 fbe5 	bl	8003520 <dataTuningUD>
					break;
 8002d56:	e060      	b.n	8002e1a <setup+0x356>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <setup+0x310>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d60:	d302      	bcc.n	8002d68 <setup+0x2a4>
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <setup+0x310>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <setup+0x310>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2bf9      	cmp	r3, #249	; 0xf9
 8002d6e:	d841      	bhi.n	8002df4 <setup+0x330>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8002d70:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <setup+0x320>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <setup+0x314>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	491d      	ldr	r1, [pc, #116]	; (8002df0 <setup+0x32c>)
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7fe fa99 	bl	80012b4 <lcdRowPrintf>
 8002d82:	e045      	b.n	8002e10 <setup+0x34c>
 8002d84:	20000686 	.word	0x20000686
 8002d88:	20000674 	.word	0x20000674
 8002d8c:	0800d5c4 	.word	0x0800d5c4
 8002d90:	0800d5d0 	.word	0x0800d5d0
 8002d94:	20000013 	.word	0x20000013
 8002d98:	0800d5dc 	.word	0x0800d5dc
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	40240000 	.word	0x40240000
 8002da4:	0800d5e8 	.word	0x0800d5e8
 8002da8:	0800d5f4 	.word	0x0800d5f4
 8002dac:	20000007 	.word	0x20000007
 8002db0:	0800d600 	.word	0x0800d600
 8002db4:	20000005 	.word	0x20000005
 8002db8:	0800d60c 	.word	0x0800d60c
 8002dbc:	20000006 	.word	0x20000006
 8002dc0:	0800d618 	.word	0x0800d618
 8002dc4:	20000684 	.word	0x20000684
 8002dc8:	20000302 	.word	0x20000302
 8002dcc:	20000508 	.word	0x20000508
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	20000676 	.word	0x20000676
 8002dd8:	20000310 	.word	0x20000310
 8002ddc:	2000000f 	.word	0x2000000f
 8002de0:	0800d624 	.word	0x0800d624
 8002de4:	2000000e 	.word	0x2000000e
 8002de8:	0800d630 	.word	0x0800d630
 8002dec:	0800d63c 	.word	0x0800d63c
 8002df0:	0800d648 	.word	0x0800d648
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002df4:	4b98      	ldr	r3, [pc, #608]	; (8003058 <setup+0x594>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b98      	ldr	r3, [pc, #608]	; (800305c <setup+0x598>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4b97      	ldr	r3, [pc, #604]	; (8003060 <setup+0x59c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	4996      	ldr	r1, [pc, #600]	; (8003064 <setup+0x5a0>)
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f7fe fa52 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1_buff, 1 );
 8002e10:	2101      	movs	r1, #1
 8002e12:	4893      	ldr	r0, [pc, #588]	; (8003060 <setup+0x59c>)
 8002e14:	f000 fb84 	bl	8003520 <dataTuningUD>
					break;
 8002e18:	bf00      	nop
			break;
 8002e1a:	e327      	b.n	800346c <setup+0x9a8>
		//------------------------------------------------------------------
		// ゲイン調整(カーブトレース)
		//------------------------------------------------------------------
		case 0x6:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002e1c:	4992      	ldr	r1, [pc, #584]	; (8003068 <setup+0x5a4>)
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fe fa48 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002e24:	2102      	movs	r1, #2
 8002e26:	4891      	ldr	r0, [pc, #580]	; (800306c <setup+0x5a8>)
 8002e28:	f000 fb44 	bl	80034b4 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <setup+0x5a8>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <setup+0x38a>
				motorPwmOutSynth( tracePwm, 0 );
 8002e34:	4b8e      	ldr	r3, [pc, #568]	; (8003070 <setup+0x5ac>)
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fdff 	bl	8002a40 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002e42:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <setup+0x5b0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4c:	e007      	b.n	8002e5e <setup+0x39a>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7ff fdf5 	bl	8002a40 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002e56:	4b87      	ldr	r3, [pc, #540]	; (8003074 <setup+0x5b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4885      	ldr	r0, [pc, #532]	; (8003078 <setup+0x5b4>)
 8002e62:	f000 fbe1 	bl	8003628 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002e66:	4b84      	ldr	r3, [pc, #528]	; (8003078 <setup+0x5b4>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d103      	bne.n	8002e76 <setup+0x3b2>
 8002e6e:	4b82      	ldr	r3, [pc, #520]	; (8003078 <setup+0x5b4>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e006      	b.n	8002e84 <setup+0x3c0>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <setup+0x5b4>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <setup+0x3c0>
 8002e7e:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <setup+0x5b4>)
 8002e80:	2203      	movs	r2, #3
 8002e82:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002e84:	4b7c      	ldr	r3, [pc, #496]	; (8003078 <setup+0x5b4>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d059      	beq.n	8002f40 <setup+0x47c>
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	f300 82ef 	bgt.w	8003470 <setup+0x9ac>
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <setup+0x3d8>
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d029      	beq.n	8002eee <setup+0x42a>
					}
					
					dataTuningUD ( &kd1Curve_buff, 1 );
					break;
			}
			break;
 8002e9a:	e2e9      	b.n	8003470 <setup+0x9ac>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002e9c:	4b77      	ldr	r3, [pc, #476]	; (800307c <setup+0x5b8>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ea4:	d302      	bcc.n	8002eac <setup+0x3e8>
 8002ea6:	4b75      	ldr	r3, [pc, #468]	; (800307c <setup+0x5b8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <setup+0x5b8>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	2bf9      	cmp	r3, #249	; 0xf9
 8002eb2:	d809      	bhi.n	8002ec8 <setup+0x404>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1Curve_buff, kd1Curve_buff);
 8002eb4:	4b72      	ldr	r3, [pc, #456]	; (8003080 <setup+0x5bc>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <setup+0x5c0>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4972      	ldr	r1, [pc, #456]	; (8003088 <setup+0x5c4>)
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7fe f9f7 	bl	80012b4 <lcdRowPrintf>
 8002ec6:	e00d      	b.n	8002ee4 <setup+0x420>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8002ec8:	4b70      	ldr	r3, [pc, #448]	; (800308c <setup+0x5c8>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <setup+0x5bc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	; (8003084 <setup+0x5c0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	460b      	mov	r3, r1
 8002edc:	4961      	ldr	r1, [pc, #388]	; (8003064 <setup+0x5a0>)
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fe f9e8 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1Curve_buff, 1 );
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4869      	ldr	r0, [pc, #420]	; (800308c <setup+0x5c8>)
 8002ee8:	f000 fb1a 	bl	8003520 <dataTuningUD>
					break;
 8002eec:	e051      	b.n	8002f92 <setup+0x4ce>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <setup+0x5b8>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ef6:	d302      	bcc.n	8002efe <setup+0x43a>
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <setup+0x5b8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <setup+0x5b8>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2bf9      	cmp	r3, #249	; 0xf9
 8002f04:	d809      	bhi.n	8002f1a <setup+0x456>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1Curve_buff, kd1Curve_buff);
 8002f06:	4b61      	ldr	r3, [pc, #388]	; (800308c <setup+0x5c8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <setup+0x5c0>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	495f      	ldr	r1, [pc, #380]	; (8003090 <setup+0x5cc>)
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7fe f9ce 	bl	80012b4 <lcdRowPrintf>
 8002f18:	e00d      	b.n	8002f36 <setup+0x472>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	; (800308c <setup+0x5c8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <setup+0x5bc>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b57      	ldr	r3, [pc, #348]	; (8003084 <setup+0x5c0>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	494d      	ldr	r1, [pc, #308]	; (8003064 <setup+0x5a0>)
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7fe f9bf 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1Curve_buff, 1 );
 8002f36:	2101      	movs	r1, #1
 8002f38:	4851      	ldr	r0, [pc, #324]	; (8003080 <setup+0x5bc>)
 8002f3a:	f000 faf1 	bl	8003520 <dataTuningUD>
					break;
 8002f3e:	e028      	b.n	8002f92 <setup+0x4ce>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002f40:	4b4e      	ldr	r3, [pc, #312]	; (800307c <setup+0x5b8>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f48:	d302      	bcc.n	8002f50 <setup+0x48c>
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	; (800307c <setup+0x5b8>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002f50:	4b4a      	ldr	r3, [pc, #296]	; (800307c <setup+0x5b8>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	2bf9      	cmp	r3, #249	; 0xf9
 8002f56:	d809      	bhi.n	8002f6c <setup+0x4a8>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1Curve_buff, ki1Curve_buff);
 8002f58:	4b4c      	ldr	r3, [pc, #304]	; (800308c <setup+0x5c8>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <setup+0x5bc>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	494c      	ldr	r1, [pc, #304]	; (8003094 <setup+0x5d0>)
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe f9a5 	bl	80012b4 <lcdRowPrintf>
 8002f6a:	e00d      	b.n	8002f88 <setup+0x4c4>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <setup+0x5c8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <setup+0x5bc>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4b42      	ldr	r3, [pc, #264]	; (8003084 <setup+0x5c0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4938      	ldr	r1, [pc, #224]	; (8003064 <setup+0x5a0>)
 8002f82:	2001      	movs	r0, #1
 8002f84:	f7fe f996 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1Curve_buff, 1 );
 8002f88:	2101      	movs	r1, #1
 8002f8a:	483e      	ldr	r0, [pc, #248]	; (8003084 <setup+0x5c0>)
 8002f8c:	f000 fac8 	bl	8003520 <dataTuningUD>
					break;
 8002f90:	bf00      	nop
			break;
 8002f92:	e26d      	b.n	8003470 <setup+0x9ac>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x7:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002f94:	4934      	ldr	r1, [pc, #208]	; (8003068 <setup+0x5a4>)
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f98c 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			dataTuningLR( &pattern_gain, 1 );
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4836      	ldr	r0, [pc, #216]	; (8003078 <setup+0x5b4>)
 8002fa0:	f000 fb42 	bl	8003628 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002fa4:	4b34      	ldr	r3, [pc, #208]	; (8003078 <setup+0x5b4>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d103      	bne.n	8002fb4 <setup+0x4f0>
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <setup+0x5b4>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e006      	b.n	8002fc2 <setup+0x4fe>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <setup+0x5b4>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <setup+0x4fe>
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <setup+0x5b4>)
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <setup+0x5b4>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d07f      	beq.n	80030ca <setup+0x606>
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	f300 8252 	bgt.w	8003474 <setup+0x9b0>
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d002      	beq.n	8002fda <setup+0x516>
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d029      	beq.n	800302c <setup+0x568>
					}
					
					dataTuningUD ( &kd2_buff, 1 );
					break;
			}
			break;
 8002fd8:	e24c      	b.n	8003474 <setup+0x9b0>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <setup+0x5b8>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fe2:	d302      	bcc.n	8002fea <setup+0x526>
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <setup+0x5b8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <setup+0x5b8>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	2bf9      	cmp	r3, #249	; 0xf9
 8002ff0:	d809      	bhi.n	8003006 <setup+0x542>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <setup+0x5d4>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <setup+0x5d8>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4922      	ldr	r1, [pc, #136]	; (8003088 <setup+0x5c4>)
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7fe f958 	bl	80012b4 <lcdRowPrintf>
 8003004:	e00d      	b.n	8003022 <setup+0x55e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <setup+0x5dc>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <setup+0x5d4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <setup+0x5d8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	460b      	mov	r3, r1
 800301a:	4912      	ldr	r1, [pc, #72]	; (8003064 <setup+0x5a0>)
 800301c:	2001      	movs	r0, #1
 800301e:	f7fe f949 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp2_buff, 1 );
 8003022:	2101      	movs	r1, #1
 8003024:	481e      	ldr	r0, [pc, #120]	; (80030a0 <setup+0x5dc>)
 8003026:	f000 fa7b 	bl	8003520 <dataTuningUD>
					break;
 800302a:	e077      	b.n	800311c <setup+0x658>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <setup+0x5b8>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003034:	d302      	bcc.n	800303c <setup+0x578>
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <setup+0x5b8>)
 8003038:	2200      	movs	r2, #0
 800303a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <setup+0x5b8>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	2bf9      	cmp	r3, #249	; 0xf9
 8003042:	d82f      	bhi.n	80030a4 <setup+0x5e0>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <setup+0x5dc>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <setup+0x5d8>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4910      	ldr	r1, [pc, #64]	; (8003090 <setup+0x5cc>)
 8003050:	2001      	movs	r0, #1
 8003052:	f7fe f92f 	bl	80012b4 <lcdRowPrintf>
 8003056:	e033      	b.n	80030c0 <setup+0x5fc>
 8003058:	2000000e 	.word	0x2000000e
 800305c:	20000310 	.word	0x20000310
 8003060:	2000000f 	.word	0x2000000f
 8003064:	0800d630 	.word	0x0800d630
 8003068:	0800d618 	.word	0x0800d618
 800306c:	20000684 	.word	0x20000684
 8003070:	20000302 	.word	0x20000302
 8003074:	20000508 	.word	0x20000508
 8003078:	20000014 	.word	0x20000014
 800307c:	20000676 	.word	0x20000676
 8003080:	20000311 	.word	0x20000311
 8003084:	20000011 	.word	0x20000011
 8003088:	0800d624 	.word	0x0800d624
 800308c:	20000010 	.word	0x20000010
 8003090:	0800d63c 	.word	0x0800d63c
 8003094:	0800d648 	.word	0x0800d648
 8003098:	2000001d 	.word	0x2000001d
 800309c:	200006b9 	.word	0x200006b9
 80030a0:	2000001c 	.word	0x2000001c
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 80030a4:	4bac      	ldr	r3, [pc, #688]	; (8003358 <setup+0x894>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4bac      	ldr	r3, [pc, #688]	; (800335c <setup+0x898>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	4bab      	ldr	r3, [pc, #684]	; (8003360 <setup+0x89c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	460b      	mov	r3, r1
 80030b8:	49aa      	ldr	r1, [pc, #680]	; (8003364 <setup+0x8a0>)
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7fe f8fa 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki2_buff, 1 );
 80030c0:	2101      	movs	r1, #1
 80030c2:	48a6      	ldr	r0, [pc, #664]	; (800335c <setup+0x898>)
 80030c4:	f000 fa2c 	bl	8003520 <dataTuningUD>
					break;
 80030c8:	e028      	b.n	800311c <setup+0x658>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80030ca:	4ba7      	ldr	r3, [pc, #668]	; (8003368 <setup+0x8a4>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030d2:	d302      	bcc.n	80030da <setup+0x616>
 80030d4:	4ba4      	ldr	r3, [pc, #656]	; (8003368 <setup+0x8a4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80030da:	4ba3      	ldr	r3, [pc, #652]	; (8003368 <setup+0x8a4>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	2bf9      	cmp	r3, #249	; 0xf9
 80030e0:	d809      	bhi.n	80030f6 <setup+0x632>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 80030e2:	4b9d      	ldr	r3, [pc, #628]	; (8003358 <setup+0x894>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b9c      	ldr	r3, [pc, #624]	; (800335c <setup+0x898>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	499f      	ldr	r1, [pc, #636]	; (800336c <setup+0x8a8>)
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fe f8e0 	bl	80012b4 <lcdRowPrintf>
 80030f4:	e00d      	b.n	8003112 <setup+0x64e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 80030f6:	4b98      	ldr	r3, [pc, #608]	; (8003358 <setup+0x894>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b97      	ldr	r3, [pc, #604]	; (800335c <setup+0x898>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	4b97      	ldr	r3, [pc, #604]	; (8003360 <setup+0x89c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	460b      	mov	r3, r1
 800310a:	4996      	ldr	r1, [pc, #600]	; (8003364 <setup+0x8a0>)
 800310c:	2001      	movs	r0, #1
 800310e:	f7fe f8d1 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd2_buff, 1 );
 8003112:	2101      	movs	r1, #1
 8003114:	4892      	ldr	r0, [pc, #584]	; (8003360 <setup+0x89c>)
 8003116:	f000 fa03 	bl	8003520 <dataTuningUD>
					break;
 800311a:	bf00      	nop
			break;
 800311c:	e1aa      	b.n	8003474 <setup+0x9b0>
		// 	break;
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x9:
			dataTuningLR( &pattern_sensor, 1 );
 800311e:	2101      	movs	r1, #1
 8003120:	4893      	ldr	r0, [pc, #588]	; (8003370 <setup+0x8ac>)
 8003122:	f000 fa81 	bl	8003628 <dataTuningLR>
			
			if ( pattern_sensor == 13 ) pattern_sensor = 1;
 8003126:	4b92      	ldr	r3, [pc, #584]	; (8003370 <setup+0x8ac>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b0d      	cmp	r3, #13
 800312c:	d103      	bne.n	8003136 <setup+0x672>
 800312e:	4b90      	ldr	r3, [pc, #576]	; (8003370 <setup+0x8ac>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e006      	b.n	8003144 <setup+0x680>
			else if ( pattern_sensor == 0 ) pattern_sensor = 12;
 8003136:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <setup+0x8ac>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <setup+0x680>
 800313e:	4b8c      	ldr	r3, [pc, #560]	; (8003370 <setup+0x8ac>)
 8003140:	220c      	movs	r2, #12
 8003142:	701a      	strb	r2, [r3, #0]

			switch( pattern_sensor ) {
 8003144:	4b8a      	ldr	r3, [pc, #552]	; (8003370 <setup+0x8ac>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	2b0b      	cmp	r3, #11
 800314c:	f200 8194 	bhi.w	8003478 <setup+0x9b4>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <setup+0x694>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003189 	.word	0x08003189
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031ff 	.word	0x080031ff
 8003164:	0800324f 	.word	0x0800324f
 8003168:	08003269 	.word	0x08003269
 800316c:	08003291 	.word	0x08003291
 8003170:	080032b9 	.word	0x080032b9
 8003174:	080032e1 	.word	0x080032e1
 8003178:	08003309 	.word	0x08003309
 800317c:	08003331 	.word	0x08003331
 8003180:	080033e1 	.word	0x080033e1
 8003184:	08003419 	.word	0x08003419
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 8003188:	497a      	ldr	r1, [pc, #488]	; (8003374 <setup+0x8b0>)
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe f892 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 8003190:	4979      	ldr	r1, [pc, #484]	; (8003378 <setup+0x8b4>)
 8003192:	2001      	movs	r0, #1
 8003194:	f7fe f88e 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8003198:	2300      	movs	r3, #0
 800319a:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 800319c:	4b77      	ldr	r3, [pc, #476]	; (800337c <setup+0x8b8>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	f040 8150 	bne.w	8003446 <setup+0x982>
						cnt_led = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 80031aa:	e00a      	b.n	80031c2 <setup+0x6fe>
							ledOut( cnt_led );
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fb58 	bl	8001864 <ledOut>
							cnt_led++;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	3301      	adds	r3, #1
 80031b8:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 80031ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80031be:	f001 f9c5 	bl	800454c <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2b07      	cmp	r3, #7
 80031c6:	d9f1      	bls.n	80031ac <setup+0x6e8>
						}
						ledOut( 0 );
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fe fb4b 	bl	8001864 <ledOut>
					}
					break;
 80031ce:	e13a      	b.n	8003446 <setup+0x982>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 80031d0:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <setup+0x8bc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	496b      	ldr	r1, [pc, #428]	; (8003384 <setup+0x8c0>)
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe f86b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <setup+0x8c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4969      	ldr	r1, [pc, #420]	; (800338c <setup+0x8c8>)
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fe f864 	bl	80012b4 <lcdRowPrintf>

					if(swValTact == SW_PUSH) encTotalN = 0;
 80031ec:	4b63      	ldr	r3, [pc, #396]	; (800337c <setup+0x8b8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	f040 812a 	bne.w	800344a <setup+0x986>
 80031f6:	4b64      	ldr	r3, [pc, #400]	; (8003388 <setup+0x8c4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
					break;
 80031fc:	e125      	b.n	800344a <setup+0x986>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 80031fe:	4964      	ldr	r1, [pc, #400]	; (8003390 <setup+0x8cc>)
 8003200:	2000      	movs	r0, #0
 8003202:	f7fe f857 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <setup+0x8d0>)
 8003208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320c:	461a      	mov	r2, r3
 800320e:	4962      	ldr	r1, [pc, #392]	; (8003398 <setup+0x8d4>)
 8003210:	2001      	movs	r0, #1
 8003212:	f7fe f84f 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &motorTestPwm, 100 );
 8003216:	2164      	movs	r1, #100	; 0x64
 8003218:	485e      	ldr	r0, [pc, #376]	; (8003394 <setup+0x8d0>)
 800321a:	f000 f981 	bl	8003520 <dataTuningUD>
					if ( motor_test == 1 ) {
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <setup+0x8d8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10a      	bne.n	800323c <setup+0x778>
						motorPwmOut(motorTestPwm,motorTestPwm);
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <setup+0x8d0>)
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	4a59      	ldr	r2, [pc, #356]	; (8003394 <setup+0x8d0>)
 800322e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb9f 	bl	8002978 <motorPwmOut>
 800323a:	e003      	b.n	8003244 <setup+0x780>
					} else {
						motorPwmOut(0, 0);
 800323c:	2100      	movs	r1, #0
 800323e:	2000      	movs	r0, #0
 8003240:	f7ff fb9a 	bl	8002978 <motorPwmOut>
					}
					
					data_select( &motor_test, SW_PUSH );
 8003244:	2102      	movs	r1, #2
 8003246:	4855      	ldr	r0, [pc, #340]	; (800339c <setup+0x8d8>)
 8003248:	f000 f934 	bl	80034b4 <data_select>
					break;
 800324c:	e0fe      	b.n	800344c <setup+0x988>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 800324e:	4954      	ldr	r1, [pc, #336]	; (80033a0 <setup+0x8dc>)
 8003250:	2000      	movs	r0, #0
 8003252:	f7fe f82f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkerSensor());
 8003256:	f7ff fb35 	bl	80028c4 <getMarkerSensor>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4951      	ldr	r1, [pc, #324]	; (80033a4 <setup+0x8e0>)
 8003260:	2001      	movs	r0, #1
 8003262:	f7fe f827 	bl	80012b4 <lcdRowPrintf>
					break;
 8003266:	e0f1      	b.n	800344c <setup+0x988>

				case 5:
					lcdRowPrintf(UPROW, "L1  %4d",lSensor[0]);
 8003268:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <setup+0x8e4>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	494f      	ldr	r1, [pc, #316]	; (80033ac <setup+0x8e8>)
 8003270:	2000      	movs	r0, #0
 8003272:	f7fe f81f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L2  %4d",lSensor[1]);
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <setup+0x8e4>)
 8003278:	885b      	ldrh	r3, [r3, #2]
 800327a:	461a      	mov	r2, r3
 800327c:	494c      	ldr	r1, [pc, #304]	; (80033b0 <setup+0x8ec>)
 800327e:	2001      	movs	r0, #1
 8003280:	f7fe f818 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <setup+0x8f0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800328e:	e0dd      	b.n	800344c <setup+0x988>

				case 6:
					lcdRowPrintf(UPROW, "L3  %4d",lSensor[2]);
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <setup+0x8e4>)
 8003292:	889b      	ldrh	r3, [r3, #4]
 8003294:	461a      	mov	r2, r3
 8003296:	4948      	ldr	r1, [pc, #288]	; (80033b8 <setup+0x8f4>)
 8003298:	2000      	movs	r0, #0
 800329a:	f7fe f80b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L4  %4d",lSensor[3]);
 800329e:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <setup+0x8e4>)
 80032a0:	88db      	ldrh	r3, [r3, #6]
 80032a2:	461a      	mov	r2, r3
 80032a4:	4945      	ldr	r1, [pc, #276]	; (80033bc <setup+0x8f8>)
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7fe f804 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80032ac:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <setup+0x8f0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80032b6:	e0c9      	b.n	800344c <setup+0x988>

				case 7:
					lcdRowPrintf(UPROW, "L5  %4d",lSensor[4]);
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <setup+0x8e4>)
 80032ba:	891b      	ldrh	r3, [r3, #8]
 80032bc:	461a      	mov	r2, r3
 80032be:	4940      	ldr	r1, [pc, #256]	; (80033c0 <setup+0x8fc>)
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fff7 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L6  %4d",lSensor[5]);
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <setup+0x8e4>)
 80032c8:	895b      	ldrh	r3, [r3, #10]
 80032ca:	461a      	mov	r2, r3
 80032cc:	493d      	ldr	r1, [pc, #244]	; (80033c4 <setup+0x900>)
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7fd fff0 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80032d4:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <setup+0x8f0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80032de:	e0b5      	b.n	800344c <setup+0x988>
				
				case 8:
					lcdRowPrintf(UPROW, "R1  %4d",lSensor[11]);
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <setup+0x8e4>)
 80032e2:	8adb      	ldrh	r3, [r3, #22]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4938      	ldr	r1, [pc, #224]	; (80033c8 <setup+0x904>)
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd ffe3 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R2  %4d",lSensor[10]);
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <setup+0x8e4>)
 80032f0:	8a9b      	ldrh	r3, [r3, #20]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4935      	ldr	r1, [pc, #212]	; (80033cc <setup+0x908>)
 80032f6:	2001      	movs	r0, #1
 80032f8:	f7fd ffdc 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <setup+0x8f0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003306:	e0a1      	b.n	800344c <setup+0x988>

				case 9:
					lcdRowPrintf(UPROW, "R3  %4d",lSensor[9]);
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <setup+0x8e4>)
 800330a:	8a5b      	ldrh	r3, [r3, #18]
 800330c:	461a      	mov	r2, r3
 800330e:	4930      	ldr	r1, [pc, #192]	; (80033d0 <setup+0x90c>)
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd ffcf 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R4  %4d",lSensor[8]);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <setup+0x8e4>)
 8003318:	8a1b      	ldrh	r3, [r3, #16]
 800331a:	461a      	mov	r2, r3
 800331c:	492d      	ldr	r1, [pc, #180]	; (80033d4 <setup+0x910>)
 800331e:	2001      	movs	r0, #1
 8003320:	f7fd ffc8 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <setup+0x8f0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800332e:	e08d      	b.n	800344c <setup+0x988>

				case 10:
					lcdRowPrintf(UPROW, "R5  %4d",lSensor[7]);
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <setup+0x8e4>)
 8003332:	89db      	ldrh	r3, [r3, #14]
 8003334:	461a      	mov	r2, r3
 8003336:	4928      	ldr	r1, [pc, #160]	; (80033d8 <setup+0x914>)
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd ffbb 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R6  %4d",lSensor[6]);
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <setup+0x8e4>)
 8003340:	899b      	ldrh	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	4925      	ldr	r1, [pc, #148]	; (80033dc <setup+0x918>)
 8003346:	2001      	movs	r0, #1
 8003348:	f7fd ffb4 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <setup+0x8f0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003356:	e079      	b.n	800344c <setup+0x988>
 8003358:	2000001c 	.word	0x2000001c
 800335c:	2000001d 	.word	0x2000001d
 8003360:	200006b9 	.word	0x200006b9
 8003364:	0800d630 	.word	0x0800d630
 8003368:	20000676 	.word	0x20000676
 800336c:	0800d648 	.word	0x0800d648
 8003370:	20000012 	.word	0x20000012
 8003374:	0800d654 	.word	0x0800d654
 8003378:	0800d5d0 	.word	0x0800d5d0
 800337c:	20000685 	.word	0x20000685
 8003380:	2000026c 	.word	0x2000026c
 8003384:	0800d660 	.word	0x0800d660
 8003388:	20000274 	.word	0x20000274
 800338c:	0800d668 	.word	0x0800d668
 8003390:	0800d670 	.word	0x0800d670
 8003394:	20000016 	.word	0x20000016
 8003398:	0800d67c 	.word	0x0800d67c
 800339c:	20000683 	.word	0x20000683
 80033a0:	0800d688 	.word	0x0800d688
 80033a4:	0800d694 	.word	0x0800d694
 80033a8:	200002ac 	.word	0x200002ac
 80033ac:	0800d6a0 	.word	0x0800d6a0
 80033b0:	0800d6a8 	.word	0x0800d6a8
 80033b4:	20000508 	.word	0x20000508
 80033b8:	0800d6b0 	.word	0x0800d6b0
 80033bc:	0800d6b8 	.word	0x0800d6b8
 80033c0:	0800d6c0 	.word	0x0800d6c0
 80033c4:	0800d6c8 	.word	0x0800d6c8
 80033c8:	0800d6d0 	.word	0x0800d6d0
 80033cc:	0800d6d8 	.word	0x0800d6d8
 80033d0:	0800d6e0 	.word	0x0800d6e0
 80033d4:	0800d6e8 	.word	0x0800d6e8
 80033d8:	0800d6f0 	.word	0x0800d6f0
 80033dc:	0800d6f8 	.word	0x0800d6f8
				
				case 11:
					targetSpeed = 120;
 80033e0:	4928      	ldr	r1, [pc, #160]	; (8003484 <setup+0x9c0>)
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <setup+0x9c4>)
 80033e8:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <setup+0x9c8>)
 80033ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4926      	ldr	r1, [pc, #152]	; (8003490 <setup+0x9cc>)
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd ff5c 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",speedPwm);
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <setup+0x9d0>)
 80033fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003402:	461a      	mov	r2, r3
 8003404:	4924      	ldr	r1, [pc, #144]	; (8003498 <setup+0x9d4>)
 8003406:	2001      	movs	r0, #1
 8003408:	f7fd ff54 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <setup+0x9d8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003416:	e019      	b.n	800344c <setup+0x988>
				case 12:
					targetSpeed = 120;
 8003418:	491a      	ldr	r1, [pc, #104]	; (8003484 <setup+0x9c0>)
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <setup+0x9c4>)
 8003420:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "Anglesen");
 8003424:	491e      	ldr	r1, [pc, #120]	; (80034a0 <setup+0x9dc>)
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd ff44 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.1lf", angleSensor);
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <setup+0x9e0>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	491d      	ldr	r1, [pc, #116]	; (80034a8 <setup+0x9e4>)
 8003434:	2001      	movs	r0, #1
 8003436:	f7fd ff3d 	bl	80012b4 <lcdRowPrintf>
					// lcdRowPrintf(LOWROW, "      %2d", angleSensor);
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <setup+0x9d8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003442:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003444:	e002      	b.n	800344c <setup+0x988>
					break;
 8003446:	bf00      	nop
 8003448:	e016      	b.n	8003478 <setup+0x9b4>
					break;
 800344a:	bf00      	nop
			} // switch
			break;
 800344c:	e014      	b.n	8003478 <setup+0x9b4>
		// case 0xd:
			
		// 	break;

	default:
		lcdRowPrintf(UPROW, "%#x     ", getSWrotary());
 800344e:	f000 fcf3 	bl	8003e38 <getSWrotary>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	4915      	ldr	r1, [pc, #84]	; (80034ac <setup+0x9e8>)
 8003458:	2000      	movs	r0, #0
 800345a:	f7fd ff2b 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 800345e:	4914      	ldr	r1, [pc, #80]	; (80034b0 <setup+0x9ec>)
 8003460:	2001      	movs	r0, #1
 8003462:	f7fd ff27 	bl	80012b4 <lcdRowPrintf>
		break;
 8003466:	e008      	b.n	800347a <setup+0x9b6>
			break;
 8003468:	bf00      	nop
 800346a:	e006      	b.n	800347a <setup+0x9b6>
			break;
 800346c:	bf00      	nop
 800346e:	e004      	b.n	800347a <setup+0x9b6>
			break;
 8003470:	bf00      	nop
 8003472:	e002      	b.n	800347a <setup+0x9b6>
			break;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <setup+0x9b6>
			break;
 8003478:	bf00      	nop
	} // switch
	// } // cntSW
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000698 	.word	0x20000698
 8003488:	405e0000 	.word	0x405e0000
 800348c:	20000302 	.word	0x20000302
 8003490:	0800d700 	.word	0x0800d700
 8003494:	20000694 	.word	0x20000694
 8003498:	0800d708 	.word	0x0800d708
 800349c:	20000508 	.word	0x20000508
 80034a0:	0800d710 	.word	0x0800d710
 80034a4:	200002f8 	.word	0x200002f8
 80034a8:	0800d71c 	.word	0x0800d71c
 80034ac:	0800d728 	.word	0x0800d728
 80034b0:	0800d734 	.word	0x0800d734

080034b4 <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <data_select+0x64>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11d      	bne.n	8003506 <data_select+0x52>
		if ( *data == 1 && push == 0) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10a      	bne.n	80034e8 <data_select+0x34>
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <data_select+0x68>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <data_select+0x34>
			push = 1;
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <data_select+0x68>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
			*data = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 80034e6:	e011      	b.n	800350c <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <data_select+0x58>
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <data_select+0x68>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <data_select+0x58>
			push = 1;
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <data_select+0x68>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
			*data = 1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
}
 8003504:	e002      	b.n	800350c <data_select+0x58>
		push = 0;
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <data_select+0x68>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	20000685 	.word	0x20000685
 800351c:	20000682 	.word	0x20000682

08003520 <dataTuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( void *data, uint8_t add )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <dataTuningUD+0xf8>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	2b31      	cmp	r3, #49	; 0x31
 8003536:	d968      	bls.n	800360a <dataTuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <dataTuningUD+0xfc>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d003      	beq.n	8003548 <dataTuningUD+0x28>
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <dataTuningUD+0xfc>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d155      	bne.n	80035f4 <dataTuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 8003548:	4b35      	ldr	r3, [pc, #212]	; (8003620 <dataTuningUD+0x100>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <dataTuningUD+0x100>)
 8003552:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <dataTuningUD+0xfc>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d123      	bne.n	80035a4 <dataTuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 800355c:	4b30      	ldr	r3, [pc, #192]	; (8003620 <dataTuningUD+0x100>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	2b13      	cmp	r3, #19
 8003562:	d90b      	bls.n	800357c <dataTuningUD+0x5c>
					*data2 += add;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356a:	b29a      	uxth	r2, r3
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4413      	add	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21a      	sxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800357a:	e042      	b.n	8003602 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <dataTuningUD+0x104>)
 800357e:	f993 3000 	ldrsb.w	r3, [r3]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d13d      	bne.n	8003602 <dataTuningUD+0xe2>
					pushUD = 1;
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <dataTuningUD+0x104>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003592:	b29a      	uxth	r2, r3
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4413      	add	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	b21a      	sxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80035a2:	e02e      	b.n	8003602 <dataTuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <dataTuningUD+0xfc>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d12a      	bne.n	8003602 <dataTuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <dataTuningUD+0x100>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	2b13      	cmp	r3, #19
 80035b2:	d90b      	bls.n	80035cc <dataTuningUD+0xac>
					*data2 -= add;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80035ca:	e01a      	b.n	8003602 <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <dataTuningUD+0x104>)
 80035ce:	f993 3000 	ldrsb.w	r3, [r3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d115      	bne.n	8003602 <dataTuningUD+0xe2>
					pushUD = 1;
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <dataTuningUD+0x104>)
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80035f2:	e006      	b.n	8003602 <dataTuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <dataTuningUD+0x104>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <dataTuningUD+0x100>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e000      	b.n	8003604 <dataTuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 8003602:	bf00      	nop
		}
		cntSetup2 = 0;
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <dataTuningUD+0xf8>)
 8003606:	2200      	movs	r2, #0
 8003608:	801a      	strh	r2, [r3, #0]
	}
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000678 	.word	0x20000678
 800361c:	20000685 	.word	0x20000685
 8003620:	2000067c 	.word	0x2000067c
 8003624:	20000681 	.word	0x20000681

08003628 <dataTuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( void *data, uint8_t add )
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <dataTuningLR+0xf8>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b31      	cmp	r3, #49	; 0x31
 800363e:	d968      	bls.n	8003712 <dataTuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <dataTuningLR+0xfc>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d003      	beq.n	8003650 <dataTuningLR+0x28>
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <dataTuningLR+0xfc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d155      	bne.n	80036fc <dataTuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <dataTuningLR+0x100>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <dataTuningLR+0x100>)
 800365a:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <dataTuningLR+0xfc>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d123      	bne.n	80036ac <dataTuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8003664:	4b30      	ldr	r3, [pc, #192]	; (8003728 <dataTuningLR+0x100>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2b13      	cmp	r3, #19
 800366a:	d90b      	bls.n	8003684 <dataTuningLR+0x5c>
					*data2 += add;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003672:	b29a      	uxth	r2, r3
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	b29b      	uxth	r3, r3
 8003678:	4413      	add	r3, r2
 800367a:	b29b      	uxth	r3, r3
 800367c:	b21a      	sxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003682:	e042      	b.n	800370a <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <dataTuningLR+0x104>)
 8003686:	f993 3000 	ldrsb.w	r3, [r3]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d13d      	bne.n	800370a <dataTuningLR+0xe2>
					pushLR = 1;
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <dataTuningLR+0x104>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369a:	b29a      	uxth	r2, r3
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80036aa:	e02e      	b.n	800370a <dataTuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <dataTuningLR+0xfc>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d12a      	bne.n	800370a <dataTuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <dataTuningLR+0x100>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	2b13      	cmp	r3, #19
 80036ba:	d90b      	bls.n	80036d4 <dataTuningLR+0xac>
					*data2 -= add;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b21a      	sxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80036d2:	e01a      	b.n	800370a <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <dataTuningLR+0x104>)
 80036d6:	f993 3000 	ldrsb.w	r3, [r3]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <dataTuningLR+0xe2>
					pushLR = 1;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <dataTuningLR+0x104>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80036fa:	e006      	b.n	800370a <dataTuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <dataTuningLR+0x104>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <dataTuningLR+0x100>)
 8003704:	2200      	movs	r2, #0
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e000      	b.n	800370c <dataTuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 800370a:	bf00      	nop
		}
		cntSetup3 = 0;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <dataTuningLR+0xf8>)
 800370e:	2200      	movs	r2, #0
 8003710:	801a      	strh	r2, [r3, #0]
	}
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000067a 	.word	0x2000067a
 8003724:	20000685 	.word	0x20000685
 8003728:	2000067e 	.word	0x2000067e
 800372c:	20000680 	.word	0x20000680

08003730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_MspInit+0x4c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_MspInit+0x4c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_MspInit+0x4c>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_MspInit+0x4c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800376e:	2007      	movs	r0, #7
 8003770:	f001 fbf8 	bl	8004f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <HAL_ADC_MspInit+0x110>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d171      	bne.n	8003886 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_ADC_MspInit+0x114>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SW_5xis_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80037f6:	233f      	movs	r3, #63	; 0x3f
 80037f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037fa:	2303      	movs	r3, #3
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003802:	f107 0314 	add.w	r3, r7, #20
 8003806:	4619      	mov	r1, r3
 8003808:	4823      	ldr	r0, [pc, #140]	; (8003898 <HAL_ADC_MspInit+0x118>)
 800380a:	f001 ff5d 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800380e:	23ff      	movs	r3, #255	; 0xff
 8003810:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003812:	2303      	movs	r3, #3
 8003814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	481e      	ldr	r0, [pc, #120]	; (800389c <HAL_ADC_MspInit+0x11c>)
 8003822:	f001 ff51 	bl	80056c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_ADC_MspInit+0x124>)
 800382a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 800382e:	2200      	movs	r2, #0
 8003830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003844:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800385c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003866:	2200      	movs	r2, #0
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 800386c:	f001 fbbc 	bl	8004fe8 <HAL_DMA_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003876:	f7ff f81f 	bl	80028b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_ADC_MspInit+0x120>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40012000 	.word	0x40012000
 8003894:	40023800 	.word	0x40023800
 8003898:	40020800 	.word	0x40020800
 800389c:	40020000 	.word	0x40020000
 80038a0:	2000035c 	.word	0x2000035c
 80038a4:	40026410 	.word	0x40026410

080038a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_I2C_MspInit+0x84>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d12c      	bne.n	8003924 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ec:	2312      	movs	r3, #18
 80038ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038f8:	2304      	movs	r3, #4
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4619      	mov	r1, r3
 8003902:	480c      	ldr	r0, [pc, #48]	; (8003934 <HAL_I2C_MspInit+0x8c>)
 8003904:	f001 fee0 	bl	80056c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_I2C_MspInit+0x88>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_I2C_MspInit+0x88>)
 8003912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_I2C_MspInit+0x88>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003924:	bf00      	nop
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40005400 	.word	0x40005400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400

08003938 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 031c 	add.w	r3, r7, #28
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a42      	ldr	r2, [pc, #264]	; (8003a60 <HAL_SPI_MspInit+0x128>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12d      	bne.n	80039b6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003992:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039a4:	2305      	movs	r3, #5
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	4619      	mov	r1, r3
 80039ae:	482e      	ldr	r0, [pc, #184]	; (8003a68 <HAL_SPI_MspInit+0x130>)
 80039b0:	f001 fe8a 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80039b4:	e04f      	b.n	8003a56 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <HAL_SPI_MspInit+0x134>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d14a      	bne.n	8003a56 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	6313      	str	r3, [r2, #48]	; 0x30
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_SPI_MspInit+0x12c>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a14:	2301      	movs	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a20:	2303      	movs	r3, #3
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003a24:	2307      	movs	r3, #7
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480e      	ldr	r0, [pc, #56]	; (8003a68 <HAL_SPI_MspInit+0x130>)
 8003a30:	f001 fe4a 	bl	80056c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a46:	2306      	movs	r3, #6
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4a:	f107 031c 	add.w	r3, r7, #28
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4807      	ldr	r0, [pc, #28]	; (8003a70 <HAL_SPI_MspInit+0x138>)
 8003a52:	f001 fe39 	bl	80056c8 <HAL_GPIO_Init>
}
 8003a56:	bf00      	nop
 8003a58:	3730      	adds	r7, #48	; 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40003800 	.word	0x40003800
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020400 	.word	0x40020400
 8003a6c:	40003c00 	.word	0x40003c00
 8003a70:	40020800 	.word	0x40020800

08003a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x64>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10e      	bne.n	8003aa4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003aa2:	e012      	b.n	8003aca <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d10d      	bne.n	8003aca <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_TIM_PWM_MspInit+0x68>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40023800 	.word	0x40023800

08003ae0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d12c      	bne.n	8003b5c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b3a:	23c0      	movs	r3, #192	; 0xc0
 8003b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	4619      	mov	r1, r3
 8003b54:	481e      	ldr	r0, [pc, #120]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003b56:	f001 fdb7 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b5a:	e030      	b.n	8003bbe <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12b      	bne.n	8003bbe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xec>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb2:	f107 031c 	add.w	r3, r7, #28
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003bba:	f001 fd85 	bl	80056c8 <HAL_GPIO_Init>
}
 8003bbe:	bf00      	nop
 8003bc0:	3730      	adds	r7, #48	; 0x30
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40020400 	.word	0x40020400

08003bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <HAL_TIM_Base_MspInit+0x48>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d115      	bne.n	8003c1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_TIM_Base_MspInit+0x4c>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_TIM_Base_MspInit+0x4c>)
 8003bf8:	f043 0310 	orr.w	r3, r3, #16
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_TIM_Base_MspInit+0x4c>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2036      	movs	r0, #54	; 0x36
 8003c10:	f001 f9b3 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c14:	2036      	movs	r0, #54	; 0x36
 8003c16:	f001 f9cc 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40001000 	.word	0x40001000
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_TIM_MspPostInit+0xb4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d11f      	bne.n	8003c8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	4818      	ldr	r0, [pc, #96]	; (8003ce8 <HAL_TIM_MspPostInit+0xbc>)
 8003c88:	f001 fd1e 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003c8c:	e023      	b.n	8003cd6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d11e      	bne.n	8003cd6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_TIM_MspPostInit+0xb8>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4805      	ldr	r0, [pc, #20]	; (8003ce8 <HAL_TIM_MspPostInit+0xbc>)
 8003cd2:	f001 fcf9 	bl	80056c8 <HAL_GPIO_Init>
}
 8003cd6:	bf00      	nop
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020000 	.word	0x40020000

08003cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <HAL_UART_MspInit+0xc0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d14a      	bne.n	8003da4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <HAL_UART_MspInit+0xc4>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d74:	2308      	movs	r3, #8
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	480d      	ldr	r0, [pc, #52]	; (8003db4 <HAL_UART_MspInit+0xc8>)
 8003d80:	f001 fca2 	bl	80056c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d84:	2304      	movs	r3, #4
 8003d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d94:	2308      	movs	r3, #8
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4806      	ldr	r0, [pc, #24]	; (8003db8 <HAL_UART_MspInit+0xcc>)
 8003da0:	f001 fc92 	bl	80056c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003da4:	bf00      	nop
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40005000 	.word	0x40005000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00

08003dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <NMI_Handler+0x4>

08003dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <HardFault_Handler+0x4>

08003dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <MemManage_Handler+0x4>

08003dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd2:	e7fe      	b.n	8003dd2 <BusFault_Handler+0x4>

08003dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <UsageFault_Handler+0x4>

08003dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e08:	f000 fb80 	bl	800450c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <TIM6_DAC_IRQHandler+0x10>)
 8003e16:	f003 fbaf 	bl	8007578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200005e0 	.word	0x200005e0

08003e24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <DMA2_Stream0_IRQHandler+0x10>)
 8003e2a:	f001 f9e3 	bl	80051f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	2000035c 	.word	0x2000035c

08003e38 <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary() {
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[13];
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <getSWrotary+0x19c>)
 8003e40:	8b5b      	ldrh	r3, [r3, #26]
 8003e42:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 8003e48:	88bb      	ldrh	r3, [r7, #4]
 8003e4a:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d902      	bls.n	8003e58 <getSWrotary+0x20>
 8003e52:	2300      	movs	r3, #0
 8003e54:	71fb      	strb	r3, [r7, #7]
 8003e56:	e0b6      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 8003e58:	88bb      	ldrh	r3, [r7, #4]
 8003e5a:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 8003e5e:	d807      	bhi.n	8003e70 <getSWrotary+0x38>
 8003e60:	88bb      	ldrh	r3, [r7, #4]
 8003e62:	f640 6245 	movw	r2, #3653	; 0xe45
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d902      	bls.n	8003e70 <getSWrotary+0x38>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	71fb      	strb	r3, [r7, #7]
 8003e6e:	e0aa      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 8003e70:	88bb      	ldrh	r3, [r7, #4]
 8003e72:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8003e76:	d207      	bcs.n	8003e88 <getSWrotary+0x50>
 8003e78:	88bb      	ldrh	r3, [r7, #4]
 8003e7a:	f640 22ba 	movw	r2, #2746	; 0xaba
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d902      	bls.n	8003e88 <getSWrotary+0x50>
 8003e82:	2302      	movs	r3, #2
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	e09e      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 8003e88:	88bb      	ldrh	r3, [r7, #4]
 8003e8a:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8003e8e:	d206      	bcs.n	8003e9e <getSWrotary+0x66>
 8003e90:	88bb      	ldrh	r3, [r7, #4]
 8003e92:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8003e96:	d302      	bcc.n	8003e9e <getSWrotary+0x66>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	e093      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 8003e9e:	88bb      	ldrh	r3, [r7, #4]
 8003ea0:	f640 1237 	movw	r2, #2359	; 0x937
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d807      	bhi.n	8003eb8 <getSWrotary+0x80>
 8003ea8:	88bb      	ldrh	r3, [r7, #4]
 8003eaa:	f640 1206 	movw	r2, #2310	; 0x906
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d902      	bls.n	8003eb8 <getSWrotary+0x80>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	71fb      	strb	r3, [r7, #7]
 8003eb6:	e086      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 8003eb8:	88bb      	ldrh	r3, [r7, #4]
 8003eba:	f640 02a6 	movw	r2, #2214	; 0x8a6
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d807      	bhi.n	8003ed2 <getSWrotary+0x9a>
 8003ec2:	88bb      	ldrh	r3, [r7, #4]
 8003ec4:	f640 0274 	movw	r2, #2164	; 0x874
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d902      	bls.n	8003ed2 <getSWrotary+0x9a>
 8003ecc:	2305      	movs	r3, #5
 8003ece:	71fb      	strb	r3, [r7, #7]
 8003ed0:	e079      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 8003ed2:	88bb      	ldrh	r3, [r7, #4]
 8003ed4:	f240 7242 	movw	r2, #1858	; 0x742
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d807      	bhi.n	8003eec <getSWrotary+0xb4>
 8003edc:	88bb      	ldrh	r3, [r7, #4]
 8003ede:	f240 7211 	movw	r2, #1809	; 0x711
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d902      	bls.n	8003eec <getSWrotary+0xb4>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	71fb      	strb	r3, [r7, #7]
 8003eea:	e06c      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 8003eec:	88bb      	ldrh	r3, [r7, #4]
 8003eee:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8003ef2:	d207      	bcs.n	8003f04 <getSWrotary+0xcc>
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	f240 62b6 	movw	r2, #1718	; 0x6b6
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d902      	bls.n	8003f04 <getSWrotary+0xcc>
 8003efe:	2307      	movs	r3, #7
 8003f00:	71fb      	strb	r3, [r7, #7]
 8003f02:	e060      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 8003f04:	88bb      	ldrh	r3, [r7, #4]
 8003f06:	f240 6259 	movw	r2, #1625	; 0x659
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d806      	bhi.n	8003f1c <getSWrotary+0xe4>
 8003f0e:	88bb      	ldrh	r3, [r7, #4]
 8003f10:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 8003f14:	d902      	bls.n	8003f1c <getSWrotary+0xe4>
 8003f16:	2308      	movs	r3, #8
 8003f18:	71fb      	strb	r3, [r7, #7]
 8003f1a:	e054      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 8003f1c:	88bb      	ldrh	r3, [r7, #4]
 8003f1e:	f240 6213 	movw	r2, #1555	; 0x613
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d806      	bhi.n	8003f34 <getSWrotary+0xfc>
 8003f26:	88bb      	ldrh	r3, [r7, #4]
 8003f28:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003f2c:	d302      	bcc.n	8003f34 <getSWrotary+0xfc>
 8003f2e:	2309      	movs	r3, #9
 8003f30:	71fb      	strb	r3, [r7, #7]
 8003f32:	e048      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 8003f34:	88bb      	ldrh	r3, [r7, #4]
 8003f36:	f240 525c 	movw	r2, #1372	; 0x55c
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d807      	bhi.n	8003f4e <getSWrotary+0x116>
 8003f3e:	88bb      	ldrh	r3, [r7, #4]
 8003f40:	f240 522d 	movw	r2, #1325	; 0x52d
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d902      	bls.n	8003f4e <getSWrotary+0x116>
 8003f48:	230a      	movs	r3, #10
 8003f4a:	71fb      	strb	r3, [r7, #7]
 8003f4c:	e03b      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 8003f4e:	88bb      	ldrh	r3, [r7, #4]
 8003f50:	f240 522a 	movw	r2, #1322	; 0x52a
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d807      	bhi.n	8003f68 <getSWrotary+0x130>
 8003f58:	88bb      	ldrh	r3, [r7, #4]
 8003f5a:	f240 42fb 	movw	r2, #1275	; 0x4fb
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d902      	bls.n	8003f68 <getSWrotary+0x130>
 8003f62:	230b      	movs	r3, #11
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	e02e      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d807      	bhi.n	8003f82 <getSWrotary+0x14a>
 8003f72:	88bb      	ldrh	r3, [r7, #4]
 8003f74:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d902      	bls.n	8003f82 <getSWrotary+0x14a>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	e021      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 8003f82:	88bb      	ldrh	r3, [r7, #4]
 8003f84:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 8003f88:	d807      	bhi.n	8003f9a <getSWrotary+0x162>
 8003f8a:	88bb      	ldrh	r3, [r7, #4]
 8003f8c:	f240 428a 	movw	r2, #1162	; 0x48a
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d902      	bls.n	8003f9a <getSWrotary+0x162>
 8003f94:	230d      	movs	r3, #13
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	e015      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003fa0:	d207      	bcs.n	8003fb2 <getSWrotary+0x17a>
 8003fa2:	88bb      	ldrh	r3, [r7, #4]
 8003fa4:	f240 4222 	movw	r2, #1058	; 0x422
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d902      	bls.n	8003fb2 <getSWrotary+0x17a>
 8003fac:	230e      	movs	r3, #14
 8003fae:	71fb      	strb	r3, [r7, #7]
 8003fb0:	e009      	b.n	8003fc6 <getSWrotary+0x18e>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 8003fb2:	88bb      	ldrh	r3, [r7, #4]
 8003fb4:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8003fb8:	d805      	bhi.n	8003fc6 <getSWrotary+0x18e>
 8003fba:	88bb      	ldrh	r3, [r7, #4]
 8003fbc:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8003fc0:	d901      	bls.n	8003fc6 <getSWrotary+0x18e>
 8003fc2:	230f      	movs	r3, #15
 8003fc4:	71fb      	strb	r3, [r7, #7]

	return ret;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000240 	.word	0x20000240

08003fd8 <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact() {
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[12];
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <getSWtact+0xa0>)
 8003fe0:	8b1b      	ldrh	r3, [r3, #24]
 8003fe2:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = SW_NONE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 8003fe8:	88bb      	ldrh	r3, [r7, #4]
 8003fea:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d902      	bls.n	8003ff8 <getSWtact+0x20>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]
 8003ff6:	e037      	b.n	8004068 <getSWtact+0x90>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 8003ff8:	88bb      	ldrh	r3, [r7, #4]
 8003ffa:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d807      	bhi.n	8004012 <getSWtact+0x3a>
 8004002:	88bb      	ldrh	r3, [r7, #4]
 8004004:	f640 422c 	movw	r2, #3116	; 0xc2c
 8004008:	4293      	cmp	r3, r2
 800400a:	d902      	bls.n	8004012 <getSWtact+0x3a>
 800400c:	2305      	movs	r3, #5
 800400e:	71fb      	strb	r3, [r7, #7]
 8004010:	e02a      	b.n	8004068 <getSWtact+0x90>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 8004012:	88bb      	ldrh	r3, [r7, #4]
 8004014:	f640 32dd 	movw	r2, #3037	; 0xbdd
 8004018:	4293      	cmp	r3, r2
 800401a:	d807      	bhi.n	800402c <getSWtact+0x54>
 800401c:	88bb      	ldrh	r3, [r7, #4]
 800401e:	f640 222b 	movw	r2, #2603	; 0xa2b
 8004022:	4293      	cmp	r3, r2
 8004024:	d902      	bls.n	800402c <getSWtact+0x54>
 8004026:	2304      	movs	r3, #4
 8004028:	71fb      	strb	r3, [r7, #7]
 800402a:	e01d      	b.n	8004068 <getSWtact+0x90>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 800402c:	88bb      	ldrh	r3, [r7, #4]
 800402e:	f640 1256 	movw	r2, #2390	; 0x956
 8004032:	4293      	cmp	r3, r2
 8004034:	d807      	bhi.n	8004046 <getSWtact+0x6e>
 8004036:	88bb      	ldrh	r3, [r7, #4]
 8004038:	f240 729e 	movw	r2, #1950	; 0x79e
 800403c:	4293      	cmp	r3, r2
 800403e:	d902      	bls.n	8004046 <getSWtact+0x6e>
 8004040:	2303      	movs	r3, #3
 8004042:	71fb      	strb	r3, [r7, #7]
 8004044:	e010      	b.n	8004068 <getSWtact+0x90>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 8004046:	88bb      	ldrh	r3, [r7, #4]
 8004048:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800404c:	d207      	bcs.n	800405e <getSWtact+0x86>
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004054:	4293      	cmp	r3, r2
 8004056:	d902      	bls.n	800405e <getSWtact+0x86>
 8004058:	2302      	movs	r3, #2
 800405a:	71fb      	strb	r3, [r7, #7]
 800405c:	e004      	b.n	8004068 <getSWtact+0x90>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 800405e:	88bb      	ldrh	r3, [r7, #4]
 8004060:	2b95      	cmp	r3, #149	; 0x95
 8004062:	d801      	bhi.n	8004068 <getSWtact+0x90>
 8004064:	2301      	movs	r3, #1
 8004066:	71fb      	strb	r3, [r7, #7]

	return ret;
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000240 	.word	0x20000240

0800407c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	return 1;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <_kill>:

int _kill(int pid, int sig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004096:	f004 fa7b 	bl	8008590 <__errno>
 800409a:	4603      	mov	r3, r0
 800409c:	2216      	movs	r2, #22
 800409e:	601a      	str	r2, [r3, #0]
	return -1;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_exit>:

void _exit (int status)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ffe7 	bl	800408c <_kill>
	while (1) {}		/* Make sure we hang here */
 80040be:	e7fe      	b.n	80040be <_exit+0x12>

080040c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00a      	b.n	80040e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040d2:	f3af 8000 	nop.w
 80040d6:	4601      	mov	r1, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	b2ca      	uxtb	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbf0      	blt.n	80040d2 <_read+0x12>
	}

return len;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
	return -1;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004122:	605a      	str	r2, [r3, #4]
	return 0;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_isatty>:

int _isatty(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	return 1;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <_sbrk+0x5c>)
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <_sbrk+0x60>)
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <_sbrk+0x64>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <_sbrk+0x64>)
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <_sbrk+0x68>)
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <_sbrk+0x64>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d207      	bcs.n	80041a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004194:	f004 f9fc 	bl	8008590 <__errno>
 8004198:	4603      	mov	r3, r0
 800419a:	220c      	movs	r2, #12
 800419c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	e009      	b.n	80041b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <_sbrk+0x64>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <_sbrk+0x64>)
 80041b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20020000 	.word	0x20020000
 80041c4:	00000400 	.word	0x00000400
 80041c8:	2000068c 	.word	0x2000068c
 80041cc:	200006d0 	.word	0x200006d0

080041d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <SystemInit+0x20>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <SystemInit+0x20>)
 80041dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	cnt1++;
 80041fc:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004204:	6013      	str	r3, [r2, #0]
    cntSW++;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004210:	801a      	strh	r2, [r3, #0]
    cntSetup1++;
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800421c:	801a      	strh	r2, [r3, #0]
    cntSetup2++;
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004228:	801a      	strh	r2, [r3, #0]
    cntSetup3++;
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004234:	801a      	strh	r2, [r3, #0]

    // スイッチの入力を取得
    if (cntSW >= 100) {
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	2b63      	cmp	r3, #99	; 0x63
 800423c:	d90e      	bls.n	800425c <HAL_TIM_PeriodElapsedCallback+0x68>
        swValTact = getSWtact();
 800423e:	f7ff fecb 	bl	8003fd8 <getSWtact>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004248:	701a      	strb	r2, [r3, #0]
        swValRotary = getSWrotary();
 800424a:	f7ff fdf5 	bl	8003e38 <getSWrotary>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004254:	701a      	strb	r2, [r3, #0]
        cntSW = 0;
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004258:	2200      	movs	r2, #0
 800425a:	801a      	strh	r2, [r3, #0]
    //     logMarker[cnt1] = getMarkerSensor();
    //     logEncoder[cnt1] = encTotalN - encMarker;
    // }
    
    // 仮想センサステア計算
    getAngleSensor();
 800425c:	f7fd fbbc 	bl	80019d8 <getAngleSensor>
    // LCD
    lcdShowProcess();
 8004260:	f7fc ff8c 	bl	800117c <lcdShowProcess>
    // Encoder
    getEncoder();
 8004264:	f7fd fa70 	bl	8001748 <getEncoder>
    // PWM
    motorControlTrace();
 8004268:	f7fd fce6 	bl	8001c38 <motorControlTrace>
    motorControlSpeed();
 800426c:	f000 f814 	bl	8004298 <motorControlSpeed>

 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000690 	.word	0x20000690
 800427c:	20000688 	.word	0x20000688
 8004280:	20000676 	.word	0x20000676
 8004284:	20000678 	.word	0x20000678
 8004288:	2000067a 	.word	0x2000067a
 800428c:	20000685 	.word	0x20000685
 8004290:	20000686 	.word	0x20000686
 8004294:	00000000 	.word	0x00000000

08004298 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 800429e:	4b54      	ldr	r3, [pc, #336]	; (80043f0 <motorControlSpeed+0x158>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc fc76 	bl	8000b98 <__aeabi_d2iz>
 80042ac:	4603      	mov	r3, r0
 80042ae:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <motorControlSpeed+0x15c>)
 80042b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b6:	61bb      	str	r3, [r7, #24]
									// 現在位置も10倍する

	// デモモードのときゲイン変更
	if ( demo ) {
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <motorControlSpeed+0x160>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 80042c0:	4b4e      	ldr	r3, [pc, #312]	; (80043fc <motorControlSpeed+0x164>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 80042c8:	4b4d      	ldr	r3, [pc, #308]	; (8004400 <motorControlSpeed+0x168>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <motorControlSpeed+0x16c>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80042d8:	e00b      	b.n	80042f2 <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 80042da:	4b48      	ldr	r3, [pc, #288]	; (80043fc <motorControlSpeed+0x164>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <motorControlSpeed+0x168>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 80042ea:	4b46      	ldr	r3, [pc, #280]	; (8004404 <motorControlSpeed+0x16c>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 80042fa:	69f8      	ldr	r0, [r7, #28]
 80042fc:	f7fc f932 	bl	8000564 <__aeabi_i2d>
 8004300:	4b41      	ldr	r3, [pc, #260]	; (8004408 <motorControlSpeed+0x170>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f7fc fbff 	bl	8000b08 <__aeabi_dcmpeq>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <motorControlSpeed+0x86>
 8004310:	493e      	ldr	r1, [pc, #248]	; (800440c <motorControlSpeed+0x174>)
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f7fc f920 	bl	8000564 <__aeabi_i2d>
 8004324:	a330      	add	r3, pc, #192	; (adr r3, 80043e8 <motorControlSpeed+0x150>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fc f985 	bl	8000638 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	4b35      	ldr	r3, [pc, #212]	; (800440c <motorControlSpeed+0x174>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fb ffc6 	bl	80002cc <__adddf3>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4931      	ldr	r1, [pc, #196]	; (800440c <motorControlSpeed+0x174>)
 8004346:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <motorControlSpeed+0x178>)
 800434c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004350:	461a      	mov	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;		// 比例
 8004358:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 8004364:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f8fb 	bl	8000564 <__aeabi_i2d>
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <motorControlSpeed+0x174>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f960 	bl	8000638 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	f7fc fc0a 	bl	8000b98 <__aeabi_d2iz>
 8004384:	4603      	mov	r3, r0
 8004386:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;		// 微分
 8004388:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	105b      	asrs	r3, r3, #1
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ac:	dd02      	ble.n	80043b4 <motorControlSpeed+0x11c>
 80043ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80043ba:	da01      	bge.n	80043c0 <motorControlSpeed+0x128>
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <motorControlSpeed+0x17c>)
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <motorControlSpeed+0x180>)
 80043c6:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <motorControlSpeed+0x178>)
 80043ce:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 80043d0:	69f8      	ldr	r0, [r7, #28]
 80043d2:	f7fc f8c7 	bl	8000564 <__aeabi_i2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	490b      	ldr	r1, [pc, #44]	; (8004408 <motorControlSpeed+0x170>)
 80043dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80043e0:	bf00      	nop
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80043ec:	3f50624d 	.word	0x3f50624d
 80043f0:	20000698 	.word	0x20000698
 80043f4:	20000268 	.word	0x20000268
 80043f8:	200006b8 	.word	0x200006b8
 80043fc:	2000001c 	.word	0x2000001c
 8004400:	2000001d 	.word	0x2000001d
 8004404:	200006b9 	.word	0x200006b9
 8004408:	200006a8 	.word	0x200006a8
 800440c:	200006b0 	.word	0x200006b0
 8004410:	200006a0 	.word	0x200006a0
 8004414:	fffffc18 	.word	0xfffffc18
 8004418:	20000694 	.word	0x20000694

0800441c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800441c:	480c      	ldr	r0, [pc, #48]	; (8004450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800441e:	490d      	ldr	r1, [pc, #52]	; (8004454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004424:	e002      	b.n	800442c <LoopCopyDataInit>

08004426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800442a:	3304      	adds	r3, #4

0800442c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800442c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800442e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004430:	d3f9      	bcc.n	8004426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004434:	4c0a      	ldr	r4, [pc, #40]	; (8004460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004438:	e001      	b.n	800443e <LoopFillZerobss>

0800443a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800443a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800443c:	3204      	adds	r2, #4

0800443e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800443e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004440:	d3fb      	bcc.n	800443a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004442:	f7ff fec5 	bl	80041d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004446:	f004 f8a9 	bl	800859c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444a:	f7fd fcd0 	bl	8001dee <main>
  bx  lr    
 800444e:	4770      	bx	lr
  ldr r0, =_sdata
 8004450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004454:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004458:	0800dc60 	.word	0x0800dc60
  ldr r2, =_sbss
 800445c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004460:	200006d0 	.word	0x200006d0

08004464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004464:	e7fe      	b.n	8004464 <ADC_IRQHandler>
	...

08004468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_Init+0x40>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_Init+0x40>)
 8004472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_Init+0x40>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_Init+0x40>)
 800447e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_Init+0x40>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <HAL_Init+0x40>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004490:	2003      	movs	r0, #3
 8004492:	f000 fd67 	bl	8004f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004496:	2000      	movs	r0, #0
 8004498:	f000 f808 	bl	80044ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800449c:	f7ff f948 	bl	8003730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00

080044ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_InitTick+0x54>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_InitTick+0x58>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fd7f 	bl	8004fce <HAL_SYSTICK_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00e      	b.n	80044f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	d80a      	bhi.n	80044f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e0:	2200      	movs	r2, #0
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f000 fd47 	bl	8004f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <HAL_InitTick+0x5c>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000018 	.word	0x20000018
 8004504:	20000024 	.word	0x20000024
 8004508:	20000020 	.word	0x20000020

0800450c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_IncTick+0x20>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_IncTick+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4413      	add	r3, r2
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_IncTick+0x24>)
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000024 	.word	0x20000024
 8004530:	200006bc 	.word	0x200006bc

08004534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return uwTick;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_GetTick+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200006bc 	.word	0x200006bc

0800454c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7ff ffee 	bl	8004534 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d005      	beq.n	8004572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_Delay+0x44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004572:	bf00      	nop
 8004574:	f7ff ffde 	bl	8004534 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d8f7      	bhi.n	8004574 <HAL_Delay+0x28>
  {
  }
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000024 	.word	0x20000024

08004594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e033      	b.n	8004612 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff f8e4 	bl	8003780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045da:	f023 0302 	bic.w	r3, r3, #2
 80045de:	f043 0202 	orr.w	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa6e 	bl	8004ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
 8004602:	e001      	b.n	8004608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_ADC_Start_DMA+0x1e>
 8004636:	2302      	movs	r3, #2
 8004638:	e0e9      	b.n	800480e <HAL_ADC_Start_DMA+0x1f2>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d018      	beq.n	8004682 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004660:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_ADC_Start_DMA+0x1fc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6d      	ldr	r2, [pc, #436]	; (800481c <HAL_ADC_Start_DMA+0x200>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	0c9a      	lsrs	r2, r3, #18
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004674:	e002      	b.n	800467c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f9      	bne.n	8004676 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d107      	bne.n	80046a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 80a1 	bne.w	80047f4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d106      	bne.n	8004700 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f023 0206 	bic.w	r2, r3, #6
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
 80046fe:	e002      	b.n	8004706 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800470e:	4b44      	ldr	r3, [pc, #272]	; (8004820 <HAL_ADC_Start_DMA+0x204>)
 8004710:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_ADC_Start_DMA+0x208>)
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4a42      	ldr	r2, [pc, #264]	; (8004828 <HAL_ADC_Start_DMA+0x20c>)
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	4a41      	ldr	r2, [pc, #260]	; (800482c <HAL_ADC_Start_DMA+0x210>)
 8004728:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004732:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004742:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	334c      	adds	r3, #76	; 0x4c
 800475e:	4619      	mov	r1, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f000 fcee 	bl	8005144 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2b00      	cmp	r3, #0
 8004772:	d12a      	bne.n	80047ca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <HAL_ADC_Start_DMA+0x214>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d015      	beq.n	80047aa <HAL_ADC_Start_DMA+0x18e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <HAL_ADC_Start_DMA+0x218>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d105      	bne.n	8004794 <HAL_ADC_Start_DMA+0x178>
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_ADC_Start_DMA+0x204>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a27      	ldr	r2, [pc, #156]	; (8004838 <HAL_ADC_Start_DMA+0x21c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d136      	bne.n	800480c <HAL_ADC_Start_DMA+0x1f0>
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_ADC_Start_DMA+0x204>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d130      	bne.n	800480c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d129      	bne.n	800480c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	e020      	b.n	800480c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_ADC_Start_DMA+0x214>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d11b      	bne.n	800480c <HAL_ADC_Start_DMA+0x1f0>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d114      	bne.n	800480c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e00b      	b.n	800480c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	f043 0201 	orr.w	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000018 	.word	0x20000018
 800481c:	431bde83 	.word	0x431bde83
 8004820:	40012300 	.word	0x40012300
 8004824:	08004cc1 	.word	0x08004cc1
 8004828:	08004d7b 	.word	0x08004d7b
 800482c:	08004d97 	.word	0x08004d97
 8004830:	40012000 	.word	0x40012000
 8004834:	40012100 	.word	0x40012100
 8004838:	40012200 	.word	0x40012200

0800483c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e113      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x244>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b09      	cmp	r3, #9
 800488e:	d925      	bls.n	80048dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	3b1e      	subs	r3, #30
 80048a6:	2207      	movs	r2, #7
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43da      	mvns	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	400a      	ands	r2, r1
 80048b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4618      	mov	r0, r3
 80048c8:	4603      	mov	r3, r0
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4403      	add	r3, r0
 80048ce:	3b1e      	subs	r3, #30
 80048d0:	409a      	lsls	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	e022      	b.n	8004922 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	2207      	movs	r2, #7
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	400a      	ands	r2, r1
 80048fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	4618      	mov	r0, r3
 8004912:	4603      	mov	r3, r0
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4403      	add	r3, r0
 8004918:	409a      	lsls	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d824      	bhi.n	8004974 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	3b05      	subs	r3, #5
 800493c:	221f      	movs	r2, #31
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	400a      	ands	r2, r1
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	4618      	mov	r0, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	3b05      	subs	r3, #5
 8004966:	fa00 f203 	lsl.w	r2, r0, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	635a      	str	r2, [r3, #52]	; 0x34
 8004972:	e04c      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d824      	bhi.n	80049c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	3b23      	subs	r3, #35	; 0x23
 800498e:	221f      	movs	r2, #31
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43da      	mvns	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	400a      	ands	r2, r1
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	3b23      	subs	r3, #35	; 0x23
 80049b8:	fa00 f203 	lsl.w	r2, r0, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
 80049c4:	e023      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	3b41      	subs	r3, #65	; 0x41
 80049d8:	221f      	movs	r2, #31
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	400a      	ands	r2, r1
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4618      	mov	r0, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	3b41      	subs	r3, #65	; 0x41
 8004a02:	fa00 f203 	lsl.w	r2, r0, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_ADC_ConfigChannel+0x250>)
 8004a10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <HAL_ADC_ConfigChannel+0x254>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10f      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1d8>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b12      	cmp	r3, #18
 8004a22:	d10b      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_ADC_ConfigChannel+0x254>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d12b      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x23a>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_ADC_ConfigChannel+0x258>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0x1f4>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b11      	cmp	r3, #17
 8004a56:	d122      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_ADC_ConfigChannel+0x258>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d111      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_ADC_ConfigChannel+0x25c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_ADC_ConfigChannel+0x260>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	0c9a      	lsrs	r2, r3, #18
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a90:	e002      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f9      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012300 	.word	0x40012300
 8004ab8:	40012000 	.word	0x40012000
 8004abc:	10000012 	.word	0x10000012
 8004ac0:	20000018 	.word	0x20000018
 8004ac4:	431bde83 	.word	0x431bde83

08004ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ad0:	4b79      	ldr	r3, [pc, #484]	; (8004cb8 <ADC_Init+0x1f0>)
 8004ad2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	021a      	lsls	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6899      	ldr	r1, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	4a58      	ldr	r2, [pc, #352]	; (8004cbc <ADC_Init+0x1f4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d022      	beq.n	8004ba6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6899      	ldr	r1, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6899      	ldr	r1, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e00f      	b.n	8004bc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0202 	bic.w	r2, r2, #2
 8004bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7e1b      	ldrb	r3, [r3, #24]
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	035a      	lsls	r2, r3, #13
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e007      	b.n	8004c3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	051a      	lsls	r2, r3, #20
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c7e:	025a      	lsls	r2, r3, #9
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6899      	ldr	r1, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	029a      	lsls	r2, r3, #10
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40012300 	.word	0x40012300
 8004cbc:	0f000001 	.word	0x0f000001

08004cc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d13c      	bne.n	8004d54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d12b      	bne.n	8004d4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d127      	bne.n	8004d4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d119      	bne.n	8004d4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0220 	bic.w	r2, r2, #32
 8004d26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7fd fd8d 	bl	800286c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d52:	e00e      	b.n	8004d72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fd75 	bl	8004850 <HAL_ADC_ErrorCallback>
}
 8004d66:	e004      	b.n	8004d72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff fd57 	bl	800483c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2240      	movs	r2, #64	; 0x40
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0204 	orr.w	r2, r3, #4
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff fd4a 	bl	8004850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <__NVIC_SetPriorityGrouping>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df6:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	60d3      	str	r3, [r2, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_GetPriorityGrouping>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <__NVIC_GetPriorityGrouping+0x18>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0307 	and.w	r3, r3, #7
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_EnableIRQ>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db0b      	blt.n	8004e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4907      	ldr	r1, [pc, #28]	; (8004e60 <__NVIC_EnableIRQ+0x38>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2001      	movs	r0, #1
 8004e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e100 	.word	0xe000e100

08004e64 <__NVIC_SetPriority>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db0a      	blt.n	8004e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <__NVIC_SetPriority+0x4c>)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e8c:	e00a      	b.n	8004ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <__NVIC_SetPriority+0x50>)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	761a      	strb	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000e100 	.word	0xe000e100
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <NVIC_EncodePriority>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf28      	it	cs
 8004ed6:	2304      	movcs	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d902      	bls.n	8004ee8 <NVIC_EncodePriority+0x30>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3b03      	subs	r3, #3
 8004ee6:	e000      	b.n	8004eea <NVIC_EncodePriority+0x32>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	401a      	ands	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43d9      	mvns	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	4313      	orrs	r3, r2
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <SysTick_Config>:
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f30:	d301      	bcc.n	8004f36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00f      	b.n	8004f56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <SysTick_Config+0x40>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3e:	210f      	movs	r1, #15
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	f7ff ff8e 	bl	8004e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SysTick_Config+0x40>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SysTick_Config+0x40>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff29 	bl	8004dc4 <__NVIC_SetPriorityGrouping>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4603      	mov	r3, r0
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f8c:	f7ff ff3e 	bl	8004e0c <__NVIC_GetPriorityGrouping>
 8004f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	6978      	ldr	r0, [r7, #20]
 8004f98:	f7ff ff8e 	bl	8004eb8 <NVIC_EncodePriority>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff5d 	bl	8004e64 <__NVIC_SetPriority>
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	4603      	mov	r3, r0
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff ff31 	bl	8004e28 <__NVIC_EnableIRQ>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff ffa2 	bl	8004f20 <SysTick_Config>
 8004fdc:	4603      	mov	r3, r0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff fa9e 	bl	8004534 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e099      	b.n	8005138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005024:	e00f      	b.n	8005046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005026:	f7ff fa85 	bl	8004534 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b05      	cmp	r3, #5
 8005032:	d908      	bls.n	8005046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e078      	b.n	8005138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e8      	bne.n	8005026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4b38      	ldr	r3, [pc, #224]	; (8005140 <HAL_DMA_Init+0x158>)
 8005060:	4013      	ands	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b04      	cmp	r3, #4
 800509e:	d107      	bne.n	80050b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	4313      	orrs	r3, r2
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0307 	bic.w	r3, r3, #7
 80050c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d117      	bne.n	800510a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa6f 	bl	80055d0 <DMA_CheckFifoParam>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2240      	movs	r2, #64	; 0x40
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005106:	2301      	movs	r3, #1
 8005108:	e016      	b.n	8005138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa26 	bl	8005564 <DMA_CalcBaseAndBitshift>
 8005118:	4603      	mov	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	223f      	movs	r2, #63	; 0x3f
 8005122:	409a      	lsls	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	f010803f 	.word	0xf010803f

08005144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_DMA_Start_IT+0x26>
 8005166:	2302      	movs	r3, #2
 8005168:	e040      	b.n	80051ec <HAL_DMA_Start_IT+0xa8>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12f      	bne.n	80051de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f9b8 	bl	8005508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519c:	223f      	movs	r2, #63	; 0x3f
 800519e:	409a      	lsls	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0216 	orr.w	r2, r2, #22
 80051b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e005      	b.n	80051ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005200:	4b8e      	ldr	r3, [pc, #568]	; (800543c <HAL_DMA_IRQHandler+0x248>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a8e      	ldr	r2, [pc, #568]	; (8005440 <HAL_DMA_IRQHandler+0x24c>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	2208      	movs	r2, #8
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01a      	beq.n	8005260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	2208      	movs	r2, #8
 800524e:	409a      	lsls	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f043 0201 	orr.w	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	2201      	movs	r2, #1
 8005266:	409a      	lsls	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	2201      	movs	r2, #1
 8005284:	409a      	lsls	r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f043 0202 	orr.w	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	2204      	movs	r2, #4
 800529c:	409a      	lsls	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d012      	beq.n	80052cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b8:	2204      	movs	r2, #4
 80052ba:	409a      	lsls	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	f043 0204 	orr.w	r2, r3, #4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	2210      	movs	r2, #16
 80052d2:	409a      	lsls	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d043      	beq.n	8005364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d03c      	beq.n	8005364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	2210      	movs	r2, #16
 80052f0:	409a      	lsls	r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d018      	beq.n	8005336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d024      	beq.n	8005364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	4798      	blx	r3
 8005322:	e01f      	b.n	8005364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
 8005334:	e016      	b.n	8005364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0208 	bic.w	r2, r2, #8
 8005352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	2220      	movs	r2, #32
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 808f 	beq.w	8005494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8087 	beq.w	8005494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	2220      	movs	r2, #32
 800538c:	409a      	lsls	r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b05      	cmp	r3, #5
 800539c:	d136      	bne.n	800540c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0216 	bic.w	r2, r2, #22
 80053ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_DMA_IRQHandler+0x1da>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0208 	bic.w	r2, r2, #8
 80053dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	223f      	movs	r2, #63	; 0x3f
 80053e4:	409a      	lsls	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d07e      	beq.n	8005500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
        }
        return;
 800540a:	e079      	b.n	8005500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10d      	bne.n	8005444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542c:	2b00      	cmp	r3, #0
 800542e:	d031      	beq.n	8005494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	e02c      	b.n	8005494 <HAL_DMA_IRQHandler+0x2a0>
 800543a:	bf00      	nop
 800543c:	20000018 	.word	0x20000018
 8005440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d023      	beq.n	8005494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
 8005454:	e01e      	b.n	8005494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10f      	bne.n	8005484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0210 	bic.w	r2, r2, #16
 8005472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d022      	beq.n	80054ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2205      	movs	r2, #5
 80054ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d307      	bcc.n	80054dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f2      	bne.n	80054c0 <HAL_DMA_IRQHandler+0x2cc>
 80054da:	e000      	b.n	80054de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
 80054fe:	e000      	b.n	8005502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005500:	bf00      	nop
    }
  }
}
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d108      	bne.n	8005548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005546:	e007      	b.n	8005558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	3b10      	subs	r3, #16
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <DMA_CalcBaseAndBitshift+0x68>)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d909      	bls.n	80055a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	659a      	str	r2, [r3, #88]	; 0x58
 80055a4:	e007      	b.n	80055b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	aaaaaaab 	.word	0xaaaaaaab
 80055cc:	0800d758 	.word	0x0800d758

080055d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11f      	bne.n	800562a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d856      	bhi.n	800569e <DMA_CheckFifoParam+0xce>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <DMA_CheckFifoParam+0x28>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	08005609 	.word	0x08005609
 80055fc:	0800561b 	.word	0x0800561b
 8005600:	08005609 	.word	0x08005609
 8005604:	0800569f 	.word	0x0800569f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d046      	beq.n	80056a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005618:	e043      	b.n	80056a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005622:	d140      	bne.n	80056a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005628:	e03d      	b.n	80056a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005632:	d121      	bne.n	8005678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d837      	bhi.n	80056aa <DMA_CheckFifoParam+0xda>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <DMA_CheckFifoParam+0x70>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005651 	.word	0x08005651
 8005644:	08005657 	.word	0x08005657
 8005648:	08005651 	.word	0x08005651
 800564c:	08005669 	.word	0x08005669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e030      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d025      	beq.n	80056ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005666:	e022      	b.n	80056ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005670:	d11f      	bne.n	80056b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005676:	e01c      	b.n	80056b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d903      	bls.n	8005686 <DMA_CheckFifoParam+0xb6>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d003      	beq.n	800568c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005684:	e018      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
      break;
 800568a:	e015      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e00b      	b.n	80056b6 <DMA_CheckFifoParam+0xe6>
      break;
 800569e:	bf00      	nop
 80056a0:	e00a      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;
 80056a2:	bf00      	nop
 80056a4:	e008      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;
 80056a6:	bf00      	nop
 80056a8:	e006      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;
 80056aa:	bf00      	nop
 80056ac:	e004      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <DMA_CheckFifoParam+0xe8>
      break;
 80056b6:	bf00      	nop
    }
  } 
  
  return status; 
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop

080056c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	e165      	b.n	80059b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056e4:	2201      	movs	r2, #1
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4013      	ands	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	f040 8154 	bne.w	80059aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d005      	beq.n	800571a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005716:	2b02      	cmp	r3, #2
 8005718:	d130      	bne.n	800577c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	2203      	movs	r2, #3
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005750:	2201      	movs	r2, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 0201 	and.w	r2, r3, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b03      	cmp	r3, #3
 8005786:	d017      	beq.n	80057b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	2203      	movs	r2, #3
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d123      	bne.n	800580c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	08da      	lsrs	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3208      	adds	r2, #8
 80057cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	220f      	movs	r2, #15
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	08da      	lsrs	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3208      	adds	r2, #8
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	2203      	movs	r2, #3
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0203 	and.w	r2, r3, #3
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80ae 	beq.w	80059aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800585c:	6453      	str	r3, [r2, #68]	; 0x44
 800585e:	4b5a      	ldr	r3, [pc, #360]	; (80059c8 <HAL_GPIO_Init+0x300>)
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800586a:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_GPIO_Init+0x304>)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	3302      	adds	r3, #2
 8005872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	220f      	movs	r2, #15
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4013      	ands	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a4f      	ldr	r2, [pc, #316]	; (80059d0 <HAL_GPIO_Init+0x308>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d025      	beq.n	80058e2 <HAL_GPIO_Init+0x21a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a4e      	ldr	r2, [pc, #312]	; (80059d4 <HAL_GPIO_Init+0x30c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01f      	beq.n	80058de <HAL_GPIO_Init+0x216>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a4d      	ldr	r2, [pc, #308]	; (80059d8 <HAL_GPIO_Init+0x310>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d019      	beq.n	80058da <HAL_GPIO_Init+0x212>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a4c      	ldr	r2, [pc, #304]	; (80059dc <HAL_GPIO_Init+0x314>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_GPIO_Init+0x20e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a4b      	ldr	r2, [pc, #300]	; (80059e0 <HAL_GPIO_Init+0x318>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00d      	beq.n	80058d2 <HAL_GPIO_Init+0x20a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a4a      	ldr	r2, [pc, #296]	; (80059e4 <HAL_GPIO_Init+0x31c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <HAL_GPIO_Init+0x206>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a49      	ldr	r2, [pc, #292]	; (80059e8 <HAL_GPIO_Init+0x320>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_GPIO_Init+0x202>
 80058c6:	2306      	movs	r3, #6
 80058c8:	e00c      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058ca:	2307      	movs	r3, #7
 80058cc:	e00a      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058ce:	2305      	movs	r3, #5
 80058d0:	e008      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058d2:	2304      	movs	r3, #4
 80058d4:	e006      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058d6:	2303      	movs	r3, #3
 80058d8:	e004      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058da:	2302      	movs	r3, #2
 80058dc:	e002      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <HAL_GPIO_Init+0x21c>
 80058e2:	2300      	movs	r3, #0
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	f002 0203 	and.w	r2, r2, #3
 80058ea:	0092      	lsls	r2, r2, #2
 80058ec:	4093      	lsls	r3, r2
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f4:	4935      	ldr	r1, [pc, #212]	; (80059cc <HAL_GPIO_Init+0x304>)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	3302      	adds	r3, #2
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_GPIO_Init+0x324>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005926:	4a31      	ldr	r2, [pc, #196]	; (80059ec <HAL_GPIO_Init+0x324>)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800592c:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_GPIO_Init+0x324>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	43db      	mvns	r3, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005950:	4a26      	ldr	r2, [pc, #152]	; (80059ec <HAL_GPIO_Init+0x324>)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005956:	4b25      	ldr	r3, [pc, #148]	; (80059ec <HAL_GPIO_Init+0x324>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	43db      	mvns	r3, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4013      	ands	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800597a:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <HAL_GPIO_Init+0x324>)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_GPIO_Init+0x324>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <HAL_GPIO_Init+0x324>)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	f67f ae96 	bls.w	80056e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40013800 	.word	0x40013800
 80059d0:	40020000 	.word	0x40020000
 80059d4:	40020400 	.word	0x40020400
 80059d8:	40020800 	.word	0x40020800
 80059dc:	40020c00 	.word	0x40020c00
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40021400 	.word	0x40021400
 80059e8:	40021800 	.word	0x40021800
 80059ec:	40013c00 	.word	0x40013c00

080059f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e001      	b.n	8005a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a30:	787b      	ldrb	r3, [r7, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a3c:	e003      	b.n	8005a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a3e:	887b      	ldrh	r3, [r7, #2]
 8005a40:	041a      	lsls	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e12b      	b.n	8005cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fd ff14 	bl	80038a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2224      	movs	r2, #36	; 0x24
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f000 fd5a 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8005abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4a81      	ldr	r2, [pc, #516]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d807      	bhi.n	8005ad8 <HAL_I2C_Init+0x84>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a80      	ldr	r2, [pc, #512]	; (8005ccc <HAL_I2C_Init+0x278>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bf94      	ite	ls
 8005ad0:	2301      	movls	r3, #1
 8005ad2:	2300      	movhi	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e006      	b.n	8005ae6 <HAL_I2C_Init+0x92>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a7d      	ldr	r2, [pc, #500]	; (8005cd0 <HAL_I2C_Init+0x27c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bf94      	ite	ls
 8005ae0:	2301      	movls	r3, #1
 8005ae2:	2300      	movhi	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0e7      	b.n	8005cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a78      	ldr	r2, [pc, #480]	; (8005cd4 <HAL_I2C_Init+0x280>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0c9b      	lsrs	r3, r3, #18
 8005af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a6a      	ldr	r2, [pc, #424]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d802      	bhi.n	8005b28 <HAL_I2C_Init+0xd4>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3301      	adds	r3, #1
 8005b26:	e009      	b.n	8005b3c <HAL_I2C_Init+0xe8>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	4a69      	ldr	r2, [pc, #420]	; (8005cd8 <HAL_I2C_Init+0x284>)
 8005b34:	fba2 2303 	umull	r2, r3, r2, r3
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	495c      	ldr	r1, [pc, #368]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d819      	bhi.n	8005b90 <HAL_I2C_Init+0x13c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1e59      	subs	r1, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b70:	400b      	ands	r3, r1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_I2C_Init+0x138>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1e59      	subs	r1, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b84:	3301      	adds	r3, #1
 8005b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8a:	e051      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e04f      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d111      	bne.n	8005bbc <HAL_I2C_Init+0x168>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1e58      	subs	r0, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e012      	b.n	8005be2 <HAL_I2C_Init+0x18e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1e58      	subs	r0, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	0099      	lsls	r1, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Init+0x196>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e022      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10e      	bne.n	8005c10 <HAL_I2C_Init+0x1bc>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1e58      	subs	r0, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	440b      	add	r3, r1
 8005c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	e00f      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1e58      	subs	r0, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	0099      	lsls	r1, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	6809      	ldr	r1, [r1, #0]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6911      	ldr	r1, [r2, #16]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	000186a0 	.word	0x000186a0
 8005ccc:	001e847f 	.word	0x001e847f
 8005cd0:	003d08ff 	.word	0x003d08ff
 8005cd4:	431bde83 	.word	0x431bde83
 8005cd8:	10624dd3 	.word	0x10624dd3

08005cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	460b      	mov	r3, r1
 8005cea:	817b      	strh	r3, [r7, #10]
 8005cec:	4613      	mov	r3, r2
 8005cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cf0:	f7fe fc20 	bl	8004534 <HAL_GetTick>
 8005cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	f040 80e0 	bne.w	8005ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2319      	movs	r3, #25
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4970      	ldr	r1, [pc, #448]	; (8005ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f964 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0d3      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_I2C_Master_Transmit+0x50>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0cc      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d007      	beq.n	8005d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2221      	movs	r2, #33	; 0x21
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	893a      	ldrh	r2, [r7, #8]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a50      	ldr	r2, [pc, #320]	; (8005ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d94:	8979      	ldrh	r1, [r7, #10]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f89c 	bl	8005ed8 <I2C_MasterRequestWrite>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e08d      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005dc0:	e066      	b.n	8005e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	6a39      	ldr	r1, [r7, #32]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f9de 	bl	8006188 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d107      	bne.n	8005dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e06b      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d11b      	bne.n	8005e64 <HAL_I2C_Master_Transmit+0x188>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d017      	beq.n	8005e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6a39      	ldr	r1, [r7, #32]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f9ce 	bl	800620a <I2C_WaitOnBTFFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d107      	bne.n	8005e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e01a      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d194      	bne.n	8005dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e000      	b.n	8005ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	00100002 	.word	0x00100002
 8005ed4:	ffff0000 	.word	0xffff0000

08005ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d006      	beq.n	8005f02 <I2C_MasterRequestWrite+0x2a>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d003      	beq.n	8005f02 <I2C_MasterRequestWrite+0x2a>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f00:	d108      	bne.n	8005f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e00b      	b.n	8005f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b12      	cmp	r3, #18
 8005f1a:	d107      	bne.n	8005f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f84f 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d103      	bne.n	8005f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e035      	b.n	8005fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f68:	d108      	bne.n	8005f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f78:	611a      	str	r2, [r3, #16]
 8005f7a:	e01b      	b.n	8005fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	11db      	asrs	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f063 030f 	orn	r3, r3, #15
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <I2C_MasterRequestWrite+0xfc>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f875 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e010      	b.n	8005fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005faa:	897b      	ldrh	r3, [r7, #10]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <I2C_MasterRequestWrite+0x100>)
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f865 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	00010008 	.word	0x00010008
 8005fd8:	00010002 	.word	0x00010002

08005fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fec:	e025      	b.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d021      	beq.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fe fa9d 	bl	8004534 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e023      	b.n	8006082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10d      	bne.n	8006060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	43da      	mvns	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	e00c      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	43da      	mvns	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4013      	ands	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	429a      	cmp	r2, r3
 800607e:	d0b6      	beq.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006098:	e051      	b.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d123      	bne.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e046      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d021      	beq.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fe fa1b 	bl	8004534 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e020      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10c      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	e00b      	b.n	800617a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d18d      	bne.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006194:	e02d      	b.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f878 	bl	800628c <I2C_IsAcknowledgeFailed>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e02d      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d021      	beq.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ae:	f7fe f9c1 	bl	8004534 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e007      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d1ca      	bne.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006216:	e02d      	b.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f837 	bl	800628c <I2C_IsAcknowledgeFailed>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e02d      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d021      	beq.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006230:	f7fe f980 	bl	8004534 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d116      	bne.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e007      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b04      	cmp	r3, #4
 8006280:	d1ca      	bne.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d11b      	bne.n	80062dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f043 0204 	orr.w	r2, r3, #4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062f6:	2300      	movs	r3, #0
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_PWREx_EnableOverDrive+0x90>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <HAL_PWREx_EnableOverDrive+0x90>)
 8006300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006304:	6413      	str	r3, [r2, #64]	; 0x40
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_PWREx_EnableOverDrive+0x90>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006312:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <HAL_PWREx_EnableOverDrive+0x94>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006318:	f7fe f90c 	bl	8004534 <HAL_GetTick>
 800631c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800631e:	e009      	b.n	8006334 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006320:	f7fe f908 	bl	8004534 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632e:	d901      	bls.n	8006334 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e01f      	b.n	8006374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <HAL_PWREx_EnableOverDrive+0x98>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d1ee      	bne.n	8006320 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006348:	f7fe f8f4 	bl	8004534 <HAL_GetTick>
 800634c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800634e:	e009      	b.n	8006364 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006350:	f7fe f8f0 	bl	8004534 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635e:	d901      	bls.n	8006364 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e007      	b.n	8006374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <HAL_PWREx_EnableOverDrive+0x98>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006370:	d1ee      	bne.n	8006350 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40023800 	.word	0x40023800
 8006380:	420e0040 	.word	0x420e0040
 8006384:	40007000 	.word	0x40007000
 8006388:	420e0044 	.word	0x420e0044

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0cc      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b68      	ldr	r3, [pc, #416]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d90c      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b65      	ldr	r3, [pc, #404]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b63      	ldr	r3, [pc, #396]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0b8      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e0:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a52      	ldr	r2, [pc, #328]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	494d      	ldr	r1, [pc, #308]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d044      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e07f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d003      	beq.n	800644a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006446:	2b03      	cmp	r3, #3
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b3f      	ldr	r3, [pc, #252]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e06f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e067      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4934      	ldr	r1, [pc, #208]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fe f85a 	bl	8004534 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fe f856 	bl	8004534 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e04f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d20c      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e032      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4916      	ldr	r1, [pc, #88]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006512:	f000 f855 	bl	80065c0 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490a      	ldr	r1, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd ffba 	bl	80044ac <HAL_InitTick>

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023c00 	.word	0x40023c00
 8006548:	40023800 	.word	0x40023800
 800654c:	0800d740 	.word	0x0800d740
 8006550:	20000018 	.word	0x20000018
 8006554:	20000020 	.word	0x20000020

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_RCC_GetHCLKFreq+0x14>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000018 	.word	0x20000018

08006570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006574:	f7ff fff0 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0a9b      	lsrs	r3, r3, #10
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800d750 	.word	0x0800d750

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800659c:	f7ff ffdc 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0b5b      	lsrs	r3, r3, #13
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	0800d750 	.word	0x0800d750

080065c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b0a6      	sub	sp, #152	; 0x98
 80065c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065e6:	4bc8      	ldr	r3, [pc, #800]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b0c      	cmp	r3, #12
 80065f0:	f200 817e 	bhi.w	80068f0 <HAL_RCC_GetSysClockFreq+0x330>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006631 	.word	0x08006631
 8006600:	080068f1 	.word	0x080068f1
 8006604:	080068f1 	.word	0x080068f1
 8006608:	080068f1 	.word	0x080068f1
 800660c:	08006639 	.word	0x08006639
 8006610:	080068f1 	.word	0x080068f1
 8006614:	080068f1 	.word	0x080068f1
 8006618:	080068f1 	.word	0x080068f1
 800661c:	08006641 	.word	0x08006641
 8006620:	080068f1 	.word	0x080068f1
 8006624:	080068f1 	.word	0x080068f1
 8006628:	080068f1 	.word	0x080068f1
 800662c:	080067ab 	.word	0x080067ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006630:	4bb6      	ldr	r3, [pc, #728]	; (800690c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006636:	e15f      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006638:	4bb5      	ldr	r3, [pc, #724]	; (8006910 <HAL_RCC_GetSysClockFreq+0x350>)
 800663a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800663e:	e15b      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006640:	4bb1      	ldr	r3, [pc, #708]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006648:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800664c:	4bae      	ldr	r3, [pc, #696]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d031      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006658:	4bab      	ldr	r3, [pc, #684]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	099b      	lsrs	r3, r3, #6
 800665e:	2200      	movs	r2, #0
 8006660:	66bb      	str	r3, [r7, #104]	; 0x68
 8006662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	663b      	str	r3, [r7, #96]	; 0x60
 800666c:	2300      	movs	r3, #0
 800666e:	667b      	str	r3, [r7, #100]	; 0x64
 8006670:	4ba7      	ldr	r3, [pc, #668]	; (8006910 <HAL_RCC_GetSysClockFreq+0x350>)
 8006672:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006676:	462a      	mov	r2, r5
 8006678:	fb03 f202 	mul.w	r2, r3, r2
 800667c:	2300      	movs	r3, #0
 800667e:	4621      	mov	r1, r4
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	4aa2      	ldr	r2, [pc, #648]	; (8006910 <HAL_RCC_GetSysClockFreq+0x350>)
 8006688:	4621      	mov	r1, r4
 800668a:	fba1 1202 	umull	r1, r2, r1, r2
 800668e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006690:	460a      	mov	r2, r1
 8006692:	67ba      	str	r2, [r7, #120]	; 0x78
 8006694:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006696:	4413      	add	r3, r2
 8006698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800669e:	2200      	movs	r2, #0
 80066a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80066a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066ac:	f7fa fb0c 	bl	8000cc8 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4613      	mov	r3, r2
 80066b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066ba:	e064      	b.n	8006786 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066bc:	4b92      	ldr	r3, [pc, #584]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	099b      	lsrs	r3, r3, #6
 80066c2:	2200      	movs	r2, #0
 80066c4:	653b      	str	r3, [r7, #80]	; 0x50
 80066c6:	657a      	str	r2, [r7, #84]	; 0x54
 80066c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d0:	2300      	movs	r3, #0
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80066d8:	4622      	mov	r2, r4
 80066da:	462b      	mov	r3, r5
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	0159      	lsls	r1, r3, #5
 80066e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ea:	0150      	lsls	r0, r2, #5
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4621      	mov	r1, r4
 80066f2:	1a51      	subs	r1, r2, r1
 80066f4:	6139      	str	r1, [r7, #16]
 80066f6:	4629      	mov	r1, r5
 80066f8:	eb63 0301 	sbc.w	r3, r3, r1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800670a:	4659      	mov	r1, fp
 800670c:	018b      	lsls	r3, r1, #6
 800670e:	4651      	mov	r1, sl
 8006710:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006714:	4651      	mov	r1, sl
 8006716:	018a      	lsls	r2, r1, #6
 8006718:	4651      	mov	r1, sl
 800671a:	ebb2 0801 	subs.w	r8, r2, r1
 800671e:	4659      	mov	r1, fp
 8006720:	eb63 0901 	sbc.w	r9, r3, r1
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006738:	4690      	mov	r8, r2
 800673a:	4699      	mov	r9, r3
 800673c:	4623      	mov	r3, r4
 800673e:	eb18 0303 	adds.w	r3, r8, r3
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	462b      	mov	r3, r5
 8006746:	eb49 0303 	adc.w	r3, r9, r3
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006758:	4629      	mov	r1, r5
 800675a:	028b      	lsls	r3, r1, #10
 800675c:	4621      	mov	r1, r4
 800675e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006762:	4621      	mov	r1, r4
 8006764:	028a      	lsls	r2, r1, #10
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800676e:	2200      	movs	r2, #0
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
 8006772:	647a      	str	r2, [r7, #68]	; 0x44
 8006774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006778:	f7fa faa6 	bl	8000cc8 <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4613      	mov	r3, r2
 8006782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006786:	4b60      	ldr	r3, [pc, #384]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	3301      	adds	r3, #1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006798:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800679c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80067a8:	e0a6      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067aa:	4b57      	ldr	r3, [pc, #348]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067b6:	4b54      	ldr	r3, [pc, #336]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02a      	beq.n	8006818 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b51      	ldr	r3, [pc, #324]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	2200      	movs	r2, #0
 80067ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80067cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067d4:	2100      	movs	r1, #0
 80067d6:	4b4e      	ldr	r3, [pc, #312]	; (8006910 <HAL_RCC_GetSysClockFreq+0x350>)
 80067d8:	fb03 f201 	mul.w	r2, r3, r1
 80067dc:	2300      	movs	r3, #0
 80067de:	fb00 f303 	mul.w	r3, r0, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	4a4a      	ldr	r2, [pc, #296]	; (8006910 <HAL_RCC_GetSysClockFreq+0x350>)
 80067e6:	fba0 1202 	umull	r1, r2, r0, r2
 80067ea:	677a      	str	r2, [r7, #116]	; 0x74
 80067ec:	460a      	mov	r2, r1
 80067ee:	673a      	str	r2, [r7, #112]	; 0x70
 80067f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067f2:	4413      	add	r3, r2
 80067f4:	677b      	str	r3, [r7, #116]	; 0x74
 80067f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067fa:	2200      	movs	r2, #0
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
 80067fe:	637a      	str	r2, [r7, #52]	; 0x34
 8006800:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006804:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006808:	f7fa fa5e 	bl	8000cc8 <__aeabi_uldivmod>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4613      	mov	r3, r2
 8006812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006816:	e05b      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006818:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	2200      	movs	r2, #0
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	2300      	movs	r3, #0
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	f04f 0000 	mov.w	r0, #0
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	0159      	lsls	r1, r3, #5
 8006842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006846:	0150      	lsls	r0, r2, #5
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4641      	mov	r1, r8
 800684e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006852:	4649      	mov	r1, r9
 8006854:	eb63 0b01 	sbc.w	fp, r3, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800686c:	ebb2 040a 	subs.w	r4, r2, sl
 8006870:	eb63 050b 	sbc.w	r5, r3, fp
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	00eb      	lsls	r3, r5, #3
 800687e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006882:	00e2      	lsls	r2, r4, #3
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4643      	mov	r3, r8
 800688a:	18e3      	adds	r3, r4, r3
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	464b      	mov	r3, r9
 8006890:	eb45 0303 	adc.w	r3, r5, r3
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068a2:	4629      	mov	r1, r5
 80068a4:	028b      	lsls	r3, r1, #10
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068ac:	4621      	mov	r1, r4
 80068ae:	028a      	lsls	r2, r1, #10
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b8:	2200      	movs	r2, #0
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c2:	f7fa fa01 	bl	8000cc8 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4613      	mov	r3, r2
 80068cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <HAL_RCC_GetSysClockFreq+0x348>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	0f1b      	lsrs	r3, r3, #28
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80068de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80068ee:	e003      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_RCC_GetSysClockFreq+0x34c>)
 80068f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80068f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3798      	adds	r7, #152	; 0x98
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800
 800690c:	00f42400 	.word	0x00f42400
 8006910:	00b71b00 	.word	0x00b71b00

08006914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e28d      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8083 	beq.w	8006a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006934:	4b94      	ldr	r3, [pc, #592]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 030c 	and.w	r3, r3, #12
 800693c:	2b04      	cmp	r3, #4
 800693e:	d019      	beq.n	8006974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006940:	4b91      	ldr	r3, [pc, #580]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006948:	2b08      	cmp	r3, #8
 800694a:	d106      	bne.n	800695a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800694c:	4b8e      	ldr	r3, [pc, #568]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006958:	d00c      	beq.n	8006974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800695a:	4b8b      	ldr	r3, [pc, #556]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006962:	2b0c      	cmp	r3, #12
 8006964:	d112      	bne.n	800698c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006966:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006972:	d10b      	bne.n	800698c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	4b84      	ldr	r3, [pc, #528]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d05b      	beq.n	8006a38 <HAL_RCC_OscConfig+0x124>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d157      	bne.n	8006a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e25a      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006994:	d106      	bne.n	80069a4 <HAL_RCC_OscConfig+0x90>
 8006996:	4b7c      	ldr	r3, [pc, #496]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7b      	ldr	r2, [pc, #492]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e01d      	b.n	80069e0 <HAL_RCC_OscConfig+0xcc>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0xb4>
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a75      	ldr	r2, [pc, #468]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	4b73      	ldr	r3, [pc, #460]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a72      	ldr	r2, [pc, #456]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e00b      	b.n	80069e0 <HAL_RCC_OscConfig+0xcc>
 80069c8:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a6e      	ldr	r2, [pc, #440]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a6b      	ldr	r2, [pc, #428]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 80069da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fd fda4 	bl	8004534 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f0:	f7fd fda0 	bl	8004534 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b64      	cmp	r3, #100	; 0x64
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e21f      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0xdc>
 8006a0e:	e014      	b.n	8006a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fd fd90 	bl	8004534 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fd fd8c 	bl	8004534 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e20b      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2a:	4b57      	ldr	r3, [pc, #348]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x104>
 8006a36:	e000      	b.n	8006a3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d06f      	beq.n	8006b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a46:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 030c 	and.w	r3, r3, #12
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a52:	4b4d      	ldr	r3, [pc, #308]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d105      	bne.n	8006a6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a5e:	4b4a      	ldr	r3, [pc, #296]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a6a:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a72:	2b0c      	cmp	r3, #12
 8006a74:	d11c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a76:	4b44      	ldr	r3, [pc, #272]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d116      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a82:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_RCC_OscConfig+0x186>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d001      	beq.n	8006a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e1d3      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	4937      	ldr	r1, [pc, #220]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aae:	e03a      	b.n	8006b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d020      	beq.n	8006afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab8:	4b34      	ldr	r3, [pc, #208]	; (8006b8c <HAL_RCC_OscConfig+0x278>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fd fd39 	bl	8004534 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ac6:	f7fd fd35 	bl	8004534 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e1b4      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae4:	4b28      	ldr	r3, [pc, #160]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4925      	ldr	r1, [pc, #148]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]
 8006af8:	e015      	b.n	8006b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006afa:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <HAL_RCC_OscConfig+0x278>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fd fd18 	bl	8004534 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fd fd14 	bl	8004534 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e193      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b1a:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d036      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d016      	beq.n	8006b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <HAL_RCC_OscConfig+0x27c>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fd fcf8 	bl	8004534 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b48:	f7fd fcf4 	bl	8004534 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e173      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_OscConfig+0x274>)
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x234>
 8006b66:	e01b      	b.n	8006ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_OscConfig+0x27c>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fd fce1 	bl	8004534 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b74:	e00e      	b.n	8006b94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b76:	f7fd fcdd 	bl	8004534 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d907      	bls.n	8006b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e15c      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	42470000 	.word	0x42470000
 8006b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b94:	4b8a      	ldr	r3, [pc, #552]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1ea      	bne.n	8006b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8097 	beq.w	8006cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb2:	4b83      	ldr	r3, [pc, #524]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10f      	bne.n	8006bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	4a7e      	ldr	r2, [pc, #504]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bce:	4b7c      	ldr	r3, [pc, #496]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	60bb      	str	r3, [r7, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bde:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <HAL_RCC_OscConfig+0x4b0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d118      	bne.n	8006c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bea:	4b76      	ldr	r3, [pc, #472]	; (8006dc4 <HAL_RCC_OscConfig+0x4b0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a75      	ldr	r2, [pc, #468]	; (8006dc4 <HAL_RCC_OscConfig+0x4b0>)
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf6:	f7fd fc9d 	bl	8004534 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fd fc99 	bl	8004534 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e118      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c10:	4b6c      	ldr	r3, [pc, #432]	; (8006dc4 <HAL_RCC_OscConfig+0x4b0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d106      	bne.n	8006c32 <HAL_RCC_OscConfig+0x31e>
 8006c24:	4b66      	ldr	r3, [pc, #408]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c30:	e01c      	b.n	8006c6c <HAL_RCC_OscConfig+0x358>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0x340>
 8006c3a:	4b61      	ldr	r3, [pc, #388]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	4a60      	ldr	r2, [pc, #384]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	6713      	str	r3, [r2, #112]	; 0x70
 8006c46:	4b5e      	ldr	r3, [pc, #376]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a5d      	ldr	r2, [pc, #372]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
 8006c52:	e00b      	b.n	8006c6c <HAL_RCC_OscConfig+0x358>
 8006c54:	4b5a      	ldr	r3, [pc, #360]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	4a59      	ldr	r2, [pc, #356]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c60:	4b57      	ldr	r3, [pc, #348]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a56      	ldr	r2, [pc, #344]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c66:	f023 0304 	bic.w	r3, r3, #4
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d015      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c74:	f7fd fc5e 	bl	8004534 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c7a:	e00a      	b.n	8006c92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c7c:	f7fd fc5a 	bl	8004534 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e0d7      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c92:	4b4b      	ldr	r3, [pc, #300]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ee      	beq.n	8006c7c <HAL_RCC_OscConfig+0x368>
 8006c9e:	e014      	b.n	8006cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fd fc48 	bl	8004534 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca8:	f7fd fc44 	bl	8004534 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e0c1      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cbe:	4b40      	ldr	r3, [pc, #256]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ee      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd0:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	4a3a      	ldr	r2, [pc, #232]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 80ad 	beq.w	8006e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d060      	beq.n	8006db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d145      	bne.n	8006d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfa:	4b33      	ldr	r3, [pc, #204]	; (8006dc8 <HAL_RCC_OscConfig+0x4b4>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fd fc18 	bl	8004534 <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d08:	f7fd fc14 	bl	8004534 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e093      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	019b      	lsls	r3, r3, #6
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	085b      	lsrs	r3, r3, #1
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	071b      	lsls	r3, r3, #28
 8006d52:	491b      	ldr	r1, [pc, #108]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d58:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <HAL_RCC_OscConfig+0x4b4>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5e:	f7fd fbe9 	bl	8004534 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d66:	f7fd fbe5 	bl	8004534 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e064      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x452>
 8006d84:	e05c      	b.n	8006e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d86:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <HAL_RCC_OscConfig+0x4b4>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fd fbd2 	bl	8004534 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d94:	f7fd fbce 	bl	8004534 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e04d      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <HAL_RCC_OscConfig+0x4ac>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x480>
 8006db2:	e045      	b.n	8006e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d107      	bne.n	8006dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e040      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dcc:	4b1f      	ldr	r3, [pc, #124]	; (8006e4c <HAL_RCC_OscConfig+0x538>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d030      	beq.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d129      	bne.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d122      	bne.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d119      	bne.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	085b      	lsrs	r3, r3, #1
 8006e14:	3b01      	subs	r3, #1
 8006e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d10f      	bne.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800

08006e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e07b      	b.n	8006f5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d108      	bne.n	8006e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e72:	d009      	beq.n	8006e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	61da      	str	r2, [r3, #28]
 8006e7a:	e005      	b.n	8006e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fc fd48 	bl	8003938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	ea42 0103 	orr.w	r1, r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f003 0104 	and.w	r1, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 0210 	and.w	r2, r3, #16
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e041      	b.n	8006ff8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fc fe27 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f000 fcdb 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d001      	beq.n	8007018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e04e      	b.n	80070b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d022      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d01d      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d018      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIM_Base_Start_IT+0x80>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIM_Base_Start_IT+0xdc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d111      	bne.n	80070a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b06      	cmp	r3, #6
 8007090:	d010      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	e007      	b.n	80070b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40001800 	.word	0x40001800

080070e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e041      	b.n	8007176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fc fcb4 	bl	8003a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fc1c 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <HAL_TIM_PWM_Start+0x24>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	e022      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d109      	bne.n	80071be <HAL_TIM_PWM_Start+0x3e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	e015      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d109      	bne.n	80071d8 <HAL_TIM_PWM_Start+0x58>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	bf14      	ite	ne
 80071d0:	2301      	movne	r3, #1
 80071d2:	2300      	moveq	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	e008      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07c      	b.n	80072ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_PWM_Start+0x82>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007200:	e013      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b04      	cmp	r3, #4
 8007206:	d104      	bne.n	8007212 <HAL_TIM_PWM_Start+0x92>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007210:	e00b      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0xa2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007220:	e003      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2201      	movs	r2, #1
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fde2 	bl	8007dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <HAL_TIM_PWM_Start+0x174>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d004      	beq.n	800724c <HAL_TIM_PWM_Start+0xcc>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <HAL_TIM_PWM_Start+0x178>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d101      	bne.n	8007250 <HAL_TIM_PWM_Start+0xd0>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <HAL_TIM_PWM_Start+0xd2>
 8007250:	2300      	movs	r3, #0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <HAL_TIM_PWM_Start+0x174>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d01d      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_TIM_PWM_Start+0x17c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <HAL_TIM_PWM_Start+0x180>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <HAL_TIM_PWM_Start+0x184>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_TIM_PWM_Start+0x178>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a18      	ldr	r2, [pc, #96]	; (8007308 <HAL_TIM_PWM_Start+0x188>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a16      	ldr	r2, [pc, #88]	; (800730c <HAL_TIM_PWM_Start+0x18c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d010      	beq.n	80072ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d8:	e007      	b.n	80072ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40014000 	.word	0x40014000
 800730c:	40001800 	.word	0x40001800

08007310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e097      	b.n	8007454 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fc fbd1 	bl	8003ae0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007354:	f023 0307 	bic.w	r3, r3, #7
 8007358:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f000 faf9 	bl	800795c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	4313      	orrs	r3, r2
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073b0:	f023 030c 	bic.w	r3, r3, #12
 80073b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	4313      	orrs	r3, r2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	031b      	lsls	r3, r3, #12
 80073e0:	4313      	orrs	r3, r2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80073f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	4313      	orrs	r3, r2
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800746c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007474:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800747c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007484:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d110      	bne.n	80074ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d102      	bne.n	8007498 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007492:	7b7b      	ldrb	r3, [r7, #13]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d001      	beq.n	800749c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e069      	b.n	8007570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074ac:	e031      	b.n	8007512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d110      	bne.n	80074d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d102      	bne.n	80074c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ba:	7b3b      	ldrb	r3, [r7, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d001      	beq.n	80074c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e055      	b.n	8007570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d4:	e01d      	b.n	8007512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d108      	bne.n	80074ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e2:	7b7b      	ldrb	r3, [r7, #13]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d102      	bne.n	80074ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074e8:	7b3b      	ldrb	r3, [r7, #12]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d001      	beq.n	80074f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e03e      	b.n	8007570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_TIM_Encoder_Start+0xc4>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d008      	beq.n	8007530 <HAL_TIM_Encoder_Start+0xd4>
 800751e:	e00f      	b.n	8007540 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2201      	movs	r2, #1
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fc67 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 800752e:	e016      	b.n	800755e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	2104      	movs	r1, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fc5f 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 800753e:	e00e      	b.n	800755e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2201      	movs	r2, #1
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fc57 	bl	8007dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	2104      	movs	r1, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fc50 	bl	8007dfc <TIM_CCxChannelCmd>
      break;
 800755c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b02      	cmp	r3, #2
 800758c:	d122      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d11b      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0202 	mvn.w	r2, #2
 80075a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9b0 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9a2 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f9b3 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d122      	bne.n	8007628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d11b      	bne.n	8007628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0204 	mvn.w	r2, #4
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f986 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f978 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f989 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b08      	cmp	r3, #8
 8007634:	d122      	bne.n	800767c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b08      	cmp	r3, #8
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0208 	mvn.w	r2, #8
 800764c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2204      	movs	r2, #4
 8007652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f95c 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 8007668:	e005      	b.n	8007676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f94e 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f95f 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b10      	cmp	r3, #16
 8007688:	d122      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b10      	cmp	r3, #16
 8007696:	d11b      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0210 	mvn.w	r2, #16
 80076a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2208      	movs	r2, #8
 80076a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f932 	bl	8007920 <HAL_TIM_IC_CaptureCallback>
 80076bc:	e005      	b.n	80076ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f924 	bl	800790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f935 	bl	8007934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10e      	bne.n	80076fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d107      	bne.n	80076fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0201 	mvn.w	r2, #1
 80076f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fc fd7c 	bl	80041f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	2b80      	cmp	r3, #128	; 0x80
 8007708:	d10e      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d107      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc68 	bl	8007ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d107      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8fa 	bl	8007948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b20      	cmp	r3, #32
 8007760:	d10e      	bne.n	8007780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b20      	cmp	r3, #32
 800776e:	d107      	bne.n	8007780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0220 	mvn.w	r2, #32
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fc32 	bl	8007fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0ae      	b.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b0c      	cmp	r3, #12
 80077b2:	f200 809f 	bhi.w	80078f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077f1 	.word	0x080077f1
 80077c0:	080078f5 	.word	0x080078f5
 80077c4:	080078f5 	.word	0x080078f5
 80077c8:	080078f5 	.word	0x080078f5
 80077cc:	08007831 	.word	0x08007831
 80077d0:	080078f5 	.word	0x080078f5
 80077d4:	080078f5 	.word	0x080078f5
 80077d8:	080078f5 	.word	0x080078f5
 80077dc:	08007873 	.word	0x08007873
 80077e0:	080078f5 	.word	0x080078f5
 80077e4:	080078f5 	.word	0x080078f5
 80077e8:	080078f5 	.word	0x080078f5
 80077ec:	080078b3 	.word	0x080078b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 f950 	bl	8007a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0208 	orr.w	r2, r2, #8
 800780a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0204 	bic.w	r2, r2, #4
 800781a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6999      	ldr	r1, [r3, #24]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	619a      	str	r2, [r3, #24]
      break;
 800782e:	e064      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f9a0 	bl	8007b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6999      	ldr	r1, [r3, #24]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	021a      	lsls	r2, r3, #8
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	619a      	str	r2, [r3, #24]
      break;
 8007870:	e043      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f9f5 	bl	8007c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0208 	orr.w	r2, r2, #8
 800788c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0204 	bic.w	r2, r2, #4
 800789c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69d9      	ldr	r1, [r3, #28]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	61da      	str	r2, [r3, #28]
      break;
 80078b0:	e023      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fa49 	bl	8007d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69d9      	ldr	r1, [r3, #28]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	021a      	lsls	r2, r3, #8
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	61da      	str	r2, [r3, #28]
      break;
 80078f2:	e002      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	75fb      	strb	r3, [r7, #23]
      break;
 80078f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a40      	ldr	r2, [pc, #256]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d00f      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a3d      	ldr	r2, [pc, #244]	; (8007a74 <TIM_Base_SetConfig+0x118>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00b      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3c      	ldr	r2, [pc, #240]	; (8007a78 <TIM_Base_SetConfig+0x11c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d007      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3b      	ldr	r2, [pc, #236]	; (8007a7c <TIM_Base_SetConfig+0x120>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3a      	ldr	r2, [pc, #232]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d108      	bne.n	80079ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2f      	ldr	r2, [pc, #188]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d02b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d027      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2c      	ldr	r2, [pc, #176]	; (8007a74 <TIM_Base_SetConfig+0x118>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d023      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2b      	ldr	r2, [pc, #172]	; (8007a78 <TIM_Base_SetConfig+0x11c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01f      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <TIM_Base_SetConfig+0x120>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a29      	ldr	r2, [pc, #164]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d017      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a28      	ldr	r2, [pc, #160]	; (8007a84 <TIM_Base_SetConfig+0x128>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a27      	ldr	r2, [pc, #156]	; (8007a88 <TIM_Base_SetConfig+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00f      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <TIM_Base_SetConfig+0x130>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <TIM_Base_SetConfig+0x134>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <TIM_Base_SetConfig+0x138>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d003      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a23      	ldr	r2, [pc, #140]	; (8007a98 <TIM_Base_SetConfig+0x13c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d108      	bne.n	8007a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_Base_SetConfig+0xf8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a0c      	ldr	r2, [pc, #48]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d103      	bne.n	8007a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	615a      	str	r2, [r3, #20]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40000400 	.word	0x40000400
 8007a78:	40000800 	.word	0x40000800
 8007a7c:	40000c00 	.word	0x40000c00
 8007a80:	40010400 	.word	0x40010400
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800
 8007a90:	40001800 	.word	0x40001800
 8007a94:	40001c00 	.word	0x40001c00
 8007a98:	40002000 	.word	0x40002000

08007a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f023 0302 	bic.w	r3, r3, #2
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a20      	ldr	r2, [pc, #128]	; (8007b74 <TIM_OC1_SetConfig+0xd8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC1_SetConfig+0x64>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <TIM_OC1_SetConfig+0xdc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d10c      	bne.n	8007b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f023 0308 	bic.w	r3, r3, #8
 8007b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f023 0304 	bic.w	r3, r3, #4
 8007b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <TIM_OC1_SetConfig+0xd8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC1_SetConfig+0x8e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <TIM_OC1_SetConfig+0xdc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d111      	bne.n	8007b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	621a      	str	r2, [r3, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0210 	bic.w	r2, r3, #16
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0320 	bic.w	r3, r3, #32
 8007bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <TIM_OC2_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC2_SetConfig+0x68>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d10d      	bne.n	8007c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <TIM_OC2_SetConfig+0xe4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC2_SetConfig+0x94>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a16      	ldr	r2, [pc, #88]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d113      	bne.n	8007c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <TIM_OC3_SetConfig+0xe0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC3_SetConfig+0x66>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <TIM_OC3_SetConfig+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d10d      	bne.n	8007cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <TIM_OC3_SetConfig+0xe0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC3_SetConfig+0x92>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a15      	ldr	r2, [pc, #84]	; (8007d4c <TIM_OC3_SetConfig+0xe4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d113      	bne.n	8007d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	621a      	str	r2, [r3, #32]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400

08007d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	031b      	lsls	r3, r3, #12
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a12      	ldr	r2, [pc, #72]	; (8007df4 <TIM_OC4_SetConfig+0xa4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d003      	beq.n	8007db8 <TIM_OC4_SetConfig+0x68>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a11      	ldr	r2, [pc, #68]	; (8007df8 <TIM_OC4_SetConfig+0xa8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d109      	bne.n	8007dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	019b      	lsls	r3, r3, #6
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40010400 	.word	0x40010400

08007dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	2201      	movs	r2, #1
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1a      	ldr	r2, [r3, #32]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	401a      	ands	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1a      	ldr	r2, [r3, #32]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	621a      	str	r2, [r3, #32]
}
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e05a      	b.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d022      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d01d      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d018      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1a      	ldr	r2, [pc, #104]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d009      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10c      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40000800 	.word	0x40000800
 8007f30:	40000c00 	.word	0x40000c00
 8007f34:	40010400 	.word	0x40010400
 8007f38:	40014000 	.word	0x40014000
 8007f3c:	40001800 	.word	0x40001800

08007f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e03d      	b.n	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e03f      	b.n	800809e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fb fe5a 	bl	8003cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2224      	movs	r2, #36	; 0x24
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800804e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f829 	bl	80080a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ac:	b0c0      	sub	sp, #256	; 0x100
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	68d9      	ldr	r1, [r3, #12]
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	ea40 0301 	orr.w	r3, r0, r1
 80080d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	431a      	orrs	r2, r3
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008100:	f021 010c 	bic.w	r1, r1, #12
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800810e:	430b      	orrs	r3, r1
 8008110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008122:	6999      	ldr	r1, [r3, #24]
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	ea40 0301 	orr.w	r3, r0, r1
 800812e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b8f      	ldr	r3, [pc, #572]	; (8008374 <UART_SetConfig+0x2cc>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d005      	beq.n	8008148 <UART_SetConfig+0xa0>
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b8d      	ldr	r3, [pc, #564]	; (8008378 <UART_SetConfig+0x2d0>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d104      	bne.n	8008152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008148:	f7fe fa26 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800814c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008150:	e003      	b.n	800815a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008152:	f7fe fa0d 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8008156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	f040 810c 	bne.w	8008380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816c:	2200      	movs	r2, #0
 800816e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	1891      	adds	r1, r2, r2
 8008180:	65b9      	str	r1, [r7, #88]	; 0x58
 8008182:	415b      	adcs	r3, r3
 8008184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818a:	4621      	mov	r1, r4
 800818c:	eb12 0801 	adds.w	r8, r2, r1
 8008190:	4629      	mov	r1, r5
 8008192:	eb43 0901 	adc.w	r9, r3, r1
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081aa:	4690      	mov	r8, r2
 80081ac:	4699      	mov	r9, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	eb18 0303 	adds.w	r3, r8, r3
 80081b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081b8:	462b      	mov	r3, r5
 80081ba:	eb49 0303 	adc.w	r3, r9, r3
 80081be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081d6:	460b      	mov	r3, r1
 80081d8:	18db      	adds	r3, r3, r3
 80081da:	653b      	str	r3, [r7, #80]	; 0x50
 80081dc:	4613      	mov	r3, r2
 80081de:	eb42 0303 	adc.w	r3, r2, r3
 80081e2:	657b      	str	r3, [r7, #84]	; 0x54
 80081e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081ec:	f7f8 fd6c 	bl	8000cc8 <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <UART_SetConfig+0x2d4>)
 80081f6:	fba3 2302 	umull	r2, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	011c      	lsls	r4, r3, #4
 80081fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008202:	2200      	movs	r2, #0
 8008204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800820c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008210:	4642      	mov	r2, r8
 8008212:	464b      	mov	r3, r9
 8008214:	1891      	adds	r1, r2, r2
 8008216:	64b9      	str	r1, [r7, #72]	; 0x48
 8008218:	415b      	adcs	r3, r3
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008220:	4641      	mov	r1, r8
 8008222:	eb12 0a01 	adds.w	sl, r2, r1
 8008226:	4649      	mov	r1, r9
 8008228:	eb43 0b01 	adc.w	fp, r3, r1
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800823c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008240:	4692      	mov	sl, r2
 8008242:	469b      	mov	fp, r3
 8008244:	4643      	mov	r3, r8
 8008246:	eb1a 0303 	adds.w	r3, sl, r3
 800824a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800824e:	464b      	mov	r3, r9
 8008250:	eb4b 0303 	adc.w	r3, fp, r3
 8008254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800826c:	460b      	mov	r3, r1
 800826e:	18db      	adds	r3, r3, r3
 8008270:	643b      	str	r3, [r7, #64]	; 0x40
 8008272:	4613      	mov	r3, r2
 8008274:	eb42 0303 	adc.w	r3, r2, r3
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
 800827a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800827e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008282:	f7f8 fd21 	bl	8000cc8 <__aeabi_uldivmod>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4611      	mov	r1, r2
 800828c:	4b3b      	ldr	r3, [pc, #236]	; (800837c <UART_SetConfig+0x2d4>)
 800828e:	fba3 2301 	umull	r2, r3, r3, r1
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2264      	movs	r2, #100	; 0x64
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	1acb      	subs	r3, r1, r3
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082a2:	4b36      	ldr	r3, [pc, #216]	; (800837c <UART_SetConfig+0x2d4>)
 80082a4:	fba3 2302 	umull	r2, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082b0:	441c      	add	r4, r3
 80082b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	1891      	adds	r1, r2, r2
 80082ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80082cc:	415b      	adcs	r3, r3
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082d4:	4641      	mov	r1, r8
 80082d6:	1851      	adds	r1, r2, r1
 80082d8:	6339      	str	r1, [r7, #48]	; 0x30
 80082da:	4649      	mov	r1, r9
 80082dc:	414b      	adcs	r3, r1
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082ec:	4659      	mov	r1, fp
 80082ee:	00cb      	lsls	r3, r1, #3
 80082f0:	4651      	mov	r1, sl
 80082f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082f6:	4651      	mov	r1, sl
 80082f8:	00ca      	lsls	r2, r1, #3
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	4642      	mov	r2, r8
 8008302:	189b      	adds	r3, r3, r2
 8008304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008308:	464b      	mov	r3, r9
 800830a:	460a      	mov	r2, r1
 800830c:	eb42 0303 	adc.w	r3, r2, r3
 8008310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008328:	460b      	mov	r3, r1
 800832a:	18db      	adds	r3, r3, r3
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
 800832e:	4613      	mov	r3, r2
 8008330:	eb42 0303 	adc.w	r3, r2, r3
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800833e:	f7f8 fcc3 	bl	8000cc8 <__aeabi_uldivmod>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <UART_SetConfig+0x2d4>)
 8008348:	fba3 1302 	umull	r1, r3, r3, r2
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	2164      	movs	r1, #100	; 0x64
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	3332      	adds	r3, #50	; 0x32
 800835a:	4a08      	ldr	r2, [pc, #32]	; (800837c <UART_SetConfig+0x2d4>)
 800835c:	fba2 2303 	umull	r2, r3, r2, r3
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	f003 0207 	and.w	r2, r3, #7
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4422      	add	r2, r4
 800836e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008370:	e105      	b.n	800857e <UART_SetConfig+0x4d6>
 8008372:	bf00      	nop
 8008374:	40011000 	.word	0x40011000
 8008378:	40011400 	.word	0x40011400
 800837c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800838a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800838e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	1891      	adds	r1, r2, r2
 8008398:	6239      	str	r1, [r7, #32]
 800839a:	415b      	adcs	r3, r3
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a2:	4641      	mov	r1, r8
 80083a4:	1854      	adds	r4, r2, r1
 80083a6:	4649      	mov	r1, r9
 80083a8:	eb43 0501 	adc.w	r5, r3, r1
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	00eb      	lsls	r3, r5, #3
 80083b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ba:	00e2      	lsls	r2, r4, #3
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	18e3      	adds	r3, r4, r3
 80083c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083c8:	464b      	mov	r3, r9
 80083ca:	eb45 0303 	adc.w	r3, r5, r3
 80083ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083ee:	4629      	mov	r1, r5
 80083f0:	008b      	lsls	r3, r1, #2
 80083f2:	4621      	mov	r1, r4
 80083f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083f8:	4621      	mov	r1, r4
 80083fa:	008a      	lsls	r2, r1, #2
 80083fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008400:	f7f8 fc62 	bl	8000cc8 <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4b60      	ldr	r3, [pc, #384]	; (800858c <UART_SetConfig+0x4e4>)
 800840a:	fba3 2302 	umull	r2, r3, r3, r2
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	011c      	lsls	r4, r3, #4
 8008412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008416:	2200      	movs	r2, #0
 8008418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800841c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	1891      	adds	r1, r2, r2
 800842a:	61b9      	str	r1, [r7, #24]
 800842c:	415b      	adcs	r3, r3
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008434:	4641      	mov	r1, r8
 8008436:	1851      	adds	r1, r2, r1
 8008438:	6139      	str	r1, [r7, #16]
 800843a:	4649      	mov	r1, r9
 800843c:	414b      	adcs	r3, r1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800844c:	4659      	mov	r1, fp
 800844e:	00cb      	lsls	r3, r1, #3
 8008450:	4651      	mov	r1, sl
 8008452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008456:	4651      	mov	r1, sl
 8008458:	00ca      	lsls	r2, r1, #3
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	4603      	mov	r3, r0
 8008460:	4642      	mov	r2, r8
 8008462:	189b      	adds	r3, r3, r2
 8008464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008468:	464b      	mov	r3, r9
 800846a:	460a      	mov	r2, r1
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	67bb      	str	r3, [r7, #120]	; 0x78
 800847e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800848c:	4649      	mov	r1, r9
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	4641      	mov	r1, r8
 8008492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008496:	4641      	mov	r1, r8
 8008498:	008a      	lsls	r2, r1, #2
 800849a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800849e:	f7f8 fc13 	bl	8000cc8 <__aeabi_uldivmod>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4b39      	ldr	r3, [pc, #228]	; (800858c <UART_SetConfig+0x4e4>)
 80084a8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	2164      	movs	r1, #100	; 0x64
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	3332      	adds	r3, #50	; 0x32
 80084ba:	4a34      	ldr	r2, [pc, #208]	; (800858c <UART_SetConfig+0x4e4>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c6:	441c      	add	r4, r3
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084cc:	2200      	movs	r2, #0
 80084ce:	673b      	str	r3, [r7, #112]	; 0x70
 80084d0:	677a      	str	r2, [r7, #116]	; 0x74
 80084d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	1891      	adds	r1, r2, r2
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	415b      	adcs	r3, r3
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e6:	4641      	mov	r1, r8
 80084e8:	1851      	adds	r1, r2, r1
 80084ea:	6039      	str	r1, [r7, #0]
 80084ec:	4649      	mov	r1, r9
 80084ee:	414b      	adcs	r3, r1
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084fe:	4659      	mov	r1, fp
 8008500:	00cb      	lsls	r3, r1, #3
 8008502:	4651      	mov	r1, sl
 8008504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008508:	4651      	mov	r1, sl
 800850a:	00ca      	lsls	r2, r1, #3
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	4603      	mov	r3, r0
 8008512:	4642      	mov	r2, r8
 8008514:	189b      	adds	r3, r3, r2
 8008516:	66bb      	str	r3, [r7, #104]	; 0x68
 8008518:	464b      	mov	r3, r9
 800851a:	460a      	mov	r2, r1
 800851c:	eb42 0303 	adc.w	r3, r2, r3
 8008520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	663b      	str	r3, [r7, #96]	; 0x60
 800852c:	667a      	str	r2, [r7, #100]	; 0x64
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800853a:	4649      	mov	r1, r9
 800853c:	008b      	lsls	r3, r1, #2
 800853e:	4641      	mov	r1, r8
 8008540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008544:	4641      	mov	r1, r8
 8008546:	008a      	lsls	r2, r1, #2
 8008548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800854c:	f7f8 fbbc 	bl	8000cc8 <__aeabi_uldivmod>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4b0d      	ldr	r3, [pc, #52]	; (800858c <UART_SetConfig+0x4e4>)
 8008556:	fba3 1302 	umull	r1, r3, r3, r2
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	2164      	movs	r1, #100	; 0x64
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	3332      	adds	r3, #50	; 0x32
 8008568:	4a08      	ldr	r2, [pc, #32]	; (800858c <UART_SetConfig+0x4e4>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4422      	add	r2, r4
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	bf00      	nop
 8008580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008584:	46bd      	mov	sp, r7
 8008586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800858a:	bf00      	nop
 800858c:	51eb851f 	.word	0x51eb851f

08008590 <__errno>:
 8008590:	4b01      	ldr	r3, [pc, #4]	; (8008598 <__errno+0x8>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000028 	.word	0x20000028

0800859c <__libc_init_array>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4d0d      	ldr	r5, [pc, #52]	; (80085d4 <__libc_init_array+0x38>)
 80085a0:	4c0d      	ldr	r4, [pc, #52]	; (80085d8 <__libc_init_array+0x3c>)
 80085a2:	1b64      	subs	r4, r4, r5
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	2600      	movs	r6, #0
 80085a8:	42a6      	cmp	r6, r4
 80085aa:	d109      	bne.n	80085c0 <__libc_init_array+0x24>
 80085ac:	4d0b      	ldr	r5, [pc, #44]	; (80085dc <__libc_init_array+0x40>)
 80085ae:	4c0c      	ldr	r4, [pc, #48]	; (80085e0 <__libc_init_array+0x44>)
 80085b0:	f004 ffe4 	bl	800d57c <_init>
 80085b4:	1b64      	subs	r4, r4, r5
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	2600      	movs	r6, #0
 80085ba:	42a6      	cmp	r6, r4
 80085bc:	d105      	bne.n	80085ca <__libc_init_array+0x2e>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c4:	4798      	blx	r3
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7ee      	b.n	80085a8 <__libc_init_array+0xc>
 80085ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ce:	4798      	blx	r3
 80085d0:	3601      	adds	r6, #1
 80085d2:	e7f2      	b.n	80085ba <__libc_init_array+0x1e>
 80085d4:	0800dc58 	.word	0x0800dc58
 80085d8:	0800dc58 	.word	0x0800dc58
 80085dc:	0800dc58 	.word	0x0800dc58
 80085e0:	0800dc5c 	.word	0x0800dc5c

080085e4 <memset>:
 80085e4:	4402      	add	r2, r0
 80085e6:	4603      	mov	r3, r0
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d100      	bne.n	80085ee <memset+0xa>
 80085ec:	4770      	bx	lr
 80085ee:	f803 1b01 	strb.w	r1, [r3], #1
 80085f2:	e7f9      	b.n	80085e8 <memset+0x4>

080085f4 <__cvt>:
 80085f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	ec55 4b10 	vmov	r4, r5, d0
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	460e      	mov	r6, r1
 8008600:	4619      	mov	r1, r3
 8008602:	462b      	mov	r3, r5
 8008604:	bfbb      	ittet	lt
 8008606:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800860a:	461d      	movlt	r5, r3
 800860c:	2300      	movge	r3, #0
 800860e:	232d      	movlt	r3, #45	; 0x2d
 8008610:	700b      	strb	r3, [r1, #0]
 8008612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008618:	4691      	mov	r9, r2
 800861a:	f023 0820 	bic.w	r8, r3, #32
 800861e:	bfbc      	itt	lt
 8008620:	4622      	movlt	r2, r4
 8008622:	4614      	movlt	r4, r2
 8008624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008628:	d005      	beq.n	8008636 <__cvt+0x42>
 800862a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800862e:	d100      	bne.n	8008632 <__cvt+0x3e>
 8008630:	3601      	adds	r6, #1
 8008632:	2102      	movs	r1, #2
 8008634:	e000      	b.n	8008638 <__cvt+0x44>
 8008636:	2103      	movs	r1, #3
 8008638:	ab03      	add	r3, sp, #12
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	ab02      	add	r3, sp, #8
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	ec45 4b10 	vmov	d0, r4, r5
 8008644:	4653      	mov	r3, sl
 8008646:	4632      	mov	r2, r6
 8008648:	f002 f816 	bl	800a678 <_dtoa_r>
 800864c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008650:	4607      	mov	r7, r0
 8008652:	d102      	bne.n	800865a <__cvt+0x66>
 8008654:	f019 0f01 	tst.w	r9, #1
 8008658:	d022      	beq.n	80086a0 <__cvt+0xac>
 800865a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800865e:	eb07 0906 	add.w	r9, r7, r6
 8008662:	d110      	bne.n	8008686 <__cvt+0x92>
 8008664:	783b      	ldrb	r3, [r7, #0]
 8008666:	2b30      	cmp	r3, #48	; 0x30
 8008668:	d10a      	bne.n	8008680 <__cvt+0x8c>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8008676:	b918      	cbnz	r0, 8008680 <__cvt+0x8c>
 8008678:	f1c6 0601 	rsb	r6, r6, #1
 800867c:	f8ca 6000 	str.w	r6, [sl]
 8008680:	f8da 3000 	ldr.w	r3, [sl]
 8008684:	4499      	add	r9, r3
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f8 fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 8008692:	b108      	cbz	r0, 8008698 <__cvt+0xa4>
 8008694:	f8cd 900c 	str.w	r9, [sp, #12]
 8008698:	2230      	movs	r2, #48	; 0x30
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	454b      	cmp	r3, r9
 800869e:	d307      	bcc.n	80086b0 <__cvt+0xbc>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086a4:	1bdb      	subs	r3, r3, r7
 80086a6:	4638      	mov	r0, r7
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	b004      	add	sp, #16
 80086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b0:	1c59      	adds	r1, r3, #1
 80086b2:	9103      	str	r1, [sp, #12]
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e7f0      	b.n	800869a <__cvt+0xa6>

080086b8 <__exponent>:
 80086b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ba:	4603      	mov	r3, r0
 80086bc:	2900      	cmp	r1, #0
 80086be:	bfb8      	it	lt
 80086c0:	4249      	neglt	r1, r1
 80086c2:	f803 2b02 	strb.w	r2, [r3], #2
 80086c6:	bfb4      	ite	lt
 80086c8:	222d      	movlt	r2, #45	; 0x2d
 80086ca:	222b      	movge	r2, #43	; 0x2b
 80086cc:	2909      	cmp	r1, #9
 80086ce:	7042      	strb	r2, [r0, #1]
 80086d0:	dd2a      	ble.n	8008728 <__exponent+0x70>
 80086d2:	f10d 0407 	add.w	r4, sp, #7
 80086d6:	46a4      	mov	ip, r4
 80086d8:	270a      	movs	r7, #10
 80086da:	46a6      	mov	lr, r4
 80086dc:	460a      	mov	r2, r1
 80086de:	fb91 f6f7 	sdiv	r6, r1, r7
 80086e2:	fb07 1516 	mls	r5, r7, r6, r1
 80086e6:	3530      	adds	r5, #48	; 0x30
 80086e8:	2a63      	cmp	r2, #99	; 0x63
 80086ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80086ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086f2:	4631      	mov	r1, r6
 80086f4:	dcf1      	bgt.n	80086da <__exponent+0x22>
 80086f6:	3130      	adds	r1, #48	; 0x30
 80086f8:	f1ae 0502 	sub.w	r5, lr, #2
 80086fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008700:	1c44      	adds	r4, r0, #1
 8008702:	4629      	mov	r1, r5
 8008704:	4561      	cmp	r1, ip
 8008706:	d30a      	bcc.n	800871e <__exponent+0x66>
 8008708:	f10d 0209 	add.w	r2, sp, #9
 800870c:	eba2 020e 	sub.w	r2, r2, lr
 8008710:	4565      	cmp	r5, ip
 8008712:	bf88      	it	hi
 8008714:	2200      	movhi	r2, #0
 8008716:	4413      	add	r3, r2
 8008718:	1a18      	subs	r0, r3, r0
 800871a:	b003      	add	sp, #12
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008722:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008726:	e7ed      	b.n	8008704 <__exponent+0x4c>
 8008728:	2330      	movs	r3, #48	; 0x30
 800872a:	3130      	adds	r1, #48	; 0x30
 800872c:	7083      	strb	r3, [r0, #2]
 800872e:	70c1      	strb	r1, [r0, #3]
 8008730:	1d03      	adds	r3, r0, #4
 8008732:	e7f1      	b.n	8008718 <__exponent+0x60>

08008734 <_printf_float>:
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	ed2d 8b02 	vpush	{d8}
 800873c:	b08d      	sub	sp, #52	; 0x34
 800873e:	460c      	mov	r4, r1
 8008740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008744:	4616      	mov	r6, r2
 8008746:	461f      	mov	r7, r3
 8008748:	4605      	mov	r5, r0
 800874a:	f003 faa9 	bl	800bca0 <_localeconv_r>
 800874e:	f8d0 a000 	ldr.w	sl, [r0]
 8008752:	4650      	mov	r0, sl
 8008754:	f7f7 fd5c 	bl	8000210 <strlen>
 8008758:	2300      	movs	r3, #0
 800875a:	930a      	str	r3, [sp, #40]	; 0x28
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	f8d8 3000 	ldr.w	r3, [r8]
 8008764:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008768:	3307      	adds	r3, #7
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	f103 0208 	add.w	r2, r3, #8
 8008772:	f8c8 2000 	str.w	r2, [r8]
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800877e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	f8cd 8018 	str.w	r8, [sp, #24]
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	4b9f      	ldr	r3, [pc, #636]	; (8008a10 <_printf_float+0x2dc>)
 8008792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008796:	f04f 32ff 	mov.w	r2, #4294967295
 800879a:	f7f8 f9e7 	bl	8000b6c <__aeabi_dcmpun>
 800879e:	bb88      	cbnz	r0, 8008804 <_printf_float+0xd0>
 80087a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a4:	4b9a      	ldr	r3, [pc, #616]	; (8008a10 <_printf_float+0x2dc>)
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	f7f8 f9c1 	bl	8000b30 <__aeabi_dcmple>
 80087ae:	bb48      	cbnz	r0, 8008804 <_printf_float+0xd0>
 80087b0:	2200      	movs	r2, #0
 80087b2:	2300      	movs	r3, #0
 80087b4:	4640      	mov	r0, r8
 80087b6:	4649      	mov	r1, r9
 80087b8:	f7f8 f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80087bc:	b110      	cbz	r0, 80087c4 <_printf_float+0x90>
 80087be:	232d      	movs	r3, #45	; 0x2d
 80087c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c4:	4b93      	ldr	r3, [pc, #588]	; (8008a14 <_printf_float+0x2e0>)
 80087c6:	4894      	ldr	r0, [pc, #592]	; (8008a18 <_printf_float+0x2e4>)
 80087c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087cc:	bf94      	ite	ls
 80087ce:	4698      	movls	r8, r3
 80087d0:	4680      	movhi	r8, r0
 80087d2:	2303      	movs	r3, #3
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	f023 0204 	bic.w	r2, r3, #4
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	f04f 0900 	mov.w	r9, #0
 80087e2:	9700      	str	r7, [sp, #0]
 80087e4:	4633      	mov	r3, r6
 80087e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80087e8:	4621      	mov	r1, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 f9d8 	bl	8008ba0 <_printf_common>
 80087f0:	3001      	adds	r0, #1
 80087f2:	f040 8090 	bne.w	8008916 <_printf_float+0x1e2>
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	b00d      	add	sp, #52	; 0x34
 80087fc:	ecbd 8b02 	vpop	{d8}
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	4642      	mov	r2, r8
 8008806:	464b      	mov	r3, r9
 8008808:	4640      	mov	r0, r8
 800880a:	4649      	mov	r1, r9
 800880c:	f7f8 f9ae 	bl	8000b6c <__aeabi_dcmpun>
 8008810:	b140      	cbz	r0, 8008824 <_printf_float+0xf0>
 8008812:	464b      	mov	r3, r9
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfbc      	itt	lt
 8008818:	232d      	movlt	r3, #45	; 0x2d
 800881a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800881e:	487f      	ldr	r0, [pc, #508]	; (8008a1c <_printf_float+0x2e8>)
 8008820:	4b7f      	ldr	r3, [pc, #508]	; (8008a20 <_printf_float+0x2ec>)
 8008822:	e7d1      	b.n	80087c8 <_printf_float+0x94>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800882a:	9206      	str	r2, [sp, #24]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	d13f      	bne.n	80088b0 <_printf_float+0x17c>
 8008830:	2306      	movs	r3, #6
 8008832:	6063      	str	r3, [r4, #4]
 8008834:	9b05      	ldr	r3, [sp, #20]
 8008836:	6861      	ldr	r1, [r4, #4]
 8008838:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800883c:	2300      	movs	r3, #0
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	ab0a      	add	r3, sp, #40	; 0x28
 8008842:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008846:	ab09      	add	r3, sp, #36	; 0x24
 8008848:	ec49 8b10 	vmov	d0, r8, r9
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008854:	4628      	mov	r0, r5
 8008856:	f7ff fecd 	bl	80085f4 <__cvt>
 800885a:	9b06      	ldr	r3, [sp, #24]
 800885c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885e:	2b47      	cmp	r3, #71	; 0x47
 8008860:	4680      	mov	r8, r0
 8008862:	d108      	bne.n	8008876 <_printf_float+0x142>
 8008864:	1cc8      	adds	r0, r1, #3
 8008866:	db02      	blt.n	800886e <_printf_float+0x13a>
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	4299      	cmp	r1, r3
 800886c:	dd41      	ble.n	80088f2 <_printf_float+0x1be>
 800886e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008872:	fa5f fb8b 	uxtb.w	fp, fp
 8008876:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800887a:	d820      	bhi.n	80088be <_printf_float+0x18a>
 800887c:	3901      	subs	r1, #1
 800887e:	465a      	mov	r2, fp
 8008880:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008884:	9109      	str	r1, [sp, #36]	; 0x24
 8008886:	f7ff ff17 	bl	80086b8 <__exponent>
 800888a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888c:	1813      	adds	r3, r2, r0
 800888e:	2a01      	cmp	r2, #1
 8008890:	4681      	mov	r9, r0
 8008892:	6123      	str	r3, [r4, #16]
 8008894:	dc02      	bgt.n	800889c <_printf_float+0x168>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	07d2      	lsls	r2, r2, #31
 800889a:	d501      	bpl.n	80088a0 <_printf_float+0x16c>
 800889c:	3301      	adds	r3, #1
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d09c      	beq.n	80087e2 <_printf_float+0xae>
 80088a8:	232d      	movs	r3, #45	; 0x2d
 80088aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ae:	e798      	b.n	80087e2 <_printf_float+0xae>
 80088b0:	9a06      	ldr	r2, [sp, #24]
 80088b2:	2a47      	cmp	r2, #71	; 0x47
 80088b4:	d1be      	bne.n	8008834 <_printf_float+0x100>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1bc      	bne.n	8008834 <_printf_float+0x100>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e7b9      	b.n	8008832 <_printf_float+0xfe>
 80088be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088c2:	d118      	bne.n	80088f6 <_printf_float+0x1c2>
 80088c4:	2900      	cmp	r1, #0
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	dd0b      	ble.n	80088e2 <_printf_float+0x1ae>
 80088ca:	6121      	str	r1, [r4, #16]
 80088cc:	b913      	cbnz	r3, 80088d4 <_printf_float+0x1a0>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	07d0      	lsls	r0, r2, #31
 80088d2:	d502      	bpl.n	80088da <_printf_float+0x1a6>
 80088d4:	3301      	adds	r3, #1
 80088d6:	440b      	add	r3, r1
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	65a1      	str	r1, [r4, #88]	; 0x58
 80088dc:	f04f 0900 	mov.w	r9, #0
 80088e0:	e7de      	b.n	80088a0 <_printf_float+0x16c>
 80088e2:	b913      	cbnz	r3, 80088ea <_printf_float+0x1b6>
 80088e4:	6822      	ldr	r2, [r4, #0]
 80088e6:	07d2      	lsls	r2, r2, #31
 80088e8:	d501      	bpl.n	80088ee <_printf_float+0x1ba>
 80088ea:	3302      	adds	r3, #2
 80088ec:	e7f4      	b.n	80088d8 <_printf_float+0x1a4>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7f2      	b.n	80088d8 <_printf_float+0x1a4>
 80088f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f8:	4299      	cmp	r1, r3
 80088fa:	db05      	blt.n	8008908 <_printf_float+0x1d4>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	6121      	str	r1, [r4, #16]
 8008900:	07d8      	lsls	r0, r3, #31
 8008902:	d5ea      	bpl.n	80088da <_printf_float+0x1a6>
 8008904:	1c4b      	adds	r3, r1, #1
 8008906:	e7e7      	b.n	80088d8 <_printf_float+0x1a4>
 8008908:	2900      	cmp	r1, #0
 800890a:	bfd4      	ite	le
 800890c:	f1c1 0202 	rsble	r2, r1, #2
 8008910:	2201      	movgt	r2, #1
 8008912:	4413      	add	r3, r2
 8008914:	e7e0      	b.n	80088d8 <_printf_float+0x1a4>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	055a      	lsls	r2, r3, #21
 800891a:	d407      	bmi.n	800892c <_printf_float+0x1f8>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	4642      	mov	r2, r8
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	d12c      	bne.n	8008984 <_printf_float+0x250>
 800892a:	e764      	b.n	80087f6 <_printf_float+0xc2>
 800892c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008930:	f240 80e0 	bls.w	8008af4 <_printf_float+0x3c0>
 8008934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008938:	2200      	movs	r2, #0
 800893a:	2300      	movs	r3, #0
 800893c:	f7f8 f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 8008940:	2800      	cmp	r0, #0
 8008942:	d034      	beq.n	80089ae <_printf_float+0x27a>
 8008944:	4a37      	ldr	r2, [pc, #220]	; (8008a24 <_printf_float+0x2f0>)
 8008946:	2301      	movs	r3, #1
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	f43f af51 	beq.w	80087f6 <_printf_float+0xc2>
 8008954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008958:	429a      	cmp	r2, r3
 800895a:	db02      	blt.n	8008962 <_printf_float+0x22e>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	07d8      	lsls	r0, r3, #31
 8008960:	d510      	bpl.n	8008984 <_printf_float+0x250>
 8008962:	ee18 3a10 	vmov	r3, s16
 8008966:	4652      	mov	r2, sl
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af41 	beq.w	80087f6 <_printf_float+0xc2>
 8008974:	f04f 0800 	mov.w	r8, #0
 8008978:	f104 091a 	add.w	r9, r4, #26
 800897c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897e:	3b01      	subs	r3, #1
 8008980:	4543      	cmp	r3, r8
 8008982:	dc09      	bgt.n	8008998 <_printf_float+0x264>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	079b      	lsls	r3, r3, #30
 8008988:	f100 8105 	bmi.w	8008b96 <_printf_float+0x462>
 800898c:	68e0      	ldr	r0, [r4, #12]
 800898e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008990:	4298      	cmp	r0, r3
 8008992:	bfb8      	it	lt
 8008994:	4618      	movlt	r0, r3
 8008996:	e730      	b.n	80087fa <_printf_float+0xc6>
 8008998:	2301      	movs	r3, #1
 800899a:	464a      	mov	r2, r9
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f af27 	beq.w	80087f6 <_printf_float+0xc2>
 80089a8:	f108 0801 	add.w	r8, r8, #1
 80089ac:	e7e6      	b.n	800897c <_printf_float+0x248>
 80089ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dc39      	bgt.n	8008a28 <_printf_float+0x2f4>
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <_printf_float+0x2f0>)
 80089b6:	2301      	movs	r3, #1
 80089b8:	4631      	mov	r1, r6
 80089ba:	4628      	mov	r0, r5
 80089bc:	47b8      	blx	r7
 80089be:	3001      	adds	r0, #1
 80089c0:	f43f af19 	beq.w	80087f6 <_printf_float+0xc2>
 80089c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c8:	4313      	orrs	r3, r2
 80089ca:	d102      	bne.n	80089d2 <_printf_float+0x29e>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d5d8      	bpl.n	8008984 <_printf_float+0x250>
 80089d2:	ee18 3a10 	vmov	r3, s16
 80089d6:	4652      	mov	r2, sl
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f af09 	beq.w	80087f6 <_printf_float+0xc2>
 80089e4:	f04f 0900 	mov.w	r9, #0
 80089e8:	f104 0a1a 	add.w	sl, r4, #26
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	425b      	negs	r3, r3
 80089f0:	454b      	cmp	r3, r9
 80089f2:	dc01      	bgt.n	80089f8 <_printf_float+0x2c4>
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	e792      	b.n	800891e <_printf_float+0x1ea>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4652      	mov	r2, sl
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f aef7 	beq.w	80087f6 <_printf_float+0xc2>
 8008a08:	f109 0901 	add.w	r9, r9, #1
 8008a0c:	e7ee      	b.n	80089ec <_printf_float+0x2b8>
 8008a0e:	bf00      	nop
 8008a10:	7fefffff 	.word	0x7fefffff
 8008a14:	0800d764 	.word	0x0800d764
 8008a18:	0800d768 	.word	0x0800d768
 8008a1c:	0800d770 	.word	0x0800d770
 8008a20:	0800d76c 	.word	0x0800d76c
 8008a24:	0800d774 	.word	0x0800d774
 8008a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	bfa8      	it	ge
 8008a30:	461a      	movge	r2, r3
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	4691      	mov	r9, r2
 8008a36:	dc37      	bgt.n	8008aa8 <_printf_float+0x374>
 8008a38:	f04f 0b00 	mov.w	fp, #0
 8008a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a40:	f104 021a 	add.w	r2, r4, #26
 8008a44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	eba3 0309 	sub.w	r3, r3, r9
 8008a4c:	455b      	cmp	r3, fp
 8008a4e:	dc33      	bgt.n	8008ab8 <_printf_float+0x384>
 8008a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a54:	429a      	cmp	r2, r3
 8008a56:	db3b      	blt.n	8008ad0 <_printf_float+0x39c>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	07da      	lsls	r2, r3, #31
 8008a5c:	d438      	bmi.n	8008ad0 <_printf_float+0x39c>
 8008a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a60:	9a05      	ldr	r2, [sp, #20]
 8008a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a64:	1a9a      	subs	r2, r3, r2
 8008a66:	eba3 0901 	sub.w	r9, r3, r1
 8008a6a:	4591      	cmp	r9, r2
 8008a6c:	bfa8      	it	ge
 8008a6e:	4691      	movge	r9, r2
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	dc35      	bgt.n	8008ae2 <_printf_float+0x3ae>
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a7e:	f104 0a1a 	add.w	sl, r4, #26
 8008a82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	eba3 0309 	sub.w	r3, r3, r9
 8008a8c:	4543      	cmp	r3, r8
 8008a8e:	f77f af79 	ble.w	8008984 <_printf_float+0x250>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4652      	mov	r2, sl
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f43f aeaa 	beq.w	80087f6 <_printf_float+0xc2>
 8008aa2:	f108 0801 	add.w	r8, r8, #1
 8008aa6:	e7ec      	b.n	8008a82 <_printf_float+0x34e>
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4642      	mov	r2, r8
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d1c0      	bne.n	8008a38 <_printf_float+0x304>
 8008ab6:	e69e      	b.n	80087f6 <_printf_float+0xc2>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	9205      	str	r2, [sp, #20]
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f ae97 	beq.w	80087f6 <_printf_float+0xc2>
 8008ac8:	9a05      	ldr	r2, [sp, #20]
 8008aca:	f10b 0b01 	add.w	fp, fp, #1
 8008ace:	e7b9      	b.n	8008a44 <_printf_float+0x310>
 8008ad0:	ee18 3a10 	vmov	r3, s16
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	d1be      	bne.n	8008a5e <_printf_float+0x32a>
 8008ae0:	e689      	b.n	80087f6 <_printf_float+0xc2>
 8008ae2:	9a05      	ldr	r2, [sp, #20]
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	4442      	add	r2, r8
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	d1c1      	bne.n	8008a76 <_printf_float+0x342>
 8008af2:	e680      	b.n	80087f6 <_printf_float+0xc2>
 8008af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af6:	2a01      	cmp	r2, #1
 8008af8:	dc01      	bgt.n	8008afe <_printf_float+0x3ca>
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	d538      	bpl.n	8008b70 <_printf_float+0x43c>
 8008afe:	2301      	movs	r3, #1
 8008b00:	4642      	mov	r2, r8
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f ae74 	beq.w	80087f6 <_printf_float+0xc2>
 8008b0e:	ee18 3a10 	vmov	r3, s16
 8008b12:	4652      	mov	r2, sl
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f ae6b 	beq.w	80087f6 <_printf_float+0xc2>
 8008b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b24:	2200      	movs	r2, #0
 8008b26:	2300      	movs	r3, #0
 8008b28:	f7f7 ffee 	bl	8000b08 <__aeabi_dcmpeq>
 8008b2c:	b9d8      	cbnz	r0, 8008b66 <_printf_float+0x432>
 8008b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b30:	f108 0201 	add.w	r2, r8, #1
 8008b34:	3b01      	subs	r3, #1
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d10e      	bne.n	8008b5e <_printf_float+0x42a>
 8008b40:	e659      	b.n	80087f6 <_printf_float+0xc2>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4652      	mov	r2, sl
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f ae52 	beq.w	80087f6 <_printf_float+0xc2>
 8008b52:	f108 0801 	add.w	r8, r8, #1
 8008b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4543      	cmp	r3, r8
 8008b5c:	dcf1      	bgt.n	8008b42 <_printf_float+0x40e>
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b64:	e6dc      	b.n	8008920 <_printf_float+0x1ec>
 8008b66:	f04f 0800 	mov.w	r8, #0
 8008b6a:	f104 0a1a 	add.w	sl, r4, #26
 8008b6e:	e7f2      	b.n	8008b56 <_printf_float+0x422>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4642      	mov	r2, r8
 8008b74:	e7df      	b.n	8008b36 <_printf_float+0x402>
 8008b76:	2301      	movs	r3, #1
 8008b78:	464a      	mov	r2, r9
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	f43f ae38 	beq.w	80087f6 <_printf_float+0xc2>
 8008b86:	f108 0801 	add.w	r8, r8, #1
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b8e:	1a5b      	subs	r3, r3, r1
 8008b90:	4543      	cmp	r3, r8
 8008b92:	dcf0      	bgt.n	8008b76 <_printf_float+0x442>
 8008b94:	e6fa      	b.n	800898c <_printf_float+0x258>
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	f104 0919 	add.w	r9, r4, #25
 8008b9e:	e7f4      	b.n	8008b8a <_printf_float+0x456>

08008ba0 <_printf_common>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	688a      	ldr	r2, [r1, #8]
 8008baa:	690b      	ldr	r3, [r1, #16]
 8008bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	bfb8      	it	lt
 8008bb4:	4613      	movlt	r3, r2
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b10a      	cbz	r2, 8008bc6 <_printf_common+0x26>
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	0699      	lsls	r1, r3, #26
 8008bca:	bf42      	ittt	mi
 8008bcc:	6833      	ldrmi	r3, [r6, #0]
 8008bce:	3302      	addmi	r3, #2
 8008bd0:	6033      	strmi	r3, [r6, #0]
 8008bd2:	6825      	ldr	r5, [r4, #0]
 8008bd4:	f015 0506 	ands.w	r5, r5, #6
 8008bd8:	d106      	bne.n	8008be8 <_printf_common+0x48>
 8008bda:	f104 0a19 	add.w	sl, r4, #25
 8008bde:	68e3      	ldr	r3, [r4, #12]
 8008be0:	6832      	ldr	r2, [r6, #0]
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	42ab      	cmp	r3, r5
 8008be6:	dc26      	bgt.n	8008c36 <_printf_common+0x96>
 8008be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bec:	1e13      	subs	r3, r2, #0
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	0692      	lsls	r2, r2, #26
 8008bf6:	d42b      	bmi.n	8008c50 <_printf_common+0xb0>
 8008bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	3001      	adds	r0, #1
 8008c04:	d01e      	beq.n	8008c44 <_printf_common+0xa4>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	68e5      	ldr	r5, [r4, #12]
 8008c0a:	6832      	ldr	r2, [r6, #0]
 8008c0c:	f003 0306 	and.w	r3, r3, #6
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	bf08      	it	eq
 8008c14:	1aad      	subeq	r5, r5, r2
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	bf0c      	ite	eq
 8008c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c20:	2500      	movne	r5, #0
 8008c22:	4293      	cmp	r3, r2
 8008c24:	bfc4      	itt	gt
 8008c26:	1a9b      	subgt	r3, r3, r2
 8008c28:	18ed      	addgt	r5, r5, r3
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	341a      	adds	r4, #26
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	d11a      	bne.n	8008c68 <_printf_common+0xc8>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e008      	b.n	8008c48 <_printf_common+0xa8>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	47c0      	blx	r8
 8008c40:	3001      	adds	r0, #1
 8008c42:	d103      	bne.n	8008c4c <_printf_common+0xac>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	e7c6      	b.n	8008bde <_printf_common+0x3e>
 8008c50:	18e1      	adds	r1, r4, r3
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	2030      	movs	r0, #48	; 0x30
 8008c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c5a:	4422      	add	r2, r4
 8008c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c64:	3302      	adds	r3, #2
 8008c66:	e7c7      	b.n	8008bf8 <_printf_common+0x58>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	4638      	mov	r0, r7
 8008c70:	47c0      	blx	r8
 8008c72:	3001      	adds	r0, #1
 8008c74:	d0e6      	beq.n	8008c44 <_printf_common+0xa4>
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7d9      	b.n	8008c2e <_printf_common+0x8e>
	...

08008c7c <_printf_i>:
 8008c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	7e0f      	ldrb	r7, [r1, #24]
 8008c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c84:	2f78      	cmp	r7, #120	; 0x78
 8008c86:	4691      	mov	r9, r2
 8008c88:	4680      	mov	r8, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c92:	d807      	bhi.n	8008ca4 <_printf_i+0x28>
 8008c94:	2f62      	cmp	r7, #98	; 0x62
 8008c96:	d80a      	bhi.n	8008cae <_printf_i+0x32>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	f000 80d8 	beq.w	8008e4e <_printf_i+0x1d2>
 8008c9e:	2f58      	cmp	r7, #88	; 0x58
 8008ca0:	f000 80a3 	beq.w	8008dea <_printf_i+0x16e>
 8008ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cac:	e03a      	b.n	8008d24 <_printf_i+0xa8>
 8008cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cb2:	2b15      	cmp	r3, #21
 8008cb4:	d8f6      	bhi.n	8008ca4 <_printf_i+0x28>
 8008cb6:	a101      	add	r1, pc, #4	; (adr r1, 8008cbc <_printf_i+0x40>)
 8008cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cbc:	08008d15 	.word	0x08008d15
 8008cc0:	08008d29 	.word	0x08008d29
 8008cc4:	08008ca5 	.word	0x08008ca5
 8008cc8:	08008ca5 	.word	0x08008ca5
 8008ccc:	08008ca5 	.word	0x08008ca5
 8008cd0:	08008ca5 	.word	0x08008ca5
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008ca5 	.word	0x08008ca5
 8008cdc:	08008ca5 	.word	0x08008ca5
 8008ce0:	08008ca5 	.word	0x08008ca5
 8008ce4:	08008ca5 	.word	0x08008ca5
 8008ce8:	08008e35 	.word	0x08008e35
 8008cec:	08008d59 	.word	0x08008d59
 8008cf0:	08008e17 	.word	0x08008e17
 8008cf4:	08008ca5 	.word	0x08008ca5
 8008cf8:	08008ca5 	.word	0x08008ca5
 8008cfc:	08008e57 	.word	0x08008e57
 8008d00:	08008ca5 	.word	0x08008ca5
 8008d04:	08008d59 	.word	0x08008d59
 8008d08:	08008ca5 	.word	0x08008ca5
 8008d0c:	08008ca5 	.word	0x08008ca5
 8008d10:	08008e1f 	.word	0x08008e1f
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	602a      	str	r2, [r5, #0]
 8008d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0a3      	b.n	8008e70 <_printf_i+0x1f4>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	6829      	ldr	r1, [r5, #0]
 8008d2c:	0606      	lsls	r6, r0, #24
 8008d2e:	f101 0304 	add.w	r3, r1, #4
 8008d32:	d50a      	bpl.n	8008d4a <_printf_i+0xce>
 8008d34:	680e      	ldr	r6, [r1, #0]
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	2e00      	cmp	r6, #0
 8008d3a:	da03      	bge.n	8008d44 <_printf_i+0xc8>
 8008d3c:	232d      	movs	r3, #45	; 0x2d
 8008d3e:	4276      	negs	r6, r6
 8008d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d44:	485e      	ldr	r0, [pc, #376]	; (8008ec0 <_printf_i+0x244>)
 8008d46:	230a      	movs	r3, #10
 8008d48:	e019      	b.n	8008d7e <_printf_i+0x102>
 8008d4a:	680e      	ldr	r6, [r1, #0]
 8008d4c:	602b      	str	r3, [r5, #0]
 8008d4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d52:	bf18      	it	ne
 8008d54:	b236      	sxthne	r6, r6
 8008d56:	e7ef      	b.n	8008d38 <_printf_i+0xbc>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	6820      	ldr	r0, [r4, #0]
 8008d5c:	1d19      	adds	r1, r3, #4
 8008d5e:	6029      	str	r1, [r5, #0]
 8008d60:	0601      	lsls	r1, r0, #24
 8008d62:	d501      	bpl.n	8008d68 <_printf_i+0xec>
 8008d64:	681e      	ldr	r6, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <_printf_i+0xf2>
 8008d68:	0646      	lsls	r6, r0, #25
 8008d6a:	d5fb      	bpl.n	8008d64 <_printf_i+0xe8>
 8008d6c:	881e      	ldrh	r6, [r3, #0]
 8008d6e:	4854      	ldr	r0, [pc, #336]	; (8008ec0 <_printf_i+0x244>)
 8008d70:	2f6f      	cmp	r7, #111	; 0x6f
 8008d72:	bf0c      	ite	eq
 8008d74:	2308      	moveq	r3, #8
 8008d76:	230a      	movne	r3, #10
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d7e:	6865      	ldr	r5, [r4, #4]
 8008d80:	60a5      	str	r5, [r4, #8]
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	bfa2      	ittt	ge
 8008d86:	6821      	ldrge	r1, [r4, #0]
 8008d88:	f021 0104 	bicge.w	r1, r1, #4
 8008d8c:	6021      	strge	r1, [r4, #0]
 8008d8e:	b90e      	cbnz	r6, 8008d94 <_printf_i+0x118>
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	d04d      	beq.n	8008e30 <_printf_i+0x1b4>
 8008d94:	4615      	mov	r5, r2
 8008d96:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d9a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d9e:	5dc7      	ldrb	r7, [r0, r7]
 8008da0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008da4:	4637      	mov	r7, r6
 8008da6:	42bb      	cmp	r3, r7
 8008da8:	460e      	mov	r6, r1
 8008daa:	d9f4      	bls.n	8008d96 <_printf_i+0x11a>
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d10b      	bne.n	8008dc8 <_printf_i+0x14c>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	07de      	lsls	r6, r3, #31
 8008db4:	d508      	bpl.n	8008dc8 <_printf_i+0x14c>
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	6861      	ldr	r1, [r4, #4]
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	bfde      	ittt	le
 8008dbe:	2330      	movle	r3, #48	; 0x30
 8008dc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dc8:	1b52      	subs	r2, r2, r5
 8008dca:	6122      	str	r2, [r4, #16]
 8008dcc:	f8cd a000 	str.w	sl, [sp]
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	aa03      	add	r2, sp, #12
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	f7ff fee2 	bl	8008ba0 <_printf_common>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d14c      	bne.n	8008e7a <_printf_i+0x1fe>
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	b004      	add	sp, #16
 8008de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dea:	4835      	ldr	r0, [pc, #212]	; (8008ec0 <_printf_i+0x244>)
 8008dec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008df0:	6829      	ldr	r1, [r5, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008df8:	6029      	str	r1, [r5, #0]
 8008dfa:	061d      	lsls	r5, r3, #24
 8008dfc:	d514      	bpl.n	8008e28 <_printf_i+0x1ac>
 8008dfe:	07df      	lsls	r7, r3, #31
 8008e00:	bf44      	itt	mi
 8008e02:	f043 0320 	orrmi.w	r3, r3, #32
 8008e06:	6023      	strmi	r3, [r4, #0]
 8008e08:	b91e      	cbnz	r6, 8008e12 <_printf_i+0x196>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f023 0320 	bic.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	2310      	movs	r3, #16
 8008e14:	e7b0      	b.n	8008d78 <_printf_i+0xfc>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f043 0320 	orr.w	r3, r3, #32
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	2378      	movs	r3, #120	; 0x78
 8008e20:	4828      	ldr	r0, [pc, #160]	; (8008ec4 <_printf_i+0x248>)
 8008e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e26:	e7e3      	b.n	8008df0 <_printf_i+0x174>
 8008e28:	0659      	lsls	r1, r3, #25
 8008e2a:	bf48      	it	mi
 8008e2c:	b2b6      	uxthmi	r6, r6
 8008e2e:	e7e6      	b.n	8008dfe <_printf_i+0x182>
 8008e30:	4615      	mov	r5, r2
 8008e32:	e7bb      	b.n	8008dac <_printf_i+0x130>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	6826      	ldr	r6, [r4, #0]
 8008e38:	6961      	ldr	r1, [r4, #20]
 8008e3a:	1d18      	adds	r0, r3, #4
 8008e3c:	6028      	str	r0, [r5, #0]
 8008e3e:	0635      	lsls	r5, r6, #24
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	d501      	bpl.n	8008e48 <_printf_i+0x1cc>
 8008e44:	6019      	str	r1, [r3, #0]
 8008e46:	e002      	b.n	8008e4e <_printf_i+0x1d2>
 8008e48:	0670      	lsls	r0, r6, #25
 8008e4a:	d5fb      	bpl.n	8008e44 <_printf_i+0x1c8>
 8008e4c:	8019      	strh	r1, [r3, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	4615      	mov	r5, r2
 8008e54:	e7ba      	b.n	8008dcc <_printf_i+0x150>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	602a      	str	r2, [r5, #0]
 8008e5c:	681d      	ldr	r5, [r3, #0]
 8008e5e:	6862      	ldr	r2, [r4, #4]
 8008e60:	2100      	movs	r1, #0
 8008e62:	4628      	mov	r0, r5
 8008e64:	f7f7 f9dc 	bl	8000220 <memchr>
 8008e68:	b108      	cbz	r0, 8008e6e <_printf_i+0x1f2>
 8008e6a:	1b40      	subs	r0, r0, r5
 8008e6c:	6060      	str	r0, [r4, #4]
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	2300      	movs	r3, #0
 8008e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e78:	e7a8      	b.n	8008dcc <_printf_i+0x150>
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d0ab      	beq.n	8008de0 <_printf_i+0x164>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	079b      	lsls	r3, r3, #30
 8008e8c:	d413      	bmi.n	8008eb6 <_printf_i+0x23a>
 8008e8e:	68e0      	ldr	r0, [r4, #12]
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	4298      	cmp	r0, r3
 8008e94:	bfb8      	it	lt
 8008e96:	4618      	movlt	r0, r3
 8008e98:	e7a4      	b.n	8008de4 <_printf_i+0x168>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d09b      	beq.n	8008de0 <_printf_i+0x164>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	9903      	ldr	r1, [sp, #12]
 8008eae:	1a5b      	subs	r3, r3, r1
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	dcf2      	bgt.n	8008e9a <_printf_i+0x21e>
 8008eb4:	e7eb      	b.n	8008e8e <_printf_i+0x212>
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	f104 0619 	add.w	r6, r4, #25
 8008ebc:	e7f5      	b.n	8008eaa <_printf_i+0x22e>
 8008ebe:	bf00      	nop
 8008ec0:	0800d776 	.word	0x0800d776
 8008ec4:	0800d787 	.word	0x0800d787

08008ec8 <_scanf_float>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	4617      	mov	r7, r2
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	688b      	ldr	r3, [r1, #8]
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008eda:	bf83      	ittte	hi
 8008edc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ee0:	195b      	addhi	r3, r3, r5
 8008ee2:	9302      	strhi	r3, [sp, #8]
 8008ee4:	2300      	movls	r3, #0
 8008ee6:	bf86      	itte	hi
 8008ee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008eec:	608b      	strhi	r3, [r1, #8]
 8008eee:	9302      	strls	r3, [sp, #8]
 8008ef0:	680b      	ldr	r3, [r1, #0]
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	2500      	movs	r5, #0
 8008ef6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008efa:	f84b 3b1c 	str.w	r3, [fp], #28
 8008efe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f02:	4680      	mov	r8, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	465e      	mov	r6, fp
 8008f08:	46aa      	mov	sl, r5
 8008f0a:	46a9      	mov	r9, r5
 8008f0c:	9501      	str	r5, [sp, #4]
 8008f0e:	68a2      	ldr	r2, [r4, #8]
 8008f10:	b152      	cbz	r2, 8008f28 <_scanf_float+0x60>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b4e      	cmp	r3, #78	; 0x4e
 8008f18:	d864      	bhi.n	8008fe4 <_scanf_float+0x11c>
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d83c      	bhi.n	8008f98 <_scanf_float+0xd0>
 8008f1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f22:	b2c8      	uxtb	r0, r1
 8008f24:	280e      	cmp	r0, #14
 8008f26:	d93a      	bls.n	8008f9e <_scanf_float+0xd6>
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d003      	beq.n	8008f36 <_scanf_float+0x6e>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3a:	f1ba 0f01 	cmp.w	sl, #1
 8008f3e:	f200 8113 	bhi.w	8009168 <_scanf_float+0x2a0>
 8008f42:	455e      	cmp	r6, fp
 8008f44:	f200 8105 	bhi.w	8009152 <_scanf_float+0x28a>
 8008f48:	2501      	movs	r5, #1
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	b007      	add	sp, #28
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f56:	2a0d      	cmp	r2, #13
 8008f58:	d8e6      	bhi.n	8008f28 <_scanf_float+0x60>
 8008f5a:	a101      	add	r1, pc, #4	; (adr r1, 8008f60 <_scanf_float+0x98>)
 8008f5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f60:	0800909f 	.word	0x0800909f
 8008f64:	08008f29 	.word	0x08008f29
 8008f68:	08008f29 	.word	0x08008f29
 8008f6c:	08008f29 	.word	0x08008f29
 8008f70:	080090ff 	.word	0x080090ff
 8008f74:	080090d7 	.word	0x080090d7
 8008f78:	08008f29 	.word	0x08008f29
 8008f7c:	08008f29 	.word	0x08008f29
 8008f80:	080090ad 	.word	0x080090ad
 8008f84:	08008f29 	.word	0x08008f29
 8008f88:	08008f29 	.word	0x08008f29
 8008f8c:	08008f29 	.word	0x08008f29
 8008f90:	08008f29 	.word	0x08008f29
 8008f94:	08009065 	.word	0x08009065
 8008f98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f9c:	e7db      	b.n	8008f56 <_scanf_float+0x8e>
 8008f9e:	290e      	cmp	r1, #14
 8008fa0:	d8c2      	bhi.n	8008f28 <_scanf_float+0x60>
 8008fa2:	a001      	add	r0, pc, #4	; (adr r0, 8008fa8 <_scanf_float+0xe0>)
 8008fa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008fa8:	08009057 	.word	0x08009057
 8008fac:	08008f29 	.word	0x08008f29
 8008fb0:	08009057 	.word	0x08009057
 8008fb4:	080090eb 	.word	0x080090eb
 8008fb8:	08008f29 	.word	0x08008f29
 8008fbc:	08009005 	.word	0x08009005
 8008fc0:	08009041 	.word	0x08009041
 8008fc4:	08009041 	.word	0x08009041
 8008fc8:	08009041 	.word	0x08009041
 8008fcc:	08009041 	.word	0x08009041
 8008fd0:	08009041 	.word	0x08009041
 8008fd4:	08009041 	.word	0x08009041
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	08009041 	.word	0x08009041
 8008fe4:	2b6e      	cmp	r3, #110	; 0x6e
 8008fe6:	d809      	bhi.n	8008ffc <_scanf_float+0x134>
 8008fe8:	2b60      	cmp	r3, #96	; 0x60
 8008fea:	d8b2      	bhi.n	8008f52 <_scanf_float+0x8a>
 8008fec:	2b54      	cmp	r3, #84	; 0x54
 8008fee:	d077      	beq.n	80090e0 <_scanf_float+0x218>
 8008ff0:	2b59      	cmp	r3, #89	; 0x59
 8008ff2:	d199      	bne.n	8008f28 <_scanf_float+0x60>
 8008ff4:	2d07      	cmp	r5, #7
 8008ff6:	d197      	bne.n	8008f28 <_scanf_float+0x60>
 8008ff8:	2508      	movs	r5, #8
 8008ffa:	e029      	b.n	8009050 <_scanf_float+0x188>
 8008ffc:	2b74      	cmp	r3, #116	; 0x74
 8008ffe:	d06f      	beq.n	80090e0 <_scanf_float+0x218>
 8009000:	2b79      	cmp	r3, #121	; 0x79
 8009002:	e7f6      	b.n	8008ff2 <_scanf_float+0x12a>
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	05c8      	lsls	r0, r1, #23
 8009008:	d51a      	bpl.n	8009040 <_scanf_float+0x178>
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009010:	6021      	str	r1, [r4, #0]
 8009012:	f109 0901 	add.w	r9, r9, #1
 8009016:	b11b      	cbz	r3, 8009020 <_scanf_float+0x158>
 8009018:	3b01      	subs	r3, #1
 800901a:	3201      	adds	r2, #1
 800901c:	9302      	str	r3, [sp, #8]
 800901e:	60a2      	str	r2, [r4, #8]
 8009020:	68a3      	ldr	r3, [r4, #8]
 8009022:	3b01      	subs	r3, #1
 8009024:	60a3      	str	r3, [r4, #8]
 8009026:	6923      	ldr	r3, [r4, #16]
 8009028:	3301      	adds	r3, #1
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3b01      	subs	r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	607b      	str	r3, [r7, #4]
 8009034:	f340 8084 	ble.w	8009140 <_scanf_float+0x278>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	e766      	b.n	8008f0e <_scanf_float+0x46>
 8009040:	eb1a 0f05 	cmn.w	sl, r5
 8009044:	f47f af70 	bne.w	8008f28 <_scanf_float+0x60>
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800904e:	6022      	str	r2, [r4, #0]
 8009050:	f806 3b01 	strb.w	r3, [r6], #1
 8009054:	e7e4      	b.n	8009020 <_scanf_float+0x158>
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	0610      	lsls	r0, r2, #24
 800905a:	f57f af65 	bpl.w	8008f28 <_scanf_float+0x60>
 800905e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009062:	e7f4      	b.n	800904e <_scanf_float+0x186>
 8009064:	f1ba 0f00 	cmp.w	sl, #0
 8009068:	d10e      	bne.n	8009088 <_scanf_float+0x1c0>
 800906a:	f1b9 0f00 	cmp.w	r9, #0
 800906e:	d10e      	bne.n	800908e <_scanf_float+0x1c6>
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009076:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800907a:	d108      	bne.n	800908e <_scanf_float+0x1c6>
 800907c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009080:	6022      	str	r2, [r4, #0]
 8009082:	f04f 0a01 	mov.w	sl, #1
 8009086:	e7e3      	b.n	8009050 <_scanf_float+0x188>
 8009088:	f1ba 0f02 	cmp.w	sl, #2
 800908c:	d055      	beq.n	800913a <_scanf_float+0x272>
 800908e:	2d01      	cmp	r5, #1
 8009090:	d002      	beq.n	8009098 <_scanf_float+0x1d0>
 8009092:	2d04      	cmp	r5, #4
 8009094:	f47f af48 	bne.w	8008f28 <_scanf_float+0x60>
 8009098:	3501      	adds	r5, #1
 800909a:	b2ed      	uxtb	r5, r5
 800909c:	e7d8      	b.n	8009050 <_scanf_float+0x188>
 800909e:	f1ba 0f01 	cmp.w	sl, #1
 80090a2:	f47f af41 	bne.w	8008f28 <_scanf_float+0x60>
 80090a6:	f04f 0a02 	mov.w	sl, #2
 80090aa:	e7d1      	b.n	8009050 <_scanf_float+0x188>
 80090ac:	b97d      	cbnz	r5, 80090ce <_scanf_float+0x206>
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	f47f af3c 	bne.w	8008f2e <_scanf_float+0x66>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090c0:	f47f af39 	bne.w	8008f36 <_scanf_float+0x6e>
 80090c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090c8:	6022      	str	r2, [r4, #0]
 80090ca:	2501      	movs	r5, #1
 80090cc:	e7c0      	b.n	8009050 <_scanf_float+0x188>
 80090ce:	2d03      	cmp	r5, #3
 80090d0:	d0e2      	beq.n	8009098 <_scanf_float+0x1d0>
 80090d2:	2d05      	cmp	r5, #5
 80090d4:	e7de      	b.n	8009094 <_scanf_float+0x1cc>
 80090d6:	2d02      	cmp	r5, #2
 80090d8:	f47f af26 	bne.w	8008f28 <_scanf_float+0x60>
 80090dc:	2503      	movs	r5, #3
 80090de:	e7b7      	b.n	8009050 <_scanf_float+0x188>
 80090e0:	2d06      	cmp	r5, #6
 80090e2:	f47f af21 	bne.w	8008f28 <_scanf_float+0x60>
 80090e6:	2507      	movs	r5, #7
 80090e8:	e7b2      	b.n	8009050 <_scanf_float+0x188>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	0591      	lsls	r1, r2, #22
 80090ee:	f57f af1b 	bpl.w	8008f28 <_scanf_float+0x60>
 80090f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80090fc:	e7a8      	b.n	8009050 <_scanf_float+0x188>
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009108:	d006      	beq.n	8009118 <_scanf_float+0x250>
 800910a:	0550      	lsls	r0, r2, #21
 800910c:	f57f af0c 	bpl.w	8008f28 <_scanf_float+0x60>
 8009110:	f1b9 0f00 	cmp.w	r9, #0
 8009114:	f43f af0f 	beq.w	8008f36 <_scanf_float+0x6e>
 8009118:	0591      	lsls	r1, r2, #22
 800911a:	bf58      	it	pl
 800911c:	9901      	ldrpl	r1, [sp, #4]
 800911e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009122:	bf58      	it	pl
 8009124:	eba9 0101 	subpl.w	r1, r9, r1
 8009128:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800912c:	bf58      	it	pl
 800912e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009132:	6022      	str	r2, [r4, #0]
 8009134:	f04f 0900 	mov.w	r9, #0
 8009138:	e78a      	b.n	8009050 <_scanf_float+0x188>
 800913a:	f04f 0a03 	mov.w	sl, #3
 800913e:	e787      	b.n	8009050 <_scanf_float+0x188>
 8009140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009144:	4639      	mov	r1, r7
 8009146:	4640      	mov	r0, r8
 8009148:	4798      	blx	r3
 800914a:	2800      	cmp	r0, #0
 800914c:	f43f aedf 	beq.w	8008f0e <_scanf_float+0x46>
 8009150:	e6ea      	b.n	8008f28 <_scanf_float+0x60>
 8009152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800915a:	463a      	mov	r2, r7
 800915c:	4640      	mov	r0, r8
 800915e:	4798      	blx	r3
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	3b01      	subs	r3, #1
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	e6ec      	b.n	8008f42 <_scanf_float+0x7a>
 8009168:	1e6b      	subs	r3, r5, #1
 800916a:	2b06      	cmp	r3, #6
 800916c:	d825      	bhi.n	80091ba <_scanf_float+0x2f2>
 800916e:	2d02      	cmp	r5, #2
 8009170:	d836      	bhi.n	80091e0 <_scanf_float+0x318>
 8009172:	455e      	cmp	r6, fp
 8009174:	f67f aee8 	bls.w	8008f48 <_scanf_float+0x80>
 8009178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800917c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009180:	463a      	mov	r2, r7
 8009182:	4640      	mov	r0, r8
 8009184:	4798      	blx	r3
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	3b01      	subs	r3, #1
 800918a:	6123      	str	r3, [r4, #16]
 800918c:	e7f1      	b.n	8009172 <_scanf_float+0x2aa>
 800918e:	9802      	ldr	r0, [sp, #8]
 8009190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009194:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009198:	9002      	str	r0, [sp, #8]
 800919a:	463a      	mov	r2, r7
 800919c:	4640      	mov	r0, r8
 800919e:	4798      	blx	r3
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091aa:	fa5f fa8a 	uxtb.w	sl, sl
 80091ae:	f1ba 0f02 	cmp.w	sl, #2
 80091b2:	d1ec      	bne.n	800918e <_scanf_float+0x2c6>
 80091b4:	3d03      	subs	r5, #3
 80091b6:	b2ed      	uxtb	r5, r5
 80091b8:	1b76      	subs	r6, r6, r5
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	05da      	lsls	r2, r3, #23
 80091be:	d52f      	bpl.n	8009220 <_scanf_float+0x358>
 80091c0:	055b      	lsls	r3, r3, #21
 80091c2:	d510      	bpl.n	80091e6 <_scanf_float+0x31e>
 80091c4:	455e      	cmp	r6, fp
 80091c6:	f67f aebf 	bls.w	8008f48 <_scanf_float+0x80>
 80091ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091d2:	463a      	mov	r2, r7
 80091d4:	4640      	mov	r0, r8
 80091d6:	4798      	blx	r3
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	3b01      	subs	r3, #1
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	e7f1      	b.n	80091c4 <_scanf_float+0x2fc>
 80091e0:	46aa      	mov	sl, r5
 80091e2:	9602      	str	r6, [sp, #8]
 80091e4:	e7df      	b.n	80091a6 <_scanf_float+0x2de>
 80091e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	2965      	cmp	r1, #101	; 0x65
 80091ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80091f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	d00c      	beq.n	8009214 <_scanf_float+0x34c>
 80091fa:	2945      	cmp	r1, #69	; 0x45
 80091fc:	d00a      	beq.n	8009214 <_scanf_float+0x34c>
 80091fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009202:	463a      	mov	r2, r7
 8009204:	4640      	mov	r0, r8
 8009206:	4798      	blx	r3
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800920e:	3b01      	subs	r3, #1
 8009210:	1eb5      	subs	r5, r6, #2
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009218:	463a      	mov	r2, r7
 800921a:	4640      	mov	r0, r8
 800921c:	4798      	blx	r3
 800921e:	462e      	mov	r6, r5
 8009220:	6825      	ldr	r5, [r4, #0]
 8009222:	f015 0510 	ands.w	r5, r5, #16
 8009226:	d159      	bne.n	80092dc <_scanf_float+0x414>
 8009228:	7035      	strb	r5, [r6, #0]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009234:	d11b      	bne.n	800926e <_scanf_float+0x3a6>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	454b      	cmp	r3, r9
 800923a:	eba3 0209 	sub.w	r2, r3, r9
 800923e:	d123      	bne.n	8009288 <_scanf_float+0x3c0>
 8009240:	2200      	movs	r2, #0
 8009242:	4659      	mov	r1, fp
 8009244:	4640      	mov	r0, r8
 8009246:	f001 f821 	bl	800a28c <_strtod_r>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	f012 0f02 	tst.w	r2, #2
 8009252:	ec57 6b10 	vmov	r6, r7, d0
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	d021      	beq.n	800929e <_scanf_float+0x3d6>
 800925a:	9903      	ldr	r1, [sp, #12]
 800925c:	1d1a      	adds	r2, r3, #4
 800925e:	600a      	str	r2, [r1, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	e9c3 6700 	strd	r6, r7, [r3]
 8009266:	68e3      	ldr	r3, [r4, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60e3      	str	r3, [r4, #12]
 800926c:	e66d      	b.n	8008f4a <_scanf_float+0x82>
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0e5      	beq.n	8009240 <_scanf_float+0x378>
 8009274:	9905      	ldr	r1, [sp, #20]
 8009276:	230a      	movs	r3, #10
 8009278:	462a      	mov	r2, r5
 800927a:	3101      	adds	r1, #1
 800927c:	4640      	mov	r0, r8
 800927e:	f001 f88d 	bl	800a39c <_strtol_r>
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	9e05      	ldr	r6, [sp, #20]
 8009286:	1ac2      	subs	r2, r0, r3
 8009288:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800928c:	429e      	cmp	r6, r3
 800928e:	bf28      	it	cs
 8009290:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009294:	4912      	ldr	r1, [pc, #72]	; (80092e0 <_scanf_float+0x418>)
 8009296:	4630      	mov	r0, r6
 8009298:	f000 f9b4 	bl	8009604 <siprintf>
 800929c:	e7d0      	b.n	8009240 <_scanf_float+0x378>
 800929e:	9903      	ldr	r1, [sp, #12]
 80092a0:	f012 0f04 	tst.w	r2, #4
 80092a4:	f103 0204 	add.w	r2, r3, #4
 80092a8:	600a      	str	r2, [r1, #0]
 80092aa:	d1d9      	bne.n	8009260 <_scanf_float+0x398>
 80092ac:	f8d3 8000 	ldr.w	r8, [r3]
 80092b0:	ee10 2a10 	vmov	r2, s0
 80092b4:	ee10 0a10 	vmov	r0, s0
 80092b8:	463b      	mov	r3, r7
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fc56 	bl	8000b6c <__aeabi_dcmpun>
 80092c0:	b128      	cbz	r0, 80092ce <_scanf_float+0x406>
 80092c2:	4808      	ldr	r0, [pc, #32]	; (80092e4 <_scanf_float+0x41c>)
 80092c4:	f000 f998 	bl	80095f8 <nanf>
 80092c8:	ed88 0a00 	vstr	s0, [r8]
 80092cc:	e7cb      	b.n	8009266 <_scanf_float+0x39e>
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f7 fca9 	bl	8000c28 <__aeabi_d2f>
 80092d6:	f8c8 0000 	str.w	r0, [r8]
 80092da:	e7c4      	b.n	8009266 <_scanf_float+0x39e>
 80092dc:	2500      	movs	r5, #0
 80092de:	e634      	b.n	8008f4a <_scanf_float+0x82>
 80092e0:	0800d798 	.word	0x0800d798
 80092e4:	0800dc08 	.word	0x0800dc08

080092e8 <swapfunc>:
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	b510      	push	{r4, lr}
 80092ec:	d00a      	beq.n	8009304 <swapfunc+0x1c>
 80092ee:	0892      	lsrs	r2, r2, #2
 80092f0:	3a01      	subs	r2, #1
 80092f2:	6803      	ldr	r3, [r0, #0]
 80092f4:	680c      	ldr	r4, [r1, #0]
 80092f6:	f840 4b04 	str.w	r4, [r0], #4
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	f841 3b04 	str.w	r3, [r1], #4
 8009300:	dcf6      	bgt.n	80092f0 <swapfunc+0x8>
 8009302:	bd10      	pop	{r4, pc}
 8009304:	4402      	add	r2, r0
 8009306:	780c      	ldrb	r4, [r1, #0]
 8009308:	7803      	ldrb	r3, [r0, #0]
 800930a:	f800 4b01 	strb.w	r4, [r0], #1
 800930e:	f801 3b01 	strb.w	r3, [r1], #1
 8009312:	1a13      	subs	r3, r2, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	dcf6      	bgt.n	8009306 <swapfunc+0x1e>
 8009318:	e7f3      	b.n	8009302 <swapfunc+0x1a>

0800931a <med3.constprop.0>:
 800931a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	4615      	mov	r5, r2
 8009320:	4607      	mov	r7, r0
 8009322:	461e      	mov	r6, r3
 8009324:	4798      	blx	r3
 8009326:	2800      	cmp	r0, #0
 8009328:	4629      	mov	r1, r5
 800932a:	4620      	mov	r0, r4
 800932c:	da0a      	bge.n	8009344 <med3.constprop.0+0x2a>
 800932e:	47b0      	blx	r6
 8009330:	2800      	cmp	r0, #0
 8009332:	db05      	blt.n	8009340 <med3.constprop.0+0x26>
 8009334:	4629      	mov	r1, r5
 8009336:	4638      	mov	r0, r7
 8009338:	47b0      	blx	r6
 800933a:	2800      	cmp	r0, #0
 800933c:	db0a      	blt.n	8009354 <med3.constprop.0+0x3a>
 800933e:	463c      	mov	r4, r7
 8009340:	4620      	mov	r0, r4
 8009342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009344:	47b0      	blx	r6
 8009346:	2800      	cmp	r0, #0
 8009348:	dcfa      	bgt.n	8009340 <med3.constprop.0+0x26>
 800934a:	4629      	mov	r1, r5
 800934c:	4638      	mov	r0, r7
 800934e:	47b0      	blx	r6
 8009350:	2800      	cmp	r0, #0
 8009352:	dbf4      	blt.n	800933e <med3.constprop.0+0x24>
 8009354:	462c      	mov	r4, r5
 8009356:	e7f3      	b.n	8009340 <med3.constprop.0+0x26>

08009358 <qsort>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	469a      	mov	sl, r3
 800935e:	ea40 0302 	orr.w	r3, r0, r2
 8009362:	079b      	lsls	r3, r3, #30
 8009364:	b097      	sub	sp, #92	; 0x5c
 8009366:	4606      	mov	r6, r0
 8009368:	4614      	mov	r4, r2
 800936a:	d11a      	bne.n	80093a2 <qsort+0x4a>
 800936c:	f1b2 0804 	subs.w	r8, r2, #4
 8009370:	bf18      	it	ne
 8009372:	f04f 0801 	movne.w	r8, #1
 8009376:	2300      	movs	r3, #0
 8009378:	9302      	str	r3, [sp, #8]
 800937a:	1933      	adds	r3, r6, r4
 800937c:	fb04 f701 	mul.w	r7, r4, r1
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	2906      	cmp	r1, #6
 8009384:	eb06 0307 	add.w	r3, r6, r7
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	d82a      	bhi.n	80093e2 <qsort+0x8a>
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	9a03      	ldr	r2, [sp, #12]
 8009390:	4293      	cmp	r3, r2
 8009392:	d310      	bcc.n	80093b6 <qsort+0x5e>
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 811e 	bne.w	80095d8 <qsort+0x280>
 800939c:	b017      	add	sp, #92	; 0x5c
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	f04f 0802 	mov.w	r8, #2
 80093a6:	e7e6      	b.n	8009376 <qsort+0x1e>
 80093a8:	4643      	mov	r3, r8
 80093aa:	4622      	mov	r2, r4
 80093ac:	4639      	mov	r1, r7
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7ff ff9a 	bl	80092e8 <swapfunc>
 80093b4:	e00e      	b.n	80093d4 <qsort+0x7c>
 80093b6:	9d01      	ldr	r5, [sp, #4]
 80093b8:	e00d      	b.n	80093d6 <qsort+0x7e>
 80093ba:	1b2f      	subs	r7, r5, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	4638      	mov	r0, r7
 80093c0:	47d0      	blx	sl
 80093c2:	2800      	cmp	r0, #0
 80093c4:	dd09      	ble.n	80093da <qsort+0x82>
 80093c6:	f1b8 0f00 	cmp.w	r8, #0
 80093ca:	d1ed      	bne.n	80093a8 <qsort+0x50>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	463d      	mov	r5, r7
 80093d6:	42ae      	cmp	r6, r5
 80093d8:	d3ef      	bcc.n	80093ba <qsort+0x62>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	4423      	add	r3, r4
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	e7d4      	b.n	800938c <qsort+0x34>
 80093e2:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80093e6:	1b3f      	subs	r7, r7, r4
 80093e8:	2907      	cmp	r1, #7
 80093ea:	fb04 6909 	mla	r9, r4, r9, r6
 80093ee:	4437      	add	r7, r6
 80093f0:	d022      	beq.n	8009438 <qsort+0xe0>
 80093f2:	2928      	cmp	r1, #40	; 0x28
 80093f4:	d945      	bls.n	8009482 <qsort+0x12a>
 80093f6:	08c9      	lsrs	r1, r1, #3
 80093f8:	fb04 f501 	mul.w	r5, r4, r1
 80093fc:	4653      	mov	r3, sl
 80093fe:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009402:	1971      	adds	r1, r6, r5
 8009404:	4630      	mov	r0, r6
 8009406:	f7ff ff88 	bl	800931a <med3.constprop.0>
 800940a:	4649      	mov	r1, r9
 800940c:	eb09 0205 	add.w	r2, r9, r5
 8009410:	4653      	mov	r3, sl
 8009412:	4683      	mov	fp, r0
 8009414:	1b48      	subs	r0, r1, r5
 8009416:	f7ff ff80 	bl	800931a <med3.constprop.0>
 800941a:	463a      	mov	r2, r7
 800941c:	4681      	mov	r9, r0
 800941e:	4653      	mov	r3, sl
 8009420:	1b79      	subs	r1, r7, r5
 8009422:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8009426:	f7ff ff78 	bl	800931a <med3.constprop.0>
 800942a:	4602      	mov	r2, r0
 800942c:	4649      	mov	r1, r9
 800942e:	4653      	mov	r3, sl
 8009430:	4658      	mov	r0, fp
 8009432:	f7ff ff72 	bl	800931a <med3.constprop.0>
 8009436:	4681      	mov	r9, r0
 8009438:	f1b8 0f00 	cmp.w	r8, #0
 800943c:	d124      	bne.n	8009488 <qsort+0x130>
 800943e:	6833      	ldr	r3, [r6, #0]
 8009440:	f8d9 2000 	ldr.w	r2, [r9]
 8009444:	6032      	str	r2, [r6, #0]
 8009446:	f8c9 3000 	str.w	r3, [r9]
 800944a:	eb06 0b04 	add.w	fp, r6, r4
 800944e:	46b9      	mov	r9, r7
 8009450:	465d      	mov	r5, fp
 8009452:	2300      	movs	r3, #0
 8009454:	45bb      	cmp	fp, r7
 8009456:	d835      	bhi.n	80094c4 <qsort+0x16c>
 8009458:	4631      	mov	r1, r6
 800945a:	4658      	mov	r0, fp
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	47d0      	blx	sl
 8009460:	2800      	cmp	r0, #0
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	dc3e      	bgt.n	80094e4 <qsort+0x18c>
 8009466:	d10a      	bne.n	800947e <qsort+0x126>
 8009468:	f1b8 0f00 	cmp.w	r8, #0
 800946c:	d113      	bne.n	8009496 <qsort+0x13e>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	f8db 2000 	ldr.w	r2, [fp]
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	f8cb 3000 	str.w	r3, [fp]
 800947a:	4425      	add	r5, r4
 800947c:	2301      	movs	r3, #1
 800947e:	44a3      	add	fp, r4
 8009480:	e7e8      	b.n	8009454 <qsort+0xfc>
 8009482:	463a      	mov	r2, r7
 8009484:	46b3      	mov	fp, r6
 8009486:	e7d1      	b.n	800942c <qsort+0xd4>
 8009488:	4643      	mov	r3, r8
 800948a:	4622      	mov	r2, r4
 800948c:	4649      	mov	r1, r9
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff2a 	bl	80092e8 <swapfunc>
 8009494:	e7d9      	b.n	800944a <qsort+0xf2>
 8009496:	4643      	mov	r3, r8
 8009498:	4622      	mov	r2, r4
 800949a:	4659      	mov	r1, fp
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff ff23 	bl	80092e8 <swapfunc>
 80094a2:	e7ea      	b.n	800947a <qsort+0x122>
 80094a4:	d10b      	bne.n	80094be <qsort+0x166>
 80094a6:	f1b8 0f00 	cmp.w	r8, #0
 80094aa:	d114      	bne.n	80094d6 <qsort+0x17e>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f8d9 2000 	ldr.w	r2, [r9]
 80094b2:	603a      	str	r2, [r7, #0]
 80094b4:	f8c9 3000 	str.w	r3, [r9]
 80094b8:	eba9 0904 	sub.w	r9, r9, r4
 80094bc:	2301      	movs	r3, #1
 80094be:	9f04      	ldr	r7, [sp, #16]
 80094c0:	45bb      	cmp	fp, r7
 80094c2:	d90f      	bls.n	80094e4 <qsort+0x18c>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d143      	bne.n	8009550 <qsort+0x1f8>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	9a03      	ldr	r2, [sp, #12]
 80094cc:	4293      	cmp	r3, r2
 80094ce:	f4bf af61 	bcs.w	8009394 <qsort+0x3c>
 80094d2:	9d01      	ldr	r5, [sp, #4]
 80094d4:	e036      	b.n	8009544 <qsort+0x1ec>
 80094d6:	4643      	mov	r3, r8
 80094d8:	4622      	mov	r2, r4
 80094da:	4649      	mov	r1, r9
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ff03 	bl	80092e8 <swapfunc>
 80094e2:	e7e9      	b.n	80094b8 <qsort+0x160>
 80094e4:	4631      	mov	r1, r6
 80094e6:	4638      	mov	r0, r7
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	47d0      	blx	sl
 80094ec:	1b3b      	subs	r3, r7, r4
 80094ee:	2800      	cmp	r0, #0
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	dad6      	bge.n	80094a4 <qsort+0x14c>
 80094f6:	f1b8 0f00 	cmp.w	r8, #0
 80094fa:	d006      	beq.n	800950a <qsort+0x1b2>
 80094fc:	4643      	mov	r3, r8
 80094fe:	4622      	mov	r2, r4
 8009500:	4639      	mov	r1, r7
 8009502:	4658      	mov	r0, fp
 8009504:	f7ff fef0 	bl	80092e8 <swapfunc>
 8009508:	e005      	b.n	8009516 <qsort+0x1be>
 800950a:	f8db 3000 	ldr.w	r3, [fp]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	f8cb 2000 	str.w	r2, [fp]
 8009514:	603b      	str	r3, [r7, #0]
 8009516:	9f04      	ldr	r7, [sp, #16]
 8009518:	e7b0      	b.n	800947c <qsort+0x124>
 800951a:	4643      	mov	r3, r8
 800951c:	4622      	mov	r2, r4
 800951e:	4639      	mov	r1, r7
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff fee1 	bl	80092e8 <swapfunc>
 8009526:	e00c      	b.n	8009542 <qsort+0x1ea>
 8009528:	1b2f      	subs	r7, r5, r4
 800952a:	4629      	mov	r1, r5
 800952c:	4638      	mov	r0, r7
 800952e:	47d0      	blx	sl
 8009530:	2800      	cmp	r0, #0
 8009532:	dd09      	ble.n	8009548 <qsort+0x1f0>
 8009534:	f1b8 0f00 	cmp.w	r8, #0
 8009538:	d1ef      	bne.n	800951a <qsort+0x1c2>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	602a      	str	r2, [r5, #0]
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	463d      	mov	r5, r7
 8009544:	42ae      	cmp	r6, r5
 8009546:	d3ef      	bcc.n	8009528 <qsort+0x1d0>
 8009548:	9b01      	ldr	r3, [sp, #4]
 800954a:	4423      	add	r3, r4
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	e7bb      	b.n	80094c8 <qsort+0x170>
 8009550:	ebab 0305 	sub.w	r3, fp, r5
 8009554:	1baa      	subs	r2, r5, r6
 8009556:	429a      	cmp	r2, r3
 8009558:	bfa8      	it	ge
 800955a:	461a      	movge	r2, r3
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	b12a      	cbz	r2, 800956c <qsort+0x214>
 8009560:	4643      	mov	r3, r8
 8009562:	ebab 0102 	sub.w	r1, fp, r2
 8009566:	4630      	mov	r0, r6
 8009568:	f7ff febe 	bl	80092e8 <swapfunc>
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	eba3 0209 	sub.w	r2, r3, r9
 8009572:	eba9 0707 	sub.w	r7, r9, r7
 8009576:	1b12      	subs	r2, r2, r4
 8009578:	42ba      	cmp	r2, r7
 800957a:	bf28      	it	cs
 800957c:	463a      	movcs	r2, r7
 800957e:	b12a      	cbz	r2, 800958c <qsort+0x234>
 8009580:	9903      	ldr	r1, [sp, #12]
 8009582:	4643      	mov	r3, r8
 8009584:	1a89      	subs	r1, r1, r2
 8009586:	4658      	mov	r0, fp
 8009588:	f7ff feae 	bl	80092e8 <swapfunc>
 800958c:	9d01      	ldr	r5, [sp, #4]
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	42af      	cmp	r7, r5
 8009592:	eba3 0007 	sub.w	r0, r3, r7
 8009596:	d904      	bls.n	80095a2 <qsort+0x24a>
 8009598:	4633      	mov	r3, r6
 800959a:	463d      	mov	r5, r7
 800959c:	9f01      	ldr	r7, [sp, #4]
 800959e:	4606      	mov	r6, r0
 80095a0:	4618      	mov	r0, r3
 80095a2:	42a7      	cmp	r7, r4
 80095a4:	d921      	bls.n	80095ea <qsort+0x292>
 80095a6:	fbb7 f1f4 	udiv	r1, r7, r4
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	2b07      	cmp	r3, #7
 80095ae:	d80d      	bhi.n	80095cc <qsort+0x274>
 80095b0:	fbb5 f5f4 	udiv	r5, r5, r4
 80095b4:	aa16      	add	r2, sp, #88	; 0x58
 80095b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095ba:	f843 6c40 	str.w	r6, [r3, #-64]
 80095be:	f843 5c3c 	str.w	r5, [r3, #-60]
 80095c2:	9b02      	ldr	r3, [sp, #8]
 80095c4:	3301      	adds	r3, #1
 80095c6:	9302      	str	r3, [sp, #8]
 80095c8:	4606      	mov	r6, r0
 80095ca:	e6d6      	b.n	800937a <qsort+0x22>
 80095cc:	4653      	mov	r3, sl
 80095ce:	4622      	mov	r2, r4
 80095d0:	f7ff fec2 	bl	8009358 <qsort>
 80095d4:	42a5      	cmp	r5, r4
 80095d6:	d80b      	bhi.n	80095f0 <qsort+0x298>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	aa16      	add	r2, sp, #88	; 0x58
 80095dc:	3b01      	subs	r3, #1
 80095de:	9302      	str	r3, [sp, #8]
 80095e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095e4:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80095e8:	e7ee      	b.n	80095c8 <qsort+0x270>
 80095ea:	42a5      	cmp	r5, r4
 80095ec:	f67f aed2 	bls.w	8009394 <qsort+0x3c>
 80095f0:	fbb5 f1f4 	udiv	r1, r5, r4
 80095f4:	4630      	mov	r0, r6
 80095f6:	e7e7      	b.n	80095c8 <qsort+0x270>

080095f8 <nanf>:
 80095f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009600 <nanf+0x8>
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	7fc00000 	.word	0x7fc00000

08009604 <siprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b500      	push	{lr}
 8009608:	b09c      	sub	sp, #112	; 0x70
 800960a:	ab1d      	add	r3, sp, #116	; 0x74
 800960c:	9002      	str	r0, [sp, #8]
 800960e:	9006      	str	r0, [sp, #24]
 8009610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009614:	4809      	ldr	r0, [pc, #36]	; (800963c <siprintf+0x38>)
 8009616:	9107      	str	r1, [sp, #28]
 8009618:	9104      	str	r1, [sp, #16]
 800961a:	4909      	ldr	r1, [pc, #36]	; (8009640 <siprintf+0x3c>)
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	6800      	ldr	r0, [r0, #0]
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	a902      	add	r1, sp, #8
 8009628:	f003 f9e2 	bl	800c9f0 <_svfiprintf_r>
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	2200      	movs	r2, #0
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	b01c      	add	sp, #112	; 0x70
 8009634:	f85d eb04 	ldr.w	lr, [sp], #4
 8009638:	b003      	add	sp, #12
 800963a:	4770      	bx	lr
 800963c:	20000028 	.word	0x20000028
 8009640:	ffff0208 	.word	0xffff0208

08009644 <sulp>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4604      	mov	r4, r0
 8009648:	460d      	mov	r5, r1
 800964a:	ec45 4b10 	vmov	d0, r4, r5
 800964e:	4616      	mov	r6, r2
 8009650:	f002 ff2c 	bl	800c4ac <__ulp>
 8009654:	ec51 0b10 	vmov	r0, r1, d0
 8009658:	b17e      	cbz	r6, 800967a <sulp+0x36>
 800965a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800965e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd09      	ble.n	800967a <sulp+0x36>
 8009666:	051b      	lsls	r3, r3, #20
 8009668:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800966c:	2400      	movs	r4, #0
 800966e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009672:	4622      	mov	r2, r4
 8009674:	462b      	mov	r3, r5
 8009676:	f7f6 ffdf 	bl	8000638 <__aeabi_dmul>
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	0000      	movs	r0, r0
	...

08009680 <_strtod_l>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	ed2d 8b02 	vpush	{d8}
 8009688:	b09d      	sub	sp, #116	; 0x74
 800968a:	461f      	mov	r7, r3
 800968c:	2300      	movs	r3, #0
 800968e:	9318      	str	r3, [sp, #96]	; 0x60
 8009690:	4ba2      	ldr	r3, [pc, #648]	; (800991c <_strtod_l+0x29c>)
 8009692:	9213      	str	r2, [sp, #76]	; 0x4c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9305      	str	r3, [sp, #20]
 8009698:	4604      	mov	r4, r0
 800969a:	4618      	mov	r0, r3
 800969c:	4688      	mov	r8, r1
 800969e:	f7f6 fdb7 	bl	8000210 <strlen>
 80096a2:	f04f 0a00 	mov.w	sl, #0
 80096a6:	4605      	mov	r5, r0
 80096a8:	f04f 0b00 	mov.w	fp, #0
 80096ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80096b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	2a2b      	cmp	r2, #43	; 0x2b
 80096b6:	d04e      	beq.n	8009756 <_strtod_l+0xd6>
 80096b8:	d83b      	bhi.n	8009732 <_strtod_l+0xb2>
 80096ba:	2a0d      	cmp	r2, #13
 80096bc:	d834      	bhi.n	8009728 <_strtod_l+0xa8>
 80096be:	2a08      	cmp	r2, #8
 80096c0:	d834      	bhi.n	800972c <_strtod_l+0xac>
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	d03e      	beq.n	8009744 <_strtod_l+0xc4>
 80096c6:	2300      	movs	r3, #0
 80096c8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80096cc:	7833      	ldrb	r3, [r6, #0]
 80096ce:	2b30      	cmp	r3, #48	; 0x30
 80096d0:	f040 80b0 	bne.w	8009834 <_strtod_l+0x1b4>
 80096d4:	7873      	ldrb	r3, [r6, #1]
 80096d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096da:	2b58      	cmp	r3, #88	; 0x58
 80096dc:	d168      	bne.n	80097b0 <_strtod_l+0x130>
 80096de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	ab18      	add	r3, sp, #96	; 0x60
 80096e4:	9702      	str	r7, [sp, #8]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4a8d      	ldr	r2, [pc, #564]	; (8009920 <_strtod_l+0x2a0>)
 80096ea:	ab19      	add	r3, sp, #100	; 0x64
 80096ec:	a917      	add	r1, sp, #92	; 0x5c
 80096ee:	4620      	mov	r0, r4
 80096f0:	f001 ffce 	bl	800b690 <__gethex>
 80096f4:	f010 0707 	ands.w	r7, r0, #7
 80096f8:	4605      	mov	r5, r0
 80096fa:	d005      	beq.n	8009708 <_strtod_l+0x88>
 80096fc:	2f06      	cmp	r7, #6
 80096fe:	d12c      	bne.n	800975a <_strtod_l+0xda>
 8009700:	3601      	adds	r6, #1
 8009702:	2300      	movs	r3, #0
 8009704:	9617      	str	r6, [sp, #92]	; 0x5c
 8009706:	930a      	str	r3, [sp, #40]	; 0x28
 8009708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800970a:	2b00      	cmp	r3, #0
 800970c:	f040 8590 	bne.w	800a230 <_strtod_l+0xbb0>
 8009710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009712:	b1eb      	cbz	r3, 8009750 <_strtod_l+0xd0>
 8009714:	4652      	mov	r2, sl
 8009716:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800971a:	ec43 2b10 	vmov	d0, r2, r3
 800971e:	b01d      	add	sp, #116	; 0x74
 8009720:	ecbd 8b02 	vpop	{d8}
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	2a20      	cmp	r2, #32
 800972a:	d1cc      	bne.n	80096c6 <_strtod_l+0x46>
 800972c:	3301      	adds	r3, #1
 800972e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009730:	e7be      	b.n	80096b0 <_strtod_l+0x30>
 8009732:	2a2d      	cmp	r2, #45	; 0x2d
 8009734:	d1c7      	bne.n	80096c6 <_strtod_l+0x46>
 8009736:	2201      	movs	r2, #1
 8009738:	920a      	str	r2, [sp, #40]	; 0x28
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	9217      	str	r2, [sp, #92]	; 0x5c
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1c2      	bne.n	80096ca <_strtod_l+0x4a>
 8009744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009746:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 856e 	bne.w	800a22c <_strtod_l+0xbac>
 8009750:	4652      	mov	r2, sl
 8009752:	465b      	mov	r3, fp
 8009754:	e7e1      	b.n	800971a <_strtod_l+0x9a>
 8009756:	2200      	movs	r2, #0
 8009758:	e7ee      	b.n	8009738 <_strtod_l+0xb8>
 800975a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800975c:	b13a      	cbz	r2, 800976e <_strtod_l+0xee>
 800975e:	2135      	movs	r1, #53	; 0x35
 8009760:	a81a      	add	r0, sp, #104	; 0x68
 8009762:	f002 ffae 	bl	800c6c2 <__copybits>
 8009766:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009768:	4620      	mov	r0, r4
 800976a:	f002 fb6d 	bl	800be48 <_Bfree>
 800976e:	3f01      	subs	r7, #1
 8009770:	2f04      	cmp	r7, #4
 8009772:	d806      	bhi.n	8009782 <_strtod_l+0x102>
 8009774:	e8df f007 	tbb	[pc, r7]
 8009778:	1714030a 	.word	0x1714030a
 800977c:	0a          	.byte	0x0a
 800977d:	00          	.byte	0x00
 800977e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009782:	0728      	lsls	r0, r5, #28
 8009784:	d5c0      	bpl.n	8009708 <_strtod_l+0x88>
 8009786:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800978a:	e7bd      	b.n	8009708 <_strtod_l+0x88>
 800978c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009796:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800979a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800979e:	e7f0      	b.n	8009782 <_strtod_l+0x102>
 80097a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009924 <_strtod_l+0x2a4>
 80097a4:	e7ed      	b.n	8009782 <_strtod_l+0x102>
 80097a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80097aa:	f04f 3aff 	mov.w	sl, #4294967295
 80097ae:	e7e8      	b.n	8009782 <_strtod_l+0x102>
 80097b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d0f9      	beq.n	80097b0 <_strtod_l+0x130>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0a3      	beq.n	8009708 <_strtod_l+0x88>
 80097c0:	2301      	movs	r3, #1
 80097c2:	f04f 0900 	mov.w	r9, #0
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ca:	9308      	str	r3, [sp, #32]
 80097cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80097d0:	464f      	mov	r7, r9
 80097d2:	220a      	movs	r2, #10
 80097d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80097d6:	7806      	ldrb	r6, [r0, #0]
 80097d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80097dc:	b2d9      	uxtb	r1, r3
 80097de:	2909      	cmp	r1, #9
 80097e0:	d92a      	bls.n	8009838 <_strtod_l+0x1b8>
 80097e2:	9905      	ldr	r1, [sp, #20]
 80097e4:	462a      	mov	r2, r5
 80097e6:	f003 fbba 	bl	800cf5e <strncmp>
 80097ea:	b398      	cbz	r0, 8009854 <_strtod_l+0x1d4>
 80097ec:	2000      	movs	r0, #0
 80097ee:	4632      	mov	r2, r6
 80097f0:	463d      	mov	r5, r7
 80097f2:	9005      	str	r0, [sp, #20]
 80097f4:	4603      	mov	r3, r0
 80097f6:	2a65      	cmp	r2, #101	; 0x65
 80097f8:	d001      	beq.n	80097fe <_strtod_l+0x17e>
 80097fa:	2a45      	cmp	r2, #69	; 0x45
 80097fc:	d118      	bne.n	8009830 <_strtod_l+0x1b0>
 80097fe:	b91d      	cbnz	r5, 8009808 <_strtod_l+0x188>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	4302      	orrs	r2, r0
 8009804:	d09e      	beq.n	8009744 <_strtod_l+0xc4>
 8009806:	2500      	movs	r5, #0
 8009808:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800980c:	f108 0201 	add.w	r2, r8, #1
 8009810:	9217      	str	r2, [sp, #92]	; 0x5c
 8009812:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009816:	2a2b      	cmp	r2, #43	; 0x2b
 8009818:	d075      	beq.n	8009906 <_strtod_l+0x286>
 800981a:	2a2d      	cmp	r2, #45	; 0x2d
 800981c:	d07b      	beq.n	8009916 <_strtod_l+0x296>
 800981e:	f04f 0c00 	mov.w	ip, #0
 8009822:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009826:	2909      	cmp	r1, #9
 8009828:	f240 8082 	bls.w	8009930 <_strtod_l+0x2b0>
 800982c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009830:	2600      	movs	r6, #0
 8009832:	e09d      	b.n	8009970 <_strtod_l+0x2f0>
 8009834:	2300      	movs	r3, #0
 8009836:	e7c4      	b.n	80097c2 <_strtod_l+0x142>
 8009838:	2f08      	cmp	r7, #8
 800983a:	bfd8      	it	le
 800983c:	9907      	ldrle	r1, [sp, #28]
 800983e:	f100 0001 	add.w	r0, r0, #1
 8009842:	bfda      	itte	le
 8009844:	fb02 3301 	mlale	r3, r2, r1, r3
 8009848:	9307      	strle	r3, [sp, #28]
 800984a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800984e:	3701      	adds	r7, #1
 8009850:	9017      	str	r0, [sp, #92]	; 0x5c
 8009852:	e7bf      	b.n	80097d4 <_strtod_l+0x154>
 8009854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009856:	195a      	adds	r2, r3, r5
 8009858:	9217      	str	r2, [sp, #92]	; 0x5c
 800985a:	5d5a      	ldrb	r2, [r3, r5]
 800985c:	2f00      	cmp	r7, #0
 800985e:	d037      	beq.n	80098d0 <_strtod_l+0x250>
 8009860:	9005      	str	r0, [sp, #20]
 8009862:	463d      	mov	r5, r7
 8009864:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009868:	2b09      	cmp	r3, #9
 800986a:	d912      	bls.n	8009892 <_strtod_l+0x212>
 800986c:	2301      	movs	r3, #1
 800986e:	e7c2      	b.n	80097f6 <_strtod_l+0x176>
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	9217      	str	r2, [sp, #92]	; 0x5c
 8009876:	785a      	ldrb	r2, [r3, #1]
 8009878:	3001      	adds	r0, #1
 800987a:	2a30      	cmp	r2, #48	; 0x30
 800987c:	d0f8      	beq.n	8009870 <_strtod_l+0x1f0>
 800987e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009882:	2b08      	cmp	r3, #8
 8009884:	f200 84d9 	bhi.w	800a23a <_strtod_l+0xbba>
 8009888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800988a:	9005      	str	r0, [sp, #20]
 800988c:	2000      	movs	r0, #0
 800988e:	9308      	str	r3, [sp, #32]
 8009890:	4605      	mov	r5, r0
 8009892:	3a30      	subs	r2, #48	; 0x30
 8009894:	f100 0301 	add.w	r3, r0, #1
 8009898:	d014      	beq.n	80098c4 <_strtod_l+0x244>
 800989a:	9905      	ldr	r1, [sp, #20]
 800989c:	4419      	add	r1, r3
 800989e:	9105      	str	r1, [sp, #20]
 80098a0:	462b      	mov	r3, r5
 80098a2:	eb00 0e05 	add.w	lr, r0, r5
 80098a6:	210a      	movs	r1, #10
 80098a8:	4573      	cmp	r3, lr
 80098aa:	d113      	bne.n	80098d4 <_strtod_l+0x254>
 80098ac:	182b      	adds	r3, r5, r0
 80098ae:	2b08      	cmp	r3, #8
 80098b0:	f105 0501 	add.w	r5, r5, #1
 80098b4:	4405      	add	r5, r0
 80098b6:	dc1c      	bgt.n	80098f2 <_strtod_l+0x272>
 80098b8:	9907      	ldr	r1, [sp, #28]
 80098ba:	230a      	movs	r3, #10
 80098bc:	fb03 2301 	mla	r3, r3, r1, r2
 80098c0:	9307      	str	r3, [sp, #28]
 80098c2:	2300      	movs	r3, #0
 80098c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098c6:	1c51      	adds	r1, r2, #1
 80098c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80098ca:	7852      	ldrb	r2, [r2, #1]
 80098cc:	4618      	mov	r0, r3
 80098ce:	e7c9      	b.n	8009864 <_strtod_l+0x1e4>
 80098d0:	4638      	mov	r0, r7
 80098d2:	e7d2      	b.n	800987a <_strtod_l+0x1fa>
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	dc04      	bgt.n	80098e2 <_strtod_l+0x262>
 80098d8:	9e07      	ldr	r6, [sp, #28]
 80098da:	434e      	muls	r6, r1
 80098dc:	9607      	str	r6, [sp, #28]
 80098de:	3301      	adds	r3, #1
 80098e0:	e7e2      	b.n	80098a8 <_strtod_l+0x228>
 80098e2:	f103 0c01 	add.w	ip, r3, #1
 80098e6:	f1bc 0f10 	cmp.w	ip, #16
 80098ea:	bfd8      	it	le
 80098ec:	fb01 f909 	mulle.w	r9, r1, r9
 80098f0:	e7f5      	b.n	80098de <_strtod_l+0x25e>
 80098f2:	2d10      	cmp	r5, #16
 80098f4:	bfdc      	itt	le
 80098f6:	230a      	movle	r3, #10
 80098f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80098fc:	e7e1      	b.n	80098c2 <_strtod_l+0x242>
 80098fe:	2300      	movs	r3, #0
 8009900:	9305      	str	r3, [sp, #20]
 8009902:	2301      	movs	r3, #1
 8009904:	e77c      	b.n	8009800 <_strtod_l+0x180>
 8009906:	f04f 0c00 	mov.w	ip, #0
 800990a:	f108 0202 	add.w	r2, r8, #2
 800990e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009910:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009914:	e785      	b.n	8009822 <_strtod_l+0x1a2>
 8009916:	f04f 0c01 	mov.w	ip, #1
 800991a:	e7f6      	b.n	800990a <_strtod_l+0x28a>
 800991c:	0800da4c 	.word	0x0800da4c
 8009920:	0800d7a0 	.word	0x0800d7a0
 8009924:	7ff00000 	.word	0x7ff00000
 8009928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800992a:	1c51      	adds	r1, r2, #1
 800992c:	9117      	str	r1, [sp, #92]	; 0x5c
 800992e:	7852      	ldrb	r2, [r2, #1]
 8009930:	2a30      	cmp	r2, #48	; 0x30
 8009932:	d0f9      	beq.n	8009928 <_strtod_l+0x2a8>
 8009934:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009938:	2908      	cmp	r1, #8
 800993a:	f63f af79 	bhi.w	8009830 <_strtod_l+0x1b0>
 800993e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009942:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009944:	9206      	str	r2, [sp, #24]
 8009946:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009948:	1c51      	adds	r1, r2, #1
 800994a:	9117      	str	r1, [sp, #92]	; 0x5c
 800994c:	7852      	ldrb	r2, [r2, #1]
 800994e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009952:	2e09      	cmp	r6, #9
 8009954:	d937      	bls.n	80099c6 <_strtod_l+0x346>
 8009956:	9e06      	ldr	r6, [sp, #24]
 8009958:	1b89      	subs	r1, r1, r6
 800995a:	2908      	cmp	r1, #8
 800995c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009960:	dc02      	bgt.n	8009968 <_strtod_l+0x2e8>
 8009962:	4576      	cmp	r6, lr
 8009964:	bfa8      	it	ge
 8009966:	4676      	movge	r6, lr
 8009968:	f1bc 0f00 	cmp.w	ip, #0
 800996c:	d000      	beq.n	8009970 <_strtod_l+0x2f0>
 800996e:	4276      	negs	r6, r6
 8009970:	2d00      	cmp	r5, #0
 8009972:	d14d      	bne.n	8009a10 <_strtod_l+0x390>
 8009974:	9904      	ldr	r1, [sp, #16]
 8009976:	4301      	orrs	r1, r0
 8009978:	f47f aec6 	bne.w	8009708 <_strtod_l+0x88>
 800997c:	2b00      	cmp	r3, #0
 800997e:	f47f aee1 	bne.w	8009744 <_strtod_l+0xc4>
 8009982:	2a69      	cmp	r2, #105	; 0x69
 8009984:	d027      	beq.n	80099d6 <_strtod_l+0x356>
 8009986:	dc24      	bgt.n	80099d2 <_strtod_l+0x352>
 8009988:	2a49      	cmp	r2, #73	; 0x49
 800998a:	d024      	beq.n	80099d6 <_strtod_l+0x356>
 800998c:	2a4e      	cmp	r2, #78	; 0x4e
 800998e:	f47f aed9 	bne.w	8009744 <_strtod_l+0xc4>
 8009992:	499f      	ldr	r1, [pc, #636]	; (8009c10 <_strtod_l+0x590>)
 8009994:	a817      	add	r0, sp, #92	; 0x5c
 8009996:	f002 f8d3 	bl	800bb40 <__match>
 800999a:	2800      	cmp	r0, #0
 800999c:	f43f aed2 	beq.w	8009744 <_strtod_l+0xc4>
 80099a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b28      	cmp	r3, #40	; 0x28
 80099a6:	d12d      	bne.n	8009a04 <_strtod_l+0x384>
 80099a8:	499a      	ldr	r1, [pc, #616]	; (8009c14 <_strtod_l+0x594>)
 80099aa:	aa1a      	add	r2, sp, #104	; 0x68
 80099ac:	a817      	add	r0, sp, #92	; 0x5c
 80099ae:	f002 f8db 	bl	800bb68 <__hexnan>
 80099b2:	2805      	cmp	r0, #5
 80099b4:	d126      	bne.n	8009a04 <_strtod_l+0x384>
 80099b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80099bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80099c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80099c4:	e6a0      	b.n	8009708 <_strtod_l+0x88>
 80099c6:	210a      	movs	r1, #10
 80099c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80099cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80099d0:	e7b9      	b.n	8009946 <_strtod_l+0x2c6>
 80099d2:	2a6e      	cmp	r2, #110	; 0x6e
 80099d4:	e7db      	b.n	800998e <_strtod_l+0x30e>
 80099d6:	4990      	ldr	r1, [pc, #576]	; (8009c18 <_strtod_l+0x598>)
 80099d8:	a817      	add	r0, sp, #92	; 0x5c
 80099da:	f002 f8b1 	bl	800bb40 <__match>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f aeb0 	beq.w	8009744 <_strtod_l+0xc4>
 80099e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099e6:	498d      	ldr	r1, [pc, #564]	; (8009c1c <_strtod_l+0x59c>)
 80099e8:	3b01      	subs	r3, #1
 80099ea:	a817      	add	r0, sp, #92	; 0x5c
 80099ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80099ee:	f002 f8a7 	bl	800bb40 <__match>
 80099f2:	b910      	cbnz	r0, 80099fa <_strtod_l+0x37a>
 80099f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099f6:	3301      	adds	r3, #1
 80099f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80099fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009c2c <_strtod_l+0x5ac>
 80099fe:	f04f 0a00 	mov.w	sl, #0
 8009a02:	e681      	b.n	8009708 <_strtod_l+0x88>
 8009a04:	4886      	ldr	r0, [pc, #536]	; (8009c20 <_strtod_l+0x5a0>)
 8009a06:	f003 fa4f 	bl	800cea8 <nan>
 8009a0a:	ec5b ab10 	vmov	sl, fp, d0
 8009a0e:	e67b      	b.n	8009708 <_strtod_l+0x88>
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	9807      	ldr	r0, [sp, #28]
 8009a14:	1af3      	subs	r3, r6, r3
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	bf08      	it	eq
 8009a1a:	462f      	moveq	r7, r5
 8009a1c:	2d10      	cmp	r5, #16
 8009a1e:	9306      	str	r3, [sp, #24]
 8009a20:	46a8      	mov	r8, r5
 8009a22:	bfa8      	it	ge
 8009a24:	f04f 0810 	movge.w	r8, #16
 8009a28:	f7f6 fd8c 	bl	8000544 <__aeabi_ui2d>
 8009a2c:	2d09      	cmp	r5, #9
 8009a2e:	4682      	mov	sl, r0
 8009a30:	468b      	mov	fp, r1
 8009a32:	dd13      	ble.n	8009a5c <_strtod_l+0x3dc>
 8009a34:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <_strtod_l+0x5a4>)
 8009a36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a3e:	f7f6 fdfb 	bl	8000638 <__aeabi_dmul>
 8009a42:	4682      	mov	sl, r0
 8009a44:	4648      	mov	r0, r9
 8009a46:	468b      	mov	fp, r1
 8009a48:	f7f6 fd7c 	bl	8000544 <__aeabi_ui2d>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4650      	mov	r0, sl
 8009a52:	4659      	mov	r1, fp
 8009a54:	f7f6 fc3a 	bl	80002cc <__adddf3>
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	2d0f      	cmp	r5, #15
 8009a5e:	dc38      	bgt.n	8009ad2 <_strtod_l+0x452>
 8009a60:	9b06      	ldr	r3, [sp, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f43f ae50 	beq.w	8009708 <_strtod_l+0x88>
 8009a68:	dd24      	ble.n	8009ab4 <_strtod_l+0x434>
 8009a6a:	2b16      	cmp	r3, #22
 8009a6c:	dc0b      	bgt.n	8009a86 <_strtod_l+0x406>
 8009a6e:	496d      	ldr	r1, [pc, #436]	; (8009c24 <_strtod_l+0x5a4>)
 8009a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	4652      	mov	r2, sl
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	f7f6 fddc 	bl	8000638 <__aeabi_dmul>
 8009a80:	4682      	mov	sl, r0
 8009a82:	468b      	mov	fp, r1
 8009a84:	e640      	b.n	8009708 <_strtod_l+0x88>
 8009a86:	9a06      	ldr	r2, [sp, #24]
 8009a88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	db20      	blt.n	8009ad2 <_strtod_l+0x452>
 8009a90:	4c64      	ldr	r4, [pc, #400]	; (8009c24 <_strtod_l+0x5a4>)
 8009a92:	f1c5 050f 	rsb	r5, r5, #15
 8009a96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aa2:	f7f6 fdc9 	bl	8000638 <__aeabi_dmul>
 8009aa6:	9b06      	ldr	r3, [sp, #24]
 8009aa8:	1b5d      	subs	r5, r3, r5
 8009aaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ab2:	e7e3      	b.n	8009a7c <_strtod_l+0x3fc>
 8009ab4:	9b06      	ldr	r3, [sp, #24]
 8009ab6:	3316      	adds	r3, #22
 8009ab8:	db0b      	blt.n	8009ad2 <_strtod_l+0x452>
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	1b9e      	subs	r6, r3, r6
 8009abe:	4b59      	ldr	r3, [pc, #356]	; (8009c24 <_strtod_l+0x5a4>)
 8009ac0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009ac4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ac8:	4650      	mov	r0, sl
 8009aca:	4659      	mov	r1, fp
 8009acc:	f7f6 fede 	bl	800088c <__aeabi_ddiv>
 8009ad0:	e7d6      	b.n	8009a80 <_strtod_l+0x400>
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	eba5 0808 	sub.w	r8, r5, r8
 8009ad8:	4498      	add	r8, r3
 8009ada:	f1b8 0f00 	cmp.w	r8, #0
 8009ade:	dd74      	ble.n	8009bca <_strtod_l+0x54a>
 8009ae0:	f018 030f 	ands.w	r3, r8, #15
 8009ae4:	d00a      	beq.n	8009afc <_strtod_l+0x47c>
 8009ae6:	494f      	ldr	r1, [pc, #316]	; (8009c24 <_strtod_l+0x5a4>)
 8009ae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009aec:	4652      	mov	r2, sl
 8009aee:	465b      	mov	r3, fp
 8009af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af4:	f7f6 fda0 	bl	8000638 <__aeabi_dmul>
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	f038 080f 	bics.w	r8, r8, #15
 8009b00:	d04f      	beq.n	8009ba2 <_strtod_l+0x522>
 8009b02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b06:	dd22      	ble.n	8009b4e <_strtod_l+0x4ce>
 8009b08:	2500      	movs	r5, #0
 8009b0a:	462e      	mov	r6, r5
 8009b0c:	9507      	str	r5, [sp, #28]
 8009b0e:	9505      	str	r5, [sp, #20]
 8009b10:	2322      	movs	r3, #34	; 0x22
 8009b12:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009c2c <_strtod_l+0x5ac>
 8009b16:	6023      	str	r3, [r4, #0]
 8009b18:	f04f 0a00 	mov.w	sl, #0
 8009b1c:	9b07      	ldr	r3, [sp, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f43f adf2 	beq.w	8009708 <_strtod_l+0x88>
 8009b24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b26:	4620      	mov	r0, r4
 8009b28:	f002 f98e 	bl	800be48 <_Bfree>
 8009b2c:	9905      	ldr	r1, [sp, #20]
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f002 f98a 	bl	800be48 <_Bfree>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4620      	mov	r0, r4
 8009b38:	f002 f986 	bl	800be48 <_Bfree>
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f002 f982 	bl	800be48 <_Bfree>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4620      	mov	r0, r4
 8009b48:	f002 f97e 	bl	800be48 <_Bfree>
 8009b4c:	e5dc      	b.n	8009708 <_strtod_l+0x88>
 8009b4e:	4b36      	ldr	r3, [pc, #216]	; (8009c28 <_strtod_l+0x5a8>)
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	2300      	movs	r3, #0
 8009b54:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009b58:	4650      	mov	r0, sl
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	4699      	mov	r9, r3
 8009b5e:	f1b8 0f01 	cmp.w	r8, #1
 8009b62:	dc21      	bgt.n	8009ba8 <_strtod_l+0x528>
 8009b64:	b10b      	cbz	r3, 8009b6a <_strtod_l+0x4ea>
 8009b66:	4682      	mov	sl, r0
 8009b68:	468b      	mov	fp, r1
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <_strtod_l+0x5a8>)
 8009b6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009b70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009b7c:	f7f6 fd5c 	bl	8000638 <__aeabi_dmul>
 8009b80:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <_strtod_l+0x5ac>)
 8009b82:	460a      	mov	r2, r1
 8009b84:	400b      	ands	r3, r1
 8009b86:	492a      	ldr	r1, [pc, #168]	; (8009c30 <_strtod_l+0x5b0>)
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	4682      	mov	sl, r0
 8009b8c:	d8bc      	bhi.n	8009b08 <_strtod_l+0x488>
 8009b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b92:	428b      	cmp	r3, r1
 8009b94:	bf86      	itte	hi
 8009b96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009c34 <_strtod_l+0x5b4>
 8009b9a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	e084      	b.n	8009cb2 <_strtod_l+0x632>
 8009ba8:	f018 0f01 	tst.w	r8, #1
 8009bac:	d005      	beq.n	8009bba <_strtod_l+0x53a>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f7f6 fd40 	bl	8000638 <__aeabi_dmul>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	9a04      	ldr	r2, [sp, #16]
 8009bbc:	3208      	adds	r2, #8
 8009bbe:	f109 0901 	add.w	r9, r9, #1
 8009bc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bc6:	9204      	str	r2, [sp, #16]
 8009bc8:	e7c9      	b.n	8009b5e <_strtod_l+0x4de>
 8009bca:	d0ea      	beq.n	8009ba2 <_strtod_l+0x522>
 8009bcc:	f1c8 0800 	rsb	r8, r8, #0
 8009bd0:	f018 020f 	ands.w	r2, r8, #15
 8009bd4:	d00a      	beq.n	8009bec <_strtod_l+0x56c>
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <_strtod_l+0x5a4>)
 8009bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fe52 	bl	800088c <__aeabi_ddiv>
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009bf0:	d0d7      	beq.n	8009ba2 <_strtod_l+0x522>
 8009bf2:	f1b8 0f1f 	cmp.w	r8, #31
 8009bf6:	dd1f      	ble.n	8009c38 <_strtod_l+0x5b8>
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	462e      	mov	r6, r5
 8009bfc:	9507      	str	r5, [sp, #28]
 8009bfe:	9505      	str	r5, [sp, #20]
 8009c00:	2322      	movs	r3, #34	; 0x22
 8009c02:	f04f 0a00 	mov.w	sl, #0
 8009c06:	f04f 0b00 	mov.w	fp, #0
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	e786      	b.n	8009b1c <_strtod_l+0x49c>
 8009c0e:	bf00      	nop
 8009c10:	0800d771 	.word	0x0800d771
 8009c14:	0800d7b4 	.word	0x0800d7b4
 8009c18:	0800d769 	.word	0x0800d769
 8009c1c:	0800d8f4 	.word	0x0800d8f4
 8009c20:	0800dc08 	.word	0x0800dc08
 8009c24:	0800dae8 	.word	0x0800dae8
 8009c28:	0800dac0 	.word	0x0800dac0
 8009c2c:	7ff00000 	.word	0x7ff00000
 8009c30:	7ca00000 	.word	0x7ca00000
 8009c34:	7fefffff 	.word	0x7fefffff
 8009c38:	f018 0310 	ands.w	r3, r8, #16
 8009c3c:	bf18      	it	ne
 8009c3e:	236a      	movne	r3, #106	; 0x6a
 8009c40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ff0 <_strtod_l+0x970>
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	4650      	mov	r0, sl
 8009c48:	4659      	mov	r1, fp
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f018 0f01 	tst.w	r8, #1
 8009c50:	d004      	beq.n	8009c5c <_strtod_l+0x5dc>
 8009c52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c56:	f7f6 fcef 	bl	8000638 <__aeabi_dmul>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009c60:	f109 0908 	add.w	r9, r9, #8
 8009c64:	d1f2      	bne.n	8009c4c <_strtod_l+0x5cc>
 8009c66:	b10b      	cbz	r3, 8009c6c <_strtod_l+0x5ec>
 8009c68:	4682      	mov	sl, r0
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	b1c3      	cbz	r3, 8009ca2 <_strtod_l+0x622>
 8009c70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	4659      	mov	r1, fp
 8009c7c:	dd11      	ble.n	8009ca2 <_strtod_l+0x622>
 8009c7e:	2b1f      	cmp	r3, #31
 8009c80:	f340 8124 	ble.w	8009ecc <_strtod_l+0x84c>
 8009c84:	2b34      	cmp	r3, #52	; 0x34
 8009c86:	bfde      	ittt	le
 8009c88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009c8c:	f04f 33ff 	movle.w	r3, #4294967295
 8009c90:	fa03 f202 	lslle.w	r2, r3, r2
 8009c94:	f04f 0a00 	mov.w	sl, #0
 8009c98:	bfcc      	ite	gt
 8009c9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009c9e:	ea02 0b01 	andle.w	fp, r2, r1
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4650      	mov	r0, sl
 8009ca8:	4659      	mov	r1, fp
 8009caa:	f7f6 ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d1a2      	bne.n	8009bf8 <_strtod_l+0x578>
 8009cb2:	9b07      	ldr	r3, [sp, #28]
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	9908      	ldr	r1, [sp, #32]
 8009cb8:	462b      	mov	r3, r5
 8009cba:	463a      	mov	r2, r7
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f002 f92b 	bl	800bf18 <__s2b>
 8009cc2:	9007      	str	r0, [sp, #28]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f43f af1f 	beq.w	8009b08 <_strtod_l+0x488>
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	1b9e      	subs	r6, r3, r6
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bfb4      	ite	lt
 8009cd4:	4633      	movlt	r3, r6
 8009cd6:	2300      	movge	r3, #0
 8009cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	2500      	movs	r5, #0
 8009cde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ce2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ce4:	462e      	mov	r6, r5
 8009ce6:	9b07      	ldr	r3, [sp, #28]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	6859      	ldr	r1, [r3, #4]
 8009cec:	f002 f86c 	bl	800bdc8 <_Balloc>
 8009cf0:	9005      	str	r0, [sp, #20]
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	f43f af0c 	beq.w	8009b10 <_strtod_l+0x490>
 8009cf8:	9b07      	ldr	r3, [sp, #28]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	3202      	adds	r2, #2
 8009cfe:	f103 010c 	add.w	r1, r3, #12
 8009d02:	0092      	lsls	r2, r2, #2
 8009d04:	300c      	adds	r0, #12
 8009d06:	f002 f851 	bl	800bdac <memcpy>
 8009d0a:	ec4b ab10 	vmov	d0, sl, fp
 8009d0e:	aa1a      	add	r2, sp, #104	; 0x68
 8009d10:	a919      	add	r1, sp, #100	; 0x64
 8009d12:	4620      	mov	r0, r4
 8009d14:	f002 fc46 	bl	800c5a4 <__d2b>
 8009d18:	ec4b ab18 	vmov	d8, sl, fp
 8009d1c:	9018      	str	r0, [sp, #96]	; 0x60
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	f43f aef6 	beq.w	8009b10 <_strtod_l+0x490>
 8009d24:	2101      	movs	r1, #1
 8009d26:	4620      	mov	r0, r4
 8009d28:	f002 f990 	bl	800c04c <__i2b>
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f aeee 	beq.w	8009b10 <_strtod_l+0x490>
 8009d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d36:	9904      	ldr	r1, [sp, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfab      	itete	ge
 8009d3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009d3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009d40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009d46:	bfac      	ite	ge
 8009d48:	eb03 0902 	addge.w	r9, r3, r2
 8009d4c:	1ad7      	sublt	r7, r2, r3
 8009d4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d50:	eba3 0801 	sub.w	r8, r3, r1
 8009d54:	4490      	add	r8, r2
 8009d56:	4ba1      	ldr	r3, [pc, #644]	; (8009fdc <_strtod_l+0x95c>)
 8009d58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d5c:	4598      	cmp	r8, r3
 8009d5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d62:	f280 80c7 	bge.w	8009ef4 <_strtod_l+0x874>
 8009d66:	eba3 0308 	sub.w	r3, r3, r8
 8009d6a:	2b1f      	cmp	r3, #31
 8009d6c:	eba2 0203 	sub.w	r2, r2, r3
 8009d70:	f04f 0101 	mov.w	r1, #1
 8009d74:	f300 80b1 	bgt.w	8009eda <_strtod_l+0x85a>
 8009d78:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9308      	str	r3, [sp, #32]
 8009d82:	eb09 0802 	add.w	r8, r9, r2
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	45c1      	cmp	r9, r8
 8009d8a:	4417      	add	r7, r2
 8009d8c:	441f      	add	r7, r3
 8009d8e:	464b      	mov	r3, r9
 8009d90:	bfa8      	it	ge
 8009d92:	4643      	movge	r3, r8
 8009d94:	42bb      	cmp	r3, r7
 8009d96:	bfa8      	it	ge
 8009d98:	463b      	movge	r3, r7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfc2      	ittt	gt
 8009d9e:	eba8 0803 	subgt.w	r8, r8, r3
 8009da2:	1aff      	subgt	r7, r7, r3
 8009da4:	eba9 0903 	subgt.w	r9, r9, r3
 8009da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd17      	ble.n	8009dde <_strtod_l+0x75e>
 8009dae:	4631      	mov	r1, r6
 8009db0:	461a      	mov	r2, r3
 8009db2:	4620      	mov	r0, r4
 8009db4:	f002 fa0a 	bl	800c1cc <__pow5mult>
 8009db8:	4606      	mov	r6, r0
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f43f aea8 	beq.w	8009b10 <_strtod_l+0x490>
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f002 f957 	bl	800c078 <__multiply>
 8009dca:	900b      	str	r0, [sp, #44]	; 0x2c
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	f43f ae9f 	beq.w	8009b10 <_strtod_l+0x490>
 8009dd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f002 f837 	bl	800be48 <_Bfree>
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	9318      	str	r3, [sp, #96]	; 0x60
 8009dde:	f1b8 0f00 	cmp.w	r8, #0
 8009de2:	f300 808c 	bgt.w	8009efe <_strtod_l+0x87e>
 8009de6:	9b06      	ldr	r3, [sp, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dd08      	ble.n	8009dfe <_strtod_l+0x77e>
 8009dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dee:	9905      	ldr	r1, [sp, #20]
 8009df0:	4620      	mov	r0, r4
 8009df2:	f002 f9eb 	bl	800c1cc <__pow5mult>
 8009df6:	9005      	str	r0, [sp, #20]
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	f43f ae89 	beq.w	8009b10 <_strtod_l+0x490>
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	dd08      	ble.n	8009e14 <_strtod_l+0x794>
 8009e02:	9905      	ldr	r1, [sp, #20]
 8009e04:	463a      	mov	r2, r7
 8009e06:	4620      	mov	r0, r4
 8009e08:	f002 fa3a 	bl	800c280 <__lshift>
 8009e0c:	9005      	str	r0, [sp, #20]
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f ae7e 	beq.w	8009b10 <_strtod_l+0x490>
 8009e14:	f1b9 0f00 	cmp.w	r9, #0
 8009e18:	dd08      	ble.n	8009e2c <_strtod_l+0x7ac>
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f002 fa2e 	bl	800c280 <__lshift>
 8009e24:	4606      	mov	r6, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f ae72 	beq.w	8009b10 <_strtod_l+0x490>
 8009e2c:	9a05      	ldr	r2, [sp, #20]
 8009e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e30:	4620      	mov	r0, r4
 8009e32:	f002 fab1 	bl	800c398 <__mdiff>
 8009e36:	4605      	mov	r5, r0
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f43f ae69 	beq.w	8009b10 <_strtod_l+0x490>
 8009e3e:	68c3      	ldr	r3, [r0, #12]
 8009e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e42:	2300      	movs	r3, #0
 8009e44:	60c3      	str	r3, [r0, #12]
 8009e46:	4631      	mov	r1, r6
 8009e48:	f002 fa8a 	bl	800c360 <__mcmp>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	da60      	bge.n	8009f12 <_strtod_l+0x892>
 8009e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e52:	ea53 030a 	orrs.w	r3, r3, sl
 8009e56:	f040 8082 	bne.w	8009f5e <_strtod_l+0x8de>
 8009e5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d17d      	bne.n	8009f5e <_strtod_l+0x8de>
 8009e62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e6e:	d976      	bls.n	8009f5e <_strtod_l+0x8de>
 8009e70:	696b      	ldr	r3, [r5, #20]
 8009e72:	b913      	cbnz	r3, 8009e7a <_strtod_l+0x7fa>
 8009e74:	692b      	ldr	r3, [r5, #16]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	dd71      	ble.n	8009f5e <_strtod_l+0x8de>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f002 f9fe 	bl	800c280 <__lshift>
 8009e84:	4631      	mov	r1, r6
 8009e86:	4605      	mov	r5, r0
 8009e88:	f002 fa6a 	bl	800c360 <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	dd66      	ble.n	8009f5e <_strtod_l+0x8de>
 8009e90:	9904      	ldr	r1, [sp, #16]
 8009e92:	4a53      	ldr	r2, [pc, #332]	; (8009fe0 <_strtod_l+0x960>)
 8009e94:	465b      	mov	r3, fp
 8009e96:	2900      	cmp	r1, #0
 8009e98:	f000 8081 	beq.w	8009f9e <_strtod_l+0x91e>
 8009e9c:	ea02 010b 	and.w	r1, r2, fp
 8009ea0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ea4:	dc7b      	bgt.n	8009f9e <_strtod_l+0x91e>
 8009ea6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009eaa:	f77f aea9 	ble.w	8009c00 <_strtod_l+0x580>
 8009eae:	4b4d      	ldr	r3, [pc, #308]	; (8009fe4 <_strtod_l+0x964>)
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	4659      	mov	r1, fp
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f7f6 fbbf 	bl	8000638 <__aeabi_dmul>
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4303      	orrs	r3, r0
 8009ebe:	bf08      	it	eq
 8009ec0:	2322      	moveq	r3, #34	; 0x22
 8009ec2:	4682      	mov	sl, r0
 8009ec4:	468b      	mov	fp, r1
 8009ec6:	bf08      	it	eq
 8009ec8:	6023      	streq	r3, [r4, #0]
 8009eca:	e62b      	b.n	8009b24 <_strtod_l+0x4a4>
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ed8:	e6e3      	b.n	8009ca2 <_strtod_l+0x622>
 8009eda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ede:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ee2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ee6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009eea:	fa01 f308 	lsl.w	r3, r1, r8
 8009eee:	9308      	str	r3, [sp, #32]
 8009ef0:	910d      	str	r1, [sp, #52]	; 0x34
 8009ef2:	e746      	b.n	8009d82 <_strtod_l+0x702>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	930d      	str	r3, [sp, #52]	; 0x34
 8009efc:	e741      	b.n	8009d82 <_strtod_l+0x702>
 8009efe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f00:	4642      	mov	r2, r8
 8009f02:	4620      	mov	r0, r4
 8009f04:	f002 f9bc 	bl	800c280 <__lshift>
 8009f08:	9018      	str	r0, [sp, #96]	; 0x60
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f47f af6b 	bne.w	8009de6 <_strtod_l+0x766>
 8009f10:	e5fe      	b.n	8009b10 <_strtod_l+0x490>
 8009f12:	465f      	mov	r7, fp
 8009f14:	d16e      	bne.n	8009ff4 <_strtod_l+0x974>
 8009f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1c:	b342      	cbz	r2, 8009f70 <_strtod_l+0x8f0>
 8009f1e:	4a32      	ldr	r2, [pc, #200]	; (8009fe8 <_strtod_l+0x968>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d128      	bne.n	8009f76 <_strtod_l+0x8f6>
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	4651      	mov	r1, sl
 8009f28:	b1eb      	cbz	r3, 8009f66 <_strtod_l+0x8e6>
 8009f2a:	4b2d      	ldr	r3, [pc, #180]	; (8009fe0 <_strtod_l+0x960>)
 8009f2c:	403b      	ands	r3, r7
 8009f2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f32:	f04f 32ff 	mov.w	r2, #4294967295
 8009f36:	d819      	bhi.n	8009f6c <_strtod_l+0x8ec>
 8009f38:	0d1b      	lsrs	r3, r3, #20
 8009f3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f42:	4299      	cmp	r1, r3
 8009f44:	d117      	bne.n	8009f76 <_strtod_l+0x8f6>
 8009f46:	4b29      	ldr	r3, [pc, #164]	; (8009fec <_strtod_l+0x96c>)
 8009f48:	429f      	cmp	r7, r3
 8009f4a:	d102      	bne.n	8009f52 <_strtod_l+0x8d2>
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	f43f addf 	beq.w	8009b10 <_strtod_l+0x490>
 8009f52:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <_strtod_l+0x960>)
 8009f54:	403b      	ands	r3, r7
 8009f56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f5a:	f04f 0a00 	mov.w	sl, #0
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1a4      	bne.n	8009eae <_strtod_l+0x82e>
 8009f64:	e5de      	b.n	8009b24 <_strtod_l+0x4a4>
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6a:	e7ea      	b.n	8009f42 <_strtod_l+0x8c2>
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	e7e8      	b.n	8009f42 <_strtod_l+0x8c2>
 8009f70:	ea53 030a 	orrs.w	r3, r3, sl
 8009f74:	d08c      	beq.n	8009e90 <_strtod_l+0x810>
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	b1db      	cbz	r3, 8009fb2 <_strtod_l+0x932>
 8009f7a:	423b      	tst	r3, r7
 8009f7c:	d0ef      	beq.n	8009f5e <_strtod_l+0x8de>
 8009f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f80:	9a04      	ldr	r2, [sp, #16]
 8009f82:	4650      	mov	r0, sl
 8009f84:	4659      	mov	r1, fp
 8009f86:	b1c3      	cbz	r3, 8009fba <_strtod_l+0x93a>
 8009f88:	f7ff fb5c 	bl	8009644 <sulp>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	ec51 0b18 	vmov	r0, r1, d8
 8009f94:	f7f6 f99a 	bl	80002cc <__adddf3>
 8009f98:	4682      	mov	sl, r0
 8009f9a:	468b      	mov	fp, r1
 8009f9c:	e7df      	b.n	8009f5e <_strtod_l+0x8de>
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009fa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009fac:	f04f 3aff 	mov.w	sl, #4294967295
 8009fb0:	e7d5      	b.n	8009f5e <_strtod_l+0x8de>
 8009fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb4:	ea13 0f0a 	tst.w	r3, sl
 8009fb8:	e7e0      	b.n	8009f7c <_strtod_l+0x8fc>
 8009fba:	f7ff fb43 	bl	8009644 <sulp>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	ec51 0b18 	vmov	r0, r1, d8
 8009fc6:	f7f6 f97f 	bl	80002c8 <__aeabi_dsub>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	f7f6 fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d0c1      	beq.n	8009f5e <_strtod_l+0x8de>
 8009fda:	e611      	b.n	8009c00 <_strtod_l+0x580>
 8009fdc:	fffffc02 	.word	0xfffffc02
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	39500000 	.word	0x39500000
 8009fe8:	000fffff 	.word	0x000fffff
 8009fec:	7fefffff 	.word	0x7fefffff
 8009ff0:	0800d7c8 	.word	0x0800d7c8
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f002 fb30 	bl	800c65c <__ratio>
 8009ffc:	ec59 8b10 	vmov	r8, r9, d0
 800a000:	ee10 0a10 	vmov	r0, s0
 800a004:	2200      	movs	r2, #0
 800a006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 fd90 	bl	8000b30 <__aeabi_dcmple>
 800a010:	2800      	cmp	r0, #0
 800a012:	d07a      	beq.n	800a10a <_strtod_l+0xa8a>
 800a014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d04a      	beq.n	800a0b0 <_strtod_l+0xa30>
 800a01a:	4b95      	ldr	r3, [pc, #596]	; (800a270 <_strtod_l+0xbf0>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a022:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a270 <_strtod_l+0xbf0>
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	4b92      	ldr	r3, [pc, #584]	; (800a274 <_strtod_l+0xbf4>)
 800a02c:	403b      	ands	r3, r7
 800a02e:	930d      	str	r3, [sp, #52]	; 0x34
 800a030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a032:	4b91      	ldr	r3, [pc, #580]	; (800a278 <_strtod_l+0xbf8>)
 800a034:	429a      	cmp	r2, r3
 800a036:	f040 80b0 	bne.w	800a19a <_strtod_l+0xb1a>
 800a03a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a03e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a042:	ec4b ab10 	vmov	d0, sl, fp
 800a046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a04a:	f002 fa2f 	bl	800c4ac <__ulp>
 800a04e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a052:	ec53 2b10 	vmov	r2, r3, d0
 800a056:	f7f6 faef 	bl	8000638 <__aeabi_dmul>
 800a05a:	4652      	mov	r2, sl
 800a05c:	465b      	mov	r3, fp
 800a05e:	f7f6 f935 	bl	80002cc <__adddf3>
 800a062:	460b      	mov	r3, r1
 800a064:	4983      	ldr	r1, [pc, #524]	; (800a274 <_strtod_l+0xbf4>)
 800a066:	4a85      	ldr	r2, [pc, #532]	; (800a27c <_strtod_l+0xbfc>)
 800a068:	4019      	ands	r1, r3
 800a06a:	4291      	cmp	r1, r2
 800a06c:	4682      	mov	sl, r0
 800a06e:	d960      	bls.n	800a132 <_strtod_l+0xab2>
 800a070:	ee18 3a90 	vmov	r3, s17
 800a074:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a078:	4293      	cmp	r3, r2
 800a07a:	d104      	bne.n	800a086 <_strtod_l+0xa06>
 800a07c:	ee18 3a10 	vmov	r3, s16
 800a080:	3301      	adds	r3, #1
 800a082:	f43f ad45 	beq.w	8009b10 <_strtod_l+0x490>
 800a086:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a288 <_strtod_l+0xc08>
 800a08a:	f04f 3aff 	mov.w	sl, #4294967295
 800a08e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a090:	4620      	mov	r0, r4
 800a092:	f001 fed9 	bl	800be48 <_Bfree>
 800a096:	9905      	ldr	r1, [sp, #20]
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 fed5 	bl	800be48 <_Bfree>
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f001 fed1 	bl	800be48 <_Bfree>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f001 fecd 	bl	800be48 <_Bfree>
 800a0ae:	e61a      	b.n	8009ce6 <_strtod_l+0x666>
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	d11b      	bne.n	800a0ee <_strtod_l+0xa6e>
 800a0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ba:	b9f3      	cbnz	r3, 800a0fa <_strtod_l+0xa7a>
 800a0bc:	4b6c      	ldr	r3, [pc, #432]	; (800a270 <_strtod_l+0xbf0>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	f7f6 fd2a 	bl	8000b1c <__aeabi_dcmplt>
 800a0c8:	b9d0      	cbnz	r0, 800a100 <_strtod_l+0xa80>
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	4b6c      	ldr	r3, [pc, #432]	; (800a280 <_strtod_l+0xc00>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f7f6 fab1 	bl	8000638 <__aeabi_dmul>
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	4689      	mov	r9, r1
 800a0da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a0e2:	9315      	str	r3, [sp, #84]	; 0x54
 800a0e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0ec:	e79d      	b.n	800a02a <_strtod_l+0x9aa>
 800a0ee:	f1ba 0f01 	cmp.w	sl, #1
 800a0f2:	d102      	bne.n	800a0fa <_strtod_l+0xa7a>
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	f43f ad83 	beq.w	8009c00 <_strtod_l+0x580>
 800a0fa:	4b62      	ldr	r3, [pc, #392]	; (800a284 <_strtod_l+0xc04>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	e78e      	b.n	800a01e <_strtod_l+0x99e>
 800a100:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a280 <_strtod_l+0xc00>
 800a104:	f04f 0800 	mov.w	r8, #0
 800a108:	e7e7      	b.n	800a0da <_strtod_l+0xa5a>
 800a10a:	4b5d      	ldr	r3, [pc, #372]	; (800a280 <_strtod_l+0xc00>)
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	2200      	movs	r2, #0
 800a112:	f7f6 fa91 	bl	8000638 <__aeabi_dmul>
 800a116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a118:	4680      	mov	r8, r0
 800a11a:	4689      	mov	r9, r1
 800a11c:	b933      	cbnz	r3, 800a12c <_strtod_l+0xaac>
 800a11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a122:	900e      	str	r0, [sp, #56]	; 0x38
 800a124:	930f      	str	r3, [sp, #60]	; 0x3c
 800a126:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a12a:	e7dd      	b.n	800a0e8 <_strtod_l+0xa68>
 800a12c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a130:	e7f9      	b.n	800a126 <_strtod_l+0xaa6>
 800a132:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1a8      	bne.n	800a08e <_strtod_l+0xa0e>
 800a13c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a142:	0d1b      	lsrs	r3, r3, #20
 800a144:	051b      	lsls	r3, r3, #20
 800a146:	429a      	cmp	r2, r3
 800a148:	d1a1      	bne.n	800a08e <_strtod_l+0xa0e>
 800a14a:	4640      	mov	r0, r8
 800a14c:	4649      	mov	r1, r9
 800a14e:	f7f6 fdd3 	bl	8000cf8 <__aeabi_d2lz>
 800a152:	f7f6 fa43 	bl	80005dc <__aeabi_l2d>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	f7f6 f8b3 	bl	80002c8 <__aeabi_dsub>
 800a162:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a168:	ea43 030a 	orr.w	r3, r3, sl
 800a16c:	4313      	orrs	r3, r2
 800a16e:	4680      	mov	r8, r0
 800a170:	4689      	mov	r9, r1
 800a172:	d055      	beq.n	800a220 <_strtod_l+0xba0>
 800a174:	a336      	add	r3, pc, #216	; (adr r3, 800a250 <_strtod_l+0xbd0>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f47f acd0 	bne.w	8009b24 <_strtod_l+0x4a4>
 800a184:	a334      	add	r3, pc, #208	; (adr r3, 800a258 <_strtod_l+0xbd8>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	f7f6 fce3 	bl	8000b58 <__aeabi_dcmpgt>
 800a192:	2800      	cmp	r0, #0
 800a194:	f43f af7b 	beq.w	800a08e <_strtod_l+0xa0e>
 800a198:	e4c4      	b.n	8009b24 <_strtod_l+0x4a4>
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	b333      	cbz	r3, 800a1ec <_strtod_l+0xb6c>
 800a19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1a4:	d822      	bhi.n	800a1ec <_strtod_l+0xb6c>
 800a1a6:	a32e      	add	r3, pc, #184	; (adr r3, 800a260 <_strtod_l+0xbe0>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 fcbe 	bl	8000b30 <__aeabi_dcmple>
 800a1b4:	b1a0      	cbz	r0, 800a1e0 <_strtod_l+0xb60>
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	f7f6 fd15 	bl	8000be8 <__aeabi_d2uiz>
 800a1be:	2801      	cmp	r0, #1
 800a1c0:	bf38      	it	cc
 800a1c2:	2001      	movcc	r0, #1
 800a1c4:	f7f6 f9be 	bl	8000544 <__aeabi_ui2d>
 800a1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	4689      	mov	r9, r1
 800a1ce:	bb23      	cbnz	r3, 800a21a <_strtod_l+0xb9a>
 800a1d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1d4:	9010      	str	r0, [sp, #64]	; 0x40
 800a1d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a1d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a1e8:	1a9b      	subs	r3, r3, r2
 800a1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1f4:	eef0 0a68 	vmov.f32	s1, s17
 800a1f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1fc:	f002 f956 	bl	800c4ac <__ulp>
 800a200:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a204:	ec53 2b10 	vmov	r2, r3, d0
 800a208:	f7f6 fa16 	bl	8000638 <__aeabi_dmul>
 800a20c:	ec53 2b18 	vmov	r2, r3, d8
 800a210:	f7f6 f85c 	bl	80002cc <__adddf3>
 800a214:	4682      	mov	sl, r0
 800a216:	468b      	mov	fp, r1
 800a218:	e78d      	b.n	800a136 <_strtod_l+0xab6>
 800a21a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a21e:	e7db      	b.n	800a1d8 <_strtod_l+0xb58>
 800a220:	a311      	add	r3, pc, #68	; (adr r3, 800a268 <_strtod_l+0xbe8>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 fc79 	bl	8000b1c <__aeabi_dcmplt>
 800a22a:	e7b2      	b.n	800a192 <_strtod_l+0xb12>
 800a22c:	2300      	movs	r3, #0
 800a22e:	930a      	str	r3, [sp, #40]	; 0x28
 800a230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	f7ff ba6b 	b.w	8009710 <_strtod_l+0x90>
 800a23a:	2a65      	cmp	r2, #101	; 0x65
 800a23c:	f43f ab5f 	beq.w	80098fe <_strtod_l+0x27e>
 800a240:	2a45      	cmp	r2, #69	; 0x45
 800a242:	f43f ab5c 	beq.w	80098fe <_strtod_l+0x27e>
 800a246:	2301      	movs	r3, #1
 800a248:	f7ff bb94 	b.w	8009974 <_strtod_l+0x2f4>
 800a24c:	f3af 8000 	nop.w
 800a250:	94a03595 	.word	0x94a03595
 800a254:	3fdfffff 	.word	0x3fdfffff
 800a258:	35afe535 	.word	0x35afe535
 800a25c:	3fe00000 	.word	0x3fe00000
 800a260:	ffc00000 	.word	0xffc00000
 800a264:	41dfffff 	.word	0x41dfffff
 800a268:	94a03595 	.word	0x94a03595
 800a26c:	3fcfffff 	.word	0x3fcfffff
 800a270:	3ff00000 	.word	0x3ff00000
 800a274:	7ff00000 	.word	0x7ff00000
 800a278:	7fe00000 	.word	0x7fe00000
 800a27c:	7c9fffff 	.word	0x7c9fffff
 800a280:	3fe00000 	.word	0x3fe00000
 800a284:	bff00000 	.word	0xbff00000
 800a288:	7fefffff 	.word	0x7fefffff

0800a28c <_strtod_r>:
 800a28c:	4b01      	ldr	r3, [pc, #4]	; (800a294 <_strtod_r+0x8>)
 800a28e:	f7ff b9f7 	b.w	8009680 <_strtod_l>
 800a292:	bf00      	nop
 800a294:	20000090 	.word	0x20000090

0800a298 <_strtol_l.constprop.0>:
 800a298:	2b01      	cmp	r3, #1
 800a29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29e:	d001      	beq.n	800a2a4 <_strtol_l.constprop.0+0xc>
 800a2a0:	2b24      	cmp	r3, #36	; 0x24
 800a2a2:	d906      	bls.n	800a2b2 <_strtol_l.constprop.0+0x1a>
 800a2a4:	f7fe f974 	bl	8008590 <__errno>
 800a2a8:	2316      	movs	r3, #22
 800a2aa:	6003      	str	r3, [r0, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a398 <_strtol_l.constprop.0+0x100>
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	462e      	mov	r6, r5
 800a2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a2c2:	f017 0708 	ands.w	r7, r7, #8
 800a2c6:	d1f7      	bne.n	800a2b8 <_strtol_l.constprop.0+0x20>
 800a2c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ca:	d132      	bne.n	800a332 <_strtol_l.constprop.0+0x9a>
 800a2cc:	782c      	ldrb	r4, [r5, #0]
 800a2ce:	2701      	movs	r7, #1
 800a2d0:	1cb5      	adds	r5, r6, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05b      	beq.n	800a38e <_strtol_l.constprop.0+0xf6>
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d109      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a2da:	2c30      	cmp	r4, #48	; 0x30
 800a2dc:	d107      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a2de:	782c      	ldrb	r4, [r5, #0]
 800a2e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2e4:	2c58      	cmp	r4, #88	; 0x58
 800a2e6:	d14d      	bne.n	800a384 <_strtol_l.constprop.0+0xec>
 800a2e8:	786c      	ldrb	r4, [r5, #1]
 800a2ea:	2310      	movs	r3, #16
 800a2ec:	3502      	adds	r5, #2
 800a2ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2f6:	f04f 0c00 	mov.w	ip, #0
 800a2fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2fe:	4666      	mov	r6, ip
 800a300:	fb03 8a19 	mls	sl, r3, r9, r8
 800a304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a308:	f1be 0f09 	cmp.w	lr, #9
 800a30c:	d816      	bhi.n	800a33c <_strtol_l.constprop.0+0xa4>
 800a30e:	4674      	mov	r4, lr
 800a310:	42a3      	cmp	r3, r4
 800a312:	dd24      	ble.n	800a35e <_strtol_l.constprop.0+0xc6>
 800a314:	f1bc 0f00 	cmp.w	ip, #0
 800a318:	db1e      	blt.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a31a:	45b1      	cmp	r9, r6
 800a31c:	d31c      	bcc.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a31e:	d101      	bne.n	800a324 <_strtol_l.constprop.0+0x8c>
 800a320:	45a2      	cmp	sl, r4
 800a322:	db19      	blt.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a324:	fb06 4603 	mla	r6, r6, r3, r4
 800a328:	f04f 0c01 	mov.w	ip, #1
 800a32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a330:	e7e8      	b.n	800a304 <_strtol_l.constprop.0+0x6c>
 800a332:	2c2b      	cmp	r4, #43	; 0x2b
 800a334:	bf04      	itt	eq
 800a336:	782c      	ldrbeq	r4, [r5, #0]
 800a338:	1cb5      	addeq	r5, r6, #2
 800a33a:	e7ca      	b.n	800a2d2 <_strtol_l.constprop.0+0x3a>
 800a33c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a340:	f1be 0f19 	cmp.w	lr, #25
 800a344:	d801      	bhi.n	800a34a <_strtol_l.constprop.0+0xb2>
 800a346:	3c37      	subs	r4, #55	; 0x37
 800a348:	e7e2      	b.n	800a310 <_strtol_l.constprop.0+0x78>
 800a34a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a34e:	f1be 0f19 	cmp.w	lr, #25
 800a352:	d804      	bhi.n	800a35e <_strtol_l.constprop.0+0xc6>
 800a354:	3c57      	subs	r4, #87	; 0x57
 800a356:	e7db      	b.n	800a310 <_strtol_l.constprop.0+0x78>
 800a358:	f04f 3cff 	mov.w	ip, #4294967295
 800a35c:	e7e6      	b.n	800a32c <_strtol_l.constprop.0+0x94>
 800a35e:	f1bc 0f00 	cmp.w	ip, #0
 800a362:	da05      	bge.n	800a370 <_strtol_l.constprop.0+0xd8>
 800a364:	2322      	movs	r3, #34	; 0x22
 800a366:	6003      	str	r3, [r0, #0]
 800a368:	4646      	mov	r6, r8
 800a36a:	b942      	cbnz	r2, 800a37e <_strtol_l.constprop.0+0xe6>
 800a36c:	4630      	mov	r0, r6
 800a36e:	e79e      	b.n	800a2ae <_strtol_l.constprop.0+0x16>
 800a370:	b107      	cbz	r7, 800a374 <_strtol_l.constprop.0+0xdc>
 800a372:	4276      	negs	r6, r6
 800a374:	2a00      	cmp	r2, #0
 800a376:	d0f9      	beq.n	800a36c <_strtol_l.constprop.0+0xd4>
 800a378:	f1bc 0f00 	cmp.w	ip, #0
 800a37c:	d000      	beq.n	800a380 <_strtol_l.constprop.0+0xe8>
 800a37e:	1e69      	subs	r1, r5, #1
 800a380:	6011      	str	r1, [r2, #0]
 800a382:	e7f3      	b.n	800a36c <_strtol_l.constprop.0+0xd4>
 800a384:	2430      	movs	r4, #48	; 0x30
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1b1      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a38a:	2308      	movs	r3, #8
 800a38c:	e7af      	b.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a38e:	2c30      	cmp	r4, #48	; 0x30
 800a390:	d0a5      	beq.n	800a2de <_strtol_l.constprop.0+0x46>
 800a392:	230a      	movs	r3, #10
 800a394:	e7ab      	b.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a396:	bf00      	nop
 800a398:	0800d7f1 	.word	0x0800d7f1

0800a39c <_strtol_r>:
 800a39c:	f7ff bf7c 	b.w	800a298 <_strtol_l.constprop.0>

0800a3a0 <_vsiprintf_r>:
 800a3a0:	b500      	push	{lr}
 800a3a2:	b09b      	sub	sp, #108	; 0x6c
 800a3a4:	9100      	str	r1, [sp, #0]
 800a3a6:	9104      	str	r1, [sp, #16]
 800a3a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3ac:	9105      	str	r1, [sp, #20]
 800a3ae:	9102      	str	r1, [sp, #8]
 800a3b0:	4905      	ldr	r1, [pc, #20]	; (800a3c8 <_vsiprintf_r+0x28>)
 800a3b2:	9103      	str	r1, [sp, #12]
 800a3b4:	4669      	mov	r1, sp
 800a3b6:	f002 fb1b 	bl	800c9f0 <_svfiprintf_r>
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	b01b      	add	sp, #108	; 0x6c
 800a3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3c6:	bf00      	nop
 800a3c8:	ffff0208 	.word	0xffff0208

0800a3cc <vsiprintf>:
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	4802      	ldr	r0, [pc, #8]	; (800a3dc <vsiprintf+0x10>)
 800a3d4:	6800      	ldr	r0, [r0, #0]
 800a3d6:	f7ff bfe3 	b.w	800a3a0 <_vsiprintf_r>
 800a3da:	bf00      	nop
 800a3dc:	20000028 	.word	0x20000028

0800a3e0 <__swbuf_r>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	460e      	mov	r6, r1
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	b118      	cbz	r0, 800a3f2 <__swbuf_r+0x12>
 800a3ea:	6983      	ldr	r3, [r0, #24]
 800a3ec:	b90b      	cbnz	r3, 800a3f2 <__swbuf_r+0x12>
 800a3ee:	f001 f84b 	bl	800b488 <__sinit>
 800a3f2:	4b21      	ldr	r3, [pc, #132]	; (800a478 <__swbuf_r+0x98>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d12b      	bne.n	800a450 <__swbuf_r+0x70>
 800a3f8:	686c      	ldr	r4, [r5, #4]
 800a3fa:	69a3      	ldr	r3, [r4, #24]
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	071a      	lsls	r2, r3, #28
 800a402:	d52f      	bpl.n	800a464 <__swbuf_r+0x84>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	b36b      	cbz	r3, 800a464 <__swbuf_r+0x84>
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	1ac0      	subs	r0, r0, r3
 800a40e:	6963      	ldr	r3, [r4, #20]
 800a410:	b2f6      	uxtb	r6, r6
 800a412:	4283      	cmp	r3, r0
 800a414:	4637      	mov	r7, r6
 800a416:	dc04      	bgt.n	800a422 <__swbuf_r+0x42>
 800a418:	4621      	mov	r1, r4
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 ffa0 	bl	800b360 <_fflush_r>
 800a420:	bb30      	cbnz	r0, 800a470 <__swbuf_r+0x90>
 800a422:	68a3      	ldr	r3, [r4, #8]
 800a424:	3b01      	subs	r3, #1
 800a426:	60a3      	str	r3, [r4, #8]
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	6022      	str	r2, [r4, #0]
 800a42e:	701e      	strb	r6, [r3, #0]
 800a430:	6963      	ldr	r3, [r4, #20]
 800a432:	3001      	adds	r0, #1
 800a434:	4283      	cmp	r3, r0
 800a436:	d004      	beq.n	800a442 <__swbuf_r+0x62>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	07db      	lsls	r3, r3, #31
 800a43c:	d506      	bpl.n	800a44c <__swbuf_r+0x6c>
 800a43e:	2e0a      	cmp	r6, #10
 800a440:	d104      	bne.n	800a44c <__swbuf_r+0x6c>
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f000 ff8b 	bl	800b360 <_fflush_r>
 800a44a:	b988      	cbnz	r0, 800a470 <__swbuf_r+0x90>
 800a44c:	4638      	mov	r0, r7
 800a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <__swbuf_r+0x9c>)
 800a452:	429c      	cmp	r4, r3
 800a454:	d101      	bne.n	800a45a <__swbuf_r+0x7a>
 800a456:	68ac      	ldr	r4, [r5, #8]
 800a458:	e7cf      	b.n	800a3fa <__swbuf_r+0x1a>
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <__swbuf_r+0xa0>)
 800a45c:	429c      	cmp	r4, r3
 800a45e:	bf08      	it	eq
 800a460:	68ec      	ldreq	r4, [r5, #12]
 800a462:	e7ca      	b.n	800a3fa <__swbuf_r+0x1a>
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f80c 	bl	800a484 <__swsetup_r>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d0cb      	beq.n	800a408 <__swbuf_r+0x28>
 800a470:	f04f 37ff 	mov.w	r7, #4294967295
 800a474:	e7ea      	b.n	800a44c <__swbuf_r+0x6c>
 800a476:	bf00      	nop
 800a478:	0800d9a4 	.word	0x0800d9a4
 800a47c:	0800d9c4 	.word	0x0800d9c4
 800a480:	0800d984 	.word	0x0800d984

0800a484 <__swsetup_r>:
 800a484:	4b32      	ldr	r3, [pc, #200]	; (800a550 <__swsetup_r+0xcc>)
 800a486:	b570      	push	{r4, r5, r6, lr}
 800a488:	681d      	ldr	r5, [r3, #0]
 800a48a:	4606      	mov	r6, r0
 800a48c:	460c      	mov	r4, r1
 800a48e:	b125      	cbz	r5, 800a49a <__swsetup_r+0x16>
 800a490:	69ab      	ldr	r3, [r5, #24]
 800a492:	b913      	cbnz	r3, 800a49a <__swsetup_r+0x16>
 800a494:	4628      	mov	r0, r5
 800a496:	f000 fff7 	bl	800b488 <__sinit>
 800a49a:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <__swsetup_r+0xd0>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d10f      	bne.n	800a4c0 <__swsetup_r+0x3c>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4a8:	0719      	lsls	r1, r3, #28
 800a4aa:	d42c      	bmi.n	800a506 <__swsetup_r+0x82>
 800a4ac:	06dd      	lsls	r5, r3, #27
 800a4ae:	d411      	bmi.n	800a4d4 <__swsetup_r+0x50>
 800a4b0:	2309      	movs	r3, #9
 800a4b2:	6033      	str	r3, [r6, #0]
 800a4b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a4be:	e03e      	b.n	800a53e <__swsetup_r+0xba>
 800a4c0:	4b25      	ldr	r3, [pc, #148]	; (800a558 <__swsetup_r+0xd4>)
 800a4c2:	429c      	cmp	r4, r3
 800a4c4:	d101      	bne.n	800a4ca <__swsetup_r+0x46>
 800a4c6:	68ac      	ldr	r4, [r5, #8]
 800a4c8:	e7eb      	b.n	800a4a2 <__swsetup_r+0x1e>
 800a4ca:	4b24      	ldr	r3, [pc, #144]	; (800a55c <__swsetup_r+0xd8>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	bf08      	it	eq
 800a4d0:	68ec      	ldreq	r4, [r5, #12]
 800a4d2:	e7e6      	b.n	800a4a2 <__swsetup_r+0x1e>
 800a4d4:	0758      	lsls	r0, r3, #29
 800a4d6:	d512      	bpl.n	800a4fe <__swsetup_r+0x7a>
 800a4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4da:	b141      	cbz	r1, 800a4ee <__swsetup_r+0x6a>
 800a4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	d002      	beq.n	800a4ea <__swsetup_r+0x66>
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f002 f947 	bl	800c778 <_free_r>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6063      	str	r3, [r4, #4]
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f043 0308 	orr.w	r3, r3, #8
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	b94b      	cbnz	r3, 800a51e <__swsetup_r+0x9a>
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a514:	d003      	beq.n	800a51e <__swsetup_r+0x9a>
 800a516:	4621      	mov	r1, r4
 800a518:	4630      	mov	r0, r6
 800a51a:	f001 fbed 	bl	800bcf8 <__smakebuf_r>
 800a51e:	89a0      	ldrh	r0, [r4, #12]
 800a520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a524:	f010 0301 	ands.w	r3, r0, #1
 800a528:	d00a      	beq.n	800a540 <__swsetup_r+0xbc>
 800a52a:	2300      	movs	r3, #0
 800a52c:	60a3      	str	r3, [r4, #8]
 800a52e:	6963      	ldr	r3, [r4, #20]
 800a530:	425b      	negs	r3, r3
 800a532:	61a3      	str	r3, [r4, #24]
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	b943      	cbnz	r3, 800a54a <__swsetup_r+0xc6>
 800a538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a53c:	d1ba      	bne.n	800a4b4 <__swsetup_r+0x30>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	0781      	lsls	r1, r0, #30
 800a542:	bf58      	it	pl
 800a544:	6963      	ldrpl	r3, [r4, #20]
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	e7f4      	b.n	800a534 <__swsetup_r+0xb0>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e7f7      	b.n	800a53e <__swsetup_r+0xba>
 800a54e:	bf00      	nop
 800a550:	20000028 	.word	0x20000028
 800a554:	0800d9a4 	.word	0x0800d9a4
 800a558:	0800d9c4 	.word	0x0800d9c4
 800a55c:	0800d984 	.word	0x0800d984

0800a560 <quorem>:
 800a560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	6903      	ldr	r3, [r0, #16]
 800a566:	690c      	ldr	r4, [r1, #16]
 800a568:	42a3      	cmp	r3, r4
 800a56a:	4607      	mov	r7, r0
 800a56c:	f2c0 8081 	blt.w	800a672 <quorem+0x112>
 800a570:	3c01      	subs	r4, #1
 800a572:	f101 0814 	add.w	r8, r1, #20
 800a576:	f100 0514 	add.w	r5, r0, #20
 800a57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a588:	3301      	adds	r3, #1
 800a58a:	429a      	cmp	r2, r3
 800a58c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a594:	fbb2 f6f3 	udiv	r6, r2, r3
 800a598:	d331      	bcc.n	800a5fe <quorem+0x9e>
 800a59a:	f04f 0e00 	mov.w	lr, #0
 800a59e:	4640      	mov	r0, r8
 800a5a0:	46ac      	mov	ip, r5
 800a5a2:	46f2      	mov	sl, lr
 800a5a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5a8:	b293      	uxth	r3, r2
 800a5aa:	fb06 e303 	mla	r3, r6, r3, lr
 800a5ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5b8:	f8dc a000 	ldr.w	sl, [ip]
 800a5bc:	0c12      	lsrs	r2, r2, #16
 800a5be:	fa13 f38a 	uxtah	r3, r3, sl
 800a5c2:	fb06 e202 	mla	r2, r6, r2, lr
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5dc:	4581      	cmp	r9, r0
 800a5de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5e2:	f84c 3b04 	str.w	r3, [ip], #4
 800a5e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5ea:	d2db      	bcs.n	800a5a4 <quorem+0x44>
 800a5ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5f0:	b92b      	cbnz	r3, 800a5fe <quorem+0x9e>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	429d      	cmp	r5, r3
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	d32e      	bcc.n	800a65a <quorem+0xfa>
 800a5fc:	613c      	str	r4, [r7, #16]
 800a5fe:	4638      	mov	r0, r7
 800a600:	f001 feae 	bl	800c360 <__mcmp>
 800a604:	2800      	cmp	r0, #0
 800a606:	db24      	blt.n	800a652 <quorem+0xf2>
 800a608:	3601      	adds	r6, #1
 800a60a:	4628      	mov	r0, r5
 800a60c:	f04f 0c00 	mov.w	ip, #0
 800a610:	f858 2b04 	ldr.w	r2, [r8], #4
 800a614:	f8d0 e000 	ldr.w	lr, [r0]
 800a618:	b293      	uxth	r3, r2
 800a61a:	ebac 0303 	sub.w	r3, ip, r3
 800a61e:	0c12      	lsrs	r2, r2, #16
 800a620:	fa13 f38e 	uxtah	r3, r3, lr
 800a624:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a632:	45c1      	cmp	r9, r8
 800a634:	f840 3b04 	str.w	r3, [r0], #4
 800a638:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a63c:	d2e8      	bcs.n	800a610 <quorem+0xb0>
 800a63e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a646:	b922      	cbnz	r2, 800a652 <quorem+0xf2>
 800a648:	3b04      	subs	r3, #4
 800a64a:	429d      	cmp	r5, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	d30a      	bcc.n	800a666 <quorem+0x106>
 800a650:	613c      	str	r4, [r7, #16]
 800a652:	4630      	mov	r0, r6
 800a654:	b003      	add	sp, #12
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	3b04      	subs	r3, #4
 800a65e:	2a00      	cmp	r2, #0
 800a660:	d1cc      	bne.n	800a5fc <quorem+0x9c>
 800a662:	3c01      	subs	r4, #1
 800a664:	e7c7      	b.n	800a5f6 <quorem+0x96>
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	3b04      	subs	r3, #4
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d1f0      	bne.n	800a650 <quorem+0xf0>
 800a66e:	3c01      	subs	r4, #1
 800a670:	e7eb      	b.n	800a64a <quorem+0xea>
 800a672:	2000      	movs	r0, #0
 800a674:	e7ee      	b.n	800a654 <quorem+0xf4>
	...

0800a678 <_dtoa_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ed2d 8b04 	vpush	{d8-d9}
 800a680:	ec57 6b10 	vmov	r6, r7, d0
 800a684:	b093      	sub	sp, #76	; 0x4c
 800a686:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a688:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a68c:	9106      	str	r1, [sp, #24]
 800a68e:	ee10 aa10 	vmov	sl, s0
 800a692:	4604      	mov	r4, r0
 800a694:	9209      	str	r2, [sp, #36]	; 0x24
 800a696:	930c      	str	r3, [sp, #48]	; 0x30
 800a698:	46bb      	mov	fp, r7
 800a69a:	b975      	cbnz	r5, 800a6ba <_dtoa_r+0x42>
 800a69c:	2010      	movs	r0, #16
 800a69e:	f001 fb6b 	bl	800bd78 <malloc>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6a6:	b920      	cbnz	r0, 800a6b2 <_dtoa_r+0x3a>
 800a6a8:	4ba7      	ldr	r3, [pc, #668]	; (800a948 <_dtoa_r+0x2d0>)
 800a6aa:	21ea      	movs	r1, #234	; 0xea
 800a6ac:	48a7      	ldr	r0, [pc, #668]	; (800a94c <_dtoa_r+0x2d4>)
 800a6ae:	f002 fc89 	bl	800cfc4 <__assert_func>
 800a6b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6b6:	6005      	str	r5, [r0, #0]
 800a6b8:	60c5      	str	r5, [r0, #12]
 800a6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6bc:	6819      	ldr	r1, [r3, #0]
 800a6be:	b151      	cbz	r1, 800a6d6 <_dtoa_r+0x5e>
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	604a      	str	r2, [r1, #4]
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4093      	lsls	r3, r2
 800a6c8:	608b      	str	r3, [r1, #8]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f001 fbbc 	bl	800be48 <_Bfree>
 800a6d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	1e3b      	subs	r3, r7, #0
 800a6d8:	bfaa      	itet	ge
 800a6da:	2300      	movge	r3, #0
 800a6dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a6e0:	f8c8 3000 	strge.w	r3, [r8]
 800a6e4:	4b9a      	ldr	r3, [pc, #616]	; (800a950 <_dtoa_r+0x2d8>)
 800a6e6:	bfbc      	itt	lt
 800a6e8:	2201      	movlt	r2, #1
 800a6ea:	f8c8 2000 	strlt.w	r2, [r8]
 800a6ee:	ea33 030b 	bics.w	r3, r3, fp
 800a6f2:	d11b      	bne.n	800a72c <_dtoa_r+0xb4>
 800a6f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a700:	4333      	orrs	r3, r6
 800a702:	f000 8592 	beq.w	800b22a <_dtoa_r+0xbb2>
 800a706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a708:	b963      	cbnz	r3, 800a724 <_dtoa_r+0xac>
 800a70a:	4b92      	ldr	r3, [pc, #584]	; (800a954 <_dtoa_r+0x2dc>)
 800a70c:	e022      	b.n	800a754 <_dtoa_r+0xdc>
 800a70e:	4b92      	ldr	r3, [pc, #584]	; (800a958 <_dtoa_r+0x2e0>)
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	3308      	adds	r3, #8
 800a714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	9801      	ldr	r0, [sp, #4]
 800a71a:	b013      	add	sp, #76	; 0x4c
 800a71c:	ecbd 8b04 	vpop	{d8-d9}
 800a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	4b8b      	ldr	r3, [pc, #556]	; (800a954 <_dtoa_r+0x2dc>)
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	3303      	adds	r3, #3
 800a72a:	e7f3      	b.n	800a714 <_dtoa_r+0x9c>
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	4650      	mov	r0, sl
 800a732:	4659      	mov	r1, fp
 800a734:	f7f6 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 800a738:	ec4b ab19 	vmov	d9, sl, fp
 800a73c:	4680      	mov	r8, r0
 800a73e:	b158      	cbz	r0, 800a758 <_dtoa_r+0xe0>
 800a740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a742:	2301      	movs	r3, #1
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 856b 	beq.w	800b224 <_dtoa_r+0xbac>
 800a74e:	4883      	ldr	r0, [pc, #524]	; (800a95c <_dtoa_r+0x2e4>)
 800a750:	6018      	str	r0, [r3, #0]
 800a752:	1e43      	subs	r3, r0, #1
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	e7df      	b.n	800a718 <_dtoa_r+0xa0>
 800a758:	ec4b ab10 	vmov	d0, sl, fp
 800a75c:	aa10      	add	r2, sp, #64	; 0x40
 800a75e:	a911      	add	r1, sp, #68	; 0x44
 800a760:	4620      	mov	r0, r4
 800a762:	f001 ff1f 	bl	800c5a4 <__d2b>
 800a766:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a76a:	ee08 0a10 	vmov	s16, r0
 800a76e:	2d00      	cmp	r5, #0
 800a770:	f000 8084 	beq.w	800a87c <_dtoa_r+0x204>
 800a774:	ee19 3a90 	vmov	r3, s19
 800a778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a77c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a780:	4656      	mov	r6, sl
 800a782:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a78a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a78e:	4b74      	ldr	r3, [pc, #464]	; (800a960 <_dtoa_r+0x2e8>)
 800a790:	2200      	movs	r2, #0
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	a365      	add	r3, pc, #404	; (adr r3, 800a930 <_dtoa_r+0x2b8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 ff4a 	bl	8000638 <__aeabi_dmul>
 800a7a4:	a364      	add	r3, pc, #400	; (adr r3, 800a938 <_dtoa_r+0x2c0>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd8f 	bl	80002cc <__adddf3>
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	f7f5 fed6 	bl	8000564 <__aeabi_i2d>
 800a7b8:	a361      	add	r3, pc, #388	; (adr r3, 800a940 <_dtoa_r+0x2c8>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 ff3b 	bl	8000638 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f7f5 fd7f 	bl	80002cc <__adddf3>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	f7f6 f9e1 	bl	8000b98 <__aeabi_d2iz>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	9000      	str	r0, [sp, #0]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4630      	mov	r0, r6
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f6 f99c 	bl	8000b1c <__aeabi_dcmplt>
 800a7e4:	b150      	cbz	r0, 800a7fc <_dtoa_r+0x184>
 800a7e6:	9800      	ldr	r0, [sp, #0]
 800a7e8:	f7f5 febc 	bl	8000564 <__aeabi_i2d>
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	f7f6 f98a 	bl	8000b08 <__aeabi_dcmpeq>
 800a7f4:	b910      	cbnz	r0, 800a7fc <_dtoa_r+0x184>
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	2b16      	cmp	r3, #22
 800a800:	d85a      	bhi.n	800a8b8 <_dtoa_r+0x240>
 800a802:	9a00      	ldr	r2, [sp, #0]
 800a804:	4b57      	ldr	r3, [pc, #348]	; (800a964 <_dtoa_r+0x2ec>)
 800a806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	ec51 0b19 	vmov	r0, r1, d9
 800a812:	f7f6 f983 	bl	8000b1c <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	d050      	beq.n	800a8bc <_dtoa_r+0x244>
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	2300      	movs	r3, #0
 800a822:	930b      	str	r3, [sp, #44]	; 0x2c
 800a824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a826:	1b5d      	subs	r5, r3, r5
 800a828:	1e6b      	subs	r3, r5, #1
 800a82a:	9305      	str	r3, [sp, #20]
 800a82c:	bf45      	ittet	mi
 800a82e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a832:	9304      	strmi	r3, [sp, #16]
 800a834:	2300      	movpl	r3, #0
 800a836:	2300      	movmi	r3, #0
 800a838:	bf4c      	ite	mi
 800a83a:	9305      	strmi	r3, [sp, #20]
 800a83c:	9304      	strpl	r3, [sp, #16]
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	db3d      	blt.n	800a8c0 <_dtoa_r+0x248>
 800a844:	9b05      	ldr	r3, [sp, #20]
 800a846:	9a00      	ldr	r2, [sp, #0]
 800a848:	920a      	str	r2, [sp, #40]	; 0x28
 800a84a:	4413      	add	r3, r2
 800a84c:	9305      	str	r3, [sp, #20]
 800a84e:	2300      	movs	r3, #0
 800a850:	9307      	str	r3, [sp, #28]
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	2b09      	cmp	r3, #9
 800a856:	f200 8089 	bhi.w	800a96c <_dtoa_r+0x2f4>
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	bfc4      	itt	gt
 800a85e:	3b04      	subgt	r3, #4
 800a860:	9306      	strgt	r3, [sp, #24]
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	f1a3 0302 	sub.w	r3, r3, #2
 800a868:	bfcc      	ite	gt
 800a86a:	2500      	movgt	r5, #0
 800a86c:	2501      	movle	r5, #1
 800a86e:	2b03      	cmp	r3, #3
 800a870:	f200 8087 	bhi.w	800a982 <_dtoa_r+0x30a>
 800a874:	e8df f003 	tbb	[pc, r3]
 800a878:	59383a2d 	.word	0x59383a2d
 800a87c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a880:	441d      	add	r5, r3
 800a882:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a886:	2b20      	cmp	r3, #32
 800a888:	bfc1      	itttt	gt
 800a88a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a88e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a892:	fa0b f303 	lslgt.w	r3, fp, r3
 800a896:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a89a:	bfda      	itte	le
 800a89c:	f1c3 0320 	rsble	r3, r3, #32
 800a8a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8a4:	4318      	orrgt	r0, r3
 800a8a6:	f7f5 fe4d 	bl	8000544 <__aeabi_ui2d>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8b2:	3d01      	subs	r5, #1
 800a8b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b6:	e76a      	b.n	800a78e <_dtoa_r+0x116>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e7b2      	b.n	800a822 <_dtoa_r+0x1aa>
 800a8bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8be:	e7b1      	b.n	800a824 <_dtoa_r+0x1ac>
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	9a00      	ldr	r2, [sp, #0]
 800a8c4:	1a9b      	subs	r3, r3, r2
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	4253      	negs	r3, r2
 800a8ca:	9307      	str	r3, [sp, #28]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d0:	e7bf      	b.n	800a852 <_dtoa_r+0x1da>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	9308      	str	r3, [sp, #32]
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc55      	bgt.n	800a988 <_dtoa_r+0x310>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e6:	e00c      	b.n	800a902 <_dtoa_r+0x28a>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e7f3      	b.n	800a8d4 <_dtoa_r+0x25c>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f0:	9308      	str	r3, [sp, #32]
 800a8f2:	9b00      	ldr	r3, [sp, #0]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	bfb8      	it	lt
 800a900:	2301      	movlt	r3, #1
 800a902:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a904:	2200      	movs	r2, #0
 800a906:	6042      	str	r2, [r0, #4]
 800a908:	2204      	movs	r2, #4
 800a90a:	f102 0614 	add.w	r6, r2, #20
 800a90e:	429e      	cmp	r6, r3
 800a910:	6841      	ldr	r1, [r0, #4]
 800a912:	d93d      	bls.n	800a990 <_dtoa_r+0x318>
 800a914:	4620      	mov	r0, r4
 800a916:	f001 fa57 	bl	800bdc8 <_Balloc>
 800a91a:	9001      	str	r0, [sp, #4]
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d13b      	bne.n	800a998 <_dtoa_r+0x320>
 800a920:	4b11      	ldr	r3, [pc, #68]	; (800a968 <_dtoa_r+0x2f0>)
 800a922:	4602      	mov	r2, r0
 800a924:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a928:	e6c0      	b.n	800a6ac <_dtoa_r+0x34>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e7df      	b.n	800a8ee <_dtoa_r+0x276>
 800a92e:	bf00      	nop
 800a930:	636f4361 	.word	0x636f4361
 800a934:	3fd287a7 	.word	0x3fd287a7
 800a938:	8b60c8b3 	.word	0x8b60c8b3
 800a93c:	3fc68a28 	.word	0x3fc68a28
 800a940:	509f79fb 	.word	0x509f79fb
 800a944:	3fd34413 	.word	0x3fd34413
 800a948:	0800d8fe 	.word	0x0800d8fe
 800a94c:	0800d915 	.word	0x0800d915
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	0800d8fa 	.word	0x0800d8fa
 800a958:	0800d8f1 	.word	0x0800d8f1
 800a95c:	0800d775 	.word	0x0800d775
 800a960:	3ff80000 	.word	0x3ff80000
 800a964:	0800dae8 	.word	0x0800dae8
 800a968:	0800d970 	.word	0x0800d970
 800a96c:	2501      	movs	r5, #1
 800a96e:	2300      	movs	r3, #0
 800a970:	9306      	str	r3, [sp, #24]
 800a972:	9508      	str	r5, [sp, #32]
 800a974:	f04f 33ff 	mov.w	r3, #4294967295
 800a978:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	2312      	movs	r3, #18
 800a980:	e7b0      	b.n	800a8e4 <_dtoa_r+0x26c>
 800a982:	2301      	movs	r3, #1
 800a984:	9308      	str	r3, [sp, #32]
 800a986:	e7f5      	b.n	800a974 <_dtoa_r+0x2fc>
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a98e:	e7b8      	b.n	800a902 <_dtoa_r+0x28a>
 800a990:	3101      	adds	r1, #1
 800a992:	6041      	str	r1, [r0, #4]
 800a994:	0052      	lsls	r2, r2, #1
 800a996:	e7b8      	b.n	800a90a <_dtoa_r+0x292>
 800a998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99a:	9a01      	ldr	r2, [sp, #4]
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	2b0e      	cmp	r3, #14
 800a9a2:	f200 809d 	bhi.w	800aae0 <_dtoa_r+0x468>
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	f000 809a 	beq.w	800aae0 <_dtoa_r+0x468>
 800a9ac:	9b00      	ldr	r3, [sp, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dd32      	ble.n	800aa18 <_dtoa_r+0x3a0>
 800a9b2:	4ab7      	ldr	r2, [pc, #732]	; (800ac90 <_dtoa_r+0x618>)
 800a9b4:	f003 030f 	and.w	r3, r3, #15
 800a9b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	05d8      	lsls	r0, r3, #23
 800a9c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a9c8:	d516      	bpl.n	800a9f8 <_dtoa_r+0x380>
 800a9ca:	4bb2      	ldr	r3, [pc, #712]	; (800ac94 <_dtoa_r+0x61c>)
 800a9cc:	ec51 0b19 	vmov	r0, r1, d9
 800a9d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9d4:	f7f5 ff5a 	bl	800088c <__aeabi_ddiv>
 800a9d8:	f007 070f 	and.w	r7, r7, #15
 800a9dc:	4682      	mov	sl, r0
 800a9de:	468b      	mov	fp, r1
 800a9e0:	2503      	movs	r5, #3
 800a9e2:	4eac      	ldr	r6, [pc, #688]	; (800ac94 <_dtoa_r+0x61c>)
 800a9e4:	b957      	cbnz	r7, 800a9fc <_dtoa_r+0x384>
 800a9e6:	4642      	mov	r2, r8
 800a9e8:	464b      	mov	r3, r9
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	f7f5 ff4d 	bl	800088c <__aeabi_ddiv>
 800a9f2:	4682      	mov	sl, r0
 800a9f4:	468b      	mov	fp, r1
 800a9f6:	e028      	b.n	800aa4a <_dtoa_r+0x3d2>
 800a9f8:	2502      	movs	r5, #2
 800a9fa:	e7f2      	b.n	800a9e2 <_dtoa_r+0x36a>
 800a9fc:	07f9      	lsls	r1, r7, #31
 800a9fe:	d508      	bpl.n	800aa12 <_dtoa_r+0x39a>
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4689      	mov	r9, r1
 800aa12:	107f      	asrs	r7, r7, #1
 800aa14:	3608      	adds	r6, #8
 800aa16:	e7e5      	b.n	800a9e4 <_dtoa_r+0x36c>
 800aa18:	f000 809b 	beq.w	800ab52 <_dtoa_r+0x4da>
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	4f9d      	ldr	r7, [pc, #628]	; (800ac94 <_dtoa_r+0x61c>)
 800aa20:	425e      	negs	r6, r3
 800aa22:	4b9b      	ldr	r3, [pc, #620]	; (800ac90 <_dtoa_r+0x618>)
 800aa24:	f006 020f 	and.w	r2, r6, #15
 800aa28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	ec51 0b19 	vmov	r0, r1, d9
 800aa34:	f7f5 fe00 	bl	8000638 <__aeabi_dmul>
 800aa38:	1136      	asrs	r6, r6, #4
 800aa3a:	4682      	mov	sl, r0
 800aa3c:	468b      	mov	fp, r1
 800aa3e:	2300      	movs	r3, #0
 800aa40:	2502      	movs	r5, #2
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	d17a      	bne.n	800ab3c <_dtoa_r+0x4c4>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1d3      	bne.n	800a9f2 <_dtoa_r+0x37a>
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8082 	beq.w	800ab56 <_dtoa_r+0x4de>
 800aa52:	4b91      	ldr	r3, [pc, #580]	; (800ac98 <_dtoa_r+0x620>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	4650      	mov	r0, sl
 800aa58:	4659      	mov	r1, fp
 800aa5a:	f7f6 f85f 	bl	8000b1c <__aeabi_dcmplt>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d079      	beq.n	800ab56 <_dtoa_r+0x4de>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d076      	beq.n	800ab56 <_dtoa_r+0x4de>
 800aa68:	9b02      	ldr	r3, [sp, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dd36      	ble.n	800aadc <_dtoa_r+0x464>
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	4650      	mov	r0, sl
 800aa72:	4659      	mov	r1, fp
 800aa74:	1e5f      	subs	r7, r3, #1
 800aa76:	2200      	movs	r2, #0
 800aa78:	4b88      	ldr	r3, [pc, #544]	; (800ac9c <_dtoa_r+0x624>)
 800aa7a:	f7f5 fddd 	bl	8000638 <__aeabi_dmul>
 800aa7e:	9e02      	ldr	r6, [sp, #8]
 800aa80:	4682      	mov	sl, r0
 800aa82:	468b      	mov	fp, r1
 800aa84:	3501      	adds	r5, #1
 800aa86:	4628      	mov	r0, r5
 800aa88:	f7f5 fd6c 	bl	8000564 <__aeabi_i2d>
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	465b      	mov	r3, fp
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	4b82      	ldr	r3, [pc, #520]	; (800aca0 <_dtoa_r+0x628>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	f7f5 fc18 	bl	80002cc <__adddf3>
 800aa9c:	46d0      	mov	r8, sl
 800aa9e:	46d9      	mov	r9, fp
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d158      	bne.n	800ab5c <_dtoa_r+0x4e4>
 800aaaa:	4b7e      	ldr	r3, [pc, #504]	; (800aca4 <_dtoa_r+0x62c>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fc09 	bl	80002c8 <__aeabi_dsub>
 800aab6:	4652      	mov	r2, sl
 800aab8:	465b      	mov	r3, fp
 800aaba:	4680      	mov	r8, r0
 800aabc:	4689      	mov	r9, r1
 800aabe:	f7f6 f84b 	bl	8000b58 <__aeabi_dcmpgt>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	f040 8295 	bne.w	800aff2 <_dtoa_r+0x97a>
 800aac8:	4652      	mov	r2, sl
 800aaca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aace:	4640      	mov	r0, r8
 800aad0:	4649      	mov	r1, r9
 800aad2:	f7f6 f823 	bl	8000b1c <__aeabi_dcmplt>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f040 8289 	bne.w	800afee <_dtoa_r+0x976>
 800aadc:	ec5b ab19 	vmov	sl, fp, d9
 800aae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f2c0 8148 	blt.w	800ad78 <_dtoa_r+0x700>
 800aae8:	9a00      	ldr	r2, [sp, #0]
 800aaea:	2a0e      	cmp	r2, #14
 800aaec:	f300 8144 	bgt.w	800ad78 <_dtoa_r+0x700>
 800aaf0:	4b67      	ldr	r3, [pc, #412]	; (800ac90 <_dtoa_r+0x618>)
 800aaf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f280 80d5 	bge.w	800acac <_dtoa_r+0x634>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f300 80d1 	bgt.w	800acac <_dtoa_r+0x634>
 800ab0a:	f040 826f 	bne.w	800afec <_dtoa_r+0x974>
 800ab0e:	4b65      	ldr	r3, [pc, #404]	; (800aca4 <_dtoa_r+0x62c>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	4640      	mov	r0, r8
 800ab14:	4649      	mov	r1, r9
 800ab16:	f7f5 fd8f 	bl	8000638 <__aeabi_dmul>
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	f7f6 f811 	bl	8000b44 <__aeabi_dcmpge>
 800ab22:	9e03      	ldr	r6, [sp, #12]
 800ab24:	4637      	mov	r7, r6
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f040 8245 	bne.w	800afb6 <_dtoa_r+0x93e>
 800ab2c:	9d01      	ldr	r5, [sp, #4]
 800ab2e:	2331      	movs	r3, #49	; 0x31
 800ab30:	f805 3b01 	strb.w	r3, [r5], #1
 800ab34:	9b00      	ldr	r3, [sp, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	e240      	b.n	800afbe <_dtoa_r+0x946>
 800ab3c:	07f2      	lsls	r2, r6, #31
 800ab3e:	d505      	bpl.n	800ab4c <_dtoa_r+0x4d4>
 800ab40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab44:	f7f5 fd78 	bl	8000638 <__aeabi_dmul>
 800ab48:	3501      	adds	r5, #1
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	1076      	asrs	r6, r6, #1
 800ab4e:	3708      	adds	r7, #8
 800ab50:	e777      	b.n	800aa42 <_dtoa_r+0x3ca>
 800ab52:	2502      	movs	r5, #2
 800ab54:	e779      	b.n	800aa4a <_dtoa_r+0x3d2>
 800ab56:	9f00      	ldr	r7, [sp, #0]
 800ab58:	9e03      	ldr	r6, [sp, #12]
 800ab5a:	e794      	b.n	800aa86 <_dtoa_r+0x40e>
 800ab5c:	9901      	ldr	r1, [sp, #4]
 800ab5e:	4b4c      	ldr	r3, [pc, #304]	; (800ac90 <_dtoa_r+0x618>)
 800ab60:	4431      	add	r1, r6
 800ab62:	910d      	str	r1, [sp, #52]	; 0x34
 800ab64:	9908      	ldr	r1, [sp, #32]
 800ab66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	d043      	beq.n	800abfa <_dtoa_r+0x582>
 800ab72:	494d      	ldr	r1, [pc, #308]	; (800aca8 <_dtoa_r+0x630>)
 800ab74:	2000      	movs	r0, #0
 800ab76:	f7f5 fe89 	bl	800088c <__aeabi_ddiv>
 800ab7a:	4652      	mov	r2, sl
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	f7f5 fba3 	bl	80002c8 <__aeabi_dsub>
 800ab82:	9d01      	ldr	r5, [sp, #4]
 800ab84:	4682      	mov	sl, r0
 800ab86:	468b      	mov	fp, r1
 800ab88:	4649      	mov	r1, r9
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	f7f6 f804 	bl	8000b98 <__aeabi_d2iz>
 800ab90:	4606      	mov	r6, r0
 800ab92:	f7f5 fce7 	bl	8000564 <__aeabi_i2d>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 fb93 	bl	80002c8 <__aeabi_dsub>
 800aba2:	3630      	adds	r6, #48	; 0x30
 800aba4:	f805 6b01 	strb.w	r6, [r5], #1
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	4680      	mov	r8, r0
 800abae:	4689      	mov	r9, r1
 800abb0:	f7f5 ffb4 	bl	8000b1c <__aeabi_dcmplt>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d163      	bne.n	800ac80 <_dtoa_r+0x608>
 800abb8:	4642      	mov	r2, r8
 800abba:	464b      	mov	r3, r9
 800abbc:	4936      	ldr	r1, [pc, #216]	; (800ac98 <_dtoa_r+0x620>)
 800abbe:	2000      	movs	r0, #0
 800abc0:	f7f5 fb82 	bl	80002c8 <__aeabi_dsub>
 800abc4:	4652      	mov	r2, sl
 800abc6:	465b      	mov	r3, fp
 800abc8:	f7f5 ffa8 	bl	8000b1c <__aeabi_dcmplt>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f040 80b5 	bne.w	800ad3c <_dtoa_r+0x6c4>
 800abd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd4:	429d      	cmp	r5, r3
 800abd6:	d081      	beq.n	800aadc <_dtoa_r+0x464>
 800abd8:	4b30      	ldr	r3, [pc, #192]	; (800ac9c <_dtoa_r+0x624>)
 800abda:	2200      	movs	r2, #0
 800abdc:	4650      	mov	r0, sl
 800abde:	4659      	mov	r1, fp
 800abe0:	f7f5 fd2a 	bl	8000638 <__aeabi_dmul>
 800abe4:	4b2d      	ldr	r3, [pc, #180]	; (800ac9c <_dtoa_r+0x624>)
 800abe6:	4682      	mov	sl, r0
 800abe8:	468b      	mov	fp, r1
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	2200      	movs	r2, #0
 800abf0:	f7f5 fd22 	bl	8000638 <__aeabi_dmul>
 800abf4:	4680      	mov	r8, r0
 800abf6:	4689      	mov	r9, r1
 800abf8:	e7c6      	b.n	800ab88 <_dtoa_r+0x510>
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fd1b 	bl	8000638 <__aeabi_dmul>
 800ac02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac04:	9d01      	ldr	r5, [sp, #4]
 800ac06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac08:	4682      	mov	sl, r0
 800ac0a:	468b      	mov	fp, r1
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	4640      	mov	r0, r8
 800ac10:	f7f5 ffc2 	bl	8000b98 <__aeabi_d2iz>
 800ac14:	4606      	mov	r6, r0
 800ac16:	f7f5 fca5 	bl	8000564 <__aeabi_i2d>
 800ac1a:	3630      	adds	r6, #48	; 0x30
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4640      	mov	r0, r8
 800ac22:	4649      	mov	r1, r9
 800ac24:	f7f5 fb50 	bl	80002c8 <__aeabi_dsub>
 800ac28:	f805 6b01 	strb.w	r6, [r5], #1
 800ac2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2e:	429d      	cmp	r5, r3
 800ac30:	4680      	mov	r8, r0
 800ac32:	4689      	mov	r9, r1
 800ac34:	f04f 0200 	mov.w	r2, #0
 800ac38:	d124      	bne.n	800ac84 <_dtoa_r+0x60c>
 800ac3a:	4b1b      	ldr	r3, [pc, #108]	; (800aca8 <_dtoa_r+0x630>)
 800ac3c:	4650      	mov	r0, sl
 800ac3e:	4659      	mov	r1, fp
 800ac40:	f7f5 fb44 	bl	80002cc <__adddf3>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 ff84 	bl	8000b58 <__aeabi_dcmpgt>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d173      	bne.n	800ad3c <_dtoa_r+0x6c4>
 800ac54:	4652      	mov	r2, sl
 800ac56:	465b      	mov	r3, fp
 800ac58:	4913      	ldr	r1, [pc, #76]	; (800aca8 <_dtoa_r+0x630>)
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f7f5 fb34 	bl	80002c8 <__aeabi_dsub>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 ff58 	bl	8000b1c <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f43f af35 	beq.w	800aadc <_dtoa_r+0x464>
 800ac72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac74:	1e6b      	subs	r3, r5, #1
 800ac76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac7c:	2b30      	cmp	r3, #48	; 0x30
 800ac7e:	d0f8      	beq.n	800ac72 <_dtoa_r+0x5fa>
 800ac80:	9700      	str	r7, [sp, #0]
 800ac82:	e049      	b.n	800ad18 <_dtoa_r+0x6a0>
 800ac84:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <_dtoa_r+0x624>)
 800ac86:	f7f5 fcd7 	bl	8000638 <__aeabi_dmul>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	4689      	mov	r9, r1
 800ac8e:	e7bd      	b.n	800ac0c <_dtoa_r+0x594>
 800ac90:	0800dae8 	.word	0x0800dae8
 800ac94:	0800dac0 	.word	0x0800dac0
 800ac98:	3ff00000 	.word	0x3ff00000
 800ac9c:	40240000 	.word	0x40240000
 800aca0:	401c0000 	.word	0x401c0000
 800aca4:	40140000 	.word	0x40140000
 800aca8:	3fe00000 	.word	0x3fe00000
 800acac:	9d01      	ldr	r5, [sp, #4]
 800acae:	4656      	mov	r6, sl
 800acb0:	465f      	mov	r7, fp
 800acb2:	4642      	mov	r2, r8
 800acb4:	464b      	mov	r3, r9
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 fde7 	bl	800088c <__aeabi_ddiv>
 800acbe:	f7f5 ff6b 	bl	8000b98 <__aeabi_d2iz>
 800acc2:	4682      	mov	sl, r0
 800acc4:	f7f5 fc4e 	bl	8000564 <__aeabi_i2d>
 800acc8:	4642      	mov	r2, r8
 800acca:	464b      	mov	r3, r9
 800accc:	f7f5 fcb4 	bl	8000638 <__aeabi_dmul>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4630      	mov	r0, r6
 800acd6:	4639      	mov	r1, r7
 800acd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800acdc:	f7f5 faf4 	bl	80002c8 <__aeabi_dsub>
 800ace0:	f805 6b01 	strb.w	r6, [r5], #1
 800ace4:	9e01      	ldr	r6, [sp, #4]
 800ace6:	9f03      	ldr	r7, [sp, #12]
 800ace8:	1bae      	subs	r6, r5, r6
 800acea:	42b7      	cmp	r7, r6
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	d135      	bne.n	800ad5e <_dtoa_r+0x6e6>
 800acf2:	f7f5 faeb 	bl	80002cc <__adddf3>
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	f7f5 ff2b 	bl	8000b58 <__aeabi_dcmpgt>
 800ad02:	b9d0      	cbnz	r0, 800ad3a <_dtoa_r+0x6c2>
 800ad04:	4642      	mov	r2, r8
 800ad06:	464b      	mov	r3, r9
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 fefc 	bl	8000b08 <__aeabi_dcmpeq>
 800ad10:	b110      	cbz	r0, 800ad18 <_dtoa_r+0x6a0>
 800ad12:	f01a 0f01 	tst.w	sl, #1
 800ad16:	d110      	bne.n	800ad3a <_dtoa_r+0x6c2>
 800ad18:	4620      	mov	r0, r4
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	f001 f893 	bl	800be48 <_Bfree>
 800ad22:	2300      	movs	r3, #0
 800ad24:	9800      	ldr	r0, [sp, #0]
 800ad26:	702b      	strb	r3, [r5, #0]
 800ad28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	6018      	str	r0, [r3, #0]
 800ad2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f43f acf1 	beq.w	800a718 <_dtoa_r+0xa0>
 800ad36:	601d      	str	r5, [r3, #0]
 800ad38:	e4ee      	b.n	800a718 <_dtoa_r+0xa0>
 800ad3a:	9f00      	ldr	r7, [sp, #0]
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	461d      	mov	r5, r3
 800ad40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad44:	2a39      	cmp	r2, #57	; 0x39
 800ad46:	d106      	bne.n	800ad56 <_dtoa_r+0x6de>
 800ad48:	9a01      	ldr	r2, [sp, #4]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d1f7      	bne.n	800ad3e <_dtoa_r+0x6c6>
 800ad4e:	9901      	ldr	r1, [sp, #4]
 800ad50:	2230      	movs	r2, #48	; 0x30
 800ad52:	3701      	adds	r7, #1
 800ad54:	700a      	strb	r2, [r1, #0]
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	3201      	adds	r2, #1
 800ad5a:	701a      	strb	r2, [r3, #0]
 800ad5c:	e790      	b.n	800ac80 <_dtoa_r+0x608>
 800ad5e:	4ba6      	ldr	r3, [pc, #664]	; (800aff8 <_dtoa_r+0x980>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	f7f5 fc69 	bl	8000638 <__aeabi_dmul>
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	f7f5 fecb 	bl	8000b08 <__aeabi_dcmpeq>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d09d      	beq.n	800acb2 <_dtoa_r+0x63a>
 800ad76:	e7cf      	b.n	800ad18 <_dtoa_r+0x6a0>
 800ad78:	9a08      	ldr	r2, [sp, #32]
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	f000 80d7 	beq.w	800af2e <_dtoa_r+0x8b6>
 800ad80:	9a06      	ldr	r2, [sp, #24]
 800ad82:	2a01      	cmp	r2, #1
 800ad84:	f300 80ba 	bgt.w	800aefc <_dtoa_r+0x884>
 800ad88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	f000 80b2 	beq.w	800aef4 <_dtoa_r+0x87c>
 800ad90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad94:	9e07      	ldr	r6, [sp, #28]
 800ad96:	9d04      	ldr	r5, [sp, #16]
 800ad98:	9a04      	ldr	r2, [sp, #16]
 800ad9a:	441a      	add	r2, r3
 800ad9c:	9204      	str	r2, [sp, #16]
 800ad9e:	9a05      	ldr	r2, [sp, #20]
 800ada0:	2101      	movs	r1, #1
 800ada2:	441a      	add	r2, r3
 800ada4:	4620      	mov	r0, r4
 800ada6:	9205      	str	r2, [sp, #20]
 800ada8:	f001 f950 	bl	800c04c <__i2b>
 800adac:	4607      	mov	r7, r0
 800adae:	2d00      	cmp	r5, #0
 800adb0:	dd0c      	ble.n	800adcc <_dtoa_r+0x754>
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dd09      	ble.n	800adcc <_dtoa_r+0x754>
 800adb8:	42ab      	cmp	r3, r5
 800adba:	9a04      	ldr	r2, [sp, #16]
 800adbc:	bfa8      	it	ge
 800adbe:	462b      	movge	r3, r5
 800adc0:	1ad2      	subs	r2, r2, r3
 800adc2:	9204      	str	r2, [sp, #16]
 800adc4:	9a05      	ldr	r2, [sp, #20]
 800adc6:	1aed      	subs	r5, r5, r3
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	9b07      	ldr	r3, [sp, #28]
 800adce:	b31b      	cbz	r3, 800ae18 <_dtoa_r+0x7a0>
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 80af 	beq.w	800af36 <_dtoa_r+0x8be>
 800add8:	2e00      	cmp	r6, #0
 800adda:	dd13      	ble.n	800ae04 <_dtoa_r+0x78c>
 800addc:	4639      	mov	r1, r7
 800adde:	4632      	mov	r2, r6
 800ade0:	4620      	mov	r0, r4
 800ade2:	f001 f9f3 	bl	800c1cc <__pow5mult>
 800ade6:	ee18 2a10 	vmov	r2, s16
 800adea:	4601      	mov	r1, r0
 800adec:	4607      	mov	r7, r0
 800adee:	4620      	mov	r0, r4
 800adf0:	f001 f942 	bl	800c078 <__multiply>
 800adf4:	ee18 1a10 	vmov	r1, s16
 800adf8:	4680      	mov	r8, r0
 800adfa:	4620      	mov	r0, r4
 800adfc:	f001 f824 	bl	800be48 <_Bfree>
 800ae00:	ee08 8a10 	vmov	s16, r8
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	1b9a      	subs	r2, r3, r6
 800ae08:	d006      	beq.n	800ae18 <_dtoa_r+0x7a0>
 800ae0a:	ee18 1a10 	vmov	r1, s16
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f001 f9dc 	bl	800c1cc <__pow5mult>
 800ae14:	ee08 0a10 	vmov	s16, r0
 800ae18:	2101      	movs	r1, #1
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f001 f916 	bl	800c04c <__i2b>
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	4606      	mov	r6, r0
 800ae26:	f340 8088 	ble.w	800af3a <_dtoa_r+0x8c2>
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f001 f9cc 	bl	800c1cc <__pow5mult>
 800ae34:	9b06      	ldr	r3, [sp, #24]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	4606      	mov	r6, r0
 800ae3a:	f340 8081 	ble.w	800af40 <_dtoa_r+0x8c8>
 800ae3e:	f04f 0800 	mov.w	r8, #0
 800ae42:	6933      	ldr	r3, [r6, #16]
 800ae44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae48:	6918      	ldr	r0, [r3, #16]
 800ae4a:	f001 f8af 	bl	800bfac <__hi0bits>
 800ae4e:	f1c0 0020 	rsb	r0, r0, #32
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	4418      	add	r0, r3
 800ae56:	f010 001f 	ands.w	r0, r0, #31
 800ae5a:	f000 8092 	beq.w	800af82 <_dtoa_r+0x90a>
 800ae5e:	f1c0 0320 	rsb	r3, r0, #32
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	f340 808a 	ble.w	800af7c <_dtoa_r+0x904>
 800ae68:	f1c0 001c 	rsb	r0, r0, #28
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	4403      	add	r3, r0
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	9b05      	ldr	r3, [sp, #20]
 800ae74:	4403      	add	r3, r0
 800ae76:	4405      	add	r5, r0
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd07      	ble.n	800ae90 <_dtoa_r+0x818>
 800ae80:	ee18 1a10 	vmov	r1, s16
 800ae84:	461a      	mov	r2, r3
 800ae86:	4620      	mov	r0, r4
 800ae88:	f001 f9fa 	bl	800c280 <__lshift>
 800ae8c:	ee08 0a10 	vmov	s16, r0
 800ae90:	9b05      	ldr	r3, [sp, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dd05      	ble.n	800aea2 <_dtoa_r+0x82a>
 800ae96:	4631      	mov	r1, r6
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f001 f9f0 	bl	800c280 <__lshift>
 800aea0:	4606      	mov	r6, r0
 800aea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d06e      	beq.n	800af86 <_dtoa_r+0x90e>
 800aea8:	ee18 0a10 	vmov	r0, s16
 800aeac:	4631      	mov	r1, r6
 800aeae:	f001 fa57 	bl	800c360 <__mcmp>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	da67      	bge.n	800af86 <_dtoa_r+0x90e>
 800aeb6:	9b00      	ldr	r3, [sp, #0]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	ee18 1a10 	vmov	r1, s16
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	220a      	movs	r2, #10
 800aec2:	2300      	movs	r3, #0
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 ffe1 	bl	800be8c <__multadd>
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	ee08 0a10 	vmov	s16, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 81b1 	beq.w	800b238 <_dtoa_r+0xbc0>
 800aed6:	2300      	movs	r3, #0
 800aed8:	4639      	mov	r1, r7
 800aeda:	220a      	movs	r2, #10
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 ffd5 	bl	800be8c <__multadd>
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	4607      	mov	r7, r0
 800aee8:	f300 808e 	bgt.w	800b008 <_dtoa_r+0x990>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	dc51      	bgt.n	800af96 <_dtoa_r+0x91e>
 800aef2:	e089      	b.n	800b008 <_dtoa_r+0x990>
 800aef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aefa:	e74b      	b.n	800ad94 <_dtoa_r+0x71c>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	1e5e      	subs	r6, r3, #1
 800af00:	9b07      	ldr	r3, [sp, #28]
 800af02:	42b3      	cmp	r3, r6
 800af04:	bfbf      	itttt	lt
 800af06:	9b07      	ldrlt	r3, [sp, #28]
 800af08:	9607      	strlt	r6, [sp, #28]
 800af0a:	1af2      	sublt	r2, r6, r3
 800af0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af0e:	bfb6      	itet	lt
 800af10:	189b      	addlt	r3, r3, r2
 800af12:	1b9e      	subge	r6, r3, r6
 800af14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	bfb8      	it	lt
 800af1a:	2600      	movlt	r6, #0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfb7      	itett	lt
 800af20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af28:	1a9d      	sublt	r5, r3, r2
 800af2a:	2300      	movlt	r3, #0
 800af2c:	e734      	b.n	800ad98 <_dtoa_r+0x720>
 800af2e:	9e07      	ldr	r6, [sp, #28]
 800af30:	9d04      	ldr	r5, [sp, #16]
 800af32:	9f08      	ldr	r7, [sp, #32]
 800af34:	e73b      	b.n	800adae <_dtoa_r+0x736>
 800af36:	9a07      	ldr	r2, [sp, #28]
 800af38:	e767      	b.n	800ae0a <_dtoa_r+0x792>
 800af3a:	9b06      	ldr	r3, [sp, #24]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	dc18      	bgt.n	800af72 <_dtoa_r+0x8fa>
 800af40:	f1ba 0f00 	cmp.w	sl, #0
 800af44:	d115      	bne.n	800af72 <_dtoa_r+0x8fa>
 800af46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af4a:	b993      	cbnz	r3, 800af72 <_dtoa_r+0x8fa>
 800af4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af50:	0d1b      	lsrs	r3, r3, #20
 800af52:	051b      	lsls	r3, r3, #20
 800af54:	b183      	cbz	r3, 800af78 <_dtoa_r+0x900>
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	3301      	adds	r3, #1
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	9b05      	ldr	r3, [sp, #20]
 800af5e:	3301      	adds	r3, #1
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	f04f 0801 	mov.w	r8, #1
 800af66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f af6a 	bne.w	800ae42 <_dtoa_r+0x7ca>
 800af6e:	2001      	movs	r0, #1
 800af70:	e76f      	b.n	800ae52 <_dtoa_r+0x7da>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	e7f6      	b.n	800af66 <_dtoa_r+0x8ee>
 800af78:	4698      	mov	r8, r3
 800af7a:	e7f4      	b.n	800af66 <_dtoa_r+0x8ee>
 800af7c:	f43f af7d 	beq.w	800ae7a <_dtoa_r+0x802>
 800af80:	4618      	mov	r0, r3
 800af82:	301c      	adds	r0, #28
 800af84:	e772      	b.n	800ae6c <_dtoa_r+0x7f4>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dc37      	bgt.n	800affc <_dtoa_r+0x984>
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	dd34      	ble.n	800affc <_dtoa_r+0x984>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	9302      	str	r3, [sp, #8]
 800af96:	9b02      	ldr	r3, [sp, #8]
 800af98:	b96b      	cbnz	r3, 800afb6 <_dtoa_r+0x93e>
 800af9a:	4631      	mov	r1, r6
 800af9c:	2205      	movs	r2, #5
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 ff74 	bl	800be8c <__multadd>
 800afa4:	4601      	mov	r1, r0
 800afa6:	4606      	mov	r6, r0
 800afa8:	ee18 0a10 	vmov	r0, s16
 800afac:	f001 f9d8 	bl	800c360 <__mcmp>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f73f adbb 	bgt.w	800ab2c <_dtoa_r+0x4b4>
 800afb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb8:	9d01      	ldr	r5, [sp, #4]
 800afba:	43db      	mvns	r3, r3
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	f04f 0800 	mov.w	r8, #0
 800afc2:	4631      	mov	r1, r6
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 ff3f 	bl	800be48 <_Bfree>
 800afca:	2f00      	cmp	r7, #0
 800afcc:	f43f aea4 	beq.w	800ad18 <_dtoa_r+0x6a0>
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	d005      	beq.n	800afe2 <_dtoa_r+0x96a>
 800afd6:	45b8      	cmp	r8, r7
 800afd8:	d003      	beq.n	800afe2 <_dtoa_r+0x96a>
 800afda:	4641      	mov	r1, r8
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 ff33 	bl	800be48 <_Bfree>
 800afe2:	4639      	mov	r1, r7
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 ff2f 	bl	800be48 <_Bfree>
 800afea:	e695      	b.n	800ad18 <_dtoa_r+0x6a0>
 800afec:	2600      	movs	r6, #0
 800afee:	4637      	mov	r7, r6
 800aff0:	e7e1      	b.n	800afb6 <_dtoa_r+0x93e>
 800aff2:	9700      	str	r7, [sp, #0]
 800aff4:	4637      	mov	r7, r6
 800aff6:	e599      	b.n	800ab2c <_dtoa_r+0x4b4>
 800aff8:	40240000 	.word	0x40240000
 800affc:	9b08      	ldr	r3, [sp, #32]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 80ca 	beq.w	800b198 <_dtoa_r+0xb20>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	2d00      	cmp	r5, #0
 800b00a:	dd05      	ble.n	800b018 <_dtoa_r+0x9a0>
 800b00c:	4639      	mov	r1, r7
 800b00e:	462a      	mov	r2, r5
 800b010:	4620      	mov	r0, r4
 800b012:	f001 f935 	bl	800c280 <__lshift>
 800b016:	4607      	mov	r7, r0
 800b018:	f1b8 0f00 	cmp.w	r8, #0
 800b01c:	d05b      	beq.n	800b0d6 <_dtoa_r+0xa5e>
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fed1 	bl	800bdc8 <_Balloc>
 800b026:	4605      	mov	r5, r0
 800b028:	b928      	cbnz	r0, 800b036 <_dtoa_r+0x9be>
 800b02a:	4b87      	ldr	r3, [pc, #540]	; (800b248 <_dtoa_r+0xbd0>)
 800b02c:	4602      	mov	r2, r0
 800b02e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b032:	f7ff bb3b 	b.w	800a6ac <_dtoa_r+0x34>
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	3202      	adds	r2, #2
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	f107 010c 	add.w	r1, r7, #12
 800b040:	300c      	adds	r0, #12
 800b042:	f000 feb3 	bl	800bdac <memcpy>
 800b046:	2201      	movs	r2, #1
 800b048:	4629      	mov	r1, r5
 800b04a:	4620      	mov	r0, r4
 800b04c:	f001 f918 	bl	800c280 <__lshift>
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	f103 0901 	add.w	r9, r3, #1
 800b056:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b05a:	4413      	add	r3, r2
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	f00a 0301 	and.w	r3, sl, #1
 800b062:	46b8      	mov	r8, r7
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	4607      	mov	r7, r0
 800b068:	4631      	mov	r1, r6
 800b06a:	ee18 0a10 	vmov	r0, s16
 800b06e:	f7ff fa77 	bl	800a560 <quorem>
 800b072:	4641      	mov	r1, r8
 800b074:	9002      	str	r0, [sp, #8]
 800b076:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b07a:	ee18 0a10 	vmov	r0, s16
 800b07e:	f001 f96f 	bl	800c360 <__mcmp>
 800b082:	463a      	mov	r2, r7
 800b084:	9003      	str	r0, [sp, #12]
 800b086:	4631      	mov	r1, r6
 800b088:	4620      	mov	r0, r4
 800b08a:	f001 f985 	bl	800c398 <__mdiff>
 800b08e:	68c2      	ldr	r2, [r0, #12]
 800b090:	f109 3bff 	add.w	fp, r9, #4294967295
 800b094:	4605      	mov	r5, r0
 800b096:	bb02      	cbnz	r2, 800b0da <_dtoa_r+0xa62>
 800b098:	4601      	mov	r1, r0
 800b09a:	ee18 0a10 	vmov	r0, s16
 800b09e:	f001 f95f 	bl	800c360 <__mcmp>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	9207      	str	r2, [sp, #28]
 800b0aa:	f000 fecd 	bl	800be48 <_Bfree>
 800b0ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b0b2:	ea43 0102 	orr.w	r1, r3, r2
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	464d      	mov	r5, r9
 800b0bc:	d10f      	bne.n	800b0de <_dtoa_r+0xa66>
 800b0be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0c2:	d02a      	beq.n	800b11a <_dtoa_r+0xaa2>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dd02      	ble.n	800b0d0 <_dtoa_r+0xa58>
 800b0ca:	9b02      	ldr	r3, [sp, #8]
 800b0cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b0d0:	f88b a000 	strb.w	sl, [fp]
 800b0d4:	e775      	b.n	800afc2 <_dtoa_r+0x94a>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	e7ba      	b.n	800b050 <_dtoa_r+0x9d8>
 800b0da:	2201      	movs	r2, #1
 800b0dc:	e7e2      	b.n	800b0a4 <_dtoa_r+0xa2c>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	db04      	blt.n	800b0ee <_dtoa_r+0xa76>
 800b0e4:	9906      	ldr	r1, [sp, #24]
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	9904      	ldr	r1, [sp, #16]
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	d122      	bne.n	800b134 <_dtoa_r+0xabc>
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	ddee      	ble.n	800b0d0 <_dtoa_r+0xa58>
 800b0f2:	ee18 1a10 	vmov	r1, s16
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f001 f8c1 	bl	800c280 <__lshift>
 800b0fe:	4631      	mov	r1, r6
 800b100:	ee08 0a10 	vmov	s16, r0
 800b104:	f001 f92c 	bl	800c360 <__mcmp>
 800b108:	2800      	cmp	r0, #0
 800b10a:	dc03      	bgt.n	800b114 <_dtoa_r+0xa9c>
 800b10c:	d1e0      	bne.n	800b0d0 <_dtoa_r+0xa58>
 800b10e:	f01a 0f01 	tst.w	sl, #1
 800b112:	d0dd      	beq.n	800b0d0 <_dtoa_r+0xa58>
 800b114:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b118:	d1d7      	bne.n	800b0ca <_dtoa_r+0xa52>
 800b11a:	2339      	movs	r3, #57	; 0x39
 800b11c:	f88b 3000 	strb.w	r3, [fp]
 800b120:	462b      	mov	r3, r5
 800b122:	461d      	mov	r5, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b12a:	2a39      	cmp	r2, #57	; 0x39
 800b12c:	d071      	beq.n	800b212 <_dtoa_r+0xb9a>
 800b12e:	3201      	adds	r2, #1
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	e746      	b.n	800afc2 <_dtoa_r+0x94a>
 800b134:	2a00      	cmp	r2, #0
 800b136:	dd07      	ble.n	800b148 <_dtoa_r+0xad0>
 800b138:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b13c:	d0ed      	beq.n	800b11a <_dtoa_r+0xaa2>
 800b13e:	f10a 0301 	add.w	r3, sl, #1
 800b142:	f88b 3000 	strb.w	r3, [fp]
 800b146:	e73c      	b.n	800afc2 <_dtoa_r+0x94a>
 800b148:	9b05      	ldr	r3, [sp, #20]
 800b14a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b14e:	4599      	cmp	r9, r3
 800b150:	d047      	beq.n	800b1e2 <_dtoa_r+0xb6a>
 800b152:	ee18 1a10 	vmov	r1, s16
 800b156:	2300      	movs	r3, #0
 800b158:	220a      	movs	r2, #10
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fe96 	bl	800be8c <__multadd>
 800b160:	45b8      	cmp	r8, r7
 800b162:	ee08 0a10 	vmov	s16, r0
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	f04f 020a 	mov.w	r2, #10
 800b16e:	4641      	mov	r1, r8
 800b170:	4620      	mov	r0, r4
 800b172:	d106      	bne.n	800b182 <_dtoa_r+0xb0a>
 800b174:	f000 fe8a 	bl	800be8c <__multadd>
 800b178:	4680      	mov	r8, r0
 800b17a:	4607      	mov	r7, r0
 800b17c:	f109 0901 	add.w	r9, r9, #1
 800b180:	e772      	b.n	800b068 <_dtoa_r+0x9f0>
 800b182:	f000 fe83 	bl	800be8c <__multadd>
 800b186:	4639      	mov	r1, r7
 800b188:	4680      	mov	r8, r0
 800b18a:	2300      	movs	r3, #0
 800b18c:	220a      	movs	r2, #10
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fe7c 	bl	800be8c <__multadd>
 800b194:	4607      	mov	r7, r0
 800b196:	e7f1      	b.n	800b17c <_dtoa_r+0xb04>
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	9d01      	ldr	r5, [sp, #4]
 800b19e:	ee18 0a10 	vmov	r0, s16
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	f7ff f9dc 	bl	800a560 <quorem>
 800b1a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1ac:	9b01      	ldr	r3, [sp, #4]
 800b1ae:	f805 ab01 	strb.w	sl, [r5], #1
 800b1b2:	1aea      	subs	r2, r5, r3
 800b1b4:	9b02      	ldr	r3, [sp, #8]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	dd09      	ble.n	800b1ce <_dtoa_r+0xb56>
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	2300      	movs	r3, #0
 800b1c0:	220a      	movs	r2, #10
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fe62 	bl	800be8c <__multadd>
 800b1c8:	ee08 0a10 	vmov	s16, r0
 800b1cc:	e7e7      	b.n	800b19e <_dtoa_r+0xb26>
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfc8      	it	gt
 800b1d4:	461d      	movgt	r5, r3
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	bfd8      	it	le
 800b1da:	2501      	movle	r5, #1
 800b1dc:	441d      	add	r5, r3
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	ee18 1a10 	vmov	r1, s16
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f001 f849 	bl	800c280 <__lshift>
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	ee08 0a10 	vmov	s16, r0
 800b1f4:	f001 f8b4 	bl	800c360 <__mcmp>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	dc91      	bgt.n	800b120 <_dtoa_r+0xaa8>
 800b1fc:	d102      	bne.n	800b204 <_dtoa_r+0xb8c>
 800b1fe:	f01a 0f01 	tst.w	sl, #1
 800b202:	d18d      	bne.n	800b120 <_dtoa_r+0xaa8>
 800b204:	462b      	mov	r3, r5
 800b206:	461d      	mov	r5, r3
 800b208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b20c:	2a30      	cmp	r2, #48	; 0x30
 800b20e:	d0fa      	beq.n	800b206 <_dtoa_r+0xb8e>
 800b210:	e6d7      	b.n	800afc2 <_dtoa_r+0x94a>
 800b212:	9a01      	ldr	r2, [sp, #4]
 800b214:	429a      	cmp	r2, r3
 800b216:	d184      	bne.n	800b122 <_dtoa_r+0xaaa>
 800b218:	9b00      	ldr	r3, [sp, #0]
 800b21a:	3301      	adds	r3, #1
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	2331      	movs	r3, #49	; 0x31
 800b220:	7013      	strb	r3, [r2, #0]
 800b222:	e6ce      	b.n	800afc2 <_dtoa_r+0x94a>
 800b224:	4b09      	ldr	r3, [pc, #36]	; (800b24c <_dtoa_r+0xbd4>)
 800b226:	f7ff ba95 	b.w	800a754 <_dtoa_r+0xdc>
 800b22a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f47f aa6e 	bne.w	800a70e <_dtoa_r+0x96>
 800b232:	4b07      	ldr	r3, [pc, #28]	; (800b250 <_dtoa_r+0xbd8>)
 800b234:	f7ff ba8e 	b.w	800a754 <_dtoa_r+0xdc>
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	dcae      	bgt.n	800b19c <_dtoa_r+0xb24>
 800b23e:	9b06      	ldr	r3, [sp, #24]
 800b240:	2b02      	cmp	r3, #2
 800b242:	f73f aea8 	bgt.w	800af96 <_dtoa_r+0x91e>
 800b246:	e7a9      	b.n	800b19c <_dtoa_r+0xb24>
 800b248:	0800d970 	.word	0x0800d970
 800b24c:	0800d774 	.word	0x0800d774
 800b250:	0800d8f1 	.word	0x0800d8f1

0800b254 <__sflush_r>:
 800b254:	898a      	ldrh	r2, [r1, #12]
 800b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	4605      	mov	r5, r0
 800b25c:	0710      	lsls	r0, r2, #28
 800b25e:	460c      	mov	r4, r1
 800b260:	d458      	bmi.n	800b314 <__sflush_r+0xc0>
 800b262:	684b      	ldr	r3, [r1, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	dc05      	bgt.n	800b274 <__sflush_r+0x20>
 800b268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dc02      	bgt.n	800b274 <__sflush_r+0x20>
 800b26e:	2000      	movs	r0, #0
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b276:	2e00      	cmp	r6, #0
 800b278:	d0f9      	beq.n	800b26e <__sflush_r+0x1a>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b280:	682f      	ldr	r7, [r5, #0]
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	d032      	beq.n	800b2ec <__sflush_r+0x98>
 800b286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	075a      	lsls	r2, r3, #29
 800b28c:	d505      	bpl.n	800b29a <__sflush_r+0x46>
 800b28e:	6863      	ldr	r3, [r4, #4]
 800b290:	1ac0      	subs	r0, r0, r3
 800b292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b294:	b10b      	cbz	r3, 800b29a <__sflush_r+0x46>
 800b296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b298:	1ac0      	subs	r0, r0, r3
 800b29a:	2300      	movs	r3, #0
 800b29c:	4602      	mov	r2, r0
 800b29e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2a0:	6a21      	ldr	r1, [r4, #32]
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b0      	blx	r6
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	d106      	bne.n	800b2ba <__sflush_r+0x66>
 800b2ac:	6829      	ldr	r1, [r5, #0]
 800b2ae:	291d      	cmp	r1, #29
 800b2b0:	d82c      	bhi.n	800b30c <__sflush_r+0xb8>
 800b2b2:	4a2a      	ldr	r2, [pc, #168]	; (800b35c <__sflush_r+0x108>)
 800b2b4:	40ca      	lsrs	r2, r1
 800b2b6:	07d6      	lsls	r6, r2, #31
 800b2b8:	d528      	bpl.n	800b30c <__sflush_r+0xb8>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	6062      	str	r2, [r4, #4]
 800b2be:	04d9      	lsls	r1, r3, #19
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	6022      	str	r2, [r4, #0]
 800b2c4:	d504      	bpl.n	800b2d0 <__sflush_r+0x7c>
 800b2c6:	1c42      	adds	r2, r0, #1
 800b2c8:	d101      	bne.n	800b2ce <__sflush_r+0x7a>
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	b903      	cbnz	r3, 800b2d0 <__sflush_r+0x7c>
 800b2ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b2d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d2:	602f      	str	r7, [r5, #0]
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d0ca      	beq.n	800b26e <__sflush_r+0x1a>
 800b2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	d002      	beq.n	800b2e6 <__sflush_r+0x92>
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f001 fa49 	bl	800c778 <_free_r>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b2ea:	e7c1      	b.n	800b270 <__sflush_r+0x1c>
 800b2ec:	6a21      	ldr	r1, [r4, #32]
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b0      	blx	r6
 800b2f4:	1c41      	adds	r1, r0, #1
 800b2f6:	d1c7      	bne.n	800b288 <__sflush_r+0x34>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0c4      	beq.n	800b288 <__sflush_r+0x34>
 800b2fe:	2b1d      	cmp	r3, #29
 800b300:	d001      	beq.n	800b306 <__sflush_r+0xb2>
 800b302:	2b16      	cmp	r3, #22
 800b304:	d101      	bne.n	800b30a <__sflush_r+0xb6>
 800b306:	602f      	str	r7, [r5, #0]
 800b308:	e7b1      	b.n	800b26e <__sflush_r+0x1a>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	e7ad      	b.n	800b270 <__sflush_r+0x1c>
 800b314:	690f      	ldr	r7, [r1, #16]
 800b316:	2f00      	cmp	r7, #0
 800b318:	d0a9      	beq.n	800b26e <__sflush_r+0x1a>
 800b31a:	0793      	lsls	r3, r2, #30
 800b31c:	680e      	ldr	r6, [r1, #0]
 800b31e:	bf08      	it	eq
 800b320:	694b      	ldreq	r3, [r1, #20]
 800b322:	600f      	str	r7, [r1, #0]
 800b324:	bf18      	it	ne
 800b326:	2300      	movne	r3, #0
 800b328:	eba6 0807 	sub.w	r8, r6, r7
 800b32c:	608b      	str	r3, [r1, #8]
 800b32e:	f1b8 0f00 	cmp.w	r8, #0
 800b332:	dd9c      	ble.n	800b26e <__sflush_r+0x1a>
 800b334:	6a21      	ldr	r1, [r4, #32]
 800b336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b338:	4643      	mov	r3, r8
 800b33a:	463a      	mov	r2, r7
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b0      	blx	r6
 800b340:	2800      	cmp	r0, #0
 800b342:	dc06      	bgt.n	800b352 <__sflush_r+0xfe>
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	e78e      	b.n	800b270 <__sflush_r+0x1c>
 800b352:	4407      	add	r7, r0
 800b354:	eba8 0800 	sub.w	r8, r8, r0
 800b358:	e7e9      	b.n	800b32e <__sflush_r+0xda>
 800b35a:	bf00      	nop
 800b35c:	20400001 	.word	0x20400001

0800b360 <_fflush_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	690b      	ldr	r3, [r1, #16]
 800b364:	4605      	mov	r5, r0
 800b366:	460c      	mov	r4, r1
 800b368:	b913      	cbnz	r3, 800b370 <_fflush_r+0x10>
 800b36a:	2500      	movs	r5, #0
 800b36c:	4628      	mov	r0, r5
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	b118      	cbz	r0, 800b37a <_fflush_r+0x1a>
 800b372:	6983      	ldr	r3, [r0, #24]
 800b374:	b90b      	cbnz	r3, 800b37a <_fflush_r+0x1a>
 800b376:	f000 f887 	bl	800b488 <__sinit>
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <_fflush_r+0x6c>)
 800b37c:	429c      	cmp	r4, r3
 800b37e:	d11b      	bne.n	800b3b8 <_fflush_r+0x58>
 800b380:	686c      	ldr	r4, [r5, #4]
 800b382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0ef      	beq.n	800b36a <_fflush_r+0xa>
 800b38a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b38c:	07d0      	lsls	r0, r2, #31
 800b38e:	d404      	bmi.n	800b39a <_fflush_r+0x3a>
 800b390:	0599      	lsls	r1, r3, #22
 800b392:	d402      	bmi.n	800b39a <_fflush_r+0x3a>
 800b394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b396:	f000 fc88 	bl	800bcaa <__retarget_lock_acquire_recursive>
 800b39a:	4628      	mov	r0, r5
 800b39c:	4621      	mov	r1, r4
 800b39e:	f7ff ff59 	bl	800b254 <__sflush_r>
 800b3a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3a4:	07da      	lsls	r2, r3, #31
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	d4e0      	bmi.n	800b36c <_fflush_r+0xc>
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	059b      	lsls	r3, r3, #22
 800b3ae:	d4dd      	bmi.n	800b36c <_fflush_r+0xc>
 800b3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b2:	f000 fc7b 	bl	800bcac <__retarget_lock_release_recursive>
 800b3b6:	e7d9      	b.n	800b36c <_fflush_r+0xc>
 800b3b8:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <_fflush_r+0x70>)
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d101      	bne.n	800b3c2 <_fflush_r+0x62>
 800b3be:	68ac      	ldr	r4, [r5, #8]
 800b3c0:	e7df      	b.n	800b382 <_fflush_r+0x22>
 800b3c2:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <_fflush_r+0x74>)
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	bf08      	it	eq
 800b3c8:	68ec      	ldreq	r4, [r5, #12]
 800b3ca:	e7da      	b.n	800b382 <_fflush_r+0x22>
 800b3cc:	0800d9a4 	.word	0x0800d9a4
 800b3d0:	0800d9c4 	.word	0x0800d9c4
 800b3d4:	0800d984 	.word	0x0800d984

0800b3d8 <std>:
 800b3d8:	2300      	movs	r3, #0
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	e9c0 3300 	strd	r3, r3, [r0]
 800b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3e6:	6083      	str	r3, [r0, #8]
 800b3e8:	8181      	strh	r1, [r0, #12]
 800b3ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b3ec:	81c2      	strh	r2, [r0, #14]
 800b3ee:	6183      	str	r3, [r0, #24]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	2208      	movs	r2, #8
 800b3f4:	305c      	adds	r0, #92	; 0x5c
 800b3f6:	f7fd f8f5 	bl	80085e4 <memset>
 800b3fa:	4b05      	ldr	r3, [pc, #20]	; (800b410 <std+0x38>)
 800b3fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b3fe:	4b05      	ldr	r3, [pc, #20]	; (800b414 <std+0x3c>)
 800b400:	62a3      	str	r3, [r4, #40]	; 0x28
 800b402:	4b05      	ldr	r3, [pc, #20]	; (800b418 <std+0x40>)
 800b404:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b406:	4b05      	ldr	r3, [pc, #20]	; (800b41c <std+0x44>)
 800b408:	6224      	str	r4, [r4, #32]
 800b40a:	6323      	str	r3, [r4, #48]	; 0x30
 800b40c:	bd10      	pop	{r4, pc}
 800b40e:	bf00      	nop
 800b410:	0800ced9 	.word	0x0800ced9
 800b414:	0800cefb 	.word	0x0800cefb
 800b418:	0800cf33 	.word	0x0800cf33
 800b41c:	0800cf57 	.word	0x0800cf57

0800b420 <_cleanup_r>:
 800b420:	4901      	ldr	r1, [pc, #4]	; (800b428 <_cleanup_r+0x8>)
 800b422:	f000 b8af 	b.w	800b584 <_fwalk_reent>
 800b426:	bf00      	nop
 800b428:	0800b361 	.word	0x0800b361

0800b42c <__sfmoreglue>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	2268      	movs	r2, #104	; 0x68
 800b430:	1e4d      	subs	r5, r1, #1
 800b432:	4355      	muls	r5, r2
 800b434:	460e      	mov	r6, r1
 800b436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b43a:	f001 fa09 	bl	800c850 <_malloc_r>
 800b43e:	4604      	mov	r4, r0
 800b440:	b140      	cbz	r0, 800b454 <__sfmoreglue+0x28>
 800b442:	2100      	movs	r1, #0
 800b444:	e9c0 1600 	strd	r1, r6, [r0]
 800b448:	300c      	adds	r0, #12
 800b44a:	60a0      	str	r0, [r4, #8]
 800b44c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b450:	f7fd f8c8 	bl	80085e4 <memset>
 800b454:	4620      	mov	r0, r4
 800b456:	bd70      	pop	{r4, r5, r6, pc}

0800b458 <__sfp_lock_acquire>:
 800b458:	4801      	ldr	r0, [pc, #4]	; (800b460 <__sfp_lock_acquire+0x8>)
 800b45a:	f000 bc26 	b.w	800bcaa <__retarget_lock_acquire_recursive>
 800b45e:	bf00      	nop
 800b460:	200006c1 	.word	0x200006c1

0800b464 <__sfp_lock_release>:
 800b464:	4801      	ldr	r0, [pc, #4]	; (800b46c <__sfp_lock_release+0x8>)
 800b466:	f000 bc21 	b.w	800bcac <__retarget_lock_release_recursive>
 800b46a:	bf00      	nop
 800b46c:	200006c1 	.word	0x200006c1

0800b470 <__sinit_lock_acquire>:
 800b470:	4801      	ldr	r0, [pc, #4]	; (800b478 <__sinit_lock_acquire+0x8>)
 800b472:	f000 bc1a 	b.w	800bcaa <__retarget_lock_acquire_recursive>
 800b476:	bf00      	nop
 800b478:	200006c2 	.word	0x200006c2

0800b47c <__sinit_lock_release>:
 800b47c:	4801      	ldr	r0, [pc, #4]	; (800b484 <__sinit_lock_release+0x8>)
 800b47e:	f000 bc15 	b.w	800bcac <__retarget_lock_release_recursive>
 800b482:	bf00      	nop
 800b484:	200006c2 	.word	0x200006c2

0800b488 <__sinit>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	f7ff fff0 	bl	800b470 <__sinit_lock_acquire>
 800b490:	69a3      	ldr	r3, [r4, #24]
 800b492:	b11b      	cbz	r3, 800b49c <__sinit+0x14>
 800b494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b498:	f7ff bff0 	b.w	800b47c <__sinit_lock_release>
 800b49c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <__sinit+0x68>)
 800b4a4:	4a13      	ldr	r2, [pc, #76]	; (800b4f4 <__sinit+0x6c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	bf04      	itt	eq
 800b4ae:	2301      	moveq	r3, #1
 800b4b0:	61a3      	streq	r3, [r4, #24]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 f820 	bl	800b4f8 <__sfp>
 800b4b8:	6060      	str	r0, [r4, #4]
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f000 f81c 	bl	800b4f8 <__sfp>
 800b4c0:	60a0      	str	r0, [r4, #8]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f000 f818 	bl	800b4f8 <__sfp>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	60e0      	str	r0, [r4, #12]
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	6860      	ldr	r0, [r4, #4]
 800b4d0:	f7ff ff82 	bl	800b3d8 <std>
 800b4d4:	68a0      	ldr	r0, [r4, #8]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	2109      	movs	r1, #9
 800b4da:	f7ff ff7d 	bl	800b3d8 <std>
 800b4de:	68e0      	ldr	r0, [r4, #12]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	2112      	movs	r1, #18
 800b4e4:	f7ff ff78 	bl	800b3d8 <std>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	61a3      	str	r3, [r4, #24]
 800b4ec:	e7d2      	b.n	800b494 <__sinit+0xc>
 800b4ee:	bf00      	nop
 800b4f0:	0800d760 	.word	0x0800d760
 800b4f4:	0800b421 	.word	0x0800b421

0800b4f8 <__sfp>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	f7ff ffac 	bl	800b458 <__sfp_lock_acquire>
 800b500:	4b1e      	ldr	r3, [pc, #120]	; (800b57c <__sfp+0x84>)
 800b502:	681e      	ldr	r6, [r3, #0]
 800b504:	69b3      	ldr	r3, [r6, #24]
 800b506:	b913      	cbnz	r3, 800b50e <__sfp+0x16>
 800b508:	4630      	mov	r0, r6
 800b50a:	f7ff ffbd 	bl	800b488 <__sinit>
 800b50e:	3648      	adds	r6, #72	; 0x48
 800b510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b514:	3b01      	subs	r3, #1
 800b516:	d503      	bpl.n	800b520 <__sfp+0x28>
 800b518:	6833      	ldr	r3, [r6, #0]
 800b51a:	b30b      	cbz	r3, 800b560 <__sfp+0x68>
 800b51c:	6836      	ldr	r6, [r6, #0]
 800b51e:	e7f7      	b.n	800b510 <__sfp+0x18>
 800b520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b524:	b9d5      	cbnz	r5, 800b55c <__sfp+0x64>
 800b526:	4b16      	ldr	r3, [pc, #88]	; (800b580 <__sfp+0x88>)
 800b528:	60e3      	str	r3, [r4, #12]
 800b52a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b52e:	6665      	str	r5, [r4, #100]	; 0x64
 800b530:	f000 fbba 	bl	800bca8 <__retarget_lock_init_recursive>
 800b534:	f7ff ff96 	bl	800b464 <__sfp_lock_release>
 800b538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b53c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b540:	6025      	str	r5, [r4, #0]
 800b542:	61a5      	str	r5, [r4, #24]
 800b544:	2208      	movs	r2, #8
 800b546:	4629      	mov	r1, r5
 800b548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b54c:	f7fd f84a 	bl	80085e4 <memset>
 800b550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b558:	4620      	mov	r0, r4
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	3468      	adds	r4, #104	; 0x68
 800b55e:	e7d9      	b.n	800b514 <__sfp+0x1c>
 800b560:	2104      	movs	r1, #4
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ff62 	bl	800b42c <__sfmoreglue>
 800b568:	4604      	mov	r4, r0
 800b56a:	6030      	str	r0, [r6, #0]
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d1d5      	bne.n	800b51c <__sfp+0x24>
 800b570:	f7ff ff78 	bl	800b464 <__sfp_lock_release>
 800b574:	230c      	movs	r3, #12
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	e7ee      	b.n	800b558 <__sfp+0x60>
 800b57a:	bf00      	nop
 800b57c:	0800d760 	.word	0x0800d760
 800b580:	ffff0001 	.word	0xffff0001

0800b584 <_fwalk_reent>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	4606      	mov	r6, r0
 800b58a:	4688      	mov	r8, r1
 800b58c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b590:	2700      	movs	r7, #0
 800b592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b596:	f1b9 0901 	subs.w	r9, r9, #1
 800b59a:	d505      	bpl.n	800b5a8 <_fwalk_reent+0x24>
 800b59c:	6824      	ldr	r4, [r4, #0]
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	d1f7      	bne.n	800b592 <_fwalk_reent+0xe>
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a8:	89ab      	ldrh	r3, [r5, #12]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d907      	bls.n	800b5be <_fwalk_reent+0x3a>
 800b5ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	d003      	beq.n	800b5be <_fwalk_reent+0x3a>
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	47c0      	blx	r8
 800b5bc:	4307      	orrs	r7, r0
 800b5be:	3568      	adds	r5, #104	; 0x68
 800b5c0:	e7e9      	b.n	800b596 <_fwalk_reent+0x12>

0800b5c2 <rshift>:
 800b5c2:	6903      	ldr	r3, [r0, #16]
 800b5c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5d0:	f100 0414 	add.w	r4, r0, #20
 800b5d4:	dd45      	ble.n	800b662 <rshift+0xa0>
 800b5d6:	f011 011f 	ands.w	r1, r1, #31
 800b5da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5e2:	d10c      	bne.n	800b5fe <rshift+0x3c>
 800b5e4:	f100 0710 	add.w	r7, r0, #16
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	42b1      	cmp	r1, r6
 800b5ec:	d334      	bcc.n	800b658 <rshift+0x96>
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	1eea      	subs	r2, r5, #3
 800b5f4:	4296      	cmp	r6, r2
 800b5f6:	bf38      	it	cc
 800b5f8:	2300      	movcc	r3, #0
 800b5fa:	4423      	add	r3, r4
 800b5fc:	e015      	b.n	800b62a <rshift+0x68>
 800b5fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b602:	f1c1 0820 	rsb	r8, r1, #32
 800b606:	40cf      	lsrs	r7, r1
 800b608:	f105 0e04 	add.w	lr, r5, #4
 800b60c:	46a1      	mov	r9, r4
 800b60e:	4576      	cmp	r6, lr
 800b610:	46f4      	mov	ip, lr
 800b612:	d815      	bhi.n	800b640 <rshift+0x7e>
 800b614:	1a9a      	subs	r2, r3, r2
 800b616:	0092      	lsls	r2, r2, #2
 800b618:	3a04      	subs	r2, #4
 800b61a:	3501      	adds	r5, #1
 800b61c:	42ae      	cmp	r6, r5
 800b61e:	bf38      	it	cc
 800b620:	2200      	movcc	r2, #0
 800b622:	18a3      	adds	r3, r4, r2
 800b624:	50a7      	str	r7, [r4, r2]
 800b626:	b107      	cbz	r7, 800b62a <rshift+0x68>
 800b628:	3304      	adds	r3, #4
 800b62a:	1b1a      	subs	r2, r3, r4
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b632:	bf08      	it	eq
 800b634:	2300      	moveq	r3, #0
 800b636:	6102      	str	r2, [r0, #16]
 800b638:	bf08      	it	eq
 800b63a:	6143      	streq	r3, [r0, #20]
 800b63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b640:	f8dc c000 	ldr.w	ip, [ip]
 800b644:	fa0c fc08 	lsl.w	ip, ip, r8
 800b648:	ea4c 0707 	orr.w	r7, ip, r7
 800b64c:	f849 7b04 	str.w	r7, [r9], #4
 800b650:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b654:	40cf      	lsrs	r7, r1
 800b656:	e7da      	b.n	800b60e <rshift+0x4c>
 800b658:	f851 cb04 	ldr.w	ip, [r1], #4
 800b65c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b660:	e7c3      	b.n	800b5ea <rshift+0x28>
 800b662:	4623      	mov	r3, r4
 800b664:	e7e1      	b.n	800b62a <rshift+0x68>

0800b666 <__hexdig_fun>:
 800b666:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b66a:	2b09      	cmp	r3, #9
 800b66c:	d802      	bhi.n	800b674 <__hexdig_fun+0xe>
 800b66e:	3820      	subs	r0, #32
 800b670:	b2c0      	uxtb	r0, r0
 800b672:	4770      	bx	lr
 800b674:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d801      	bhi.n	800b680 <__hexdig_fun+0x1a>
 800b67c:	3847      	subs	r0, #71	; 0x47
 800b67e:	e7f7      	b.n	800b670 <__hexdig_fun+0xa>
 800b680:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b684:	2b05      	cmp	r3, #5
 800b686:	d801      	bhi.n	800b68c <__hexdig_fun+0x26>
 800b688:	3827      	subs	r0, #39	; 0x27
 800b68a:	e7f1      	b.n	800b670 <__hexdig_fun+0xa>
 800b68c:	2000      	movs	r0, #0
 800b68e:	4770      	bx	lr

0800b690 <__gethex>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ed2d 8b02 	vpush	{d8}
 800b698:	b089      	sub	sp, #36	; 0x24
 800b69a:	ee08 0a10 	vmov	s16, r0
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	4bb4      	ldr	r3, [pc, #720]	; (800b974 <__gethex+0x2e4>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	468b      	mov	fp, r1
 800b6aa:	4690      	mov	r8, r2
 800b6ac:	f7f4 fdb0 	bl	8000210 <strlen>
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	f8db 2000 	ldr.w	r2, [fp]
 800b6b6:	4403      	add	r3, r0
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6be:	9305      	str	r3, [sp, #20]
 800b6c0:	1c93      	adds	r3, r2, #2
 800b6c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6ca:	32fe      	adds	r2, #254	; 0xfe
 800b6cc:	18d1      	adds	r1, r2, r3
 800b6ce:	461f      	mov	r7, r3
 800b6d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6d4:	9100      	str	r1, [sp, #0]
 800b6d6:	2830      	cmp	r0, #48	; 0x30
 800b6d8:	d0f8      	beq.n	800b6cc <__gethex+0x3c>
 800b6da:	f7ff ffc4 	bl	800b666 <__hexdig_fun>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d13a      	bne.n	800b75a <__gethex+0xca>
 800b6e4:	9901      	ldr	r1, [sp, #4]
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f001 fc38 	bl	800cf5e <strncmp>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d168      	bne.n	800b7c6 <__gethex+0x136>
 800b6f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b6f8:	eb07 060a 	add.w	r6, r7, sl
 800b6fc:	f7ff ffb3 	bl	800b666 <__hexdig_fun>
 800b700:	2800      	cmp	r0, #0
 800b702:	d062      	beq.n	800b7ca <__gethex+0x13a>
 800b704:	4633      	mov	r3, r6
 800b706:	7818      	ldrb	r0, [r3, #0]
 800b708:	2830      	cmp	r0, #48	; 0x30
 800b70a:	461f      	mov	r7, r3
 800b70c:	f103 0301 	add.w	r3, r3, #1
 800b710:	d0f9      	beq.n	800b706 <__gethex+0x76>
 800b712:	f7ff ffa8 	bl	800b666 <__hexdig_fun>
 800b716:	2301      	movs	r3, #1
 800b718:	fab0 f480 	clz	r4, r0
 800b71c:	0964      	lsrs	r4, r4, #5
 800b71e:	4635      	mov	r5, r6
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	463a      	mov	r2, r7
 800b724:	4616      	mov	r6, r2
 800b726:	3201      	adds	r2, #1
 800b728:	7830      	ldrb	r0, [r6, #0]
 800b72a:	f7ff ff9c 	bl	800b666 <__hexdig_fun>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d1f8      	bne.n	800b724 <__gethex+0x94>
 800b732:	9901      	ldr	r1, [sp, #4]
 800b734:	4652      	mov	r2, sl
 800b736:	4630      	mov	r0, r6
 800b738:	f001 fc11 	bl	800cf5e <strncmp>
 800b73c:	b980      	cbnz	r0, 800b760 <__gethex+0xd0>
 800b73e:	b94d      	cbnz	r5, 800b754 <__gethex+0xc4>
 800b740:	eb06 050a 	add.w	r5, r6, sl
 800b744:	462a      	mov	r2, r5
 800b746:	4616      	mov	r6, r2
 800b748:	3201      	adds	r2, #1
 800b74a:	7830      	ldrb	r0, [r6, #0]
 800b74c:	f7ff ff8b 	bl	800b666 <__hexdig_fun>
 800b750:	2800      	cmp	r0, #0
 800b752:	d1f8      	bne.n	800b746 <__gethex+0xb6>
 800b754:	1bad      	subs	r5, r5, r6
 800b756:	00ad      	lsls	r5, r5, #2
 800b758:	e004      	b.n	800b764 <__gethex+0xd4>
 800b75a:	2400      	movs	r4, #0
 800b75c:	4625      	mov	r5, r4
 800b75e:	e7e0      	b.n	800b722 <__gethex+0x92>
 800b760:	2d00      	cmp	r5, #0
 800b762:	d1f7      	bne.n	800b754 <__gethex+0xc4>
 800b764:	7833      	ldrb	r3, [r6, #0]
 800b766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b76a:	2b50      	cmp	r3, #80	; 0x50
 800b76c:	d13b      	bne.n	800b7e6 <__gethex+0x156>
 800b76e:	7873      	ldrb	r3, [r6, #1]
 800b770:	2b2b      	cmp	r3, #43	; 0x2b
 800b772:	d02c      	beq.n	800b7ce <__gethex+0x13e>
 800b774:	2b2d      	cmp	r3, #45	; 0x2d
 800b776:	d02e      	beq.n	800b7d6 <__gethex+0x146>
 800b778:	1c71      	adds	r1, r6, #1
 800b77a:	f04f 0900 	mov.w	r9, #0
 800b77e:	7808      	ldrb	r0, [r1, #0]
 800b780:	f7ff ff71 	bl	800b666 <__hexdig_fun>
 800b784:	1e43      	subs	r3, r0, #1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b18      	cmp	r3, #24
 800b78a:	d82c      	bhi.n	800b7e6 <__gethex+0x156>
 800b78c:	f1a0 0210 	sub.w	r2, r0, #16
 800b790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b794:	f7ff ff67 	bl	800b666 <__hexdig_fun>
 800b798:	1e43      	subs	r3, r0, #1
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b18      	cmp	r3, #24
 800b79e:	d91d      	bls.n	800b7dc <__gethex+0x14c>
 800b7a0:	f1b9 0f00 	cmp.w	r9, #0
 800b7a4:	d000      	beq.n	800b7a8 <__gethex+0x118>
 800b7a6:	4252      	negs	r2, r2
 800b7a8:	4415      	add	r5, r2
 800b7aa:	f8cb 1000 	str.w	r1, [fp]
 800b7ae:	b1e4      	cbz	r4, 800b7ea <__gethex+0x15a>
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bf14      	ite	ne
 800b7b6:	2700      	movne	r7, #0
 800b7b8:	2706      	moveq	r7, #6
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	b009      	add	sp, #36	; 0x24
 800b7be:	ecbd 8b02 	vpop	{d8}
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	463e      	mov	r6, r7
 800b7c8:	4625      	mov	r5, r4
 800b7ca:	2401      	movs	r4, #1
 800b7cc:	e7ca      	b.n	800b764 <__gethex+0xd4>
 800b7ce:	f04f 0900 	mov.w	r9, #0
 800b7d2:	1cb1      	adds	r1, r6, #2
 800b7d4:	e7d3      	b.n	800b77e <__gethex+0xee>
 800b7d6:	f04f 0901 	mov.w	r9, #1
 800b7da:	e7fa      	b.n	800b7d2 <__gethex+0x142>
 800b7dc:	230a      	movs	r3, #10
 800b7de:	fb03 0202 	mla	r2, r3, r2, r0
 800b7e2:	3a10      	subs	r2, #16
 800b7e4:	e7d4      	b.n	800b790 <__gethex+0x100>
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	e7df      	b.n	800b7aa <__gethex+0x11a>
 800b7ea:	1bf3      	subs	r3, r6, r7
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	2b07      	cmp	r3, #7
 800b7f2:	dc0b      	bgt.n	800b80c <__gethex+0x17c>
 800b7f4:	ee18 0a10 	vmov	r0, s16
 800b7f8:	f000 fae6 	bl	800bdc8 <_Balloc>
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	b940      	cbnz	r0, 800b812 <__gethex+0x182>
 800b800:	4b5d      	ldr	r3, [pc, #372]	; (800b978 <__gethex+0x2e8>)
 800b802:	4602      	mov	r2, r0
 800b804:	21de      	movs	r1, #222	; 0xde
 800b806:	485d      	ldr	r0, [pc, #372]	; (800b97c <__gethex+0x2ec>)
 800b808:	f001 fbdc 	bl	800cfc4 <__assert_func>
 800b80c:	3101      	adds	r1, #1
 800b80e:	105b      	asrs	r3, r3, #1
 800b810:	e7ee      	b.n	800b7f0 <__gethex+0x160>
 800b812:	f100 0914 	add.w	r9, r0, #20
 800b816:	f04f 0b00 	mov.w	fp, #0
 800b81a:	f1ca 0301 	rsb	r3, sl, #1
 800b81e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b822:	f8cd b000 	str.w	fp, [sp]
 800b826:	9306      	str	r3, [sp, #24]
 800b828:	42b7      	cmp	r7, r6
 800b82a:	d340      	bcc.n	800b8ae <__gethex+0x21e>
 800b82c:	9802      	ldr	r0, [sp, #8]
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	f840 3b04 	str.w	r3, [r0], #4
 800b834:	eba0 0009 	sub.w	r0, r0, r9
 800b838:	1080      	asrs	r0, r0, #2
 800b83a:	0146      	lsls	r6, r0, #5
 800b83c:	6120      	str	r0, [r4, #16]
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 fbb4 	bl	800bfac <__hi0bits>
 800b844:	1a30      	subs	r0, r6, r0
 800b846:	f8d8 6000 	ldr.w	r6, [r8]
 800b84a:	42b0      	cmp	r0, r6
 800b84c:	dd63      	ble.n	800b916 <__gethex+0x286>
 800b84e:	1b87      	subs	r7, r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	4620      	mov	r0, r4
 800b854:	f000 ff58 	bl	800c708 <__any_on>
 800b858:	4682      	mov	sl, r0
 800b85a:	b1a8      	cbz	r0, 800b888 <__gethex+0x1f8>
 800b85c:	1e7b      	subs	r3, r7, #1
 800b85e:	1159      	asrs	r1, r3, #5
 800b860:	f003 021f 	and.w	r2, r3, #31
 800b864:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b868:	f04f 0a01 	mov.w	sl, #1
 800b86c:	fa0a f202 	lsl.w	r2, sl, r2
 800b870:	420a      	tst	r2, r1
 800b872:	d009      	beq.n	800b888 <__gethex+0x1f8>
 800b874:	4553      	cmp	r3, sl
 800b876:	dd05      	ble.n	800b884 <__gethex+0x1f4>
 800b878:	1eb9      	subs	r1, r7, #2
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 ff44 	bl	800c708 <__any_on>
 800b880:	2800      	cmp	r0, #0
 800b882:	d145      	bne.n	800b910 <__gethex+0x280>
 800b884:	f04f 0a02 	mov.w	sl, #2
 800b888:	4639      	mov	r1, r7
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7ff fe99 	bl	800b5c2 <rshift>
 800b890:	443d      	add	r5, r7
 800b892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b896:	42ab      	cmp	r3, r5
 800b898:	da4c      	bge.n	800b934 <__gethex+0x2a4>
 800b89a:	ee18 0a10 	vmov	r0, s16
 800b89e:	4621      	mov	r1, r4
 800b8a0:	f000 fad2 	bl	800be48 <_Bfree>
 800b8a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	27a3      	movs	r7, #163	; 0xa3
 800b8ac:	e785      	b.n	800b7ba <__gethex+0x12a>
 800b8ae:	1e73      	subs	r3, r6, #1
 800b8b0:	9a05      	ldr	r2, [sp, #20]
 800b8b2:	9303      	str	r3, [sp, #12]
 800b8b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d019      	beq.n	800b8f0 <__gethex+0x260>
 800b8bc:	f1bb 0f20 	cmp.w	fp, #32
 800b8c0:	d107      	bne.n	800b8d2 <__gethex+0x242>
 800b8c2:	9b02      	ldr	r3, [sp, #8]
 800b8c4:	9a00      	ldr	r2, [sp, #0]
 800b8c6:	f843 2b04 	str.w	r2, [r3], #4
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	469b      	mov	fp, r3
 800b8d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8d6:	f7ff fec6 	bl	800b666 <__hexdig_fun>
 800b8da:	9b00      	ldr	r3, [sp, #0]
 800b8dc:	f000 000f 	and.w	r0, r0, #15
 800b8e0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8e4:	4303      	orrs	r3, r0
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	f10b 0b04 	add.w	fp, fp, #4
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	e00d      	b.n	800b90c <__gethex+0x27c>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	9a06      	ldr	r2, [sp, #24]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	42bb      	cmp	r3, r7
 800b8f8:	d3e0      	bcc.n	800b8bc <__gethex+0x22c>
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	9901      	ldr	r1, [sp, #4]
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	4652      	mov	r2, sl
 800b902:	f001 fb2c 	bl	800cf5e <strncmp>
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1d7      	bne.n	800b8bc <__gethex+0x22c>
 800b90c:	461e      	mov	r6, r3
 800b90e:	e78b      	b.n	800b828 <__gethex+0x198>
 800b910:	f04f 0a03 	mov.w	sl, #3
 800b914:	e7b8      	b.n	800b888 <__gethex+0x1f8>
 800b916:	da0a      	bge.n	800b92e <__gethex+0x29e>
 800b918:	1a37      	subs	r7, r6, r0
 800b91a:	4621      	mov	r1, r4
 800b91c:	ee18 0a10 	vmov	r0, s16
 800b920:	463a      	mov	r2, r7
 800b922:	f000 fcad 	bl	800c280 <__lshift>
 800b926:	1bed      	subs	r5, r5, r7
 800b928:	4604      	mov	r4, r0
 800b92a:	f100 0914 	add.w	r9, r0, #20
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	e7ae      	b.n	800b892 <__gethex+0x202>
 800b934:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b938:	42a8      	cmp	r0, r5
 800b93a:	dd72      	ble.n	800ba22 <__gethex+0x392>
 800b93c:	1b45      	subs	r5, r0, r5
 800b93e:	42ae      	cmp	r6, r5
 800b940:	dc36      	bgt.n	800b9b0 <__gethex+0x320>
 800b942:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b946:	2b02      	cmp	r3, #2
 800b948:	d02a      	beq.n	800b9a0 <__gethex+0x310>
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d02c      	beq.n	800b9a8 <__gethex+0x318>
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d11c      	bne.n	800b98c <__gethex+0x2fc>
 800b952:	42ae      	cmp	r6, r5
 800b954:	d11a      	bne.n	800b98c <__gethex+0x2fc>
 800b956:	2e01      	cmp	r6, #1
 800b958:	d112      	bne.n	800b980 <__gethex+0x2f0>
 800b95a:	9a04      	ldr	r2, [sp, #16]
 800b95c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	2301      	movs	r3, #1
 800b964:	6123      	str	r3, [r4, #16]
 800b966:	f8c9 3000 	str.w	r3, [r9]
 800b96a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b96c:	2762      	movs	r7, #98	; 0x62
 800b96e:	601c      	str	r4, [r3, #0]
 800b970:	e723      	b.n	800b7ba <__gethex+0x12a>
 800b972:	bf00      	nop
 800b974:	0800da4c 	.word	0x0800da4c
 800b978:	0800d970 	.word	0x0800d970
 800b97c:	0800d9e4 	.word	0x0800d9e4
 800b980:	1e71      	subs	r1, r6, #1
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fec0 	bl	800c708 <__any_on>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d1e6      	bne.n	800b95a <__gethex+0x2ca>
 800b98c:	ee18 0a10 	vmov	r0, s16
 800b990:	4621      	mov	r1, r4
 800b992:	f000 fa59 	bl	800be48 <_Bfree>
 800b996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b998:	2300      	movs	r3, #0
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	2750      	movs	r7, #80	; 0x50
 800b99e:	e70c      	b.n	800b7ba <__gethex+0x12a>
 800b9a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1f2      	bne.n	800b98c <__gethex+0x2fc>
 800b9a6:	e7d8      	b.n	800b95a <__gethex+0x2ca>
 800b9a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1d5      	bne.n	800b95a <__gethex+0x2ca>
 800b9ae:	e7ed      	b.n	800b98c <__gethex+0x2fc>
 800b9b0:	1e6f      	subs	r7, r5, #1
 800b9b2:	f1ba 0f00 	cmp.w	sl, #0
 800b9b6:	d131      	bne.n	800ba1c <__gethex+0x38c>
 800b9b8:	b127      	cbz	r7, 800b9c4 <__gethex+0x334>
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 fea3 	bl	800c708 <__any_on>
 800b9c2:	4682      	mov	sl, r0
 800b9c4:	117b      	asrs	r3, r7, #5
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b9cc:	f007 071f 	and.w	r7, r7, #31
 800b9d0:	fa01 f707 	lsl.w	r7, r1, r7
 800b9d4:	421f      	tst	r7, r3
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4620      	mov	r0, r4
 800b9da:	bf18      	it	ne
 800b9dc:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9e0:	1b76      	subs	r6, r6, r5
 800b9e2:	f7ff fdee 	bl	800b5c2 <rshift>
 800b9e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9ea:	2702      	movs	r7, #2
 800b9ec:	f1ba 0f00 	cmp.w	sl, #0
 800b9f0:	d048      	beq.n	800ba84 <__gethex+0x3f4>
 800b9f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d015      	beq.n	800ba26 <__gethex+0x396>
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d017      	beq.n	800ba2e <__gethex+0x39e>
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d109      	bne.n	800ba16 <__gethex+0x386>
 800ba02:	f01a 0f02 	tst.w	sl, #2
 800ba06:	d006      	beq.n	800ba16 <__gethex+0x386>
 800ba08:	f8d9 0000 	ldr.w	r0, [r9]
 800ba0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba10:	f01a 0f01 	tst.w	sl, #1
 800ba14:	d10e      	bne.n	800ba34 <__gethex+0x3a4>
 800ba16:	f047 0710 	orr.w	r7, r7, #16
 800ba1a:	e033      	b.n	800ba84 <__gethex+0x3f4>
 800ba1c:	f04f 0a01 	mov.w	sl, #1
 800ba20:	e7d0      	b.n	800b9c4 <__gethex+0x334>
 800ba22:	2701      	movs	r7, #1
 800ba24:	e7e2      	b.n	800b9ec <__gethex+0x35c>
 800ba26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba28:	f1c3 0301 	rsb	r3, r3, #1
 800ba2c:	9315      	str	r3, [sp, #84]	; 0x54
 800ba2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0f0      	beq.n	800ba16 <__gethex+0x386>
 800ba34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba38:	f104 0314 	add.w	r3, r4, #20
 800ba3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba44:	f04f 0c00 	mov.w	ip, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba52:	d01c      	beq.n	800ba8e <__gethex+0x3fe>
 800ba54:	3201      	adds	r2, #1
 800ba56:	6002      	str	r2, [r0, #0]
 800ba58:	2f02      	cmp	r7, #2
 800ba5a:	f104 0314 	add.w	r3, r4, #20
 800ba5e:	d13f      	bne.n	800bae0 <__gethex+0x450>
 800ba60:	f8d8 2000 	ldr.w	r2, [r8]
 800ba64:	3a01      	subs	r2, #1
 800ba66:	42b2      	cmp	r2, r6
 800ba68:	d10a      	bne.n	800ba80 <__gethex+0x3f0>
 800ba6a:	1171      	asrs	r1, r6, #5
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba72:	f006 061f 	and.w	r6, r6, #31
 800ba76:	fa02 f606 	lsl.w	r6, r2, r6
 800ba7a:	421e      	tst	r6, r3
 800ba7c:	bf18      	it	ne
 800ba7e:	4617      	movne	r7, r2
 800ba80:	f047 0720 	orr.w	r7, r7, #32
 800ba84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba86:	601c      	str	r4, [r3, #0]
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	601d      	str	r5, [r3, #0]
 800ba8c:	e695      	b.n	800b7ba <__gethex+0x12a>
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba94:	d8d8      	bhi.n	800ba48 <__gethex+0x3b8>
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	459b      	cmp	fp, r3
 800ba9a:	db19      	blt.n	800bad0 <__gethex+0x440>
 800ba9c:	6861      	ldr	r1, [r4, #4]
 800ba9e:	ee18 0a10 	vmov	r0, s16
 800baa2:	3101      	adds	r1, #1
 800baa4:	f000 f990 	bl	800bdc8 <_Balloc>
 800baa8:	4681      	mov	r9, r0
 800baaa:	b918      	cbnz	r0, 800bab4 <__gethex+0x424>
 800baac:	4b1a      	ldr	r3, [pc, #104]	; (800bb18 <__gethex+0x488>)
 800baae:	4602      	mov	r2, r0
 800bab0:	2184      	movs	r1, #132	; 0x84
 800bab2:	e6a8      	b.n	800b806 <__gethex+0x176>
 800bab4:	6922      	ldr	r2, [r4, #16]
 800bab6:	3202      	adds	r2, #2
 800bab8:	f104 010c 	add.w	r1, r4, #12
 800babc:	0092      	lsls	r2, r2, #2
 800babe:	300c      	adds	r0, #12
 800bac0:	f000 f974 	bl	800bdac <memcpy>
 800bac4:	4621      	mov	r1, r4
 800bac6:	ee18 0a10 	vmov	r0, s16
 800baca:	f000 f9bd 	bl	800be48 <_Bfree>
 800bace:	464c      	mov	r4, r9
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bad8:	6122      	str	r2, [r4, #16]
 800bada:	2201      	movs	r2, #1
 800badc:	615a      	str	r2, [r3, #20]
 800bade:	e7bb      	b.n	800ba58 <__gethex+0x3c8>
 800bae0:	6922      	ldr	r2, [r4, #16]
 800bae2:	455a      	cmp	r2, fp
 800bae4:	dd0b      	ble.n	800bafe <__gethex+0x46e>
 800bae6:	2101      	movs	r1, #1
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff fd6a 	bl	800b5c2 <rshift>
 800baee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baf2:	3501      	adds	r5, #1
 800baf4:	42ab      	cmp	r3, r5
 800baf6:	f6ff aed0 	blt.w	800b89a <__gethex+0x20a>
 800bafa:	2701      	movs	r7, #1
 800bafc:	e7c0      	b.n	800ba80 <__gethex+0x3f0>
 800bafe:	f016 061f 	ands.w	r6, r6, #31
 800bb02:	d0fa      	beq.n	800bafa <__gethex+0x46a>
 800bb04:	4453      	add	r3, sl
 800bb06:	f1c6 0620 	rsb	r6, r6, #32
 800bb0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb0e:	f000 fa4d 	bl	800bfac <__hi0bits>
 800bb12:	42b0      	cmp	r0, r6
 800bb14:	dbe7      	blt.n	800bae6 <__gethex+0x456>
 800bb16:	e7f0      	b.n	800bafa <__gethex+0x46a>
 800bb18:	0800d970 	.word	0x0800d970

0800bb1c <L_shift>:
 800bb1c:	f1c2 0208 	rsb	r2, r2, #8
 800bb20:	0092      	lsls	r2, r2, #2
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	f1c2 0620 	rsb	r6, r2, #32
 800bb28:	6843      	ldr	r3, [r0, #4]
 800bb2a:	6804      	ldr	r4, [r0, #0]
 800bb2c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb30:	432c      	orrs	r4, r5
 800bb32:	40d3      	lsrs	r3, r2
 800bb34:	6004      	str	r4, [r0, #0]
 800bb36:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb3a:	4288      	cmp	r0, r1
 800bb3c:	d3f4      	bcc.n	800bb28 <L_shift+0xc>
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}

0800bb40 <__match>:
 800bb40:	b530      	push	{r4, r5, lr}
 800bb42:	6803      	ldr	r3, [r0, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4a:	b914      	cbnz	r4, 800bb52 <__match+0x12>
 800bb4c:	6003      	str	r3, [r0, #0]
 800bb4e:	2001      	movs	r0, #1
 800bb50:	bd30      	pop	{r4, r5, pc}
 800bb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb5a:	2d19      	cmp	r5, #25
 800bb5c:	bf98      	it	ls
 800bb5e:	3220      	addls	r2, #32
 800bb60:	42a2      	cmp	r2, r4
 800bb62:	d0f0      	beq.n	800bb46 <__match+0x6>
 800bb64:	2000      	movs	r0, #0
 800bb66:	e7f3      	b.n	800bb50 <__match+0x10>

0800bb68 <__hexnan>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	680b      	ldr	r3, [r1, #0]
 800bb6e:	115e      	asrs	r6, r3, #5
 800bb70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb74:	f013 031f 	ands.w	r3, r3, #31
 800bb78:	b087      	sub	sp, #28
 800bb7a:	bf18      	it	ne
 800bb7c:	3604      	addne	r6, #4
 800bb7e:	2500      	movs	r5, #0
 800bb80:	1f37      	subs	r7, r6, #4
 800bb82:	4690      	mov	r8, r2
 800bb84:	6802      	ldr	r2, [r0, #0]
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	4682      	mov	sl, r0
 800bb8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb8e:	46b9      	mov	r9, r7
 800bb90:	463c      	mov	r4, r7
 800bb92:	9502      	str	r5, [sp, #8]
 800bb94:	46ab      	mov	fp, r5
 800bb96:	7851      	ldrb	r1, [r2, #1]
 800bb98:	1c53      	adds	r3, r2, #1
 800bb9a:	9303      	str	r3, [sp, #12]
 800bb9c:	b341      	cbz	r1, 800bbf0 <__hexnan+0x88>
 800bb9e:	4608      	mov	r0, r1
 800bba0:	9205      	str	r2, [sp, #20]
 800bba2:	9104      	str	r1, [sp, #16]
 800bba4:	f7ff fd5f 	bl	800b666 <__hexdig_fun>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d14f      	bne.n	800bc4c <__hexnan+0xe4>
 800bbac:	9904      	ldr	r1, [sp, #16]
 800bbae:	9a05      	ldr	r2, [sp, #20]
 800bbb0:	2920      	cmp	r1, #32
 800bbb2:	d818      	bhi.n	800bbe6 <__hexnan+0x7e>
 800bbb4:	9b02      	ldr	r3, [sp, #8]
 800bbb6:	459b      	cmp	fp, r3
 800bbb8:	dd13      	ble.n	800bbe2 <__hexnan+0x7a>
 800bbba:	454c      	cmp	r4, r9
 800bbbc:	d206      	bcs.n	800bbcc <__hexnan+0x64>
 800bbbe:	2d07      	cmp	r5, #7
 800bbc0:	dc04      	bgt.n	800bbcc <__hexnan+0x64>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff ffa8 	bl	800bb1c <L_shift>
 800bbcc:	4544      	cmp	r4, r8
 800bbce:	d950      	bls.n	800bc72 <__hexnan+0x10a>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbda:	f8cd b008 	str.w	fp, [sp, #8]
 800bbde:	464c      	mov	r4, r9
 800bbe0:	461d      	mov	r5, r3
 800bbe2:	9a03      	ldr	r2, [sp, #12]
 800bbe4:	e7d7      	b.n	800bb96 <__hexnan+0x2e>
 800bbe6:	2929      	cmp	r1, #41	; 0x29
 800bbe8:	d156      	bne.n	800bc98 <__hexnan+0x130>
 800bbea:	3202      	adds	r2, #2
 800bbec:	f8ca 2000 	str.w	r2, [sl]
 800bbf0:	f1bb 0f00 	cmp.w	fp, #0
 800bbf4:	d050      	beq.n	800bc98 <__hexnan+0x130>
 800bbf6:	454c      	cmp	r4, r9
 800bbf8:	d206      	bcs.n	800bc08 <__hexnan+0xa0>
 800bbfa:	2d07      	cmp	r5, #7
 800bbfc:	dc04      	bgt.n	800bc08 <__hexnan+0xa0>
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4649      	mov	r1, r9
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7ff ff8a 	bl	800bb1c <L_shift>
 800bc08:	4544      	cmp	r4, r8
 800bc0a:	d934      	bls.n	800bc76 <__hexnan+0x10e>
 800bc0c:	f1a8 0204 	sub.w	r2, r8, #4
 800bc10:	4623      	mov	r3, r4
 800bc12:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc16:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	d2f9      	bcs.n	800bc12 <__hexnan+0xaa>
 800bc1e:	1b3b      	subs	r3, r7, r4
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	3304      	adds	r3, #4
 800bc26:	3401      	adds	r4, #1
 800bc28:	3e03      	subs	r6, #3
 800bc2a:	42b4      	cmp	r4, r6
 800bc2c:	bf88      	it	hi
 800bc2e:	2304      	movhi	r3, #4
 800bc30:	4443      	add	r3, r8
 800bc32:	2200      	movs	r2, #0
 800bc34:	f843 2b04 	str.w	r2, [r3], #4
 800bc38:	429f      	cmp	r7, r3
 800bc3a:	d2fb      	bcs.n	800bc34 <__hexnan+0xcc>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	b91b      	cbnz	r3, 800bc48 <__hexnan+0xe0>
 800bc40:	4547      	cmp	r7, r8
 800bc42:	d127      	bne.n	800bc94 <__hexnan+0x12c>
 800bc44:	2301      	movs	r3, #1
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	2005      	movs	r0, #5
 800bc4a:	e026      	b.n	800bc9a <__hexnan+0x132>
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	2d08      	cmp	r5, #8
 800bc50:	f10b 0b01 	add.w	fp, fp, #1
 800bc54:	dd06      	ble.n	800bc64 <__hexnan+0xfc>
 800bc56:	4544      	cmp	r4, r8
 800bc58:	d9c3      	bls.n	800bbe2 <__hexnan+0x7a>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc60:	2501      	movs	r5, #1
 800bc62:	3c04      	subs	r4, #4
 800bc64:	6822      	ldr	r2, [r4, #0]
 800bc66:	f000 000f 	and.w	r0, r0, #15
 800bc6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc6e:	6022      	str	r2, [r4, #0]
 800bc70:	e7b7      	b.n	800bbe2 <__hexnan+0x7a>
 800bc72:	2508      	movs	r5, #8
 800bc74:	e7b5      	b.n	800bbe2 <__hexnan+0x7a>
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0df      	beq.n	800bc3c <__hexnan+0xd4>
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc80:	f1c3 0320 	rsb	r3, r3, #32
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
 800bc88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc8c:	401a      	ands	r2, r3
 800bc8e:	f846 2c04 	str.w	r2, [r6, #-4]
 800bc92:	e7d3      	b.n	800bc3c <__hexnan+0xd4>
 800bc94:	3f04      	subs	r7, #4
 800bc96:	e7d1      	b.n	800bc3c <__hexnan+0xd4>
 800bc98:	2004      	movs	r0, #4
 800bc9a:	b007      	add	sp, #28
 800bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bca0 <_localeconv_r>:
 800bca0:	4800      	ldr	r0, [pc, #0]	; (800bca4 <_localeconv_r+0x4>)
 800bca2:	4770      	bx	lr
 800bca4:	20000180 	.word	0x20000180

0800bca8 <__retarget_lock_init_recursive>:
 800bca8:	4770      	bx	lr

0800bcaa <__retarget_lock_acquire_recursive>:
 800bcaa:	4770      	bx	lr

0800bcac <__retarget_lock_release_recursive>:
 800bcac:	4770      	bx	lr

0800bcae <__swhatbuf_r>:
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	460e      	mov	r6, r1
 800bcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	b096      	sub	sp, #88	; 0x58
 800bcba:	4614      	mov	r4, r2
 800bcbc:	461d      	mov	r5, r3
 800bcbe:	da08      	bge.n	800bcd2 <__swhatbuf_r+0x24>
 800bcc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	602a      	str	r2, [r5, #0]
 800bcc8:	061a      	lsls	r2, r3, #24
 800bcca:	d410      	bmi.n	800bcee <__swhatbuf_r+0x40>
 800bccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd0:	e00e      	b.n	800bcf0 <__swhatbuf_r+0x42>
 800bcd2:	466a      	mov	r2, sp
 800bcd4:	f001 f9b6 	bl	800d044 <_fstat_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	dbf1      	blt.n	800bcc0 <__swhatbuf_r+0x12>
 800bcdc:	9a01      	ldr	r2, [sp, #4]
 800bcde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bce2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bce6:	425a      	negs	r2, r3
 800bce8:	415a      	adcs	r2, r3
 800bcea:	602a      	str	r2, [r5, #0]
 800bcec:	e7ee      	b.n	800bccc <__swhatbuf_r+0x1e>
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	b016      	add	sp, #88	; 0x58
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}

0800bcf8 <__smakebuf_r>:
 800bcf8:	898b      	ldrh	r3, [r1, #12]
 800bcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfc:	079d      	lsls	r5, r3, #30
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d507      	bpl.n	800bd14 <__smakebuf_r+0x1c>
 800bd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	6163      	str	r3, [r4, #20]
 800bd10:	b002      	add	sp, #8
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	ab01      	add	r3, sp, #4
 800bd16:	466a      	mov	r2, sp
 800bd18:	f7ff ffc9 	bl	800bcae <__swhatbuf_r>
 800bd1c:	9900      	ldr	r1, [sp, #0]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	4630      	mov	r0, r6
 800bd22:	f000 fd95 	bl	800c850 <_malloc_r>
 800bd26:	b948      	cbnz	r0, 800bd3c <__smakebuf_r+0x44>
 800bd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2c:	059a      	lsls	r2, r3, #22
 800bd2e:	d4ef      	bmi.n	800bd10 <__smakebuf_r+0x18>
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7e3      	b.n	800bd04 <__smakebuf_r+0xc>
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <__smakebuf_r+0x7c>)
 800bd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	6020      	str	r0, [r4, #0]
 800bd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	6163      	str	r3, [r4, #20]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	6120      	str	r0, [r4, #16]
 800bd52:	b15b      	cbz	r3, 800bd6c <__smakebuf_r+0x74>
 800bd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f001 f985 	bl	800d068 <_isatty_r>
 800bd5e:	b128      	cbz	r0, 800bd6c <__smakebuf_r+0x74>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	89a0      	ldrh	r0, [r4, #12]
 800bd6e:	4305      	orrs	r5, r0
 800bd70:	81a5      	strh	r5, [r4, #12]
 800bd72:	e7cd      	b.n	800bd10 <__smakebuf_r+0x18>
 800bd74:	0800b421 	.word	0x0800b421

0800bd78 <malloc>:
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <malloc+0xc>)
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	6818      	ldr	r0, [r3, #0]
 800bd7e:	f000 bd67 	b.w	800c850 <_malloc_r>
 800bd82:	bf00      	nop
 800bd84:	20000028 	.word	0x20000028

0800bd88 <__ascii_mbtowc>:
 800bd88:	b082      	sub	sp, #8
 800bd8a:	b901      	cbnz	r1, 800bd8e <__ascii_mbtowc+0x6>
 800bd8c:	a901      	add	r1, sp, #4
 800bd8e:	b142      	cbz	r2, 800bda2 <__ascii_mbtowc+0x1a>
 800bd90:	b14b      	cbz	r3, 800bda6 <__ascii_mbtowc+0x1e>
 800bd92:	7813      	ldrb	r3, [r2, #0]
 800bd94:	600b      	str	r3, [r1, #0]
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	1e10      	subs	r0, r2, #0
 800bd9a:	bf18      	it	ne
 800bd9c:	2001      	movne	r0, #1
 800bd9e:	b002      	add	sp, #8
 800bda0:	4770      	bx	lr
 800bda2:	4610      	mov	r0, r2
 800bda4:	e7fb      	b.n	800bd9e <__ascii_mbtowc+0x16>
 800bda6:	f06f 0001 	mvn.w	r0, #1
 800bdaa:	e7f8      	b.n	800bd9e <__ascii_mbtowc+0x16>

0800bdac <memcpy>:
 800bdac:	440a      	add	r2, r1
 800bdae:	4291      	cmp	r1, r2
 800bdb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb4:	d100      	bne.n	800bdb8 <memcpy+0xc>
 800bdb6:	4770      	bx	lr
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdc2:	4291      	cmp	r1, r2
 800bdc4:	d1f9      	bne.n	800bdba <memcpy+0xe>
 800bdc6:	bd10      	pop	{r4, pc}

0800bdc8 <_Balloc>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdcc:	4604      	mov	r4, r0
 800bdce:	460d      	mov	r5, r1
 800bdd0:	b976      	cbnz	r6, 800bdf0 <_Balloc+0x28>
 800bdd2:	2010      	movs	r0, #16
 800bdd4:	f7ff ffd0 	bl	800bd78 <malloc>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	6260      	str	r0, [r4, #36]	; 0x24
 800bddc:	b920      	cbnz	r0, 800bde8 <_Balloc+0x20>
 800bdde:	4b18      	ldr	r3, [pc, #96]	; (800be40 <_Balloc+0x78>)
 800bde0:	4818      	ldr	r0, [pc, #96]	; (800be44 <_Balloc+0x7c>)
 800bde2:	2166      	movs	r1, #102	; 0x66
 800bde4:	f001 f8ee 	bl	800cfc4 <__assert_func>
 800bde8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdec:	6006      	str	r6, [r0, #0]
 800bdee:	60c6      	str	r6, [r0, #12]
 800bdf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdf2:	68f3      	ldr	r3, [r6, #12]
 800bdf4:	b183      	cbz	r3, 800be18 <_Balloc+0x50>
 800bdf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdfe:	b9b8      	cbnz	r0, 800be30 <_Balloc+0x68>
 800be00:	2101      	movs	r1, #1
 800be02:	fa01 f605 	lsl.w	r6, r1, r5
 800be06:	1d72      	adds	r2, r6, #5
 800be08:	0092      	lsls	r2, r2, #2
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 fc9d 	bl	800c74a <_calloc_r>
 800be10:	b160      	cbz	r0, 800be2c <_Balloc+0x64>
 800be12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be16:	e00e      	b.n	800be36 <_Balloc+0x6e>
 800be18:	2221      	movs	r2, #33	; 0x21
 800be1a:	2104      	movs	r1, #4
 800be1c:	4620      	mov	r0, r4
 800be1e:	f000 fc94 	bl	800c74a <_calloc_r>
 800be22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be24:	60f0      	str	r0, [r6, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e4      	bne.n	800bdf6 <_Balloc+0x2e>
 800be2c:	2000      	movs	r0, #0
 800be2e:	bd70      	pop	{r4, r5, r6, pc}
 800be30:	6802      	ldr	r2, [r0, #0]
 800be32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be36:	2300      	movs	r3, #0
 800be38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be3c:	e7f7      	b.n	800be2e <_Balloc+0x66>
 800be3e:	bf00      	nop
 800be40:	0800d8fe 	.word	0x0800d8fe
 800be44:	0800da60 	.word	0x0800da60

0800be48 <_Bfree>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be4c:	4605      	mov	r5, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	b976      	cbnz	r6, 800be70 <_Bfree+0x28>
 800be52:	2010      	movs	r0, #16
 800be54:	f7ff ff90 	bl	800bd78 <malloc>
 800be58:	4602      	mov	r2, r0
 800be5a:	6268      	str	r0, [r5, #36]	; 0x24
 800be5c:	b920      	cbnz	r0, 800be68 <_Bfree+0x20>
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <_Bfree+0x3c>)
 800be60:	4809      	ldr	r0, [pc, #36]	; (800be88 <_Bfree+0x40>)
 800be62:	218a      	movs	r1, #138	; 0x8a
 800be64:	f001 f8ae 	bl	800cfc4 <__assert_func>
 800be68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be6c:	6006      	str	r6, [r0, #0]
 800be6e:	60c6      	str	r6, [r0, #12]
 800be70:	b13c      	cbz	r4, 800be82 <_Bfree+0x3a>
 800be72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be74:	6862      	ldr	r2, [r4, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be7c:	6021      	str	r1, [r4, #0]
 800be7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be82:	bd70      	pop	{r4, r5, r6, pc}
 800be84:	0800d8fe 	.word	0x0800d8fe
 800be88:	0800da60 	.word	0x0800da60

0800be8c <__multadd>:
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	690d      	ldr	r5, [r1, #16]
 800be92:	4607      	mov	r7, r0
 800be94:	460c      	mov	r4, r1
 800be96:	461e      	mov	r6, r3
 800be98:	f101 0c14 	add.w	ip, r1, #20
 800be9c:	2000      	movs	r0, #0
 800be9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bea2:	b299      	uxth	r1, r3
 800bea4:	fb02 6101 	mla	r1, r2, r1, r6
 800bea8:	0c1e      	lsrs	r6, r3, #16
 800beaa:	0c0b      	lsrs	r3, r1, #16
 800beac:	fb02 3306 	mla	r3, r2, r6, r3
 800beb0:	b289      	uxth	r1, r1
 800beb2:	3001      	adds	r0, #1
 800beb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800beb8:	4285      	cmp	r5, r0
 800beba:	f84c 1b04 	str.w	r1, [ip], #4
 800bebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bec2:	dcec      	bgt.n	800be9e <__multadd+0x12>
 800bec4:	b30e      	cbz	r6, 800bf0a <__multadd+0x7e>
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	42ab      	cmp	r3, r5
 800beca:	dc19      	bgt.n	800bf00 <__multadd+0x74>
 800becc:	6861      	ldr	r1, [r4, #4]
 800bece:	4638      	mov	r0, r7
 800bed0:	3101      	adds	r1, #1
 800bed2:	f7ff ff79 	bl	800bdc8 <_Balloc>
 800bed6:	4680      	mov	r8, r0
 800bed8:	b928      	cbnz	r0, 800bee6 <__multadd+0x5a>
 800beda:	4602      	mov	r2, r0
 800bedc:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <__multadd+0x84>)
 800bede:	480d      	ldr	r0, [pc, #52]	; (800bf14 <__multadd+0x88>)
 800bee0:	21b5      	movs	r1, #181	; 0xb5
 800bee2:	f001 f86f 	bl	800cfc4 <__assert_func>
 800bee6:	6922      	ldr	r2, [r4, #16]
 800bee8:	3202      	adds	r2, #2
 800beea:	f104 010c 	add.w	r1, r4, #12
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	300c      	adds	r0, #12
 800bef2:	f7ff ff5b 	bl	800bdac <memcpy>
 800bef6:	4621      	mov	r1, r4
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff ffa5 	bl	800be48 <_Bfree>
 800befe:	4644      	mov	r4, r8
 800bf00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf04:	3501      	adds	r5, #1
 800bf06:	615e      	str	r6, [r3, #20]
 800bf08:	6125      	str	r5, [r4, #16]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	0800d970 	.word	0x0800d970
 800bf14:	0800da60 	.word	0x0800da60

0800bf18 <__s2b>:
 800bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	4615      	mov	r5, r2
 800bf20:	461f      	mov	r7, r3
 800bf22:	2209      	movs	r2, #9
 800bf24:	3308      	adds	r3, #8
 800bf26:	4606      	mov	r6, r0
 800bf28:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	2201      	movs	r2, #1
 800bf30:	429a      	cmp	r2, r3
 800bf32:	db09      	blt.n	800bf48 <__s2b+0x30>
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff ff47 	bl	800bdc8 <_Balloc>
 800bf3a:	b940      	cbnz	r0, 800bf4e <__s2b+0x36>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	4b19      	ldr	r3, [pc, #100]	; (800bfa4 <__s2b+0x8c>)
 800bf40:	4819      	ldr	r0, [pc, #100]	; (800bfa8 <__s2b+0x90>)
 800bf42:	21ce      	movs	r1, #206	; 0xce
 800bf44:	f001 f83e 	bl	800cfc4 <__assert_func>
 800bf48:	0052      	lsls	r2, r2, #1
 800bf4a:	3101      	adds	r1, #1
 800bf4c:	e7f0      	b.n	800bf30 <__s2b+0x18>
 800bf4e:	9b08      	ldr	r3, [sp, #32]
 800bf50:	6143      	str	r3, [r0, #20]
 800bf52:	2d09      	cmp	r5, #9
 800bf54:	f04f 0301 	mov.w	r3, #1
 800bf58:	6103      	str	r3, [r0, #16]
 800bf5a:	dd16      	ble.n	800bf8a <__s2b+0x72>
 800bf5c:	f104 0909 	add.w	r9, r4, #9
 800bf60:	46c8      	mov	r8, r9
 800bf62:	442c      	add	r4, r5
 800bf64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf68:	4601      	mov	r1, r0
 800bf6a:	3b30      	subs	r3, #48	; 0x30
 800bf6c:	220a      	movs	r2, #10
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f7ff ff8c 	bl	800be8c <__multadd>
 800bf74:	45a0      	cmp	r8, r4
 800bf76:	d1f5      	bne.n	800bf64 <__s2b+0x4c>
 800bf78:	f1a5 0408 	sub.w	r4, r5, #8
 800bf7c:	444c      	add	r4, r9
 800bf7e:	1b2d      	subs	r5, r5, r4
 800bf80:	1963      	adds	r3, r4, r5
 800bf82:	42bb      	cmp	r3, r7
 800bf84:	db04      	blt.n	800bf90 <__s2b+0x78>
 800bf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8a:	340a      	adds	r4, #10
 800bf8c:	2509      	movs	r5, #9
 800bf8e:	e7f6      	b.n	800bf7e <__s2b+0x66>
 800bf90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf94:	4601      	mov	r1, r0
 800bf96:	3b30      	subs	r3, #48	; 0x30
 800bf98:	220a      	movs	r2, #10
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f7ff ff76 	bl	800be8c <__multadd>
 800bfa0:	e7ee      	b.n	800bf80 <__s2b+0x68>
 800bfa2:	bf00      	nop
 800bfa4:	0800d970 	.word	0x0800d970
 800bfa8:	0800da60 	.word	0x0800da60

0800bfac <__hi0bits>:
 800bfac:	0c03      	lsrs	r3, r0, #16
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	b9d3      	cbnz	r3, 800bfe8 <__hi0bits+0x3c>
 800bfb2:	0400      	lsls	r0, r0, #16
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfba:	bf04      	itt	eq
 800bfbc:	0200      	lsleq	r0, r0, #8
 800bfbe:	3308      	addeq	r3, #8
 800bfc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfc4:	bf04      	itt	eq
 800bfc6:	0100      	lsleq	r0, r0, #4
 800bfc8:	3304      	addeq	r3, #4
 800bfca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfce:	bf04      	itt	eq
 800bfd0:	0080      	lsleq	r0, r0, #2
 800bfd2:	3302      	addeq	r3, #2
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	db05      	blt.n	800bfe4 <__hi0bits+0x38>
 800bfd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfdc:	f103 0301 	add.w	r3, r3, #1
 800bfe0:	bf08      	it	eq
 800bfe2:	2320      	moveq	r3, #32
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	4770      	bx	lr
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e7e4      	b.n	800bfb6 <__hi0bits+0xa>

0800bfec <__lo0bits>:
 800bfec:	6803      	ldr	r3, [r0, #0]
 800bfee:	f013 0207 	ands.w	r2, r3, #7
 800bff2:	4601      	mov	r1, r0
 800bff4:	d00b      	beq.n	800c00e <__lo0bits+0x22>
 800bff6:	07da      	lsls	r2, r3, #31
 800bff8:	d423      	bmi.n	800c042 <__lo0bits+0x56>
 800bffa:	0798      	lsls	r0, r3, #30
 800bffc:	bf49      	itett	mi
 800bffe:	085b      	lsrmi	r3, r3, #1
 800c000:	089b      	lsrpl	r3, r3, #2
 800c002:	2001      	movmi	r0, #1
 800c004:	600b      	strmi	r3, [r1, #0]
 800c006:	bf5c      	itt	pl
 800c008:	600b      	strpl	r3, [r1, #0]
 800c00a:	2002      	movpl	r0, #2
 800c00c:	4770      	bx	lr
 800c00e:	b298      	uxth	r0, r3
 800c010:	b9a8      	cbnz	r0, 800c03e <__lo0bits+0x52>
 800c012:	0c1b      	lsrs	r3, r3, #16
 800c014:	2010      	movs	r0, #16
 800c016:	b2da      	uxtb	r2, r3
 800c018:	b90a      	cbnz	r2, 800c01e <__lo0bits+0x32>
 800c01a:	3008      	adds	r0, #8
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	071a      	lsls	r2, r3, #28
 800c020:	bf04      	itt	eq
 800c022:	091b      	lsreq	r3, r3, #4
 800c024:	3004      	addeq	r0, #4
 800c026:	079a      	lsls	r2, r3, #30
 800c028:	bf04      	itt	eq
 800c02a:	089b      	lsreq	r3, r3, #2
 800c02c:	3002      	addeq	r0, #2
 800c02e:	07da      	lsls	r2, r3, #31
 800c030:	d403      	bmi.n	800c03a <__lo0bits+0x4e>
 800c032:	085b      	lsrs	r3, r3, #1
 800c034:	f100 0001 	add.w	r0, r0, #1
 800c038:	d005      	beq.n	800c046 <__lo0bits+0x5a>
 800c03a:	600b      	str	r3, [r1, #0]
 800c03c:	4770      	bx	lr
 800c03e:	4610      	mov	r0, r2
 800c040:	e7e9      	b.n	800c016 <__lo0bits+0x2a>
 800c042:	2000      	movs	r0, #0
 800c044:	4770      	bx	lr
 800c046:	2020      	movs	r0, #32
 800c048:	4770      	bx	lr
	...

0800c04c <__i2b>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	460c      	mov	r4, r1
 800c050:	2101      	movs	r1, #1
 800c052:	f7ff feb9 	bl	800bdc8 <_Balloc>
 800c056:	4602      	mov	r2, r0
 800c058:	b928      	cbnz	r0, 800c066 <__i2b+0x1a>
 800c05a:	4b05      	ldr	r3, [pc, #20]	; (800c070 <__i2b+0x24>)
 800c05c:	4805      	ldr	r0, [pc, #20]	; (800c074 <__i2b+0x28>)
 800c05e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c062:	f000 ffaf 	bl	800cfc4 <__assert_func>
 800c066:	2301      	movs	r3, #1
 800c068:	6144      	str	r4, [r0, #20]
 800c06a:	6103      	str	r3, [r0, #16]
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	bf00      	nop
 800c070:	0800d970 	.word	0x0800d970
 800c074:	0800da60 	.word	0x0800da60

0800c078 <__multiply>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	4691      	mov	r9, r2
 800c07e:	690a      	ldr	r2, [r1, #16]
 800c080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c084:	429a      	cmp	r2, r3
 800c086:	bfb8      	it	lt
 800c088:	460b      	movlt	r3, r1
 800c08a:	460c      	mov	r4, r1
 800c08c:	bfbc      	itt	lt
 800c08e:	464c      	movlt	r4, r9
 800c090:	4699      	movlt	r9, r3
 800c092:	6927      	ldr	r7, [r4, #16]
 800c094:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c098:	68a3      	ldr	r3, [r4, #8]
 800c09a:	6861      	ldr	r1, [r4, #4]
 800c09c:	eb07 060a 	add.w	r6, r7, sl
 800c0a0:	42b3      	cmp	r3, r6
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	bfb8      	it	lt
 800c0a6:	3101      	addlt	r1, #1
 800c0a8:	f7ff fe8e 	bl	800bdc8 <_Balloc>
 800c0ac:	b930      	cbnz	r0, 800c0bc <__multiply+0x44>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	4b44      	ldr	r3, [pc, #272]	; (800c1c4 <__multiply+0x14c>)
 800c0b2:	4845      	ldr	r0, [pc, #276]	; (800c1c8 <__multiply+0x150>)
 800c0b4:	f240 115d 	movw	r1, #349	; 0x15d
 800c0b8:	f000 ff84 	bl	800cfc4 <__assert_func>
 800c0bc:	f100 0514 	add.w	r5, r0, #20
 800c0c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4543      	cmp	r3, r8
 800c0ca:	d321      	bcc.n	800c110 <__multiply+0x98>
 800c0cc:	f104 0314 	add.w	r3, r4, #20
 800c0d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0d4:	f109 0314 	add.w	r3, r9, #20
 800c0d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0dc:	9202      	str	r2, [sp, #8]
 800c0de:	1b3a      	subs	r2, r7, r4
 800c0e0:	3a15      	subs	r2, #21
 800c0e2:	f022 0203 	bic.w	r2, r2, #3
 800c0e6:	3204      	adds	r2, #4
 800c0e8:	f104 0115 	add.w	r1, r4, #21
 800c0ec:	428f      	cmp	r7, r1
 800c0ee:	bf38      	it	cc
 800c0f0:	2204      	movcc	r2, #4
 800c0f2:	9201      	str	r2, [sp, #4]
 800c0f4:	9a02      	ldr	r2, [sp, #8]
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d80c      	bhi.n	800c116 <__multiply+0x9e>
 800c0fc:	2e00      	cmp	r6, #0
 800c0fe:	dd03      	ble.n	800c108 <__multiply+0x90>
 800c100:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c104:	2b00      	cmp	r3, #0
 800c106:	d05a      	beq.n	800c1be <__multiply+0x146>
 800c108:	6106      	str	r6, [r0, #16]
 800c10a:	b005      	add	sp, #20
 800c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c110:	f843 2b04 	str.w	r2, [r3], #4
 800c114:	e7d8      	b.n	800c0c8 <__multiply+0x50>
 800c116:	f8b3 a000 	ldrh.w	sl, [r3]
 800c11a:	f1ba 0f00 	cmp.w	sl, #0
 800c11e:	d024      	beq.n	800c16a <__multiply+0xf2>
 800c120:	f104 0e14 	add.w	lr, r4, #20
 800c124:	46a9      	mov	r9, r5
 800c126:	f04f 0c00 	mov.w	ip, #0
 800c12a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c12e:	f8d9 1000 	ldr.w	r1, [r9]
 800c132:	fa1f fb82 	uxth.w	fp, r2
 800c136:	b289      	uxth	r1, r1
 800c138:	fb0a 110b 	mla	r1, sl, fp, r1
 800c13c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c140:	f8d9 2000 	ldr.w	r2, [r9]
 800c144:	4461      	add	r1, ip
 800c146:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c14a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c14e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c152:	b289      	uxth	r1, r1
 800c154:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c158:	4577      	cmp	r7, lr
 800c15a:	f849 1b04 	str.w	r1, [r9], #4
 800c15e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c162:	d8e2      	bhi.n	800c12a <__multiply+0xb2>
 800c164:	9a01      	ldr	r2, [sp, #4]
 800c166:	f845 c002 	str.w	ip, [r5, r2]
 800c16a:	9a03      	ldr	r2, [sp, #12]
 800c16c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c170:	3304      	adds	r3, #4
 800c172:	f1b9 0f00 	cmp.w	r9, #0
 800c176:	d020      	beq.n	800c1ba <__multiply+0x142>
 800c178:	6829      	ldr	r1, [r5, #0]
 800c17a:	f104 0c14 	add.w	ip, r4, #20
 800c17e:	46ae      	mov	lr, r5
 800c180:	f04f 0a00 	mov.w	sl, #0
 800c184:	f8bc b000 	ldrh.w	fp, [ip]
 800c188:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c18c:	fb09 220b 	mla	r2, r9, fp, r2
 800c190:	4492      	add	sl, r2
 800c192:	b289      	uxth	r1, r1
 800c194:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c198:	f84e 1b04 	str.w	r1, [lr], #4
 800c19c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1a0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1a4:	0c12      	lsrs	r2, r2, #16
 800c1a6:	fb09 1102 	mla	r1, r9, r2, r1
 800c1aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1ae:	4567      	cmp	r7, ip
 800c1b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1b4:	d8e6      	bhi.n	800c184 <__multiply+0x10c>
 800c1b6:	9a01      	ldr	r2, [sp, #4]
 800c1b8:	50a9      	str	r1, [r5, r2]
 800c1ba:	3504      	adds	r5, #4
 800c1bc:	e79a      	b.n	800c0f4 <__multiply+0x7c>
 800c1be:	3e01      	subs	r6, #1
 800c1c0:	e79c      	b.n	800c0fc <__multiply+0x84>
 800c1c2:	bf00      	nop
 800c1c4:	0800d970 	.word	0x0800d970
 800c1c8:	0800da60 	.word	0x0800da60

0800c1cc <__pow5mult>:
 800c1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d0:	4615      	mov	r5, r2
 800c1d2:	f012 0203 	ands.w	r2, r2, #3
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460f      	mov	r7, r1
 800c1da:	d007      	beq.n	800c1ec <__pow5mult+0x20>
 800c1dc:	4c25      	ldr	r4, [pc, #148]	; (800c274 <__pow5mult+0xa8>)
 800c1de:	3a01      	subs	r2, #1
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1e6:	f7ff fe51 	bl	800be8c <__multadd>
 800c1ea:	4607      	mov	r7, r0
 800c1ec:	10ad      	asrs	r5, r5, #2
 800c1ee:	d03d      	beq.n	800c26c <__pow5mult+0xa0>
 800c1f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1f2:	b97c      	cbnz	r4, 800c214 <__pow5mult+0x48>
 800c1f4:	2010      	movs	r0, #16
 800c1f6:	f7ff fdbf 	bl	800bd78 <malloc>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	6270      	str	r0, [r6, #36]	; 0x24
 800c1fe:	b928      	cbnz	r0, 800c20c <__pow5mult+0x40>
 800c200:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <__pow5mult+0xac>)
 800c202:	481e      	ldr	r0, [pc, #120]	; (800c27c <__pow5mult+0xb0>)
 800c204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c208:	f000 fedc 	bl	800cfc4 <__assert_func>
 800c20c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c210:	6004      	str	r4, [r0, #0]
 800c212:	60c4      	str	r4, [r0, #12]
 800c214:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c21c:	b94c      	cbnz	r4, 800c232 <__pow5mult+0x66>
 800c21e:	f240 2171 	movw	r1, #625	; 0x271
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff ff12 	bl	800c04c <__i2b>
 800c228:	2300      	movs	r3, #0
 800c22a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c22e:	4604      	mov	r4, r0
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	f04f 0900 	mov.w	r9, #0
 800c236:	07eb      	lsls	r3, r5, #31
 800c238:	d50a      	bpl.n	800c250 <__pow5mult+0x84>
 800c23a:	4639      	mov	r1, r7
 800c23c:	4622      	mov	r2, r4
 800c23e:	4630      	mov	r0, r6
 800c240:	f7ff ff1a 	bl	800c078 <__multiply>
 800c244:	4639      	mov	r1, r7
 800c246:	4680      	mov	r8, r0
 800c248:	4630      	mov	r0, r6
 800c24a:	f7ff fdfd 	bl	800be48 <_Bfree>
 800c24e:	4647      	mov	r7, r8
 800c250:	106d      	asrs	r5, r5, #1
 800c252:	d00b      	beq.n	800c26c <__pow5mult+0xa0>
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	b938      	cbnz	r0, 800c268 <__pow5mult+0x9c>
 800c258:	4622      	mov	r2, r4
 800c25a:	4621      	mov	r1, r4
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ff0b 	bl	800c078 <__multiply>
 800c262:	6020      	str	r0, [r4, #0]
 800c264:	f8c0 9000 	str.w	r9, [r0]
 800c268:	4604      	mov	r4, r0
 800c26a:	e7e4      	b.n	800c236 <__pow5mult+0x6a>
 800c26c:	4638      	mov	r0, r7
 800c26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c272:	bf00      	nop
 800c274:	0800dbb0 	.word	0x0800dbb0
 800c278:	0800d8fe 	.word	0x0800d8fe
 800c27c:	0800da60 	.word	0x0800da60

0800c280 <__lshift>:
 800c280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c284:	460c      	mov	r4, r1
 800c286:	6849      	ldr	r1, [r1, #4]
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	4607      	mov	r7, r0
 800c292:	4691      	mov	r9, r2
 800c294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c298:	f108 0601 	add.w	r6, r8, #1
 800c29c:	42b3      	cmp	r3, r6
 800c29e:	db0b      	blt.n	800c2b8 <__lshift+0x38>
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	f7ff fd91 	bl	800bdc8 <_Balloc>
 800c2a6:	4605      	mov	r5, r0
 800c2a8:	b948      	cbnz	r0, 800c2be <__lshift+0x3e>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	4b2a      	ldr	r3, [pc, #168]	; (800c358 <__lshift+0xd8>)
 800c2ae:	482b      	ldr	r0, [pc, #172]	; (800c35c <__lshift+0xdc>)
 800c2b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2b4:	f000 fe86 	bl	800cfc4 <__assert_func>
 800c2b8:	3101      	adds	r1, #1
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	e7ee      	b.n	800c29c <__lshift+0x1c>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f100 0114 	add.w	r1, r0, #20
 800c2c4:	f100 0210 	add.w	r2, r0, #16
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	4553      	cmp	r3, sl
 800c2cc:	db37      	blt.n	800c33e <__lshift+0xbe>
 800c2ce:	6920      	ldr	r0, [r4, #16]
 800c2d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2d4:	f104 0314 	add.w	r3, r4, #20
 800c2d8:	f019 091f 	ands.w	r9, r9, #31
 800c2dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2e4:	d02f      	beq.n	800c346 <__lshift+0xc6>
 800c2e6:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ea:	468a      	mov	sl, r1
 800c2ec:	f04f 0c00 	mov.w	ip, #0
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	fa02 f209 	lsl.w	r2, r2, r9
 800c2f6:	ea42 020c 	orr.w	r2, r2, ip
 800c2fa:	f84a 2b04 	str.w	r2, [sl], #4
 800c2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c302:	4298      	cmp	r0, r3
 800c304:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c308:	d8f2      	bhi.n	800c2f0 <__lshift+0x70>
 800c30a:	1b03      	subs	r3, r0, r4
 800c30c:	3b15      	subs	r3, #21
 800c30e:	f023 0303 	bic.w	r3, r3, #3
 800c312:	3304      	adds	r3, #4
 800c314:	f104 0215 	add.w	r2, r4, #21
 800c318:	4290      	cmp	r0, r2
 800c31a:	bf38      	it	cc
 800c31c:	2304      	movcc	r3, #4
 800c31e:	f841 c003 	str.w	ip, [r1, r3]
 800c322:	f1bc 0f00 	cmp.w	ip, #0
 800c326:	d001      	beq.n	800c32c <__lshift+0xac>
 800c328:	f108 0602 	add.w	r6, r8, #2
 800c32c:	3e01      	subs	r6, #1
 800c32e:	4638      	mov	r0, r7
 800c330:	612e      	str	r6, [r5, #16]
 800c332:	4621      	mov	r1, r4
 800c334:	f7ff fd88 	bl	800be48 <_Bfree>
 800c338:	4628      	mov	r0, r5
 800c33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c342:	3301      	adds	r3, #1
 800c344:	e7c1      	b.n	800c2ca <__lshift+0x4a>
 800c346:	3904      	subs	r1, #4
 800c348:	f853 2b04 	ldr.w	r2, [r3], #4
 800c34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c350:	4298      	cmp	r0, r3
 800c352:	d8f9      	bhi.n	800c348 <__lshift+0xc8>
 800c354:	e7ea      	b.n	800c32c <__lshift+0xac>
 800c356:	bf00      	nop
 800c358:	0800d970 	.word	0x0800d970
 800c35c:	0800da60 	.word	0x0800da60

0800c360 <__mcmp>:
 800c360:	b530      	push	{r4, r5, lr}
 800c362:	6902      	ldr	r2, [r0, #16]
 800c364:	690c      	ldr	r4, [r1, #16]
 800c366:	1b12      	subs	r2, r2, r4
 800c368:	d10e      	bne.n	800c388 <__mcmp+0x28>
 800c36a:	f100 0314 	add.w	r3, r0, #20
 800c36e:	3114      	adds	r1, #20
 800c370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c37c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c380:	42a5      	cmp	r5, r4
 800c382:	d003      	beq.n	800c38c <__mcmp+0x2c>
 800c384:	d305      	bcc.n	800c392 <__mcmp+0x32>
 800c386:	2201      	movs	r2, #1
 800c388:	4610      	mov	r0, r2
 800c38a:	bd30      	pop	{r4, r5, pc}
 800c38c:	4283      	cmp	r3, r0
 800c38e:	d3f3      	bcc.n	800c378 <__mcmp+0x18>
 800c390:	e7fa      	b.n	800c388 <__mcmp+0x28>
 800c392:	f04f 32ff 	mov.w	r2, #4294967295
 800c396:	e7f7      	b.n	800c388 <__mcmp+0x28>

0800c398 <__mdiff>:
 800c398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	460c      	mov	r4, r1
 800c39e:	4606      	mov	r6, r0
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	4690      	mov	r8, r2
 800c3a6:	f7ff ffdb 	bl	800c360 <__mcmp>
 800c3aa:	1e05      	subs	r5, r0, #0
 800c3ac:	d110      	bne.n	800c3d0 <__mdiff+0x38>
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f7ff fd09 	bl	800bdc8 <_Balloc>
 800c3b6:	b930      	cbnz	r0, 800c3c6 <__mdiff+0x2e>
 800c3b8:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <__mdiff+0x10c>)
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	f240 2132 	movw	r1, #562	; 0x232
 800c3c0:	4839      	ldr	r0, [pc, #228]	; (800c4a8 <__mdiff+0x110>)
 800c3c2:	f000 fdff 	bl	800cfc4 <__assert_func>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	bfa4      	itt	ge
 800c3d2:	4643      	movge	r3, r8
 800c3d4:	46a0      	movge	r8, r4
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3dc:	bfa6      	itte	ge
 800c3de:	461c      	movge	r4, r3
 800c3e0:	2500      	movge	r5, #0
 800c3e2:	2501      	movlt	r5, #1
 800c3e4:	f7ff fcf0 	bl	800bdc8 <_Balloc>
 800c3e8:	b920      	cbnz	r0, 800c3f4 <__mdiff+0x5c>
 800c3ea:	4b2e      	ldr	r3, [pc, #184]	; (800c4a4 <__mdiff+0x10c>)
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3f2:	e7e5      	b.n	800c3c0 <__mdiff+0x28>
 800c3f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3f8:	6926      	ldr	r6, [r4, #16]
 800c3fa:	60c5      	str	r5, [r0, #12]
 800c3fc:	f104 0914 	add.w	r9, r4, #20
 800c400:	f108 0514 	add.w	r5, r8, #20
 800c404:	f100 0e14 	add.w	lr, r0, #20
 800c408:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c40c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c410:	f108 0210 	add.w	r2, r8, #16
 800c414:	46f2      	mov	sl, lr
 800c416:	2100      	movs	r1, #0
 800c418:	f859 3b04 	ldr.w	r3, [r9], #4
 800c41c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c420:	fa1f f883 	uxth.w	r8, r3
 800c424:	fa11 f18b 	uxtah	r1, r1, fp
 800c428:	0c1b      	lsrs	r3, r3, #16
 800c42a:	eba1 0808 	sub.w	r8, r1, r8
 800c42e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c432:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c436:	fa1f f888 	uxth.w	r8, r8
 800c43a:	1419      	asrs	r1, r3, #16
 800c43c:	454e      	cmp	r6, r9
 800c43e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c442:	f84a 3b04 	str.w	r3, [sl], #4
 800c446:	d8e7      	bhi.n	800c418 <__mdiff+0x80>
 800c448:	1b33      	subs	r3, r6, r4
 800c44a:	3b15      	subs	r3, #21
 800c44c:	f023 0303 	bic.w	r3, r3, #3
 800c450:	3304      	adds	r3, #4
 800c452:	3415      	adds	r4, #21
 800c454:	42a6      	cmp	r6, r4
 800c456:	bf38      	it	cc
 800c458:	2304      	movcc	r3, #4
 800c45a:	441d      	add	r5, r3
 800c45c:	4473      	add	r3, lr
 800c45e:	469e      	mov	lr, r3
 800c460:	462e      	mov	r6, r5
 800c462:	4566      	cmp	r6, ip
 800c464:	d30e      	bcc.n	800c484 <__mdiff+0xec>
 800c466:	f10c 0203 	add.w	r2, ip, #3
 800c46a:	1b52      	subs	r2, r2, r5
 800c46c:	f022 0203 	bic.w	r2, r2, #3
 800c470:	3d03      	subs	r5, #3
 800c472:	45ac      	cmp	ip, r5
 800c474:	bf38      	it	cc
 800c476:	2200      	movcc	r2, #0
 800c478:	441a      	add	r2, r3
 800c47a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c47e:	b17b      	cbz	r3, 800c4a0 <__mdiff+0x108>
 800c480:	6107      	str	r7, [r0, #16]
 800c482:	e7a3      	b.n	800c3cc <__mdiff+0x34>
 800c484:	f856 8b04 	ldr.w	r8, [r6], #4
 800c488:	fa11 f288 	uxtah	r2, r1, r8
 800c48c:	1414      	asrs	r4, r2, #16
 800c48e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c492:	b292      	uxth	r2, r2
 800c494:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c498:	f84e 2b04 	str.w	r2, [lr], #4
 800c49c:	1421      	asrs	r1, r4, #16
 800c49e:	e7e0      	b.n	800c462 <__mdiff+0xca>
 800c4a0:	3f01      	subs	r7, #1
 800c4a2:	e7ea      	b.n	800c47a <__mdiff+0xe2>
 800c4a4:	0800d970 	.word	0x0800d970
 800c4a8:	0800da60 	.word	0x0800da60

0800c4ac <__ulp>:
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	ed8d 0b00 	vstr	d0, [sp]
 800c4b2:	9b01      	ldr	r3, [sp, #4]
 800c4b4:	4912      	ldr	r1, [pc, #72]	; (800c500 <__ulp+0x54>)
 800c4b6:	4019      	ands	r1, r3
 800c4b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	dd05      	ble.n	800c4cc <__ulp+0x20>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	ec43 2b10 	vmov	d0, r2, r3
 800c4c8:	b002      	add	sp, #8
 800c4ca:	4770      	bx	lr
 800c4cc:	4249      	negs	r1, r1
 800c4ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c4d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c4d6:	f04f 0200 	mov.w	r2, #0
 800c4da:	f04f 0300 	mov.w	r3, #0
 800c4de:	da04      	bge.n	800c4ea <__ulp+0x3e>
 800c4e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c4e4:	fa41 f300 	asr.w	r3, r1, r0
 800c4e8:	e7ec      	b.n	800c4c4 <__ulp+0x18>
 800c4ea:	f1a0 0114 	sub.w	r1, r0, #20
 800c4ee:	291e      	cmp	r1, #30
 800c4f0:	bfda      	itte	le
 800c4f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c4f6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c4fa:	2101      	movgt	r1, #1
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	e7e1      	b.n	800c4c4 <__ulp+0x18>
 800c500:	7ff00000 	.word	0x7ff00000

0800c504 <__b2d>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	6905      	ldr	r5, [r0, #16]
 800c508:	f100 0714 	add.w	r7, r0, #20
 800c50c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c510:	1f2e      	subs	r6, r5, #4
 800c512:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c516:	4620      	mov	r0, r4
 800c518:	f7ff fd48 	bl	800bfac <__hi0bits>
 800c51c:	f1c0 0320 	rsb	r3, r0, #32
 800c520:	280a      	cmp	r0, #10
 800c522:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c5a0 <__b2d+0x9c>
 800c526:	600b      	str	r3, [r1, #0]
 800c528:	dc14      	bgt.n	800c554 <__b2d+0x50>
 800c52a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c52e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c532:	42b7      	cmp	r7, r6
 800c534:	ea41 030c 	orr.w	r3, r1, ip
 800c538:	bf34      	ite	cc
 800c53a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c53e:	2100      	movcs	r1, #0
 800c540:	3015      	adds	r0, #21
 800c542:	fa04 f000 	lsl.w	r0, r4, r0
 800c546:	fa21 f10e 	lsr.w	r1, r1, lr
 800c54a:	ea40 0201 	orr.w	r2, r0, r1
 800c54e:	ec43 2b10 	vmov	d0, r2, r3
 800c552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c554:	42b7      	cmp	r7, r6
 800c556:	bf3a      	itte	cc
 800c558:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c55c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c560:	2100      	movcs	r1, #0
 800c562:	380b      	subs	r0, #11
 800c564:	d017      	beq.n	800c596 <__b2d+0x92>
 800c566:	f1c0 0c20 	rsb	ip, r0, #32
 800c56a:	fa04 f500 	lsl.w	r5, r4, r0
 800c56e:	42be      	cmp	r6, r7
 800c570:	fa21 f40c 	lsr.w	r4, r1, ip
 800c574:	ea45 0504 	orr.w	r5, r5, r4
 800c578:	bf8c      	ite	hi
 800c57a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c57e:	2400      	movls	r4, #0
 800c580:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c584:	fa01 f000 	lsl.w	r0, r1, r0
 800c588:	fa24 f40c 	lsr.w	r4, r4, ip
 800c58c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c590:	ea40 0204 	orr.w	r2, r0, r4
 800c594:	e7db      	b.n	800c54e <__b2d+0x4a>
 800c596:	ea44 030c 	orr.w	r3, r4, ip
 800c59a:	460a      	mov	r2, r1
 800c59c:	e7d7      	b.n	800c54e <__b2d+0x4a>
 800c59e:	bf00      	nop
 800c5a0:	3ff00000 	.word	0x3ff00000

0800c5a4 <__d2b>:
 800c5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5a8:	4689      	mov	r9, r1
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	ec57 6b10 	vmov	r6, r7, d0
 800c5b0:	4690      	mov	r8, r2
 800c5b2:	f7ff fc09 	bl	800bdc8 <_Balloc>
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	b930      	cbnz	r0, 800c5c8 <__d2b+0x24>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4b25      	ldr	r3, [pc, #148]	; (800c654 <__d2b+0xb0>)
 800c5be:	4826      	ldr	r0, [pc, #152]	; (800c658 <__d2b+0xb4>)
 800c5c0:	f240 310a 	movw	r1, #778	; 0x30a
 800c5c4:	f000 fcfe 	bl	800cfc4 <__assert_func>
 800c5c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5d0:	bb35      	cbnz	r5, 800c620 <__d2b+0x7c>
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	d028      	beq.n	800c62a <__d2b+0x86>
 800c5d8:	4668      	mov	r0, sp
 800c5da:	9600      	str	r6, [sp, #0]
 800c5dc:	f7ff fd06 	bl	800bfec <__lo0bits>
 800c5e0:	9900      	ldr	r1, [sp, #0]
 800c5e2:	b300      	cbz	r0, 800c626 <__d2b+0x82>
 800c5e4:	9a01      	ldr	r2, [sp, #4]
 800c5e6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	40c2      	lsrs	r2, r0
 800c5f2:	6163      	str	r3, [r4, #20]
 800c5f4:	9201      	str	r2, [sp, #4]
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	61a3      	str	r3, [r4, #24]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	bf14      	ite	ne
 800c5fe:	2202      	movne	r2, #2
 800c600:	2201      	moveq	r2, #1
 800c602:	6122      	str	r2, [r4, #16]
 800c604:	b1d5      	cbz	r5, 800c63c <__d2b+0x98>
 800c606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c60a:	4405      	add	r5, r0
 800c60c:	f8c9 5000 	str.w	r5, [r9]
 800c610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c614:	f8c8 0000 	str.w	r0, [r8]
 800c618:	4620      	mov	r0, r4
 800c61a:	b003      	add	sp, #12
 800c61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c624:	e7d5      	b.n	800c5d2 <__d2b+0x2e>
 800c626:	6161      	str	r1, [r4, #20]
 800c628:	e7e5      	b.n	800c5f6 <__d2b+0x52>
 800c62a:	a801      	add	r0, sp, #4
 800c62c:	f7ff fcde 	bl	800bfec <__lo0bits>
 800c630:	9b01      	ldr	r3, [sp, #4]
 800c632:	6163      	str	r3, [r4, #20]
 800c634:	2201      	movs	r2, #1
 800c636:	6122      	str	r2, [r4, #16]
 800c638:	3020      	adds	r0, #32
 800c63a:	e7e3      	b.n	800c604 <__d2b+0x60>
 800c63c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c644:	f8c9 0000 	str.w	r0, [r9]
 800c648:	6918      	ldr	r0, [r3, #16]
 800c64a:	f7ff fcaf 	bl	800bfac <__hi0bits>
 800c64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c652:	e7df      	b.n	800c614 <__d2b+0x70>
 800c654:	0800d970 	.word	0x0800d970
 800c658:	0800da60 	.word	0x0800da60

0800c65c <__ratio>:
 800c65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c660:	4688      	mov	r8, r1
 800c662:	4669      	mov	r1, sp
 800c664:	4681      	mov	r9, r0
 800c666:	f7ff ff4d 	bl	800c504 <__b2d>
 800c66a:	a901      	add	r1, sp, #4
 800c66c:	4640      	mov	r0, r8
 800c66e:	ec55 4b10 	vmov	r4, r5, d0
 800c672:	f7ff ff47 	bl	800c504 <__b2d>
 800c676:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c67a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c67e:	eba3 0c02 	sub.w	ip, r3, r2
 800c682:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c68c:	ec51 0b10 	vmov	r0, r1, d0
 800c690:	2b00      	cmp	r3, #0
 800c692:	bfd6      	itet	le
 800c694:	460a      	movle	r2, r1
 800c696:	462a      	movgt	r2, r5
 800c698:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c69c:	468b      	mov	fp, r1
 800c69e:	462f      	mov	r7, r5
 800c6a0:	bfd4      	ite	le
 800c6a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c6a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	ee10 2a10 	vmov	r2, s0
 800c6b0:	465b      	mov	r3, fp
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	f7f4 f8ea 	bl	800088c <__aeabi_ddiv>
 800c6b8:	ec41 0b10 	vmov	d0, r0, r1
 800c6bc:	b003      	add	sp, #12
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6c2 <__copybits>:
 800c6c2:	3901      	subs	r1, #1
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	1149      	asrs	r1, r1, #5
 800c6c8:	6914      	ldr	r4, [r2, #16]
 800c6ca:	3101      	adds	r1, #1
 800c6cc:	f102 0314 	add.w	r3, r2, #20
 800c6d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c6d8:	1f05      	subs	r5, r0, #4
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	d30c      	bcc.n	800c6f8 <__copybits+0x36>
 800c6de:	1aa3      	subs	r3, r4, r2
 800c6e0:	3b11      	subs	r3, #17
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	3211      	adds	r2, #17
 800c6e8:	42a2      	cmp	r2, r4
 800c6ea:	bf88      	it	hi
 800c6ec:	2300      	movhi	r3, #0
 800c6ee:	4418      	add	r0, r3
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4288      	cmp	r0, r1
 800c6f4:	d305      	bcc.n	800c702 <__copybits+0x40>
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c700:	e7eb      	b.n	800c6da <__copybits+0x18>
 800c702:	f840 3b04 	str.w	r3, [r0], #4
 800c706:	e7f4      	b.n	800c6f2 <__copybits+0x30>

0800c708 <__any_on>:
 800c708:	f100 0214 	add.w	r2, r0, #20
 800c70c:	6900      	ldr	r0, [r0, #16]
 800c70e:	114b      	asrs	r3, r1, #5
 800c710:	4298      	cmp	r0, r3
 800c712:	b510      	push	{r4, lr}
 800c714:	db11      	blt.n	800c73a <__any_on+0x32>
 800c716:	dd0a      	ble.n	800c72e <__any_on+0x26>
 800c718:	f011 011f 	ands.w	r1, r1, #31
 800c71c:	d007      	beq.n	800c72e <__any_on+0x26>
 800c71e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c722:	fa24 f001 	lsr.w	r0, r4, r1
 800c726:	fa00 f101 	lsl.w	r1, r0, r1
 800c72a:	428c      	cmp	r4, r1
 800c72c:	d10b      	bne.n	800c746 <__any_on+0x3e>
 800c72e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c732:	4293      	cmp	r3, r2
 800c734:	d803      	bhi.n	800c73e <__any_on+0x36>
 800c736:	2000      	movs	r0, #0
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	4603      	mov	r3, r0
 800c73c:	e7f7      	b.n	800c72e <__any_on+0x26>
 800c73e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c742:	2900      	cmp	r1, #0
 800c744:	d0f5      	beq.n	800c732 <__any_on+0x2a>
 800c746:	2001      	movs	r0, #1
 800c748:	e7f6      	b.n	800c738 <__any_on+0x30>

0800c74a <_calloc_r>:
 800c74a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c74c:	fba1 2402 	umull	r2, r4, r1, r2
 800c750:	b94c      	cbnz	r4, 800c766 <_calloc_r+0x1c>
 800c752:	4611      	mov	r1, r2
 800c754:	9201      	str	r2, [sp, #4]
 800c756:	f000 f87b 	bl	800c850 <_malloc_r>
 800c75a:	9a01      	ldr	r2, [sp, #4]
 800c75c:	4605      	mov	r5, r0
 800c75e:	b930      	cbnz	r0, 800c76e <_calloc_r+0x24>
 800c760:	4628      	mov	r0, r5
 800c762:	b003      	add	sp, #12
 800c764:	bd30      	pop	{r4, r5, pc}
 800c766:	220c      	movs	r2, #12
 800c768:	6002      	str	r2, [r0, #0]
 800c76a:	2500      	movs	r5, #0
 800c76c:	e7f8      	b.n	800c760 <_calloc_r+0x16>
 800c76e:	4621      	mov	r1, r4
 800c770:	f7fb ff38 	bl	80085e4 <memset>
 800c774:	e7f4      	b.n	800c760 <_calloc_r+0x16>
	...

0800c778 <_free_r>:
 800c778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c77a:	2900      	cmp	r1, #0
 800c77c:	d044      	beq.n	800c808 <_free_r+0x90>
 800c77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c782:	9001      	str	r0, [sp, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f1a1 0404 	sub.w	r4, r1, #4
 800c78a:	bfb8      	it	lt
 800c78c:	18e4      	addlt	r4, r4, r3
 800c78e:	f000 fca7 	bl	800d0e0 <__malloc_lock>
 800c792:	4a1e      	ldr	r2, [pc, #120]	; (800c80c <_free_r+0x94>)
 800c794:	9801      	ldr	r0, [sp, #4]
 800c796:	6813      	ldr	r3, [r2, #0]
 800c798:	b933      	cbnz	r3, 800c7a8 <_free_r+0x30>
 800c79a:	6063      	str	r3, [r4, #4]
 800c79c:	6014      	str	r4, [r2, #0]
 800c79e:	b003      	add	sp, #12
 800c7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7a4:	f000 bca2 	b.w	800d0ec <__malloc_unlock>
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	d908      	bls.n	800c7be <_free_r+0x46>
 800c7ac:	6825      	ldr	r5, [r4, #0]
 800c7ae:	1961      	adds	r1, r4, r5
 800c7b0:	428b      	cmp	r3, r1
 800c7b2:	bf01      	itttt	eq
 800c7b4:	6819      	ldreq	r1, [r3, #0]
 800c7b6:	685b      	ldreq	r3, [r3, #4]
 800c7b8:	1949      	addeq	r1, r1, r5
 800c7ba:	6021      	streq	r1, [r4, #0]
 800c7bc:	e7ed      	b.n	800c79a <_free_r+0x22>
 800c7be:	461a      	mov	r2, r3
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	b10b      	cbz	r3, 800c7c8 <_free_r+0x50>
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	d9fa      	bls.n	800c7be <_free_r+0x46>
 800c7c8:	6811      	ldr	r1, [r2, #0]
 800c7ca:	1855      	adds	r5, r2, r1
 800c7cc:	42a5      	cmp	r5, r4
 800c7ce:	d10b      	bne.n	800c7e8 <_free_r+0x70>
 800c7d0:	6824      	ldr	r4, [r4, #0]
 800c7d2:	4421      	add	r1, r4
 800c7d4:	1854      	adds	r4, r2, r1
 800c7d6:	42a3      	cmp	r3, r4
 800c7d8:	6011      	str	r1, [r2, #0]
 800c7da:	d1e0      	bne.n	800c79e <_free_r+0x26>
 800c7dc:	681c      	ldr	r4, [r3, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	6053      	str	r3, [r2, #4]
 800c7e2:	4421      	add	r1, r4
 800c7e4:	6011      	str	r1, [r2, #0]
 800c7e6:	e7da      	b.n	800c79e <_free_r+0x26>
 800c7e8:	d902      	bls.n	800c7f0 <_free_r+0x78>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	e7d6      	b.n	800c79e <_free_r+0x26>
 800c7f0:	6825      	ldr	r5, [r4, #0]
 800c7f2:	1961      	adds	r1, r4, r5
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	bf04      	itt	eq
 800c7f8:	6819      	ldreq	r1, [r3, #0]
 800c7fa:	685b      	ldreq	r3, [r3, #4]
 800c7fc:	6063      	str	r3, [r4, #4]
 800c7fe:	bf04      	itt	eq
 800c800:	1949      	addeq	r1, r1, r5
 800c802:	6021      	streq	r1, [r4, #0]
 800c804:	6054      	str	r4, [r2, #4]
 800c806:	e7ca      	b.n	800c79e <_free_r+0x26>
 800c808:	b003      	add	sp, #12
 800c80a:	bd30      	pop	{r4, r5, pc}
 800c80c:	200006c4 	.word	0x200006c4

0800c810 <sbrk_aligned>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	4e0e      	ldr	r6, [pc, #56]	; (800c84c <sbrk_aligned+0x3c>)
 800c814:	460c      	mov	r4, r1
 800c816:	6831      	ldr	r1, [r6, #0]
 800c818:	4605      	mov	r5, r0
 800c81a:	b911      	cbnz	r1, 800c822 <sbrk_aligned+0x12>
 800c81c:	f000 fb4c 	bl	800ceb8 <_sbrk_r>
 800c820:	6030      	str	r0, [r6, #0]
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	f000 fb47 	bl	800ceb8 <_sbrk_r>
 800c82a:	1c43      	adds	r3, r0, #1
 800c82c:	d00a      	beq.n	800c844 <sbrk_aligned+0x34>
 800c82e:	1cc4      	adds	r4, r0, #3
 800c830:	f024 0403 	bic.w	r4, r4, #3
 800c834:	42a0      	cmp	r0, r4
 800c836:	d007      	beq.n	800c848 <sbrk_aligned+0x38>
 800c838:	1a21      	subs	r1, r4, r0
 800c83a:	4628      	mov	r0, r5
 800c83c:	f000 fb3c 	bl	800ceb8 <_sbrk_r>
 800c840:	3001      	adds	r0, #1
 800c842:	d101      	bne.n	800c848 <sbrk_aligned+0x38>
 800c844:	f04f 34ff 	mov.w	r4, #4294967295
 800c848:	4620      	mov	r0, r4
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	200006c8 	.word	0x200006c8

0800c850 <_malloc_r>:
 800c850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c854:	1ccd      	adds	r5, r1, #3
 800c856:	f025 0503 	bic.w	r5, r5, #3
 800c85a:	3508      	adds	r5, #8
 800c85c:	2d0c      	cmp	r5, #12
 800c85e:	bf38      	it	cc
 800c860:	250c      	movcc	r5, #12
 800c862:	2d00      	cmp	r5, #0
 800c864:	4607      	mov	r7, r0
 800c866:	db01      	blt.n	800c86c <_malloc_r+0x1c>
 800c868:	42a9      	cmp	r1, r5
 800c86a:	d905      	bls.n	800c878 <_malloc_r+0x28>
 800c86c:	230c      	movs	r3, #12
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	2600      	movs	r6, #0
 800c872:	4630      	mov	r0, r6
 800c874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c878:	4e2e      	ldr	r6, [pc, #184]	; (800c934 <_malloc_r+0xe4>)
 800c87a:	f000 fc31 	bl	800d0e0 <__malloc_lock>
 800c87e:	6833      	ldr	r3, [r6, #0]
 800c880:	461c      	mov	r4, r3
 800c882:	bb34      	cbnz	r4, 800c8d2 <_malloc_r+0x82>
 800c884:	4629      	mov	r1, r5
 800c886:	4638      	mov	r0, r7
 800c888:	f7ff ffc2 	bl	800c810 <sbrk_aligned>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	4604      	mov	r4, r0
 800c890:	d14d      	bne.n	800c92e <_malloc_r+0xde>
 800c892:	6834      	ldr	r4, [r6, #0]
 800c894:	4626      	mov	r6, r4
 800c896:	2e00      	cmp	r6, #0
 800c898:	d140      	bne.n	800c91c <_malloc_r+0xcc>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	4631      	mov	r1, r6
 800c89e:	4638      	mov	r0, r7
 800c8a0:	eb04 0803 	add.w	r8, r4, r3
 800c8a4:	f000 fb08 	bl	800ceb8 <_sbrk_r>
 800c8a8:	4580      	cmp	r8, r0
 800c8aa:	d13a      	bne.n	800c922 <_malloc_r+0xd2>
 800c8ac:	6821      	ldr	r1, [r4, #0]
 800c8ae:	3503      	adds	r5, #3
 800c8b0:	1a6d      	subs	r5, r5, r1
 800c8b2:	f025 0503 	bic.w	r5, r5, #3
 800c8b6:	3508      	adds	r5, #8
 800c8b8:	2d0c      	cmp	r5, #12
 800c8ba:	bf38      	it	cc
 800c8bc:	250c      	movcc	r5, #12
 800c8be:	4629      	mov	r1, r5
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	f7ff ffa5 	bl	800c810 <sbrk_aligned>
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d02b      	beq.n	800c922 <_malloc_r+0xd2>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	442b      	add	r3, r5
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	e00e      	b.n	800c8f0 <_malloc_r+0xa0>
 800c8d2:	6822      	ldr	r2, [r4, #0]
 800c8d4:	1b52      	subs	r2, r2, r5
 800c8d6:	d41e      	bmi.n	800c916 <_malloc_r+0xc6>
 800c8d8:	2a0b      	cmp	r2, #11
 800c8da:	d916      	bls.n	800c90a <_malloc_r+0xba>
 800c8dc:	1961      	adds	r1, r4, r5
 800c8de:	42a3      	cmp	r3, r4
 800c8e0:	6025      	str	r5, [r4, #0]
 800c8e2:	bf18      	it	ne
 800c8e4:	6059      	strne	r1, [r3, #4]
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	bf08      	it	eq
 800c8ea:	6031      	streq	r1, [r6, #0]
 800c8ec:	5162      	str	r2, [r4, r5]
 800c8ee:	604b      	str	r3, [r1, #4]
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f104 060b 	add.w	r6, r4, #11
 800c8f6:	f000 fbf9 	bl	800d0ec <__malloc_unlock>
 800c8fa:	f026 0607 	bic.w	r6, r6, #7
 800c8fe:	1d23      	adds	r3, r4, #4
 800c900:	1af2      	subs	r2, r6, r3
 800c902:	d0b6      	beq.n	800c872 <_malloc_r+0x22>
 800c904:	1b9b      	subs	r3, r3, r6
 800c906:	50a3      	str	r3, [r4, r2]
 800c908:	e7b3      	b.n	800c872 <_malloc_r+0x22>
 800c90a:	6862      	ldr	r2, [r4, #4]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	bf0c      	ite	eq
 800c910:	6032      	streq	r2, [r6, #0]
 800c912:	605a      	strne	r2, [r3, #4]
 800c914:	e7ec      	b.n	800c8f0 <_malloc_r+0xa0>
 800c916:	4623      	mov	r3, r4
 800c918:	6864      	ldr	r4, [r4, #4]
 800c91a:	e7b2      	b.n	800c882 <_malloc_r+0x32>
 800c91c:	4634      	mov	r4, r6
 800c91e:	6876      	ldr	r6, [r6, #4]
 800c920:	e7b9      	b.n	800c896 <_malloc_r+0x46>
 800c922:	230c      	movs	r3, #12
 800c924:	603b      	str	r3, [r7, #0]
 800c926:	4638      	mov	r0, r7
 800c928:	f000 fbe0 	bl	800d0ec <__malloc_unlock>
 800c92c:	e7a1      	b.n	800c872 <_malloc_r+0x22>
 800c92e:	6025      	str	r5, [r4, #0]
 800c930:	e7de      	b.n	800c8f0 <_malloc_r+0xa0>
 800c932:	bf00      	nop
 800c934:	200006c4 	.word	0x200006c4

0800c938 <__ssputs_r>:
 800c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	688e      	ldr	r6, [r1, #8]
 800c93e:	429e      	cmp	r6, r3
 800c940:	4682      	mov	sl, r0
 800c942:	460c      	mov	r4, r1
 800c944:	4690      	mov	r8, r2
 800c946:	461f      	mov	r7, r3
 800c948:	d838      	bhi.n	800c9bc <__ssputs_r+0x84>
 800c94a:	898a      	ldrh	r2, [r1, #12]
 800c94c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c950:	d032      	beq.n	800c9b8 <__ssputs_r+0x80>
 800c952:	6825      	ldr	r5, [r4, #0]
 800c954:	6909      	ldr	r1, [r1, #16]
 800c956:	eba5 0901 	sub.w	r9, r5, r1
 800c95a:	6965      	ldr	r5, [r4, #20]
 800c95c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c964:	3301      	adds	r3, #1
 800c966:	444b      	add	r3, r9
 800c968:	106d      	asrs	r5, r5, #1
 800c96a:	429d      	cmp	r5, r3
 800c96c:	bf38      	it	cc
 800c96e:	461d      	movcc	r5, r3
 800c970:	0553      	lsls	r3, r2, #21
 800c972:	d531      	bpl.n	800c9d8 <__ssputs_r+0xa0>
 800c974:	4629      	mov	r1, r5
 800c976:	f7ff ff6b 	bl	800c850 <_malloc_r>
 800c97a:	4606      	mov	r6, r0
 800c97c:	b950      	cbnz	r0, 800c994 <__ssputs_r+0x5c>
 800c97e:	230c      	movs	r3, #12
 800c980:	f8ca 3000 	str.w	r3, [sl]
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c98a:	81a3      	strh	r3, [r4, #12]
 800c98c:	f04f 30ff 	mov.w	r0, #4294967295
 800c990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c994:	6921      	ldr	r1, [r4, #16]
 800c996:	464a      	mov	r2, r9
 800c998:	f7ff fa08 	bl	800bdac <memcpy>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9a6:	81a3      	strh	r3, [r4, #12]
 800c9a8:	6126      	str	r6, [r4, #16]
 800c9aa:	6165      	str	r5, [r4, #20]
 800c9ac:	444e      	add	r6, r9
 800c9ae:	eba5 0509 	sub.w	r5, r5, r9
 800c9b2:	6026      	str	r6, [r4, #0]
 800c9b4:	60a5      	str	r5, [r4, #8]
 800c9b6:	463e      	mov	r6, r7
 800c9b8:	42be      	cmp	r6, r7
 800c9ba:	d900      	bls.n	800c9be <__ssputs_r+0x86>
 800c9bc:	463e      	mov	r6, r7
 800c9be:	6820      	ldr	r0, [r4, #0]
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	4641      	mov	r1, r8
 800c9c4:	f000 fb72 	bl	800d0ac <memmove>
 800c9c8:	68a3      	ldr	r3, [r4, #8]
 800c9ca:	1b9b      	subs	r3, r3, r6
 800c9cc:	60a3      	str	r3, [r4, #8]
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	4433      	add	r3, r6
 800c9d2:	6023      	str	r3, [r4, #0]
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e7db      	b.n	800c990 <__ssputs_r+0x58>
 800c9d8:	462a      	mov	r2, r5
 800c9da:	f000 fb8d 	bl	800d0f8 <_realloc_r>
 800c9de:	4606      	mov	r6, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d1e1      	bne.n	800c9a8 <__ssputs_r+0x70>
 800c9e4:	6921      	ldr	r1, [r4, #16]
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	f7ff fec6 	bl	800c778 <_free_r>
 800c9ec:	e7c7      	b.n	800c97e <__ssputs_r+0x46>
	...

0800c9f0 <_svfiprintf_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	4698      	mov	r8, r3
 800c9f6:	898b      	ldrh	r3, [r1, #12]
 800c9f8:	061b      	lsls	r3, r3, #24
 800c9fa:	b09d      	sub	sp, #116	; 0x74
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	4614      	mov	r4, r2
 800ca02:	d50e      	bpl.n	800ca22 <_svfiprintf_r+0x32>
 800ca04:	690b      	ldr	r3, [r1, #16]
 800ca06:	b963      	cbnz	r3, 800ca22 <_svfiprintf_r+0x32>
 800ca08:	2140      	movs	r1, #64	; 0x40
 800ca0a:	f7ff ff21 	bl	800c850 <_malloc_r>
 800ca0e:	6028      	str	r0, [r5, #0]
 800ca10:	6128      	str	r0, [r5, #16]
 800ca12:	b920      	cbnz	r0, 800ca1e <_svfiprintf_r+0x2e>
 800ca14:	230c      	movs	r3, #12
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1c:	e0d1      	b.n	800cbc2 <_svfiprintf_r+0x1d2>
 800ca1e:	2340      	movs	r3, #64	; 0x40
 800ca20:	616b      	str	r3, [r5, #20]
 800ca22:	2300      	movs	r3, #0
 800ca24:	9309      	str	r3, [sp, #36]	; 0x24
 800ca26:	2320      	movs	r3, #32
 800ca28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca30:	2330      	movs	r3, #48	; 0x30
 800ca32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cbdc <_svfiprintf_r+0x1ec>
 800ca36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca3a:	f04f 0901 	mov.w	r9, #1
 800ca3e:	4623      	mov	r3, r4
 800ca40:	469a      	mov	sl, r3
 800ca42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca46:	b10a      	cbz	r2, 800ca4c <_svfiprintf_r+0x5c>
 800ca48:	2a25      	cmp	r2, #37	; 0x25
 800ca4a:	d1f9      	bne.n	800ca40 <_svfiprintf_r+0x50>
 800ca4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca50:	d00b      	beq.n	800ca6a <_svfiprintf_r+0x7a>
 800ca52:	465b      	mov	r3, fp
 800ca54:	4622      	mov	r2, r4
 800ca56:	4629      	mov	r1, r5
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7ff ff6d 	bl	800c938 <__ssputs_r>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	f000 80aa 	beq.w	800cbb8 <_svfiprintf_r+0x1c8>
 800ca64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca66:	445a      	add	r2, fp
 800ca68:	9209      	str	r2, [sp, #36]	; 0x24
 800ca6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 80a2 	beq.w	800cbb8 <_svfiprintf_r+0x1c8>
 800ca74:	2300      	movs	r3, #0
 800ca76:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca7e:	f10a 0a01 	add.w	sl, sl, #1
 800ca82:	9304      	str	r3, [sp, #16]
 800ca84:	9307      	str	r3, [sp, #28]
 800ca86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ca8c:	4654      	mov	r4, sl
 800ca8e:	2205      	movs	r2, #5
 800ca90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca94:	4851      	ldr	r0, [pc, #324]	; (800cbdc <_svfiprintf_r+0x1ec>)
 800ca96:	f7f3 fbc3 	bl	8000220 <memchr>
 800ca9a:	9a04      	ldr	r2, [sp, #16]
 800ca9c:	b9d8      	cbnz	r0, 800cad6 <_svfiprintf_r+0xe6>
 800ca9e:	06d0      	lsls	r0, r2, #27
 800caa0:	bf44      	itt	mi
 800caa2:	2320      	movmi	r3, #32
 800caa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa8:	0711      	lsls	r1, r2, #28
 800caaa:	bf44      	itt	mi
 800caac:	232b      	movmi	r3, #43	; 0x2b
 800caae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cab2:	f89a 3000 	ldrb.w	r3, [sl]
 800cab6:	2b2a      	cmp	r3, #42	; 0x2a
 800cab8:	d015      	beq.n	800cae6 <_svfiprintf_r+0xf6>
 800caba:	9a07      	ldr	r2, [sp, #28]
 800cabc:	4654      	mov	r4, sl
 800cabe:	2000      	movs	r0, #0
 800cac0:	f04f 0c0a 	mov.w	ip, #10
 800cac4:	4621      	mov	r1, r4
 800cac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caca:	3b30      	subs	r3, #48	; 0x30
 800cacc:	2b09      	cmp	r3, #9
 800cace:	d94e      	bls.n	800cb6e <_svfiprintf_r+0x17e>
 800cad0:	b1b0      	cbz	r0, 800cb00 <_svfiprintf_r+0x110>
 800cad2:	9207      	str	r2, [sp, #28]
 800cad4:	e014      	b.n	800cb00 <_svfiprintf_r+0x110>
 800cad6:	eba0 0308 	sub.w	r3, r0, r8
 800cada:	fa09 f303 	lsl.w	r3, r9, r3
 800cade:	4313      	orrs	r3, r2
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	46a2      	mov	sl, r4
 800cae4:	e7d2      	b.n	800ca8c <_svfiprintf_r+0x9c>
 800cae6:	9b03      	ldr	r3, [sp, #12]
 800cae8:	1d19      	adds	r1, r3, #4
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	9103      	str	r1, [sp, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	bfbb      	ittet	lt
 800caf2:	425b      	neglt	r3, r3
 800caf4:	f042 0202 	orrlt.w	r2, r2, #2
 800caf8:	9307      	strge	r3, [sp, #28]
 800cafa:	9307      	strlt	r3, [sp, #28]
 800cafc:	bfb8      	it	lt
 800cafe:	9204      	strlt	r2, [sp, #16]
 800cb00:	7823      	ldrb	r3, [r4, #0]
 800cb02:	2b2e      	cmp	r3, #46	; 0x2e
 800cb04:	d10c      	bne.n	800cb20 <_svfiprintf_r+0x130>
 800cb06:	7863      	ldrb	r3, [r4, #1]
 800cb08:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0a:	d135      	bne.n	800cb78 <_svfiprintf_r+0x188>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	1d1a      	adds	r2, r3, #4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	9203      	str	r2, [sp, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bfb8      	it	lt
 800cb18:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb1c:	3402      	adds	r4, #2
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbec <_svfiprintf_r+0x1fc>
 800cb24:	7821      	ldrb	r1, [r4, #0]
 800cb26:	2203      	movs	r2, #3
 800cb28:	4650      	mov	r0, sl
 800cb2a:	f7f3 fb79 	bl	8000220 <memchr>
 800cb2e:	b140      	cbz	r0, 800cb42 <_svfiprintf_r+0x152>
 800cb30:	2340      	movs	r3, #64	; 0x40
 800cb32:	eba0 000a 	sub.w	r0, r0, sl
 800cb36:	fa03 f000 	lsl.w	r0, r3, r0
 800cb3a:	9b04      	ldr	r3, [sp, #16]
 800cb3c:	4303      	orrs	r3, r0
 800cb3e:	3401      	adds	r4, #1
 800cb40:	9304      	str	r3, [sp, #16]
 800cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb46:	4826      	ldr	r0, [pc, #152]	; (800cbe0 <_svfiprintf_r+0x1f0>)
 800cb48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb4c:	2206      	movs	r2, #6
 800cb4e:	f7f3 fb67 	bl	8000220 <memchr>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d038      	beq.n	800cbc8 <_svfiprintf_r+0x1d8>
 800cb56:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <_svfiprintf_r+0x1f4>)
 800cb58:	bb1b      	cbnz	r3, 800cba2 <_svfiprintf_r+0x1b2>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	3307      	adds	r3, #7
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	3308      	adds	r3, #8
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb68:	4433      	add	r3, r6
 800cb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6c:	e767      	b.n	800ca3e <_svfiprintf_r+0x4e>
 800cb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb72:	460c      	mov	r4, r1
 800cb74:	2001      	movs	r0, #1
 800cb76:	e7a5      	b.n	800cac4 <_svfiprintf_r+0xd4>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	3401      	adds	r4, #1
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f04f 0c0a 	mov.w	ip, #10
 800cb84:	4620      	mov	r0, r4
 800cb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb8a:	3a30      	subs	r2, #48	; 0x30
 800cb8c:	2a09      	cmp	r2, #9
 800cb8e:	d903      	bls.n	800cb98 <_svfiprintf_r+0x1a8>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c5      	beq.n	800cb20 <_svfiprintf_r+0x130>
 800cb94:	9105      	str	r1, [sp, #20]
 800cb96:	e7c3      	b.n	800cb20 <_svfiprintf_r+0x130>
 800cb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e7f0      	b.n	800cb84 <_svfiprintf_r+0x194>
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	462a      	mov	r2, r5
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <_svfiprintf_r+0x1f8>)
 800cbaa:	a904      	add	r1, sp, #16
 800cbac:	4638      	mov	r0, r7
 800cbae:	f7fb fdc1 	bl	8008734 <_printf_float>
 800cbb2:	1c42      	adds	r2, r0, #1
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	d1d6      	bne.n	800cb66 <_svfiprintf_r+0x176>
 800cbb8:	89ab      	ldrh	r3, [r5, #12]
 800cbba:	065b      	lsls	r3, r3, #25
 800cbbc:	f53f af2c 	bmi.w	800ca18 <_svfiprintf_r+0x28>
 800cbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbc2:	b01d      	add	sp, #116	; 0x74
 800cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	462a      	mov	r2, r5
 800cbce:	4b06      	ldr	r3, [pc, #24]	; (800cbe8 <_svfiprintf_r+0x1f8>)
 800cbd0:	a904      	add	r1, sp, #16
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7fc f852 	bl	8008c7c <_printf_i>
 800cbd8:	e7eb      	b.n	800cbb2 <_svfiprintf_r+0x1c2>
 800cbda:	bf00      	nop
 800cbdc:	0800dbbc 	.word	0x0800dbbc
 800cbe0:	0800dbc6 	.word	0x0800dbc6
 800cbe4:	08008735 	.word	0x08008735
 800cbe8:	0800c939 	.word	0x0800c939
 800cbec:	0800dbc2 	.word	0x0800dbc2

0800cbf0 <__sfputc_r>:
 800cbf0:	6893      	ldr	r3, [r2, #8]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	b410      	push	{r4}
 800cbf8:	6093      	str	r3, [r2, #8]
 800cbfa:	da08      	bge.n	800cc0e <__sfputc_r+0x1e>
 800cbfc:	6994      	ldr	r4, [r2, #24]
 800cbfe:	42a3      	cmp	r3, r4
 800cc00:	db01      	blt.n	800cc06 <__sfputc_r+0x16>
 800cc02:	290a      	cmp	r1, #10
 800cc04:	d103      	bne.n	800cc0e <__sfputc_r+0x1e>
 800cc06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc0a:	f7fd bbe9 	b.w	800a3e0 <__swbuf_r>
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	1c58      	adds	r0, r3, #1
 800cc12:	6010      	str	r0, [r2, #0]
 800cc14:	7019      	strb	r1, [r3, #0]
 800cc16:	4608      	mov	r0, r1
 800cc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <__sfputs_r>:
 800cc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc20:	4606      	mov	r6, r0
 800cc22:	460f      	mov	r7, r1
 800cc24:	4614      	mov	r4, r2
 800cc26:	18d5      	adds	r5, r2, r3
 800cc28:	42ac      	cmp	r4, r5
 800cc2a:	d101      	bne.n	800cc30 <__sfputs_r+0x12>
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	e007      	b.n	800cc40 <__sfputs_r+0x22>
 800cc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc34:	463a      	mov	r2, r7
 800cc36:	4630      	mov	r0, r6
 800cc38:	f7ff ffda 	bl	800cbf0 <__sfputc_r>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d1f3      	bne.n	800cc28 <__sfputs_r+0xa>
 800cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc44 <_vfiprintf_r>:
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	460d      	mov	r5, r1
 800cc4a:	b09d      	sub	sp, #116	; 0x74
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	4698      	mov	r8, r3
 800cc50:	4606      	mov	r6, r0
 800cc52:	b118      	cbz	r0, 800cc5c <_vfiprintf_r+0x18>
 800cc54:	6983      	ldr	r3, [r0, #24]
 800cc56:	b90b      	cbnz	r3, 800cc5c <_vfiprintf_r+0x18>
 800cc58:	f7fe fc16 	bl	800b488 <__sinit>
 800cc5c:	4b89      	ldr	r3, [pc, #548]	; (800ce84 <_vfiprintf_r+0x240>)
 800cc5e:	429d      	cmp	r5, r3
 800cc60:	d11b      	bne.n	800cc9a <_vfiprintf_r+0x56>
 800cc62:	6875      	ldr	r5, [r6, #4]
 800cc64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc66:	07d9      	lsls	r1, r3, #31
 800cc68:	d405      	bmi.n	800cc76 <_vfiprintf_r+0x32>
 800cc6a:	89ab      	ldrh	r3, [r5, #12]
 800cc6c:	059a      	lsls	r2, r3, #22
 800cc6e:	d402      	bmi.n	800cc76 <_vfiprintf_r+0x32>
 800cc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc72:	f7ff f81a 	bl	800bcaa <__retarget_lock_acquire_recursive>
 800cc76:	89ab      	ldrh	r3, [r5, #12]
 800cc78:	071b      	lsls	r3, r3, #28
 800cc7a:	d501      	bpl.n	800cc80 <_vfiprintf_r+0x3c>
 800cc7c:	692b      	ldr	r3, [r5, #16]
 800cc7e:	b9eb      	cbnz	r3, 800ccbc <_vfiprintf_r+0x78>
 800cc80:	4629      	mov	r1, r5
 800cc82:	4630      	mov	r0, r6
 800cc84:	f7fd fbfe 	bl	800a484 <__swsetup_r>
 800cc88:	b1c0      	cbz	r0, 800ccbc <_vfiprintf_r+0x78>
 800cc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc8c:	07dc      	lsls	r4, r3, #31
 800cc8e:	d50e      	bpl.n	800ccae <_vfiprintf_r+0x6a>
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	b01d      	add	sp, #116	; 0x74
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	4b7b      	ldr	r3, [pc, #492]	; (800ce88 <_vfiprintf_r+0x244>)
 800cc9c:	429d      	cmp	r5, r3
 800cc9e:	d101      	bne.n	800cca4 <_vfiprintf_r+0x60>
 800cca0:	68b5      	ldr	r5, [r6, #8]
 800cca2:	e7df      	b.n	800cc64 <_vfiprintf_r+0x20>
 800cca4:	4b79      	ldr	r3, [pc, #484]	; (800ce8c <_vfiprintf_r+0x248>)
 800cca6:	429d      	cmp	r5, r3
 800cca8:	bf08      	it	eq
 800ccaa:	68f5      	ldreq	r5, [r6, #12]
 800ccac:	e7da      	b.n	800cc64 <_vfiprintf_r+0x20>
 800ccae:	89ab      	ldrh	r3, [r5, #12]
 800ccb0:	0598      	lsls	r0, r3, #22
 800ccb2:	d4ed      	bmi.n	800cc90 <_vfiprintf_r+0x4c>
 800ccb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb6:	f7fe fff9 	bl	800bcac <__retarget_lock_release_recursive>
 800ccba:	e7e9      	b.n	800cc90 <_vfiprintf_r+0x4c>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ccc0:	2320      	movs	r3, #32
 800ccc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccca:	2330      	movs	r3, #48	; 0x30
 800cccc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce90 <_vfiprintf_r+0x24c>
 800ccd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccd4:	f04f 0901 	mov.w	r9, #1
 800ccd8:	4623      	mov	r3, r4
 800ccda:	469a      	mov	sl, r3
 800ccdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cce0:	b10a      	cbz	r2, 800cce6 <_vfiprintf_r+0xa2>
 800cce2:	2a25      	cmp	r2, #37	; 0x25
 800cce4:	d1f9      	bne.n	800ccda <_vfiprintf_r+0x96>
 800cce6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccea:	d00b      	beq.n	800cd04 <_vfiprintf_r+0xc0>
 800ccec:	465b      	mov	r3, fp
 800ccee:	4622      	mov	r2, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7ff ff93 	bl	800cc1e <__sfputs_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	f000 80aa 	beq.w	800ce52 <_vfiprintf_r+0x20e>
 800ccfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd00:	445a      	add	r2, fp
 800cd02:	9209      	str	r2, [sp, #36]	; 0x24
 800cd04:	f89a 3000 	ldrb.w	r3, [sl]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80a2 	beq.w	800ce52 <_vfiprintf_r+0x20e>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f04f 32ff 	mov.w	r2, #4294967295
 800cd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd18:	f10a 0a01 	add.w	sl, sl, #1
 800cd1c:	9304      	str	r3, [sp, #16]
 800cd1e:	9307      	str	r3, [sp, #28]
 800cd20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd24:	931a      	str	r3, [sp, #104]	; 0x68
 800cd26:	4654      	mov	r4, sl
 800cd28:	2205      	movs	r2, #5
 800cd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2e:	4858      	ldr	r0, [pc, #352]	; (800ce90 <_vfiprintf_r+0x24c>)
 800cd30:	f7f3 fa76 	bl	8000220 <memchr>
 800cd34:	9a04      	ldr	r2, [sp, #16]
 800cd36:	b9d8      	cbnz	r0, 800cd70 <_vfiprintf_r+0x12c>
 800cd38:	06d1      	lsls	r1, r2, #27
 800cd3a:	bf44      	itt	mi
 800cd3c:	2320      	movmi	r3, #32
 800cd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd42:	0713      	lsls	r3, r2, #28
 800cd44:	bf44      	itt	mi
 800cd46:	232b      	movmi	r3, #43	; 0x2b
 800cd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd50:	2b2a      	cmp	r3, #42	; 0x2a
 800cd52:	d015      	beq.n	800cd80 <_vfiprintf_r+0x13c>
 800cd54:	9a07      	ldr	r2, [sp, #28]
 800cd56:	4654      	mov	r4, sl
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f04f 0c0a 	mov.w	ip, #10
 800cd5e:	4621      	mov	r1, r4
 800cd60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd64:	3b30      	subs	r3, #48	; 0x30
 800cd66:	2b09      	cmp	r3, #9
 800cd68:	d94e      	bls.n	800ce08 <_vfiprintf_r+0x1c4>
 800cd6a:	b1b0      	cbz	r0, 800cd9a <_vfiprintf_r+0x156>
 800cd6c:	9207      	str	r2, [sp, #28]
 800cd6e:	e014      	b.n	800cd9a <_vfiprintf_r+0x156>
 800cd70:	eba0 0308 	sub.w	r3, r0, r8
 800cd74:	fa09 f303 	lsl.w	r3, r9, r3
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	46a2      	mov	sl, r4
 800cd7e:	e7d2      	b.n	800cd26 <_vfiprintf_r+0xe2>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	1d19      	adds	r1, r3, #4
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	9103      	str	r1, [sp, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	bfbb      	ittet	lt
 800cd8c:	425b      	neglt	r3, r3
 800cd8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd92:	9307      	strge	r3, [sp, #28]
 800cd94:	9307      	strlt	r3, [sp, #28]
 800cd96:	bfb8      	it	lt
 800cd98:	9204      	strlt	r2, [sp, #16]
 800cd9a:	7823      	ldrb	r3, [r4, #0]
 800cd9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd9e:	d10c      	bne.n	800cdba <_vfiprintf_r+0x176>
 800cda0:	7863      	ldrb	r3, [r4, #1]
 800cda2:	2b2a      	cmp	r3, #42	; 0x2a
 800cda4:	d135      	bne.n	800ce12 <_vfiprintf_r+0x1ce>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	1d1a      	adds	r2, r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	9203      	str	r2, [sp, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfb8      	it	lt
 800cdb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdb6:	3402      	adds	r4, #2
 800cdb8:	9305      	str	r3, [sp, #20]
 800cdba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cea0 <_vfiprintf_r+0x25c>
 800cdbe:	7821      	ldrb	r1, [r4, #0]
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	4650      	mov	r0, sl
 800cdc4:	f7f3 fa2c 	bl	8000220 <memchr>
 800cdc8:	b140      	cbz	r0, 800cddc <_vfiprintf_r+0x198>
 800cdca:	2340      	movs	r3, #64	; 0x40
 800cdcc:	eba0 000a 	sub.w	r0, r0, sl
 800cdd0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdd4:	9b04      	ldr	r3, [sp, #16]
 800cdd6:	4303      	orrs	r3, r0
 800cdd8:	3401      	adds	r4, #1
 800cdda:	9304      	str	r3, [sp, #16]
 800cddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde0:	482c      	ldr	r0, [pc, #176]	; (800ce94 <_vfiprintf_r+0x250>)
 800cde2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cde6:	2206      	movs	r2, #6
 800cde8:	f7f3 fa1a 	bl	8000220 <memchr>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d03f      	beq.n	800ce70 <_vfiprintf_r+0x22c>
 800cdf0:	4b29      	ldr	r3, [pc, #164]	; (800ce98 <_vfiprintf_r+0x254>)
 800cdf2:	bb1b      	cbnz	r3, 800ce3c <_vfiprintf_r+0x1f8>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	3307      	adds	r3, #7
 800cdf8:	f023 0307 	bic.w	r3, r3, #7
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	9303      	str	r3, [sp, #12]
 800ce00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce02:	443b      	add	r3, r7
 800ce04:	9309      	str	r3, [sp, #36]	; 0x24
 800ce06:	e767      	b.n	800ccd8 <_vfiprintf_r+0x94>
 800ce08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	2001      	movs	r0, #1
 800ce10:	e7a5      	b.n	800cd5e <_vfiprintf_r+0x11a>
 800ce12:	2300      	movs	r3, #0
 800ce14:	3401      	adds	r4, #1
 800ce16:	9305      	str	r3, [sp, #20]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	f04f 0c0a 	mov.w	ip, #10
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce24:	3a30      	subs	r2, #48	; 0x30
 800ce26:	2a09      	cmp	r2, #9
 800ce28:	d903      	bls.n	800ce32 <_vfiprintf_r+0x1ee>
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0c5      	beq.n	800cdba <_vfiprintf_r+0x176>
 800ce2e:	9105      	str	r1, [sp, #20]
 800ce30:	e7c3      	b.n	800cdba <_vfiprintf_r+0x176>
 800ce32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce36:	4604      	mov	r4, r0
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e7f0      	b.n	800ce1e <_vfiprintf_r+0x1da>
 800ce3c:	ab03      	add	r3, sp, #12
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	462a      	mov	r2, r5
 800ce42:	4b16      	ldr	r3, [pc, #88]	; (800ce9c <_vfiprintf_r+0x258>)
 800ce44:	a904      	add	r1, sp, #16
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fb fc74 	bl	8008734 <_printf_float>
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	1c78      	adds	r0, r7, #1
 800ce50:	d1d6      	bne.n	800ce00 <_vfiprintf_r+0x1bc>
 800ce52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce54:	07d9      	lsls	r1, r3, #31
 800ce56:	d405      	bmi.n	800ce64 <_vfiprintf_r+0x220>
 800ce58:	89ab      	ldrh	r3, [r5, #12]
 800ce5a:	059a      	lsls	r2, r3, #22
 800ce5c:	d402      	bmi.n	800ce64 <_vfiprintf_r+0x220>
 800ce5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce60:	f7fe ff24 	bl	800bcac <__retarget_lock_release_recursive>
 800ce64:	89ab      	ldrh	r3, [r5, #12]
 800ce66:	065b      	lsls	r3, r3, #25
 800ce68:	f53f af12 	bmi.w	800cc90 <_vfiprintf_r+0x4c>
 800ce6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce6e:	e711      	b.n	800cc94 <_vfiprintf_r+0x50>
 800ce70:	ab03      	add	r3, sp, #12
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	462a      	mov	r2, r5
 800ce76:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <_vfiprintf_r+0x258>)
 800ce78:	a904      	add	r1, sp, #16
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f7fb fefe 	bl	8008c7c <_printf_i>
 800ce80:	e7e4      	b.n	800ce4c <_vfiprintf_r+0x208>
 800ce82:	bf00      	nop
 800ce84:	0800d9a4 	.word	0x0800d9a4
 800ce88:	0800d9c4 	.word	0x0800d9c4
 800ce8c:	0800d984 	.word	0x0800d984
 800ce90:	0800dbbc 	.word	0x0800dbbc
 800ce94:	0800dbc6 	.word	0x0800dbc6
 800ce98:	08008735 	.word	0x08008735
 800ce9c:	0800cc1f 	.word	0x0800cc1f
 800cea0:	0800dbc2 	.word	0x0800dbc2
 800cea4:	00000000 	.word	0x00000000

0800cea8 <nan>:
 800cea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ceb0 <nan+0x8>
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	00000000 	.word	0x00000000
 800ceb4:	7ff80000 	.word	0x7ff80000

0800ceb8 <_sbrk_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	; (800ced4 <_sbrk_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f7f7 f94e 	bl	8004164 <_sbrk>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_sbrk_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_sbrk_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	200006cc 	.word	0x200006cc

0800ced8 <__sread>:
 800ced8:	b510      	push	{r4, lr}
 800ceda:	460c      	mov	r4, r1
 800cedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee0:	f000 f93a 	bl	800d158 <_read_r>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	bfab      	itete	ge
 800cee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceea:	89a3      	ldrhlt	r3, [r4, #12]
 800ceec:	181b      	addge	r3, r3, r0
 800ceee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cef2:	bfac      	ite	ge
 800cef4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cef6:	81a3      	strhlt	r3, [r4, #12]
 800cef8:	bd10      	pop	{r4, pc}

0800cefa <__swrite>:
 800cefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	461f      	mov	r7, r3
 800cf00:	898b      	ldrh	r3, [r1, #12]
 800cf02:	05db      	lsls	r3, r3, #23
 800cf04:	4605      	mov	r5, r0
 800cf06:	460c      	mov	r4, r1
 800cf08:	4616      	mov	r6, r2
 800cf0a:	d505      	bpl.n	800cf18 <__swrite+0x1e>
 800cf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf10:	2302      	movs	r3, #2
 800cf12:	2200      	movs	r2, #0
 800cf14:	f000 f8b8 	bl	800d088 <_lseek_r>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	4632      	mov	r2, r6
 800cf26:	463b      	mov	r3, r7
 800cf28:	4628      	mov	r0, r5
 800cf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2e:	f000 b837 	b.w	800cfa0 <_write_r>

0800cf32 <__sseek>:
 800cf32:	b510      	push	{r4, lr}
 800cf34:	460c      	mov	r4, r1
 800cf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3a:	f000 f8a5 	bl	800d088 <_lseek_r>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	bf15      	itete	ne
 800cf44:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf4e:	81a3      	strheq	r3, [r4, #12]
 800cf50:	bf18      	it	ne
 800cf52:	81a3      	strhne	r3, [r4, #12]
 800cf54:	bd10      	pop	{r4, pc}

0800cf56 <__sclose>:
 800cf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5a:	f000 b851 	b.w	800d000 <_close_r>

0800cf5e <strncmp>:
 800cf5e:	b510      	push	{r4, lr}
 800cf60:	b17a      	cbz	r2, 800cf82 <strncmp+0x24>
 800cf62:	4603      	mov	r3, r0
 800cf64:	3901      	subs	r1, #1
 800cf66:	1884      	adds	r4, r0, r2
 800cf68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf70:	4290      	cmp	r0, r2
 800cf72:	d101      	bne.n	800cf78 <strncmp+0x1a>
 800cf74:	42a3      	cmp	r3, r4
 800cf76:	d101      	bne.n	800cf7c <strncmp+0x1e>
 800cf78:	1a80      	subs	r0, r0, r2
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d1f3      	bne.n	800cf68 <strncmp+0xa>
 800cf80:	e7fa      	b.n	800cf78 <strncmp+0x1a>
 800cf82:	4610      	mov	r0, r2
 800cf84:	e7f9      	b.n	800cf7a <strncmp+0x1c>

0800cf86 <__ascii_wctomb>:
 800cf86:	b149      	cbz	r1, 800cf9c <__ascii_wctomb+0x16>
 800cf88:	2aff      	cmp	r2, #255	; 0xff
 800cf8a:	bf85      	ittet	hi
 800cf8c:	238a      	movhi	r3, #138	; 0x8a
 800cf8e:	6003      	strhi	r3, [r0, #0]
 800cf90:	700a      	strbls	r2, [r1, #0]
 800cf92:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf96:	bf98      	it	ls
 800cf98:	2001      	movls	r0, #1
 800cf9a:	4770      	bx	lr
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	4770      	bx	lr

0800cfa0 <_write_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d07      	ldr	r5, [pc, #28]	; (800cfc0 <_write_r+0x20>)
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	2200      	movs	r2, #0
 800cfac:	602a      	str	r2, [r5, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	f7f5 fc66 	bl	8002880 <_write>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d102      	bne.n	800cfbe <_write_r+0x1e>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	b103      	cbz	r3, 800cfbe <_write_r+0x1e>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	200006cc 	.word	0x200006cc

0800cfc4 <__assert_func>:
 800cfc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfc6:	4614      	mov	r4, r2
 800cfc8:	461a      	mov	r2, r3
 800cfca:	4b09      	ldr	r3, [pc, #36]	; (800cff0 <__assert_func+0x2c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4605      	mov	r5, r0
 800cfd0:	68d8      	ldr	r0, [r3, #12]
 800cfd2:	b14c      	cbz	r4, 800cfe8 <__assert_func+0x24>
 800cfd4:	4b07      	ldr	r3, [pc, #28]	; (800cff4 <__assert_func+0x30>)
 800cfd6:	9100      	str	r1, [sp, #0]
 800cfd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfdc:	4906      	ldr	r1, [pc, #24]	; (800cff8 <__assert_func+0x34>)
 800cfde:	462b      	mov	r3, r5
 800cfe0:	f000 f81e 	bl	800d020 <fiprintf>
 800cfe4:	f000 f8ca 	bl	800d17c <abort>
 800cfe8:	4b04      	ldr	r3, [pc, #16]	; (800cffc <__assert_func+0x38>)
 800cfea:	461c      	mov	r4, r3
 800cfec:	e7f3      	b.n	800cfd6 <__assert_func+0x12>
 800cfee:	bf00      	nop
 800cff0:	20000028 	.word	0x20000028
 800cff4:	0800dbcd 	.word	0x0800dbcd
 800cff8:	0800dbda 	.word	0x0800dbda
 800cffc:	0800dc08 	.word	0x0800dc08

0800d000 <_close_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4d06      	ldr	r5, [pc, #24]	; (800d01c <_close_r+0x1c>)
 800d004:	2300      	movs	r3, #0
 800d006:	4604      	mov	r4, r0
 800d008:	4608      	mov	r0, r1
 800d00a:	602b      	str	r3, [r5, #0]
 800d00c:	f7f7 f875 	bl	80040fa <_close>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	d102      	bne.n	800d01a <_close_r+0x1a>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	b103      	cbz	r3, 800d01a <_close_r+0x1a>
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	200006cc 	.word	0x200006cc

0800d020 <fiprintf>:
 800d020:	b40e      	push	{r1, r2, r3}
 800d022:	b503      	push	{r0, r1, lr}
 800d024:	4601      	mov	r1, r0
 800d026:	ab03      	add	r3, sp, #12
 800d028:	4805      	ldr	r0, [pc, #20]	; (800d040 <fiprintf+0x20>)
 800d02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d02e:	6800      	ldr	r0, [r0, #0]
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	f7ff fe07 	bl	800cc44 <_vfiprintf_r>
 800d036:	b002      	add	sp, #8
 800d038:	f85d eb04 	ldr.w	lr, [sp], #4
 800d03c:	b003      	add	sp, #12
 800d03e:	4770      	bx	lr
 800d040:	20000028 	.word	0x20000028

0800d044 <_fstat_r>:
 800d044:	b538      	push	{r3, r4, r5, lr}
 800d046:	4d07      	ldr	r5, [pc, #28]	; (800d064 <_fstat_r+0x20>)
 800d048:	2300      	movs	r3, #0
 800d04a:	4604      	mov	r4, r0
 800d04c:	4608      	mov	r0, r1
 800d04e:	4611      	mov	r1, r2
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	f7f7 f85e 	bl	8004112 <_fstat>
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	d102      	bne.n	800d060 <_fstat_r+0x1c>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	b103      	cbz	r3, 800d060 <_fstat_r+0x1c>
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	bd38      	pop	{r3, r4, r5, pc}
 800d062:	bf00      	nop
 800d064:	200006cc 	.word	0x200006cc

0800d068 <_isatty_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	4d06      	ldr	r5, [pc, #24]	; (800d084 <_isatty_r+0x1c>)
 800d06c:	2300      	movs	r3, #0
 800d06e:	4604      	mov	r4, r0
 800d070:	4608      	mov	r0, r1
 800d072:	602b      	str	r3, [r5, #0]
 800d074:	f7f7 f85d 	bl	8004132 <_isatty>
 800d078:	1c43      	adds	r3, r0, #1
 800d07a:	d102      	bne.n	800d082 <_isatty_r+0x1a>
 800d07c:	682b      	ldr	r3, [r5, #0]
 800d07e:	b103      	cbz	r3, 800d082 <_isatty_r+0x1a>
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	200006cc 	.word	0x200006cc

0800d088 <_lseek_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d07      	ldr	r5, [pc, #28]	; (800d0a8 <_lseek_r+0x20>)
 800d08c:	4604      	mov	r4, r0
 800d08e:	4608      	mov	r0, r1
 800d090:	4611      	mov	r1, r2
 800d092:	2200      	movs	r2, #0
 800d094:	602a      	str	r2, [r5, #0]
 800d096:	461a      	mov	r2, r3
 800d098:	f7f7 f856 	bl	8004148 <_lseek>
 800d09c:	1c43      	adds	r3, r0, #1
 800d09e:	d102      	bne.n	800d0a6 <_lseek_r+0x1e>
 800d0a0:	682b      	ldr	r3, [r5, #0]
 800d0a2:	b103      	cbz	r3, 800d0a6 <_lseek_r+0x1e>
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}
 800d0a8:	200006cc 	.word	0x200006cc

0800d0ac <memmove>:
 800d0ac:	4288      	cmp	r0, r1
 800d0ae:	b510      	push	{r4, lr}
 800d0b0:	eb01 0402 	add.w	r4, r1, r2
 800d0b4:	d902      	bls.n	800d0bc <memmove+0x10>
 800d0b6:	4284      	cmp	r4, r0
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	d807      	bhi.n	800d0cc <memmove+0x20>
 800d0bc:	1e43      	subs	r3, r0, #1
 800d0be:	42a1      	cmp	r1, r4
 800d0c0:	d008      	beq.n	800d0d4 <memmove+0x28>
 800d0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ca:	e7f8      	b.n	800d0be <memmove+0x12>
 800d0cc:	4402      	add	r2, r0
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	428a      	cmp	r2, r1
 800d0d2:	d100      	bne.n	800d0d6 <memmove+0x2a>
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0de:	e7f7      	b.n	800d0d0 <memmove+0x24>

0800d0e0 <__malloc_lock>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	; (800d0e8 <__malloc_lock+0x8>)
 800d0e2:	f7fe bde2 	b.w	800bcaa <__retarget_lock_acquire_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	200006c0 	.word	0x200006c0

0800d0ec <__malloc_unlock>:
 800d0ec:	4801      	ldr	r0, [pc, #4]	; (800d0f4 <__malloc_unlock+0x8>)
 800d0ee:	f7fe bddd 	b.w	800bcac <__retarget_lock_release_recursive>
 800d0f2:	bf00      	nop
 800d0f4:	200006c0 	.word	0x200006c0

0800d0f8 <_realloc_r>:
 800d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fc:	4680      	mov	r8, r0
 800d0fe:	4614      	mov	r4, r2
 800d100:	460e      	mov	r6, r1
 800d102:	b921      	cbnz	r1, 800d10e <_realloc_r+0x16>
 800d104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	4611      	mov	r1, r2
 800d10a:	f7ff bba1 	b.w	800c850 <_malloc_r>
 800d10e:	b92a      	cbnz	r2, 800d11c <_realloc_r+0x24>
 800d110:	f7ff fb32 	bl	800c778 <_free_r>
 800d114:	4625      	mov	r5, r4
 800d116:	4628      	mov	r0, r5
 800d118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11c:	f000 f835 	bl	800d18a <_malloc_usable_size_r>
 800d120:	4284      	cmp	r4, r0
 800d122:	4607      	mov	r7, r0
 800d124:	d802      	bhi.n	800d12c <_realloc_r+0x34>
 800d126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d12a:	d812      	bhi.n	800d152 <_realloc_r+0x5a>
 800d12c:	4621      	mov	r1, r4
 800d12e:	4640      	mov	r0, r8
 800d130:	f7ff fb8e 	bl	800c850 <_malloc_r>
 800d134:	4605      	mov	r5, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	d0ed      	beq.n	800d116 <_realloc_r+0x1e>
 800d13a:	42bc      	cmp	r4, r7
 800d13c:	4622      	mov	r2, r4
 800d13e:	4631      	mov	r1, r6
 800d140:	bf28      	it	cs
 800d142:	463a      	movcs	r2, r7
 800d144:	f7fe fe32 	bl	800bdac <memcpy>
 800d148:	4631      	mov	r1, r6
 800d14a:	4640      	mov	r0, r8
 800d14c:	f7ff fb14 	bl	800c778 <_free_r>
 800d150:	e7e1      	b.n	800d116 <_realloc_r+0x1e>
 800d152:	4635      	mov	r5, r6
 800d154:	e7df      	b.n	800d116 <_realloc_r+0x1e>
	...

0800d158 <_read_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d07      	ldr	r5, [pc, #28]	; (800d178 <_read_r+0x20>)
 800d15c:	4604      	mov	r4, r0
 800d15e:	4608      	mov	r0, r1
 800d160:	4611      	mov	r1, r2
 800d162:	2200      	movs	r2, #0
 800d164:	602a      	str	r2, [r5, #0]
 800d166:	461a      	mov	r2, r3
 800d168:	f7f6 ffaa 	bl	80040c0 <_read>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_read_r+0x1e>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_read_r+0x1e>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	200006cc 	.word	0x200006cc

0800d17c <abort>:
 800d17c:	b508      	push	{r3, lr}
 800d17e:	2006      	movs	r0, #6
 800d180:	f000 f834 	bl	800d1ec <raise>
 800d184:	2001      	movs	r0, #1
 800d186:	f7f6 ff91 	bl	80040ac <_exit>

0800d18a <_malloc_usable_size_r>:
 800d18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d18e:	1f18      	subs	r0, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfbc      	itt	lt
 800d194:	580b      	ldrlt	r3, [r1, r0]
 800d196:	18c0      	addlt	r0, r0, r3
 800d198:	4770      	bx	lr

0800d19a <_raise_r>:
 800d19a:	291f      	cmp	r1, #31
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4604      	mov	r4, r0
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	d904      	bls.n	800d1ae <_raise_r+0x14>
 800d1a4:	2316      	movs	r3, #22
 800d1a6:	6003      	str	r3, [r0, #0]
 800d1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1b0:	b112      	cbz	r2, 800d1b8 <_raise_r+0x1e>
 800d1b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1b6:	b94b      	cbnz	r3, 800d1cc <_raise_r+0x32>
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f000 f831 	bl	800d220 <_getpid_r>
 800d1be:	462a      	mov	r2, r5
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c8:	f000 b818 	b.w	800d1fc <_kill_r>
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <_raise_r+0x4c>
 800d1d0:	1c59      	adds	r1, r3, #1
 800d1d2:	d103      	bne.n	800d1dc <_raise_r+0x42>
 800d1d4:	2316      	movs	r3, #22
 800d1d6:	6003      	str	r3, [r0, #0]
 800d1d8:	2001      	movs	r0, #1
 800d1da:	e7e7      	b.n	800d1ac <_raise_r+0x12>
 800d1dc:	2400      	movs	r4, #0
 800d1de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	4798      	blx	r3
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e7e0      	b.n	800d1ac <_raise_r+0x12>
	...

0800d1ec <raise>:
 800d1ec:	4b02      	ldr	r3, [pc, #8]	; (800d1f8 <raise+0xc>)
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	6818      	ldr	r0, [r3, #0]
 800d1f2:	f7ff bfd2 	b.w	800d19a <_raise_r>
 800d1f6:	bf00      	nop
 800d1f8:	20000028 	.word	0x20000028

0800d1fc <_kill_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d07      	ldr	r5, [pc, #28]	; (800d21c <_kill_r+0x20>)
 800d200:	2300      	movs	r3, #0
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	4611      	mov	r1, r2
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	f7f6 ff3f 	bl	800408c <_kill>
 800d20e:	1c43      	adds	r3, r0, #1
 800d210:	d102      	bne.n	800d218 <_kill_r+0x1c>
 800d212:	682b      	ldr	r3, [r5, #0]
 800d214:	b103      	cbz	r3, 800d218 <_kill_r+0x1c>
 800d216:	6023      	str	r3, [r4, #0]
 800d218:	bd38      	pop	{r3, r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	200006cc 	.word	0x200006cc

0800d220 <_getpid_r>:
 800d220:	f7f6 bf2c 	b.w	800407c <_getpid>
 800d224:	0000      	movs	r0, r0
	...

0800d228 <atan>:
 800d228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22c:	ec55 4b10 	vmov	r4, r5, d0
 800d230:	4bc3      	ldr	r3, [pc, #780]	; (800d540 <atan+0x318>)
 800d232:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d236:	429e      	cmp	r6, r3
 800d238:	46ab      	mov	fp, r5
 800d23a:	dd18      	ble.n	800d26e <atan+0x46>
 800d23c:	4bc1      	ldr	r3, [pc, #772]	; (800d544 <atan+0x31c>)
 800d23e:	429e      	cmp	r6, r3
 800d240:	dc01      	bgt.n	800d246 <atan+0x1e>
 800d242:	d109      	bne.n	800d258 <atan+0x30>
 800d244:	b144      	cbz	r4, 800d258 <atan+0x30>
 800d246:	4622      	mov	r2, r4
 800d248:	462b      	mov	r3, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	4629      	mov	r1, r5
 800d24e:	f7f3 f83d 	bl	80002cc <__adddf3>
 800d252:	4604      	mov	r4, r0
 800d254:	460d      	mov	r5, r1
 800d256:	e006      	b.n	800d266 <atan+0x3e>
 800d258:	f1bb 0f00 	cmp.w	fp, #0
 800d25c:	f300 8131 	bgt.w	800d4c2 <atan+0x29a>
 800d260:	a59b      	add	r5, pc, #620	; (adr r5, 800d4d0 <atan+0x2a8>)
 800d262:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d266:	ec45 4b10 	vmov	d0, r4, r5
 800d26a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	4bb6      	ldr	r3, [pc, #728]	; (800d548 <atan+0x320>)
 800d270:	429e      	cmp	r6, r3
 800d272:	dc14      	bgt.n	800d29e <atan+0x76>
 800d274:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d278:	429e      	cmp	r6, r3
 800d27a:	dc0d      	bgt.n	800d298 <atan+0x70>
 800d27c:	a396      	add	r3, pc, #600	; (adr r3, 800d4d8 <atan+0x2b0>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	ee10 0a10 	vmov	r0, s0
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 f820 	bl	80002cc <__adddf3>
 800d28c:	4baf      	ldr	r3, [pc, #700]	; (800d54c <atan+0x324>)
 800d28e:	2200      	movs	r2, #0
 800d290:	f7f3 fc62 	bl	8000b58 <__aeabi_dcmpgt>
 800d294:	2800      	cmp	r0, #0
 800d296:	d1e6      	bne.n	800d266 <atan+0x3e>
 800d298:	f04f 3aff 	mov.w	sl, #4294967295
 800d29c:	e02b      	b.n	800d2f6 <atan+0xce>
 800d29e:	f000 f963 	bl	800d568 <fabs>
 800d2a2:	4bab      	ldr	r3, [pc, #684]	; (800d550 <atan+0x328>)
 800d2a4:	429e      	cmp	r6, r3
 800d2a6:	ec55 4b10 	vmov	r4, r5, d0
 800d2aa:	f300 80bf 	bgt.w	800d42c <atan+0x204>
 800d2ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d2b2:	429e      	cmp	r6, r3
 800d2b4:	f300 80a0 	bgt.w	800d3f8 <atan+0x1d0>
 800d2b8:	ee10 2a10 	vmov	r2, s0
 800d2bc:	ee10 0a10 	vmov	r0, s0
 800d2c0:	462b      	mov	r3, r5
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f7f3 f802 	bl	80002cc <__adddf3>
 800d2c8:	4ba0      	ldr	r3, [pc, #640]	; (800d54c <atan+0x324>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f7f2 fffc 	bl	80002c8 <__aeabi_dsub>
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460f      	mov	r7, r1
 800d2d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2da:	4620      	mov	r0, r4
 800d2dc:	4629      	mov	r1, r5
 800d2de:	f7f2 fff5 	bl	80002cc <__adddf3>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	f7f3 facf 	bl	800088c <__aeabi_ddiv>
 800d2ee:	f04f 0a00 	mov.w	sl, #0
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	460d      	mov	r5, r1
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	f7f3 f99b 	bl	8000638 <__aeabi_dmul>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4680      	mov	r8, r0
 800d308:	4689      	mov	r9, r1
 800d30a:	f7f3 f995 	bl	8000638 <__aeabi_dmul>
 800d30e:	a374      	add	r3, pc, #464	; (adr r3, 800d4e0 <atan+0x2b8>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	4606      	mov	r6, r0
 800d316:	460f      	mov	r7, r1
 800d318:	f7f3 f98e 	bl	8000638 <__aeabi_dmul>
 800d31c:	a372      	add	r3, pc, #456	; (adr r3, 800d4e8 <atan+0x2c0>)
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	f7f2 ffd3 	bl	80002cc <__adddf3>
 800d326:	4632      	mov	r2, r6
 800d328:	463b      	mov	r3, r7
 800d32a:	f7f3 f985 	bl	8000638 <__aeabi_dmul>
 800d32e:	a370      	add	r3, pc, #448	; (adr r3, 800d4f0 <atan+0x2c8>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	f7f2 ffca 	bl	80002cc <__adddf3>
 800d338:	4632      	mov	r2, r6
 800d33a:	463b      	mov	r3, r7
 800d33c:	f7f3 f97c 	bl	8000638 <__aeabi_dmul>
 800d340:	a36d      	add	r3, pc, #436	; (adr r3, 800d4f8 <atan+0x2d0>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f2 ffc1 	bl	80002cc <__adddf3>
 800d34a:	4632      	mov	r2, r6
 800d34c:	463b      	mov	r3, r7
 800d34e:	f7f3 f973 	bl	8000638 <__aeabi_dmul>
 800d352:	a36b      	add	r3, pc, #428	; (adr r3, 800d500 <atan+0x2d8>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f2 ffb8 	bl	80002cc <__adddf3>
 800d35c:	4632      	mov	r2, r6
 800d35e:	463b      	mov	r3, r7
 800d360:	f7f3 f96a 	bl	8000638 <__aeabi_dmul>
 800d364:	a368      	add	r3, pc, #416	; (adr r3, 800d508 <atan+0x2e0>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f7f2 ffaf 	bl	80002cc <__adddf3>
 800d36e:	4642      	mov	r2, r8
 800d370:	464b      	mov	r3, r9
 800d372:	f7f3 f961 	bl	8000638 <__aeabi_dmul>
 800d376:	a366      	add	r3, pc, #408	; (adr r3, 800d510 <atan+0x2e8>)
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	4680      	mov	r8, r0
 800d37e:	4689      	mov	r9, r1
 800d380:	4630      	mov	r0, r6
 800d382:	4639      	mov	r1, r7
 800d384:	f7f3 f958 	bl	8000638 <__aeabi_dmul>
 800d388:	a363      	add	r3, pc, #396	; (adr r3, 800d518 <atan+0x2f0>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f2 ff9b 	bl	80002c8 <__aeabi_dsub>
 800d392:	4632      	mov	r2, r6
 800d394:	463b      	mov	r3, r7
 800d396:	f7f3 f94f 	bl	8000638 <__aeabi_dmul>
 800d39a:	a361      	add	r3, pc, #388	; (adr r3, 800d520 <atan+0x2f8>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f7f2 ff92 	bl	80002c8 <__aeabi_dsub>
 800d3a4:	4632      	mov	r2, r6
 800d3a6:	463b      	mov	r3, r7
 800d3a8:	f7f3 f946 	bl	8000638 <__aeabi_dmul>
 800d3ac:	a35e      	add	r3, pc, #376	; (adr r3, 800d528 <atan+0x300>)
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f7f2 ff89 	bl	80002c8 <__aeabi_dsub>
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	f7f3 f93d 	bl	8000638 <__aeabi_dmul>
 800d3be:	a35c      	add	r3, pc, #368	; (adr r3, 800d530 <atan+0x308>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f2 ff80 	bl	80002c8 <__aeabi_dsub>
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	f7f3 f934 	bl	8000638 <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	f7f2 ff78 	bl	80002cc <__adddf3>
 800d3dc:	4622      	mov	r2, r4
 800d3de:	462b      	mov	r3, r5
 800d3e0:	f7f3 f92a 	bl	8000638 <__aeabi_dmul>
 800d3e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	d14b      	bne.n	800d486 <atan+0x25e>
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	f7f2 ff69 	bl	80002c8 <__aeabi_dsub>
 800d3f6:	e72c      	b.n	800d252 <atan+0x2a>
 800d3f8:	ee10 0a10 	vmov	r0, s0
 800d3fc:	4b53      	ldr	r3, [pc, #332]	; (800d54c <atan+0x324>)
 800d3fe:	2200      	movs	r2, #0
 800d400:	4629      	mov	r1, r5
 800d402:	f7f2 ff61 	bl	80002c8 <__aeabi_dsub>
 800d406:	4b51      	ldr	r3, [pc, #324]	; (800d54c <atan+0x324>)
 800d408:	4606      	mov	r6, r0
 800d40a:	460f      	mov	r7, r1
 800d40c:	2200      	movs	r2, #0
 800d40e:	4620      	mov	r0, r4
 800d410:	4629      	mov	r1, r5
 800d412:	f7f2 ff5b 	bl	80002cc <__adddf3>
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	4630      	mov	r0, r6
 800d41c:	4639      	mov	r1, r7
 800d41e:	f7f3 fa35 	bl	800088c <__aeabi_ddiv>
 800d422:	f04f 0a01 	mov.w	sl, #1
 800d426:	4604      	mov	r4, r0
 800d428:	460d      	mov	r5, r1
 800d42a:	e764      	b.n	800d2f6 <atan+0xce>
 800d42c:	4b49      	ldr	r3, [pc, #292]	; (800d554 <atan+0x32c>)
 800d42e:	429e      	cmp	r6, r3
 800d430:	da1d      	bge.n	800d46e <atan+0x246>
 800d432:	ee10 0a10 	vmov	r0, s0
 800d436:	4b48      	ldr	r3, [pc, #288]	; (800d558 <atan+0x330>)
 800d438:	2200      	movs	r2, #0
 800d43a:	4629      	mov	r1, r5
 800d43c:	f7f2 ff44 	bl	80002c8 <__aeabi_dsub>
 800d440:	4b45      	ldr	r3, [pc, #276]	; (800d558 <atan+0x330>)
 800d442:	4606      	mov	r6, r0
 800d444:	460f      	mov	r7, r1
 800d446:	2200      	movs	r2, #0
 800d448:	4620      	mov	r0, r4
 800d44a:	4629      	mov	r1, r5
 800d44c:	f7f3 f8f4 	bl	8000638 <__aeabi_dmul>
 800d450:	4b3e      	ldr	r3, [pc, #248]	; (800d54c <atan+0x324>)
 800d452:	2200      	movs	r2, #0
 800d454:	f7f2 ff3a 	bl	80002cc <__adddf3>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	4630      	mov	r0, r6
 800d45e:	4639      	mov	r1, r7
 800d460:	f7f3 fa14 	bl	800088c <__aeabi_ddiv>
 800d464:	f04f 0a02 	mov.w	sl, #2
 800d468:	4604      	mov	r4, r0
 800d46a:	460d      	mov	r5, r1
 800d46c:	e743      	b.n	800d2f6 <atan+0xce>
 800d46e:	462b      	mov	r3, r5
 800d470:	ee10 2a10 	vmov	r2, s0
 800d474:	4939      	ldr	r1, [pc, #228]	; (800d55c <atan+0x334>)
 800d476:	2000      	movs	r0, #0
 800d478:	f7f3 fa08 	bl	800088c <__aeabi_ddiv>
 800d47c:	f04f 0a03 	mov.w	sl, #3
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	e737      	b.n	800d2f6 <atan+0xce>
 800d486:	4b36      	ldr	r3, [pc, #216]	; (800d560 <atan+0x338>)
 800d488:	4e36      	ldr	r6, [pc, #216]	; (800d564 <atan+0x33c>)
 800d48a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d48e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d492:	e9da 2300 	ldrd	r2, r3, [sl]
 800d496:	f7f2 ff17 	bl	80002c8 <__aeabi_dsub>
 800d49a:	4622      	mov	r2, r4
 800d49c:	462b      	mov	r3, r5
 800d49e:	f7f2 ff13 	bl	80002c8 <__aeabi_dsub>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d4aa:	f7f2 ff0d 	bl	80002c8 <__aeabi_dsub>
 800d4ae:	f1bb 0f00 	cmp.w	fp, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	f6bf aed6 	bge.w	800d266 <atan+0x3e>
 800d4ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4be:	461d      	mov	r5, r3
 800d4c0:	e6d1      	b.n	800d266 <atan+0x3e>
 800d4c2:	a51d      	add	r5, pc, #116	; (adr r5, 800d538 <atan+0x310>)
 800d4c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d4c8:	e6cd      	b.n	800d266 <atan+0x3e>
 800d4ca:	bf00      	nop
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	54442d18 	.word	0x54442d18
 800d4d4:	bff921fb 	.word	0xbff921fb
 800d4d8:	8800759c 	.word	0x8800759c
 800d4dc:	7e37e43c 	.word	0x7e37e43c
 800d4e0:	e322da11 	.word	0xe322da11
 800d4e4:	3f90ad3a 	.word	0x3f90ad3a
 800d4e8:	24760deb 	.word	0x24760deb
 800d4ec:	3fa97b4b 	.word	0x3fa97b4b
 800d4f0:	a0d03d51 	.word	0xa0d03d51
 800d4f4:	3fb10d66 	.word	0x3fb10d66
 800d4f8:	c54c206e 	.word	0xc54c206e
 800d4fc:	3fb745cd 	.word	0x3fb745cd
 800d500:	920083ff 	.word	0x920083ff
 800d504:	3fc24924 	.word	0x3fc24924
 800d508:	5555550d 	.word	0x5555550d
 800d50c:	3fd55555 	.word	0x3fd55555
 800d510:	2c6a6c2f 	.word	0x2c6a6c2f
 800d514:	bfa2b444 	.word	0xbfa2b444
 800d518:	52defd9a 	.word	0x52defd9a
 800d51c:	3fadde2d 	.word	0x3fadde2d
 800d520:	af749a6d 	.word	0xaf749a6d
 800d524:	3fb3b0f2 	.word	0x3fb3b0f2
 800d528:	fe231671 	.word	0xfe231671
 800d52c:	3fbc71c6 	.word	0x3fbc71c6
 800d530:	9998ebc4 	.word	0x9998ebc4
 800d534:	3fc99999 	.word	0x3fc99999
 800d538:	54442d18 	.word	0x54442d18
 800d53c:	3ff921fb 	.word	0x3ff921fb
 800d540:	440fffff 	.word	0x440fffff
 800d544:	7ff00000 	.word	0x7ff00000
 800d548:	3fdbffff 	.word	0x3fdbffff
 800d54c:	3ff00000 	.word	0x3ff00000
 800d550:	3ff2ffff 	.word	0x3ff2ffff
 800d554:	40038000 	.word	0x40038000
 800d558:	3ff80000 	.word	0x3ff80000
 800d55c:	bff00000 	.word	0xbff00000
 800d560:	0800dc30 	.word	0x0800dc30
 800d564:	0800dc10 	.word	0x0800dc10

0800d568 <fabs>:
 800d568:	ec51 0b10 	vmov	r0, r1, d0
 800d56c:	ee10 2a10 	vmov	r2, s0
 800d570:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d574:	ec43 2b10 	vmov	d0, r2, r3
 800d578:	4770      	bx	lr
	...

0800d57c <_init>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	bf00      	nop
 800d580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d582:	bc08      	pop	{r3}
 800d584:	469e      	mov	lr, r3
 800d586:	4770      	bx	lr

0800d588 <_fini>:
 800d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58a:	bf00      	nop
 800d58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58e:	bc08      	pop	{r3}
 800d590:	469e      	mov	lr, r3
 800d592:	4770      	bx	lr
