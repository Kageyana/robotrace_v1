
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08014048  08014048  00024048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e10  08014e10  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08014e10  08014e10  00024e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e18  08014e18  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e18  08014e18  00024e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e1c  08014e1c  00024e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08014e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002878  20000230  0801504c  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002aa8  0801504c  00032aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020225  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c01  00000000  00000000  00050481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00055088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  00056b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d214  00000000  00000000  00058328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002be14  00000000  00000000  0008553c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75b2  00000000  00000000  000b1350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008348  00000000  00000000  00198954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801402c 	.word	0x0801402c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0801402c 	.word	0x0801402c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f006 fdfa 	bl	8007c50 <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000049c 	.word	0x2000049c

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f006 fde2 	bl	8007c50 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000049c 	.word	0x2000049c

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f005 f8a3 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f005 f89d 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f005 f897 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f005 f891 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f005 f88b 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f005 f885 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f005 f87f 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f005 f879 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f005 f873 	bl	80061e8 <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f005 f86d 	bl	80061e8 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	2000026a 	.word	0x2000026a
 800125c:	20000268 	.word	0x20000268
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	2000024c 	.word	0x2000024c

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000266 	.word	0x20000266

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f00f fdc3 	bl	8010e78 <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	20000254 	.word	0x20000254
 8001358:	20000266 	.word	0x20000266
 800135c:	2000024c 	.word	0x2000024c
 8001360:	2000026a 	.word	0x2000026a

08001364 <readBNO055>:
// モジュール名 readBNO055
// 処理概要     指定レジスタの読み出し
// 引数         reg:レジスタアドレス
// 戻り値       読み出したデータ
/////////////////////////////////////////////////////////////////////
uint8_t readBNO055(uint8_t reg) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_buf[1], tx_buf[1] = {reg};
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	723b      	strb	r3, [r7, #8]
    uint8_t rx_num = 1, tx_num = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	2301      	movs	r3, #1
 8001378:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	b29b      	uxth	r3, r3
 800137e:	f107 0208 	add.w	r2, r7, #8
 8001382:	2164      	movs	r1, #100	; 0x64
 8001384:	9100      	str	r1, [sp, #0]
 8001386:	2150      	movs	r1, #80	; 0x50
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <readBNO055+0x48>)
 800138a:	f006 fc61 	bl	8007c50 <HAL_I2C_Master_Transmit>
    I2C_BNO055_READ
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	b29b      	uxth	r3, r3
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	2164      	movs	r1, #100	; 0x64
 8001398:	9100      	str	r1, [sp, #0]
 800139a:	2151      	movs	r1, #81	; 0x51
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <readBNO055+0x48>)
 800139e:	f006 fd55 	bl	8007e4c <HAL_I2C_Master_Receive>

    return rx_buf[0];
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000049c 	.word	0x2000049c

080013b0 <readBNO055AxisData>:
// モジュール名 readBNO055
// 処理概要     指定レジスタの読み出し
// 引数         reg:レジスタアドレス
// 戻り値       読み出したデータ
/////////////////////////////////////////////////////////////////////
void readBNO055AxisData(uint8_t reg, uint8_t *rx_buf ) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[1] = {reg};
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	733b      	strb	r3, [r7, #12]
    uint8_t rx_num = 6, tx_num = 1;
 80013c0:	2306      	movs	r3, #6
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	2301      	movs	r3, #1
 80013c6:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f107 020c 	add.w	r2, r7, #12
 80013d0:	2164      	movs	r1, #100	; 0x64
 80013d2:	9100      	str	r1, [sp, #0]
 80013d4:	2150      	movs	r1, #80	; 0x50
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <readBNO055AxisData+0x48>)
 80013d8:	f006 fc3a 	bl	8007c50 <HAL_I2C_Master_Transmit>
    I2C_BNO055_READ
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	2151      	movs	r1, #81	; 0x51
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <readBNO055AxisData+0x48>)
 80013ea:	f006 fd2f 	bl	8007e4c <HAL_I2C_Master_Receive>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000049c 	.word	0x2000049c

080013fc <writeBNO055>:
// モジュール名 writeBNO055
// 処理概要     指定レジスタへ書き込み
// 引数         reg:レジスタアドレス data: 書き込むデータ
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void writeBNO055(uint8_t reg, uint8_t data) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
    uint8_t rx_buf[1], tx_buf[1] = {reg, data};
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	723b      	strb	r3, [r7, #8]
    uint8_t rx_num = 1, tx_num = 2;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	2302      	movs	r3, #2
 8001416:	73bb      	strb	r3, [r7, #14]

    I2C_BNO055_SEND
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	b29b      	uxth	r3, r3
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	2164      	movs	r1, #100	; 0x64
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	2150      	movs	r1, #80	; 0x50
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <writeBNO055+0x38>)
 8001428:	f006 fc12 	bl	8007c50 <HAL_I2C_Master_Transmit>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000049c 	.word	0x2000049c

08001438 <initBNO055>:
// モジュール名 initBNO055
// 処理概要     指定レジスタへ書き込み
// 引数         reg:レジスタアドレス data: 書き込むデータ
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void initBNO055(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    if(readBNO055(BNO055_CHIP_ID_ADDR) == BNO055_CHIP_ID) {
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ff91 	bl	8001364 <readBNO055>
 8001442:	4603      	mov	r3, r0
 8001444:	2ba0      	cmp	r3, #160	; 0xa0
 8001446:	d116      	bne.n	8001476 <initBNO055+0x3e>
        // コンフィグ設定
        writeBNO055(BNO055_PAGE_ID_ADDR, 0x01); // ページ1に変更
 8001448:	2101      	movs	r1, #1
 800144a:	2007      	movs	r0, #7
 800144c:	f7ff ffd6 	bl	80013fc <writeBNO055>

        // 加速
        writeBNO055(BNO055_ACC_CONFIG_ADDR, 0x17);    // 16G 250Hz
 8001450:	2117      	movs	r1, #23
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff ffd2 	bl	80013fc <writeBNO055>
        // ジャイロ
        writeBNO055(BNO055_GYR_CONFIG_0_ADDR, 0x08);  // 2000dps 230Hz 
 8001458:	2108      	movs	r1, #8
 800145a:	200a      	movs	r0, #10
 800145c:	f7ff ffce 	bl	80013fc <writeBNO055>

        // モード変更
        writeBNO055(BNO055_PAGE_ID_ADDR, 0x00);     // ページ0に変更
 8001460:	2100      	movs	r1, #0
 8001462:	2007      	movs	r0, #7
 8001464:	f7ff ffca 	bl	80013fc <writeBNO055>
        writeBNO055(BNO055_OPR_MODE_ADDR, 0x05);    // ノーマルモード
 8001468:	2105      	movs	r1, #5
 800146a:	203d      	movs	r0, #61	; 0x3d
 800146c:	f7ff ffc6 	bl	80013fc <writeBNO055>
        HAL_Delay(50);    //変更まで待つ
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f004 feb9 	bl	80061e8 <HAL_Delay>
    }
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <getBNO055Gyro>:
// モジュール名 getGyro
// 処理概要     角速度の取得
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getBNO055Gyro(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
    int16_t rawData[8];
    readBNO055AxisData(BNO055_GYRO_DATA_X_LSB_ADDR, rawData);
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	2014      	movs	r0, #20
 8001488:	f7ff ff92 	bl	80013b0 <readBNO055AxisData>
    gyroVal[INDEX_X] = (int16_t)( rawData[1] * 0x100 + rawData[0] );
 800148c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001490:	b29b      	uxth	r3, r3
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b29a      	uxth	r2, r3
 8001496:	f9b7 3000 	ldrsh.w	r3, [r7]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4413      	add	r3, r2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <getBNO055Gyro+0xc8>)
 80014a4:	801a      	strh	r2, [r3, #0]
    gyroVal[INDEX_Y] = (int16_t)( rawData[3] * 0x100 + rawData[2] );
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <getBNO055Gyro+0xc8>)
 80014be:	805a      	strh	r2, [r3, #2]
    gyroVal[INDEX_Z] = (int16_t)( rawData[5] * 0x100 + rawData[4] );
 80014c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <getBNO055Gyro+0xc8>)
 80014d8:	809a      	strh	r2, [r3, #4]
    angularVelocity[INDEX_X] = ((double)gyroVal[INDEX_X]) / GYROLSB;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <getBNO055Gyro+0xc8>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f83f 	bl	8000564 <__aeabi_i2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <getBNO055Gyro+0xcc>)
 80014ec:	f7ff f9ce 	bl	800088c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4915      	ldr	r1, [pc, #84]	; (800154c <getBNO055Gyro+0xd0>)
 80014f6:	e9c1 2300 	strd	r2, r3, [r1]
    angularVelocity[INDEX_Y] = ((double)gyroVal[INDEX_Y]) / GYROLSB;
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <getBNO055Gyro+0xc8>)
 80014fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f82f 	bl	8000564 <__aeabi_i2d>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <getBNO055Gyro+0xcc>)
 800150c:	f7ff f9be 	bl	800088c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	490d      	ldr	r1, [pc, #52]	; (800154c <getBNO055Gyro+0xd0>)
 8001516:	e9c1 2302 	strd	r2, r3, [r1, #8]
    angularVelocity[INDEX_Z] = ((double)gyroVal[INDEX_Z]) / GYROLSB;   
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <getBNO055Gyro+0xc8>)
 800151c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f81f 	bl	8000564 <__aeabi_i2d>
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <getBNO055Gyro+0xcc>)
 800152c:	f7ff f9ae 	bl	800088c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4905      	ldr	r1, [pc, #20]	; (800154c <getBNO055Gyro+0xd0>)
 8001536:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002b8 	.word	0x200002b8
 8001548:	40300000 	.word	0x40300000
 800154c:	20000270 	.word	0x20000270

08001550 <calcDegrees>:
// モジュール名 calcDegrees
// 処理概要     角度の計算
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void calcDegrees(void) {
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	af00      	add	r7, sp, #0
    angle[INDEX_X] += angularVelocity[INDEX_X] * 0.0056;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <calcDegrees+0x98>)
 8001556:	e9d3 4500 	ldrd	r4, r5, [r3]
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <calcDegrees+0x9c>)
 800155c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001560:	a31f      	add	r3, pc, #124	; (adr r3, 80015e0 <calcDegrees+0x90>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	491b      	ldr	r1, [pc, #108]	; (80015e8 <calcDegrees+0x98>)
 800157c:	e9c1 2300 	strd	r2, r3, [r1]
    angle[INDEX_Y] += angularVelocity[INDEX_Y] * 0.0056;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <calcDegrees+0x98>)
 8001582:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <calcDegrees+0x9c>)
 8001588:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800158c:	a314      	add	r3, pc, #80	; (adr r3, 80015e0 <calcDegrees+0x90>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f851 	bl	8000638 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe95 	bl	80002cc <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4910      	ldr	r1, [pc, #64]	; (80015e8 <calcDegrees+0x98>)
 80015a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    angle[INDEX_Z] += angularVelocity[INDEX_Z] * 0.0056;   
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <calcDegrees+0x98>)
 80015ae:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <calcDegrees+0x9c>)
 80015b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015b8:	a309      	add	r3, pc, #36	; (adr r3, 80015e0 <calcDegrees+0x90>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f83b 	bl	8000638 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe fe7f 	bl	80002cc <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <calcDegrees+0x98>)
 80015d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80015d8:	bf00      	nop
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	f3af 8000 	nop.w
 80015e0:	8db8bac7 	.word	0x8db8bac7
 80015e4:	3f76f006 	.word	0x3f76f006
 80015e8:	200002a0 	.word	0x200002a0
 80015ec:	20000270 	.word	0x20000270

080015f0 <readINA260>:
// 処理概要     データ受信
// 引数         reg:レジスタのアドレス
// 戻り値       読み取ったデータ(16bit)
//////////////////////////////////////////////////////////////////////////
uint16_t readINA260( uint16_t addr, uint8_t reg )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4613      	mov	r3, r2
 80015fe:	717b      	strb	r3, [r7, #5]
    uint8_t rx_buf[2], tx_buf[1] = { reg };
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	723b      	strb	r3, [r7, #8]
	I2C_INA260_SEND
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	88f9      	ldrh	r1, [r7, #6]
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <readINA260+0x58>)
 8001612:	f006 fb1d 	bl	8007c50 <HAL_I2C_Master_Transmit>
    I2C_INA260_READ
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	b299      	uxth	r1, r3
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2302      	movs	r3, #2
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <readINA260+0x58>)
 800162a:	f006 fc0f 	bl	8007e4c <HAL_I2C_Master_Receive>

    return (uint16_t)( rx_buf[0] * 0x100 + rx_buf[1] );
 800162e:	7b3b      	ldrb	r3, [r7, #12]
 8001630:	b29b      	uxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b29a      	uxth	r2, r3
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4413      	add	r3, r2
 800163c:	b29b      	uxth	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000049c 	.word	0x2000049c

0800164c <writeINA260>:
// 処理概要     データ受信
// 引数         reg:レジスタのアドレス
// 戻り値       読み取ったデータ(16bit)
//////////////////////////////////////////////////////////////////////////
void writeINA260( uint16_t addr, uint8_t reg, uint16_t data )
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	460b      	mov	r3, r1
 8001658:	717b      	strb	r3, [r7, #5]
 800165a:	4613      	mov	r3, r2
 800165c:	807b      	strh	r3, [r7, #2]
    uint8_t rx_buf[2], tx_buf[2] = { reg, data};
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	723b      	strb	r3, [r7, #8]
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	727b      	strb	r3, [r7, #9]
	I2C_INA260_SEND2
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	88f9      	ldrh	r1, [r7, #6]
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2302      	movs	r3, #2
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <writeINA260+0x38>)
 8001676:	f006 faeb 	bl	8007c50 <HAL_I2C_Master_Transmit>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000049c 	.word	0x2000049c

08001688 <initINA260>:
// モジュール名 initINA260
// 処理概要     INA260の初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void initINA260( void ) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    // Current  conversion time = 8.244 ms
    // Vbus     conversion time = 1.1 ms
    writeINA260( INA260_SLAVEADDRESS_R, 0x00, 0x6b27 );
 800168c:	f646 3227 	movw	r2, #27431	; 0x6b27
 8001690:	2100      	movs	r1, #0
 8001692:	2080      	movs	r0, #128	; 0x80
 8001694:	f7ff ffda 	bl	800164c <writeINA260>
    HAL_Delay(50);
 8001698:	2032      	movs	r0, #50	; 0x32
 800169a:	f004 fda5 	bl	80061e8 <HAL_Delay>
	writeINA260( INA260_SLAVEADDRESS_L, 0x00, 0x6b27 );
 800169e:	f646 3227 	movw	r2, #27431	; 0x6b27
 80016a2:	2100      	movs	r1, #0
 80016a4:	2088      	movs	r0, #136	; 0x88
 80016a6:	f7ff ffd1 	bl	800164c <writeINA260>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <getCurrent>:
// 処理概要     電流値の取得
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void getCurrent( void )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    // Rawデータ取得
    rawCurrentR = readINA260(INA260_SLAVEADDRESS_R, 0x01);
 80016b4:	2101      	movs	r1, #1
 80016b6:	2080      	movs	r0, #128	; 0x80
 80016b8:	f7ff ff9a 	bl	80015f0 <readINA260>
 80016bc:	4603      	mov	r3, r0
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <getCurrent+0x68>)
 80016c2:	801a      	strh	r2, [r3, #0]
	if (rawCurrentR > 32767) rawCurrentR = ~rawCurrentR+0x8000;     // 2の補数計算(16bitの半分を超えたとき)
    rawCurrentL = readINA260(INA260_SLAVEADDRESS_L, 0x01);
 80016c4:	2101      	movs	r1, #1
 80016c6:	2088      	movs	r0, #136	; 0x88
 80016c8:	f7ff ff92 	bl	80015f0 <readINA260>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <getCurrent+0x6c>)
 80016d2:	801a      	strh	r2, [r3, #0]
	if (rawCurrentL > 32767) rawCurrentL = ~rawCurrentL+0x8000;  // 2の補数計算(16bitの半分を超えたとき)

    CurrntR = LSB_CURRENT * rawCurrentR;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <getCurrent+0x68>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff42 	bl	8000564 <__aeabi_i2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <getCurrent+0x70>)
 80016e6:	f7fe ffa7 	bl	8000638 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <getCurrent+0x74>)
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
    CurrntL = LSB_CURRENT * rawCurrentL;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <getCurrent+0x6c>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff32 	bl	8000564 <__aeabi_i2d>
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <getCurrent+0x70>)
 8001706:	f7fe ff97 	bl	8000638 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4906      	ldr	r1, [pc, #24]	; (8001728 <getCurrent+0x78>)
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002d0 	.word	0x200002d0
 800171c:	200002d2 	.word	0x200002d2
 8001720:	3ff40000 	.word	0x3ff40000
 8001724:	200002c8 	.word	0x200002c8
 8001728:	200002c0 	.word	0x200002c0

0800172c <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	// Encoder count
	int16_t val;

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001730:	213c      	movs	r1, #60	; 0x3c
 8001732:	4832      	ldr	r0, [pc, #200]	; (80017fc <systemInit+0xd0>)
 8001734:	f008 fd4e 	bl	800a1d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001738:	213c      	movs	r1, #60	; 0x3c
 800173a:	4831      	ldr	r0, [pc, #196]	; (8001800 <systemInit+0xd4>)
 800173c:	f008 fd4a 	bl	800a1d4 <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *)analogVal, 12) != HAL_OK)	Error_Handler();
 8001740:	220c      	movs	r2, #12
 8001742:	4930      	ldr	r1, [pc, #192]	; (8001804 <systemInit+0xd8>)
 8001744:	4830      	ldr	r0, [pc, #192]	; (8001808 <systemInit+0xdc>)
 8001746:	f004 ff15 	bl	8006574 <HAL_ADC_Start_DMA>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <systemInit+0x28>
 8001750:	f002 fab4 	bl	8003cbc <Error_Handler>

	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 8001754:	2100      	movs	r1, #0
 8001756:	482d      	ldr	r0, [pc, #180]	; (800180c <systemInit+0xe0>)
 8001758:	f008 fbce 	bl	8009ef8 <HAL_TIM_PWM_Start>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <systemInit+0x3a>
 8001762:	f002 faab 	bl	8003cbc <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 8001766:	2104      	movs	r1, #4
 8001768:	4828      	ldr	r0, [pc, #160]	; (800180c <systemInit+0xe0>)
 800176a:	f008 fbc5 	bl	8009ef8 <HAL_TIM_PWM_Start>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <systemInit+0x4c>
 8001774:	f002 faa2 	bl	8003cbc <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 8001778:	2108      	movs	r1, #8
 800177a:	4824      	ldr	r0, [pc, #144]	; (800180c <systemInit+0xe0>)
 800177c:	f008 fbbc 	bl	8009ef8 <HAL_TIM_PWM_Start>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <systemInit+0x5e>
 8001786:	f002 fa99 	bl	8003cbc <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 800178a:	210c      	movs	r1, #12
 800178c:	481f      	ldr	r0, [pc, #124]	; (800180c <systemInit+0xe0>)
 800178e:	f008 fbb3 	bl	8009ef8 <HAL_TIM_PWM_Start>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <systemInit+0x70>
 8001798:	f002 fa90 	bl	8003cbc <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 800179c:	2100      	movs	r1, #0
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <systemInit+0xe4>)
 80017a0:	f008 fbaa 	bl	8009ef8 <HAL_TIM_PWM_Start>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <systemInit+0x82>
 80017aa:	f002 fa87 	bl	8003cbc <Error_Handler>

	// MAX22201 sleep mode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <systemInit+0xe0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <systemInit+0xe0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <systemInit+0xe0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <systemInit+0xe0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <systemInit+0xe4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 80017de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e2:	f004 fd01 	bl	80061e8 <HAL_Delay>

	intiLcd();  	// character display initialize
 80017e6:	f7ff fc57 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize
	initINA260();	// Current sensor initialize
 80017ea:	f7ff ff4d 	bl	8001688 <initINA260>
	initBNO055();	// BNO055(IMU) initialize
 80017ee:	f7ff fe23 	bl	8001438 <initBNO055>

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <systemInit+0xe8>)
 80017f4:	f008 fac0 	bl	8009d78 <HAL_TIM_Base_Start_IT>
	// 	val = readINA260(0x01);
	// 	if (val > 32767) val = ~val+0x8000;
	// 	lcdRowPrintf(LOWROW, "   %5d",val);
	// 	HAL_Delay(500);
	// }
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000630 	.word	0x20000630
 8001800:	20000678 	.word	0x20000678
 8001804:	200002d8 	.word	0x200002d8
 8001808:	200003ac 	.word	0x200003ac
 800180c:	200005a0 	.word	0x200005a0
 8001810:	200005e8 	.word	0x200005e8
 8001814:	200006c0 	.word	0x200006c0

08001818 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 8001818:	b598      	push	{r3, r4, r7, lr}
 800181a:	af00      	add	r7, sp, #0

	
	switch (pattern) {
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <systemLoop+0x25c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b66      	cmp	r3, #102	; 0x66
 8001822:	f000 80f6 	beq.w	8001a12 <systemLoop+0x1fa>
 8001826:	2b66      	cmp	r3, #102	; 0x66
 8001828:	f300 811b 	bgt.w	8001a62 <systemLoop+0x24a>
 800182c:	2b65      	cmp	r3, #101	; 0x65
 800182e:	f000 80c9 	beq.w	80019c4 <systemLoop+0x1ac>
 8001832:	2b65      	cmp	r3, #101	; 0x65
 8001834:	f300 8115 	bgt.w	8001a62 <systemLoop+0x24a>
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <systemLoop+0x2a>
 800183c:	2b0b      	cmp	r3, #11
 800183e:	d021      	beq.n	8001884 <systemLoop+0x6c>
			// 	}
			// }
			break;
    
      	default:
        	break;
 8001840:	e10f      	b.n	8001a62 <systemLoop+0x24a>
			setup();
 8001842:	f002 fb7d 	bl	8003f40 <setup>
			if (start) {
 8001846:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <systemLoop+0x260>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 810b 	beq.w	8001a66 <systemLoop+0x24e>
				lcdRowPrintf(UPROW, "ready   ");
 8001850:	498a      	ldr	r1, [pc, #552]	; (8001a7c <systemLoop+0x264>)
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fd2e 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 8001858:	4989      	ldr	r1, [pc, #548]	; (8001a80 <systemLoop+0x268>)
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fd2a 	bl	80012b4 <lcdRowPrintf>
				HAL_Delay(5000);
 8001860:	f241 3088 	movw	r0, #5000	; 0x1388
 8001864:	f004 fcc0 	bl	80061e8 <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 8001868:	4986      	ldr	r1, [pc, #536]	; (8001a84 <systemLoop+0x26c>)
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fd22 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 8001870:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <systemLoop+0x270>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
				cntRun = 0;
 8001876:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <systemLoop+0x274>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
				pattern = 1;
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <systemLoop+0x25c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
			break;
 8001882:	e0f0      	b.n	8001a66 <systemLoop+0x24e>
			if (!modeCurve) {
 8001884:	4b82      	ldr	r3, [pc, #520]	; (8001a90 <systemLoop+0x278>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10f      	bne.n	80018ac <systemLoop+0x94>
				targetSpeed = paramSpeed[INDEX_STRAIGHT]*PALSE_MILLIMETER/10;
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <systemLoop+0x27c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe62 	bl	8000564 <__aeabi_i2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	497c      	ldr	r1, [pc, #496]	; (8001a98 <systemLoop+0x280>)
 80018a6:	e9c1 2300 	strd	r2, r3, [r1]
 80018aa:	e00e      	b.n	80018ca <systemLoop+0xb2>
				targetSpeed = paramSpeed[INDEX_CURVE]*PALSE_MILLIMETER/10;
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <systemLoop+0x27c>)
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe52 	bl	8000564 <__aeabi_i2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4974      	ldr	r1, [pc, #464]	; (8001a98 <systemLoop+0x280>)
 80018c6:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <systemLoop+0x284>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <systemLoop+0x288>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	4619      	mov	r1, r3
 80018da:	4610      	mov	r0, r2
 80018dc:	f002 faee 	bl	8003ebc <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <systemLoop+0x28c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
			if ((lSensor[0] + lSensor[1] + lSensor[10] + lSensor[11]) < 6000) {
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <systemLoop+0x290>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <systemLoop+0x290>)
 80018f2:	885b      	ldrh	r3, [r3, #2]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <systemLoop+0x290>)
 80018f8:	8a92      	ldrh	r2, [r2, #20]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a6a      	ldr	r2, [pc, #424]	; (8001aa8 <systemLoop+0x290>)
 80018fe:	8ad2      	ldrh	r2, [r2, #22]
 8001900:	4413      	add	r3, r2
 8001902:	f241 726f 	movw	r2, #5999	; 0x176f
 8001906:	4293      	cmp	r3, r2
 8001908:	dc03      	bgt.n	8001912 <systemLoop+0xfa>
				encCross2 = encTotalN;
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <systemLoop+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a67      	ldr	r2, [pc, #412]	; (8001aac <systemLoop+0x294>)
 8001910:	6013      	str	r3, [r2, #0]
			if (encTotalN - encCross2 >= encMM (200) ) {
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <systemLoop+0x270>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <systemLoop+0x294>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad4      	subs	r4, r2, r3
 800191c:	20c8      	movs	r0, #200	; 0xc8
 800191e:	f000 f945 	bl	8001bac <encMM>
 8001922:	4603      	mov	r3, r0
 8001924:	429c      	cmp	r4, r3
 8001926:	db1c      	blt.n	8001962 <systemLoop+0x14a>
				if (checkMarker() == RIGHTMARKER) {
 8001928:	f002 f9fa 	bl	8003d20 <checkMarker>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d117      	bne.n	8001962 <systemLoop+0x14a>
					if (SGmarker == 0) {
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <systemLoop+0x298>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <systemLoop+0x12a>
						SGmarker = STARTMARKER;
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <systemLoop+0x298>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e00f      	b.n	8001962 <systemLoop+0x14a>
					} else if (SGmarker == STARTMARKER && encTotalN > encMM(500)) {
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <systemLoop+0x298>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10b      	bne.n	8001962 <systemLoop+0x14a>
 800194a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800194e:	f000 f92d 	bl	8001bac <encMM>
 8001952:	4602      	mov	r2, r0
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <systemLoop+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	da02      	bge.n	8001962 <systemLoop+0x14a>
						SGmarker = GOALMARKER;
 800195c:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <systemLoop+0x298>)
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
			if (angleSensor < paramAngle[INDEX_ANGLE_CURVE] && angleSensor > -paramAngle[INDEX_ANGLE_CURVE]) {
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <systemLoop+0x29c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdfc 	bl	8000564 <__aeabi_i2d>
 800196c:	4b52      	ldr	r3, [pc, #328]	; (8001ab8 <systemLoop+0x2a0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7ff f8f1 	bl	8000b58 <__aeabi_dcmpgt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d011      	beq.n	80019a0 <systemLoop+0x188>
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <systemLoop+0x29c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	425b      	negs	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fdee 	bl	8000564 <__aeabi_i2d>
 8001988:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <systemLoop+0x2a0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7ff f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <systemLoop+0x188>
				modeCurve = 0;
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <systemLoop+0x278>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e002      	b.n	80019a6 <systemLoop+0x18e>
				modeCurve = 1;
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <systemLoop+0x278>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
			if (SGmarker == GOALMARKER) {
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <systemLoop+0x298>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d15d      	bne.n	8001a6a <systemLoop+0x252>
				goalTime = cntRun;
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <systemLoop+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a42      	ldr	r2, [pc, #264]	; (8001abc <systemLoop+0x2a4>)
 80019b4:	6013      	str	r3, [r2, #0]
				enc1 = 0;
 80019b6:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <systemLoop+0x2a8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
				pattern = 101;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <systemLoop+0x25c>)
 80019be:	2265      	movs	r2, #101	; 0x65
 80019c0:	701a      	strb	r2, [r3, #0]
			break;
 80019c2:	e052      	b.n	8001a6a <systemLoop+0x252>
			targetSpeed = paramSpeed[INDEX_STOP]*PALSE_MILLIMETER/10;
 80019c4:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <systemLoop+0x27c>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdc6 	bl	8000564 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	492e      	ldr	r1, [pc, #184]	; (8001a98 <systemLoop+0x280>)
 80019de:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <systemLoop+0x284>)
 80019e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <systemLoop+0x288>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f002 fa62 	bl	8003ebc <motorPwmOutSynth>
			if (enc1 >= encMM(500)) {
 80019f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019fc:	f000 f8d6 	bl	8001bac <encMM>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <systemLoop+0x2a8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dc31      	bgt.n	8001a6e <systemLoop+0x256>
				pattern = 102;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <systemLoop+0x25c>)
 8001a0c:	2266      	movs	r2, #102	; 0x66
 8001a0e:	701a      	strb	r2, [r3, #0]
			break;
 8001a10:	e02d      	b.n	8001a6e <systemLoop+0x256>
			targetSpeed = 0;
 8001a12:	4921      	ldr	r1, [pc, #132]	; (8001a98 <systemLoop+0x280>)
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <systemLoop+0x2ac>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d104      	bne.n	8001a34 <systemLoop+0x21c>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f002 fa45 	bl	8003ebc <motorPwmOutSynth>
 8001a32:	e006      	b.n	8001a42 <systemLoop+0x22a>
			else                  motorPwmOutSynth( 0, speedPwm );
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <systemLoop+0x288>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f002 fa3d 	bl	8003ebc <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <systemLoop+0x28c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(UPROW, "TIME    ");
 8001a4a:	491f      	ldr	r1, [pc, #124]	; (8001ac8 <systemLoop+0x2b0>)
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fc31 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "  %5ds",goalTime);
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <systemLoop+0x2a4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	491c      	ldr	r1, [pc, #112]	; (8001acc <systemLoop+0x2b4>)
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fc2a 	bl	80012b4 <lcdRowPrintf>
			break;
 8001a60:	e006      	b.n	8001a70 <systemLoop+0x258>
        	break;
 8001a62:	bf00      	nop
 8001a64:	e004      	b.n	8001a70 <systemLoop+0x258>
			break;
 8001a66:	bf00      	nop
 8001a68:	e002      	b.n	8001a70 <systemLoop+0x258>
			break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <systemLoop+0x258>
			break;
 8001a6e:	bf00      	nop
    } // switch case
}
 8001a70:	bf00      	nop
 8001a72:	bd98      	pop	{r3, r4, r7, pc}
 8001a74:	200002d4 	.word	0x200002d4
 8001a78:	200027e0 	.word	0x200027e0
 8001a7c:	08014048 	.word	0x08014048
 8001a80:	08014054 	.word	0x08014054
 8001a84:	08014060 	.word	0x08014060
 8001a88:	20000308 	.word	0x20000308
 8001a8c:	200027fc 	.word	0x200027fc
 8001a90:	200002d6 	.word	0x200002d6
 8001a94:	20000004 	.word	0x20000004
 8001a98:	20002810 	.word	0x20002810
 8001a9c:	2000039a 	.word	0x2000039a
 8001aa0:	20002808 	.word	0x20002808
 8001aa4:	200005e8 	.word	0x200005e8
 8001aa8:	20000344 	.word	0x20000344
 8001aac:	200027dc 	.word	0x200027dc
 8001ab0:	200027cc 	.word	0x200027cc
 8001ab4:	20000010 	.word	0x20000010
 8001ab8:	20000390 	.word	0x20000390
 8001abc:	200002f0 	.word	0x200002f0
 8001ac0:	2000030c 	.word	0x2000030c
 8001ac4:	200002fc 	.word	0x200002fc
 8001ac8:	0801406c 	.word	0x0801406c
 8001acc:	08014078 	.word	0x08014078

08001ad0 <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <getEncoder+0xb0>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <getEncoder+0xb4>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <getEncoder+0xb8>)
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <getEncoder+0xbc>)
 8001af0:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <getEncoder+0xc0>)
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <getEncoder+0xc4>)
 8001b00:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <getEncoder+0xbc>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <getEncoder+0xc4>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	4413      	add	r3, r2
 8001b12:	0fda      	lsrs	r2, r3, #31
 8001b14:	4413      	add	r3, r2
 8001b16:	105b      	asrs	r3, r3, #1
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <getEncoder+0xc8>)
 8001b1c:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <getEncoder+0xbc>)
 8001b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <getEncoder+0xcc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <getEncoder+0xcc>)
 8001b2e:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <getEncoder+0xc4>)
 8001b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <getEncoder+0xd0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <getEncoder+0xd0>)
 8001b40:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <getEncoder+0xc8>)
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <getEncoder+0xd4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <getEncoder+0xd4>)
 8001b52:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <getEncoder+0xc8>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <getEncoder+0xd8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <getEncoder+0xd8>)
 8001b64:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <getEncoder+0xb8>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <getEncoder+0xc0>)
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	8013      	strh	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40000400 	.word	0x40000400
 8001b88:	200002f4 	.word	0x200002f4
 8001b8c:	200002f8 	.word	0x200002f8
 8001b90:	200002f6 	.word	0x200002f6
 8001b94:	200002fa 	.word	0x200002fa
 8001b98:	200002fc 	.word	0x200002fc
 8001b9c:	20000300 	.word	0x20000300
 8001ba0:	20000304 	.word	0x20000304
 8001ba4:	20000308 	.word	0x20000308
 8001ba8:	2000030c 	.word	0x2000030c

08001bac <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bfb8      	it	lt
 8001bbe:	425b      	neglt	r3, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <SELECT+0x14>)
 8001be4:	f005 fed6 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40020400 	.word	0x40020400

08001bf0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DESELECT+0x14>)
 8001bfc:	f005 feca 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020400 	.word	0x40020400

08001c08 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8001c12:	bf00      	nop
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <SPI_TxByte+0x30>)
 8001c16:	f007 ff86 	bl	8009b26 <HAL_SPI_GetState>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d1f9      	bne.n	8001c14 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8001c20:	1df9      	adds	r1, r7, #7
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	2201      	movs	r2, #1
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <SPI_TxByte+0x30>)
 8001c2a:	f007 fc9e 	bl	800956a <HAL_SPI_Transmit>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000548 	.word	0x20000548

08001c3c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001c42:	23ff      	movs	r3, #255	; 0xff
 8001c44:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8001c4a:	bf00      	nop
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <SPI_RxByte+0x38>)
 8001c4e:	f007 ff6a 	bl	8009b26 <HAL_SPI_GetState>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d1f9      	bne.n	8001c4c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8001c58:	1dba      	adds	r2, r7, #6
 8001c5a:	1df9      	adds	r1, r7, #7
 8001c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <SPI_RxByte+0x38>)
 8001c66:	f007 fdbc 	bl	80097e2 <HAL_SPI_TransmitReceive>
  
  return data;
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000548 	.word	0x20000548

08001c78 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001c80:	f7ff ffdc 	bl	8001c3c <SPI_RxByte>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	701a      	strb	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <SD_ReadyWait+0x34>)
 8001c9c:	2232      	movs	r2, #50	; 0x32
 8001c9e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001ca0:	f7ff ffcc 	bl	8001c3c <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001ca4:	f7ff ffca 	bl	8001c3c <SPI_RxByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d004      	beq.n	8001cbc <SD_ReadyWait+0x28>
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SD_ReadyWait+0x34>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f3      	bne.n	8001ca4 <SD_ReadyWait+0x10>
  
  return res;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200027f3 	.word	0x200027f3

08001ccc <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001cd2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001cd6:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001cd8:	f7ff ff8a 	bl	8001bf0 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e005      	b.n	8001cee <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001ce2:	20ff      	movs	r0, #255	; 0xff
 8001ce4:	f7ff ff90 	bl	8001c08 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	3301      	adds	r3, #1
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	ddf6      	ble.n	8001ce2 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001cf4:	f7ff ff70 	bl	8001bd8 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001cf8:	2340      	movs	r3, #64	; 0x40
 8001cfa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001d0c:	2395      	movs	r3, #149	; 0x95
 8001d0e:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e009      	b.n	8001d2a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001d16:	1d3a      	adds	r2, r7, #4
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff72 	bl	8001c08 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	ddf2      	ble.n	8001d16 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001d30:	e002      	b.n	8001d38 <SD_PowerOn+0x6c>
  {
    Count--;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001d38:	f7ff ff80 	bl	8001c3c <SPI_RxByte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <SD_PowerOn+0x7c>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f4      	bne.n	8001d32 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001d48:	f7ff ff52 	bl	8001bf0 <DESELECT>
  SPI_TxByte(0XFF);
 8001d4c:	20ff      	movs	r0, #255	; 0xff
 8001d4e:	f7ff ff5b 	bl	8001c08 <SPI_TxByte>
  
  PowerFlag = 1;
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <SD_PowerOn+0x94>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000311 	.word	0x20000311

08001d64 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <SD_PowerOff+0x14>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000311 	.word	0x20000311

08001d7c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <SD_CheckPower+0x14>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000311 	.word	0x20000311

08001d94 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <SD_RxDataBlock+0x68>)
 8001da0:	220a      	movs	r2, #10
 8001da2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001da4:	f7ff ff4a 	bl	8001c3c <SPI_RxByte>
 8001da8:	4603      	mov	r3, r0
 8001daa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	d104      	bne.n	8001dbc <SD_RxDataBlock+0x28>
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <SD_RxDataBlock+0x68>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f3      	bne.n	8001da4 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2bfe      	cmp	r3, #254	; 0xfe
 8001dc0:	d001      	beq.n	8001dc6 <SD_RxDataBlock+0x32>
    return FALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e016      	b.n	8001df4 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff53 	bl	8001c78 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff4d 	bl	8001c78 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3b02      	subs	r3, #2
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ed      	bne.n	8001dc6 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001dea:	f7ff ff27 	bl	8001c3c <SPI_RxByte>
  SPI_RxByte();
 8001dee:	f7ff ff25 	bl	8001c3c <SPI_RxByte>
  
  return TRUE;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200027f2 	.word	0x200027f2

08001e00 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001e10:	f7ff ff40 	bl	8001c94 <SD_ReadyWait>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2bff      	cmp	r3, #255	; 0xff
 8001e18:	d001      	beq.n	8001e1e <SD_TxDataBlock+0x1e>
    return FALSE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e040      	b.n	8001ea0 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fef1 	bl	8001c08 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	2bfd      	cmp	r3, #253	; 0xfd
 8001e2a:	d031      	beq.n	8001e90 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fee5 	bl	8001c08 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fede 	bl	8001c08 <SPI_TxByte>
    } while (--wc);
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	73bb      	strb	r3, [r7, #14]
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1eb      	bne.n	8001e30 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001e58:	f7ff fef0 	bl	8001c3c <SPI_RxByte>
    SPI_RxByte();
 8001e5c:	f7ff feee 	bl	8001c3c <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001e60:	e00b      	b.n	8001e7a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001e62:	f7ff feeb 	bl	8001c3c <SPI_RxByte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d006      	beq.n	8001e82 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	3301      	adds	r3, #1
 8001e78:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d9f0      	bls.n	8001e62 <SD_TxDataBlock+0x62>
 8001e80:	e000      	b.n	8001e84 <SD_TxDataBlock+0x84>
        break;
 8001e82:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001e84:	bf00      	nop
 8001e86:	f7ff fed9 	bl	8001c3c <SPI_RxByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0fa      	beq.n	8001e86 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d101      	bne.n	8001e9e <SD_TxDataBlock+0x9e>
    return TRUE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001eb4:	f7ff feee 	bl	8001c94 <SD_ReadyWait>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2bff      	cmp	r3, #255	; 0xff
 8001ebc:	d001      	beq.n	8001ec2 <SD_SendCmd+0x1a>
    return 0xFF;
 8001ebe:	23ff      	movs	r3, #255	; 0xff
 8001ec0:	e040      	b.n	8001f44 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fe9f 	bl	8001c08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	0e1b      	lsrs	r3, r3, #24
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe99 	bl	8001c08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fe93 	bl	8001c08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fe8d 	bl	8001c08 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fe88 	bl	8001c08 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d101      	bne.n	8001f06 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001f02:	2395      	movs	r3, #149	; 0x95
 8001f04:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b48      	cmp	r3, #72	; 0x48
 8001f0a:	d101      	bne.n	8001f10 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001f0c:	2387      	movs	r3, #135	; 0x87
 8001f0e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fe78 	bl	8001c08 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b4c      	cmp	r3, #76	; 0x4c
 8001f1c:	d101      	bne.n	8001f22 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001f1e:	f7ff fe8d 	bl	8001c3c <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001f22:	230a      	movs	r3, #10
 8001f24:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001f26:	f7ff fe89 	bl	8001c3c <SPI_RxByte>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001f2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da05      	bge.n	8001f42 <SD_SendCmd+0x9a>
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	73bb      	strb	r3, [r7, #14]
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f1      	bne.n	8001f26 <SD_SendCmd+0x7e>

  return res;
 8001f42:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0d5      	b.n	800210c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001f60:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <SD_disk_initialize+0x1c8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <SD_disk_initialize+0x2a>
    return Stat;        
 8001f6e:	4b69      	ldr	r3, [pc, #420]	; (8002114 <SD_disk_initialize+0x1c8>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e0ca      	b.n	800210c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001f76:	f7ff fea9 	bl	8001ccc <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001f7a:	f7ff fe2d 	bl	8001bd8 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001f82:	2100      	movs	r1, #0
 8001f84:	2040      	movs	r0, #64	; 0x40
 8001f86:	f7ff ff8f 	bl	8001ea8 <SD_SendCmd>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 80a5 	bne.w	80020dc <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <SD_disk_initialize+0x1cc>)
 8001f94:	2264      	movs	r2, #100	; 0x64
 8001f96:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001f98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001f9c:	2048      	movs	r0, #72	; 0x48
 8001f9e:	f7ff ff83 	bl	8001ea8 <SD_SendCmd>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d158      	bne.n	800205a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e00c      	b.n	8001fc8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001fae:	7bfc      	ldrb	r4, [r7, #15]
 8001fb0:	f7ff fe44 	bl	8001c3c <SPI_RxByte>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f104 0310 	add.w	r3, r4, #16
 8001fbc:	443b      	add	r3, r7
 8001fbe:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d9ef      	bls.n	8001fae <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001fce:	7abb      	ldrb	r3, [r7, #10]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 8083 	bne.w	80020dc <SD_disk_initialize+0x190>
 8001fd6:	7afb      	ldrb	r3, [r7, #11]
 8001fd8:	2baa      	cmp	r3, #170	; 0xaa
 8001fda:	d17f      	bne.n	80020dc <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2077      	movs	r0, #119	; 0x77
 8001fe0:	f7ff ff62 	bl	8001ea8 <SD_SendCmd>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d807      	bhi.n	8001ffa <SD_disk_initialize+0xae>
 8001fea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fee:	2069      	movs	r0, #105	; 0x69
 8001ff0:	f7ff ff5a 	bl	8001ea8 <SD_SendCmd>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <SD_disk_initialize+0x1cc>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1eb      	bne.n	8001fdc <SD_disk_initialize+0x90>
 8002004:	e000      	b.n	8002008 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002006:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <SD_disk_initialize+0x1cc>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d064      	beq.n	80020dc <SD_disk_initialize+0x190>
 8002012:	2100      	movs	r1, #0
 8002014:	207a      	movs	r0, #122	; 0x7a
 8002016:	f7ff ff47 	bl	8001ea8 <SD_SendCmd>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d15d      	bne.n	80020dc <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e00c      	b.n	8002040 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002026:	7bfc      	ldrb	r4, [r7, #15]
 8002028:	f7ff fe08 	bl	8001c3c <SPI_RxByte>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	f104 0310 	add.w	r3, r4, #16
 8002034:	443b      	add	r3, r7
 8002036:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d9ef      	bls.n	8002026 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002046:	7a3b      	ldrb	r3, [r7, #8]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SD_disk_initialize+0x108>
 8002050:	2306      	movs	r3, #6
 8002052:	e000      	b.n	8002056 <SD_disk_initialize+0x10a>
 8002054:	2302      	movs	r3, #2
 8002056:	73bb      	strb	r3, [r7, #14]
 8002058:	e040      	b.n	80020dc <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800205a:	2100      	movs	r1, #0
 800205c:	2077      	movs	r0, #119	; 0x77
 800205e:	f7ff ff23 	bl	8001ea8 <SD_SendCmd>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d808      	bhi.n	800207a <SD_disk_initialize+0x12e>
 8002068:	2100      	movs	r1, #0
 800206a:	2069      	movs	r0, #105	; 0x69
 800206c:	f7ff ff1c 	bl	8001ea8 <SD_SendCmd>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d801      	bhi.n	800207a <SD_disk_initialize+0x12e>
 8002076:	2302      	movs	r3, #2
 8002078:	e000      	b.n	800207c <SD_disk_initialize+0x130>
 800207a:	2301      	movs	r3, #1
 800207c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800207e:	7bbb      	ldrb	r3, [r7, #14]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d10e      	bne.n	80020a2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002084:	2100      	movs	r1, #0
 8002086:	2077      	movs	r0, #119	; 0x77
 8002088:	f7ff ff0e 	bl	8001ea8 <SD_SendCmd>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d80e      	bhi.n	80020b0 <SD_disk_initialize+0x164>
 8002092:	2100      	movs	r1, #0
 8002094:	2069      	movs	r0, #105	; 0x69
 8002096:	f7ff ff07 	bl	8001ea8 <SD_SendCmd>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80020a0:	e00d      	b.n	80020be <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80020a2:	2100      	movs	r1, #0
 80020a4:	2041      	movs	r0, #65	; 0x41
 80020a6:	f7ff feff 	bl	8001ea8 <SD_SendCmd>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <SD_disk_initialize+0x1cc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e1      	bne.n	800207e <SD_disk_initialize+0x132>
 80020ba:	e000      	b.n	80020be <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80020bc:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <SD_disk_initialize+0x1cc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <SD_disk_initialize+0x18c>
 80020c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020cc:	2050      	movs	r0, #80	; 0x50
 80020ce:	f7ff feeb 	bl	8001ea8 <SD_SendCmd>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <SD_disk_initialize+0x1d0>)
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80020e2:	f7ff fd85 	bl	8001bf0 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80020e6:	f7ff fda9 	bl	8001c3c <SPI_RxByte>
  
  if (type) 
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <SD_disk_initialize+0x1c8>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SD_disk_initialize+0x1c8>)
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e001      	b.n	8002106 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002102:	f7ff fe2f 	bl	8001d64 <SD_PowerOff>
  }
  
  return Stat;
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <SD_disk_initialize+0x1c8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	2000001a 	.word	0x2000001a
 8002118:	200027f2 	.word	0x200027f2
 800211c:	20000310 	.word	0x20000310

08002120 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002130:	2301      	movs	r3, #1
 8002132:	e002      	b.n	800213a <SD_disk_status+0x1a>
  
  return Stat;
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SD_disk_status+0x28>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	2000001a 	.word	0x2000001a

0800214c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <SD_disk_read+0x1c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <SD_disk_read+0x20>
    return RES_PARERR;
 8002168:	2304      	movs	r3, #4
 800216a:	e051      	b.n	8002210 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <SD_disk_read+0xcc>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800217a:	2303      	movs	r3, #3
 800217c:	e048      	b.n	8002210 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800217e:	4b27      	ldr	r3, [pc, #156]	; (800221c <SD_disk_read+0xd0>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002190:	f7ff fd22 	bl	8001bd8 <SELECT>
  
  if (count == 1) 
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d111      	bne.n	80021be <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	2051      	movs	r0, #81	; 0x51
 800219e:	f7ff fe83 	bl	8001ea8 <SD_SendCmd>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d129      	bne.n	80021fc <SD_disk_read+0xb0>
 80021a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f7ff fdf1 	bl	8001d94 <SD_RxDataBlock>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d021      	beq.n	80021fc <SD_disk_read+0xb0>
      count = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	e01e      	b.n	80021fc <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	2052      	movs	r0, #82	; 0x52
 80021c2:	f7ff fe71 	bl	8001ea8 <SD_SendCmd>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d117      	bne.n	80021fc <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80021cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d0:	68b8      	ldr	r0, [r7, #8]
 80021d2:	f7ff fddf 	bl	8001d94 <SD_RxDataBlock>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021e2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ed      	bne.n	80021cc <SD_disk_read+0x80>
 80021f0:	e000      	b.n	80021f4 <SD_disk_read+0xa8>
          break;
 80021f2:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80021f4:	2100      	movs	r1, #0
 80021f6:	204c      	movs	r0, #76	; 0x4c
 80021f8:	f7ff fe56 	bl	8001ea8 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80021fc:	f7ff fcf8 	bl	8001bf0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002200:	f7ff fd1c 	bl	8001c3c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000001a 	.word	0x2000001a
 800221c:	20000310 	.word	0x20000310

08002220 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <SD_disk_write+0x1c>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <SD_disk_write+0x20>
    return RES_PARERR;
 800223c:	2304      	movs	r3, #4
 800223e:	e06b      	b.n	8002318 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <SD_disk_write+0x100>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800224e:	2303      	movs	r3, #3
 8002250:	e062      	b.n	8002318 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <SD_disk_write+0x100>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002260:	2302      	movs	r3, #2
 8002262:	e059      	b.n	8002318 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <SD_disk_write+0x104>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	025b      	lsls	r3, r3, #9
 8002274:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002276:	f7ff fcaf 	bl	8001bd8 <SELECT>
  
  if (count == 1) 
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d110      	bne.n	80022a2 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	2058      	movs	r0, #88	; 0x58
 8002284:	f7ff fe10 	bl	8001ea8 <SD_SendCmd>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d13a      	bne.n	8002304 <SD_disk_write+0xe4>
 800228e:	21fe      	movs	r1, #254	; 0xfe
 8002290:	68b8      	ldr	r0, [r7, #8]
 8002292:	f7ff fdb5 	bl	8001e00 <SD_TxDataBlock>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d033      	beq.n	8002304 <SD_disk_write+0xe4>
      count = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	e030      	b.n	8002304 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <SD_disk_write+0x104>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80022ae:	2100      	movs	r1, #0
 80022b0:	2077      	movs	r0, #119	; 0x77
 80022b2:	f7ff fdf9 	bl	8001ea8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	2057      	movs	r0, #87	; 0x57
 80022ba:	f7ff fdf5 	bl	8001ea8 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	2059      	movs	r0, #89	; 0x59
 80022c2:	f7ff fdf1 	bl	8001ea8 <SD_SendCmd>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11b      	bne.n	8002304 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80022cc:	21fc      	movs	r1, #252	; 0xfc
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f7ff fd96 	bl	8001e00 <SD_TxDataBlock>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022e0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ee      	bne.n	80022cc <SD_disk_write+0xac>
 80022ee:	e000      	b.n	80022f2 <SD_disk_write+0xd2>
          break;
 80022f0:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80022f2:	21fd      	movs	r1, #253	; 0xfd
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fd83 	bl	8001e00 <SD_TxDataBlock>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002300:	2301      	movs	r3, #1
 8002302:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002304:	f7ff fc74 	bl	8001bf0 <DESELECT>
  SPI_RxByte();
 8002308:	f7ff fc98 	bl	8001c3c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000001a 	.word	0x2000001a
 8002324:	20000310 	.word	0x20000310

08002328 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b08b      	sub	sp, #44	; 0x2c
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	603a      	str	r2, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	460b      	mov	r3, r1
 8002336:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002342:	2304      	movs	r3, #4
 8002344:	e11b      	b.n	800257e <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d129      	bne.n	80023a6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d017      	beq.n	800238a <SD_disk_ioctl+0x62>
 800235a:	2b02      	cmp	r3, #2
 800235c:	dc1f      	bgt.n	800239e <SD_disk_ioctl+0x76>
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <SD_disk_ioctl+0x40>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d00b      	beq.n	800237e <SD_disk_ioctl+0x56>
 8002366:	e01a      	b.n	800239e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002368:	f7ff fd08 	bl	8001d7c <SD_CheckPower>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002372:	f7ff fcf7 	bl	8001d64 <SD_PowerOff>
      res = RES_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800237c:	e0fd      	b.n	800257a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800237e:	f7ff fca5 	bl	8001ccc <SD_PowerOn>
      res = RES_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002388:	e0f7      	b.n	800257a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	1c5c      	adds	r4, r3, #1
 800238e:	f7ff fcf5 	bl	8001d7c <SD_CheckPower>
 8002392:	4603      	mov	r3, r0
 8002394:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800239c:	e0ed      	b.n	800257a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800239e:	2304      	movs	r3, #4
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023a4:	e0e9      	b.n	800257a <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80023a6:	4b78      	ldr	r3, [pc, #480]	; (8002588 <SD_disk_ioctl+0x260>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0e2      	b.n	800257e <SD_disk_ioctl+0x256>
    
    SELECT();
 80023b8:	f7ff fc0e 	bl	8001bd8 <SELECT>
    
    switch (ctrl) 
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	2b0d      	cmp	r3, #13
 80023c0:	f200 80cc 	bhi.w	800255c <SD_disk_ioctl+0x234>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <SD_disk_ioctl+0xa4>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	080024c7 	.word	0x080024c7
 80023d0:	08002405 	.word	0x08002405
 80023d4:	080024b7 	.word	0x080024b7
 80023d8:	0800255d 	.word	0x0800255d
 80023dc:	0800255d 	.word	0x0800255d
 80023e0:	0800255d 	.word	0x0800255d
 80023e4:	0800255d 	.word	0x0800255d
 80023e8:	0800255d 	.word	0x0800255d
 80023ec:	0800255d 	.word	0x0800255d
 80023f0:	0800255d 	.word	0x0800255d
 80023f4:	0800255d 	.word	0x0800255d
 80023f8:	080024d9 	.word	0x080024d9
 80023fc:	080024fd 	.word	0x080024fd
 8002400:	08002521 	.word	0x08002521
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002404:	2100      	movs	r1, #0
 8002406:	2049      	movs	r0, #73	; 0x49
 8002408:	f7ff fd4e 	bl	8001ea8 <SD_SendCmd>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80a8 	bne.w	8002564 <SD_disk_ioctl+0x23c>
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	2110      	movs	r1, #16
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fcba 	bl	8001d94 <SD_RxDataBlock>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 809e 	beq.w	8002564 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10e      	bne.n	8002450 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002432:	7d7b      	ldrb	r3, [r7, #21]
 8002434:	b29a      	uxth	r2, r3
 8002436:	7d3b      	ldrb	r3, [r7, #20]
 8002438:	b29b      	uxth	r3, r3
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b29b      	uxth	r3, r3
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002446:	8bfb      	ldrh	r3, [r7, #30]
 8002448:	029a      	lsls	r2, r3, #10
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e02e      	b.n	80024ae <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	b2da      	uxtb	r2, r3
 8002458:	7dbb      	ldrb	r3, [r7, #22]
 800245a:	09db      	lsrs	r3, r3, #7
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4413      	add	r3, r2
 8002460:	b2da      	uxtb	r2, r3
 8002462:	7d7b      	ldrb	r3, [r7, #21]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f003 0306 	and.w	r3, r3, #6
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4413      	add	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3302      	adds	r3, #2
 8002474:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002478:	7d3b      	ldrb	r3, [r7, #20]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	b2db      	uxtb	r3, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	b29b      	uxth	r3, r3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	b29b      	uxth	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	7cbb      	ldrb	r3, [r7, #18]
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	b29b      	uxth	r3, r3
 8002492:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002496:	b29b      	uxth	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80024a0:	8bfa      	ldrh	r2, [r7, #30]
 80024a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a6:	3b09      	subs	r3, #9
 80024a8:	409a      	lsls	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80024b4:	e056      	b.n	8002564 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024bc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024c4:	e055      	b.n	8002572 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80024c6:	f7ff fbe5 	bl	8001c94 <SD_ReadyWait>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	d14b      	bne.n	8002568 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024d6:	e047      	b.n	8002568 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024d8:	2100      	movs	r1, #0
 80024da:	2049      	movs	r0, #73	; 0x49
 80024dc:	f7ff fce4 	bl	8001ea8 <SD_SendCmd>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d142      	bne.n	800256c <SD_disk_ioctl+0x244>
 80024e6:	2110      	movs	r1, #16
 80024e8:	6a38      	ldr	r0, [r7, #32]
 80024ea:	f7ff fc53 	bl	8001d94 <SD_RxDataBlock>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03b      	beq.n	800256c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80024fa:	e037      	b.n	800256c <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80024fc:	2100      	movs	r1, #0
 80024fe:	204a      	movs	r0, #74	; 0x4a
 8002500:	f7ff fcd2 	bl	8001ea8 <SD_SendCmd>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d132      	bne.n	8002570 <SD_disk_ioctl+0x248>
 800250a:	2110      	movs	r1, #16
 800250c:	6a38      	ldr	r0, [r7, #32]
 800250e:	f7ff fc41 	bl	8001d94 <SD_RxDataBlock>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02b      	beq.n	8002570 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800251e:	e027      	b.n	8002570 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002520:	2100      	movs	r1, #0
 8002522:	207a      	movs	r0, #122	; 0x7a
 8002524:	f7ff fcc0 	bl	8001ea8 <SD_SendCmd>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002534:	e00b      	b.n	800254e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002536:	6a3c      	ldr	r4, [r7, #32]
 8002538:	1c63      	adds	r3, r4, #1
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	f7ff fb7e 	bl	8001c3c <SPI_RxByte>
 8002540:	4603      	mov	r3, r0
 8002542:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002548:	3301      	adds	r3, #1
 800254a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800254e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002552:	2b03      	cmp	r3, #3
 8002554:	d9ef      	bls.n	8002536 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 800255c:	2304      	movs	r3, #4
 800255e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002562:	e006      	b.n	8002572 <SD_disk_ioctl+0x24a>
      break;
 8002564:	bf00      	nop
 8002566:	e004      	b.n	8002572 <SD_disk_ioctl+0x24a>
      break;
 8002568:	bf00      	nop
 800256a:	e002      	b.n	8002572 <SD_disk_ioctl+0x24a>
      break;
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <SD_disk_ioctl+0x24a>
      break;
 8002570:	bf00      	nop
    }
    
    DESELECT();
 8002572:	f7ff fb3d 	bl	8001bf0 <DESELECT>
    SPI_RxByte();
 8002576:	f7ff fb61 	bl	8001c3c <SPI_RxByte>
  }
  
  return res;
 800257a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800257e:	4618      	mov	r0, r3
 8002580:	372c      	adds	r7, #44	; 0x2c
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	bf00      	nop
 8002588:	2000001a 	.word	0x2000001a

0800258c <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <ledOut+0x22>
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a6:	4817      	ldr	r0, [pc, #92]	; (8002604 <ledOut+0x78>)
 80025a8:	f005 f9f4 	bl	8007994 <HAL_GPIO_WritePin>
 80025ac:	e005      	b.n	80025ba <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80025ae:	2201      	movs	r2, #1
 80025b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <ledOut+0x78>)
 80025b6:	f005 f9ed 	bl	8007994 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <ledOut+0x44>
 80025c4:	2200      	movs	r2, #0
 80025c6:	2110      	movs	r1, #16
 80025c8:	480f      	ldr	r0, [pc, #60]	; (8002608 <ledOut+0x7c>)
 80025ca:	f005 f9e3 	bl	8007994 <HAL_GPIO_WritePin>
 80025ce:	e004      	b.n	80025da <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	2110      	movs	r1, #16
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <ledOut+0x7c>)
 80025d6:	f005 f9dd 	bl	8007994 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <ledOut+0x64>
 80025e4:	2200      	movs	r2, #0
 80025e6:	2120      	movs	r1, #32
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <ledOut+0x7c>)
 80025ea:	f005 f9d3 	bl	8007994 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80025ee:	e004      	b.n	80025fa <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	2120      	movs	r1, #32
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <ledOut+0x7c>)
 80025f6:	f005 f9cd 	bl	8007994 <HAL_GPIO_WritePin>
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400

0800260c <cmpareLSensorsList>:
// モジュール名 cmpareLSensorsList
// 処理概要  	構造体のvalueを比較する qsort関数に渡す比較用の関数（昇順）
// 引数     	n1 n2
// 戻り値    	1:n1>n2 0:n1<n2
/////////////////////////////////////////////////////////////////////
int cmpareLSensorsList(const void *n1, const void *n2) {
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    if (((lSensors *)n1)->value > ((lSensors *)n2)->value) {
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	885a      	ldrh	r2, [r3, #2]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	885b      	ldrh	r3, [r3, #2]
 800261e:	429a      	cmp	r2, r3
 8002620:	d901      	bls.n	8002626 <cmpareLSensorsList+0x1a>
        return 1;
 8002622:	2301      	movs	r3, #1
 8002624:	e009      	b.n	800263a <cmpareLSensorsList+0x2e>
    } else if (((lSensors *)n1)->value < ((lSensors *)n2)->value) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	885a      	ldrh	r2, [r3, #2]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	885b      	ldrh	r3, [r3, #2]
 800262e:	429a      	cmp	r2, r3
 8002630:	d202      	bcs.n	8002638 <cmpareLSensorsList+0x2c>
        return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	e000      	b.n	800263a <cmpareLSensorsList+0x2e>
    }
    return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for ( i=0;i<NUM_SENSORS;i++) {
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	e036      	b.n	80026c2 <getLineSensor+0x7a>
		lSensorInt[i] += analogVal[i];
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <getLineSensor+0x90>)
 8002658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	491f      	ldr	r1, [pc, #124]	; (80026dc <getLineSensor+0x94>)
 8002660:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002664:	4619      	mov	r1, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	440a      	add	r2, r1
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <getLineSensor+0x90>)
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		cntls++;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <getLineSensor+0x98>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <getLineSensor+0x98>)
 800267a:	801a      	strh	r2, [r3, #0]

		if (cntls > 16) {
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <getLineSensor+0x98>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d91b      	bls.n	80026bc <getLineSensor+0x74>
			lSensor[i] = lSensorInt[i]>>4;		// 平均値算出
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <getLineSensor+0x90>)
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	091a      	lsrs	r2, r3, #4
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	b291      	uxth	r1, r2
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <getLineSensor+0x9c>)
 8002694:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensorsList[i].value = lSensor[i];	// 構造体に格納
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	4911      	ldr	r1, [pc, #68]	; (80026e4 <getLineSensor+0x9c>)
 800269e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <getLineSensor+0xa0>)
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	460a      	mov	r2, r1
 80026aa:	805a      	strh	r2, [r3, #2]
			lSensorInt[i] = 0;					// 積算値リセット
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <getLineSensor+0x90>)
 80026b0:	2100      	movs	r1, #0
 80026b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			cntls = 0;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <getLineSensor+0x98>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	3301      	adds	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b0b      	cmp	r3, #11
 80026c6:	d9c5      	bls.n	8002654 <getLineSensor+0xc>
		}
	}
		
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000314 	.word	0x20000314
 80026dc:	200002d8 	.word	0x200002d8
 80026e0:	20000398 	.word	0x20000398
 80026e4:	20000344 	.word	0x20000344
 80026e8:	2000035c 	.word	0x2000035c
 80026ec:	00000000 	.word	0x00000000

080026f0 <getAngleSensor>:
// モジュール名 getAngleSensor
// 処理概要  	ラインセンサのAD値からステア角を算出する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getAngleSensor(void) {
 80026f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026f4:	b08c      	sub	sp, #48	; 0x30
 80026f6:	af00      	add	r7, sp, #0
	uint16_t index, sen1, sen2;
	double nsen1, nsen2, phi, dthita;

	// 昇順ソート
	qsort(lSensorsList, NUM_SENSORS, sizeof(lSensors), cmpareLSensorsList);
 80026f8:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <getAngleSensor+0x248>)
 80026fa:	2204      	movs	r2, #4
 80026fc:	210c      	movs	r1, #12
 80026fe:	488f      	ldr	r0, [pc, #572]	; (800293c <getAngleSensor+0x24c>)
 8002700:	f00d fb1c 	bl	800fd3c <qsort>
	index = lSensorsList[0].index;
 8002704:	4b8d      	ldr	r3, [pc, #564]	; (800293c <getAngleSensor+0x24c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if (index !=0 && index != NUM_SENSORS -1 ) {
 800270a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80f1 	beq.w	80028f4 <getAngleSensor+0x204>
 8002712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002714:	2b0b      	cmp	r3, #11
 8002716:	f000 80ed 	beq.w	80028f4 <getAngleSensor+0x204>
		// 白線に一番近いセンサの両隣のセンサ値を取得
		sen1 = lSensor[index-1];
 800271a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800271c:	3b01      	subs	r3, #1
 800271e:	4a88      	ldr	r2, [pc, #544]	; (8002940 <getAngleSensor+0x250>)
 8002720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002724:	843b      	strh	r3, [r7, #32]
		sen2 = lSensor[index+1];
 8002726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002728:	3301      	adds	r3, #1
 800272a:	4a85      	ldr	r2, [pc, #532]	; (8002940 <getAngleSensor+0x250>)
 800272c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002730:	83fb      	strh	r3, [r7, #30]
		// 正規化
		nsen1 = (double)sen1 / (sen1 + sen2);
 8002732:	8c3b      	ldrh	r3, [r7, #32]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd ff05 	bl	8000544 <__aeabi_ui2d>
 800273a:	4680      	mov	r8, r0
 800273c:	4689      	mov	r9, r1
 800273e:	8c3a      	ldrh	r2, [r7, #32]
 8002740:	8bfb      	ldrh	r3, [r7, #30]
 8002742:	4413      	add	r3, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff0d 	bl	8000564 <__aeabi_i2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4640      	mov	r0, r8
 8002750:	4649      	mov	r1, r9
 8002752:	f7fe f89b 	bl	800088c <__aeabi_ddiv>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		nsen2 = (double)sen2 / (sen1 + sen2);
 800275e:	8bfb      	ldrh	r3, [r7, #30]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd feef 	bl	8000544 <__aeabi_ui2d>
 8002766:	4680      	mov	r8, r0
 8002768:	4689      	mov	r9, r1
 800276a:	8c3a      	ldrh	r2, [r7, #32]
 800276c:	8bfb      	ldrh	r3, [r7, #30]
 800276e:	4413      	add	r3, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fef7 	bl	8000564 <__aeabi_i2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4640      	mov	r0, r8
 800277c:	4649      	mov	r1, r9
 800277e:	f7fe f885 	bl	800088c <__aeabi_ddiv>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (index >= NUM_SENSORS/2) phi = atan( (nsen1 - nsen2)/1 );		// 偏角φ計算
 800278a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800278c:	2b05      	cmp	r3, #5
 800278e:	d912      	bls.n	80027b6 <getAngleSensor+0xc6>
 8002790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002798:	f7fd fd96 	bl	80002c8 <__aeabi_dsub>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	ec43 2b17 	vmov	d7, r2, r3
 80027a4:	eeb0 0a47 	vmov.f32	s0, s14
 80027a8:	eef0 0a67 	vmov.f32	s1, s15
 80027ac:	f011 fa94 	bl	8013cd8 <atan>
 80027b0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80027b4:	e011      	b.n	80027da <getAngleSensor+0xea>
		else 						phi = atan( (nsen2 - nsen1)/1 );		// 偏角φ計算
 80027b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027be:	f7fd fd83 	bl	80002c8 <__aeabi_dsub>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	ec43 2b17 	vmov	d7, r2, r3
 80027ca:	eeb0 0a47 	vmov.f32	s0, s14
 80027ce:	eef0 0a67 	vmov.f32	s1, s15
 80027d2:	f011 fa81 	bl	8013cd8 <atan>
 80027d6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		dthita = (phi*THITA_SENSOR* (M_PI/180.0)/2) / (M_PI/4);	// 微小角度dθ計算
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <getAngleSensor+0x254>)
 80027e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027e4:	f7fd ff28 	bl	8000638 <__aeabi_dmul>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	a34b      	add	r3, pc, #300	; (adr r3, 8002920 <getAngleSensor+0x230>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd ff1f 	bl	8000638 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800280a:	f7fe f83f 	bl	800088c <__aeabi_ddiv>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	a344      	add	r3, pc, #272	; (adr r3, 8002928 <getAngleSensor+0x238>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fe f836 	bl	800088c <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9c7 2300 	strd	r2, r3, [r7]

		// センサ角度と微小角度を足す
		if (index >= NUM_SENSORS/2) angleSensor = ( (index-5.5)*THITA_SENSOR * (M_PI/180.0)) + dthita;
 8002828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800282a:	2b05      	cmp	r3, #5
 800282c:	d928      	bls.n	8002880 <getAngleSensor+0x190>
 800282e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe97 	bl	8000564 <__aeabi_i2d>
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <getAngleSensor+0x258>)
 800283c:	f7fd fd44 	bl	80002c8 <__aeabi_dsub>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <getAngleSensor+0x254>)
 800284e:	f7fd fef3 	bl	8000638 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	a331      	add	r3, pc, #196	; (adr r3, 8002920 <getAngleSensor+0x230>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	f7fd feea 	bl	8000638 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002870:	f7fd fd2c 	bl	80002cc <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4934      	ldr	r1, [pc, #208]	; (800294c <getAngleSensor+0x25c>)
 800287a:	e9c1 2300 	strd	r2, r3, [r1]
 800287e:	e02c      	b.n	80028da <getAngleSensor+0x1ea>
		else 						angleSensor = -( ( (5.5-index)*THITA_SENSOR * (M_PI/180.0)) + dthita );
 8002880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe6e 	bl	8000564 <__aeabi_i2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	f04f 0000 	mov.w	r0, #0
 8002890:	492d      	ldr	r1, [pc, #180]	; (8002948 <getAngleSensor+0x258>)
 8002892:	f7fd fd19 	bl	80002c8 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <getAngleSensor+0x254>)
 80028a4:	f7fd fec8 	bl	8000638 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	a31b      	add	r3, pc, #108	; (adr r3, 8002920 <getAngleSensor+0x230>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd febf 	bl	8000638 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c6:	f7fd fd01 	bl	80002cc <__adddf3>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <getAngleSensor+0x25c>)
 80028d6:	e9c3 4500 	strd	r4, r5, [r3]
		angleSensor = angleSensor*(180.0/M_PI);		// 弧度法に変換
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <getAngleSensor+0x25c>)
 80028dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e0:	a313      	add	r3, pc, #76	; (adr r3, 8002930 <getAngleSensor+0x240>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fea7 	bl	8000638 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4917      	ldr	r1, [pc, #92]	; (800294c <getAngleSensor+0x25c>)
 80028f0:	e9c1 2300 	strd	r2, r3, [r1]
		
	}

	// インデックスを初期化
	for (int i = 0; i < NUM_SENSORS; i ++) lSensorsList[i].index = i;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	e008      	b.n	800290c <getAngleSensor+0x21c>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <getAngleSensor+0x24c>)
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2b0b      	cmp	r3, #11
 8002910:	ddf3      	ble.n	80028fa <getAngleSensor+0x20a>
	
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	3730      	adds	r7, #48	; 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800291e:	bf00      	nop
 8002920:	a2529d39 	.word	0xa2529d39
 8002924:	3f91df46 	.word	0x3f91df46
 8002928:	54442d18 	.word	0x54442d18
 800292c:	3fe921fb 	.word	0x3fe921fb
 8002930:	1a63c1f8 	.word	0x1a63c1f8
 8002934:	404ca5dc 	.word	0x404ca5dc
 8002938:	0800260d 	.word	0x0800260d
 800293c:	2000035c 	.word	0x2000035c
 8002940:	20000344 	.word	0x20000344
 8002944:	40260000 	.word	0x40260000
 8002948:	40160000 	.word	0x40160000
 800294c:	20000390 	.word	0x20000390

08002950 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
	int32_t iP, iD, iI, iRet;
	int32_t Dev, Dif, kp, ki, kd;
	
	//サーボモータ用PWM値計算
	if (angleSensor > paramAngle[INDEX_ANGLE_CURVE]) {
 8002956:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <motorControlTrace+0x1c0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe02 	bl	8000564 <__aeabi_i2d>
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <motorControlTrace+0x1c4>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fe f8d9 	bl	8000b1c <__aeabi_dcmplt>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d010      	beq.n	8002992 <motorControlTrace+0x42>
		kp = kp1Curve_buff;
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <motorControlTrace+0x1c8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 8002976:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <motorControlTrace+0x1cc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 800297c:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <motorControlTrace+0x1d0>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	617b      	str	r3, [r7, #20]
		Dev = lSensor[5] - lSensor[8];
 8002982:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <motorControlTrace+0x1d4>)
 8002984:	895b      	ldrh	r3, [r3, #10]
 8002986:	461a      	mov	r2, r3
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <motorControlTrace+0x1d4>)
 800298a:	8a1b      	ldrh	r3, [r3, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	e02e      	b.n	80029f0 <motorControlTrace+0xa0>
	} else if (angleSensor < -paramAngle[INDEX_ANGLE_CURVE]) {
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <motorControlTrace+0x1c0>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	425b      	negs	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fde3 	bl	8000564 <__aeabi_i2d>
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <motorControlTrace+0x1c4>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fe f8d8 	bl	8000b58 <__aeabi_dcmpgt>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <motorControlTrace+0x80>
		kp = kp1Curve_buff;
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <motorControlTrace+0x1c8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	61fb      	str	r3, [r7, #28]
		ki = ki1Curve_buff;
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <motorControlTrace+0x1cc>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
		kd = kd1Curve_buff;
 80029ba:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <motorControlTrace+0x1d0>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
		Dev = lSensor[3] - lSensor[6];
 80029c0:	4b58      	ldr	r3, [pc, #352]	; (8002b24 <motorControlTrace+0x1d4>)
 80029c2:	88db      	ldrh	r3, [r3, #6]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <motorControlTrace+0x1d4>)
 80029c8:	899b      	ldrh	r3, [r3, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	e00f      	b.n	80029f0 <motorControlTrace+0xa0>
	} else {
		kp = kp1_buff;
 80029d0:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <motorControlTrace+0x1d8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	61fb      	str	r3, [r7, #28]
		ki = ki1_buff;
 80029d6:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <motorControlTrace+0x1dc>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	61bb      	str	r3, [r7, #24]
		kd = kd1_buff;
 80029dc:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <motorControlTrace+0x1e0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
		Dev = lSensor[4] - lSensor[7];
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <motorControlTrace+0x1d4>)
 80029e4:	891b      	ldrh	r3, [r3, #8]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <motorControlTrace+0x1d4>)
 80029ea:	89db      	ldrh	r3, [r3, #14]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	623b      	str	r3, [r7, #32]
	// kp = kp1_buff;
	// ki = ki1_buff;
	// kd = kd1_buff;
	// Dev = lSensor[4] - lSensor[7];
	// I成分積算
	Int += (double)Dev * 0.001;
 80029f0:	6a38      	ldr	r0, [r7, #32]
 80029f2:	f7fd fdb7 	bl	8000564 <__aeabi_i2d>
 80029f6:	a340      	add	r3, pc, #256	; (adr r3, 8002af8 <motorControlTrace+0x1a8>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fe1c 	bl	8000638 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fc5d 	bl	80002cc <__adddf3>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4947      	ldr	r1, [pc, #284]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a18:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a22:	a337      	add	r3, pc, #220	; (adr r3, 8002b00 <motorControlTrace+0x1b0>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fe f896 	bl	8000b58 <__aeabi_dcmpgt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <motorControlTrace+0xf0>
 8002a32:	4940      	ldr	r1, [pc, #256]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a34:	a332      	add	r3, pc, #200	; (adr r3, 8002b00 <motorControlTrace+0x1b0>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8002a3e:	e010      	b.n	8002a62 <motorControlTrace+0x112>
	else if ( Int < -10000 ) Int = -10000;
 8002a40:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a46:	a330      	add	r3, pc, #192	; (adr r3, 8002b08 <motorControlTrace+0x1b8>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fe f866 	bl	8000b1c <__aeabi_dcmplt>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <motorControlTrace+0x112>
 8002a56:	4937      	ldr	r1, [pc, #220]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a58:	a32b      	add	r3, pc, #172	; (adr r3, 8002b08 <motorControlTrace+0x1b8>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8002a62:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <motorControlTrace+0x1e8>)
 8002a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

	iP = (int32_t)kp1_buff * Dev;	// 比例
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <motorControlTrace+0x1d8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	60fb      	str	r3, [r7, #12]
	iI = (double)ki1_buff * Int;	// 積分
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <motorControlTrace+0x1dc>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd5e 	bl	8000544 <__aeabi_ui2d>
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <motorControlTrace+0x1e4>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fdd3 	bl	8000638 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f87d 	bl	8000b98 <__aeabi_d2iz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd1_buff * Dif;	// 微分
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <motorControlTrace+0x1e0>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	119b      	asrs	r3, r3, #6
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac8:	dd02      	ble.n	8002ad0 <motorControlTrace+0x180>
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002ad6:	da01      	bge.n	8002adc <motorControlTrace+0x18c>
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <motorControlTrace+0x1ec>)
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
	
	tracePwm = iRet;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <motorControlTrace+0x1f0>)
 8002ae2:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <motorControlTrace+0x1e8>)
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	f3af 8000 	nop.w
 8002af8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002afc:	3f50624d 	.word	0x3f50624d
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40c38800 	.word	0x40c38800
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	c0c38800 	.word	0xc0c38800
 8002b10:	20000010 	.word	0x20000010
 8002b14:	20000390 	.word	0x20000390
 8002b18:	2000001d 	.word	0x2000001d
 8002b1c:	200003a9 	.word	0x200003a9
 8002b20:	2000001e 	.word	0x2000001e
 8002b24:	20000344 	.word	0x20000344
 8002b28:	2000001b 	.word	0x2000001b
 8002b2c:	200003a8 	.word	0x200003a8
 8002b30:	2000001c 	.word	0x2000001c
 8002b34:	200003a0 	.word	0x200003a0
 8002b38:	2000039c 	.word	0x2000039c
 8002b3c:	fffffc18 	.word	0xfffffc18
 8002b40:	2000039a 	.word	0x2000039a

08002b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b48:	f003 fadc 	bl	8006104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4c:	f000 f824 	bl	8002b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b50:	f000 fcb2 	bl	80034b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b54:	f000 fc90 	bl	8003478 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b58:	f000 f890 	bl	8002c7c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b5c:	f000 f9da 	bl	8002f14 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002b60:	f000 fa06 	bl	8002f70 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002b64:	f000 fa70 	bl	8003048 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b68:	f000 fb26 	bl	80031b8 <MX_TIM2_Init>
  MX_UART5_Init();
 8002b6c:	f000 fc5a 	bl	8003424 <MX_UART5_Init>
  MX_TIM3_Init();
 8002b70:	f000 fb7a 	bl	8003268 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b74:	f000 fbcc 	bl	8003310 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002b78:	f000 fa30 	bl	8002fdc <MX_SPI3_Init>
  MX_TIM6_Init();
 8002b7c:	f000 fc1c 	bl	80033b8 <MX_TIM6_Init>
  MX_ADC2_Init();
 8002b80:	f000 f968 	bl	8002e54 <MX_ADC2_Init>
  MX_FATFS_Init();
 8002b84:	f008 fbc0 	bl	800b308 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8002b88:	f7fe fdd0 	bl	800172c <systemInit>
  initMicroSD();
 8002b8c:	f000 fd6c 	bl	8003668 <initMicroSD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8002b90:	f7fe fe42 	bl	8001818 <systemLoop>
 8002b94:	e7fc      	b.n	8002b90 <main+0x4c>
	...

08002b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b094      	sub	sp, #80	; 0x50
 8002b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	2234      	movs	r2, #52	; 0x34
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f00c fa0e 	bl	800efc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6413      	str	r3, [r2, #64]	; 0x40
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <SystemClock_Config+0xe0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <SystemClock_Config+0xe0>)
 8002be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <SystemClock_Config+0xe0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002c08:	2306      	movs	r3, #6
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c0c:	23b4      	movs	r3, #180	; 0xb4
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c10:	2302      	movs	r3, #2
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c14:	2302      	movs	r3, #2
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f006 f97b 	bl	8008f1c <HAL_RCC_OscConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c2c:	f001 f846 	bl	8003cbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c30:	f005 fe60 	bl	80088f4 <HAL_PWREx_EnableOverDrive>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c3a:	f001 f83f 	bl	8003cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3e:	230f      	movs	r3, #15
 8002c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c42:	2302      	movs	r3, #2
 8002c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	2105      	movs	r1, #5
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fe99 	bl	8008994 <HAL_RCC_ClockConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002c68:	f001 f828 	bl	8003cbc <Error_Handler>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3750      	adds	r7, #80	; 0x50
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000

08002c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c82:	463b      	mov	r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002c90:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <MX_ADC1_Init+0x1d4>)
 8002c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c94:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cae:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cc0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002ccc:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cda:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ce0:	485a      	ldr	r0, [pc, #360]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002ce2:	f003 faa5 	bl	8006230 <HAL_ADC_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002cec:	f000 ffe6 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002cf0:	230b      	movs	r3, #11
 8002cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4852      	ldr	r0, [pc, #328]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d02:	f003 fd69 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002d0c:	f000 ffd6 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002d10:	230c      	movs	r3, #12
 8002d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d14:	2302      	movs	r3, #2
 8002d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	484b      	ldr	r0, [pc, #300]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d1e:	f003 fd5b 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002d28:	f000 ffc8 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d2c:	230d      	movs	r3, #13
 8002d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d30:	2303      	movs	r3, #3
 8002d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d34:	463b      	mov	r3, r7
 8002d36:	4619      	mov	r1, r3
 8002d38:	4844      	ldr	r0, [pc, #272]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d3a:	f003 fd4d 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002d44:	f000 ffba 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	4619      	mov	r1, r3
 8002d54:	483d      	ldr	r0, [pc, #244]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d56:	f003 fd3f 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002d60:	f000 ffac 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d68:	2305      	movs	r3, #5
 8002d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4836      	ldr	r0, [pc, #216]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d72:	f003 fd31 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002d7c:	f000 ff9e 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d80:	2302      	movs	r3, #2
 8002d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d84:	2306      	movs	r3, #6
 8002d86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d88:	463b      	mov	r3, r7
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	482f      	ldr	r0, [pc, #188]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002d8e:	f003 fd23 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002d98:	f000 ff90 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002da0:	2307      	movs	r3, #7
 8002da2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002da4:	463b      	mov	r3, r7
 8002da6:	4619      	mov	r1, r3
 8002da8:	4828      	ldr	r0, [pc, #160]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002daa:	f003 fd15 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8002db4:	f000 ff82 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002db8:	2304      	movs	r3, #4
 8002dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4821      	ldr	r0, [pc, #132]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002dc6:	f003 fd07 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8002dd0:	f000 ff74 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002dd8:	2309      	movs	r3, #9
 8002dda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ddc:	463b      	mov	r3, r7
 8002dde:	4619      	mov	r1, r3
 8002de0:	481a      	ldr	r0, [pc, #104]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002de2:	f003 fcf9 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8002dec:	f000 ff66 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002df0:	2306      	movs	r3, #6
 8002df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002df4:	230a      	movs	r3, #10
 8002df6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df8:	463b      	mov	r3, r7
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4813      	ldr	r0, [pc, #76]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002dfe:	f003 fceb 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002e08:	f000 ff58 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002e10:	230b      	movs	r3, #11
 8002e12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e14:	463b      	mov	r3, r7
 8002e16:	4619      	mov	r1, r3
 8002e18:	480c      	ldr	r0, [pc, #48]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002e1a:	f003 fcdd 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8002e24:	f000 ff4a 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e28:	230e      	movs	r3, #14
 8002e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e30:	463b      	mov	r3, r7
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_ADC1_Init+0x1d0>)
 8002e36:	f003 fccf 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8002e40:	f000 ff3c 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200003ac 	.word	0x200003ac
 8002e50:	40012000 	.word	0x40012000

08002e54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <MX_ADC2_Init+0xb8>)
 8002e6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <MX_ADC2_Init+0xbc>)
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002eb4:	4814      	ldr	r0, [pc, #80]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002eb6:	f003 f9bb 	bl	8006230 <HAL_ADC_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002ec0:	f000 fefc 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002ed6:	f003 fc7f 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002ee0:	f000 feec 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002eec:	463b      	mov	r3, r7
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_ADC2_Init+0xb4>)
 8002ef2:	f003 fc71 	bl	80067d8 <HAL_ADC_ConfigChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002efc:	f000 fede 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200003f4 	.word	0x200003f4
 8002f0c:	40012100 	.word	0x40012100
 8002f10:	0f000001 	.word	0x0f000001

08002f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <MX_I2C1_Init+0x54>)
 8002f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <MX_I2C1_Init+0x58>)
 8002f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <MX_I2C1_Init+0x50>)
 8002f52:	f004 fd39 	bl	80079c8 <HAL_I2C_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f5c:	f000 feae 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000049c 	.word	0x2000049c
 8002f68:	40005400 	.word	0x40005400
 8002f6c:	00061a80 	.word	0x00061a80

08002f70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <MX_SPI2_Init+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f90:	2202      	movs	r2, #2
 8002f92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002fa4:	2228      	movs	r2, #40	; 0x28
 8002fa6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002fbc:	220a      	movs	r2, #10
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fc0:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <MX_SPI2_Init+0x64>)
 8002fc2:	f006 fa49 	bl	8009458 <HAL_SPI_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002fcc:	f000 fe76 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200004f0 	.word	0x200004f0
 8002fd8:	40003800 	.word	0x40003800

08002fdc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_SPI3_Init+0x64>)
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <MX_SPI3_Init+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <MX_SPI3_Init+0x64>)
 8002fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_SPI3_Init+0x64>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_SPI3_Init+0x64>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_SPI3_Init+0x64>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_SPI3_Init+0x64>)
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_SPI3_Init+0x64>)
 8003008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_SPI3_Init+0x64>)
 8003010:	2208      	movs	r2, #8
 8003012:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <MX_SPI3_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_SPI3_Init+0x64>)
 800301c:	2200      	movs	r2, #0
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <MX_SPI3_Init+0x64>)
 8003022:	2200      	movs	r2, #0
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_SPI3_Init+0x64>)
 8003028:	220a      	movs	r2, #10
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <MX_SPI3_Init+0x64>)
 800302e:	f006 fa13 	bl	8009458 <HAL_SPI_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003038:	f000 fe40 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000548 	.word	0x20000548
 8003044:	40003c00 	.word	0x40003c00

08003048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b092      	sub	sp, #72	; 0x48
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
 8003068:	615a      	str	r2, [r3, #20]
 800306a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	2220      	movs	r2, #32
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00b ffa8 	bl	800efc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003078:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <MX_TIM1_Init+0x168>)
 800307a:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <MX_TIM1_Init+0x16c>)
 800307c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003080:	220b      	movs	r2, #11
 8003082:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <MX_TIM1_Init+0x168>)
 800308c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003090:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <MX_TIM1_Init+0x168>)
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309e:	4b44      	ldr	r3, [pc, #272]	; (80031b0 <MX_TIM1_Init+0x168>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030a4:	4842      	ldr	r0, [pc, #264]	; (80031b0 <MX_TIM1_Init+0x168>)
 80030a6:	f006 fed7 	bl	8009e58 <HAL_TIM_PWM_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80030b0:	f000 fe04 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b4:	2300      	movs	r3, #0
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030c0:	4619      	mov	r1, r3
 80030c2:	483b      	ldr	r0, [pc, #236]	; (80031b0 <MX_TIM1_Init+0x168>)
 80030c4:	f007 fd7c 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80030ce:	f000 fdf5 	bl	8003cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030d2:	2360      	movs	r3, #96	; 0x60
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	4619      	mov	r1, r3
 80030f6:	482e      	ldr	r0, [pc, #184]	; (80031b0 <MX_TIM1_Init+0x168>)
 80030f8:	f007 fa02 	bl	800a500 <HAL_TIM_PWM_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003102:	f000 fddb 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310a:	2204      	movs	r2, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4828      	ldr	r0, [pc, #160]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003110:	f007 f9f6 	bl	800a500 <HAL_TIM_PWM_ConfigChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800311a:	f000 fdcf 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800311e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003122:	2208      	movs	r2, #8
 8003124:	4619      	mov	r1, r3
 8003126:	4822      	ldr	r0, [pc, #136]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003128:	f007 f9ea 	bl	800a500 <HAL_TIM_PWM_ConfigChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003132:	f000 fdc3 	bl	8003cbc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <MX_TIM1_Init+0x168>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0208 	bic.w	r2, r2, #8
 8003144:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314a:	220c      	movs	r2, #12
 800314c:	4619      	mov	r1, r3
 800314e:	4818      	ldr	r0, [pc, #96]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003150:	f007 f9d6 	bl	800a500 <HAL_TIM_PWM_ConfigChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800315a:	f000 fdaf 	bl	8003cbc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003186:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4807      	ldr	r0, [pc, #28]	; (80031b0 <MX_TIM1_Init+0x168>)
 8003192:	f007 fd91 	bl	800acb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800319c:	f000 fd8e 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031a0:	4803      	ldr	r0, [pc, #12]	; (80031b0 <MX_TIM1_Init+0x168>)
 80031a2:	f002 fa07 	bl	80055b4 <HAL_TIM_MspPostInit>

}
 80031a6:	bf00      	nop
 80031a8:	3748      	adds	r7, #72	; 0x48
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200005a0 	.word	0x200005a0
 80031b4:	40010000 	.word	0x40010000

080031b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031be:	f107 0320 	add.w	r3, r7, #32
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	615a      	str	r2, [r3, #20]
 80031d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <MX_TIM2_Init+0xac>)
 80031dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <MX_TIM2_Init+0xac>)
 80031e4:	220b      	movs	r2, #11
 80031e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <MX_TIM2_Init+0xac>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 335;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <MX_TIM2_Init+0xac>)
 80031f0:	f240 124f 	movw	r2, #335	; 0x14f
 80031f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f6:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <MX_TIM2_Init+0xac>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <MX_TIM2_Init+0xac>)
 80031fe:	2200      	movs	r2, #0
 8003200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003202:	4818      	ldr	r0, [pc, #96]	; (8003264 <MX_TIM2_Init+0xac>)
 8003204:	f006 fe28 	bl	8009e58 <HAL_TIM_PWM_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800320e:	f000 fd55 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003212:	2320      	movs	r3, #32
 8003214:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800321a:	f107 0320 	add.w	r3, r7, #32
 800321e:	4619      	mov	r1, r3
 8003220:	4810      	ldr	r0, [pc, #64]	; (8003264 <MX_TIM2_Init+0xac>)
 8003222:	f007 fccd 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800322c:	f000 fd46 	bl	8003cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003230:	2360      	movs	r3, #96	; 0x60
 8003232:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2200      	movs	r2, #0
 8003244:	4619      	mov	r1, r3
 8003246:	4807      	ldr	r0, [pc, #28]	; (8003264 <MX_TIM2_Init+0xac>)
 8003248:	f007 f95a 	bl	800a500 <HAL_TIM_PWM_ConfigChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003252:	f000 fd33 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003256:	4803      	ldr	r0, [pc, #12]	; (8003264 <MX_TIM2_Init+0xac>)
 8003258:	f002 f9ac 	bl	80055b4 <HAL_TIM_MspPostInit>

}
 800325c:	bf00      	nop
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200005e8 	.word	0x200005e8

08003268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f00b fea6 	bl	800efc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <MX_TIM3_Init+0xa4>)
 8003288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <MX_TIM3_Init+0xa0>)
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032aa:	2303      	movs	r3, #3
 80032ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032b2:	2301      	movs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80032be:	2302      	movs	r3, #2
 80032c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032c2:	2301      	movs	r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	4619      	mov	r1, r3
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032d6:	f006 fed7 	bl	800a088 <HAL_TIM_Encoder_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032e0:	f000 fcec 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032f2:	f007 fc65 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80032fc:	f000 fcde 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	3730      	adds	r7, #48	; 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000630 	.word	0x20000630
 800330c:	40000400 	.word	0x40000400

08003310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f00b fe52 	bl	800efc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <MX_TIM4_Init+0xa0>)
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <MX_TIM4_Init+0xa4>)
 8003330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <MX_TIM4_Init+0xa0>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <MX_TIM4_Init+0xa0>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <MX_TIM4_Init+0xa0>)
 8003340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <MX_TIM4_Init+0xa0>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <MX_TIM4_Init+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003352:	2303      	movs	r3, #3
 8003354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800335a:	2301      	movs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800336a:	2301      	movs	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	4619      	mov	r1, r3
 800337c:	480c      	ldr	r0, [pc, #48]	; (80033b0 <MX_TIM4_Init+0xa0>)
 800337e:	f006 fe83 	bl	800a088 <HAL_TIM_Encoder_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003388:	f000 fc98 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_TIM4_Init+0xa0>)
 800339a:	f007 fc11 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80033a4:	f000 fc8a 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000678 	.word	0x20000678
 80033b4:	40000800 	.word	0x40000800

080033b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <MX_TIM6_Init+0x64>)
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <MX_TIM6_Init+0x68>)
 80033ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <MX_TIM6_Init+0x64>)
 80033ce:	220b      	movs	r2, #11
 80033d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <MX_TIM6_Init+0x64>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <MX_TIM6_Init+0x64>)
 80033da:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80033de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_TIM6_Init+0x64>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033e6:	480d      	ldr	r0, [pc, #52]	; (800341c <MX_TIM6_Init+0x64>)
 80033e8:	f006 fc76 	bl	8009cd8 <HAL_TIM_Base_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80033f2:	f000 fc63 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033fe:	463b      	mov	r3, r7
 8003400:	4619      	mov	r1, r3
 8003402:	4806      	ldr	r0, [pc, #24]	; (800341c <MX_TIM6_Init+0x64>)
 8003404:	f007 fbdc 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800340e:	f000 fc55 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200006c0 	.word	0x200006c0
 8003420:	40001000 	.word	0x40001000

08003424 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <MX_UART5_Init+0x4c>)
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <MX_UART5_Init+0x50>)
 800342c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <MX_UART5_Init+0x4c>)
 8003430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003434:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <MX_UART5_Init+0x4c>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <MX_UART5_Init+0x4c>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <MX_UART5_Init+0x4c>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <MX_UART5_Init+0x4c>)
 800344a:	220c      	movs	r2, #12
 800344c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <MX_UART5_Init+0x4c>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <MX_UART5_Init+0x4c>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <MX_UART5_Init+0x4c>)
 800345c:	f007 fc92 	bl	800ad84 <HAL_UART_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003466:	f000 fc29 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000708 	.word	0x20000708
 8003474:	40005000 	.word	0x40005000

08003478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_DMA_Init+0x3c>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	2038      	movs	r0, #56	; 0x38
 80034a0:	f003 fd25 	bl	8006eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034a4:	2038      	movs	r0, #56	; 0x38
 80034a6:	f003 fd3e 	bl	8006f26 <HAL_NVIC_EnableIRQ>

}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b59      	ldr	r3, [pc, #356]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b55      	ldr	r3, [pc, #340]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a54      	ldr	r2, [pc, #336]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b52      	ldr	r3, [pc, #328]	; (8003644 <MX_GPIO_Init+0x18c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <MX_GPIO_Init+0x18c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a4d      	ldr	r2, [pc, #308]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a46      	ldr	r2, [pc, #280]	; (8003644 <MX_GPIO_Init+0x18c>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b44      	ldr	r3, [pc, #272]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b40      	ldr	r3, [pc, #256]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a3f      	ldr	r2, [pc, #252]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <MX_GPIO_Init+0x18c>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003560:	4839      	ldr	r0, [pc, #228]	; (8003648 <MX_GPIO_Init+0x190>)
 8003562:	f004 fa17 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 8003566:	2201      	movs	r2, #1
 8003568:	f243 0130 	movw	r1, #12336	; 0x3030
 800356c:	4837      	ldr	r0, [pc, #220]	; (800364c <MX_GPIO_Init+0x194>)
 800356e:	f004 fa11 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003572:	2201      	movs	r2, #1
 8003574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003578:	4835      	ldr	r0, [pc, #212]	; (8003650 <MX_GPIO_Init+0x198>)
 800357a:	f004 fa0b 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 800357e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	482d      	ldr	r0, [pc, #180]	; (8003648 <MX_GPIO_Init+0x190>)
 8003594:	f004 f852 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 8003598:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800359c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	4825      	ldr	r0, [pc, #148]	; (8003648 <MX_GPIO_Init+0x190>)
 80035b2:	f004 f843 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80035b6:	2302      	movs	r3, #2
 80035b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	4619      	mov	r1, r3
 80035c8:	4820      	ldr	r0, [pc, #128]	; (800364c <MX_GPIO_Init+0x194>)
 80035ca:	f004 f837 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 80035ce:	2304      	movs	r3, #4
 80035d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	481a      	ldr	r0, [pc, #104]	; (800364c <MX_GPIO_Init+0x194>)
 80035e2:	f004 f82b 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 80035e6:	f243 0330 	movw	r3, #12336	; 0x3030
 80035ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	2300      	movs	r3, #0
 80035f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4619      	mov	r1, r3
 80035fe:	4813      	ldr	r0, [pc, #76]	; (800364c <MX_GPIO_Init+0x194>)
 8003600:	f004 f81c 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 8003604:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <MX_GPIO_Init+0x190>)
 800361a:	f004 f80f 	bl	800763c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800361e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003624:	2301      	movs	r3, #1
 8003626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4806      	ldr	r0, [pc, #24]	; (8003650 <MX_GPIO_Init+0x198>)
 8003638:	f004 f800 	bl	800763c <HAL_GPIO_Init>

}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	40020800 	.word	0x40020800
 800364c:	40020400 	.word	0x40020400
 8003650:	40020000 	.word	0x40020000

08003654 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  getLineSensor();
 800365c:	f7fe fff4 	bl	8002648 <getLineSensor>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <initMicroSD>:

void initMicroSD(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  fresult = f_mount(&fs, "", 0);    // SDcard mount
 800366c:	2200      	movs	r2, #0
 800366e:	4921      	ldr	r1, [pc, #132]	; (80036f4 <initMicroSD+0x8c>)
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <initMicroSD+0x90>)
 8003672:	f00a faeb 	bl	800dc4c <f_mount>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <initMicroSD+0x94>)
 800367c:	701a      	strb	r2, [r3, #0]
	// if (fresult != FR_OK) printf ("error in mounting SD CARD...\r\n");
	// else printf("SD CARD mounted successfully...\r\n");

	f_getfree("", &fre_clust, &pfs); // cluster size
 800367e:	4a20      	ldr	r2, [pc, #128]	; (8003700 <initMicroSD+0x98>)
 8003680:	4920      	ldr	r1, [pc, #128]	; (8003704 <initMicroSD+0x9c>)
 8003682:	481c      	ldr	r0, [pc, #112]	; (80036f4 <initMicroSD+0x8c>)
 8003684:	f00b f806 	bl	800e694 <f_getfree>
	total = (uint32_t)((pfs -> n_fatent - 2) * pfs -> csize * 0.5); // total capacity
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <initMicroSD+0x98>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	3b02      	subs	r3, #2
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <initMicroSD+0x98>)
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	8952      	ldrh	r2, [r2, #10]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff52 	bl	8000544 <__aeabi_ui2d>
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <initMicroSD+0xa0>)
 80036a6:	f7fc ffc7 	bl	8000638 <__aeabi_dmul>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd fa99 	bl	8000be8 <__aeabi_d2uiz>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <initMicroSD+0xa4>)
 80036ba:	6013      	str	r3, [r2, #0]
	// printf("SD_SIZE: \t%lu\r\n", total);

	free_space = (uint32_t)(fre_clust * pfs->csize*0.5);  // empty capacity
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <initMicroSD+0x98>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	895b      	ldrh	r3, [r3, #10]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <initMicroSD+0x9c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc ff39 	bl	8000544 <__aeabi_ui2d>
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <initMicroSD+0xa0>)
 80036d8:	f7fc ffae 	bl	8000638 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa80 	bl	8000be8 <__aeabi_d2uiz>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <initMicroSD+0xa8>)
 80036ec:	6013      	str	r3, [r2, #0]
	// printf("SD free space: \t%lu\r\n", free_space);

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08014080 	.word	0x08014080
 80036f8:	2000074c 	.word	0x2000074c
 80036fc:	200027b8 	.word	0x200027b8
 8003700:	200027bc 	.word	0x200027bc
 8003704:	200027c0 	.word	0x200027c0
 8003708:	3fe00000 	.word	0x3fe00000
 800370c:	200027c4 	.word	0x200027c4
 8003710:	200027c8 	.word	0x200027c8

08003714 <initLog>:

void initLog(void) {
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800371a:	af00      	add	r7, sp, #0
  DIR dir;                    // Directory
  FILINFO fno;                // File Info
  uint8_t fileName[10], columnTitle[256] = "";
 800371c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003720:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	3304      	adds	r3, #4
 800372a:	22fc      	movs	r2, #252	; 0xfc
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f00b fc4a 	bl	800efc8 <memset>
  uint8_t *tp;
  uint16_t fileNumber = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e

  f_opendir(&dir,"/");  // directory open
 800373a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800373e:	4920      	ldr	r1, [pc, #128]	; (80037c0 <initLog+0xac>)
 8003740:	4618      	mov	r0, r3
 8003742:	f00a fed1 	bl	800e4e8 <f_opendir>
  do {
    f_readdir(&dir,&fno);
 8003746:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800374a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f00a ff62 	bl	800e61a <f_readdir>
    if(fno.fname[0] != 0) {           // file exit
 8003756:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800375a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800375e:	7d9b      	ldrb	r3, [r3, #22]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d018      	beq.n	8003796 <initLog+0x82>
      tp = strtok(fno.fname,".");     // delete file extension
 8003764:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003768:	3316      	adds	r3, #22
 800376a:	4916      	ldr	r1, [pc, #88]	; (80037c4 <initLog+0xb0>)
 800376c:	4618      	mov	r0, r3
 800376e:	f00d fa83 	bl	8010c78 <strtok>
 8003772:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      if ( atoi(tp) > fileNumber ) {  // compare number
 8003776:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 800377a:	f00b fbf7 	bl	800ef6c <atoi>
 800377e:	4602      	mov	r2, r0
 8003780:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8003784:	429a      	cmp	r2, r3
 8003786:	dd06      	ble.n	8003796 <initLog+0x82>
        fileNumber = atoi(tp);        // transrate to number
 8003788:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 800378c:	f00b fbee 	bl	800ef6c <atoi>
 8003790:	4603      	mov	r3, r0
 8003792:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
      }
    }
  } while(fno.fname[0] != 0);
 8003796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800379a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800379e:	7d9b      	ldrb	r3, [r3, #22]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1d0      	bne.n	8003746 <initLog+0x32>
  f_closedir(&dir);     // directory close
 80037a4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80037a8:	4618      	mov	r0, r3
 80037aa:	f00a ff10 	bl	800e5ce <f_closedir>
  if (fileNumber == 0) {
 80037ae:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <initLog+0xb4>
    fileNumber = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
 80037bc:	e009      	b.n	80037d2 <initLog+0xbe>
 80037be:	bf00      	nop
 80037c0:	08014084 	.word	0x08014084
 80037c4:	08014088 	.word	0x08014088
  } else {
    fileNumber++;         // index pulus
 80037c8:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 80037cc:	3301      	adds	r3, #1
 80037ce:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
  }

  sprintf(fileName,"%d",fileNumber);  // transrate to str
 80037d2:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 80037d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037da:	49cb      	ldr	r1, [pc, #812]	; (8003b08 <initLog+0x3f4>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f00c fc03 	bl	800ffe8 <siprintf>
  strcat(fileName, ".csv");           // file name create
 80037e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fd12 	bl	8000210 <strlen>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037f4:	4413      	add	r3, r2
 80037f6:	4ac5      	ldr	r2, [pc, #788]	; (8003b0c <initLog+0x3f8>)
 80037f8:	6810      	ldr	r0, [r2, #0]
 80037fa:	6018      	str	r0, [r3, #0]
 80037fc:	7912      	ldrb	r2, [r2, #4]
 80037fe:	711a      	strb	r2, [r3, #4]
  fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);  // file create
 8003800:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003804:	2212      	movs	r2, #18
 8003806:	4619      	mov	r1, r3
 8003808:	48c1      	ldr	r0, [pc, #772]	; (8003b10 <initLog+0x3fc>)
 800380a:	f00a fa65 	bl	800dcd8 <f_open>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	4bc0      	ldr	r3, [pc, #768]	; (8003b14 <initLog+0x400>)
 8003814:	701a      	strb	r2, [r3, #0]

  strcat(columnTitle,"cntlog,");
 8003816:	463b      	mov	r3, r7
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fcf9 	bl	8000210 <strlen>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	463b      	mov	r3, r7
 8003824:	4413      	add	r3, r2
 8003826:	49bc      	ldr	r1, [pc, #752]	; (8003b18 <initLog+0x404>)
 8003828:	461a      	mov	r2, r3
 800382a:	460b      	mov	r3, r1
 800382c:	cb03      	ldmia	r3!, {r0, r1}
 800382e:	6010      	str	r0, [r2, #0]
 8003830:	6051      	str	r1, [r2, #4]
  strcat(columnTitle,"MarkerSensor,");
 8003832:	463b      	mov	r3, r7
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fceb 	bl	8000210 <strlen>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	463b      	mov	r3, r7
 8003840:	4413      	add	r3, r2
 8003842:	4ab6      	ldr	r2, [pc, #728]	; (8003b1c <initLog+0x408>)
 8003844:	461c      	mov	r4, r3
 8003846:	4613      	mov	r3, r2
 8003848:	cb07      	ldmia	r3!, {r0, r1, r2}
 800384a:	6020      	str	r0, [r4, #0]
 800384c:	6061      	str	r1, [r4, #4]
 800384e:	60a2      	str	r2, [r4, #8]
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	81a3      	strh	r3, [r4, #12]
  strcat(columnTitle,"encTotalR,");
 8003854:	463b      	mov	r3, r7
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fcda 	bl	8000210 <strlen>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	463b      	mov	r3, r7
 8003862:	4413      	add	r3, r2
 8003864:	49ae      	ldr	r1, [pc, #696]	; (8003b20 <initLog+0x40c>)
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	cb03      	ldmia	r3!, {r0, r1}
 800386c:	6010      	str	r0, [r2, #0]
 800386e:	6051      	str	r1, [r2, #4]
 8003870:	8819      	ldrh	r1, [r3, #0]
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	8111      	strh	r1, [r2, #8]
 8003876:	7293      	strb	r3, [r2, #10]
  strcat(columnTitle,"encTotalL,");
 8003878:	463b      	mov	r3, r7
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fcc8 	bl	8000210 <strlen>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	463b      	mov	r3, r7
 8003886:	4413      	add	r3, r2
 8003888:	49a6      	ldr	r1, [pc, #664]	; (8003b24 <initLog+0x410>)
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	cb03      	ldmia	r3!, {r0, r1}
 8003890:	6010      	str	r0, [r2, #0]
 8003892:	6051      	str	r1, [r2, #4]
 8003894:	8819      	ldrh	r1, [r3, #0]
 8003896:	789b      	ldrb	r3, [r3, #2]
 8003898:	8111      	strh	r1, [r2, #8]
 800389a:	7293      	strb	r3, [r2, #10]
  strcat(columnTitle,"encTotalN,");
 800389c:	463b      	mov	r3, r7
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc fcb6 	bl	8000210 <strlen>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	463b      	mov	r3, r7
 80038aa:	4413      	add	r3, r2
 80038ac:	499e      	ldr	r1, [pc, #632]	; (8003b28 <initLog+0x414>)
 80038ae:	461a      	mov	r2, r3
 80038b0:	460b      	mov	r3, r1
 80038b2:	cb03      	ldmia	r3!, {r0, r1}
 80038b4:	6010      	str	r0, [r2, #0]
 80038b6:	6051      	str	r1, [r2, #4]
 80038b8:	8819      	ldrh	r1, [r3, #0]
 80038ba:	789b      	ldrb	r3, [r3, #2]
 80038bc:	8111      	strh	r1, [r2, #8]
 80038be:	7293      	strb	r3, [r2, #10]
  strcat(columnTitle,"lSensor[0],");
 80038c0:	463b      	mov	r3, r7
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fca4 	bl	8000210 <strlen>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	463b      	mov	r3, r7
 80038ce:	4413      	add	r3, r2
 80038d0:	4a96      	ldr	r2, [pc, #600]	; (8003b2c <initLog+0x418>)
 80038d2:	461c      	mov	r4, r3
 80038d4:	4613      	mov	r3, r2
 80038d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038d8:	6020      	str	r0, [r4, #0]
 80038da:	6061      	str	r1, [r4, #4]
 80038dc:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[1],");
 80038de:	463b      	mov	r3, r7
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fc95 	bl	8000210 <strlen>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	463b      	mov	r3, r7
 80038ec:	4413      	add	r3, r2
 80038ee:	4a90      	ldr	r2, [pc, #576]	; (8003b30 <initLog+0x41c>)
 80038f0:	461c      	mov	r4, r3
 80038f2:	4613      	mov	r3, r2
 80038f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038f6:	6020      	str	r0, [r4, #0]
 80038f8:	6061      	str	r1, [r4, #4]
 80038fa:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[2],");
 80038fc:	463b      	mov	r3, r7
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fc86 	bl	8000210 <strlen>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	463b      	mov	r3, r7
 800390a:	4413      	add	r3, r2
 800390c:	4a89      	ldr	r2, [pc, #548]	; (8003b34 <initLog+0x420>)
 800390e:	461c      	mov	r4, r3
 8003910:	4613      	mov	r3, r2
 8003912:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003914:	6020      	str	r0, [r4, #0]
 8003916:	6061      	str	r1, [r4, #4]
 8003918:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[3],");
 800391a:	463b      	mov	r3, r7
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fc77 	bl	8000210 <strlen>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	463b      	mov	r3, r7
 8003928:	4413      	add	r3, r2
 800392a:	4a83      	ldr	r2, [pc, #524]	; (8003b38 <initLog+0x424>)
 800392c:	461c      	mov	r4, r3
 800392e:	4613      	mov	r3, r2
 8003930:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003932:	6020      	str	r0, [r4, #0]
 8003934:	6061      	str	r1, [r4, #4]
 8003936:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[4],");
 8003938:	463b      	mov	r3, r7
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fc68 	bl	8000210 <strlen>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	463b      	mov	r3, r7
 8003946:	4413      	add	r3, r2
 8003948:	4a7c      	ldr	r2, [pc, #496]	; (8003b3c <initLog+0x428>)
 800394a:	461c      	mov	r4, r3
 800394c:	4613      	mov	r3, r2
 800394e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003950:	6020      	str	r0, [r4, #0]
 8003952:	6061      	str	r1, [r4, #4]
 8003954:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[5],");
 8003956:	463b      	mov	r3, r7
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fc59 	bl	8000210 <strlen>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	463b      	mov	r3, r7
 8003964:	4413      	add	r3, r2
 8003966:	4a76      	ldr	r2, [pc, #472]	; (8003b40 <initLog+0x42c>)
 8003968:	461c      	mov	r4, r3
 800396a:	4613      	mov	r3, r2
 800396c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800396e:	6020      	str	r0, [r4, #0]
 8003970:	6061      	str	r1, [r4, #4]
 8003972:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[6],");
 8003974:	463b      	mov	r3, r7
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fc4a 	bl	8000210 <strlen>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	463b      	mov	r3, r7
 8003982:	4413      	add	r3, r2
 8003984:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <initLog+0x430>)
 8003986:	461c      	mov	r4, r3
 8003988:	4613      	mov	r3, r2
 800398a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800398c:	6020      	str	r0, [r4, #0]
 800398e:	6061      	str	r1, [r4, #4]
 8003990:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[7],");
 8003992:	463b      	mov	r3, r7
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fc3b 	bl	8000210 <strlen>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	463b      	mov	r3, r7
 80039a0:	4413      	add	r3, r2
 80039a2:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <initLog+0x434>)
 80039a4:	461c      	mov	r4, r3
 80039a6:	4613      	mov	r3, r2
 80039a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039aa:	6020      	str	r0, [r4, #0]
 80039ac:	6061      	str	r1, [r4, #4]
 80039ae:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[8],");
 80039b0:	463b      	mov	r3, r7
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fc2c 	bl	8000210 <strlen>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	463b      	mov	r3, r7
 80039be:	4413      	add	r3, r2
 80039c0:	4a62      	ldr	r2, [pc, #392]	; (8003b4c <initLog+0x438>)
 80039c2:	461c      	mov	r4, r3
 80039c4:	4613      	mov	r3, r2
 80039c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039c8:	6020      	str	r0, [r4, #0]
 80039ca:	6061      	str	r1, [r4, #4]
 80039cc:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[9],");
 80039ce:	463b      	mov	r3, r7
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fc1d 	bl	8000210 <strlen>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	463b      	mov	r3, r7
 80039dc:	4413      	add	r3, r2
 80039de:	4a5c      	ldr	r2, [pc, #368]	; (8003b50 <initLog+0x43c>)
 80039e0:	461c      	mov	r4, r3
 80039e2:	4613      	mov	r3, r2
 80039e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039e6:	6020      	str	r0, [r4, #0]
 80039e8:	6061      	str	r1, [r4, #4]
 80039ea:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"lSensor[10],");
 80039ec:	463b      	mov	r3, r7
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fc0e 	bl	8000210 <strlen>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	463b      	mov	r3, r7
 80039fa:	4413      	add	r3, r2
 80039fc:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <initLog+0x440>)
 80039fe:	461c      	mov	r4, r3
 8003a00:	4613      	mov	r3, r2
 8003a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a04:	6020      	str	r0, [r4, #0]
 8003a06:	6061      	str	r1, [r4, #4]
 8003a08:	60a2      	str	r2, [r4, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	7323      	strb	r3, [r4, #12]
  strcat(columnTitle,"lSensor[11],");
 8003a0e:	463b      	mov	r3, r7
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fbfd 	bl	8000210 <strlen>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <initLog+0x444>)
 8003a20:	461c      	mov	r4, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a26:	6020      	str	r0, [r4, #0]
 8003a28:	6061      	str	r1, [r4, #4]
 8003a2a:	60a2      	str	r2, [r4, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	7323      	strb	r3, [r4, #12]
  strcat(columnTitle,"gyroVal[X],");
 8003a30:	463b      	mov	r3, r7
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fbec 	bl	8000210 <strlen>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a46      	ldr	r2, [pc, #280]	; (8003b5c <initLog+0x448>)
 8003a42:	461c      	mov	r4, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a48:	6020      	str	r0, [r4, #0]
 8003a4a:	6061      	str	r1, [r4, #4]
 8003a4c:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"gyroVal[Y],");
 8003a4e:	463b      	mov	r3, r7
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fbdd 	bl	8000210 <strlen>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <initLog+0x44c>)
 8003a60:	461c      	mov	r4, r3
 8003a62:	4613      	mov	r3, r2
 8003a64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	6061      	str	r1, [r4, #4]
 8003a6a:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"gyroVal[Z],");
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fbce 	bl	8000210 <strlen>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <initLog+0x450>)
 8003a7e:	461c      	mov	r4, r3
 8003a80:	4613      	mov	r3, r2
 8003a82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a84:	6020      	str	r0, [r4, #0]
 8003a86:	6061      	str	r1, [r4, #4]
 8003a88:	60a2      	str	r2, [r4, #8]
  strcat(columnTitle,"rawCurrentR,");
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fbbf 	bl	8000210 <strlen>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	463b      	mov	r3, r7
 8003a98:	4413      	add	r3, r2
 8003a9a:	4a33      	ldr	r2, [pc, #204]	; (8003b68 <initLog+0x454>)
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003aa2:	6020      	str	r0, [r4, #0]
 8003aa4:	6061      	str	r1, [r4, #4]
 8003aa6:	60a2      	str	r2, [r4, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	7323      	strb	r3, [r4, #12]
  strcat(columnTitle,"rawCurrentL,");
 8003aac:	463b      	mov	r3, r7
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fbae 	bl	8000210 <strlen>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	463b      	mov	r3, r7
 8003aba:	4413      	add	r3, r2
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <initLog+0x458>)
 8003abe:	461c      	mov	r4, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ac4:	6020      	str	r0, [r4, #0]
 8003ac6:	6061      	str	r1, [r4, #4]
 8003ac8:	60a2      	str	r2, [r4, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	7323      	strb	r3, [r4, #12]
  strcat(columnTitle,"\n");
 8003ace:	463b      	mov	r3, r7
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fb9d 	bl	8000210 <strlen>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	463b      	mov	r3, r7
 8003adc:	4413      	add	r3, r2
 8003ade:	4924      	ldr	r1, [pc, #144]	; (8003b70 <initLog+0x45c>)
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	8013      	strh	r3, [r2, #0]
  f_printf(&fil, columnTitle);
 8003ae8:	463b      	mov	r3, r7
 8003aea:	4619      	mov	r1, r3
 8003aec:	4808      	ldr	r0, [pc, #32]	; (8003b10 <initLog+0x3fc>)
 8003aee:	f00a fefd 	bl	800e8ec <f_printf>

  modeLOG = 1;    // log start
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <initLog+0x460>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
  cntLog = 0;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <initLog+0x464>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	bf00      	nop
 8003b00:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	0801408c 	.word	0x0801408c
 8003b0c:	08014090 	.word	0x08014090
 8003b10:	20001788 	.word	0x20001788
 8003b14:	200027b8 	.word	0x200027b8
 8003b18:	08014098 	.word	0x08014098
 8003b1c:	080140a0 	.word	0x080140a0
 8003b20:	080140b0 	.word	0x080140b0
 8003b24:	080140bc 	.word	0x080140bc
 8003b28:	080140c8 	.word	0x080140c8
 8003b2c:	080140d4 	.word	0x080140d4
 8003b30:	080140e0 	.word	0x080140e0
 8003b34:	080140ec 	.word	0x080140ec
 8003b38:	080140f8 	.word	0x080140f8
 8003b3c:	08014104 	.word	0x08014104
 8003b40:	08014110 	.word	0x08014110
 8003b44:	0801411c 	.word	0x0801411c
 8003b48:	08014128 	.word	0x08014128
 8003b4c:	08014134 	.word	0x08014134
 8003b50:	08014140 	.word	0x08014140
 8003b54:	0801414c 	.word	0x0801414c
 8003b58:	0801415c 	.word	0x0801415c
 8003b5c:	0801416c 	.word	0x0801416c
 8003b60:	08014178 	.word	0x08014178
 8003b64:	08014184 	.word	0x08014184
 8003b68:	08014190 	.word	0x08014190
 8003b6c:	080141a0 	.word	0x080141a0
 8003b70:	080141b0 	.word	0x080141b0
 8003b74:	200002d5 	.word	0x200002d5
 8003b78:	20002804 	.word	0x20002804

08003b7c <writeLog>:

void writeLog(void) {
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b0a3      	sub	sp, #140	; 0x8c
 8003b80:	af14      	add	r7, sp, #80	; 0x50
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <writeLog+0xe8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
  cntLog,
  getMarkerSensor(),
 8003b88:	f000 f89e 	bl	8003cc8 <getMarkerSensor>
 8003b8c:	4603      	mov	r3, r0
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003b8e:	469c      	mov	ip, r3
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <writeLog+0xec>)
 8003b92:	681d      	ldr	r5, [r3, #0]
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <writeLog+0xf0>)
 8003b96:	681e      	ldr	r6, [r3, #0]
 8003b98:	4b35      	ldr	r3, [pc, #212]	; (8003c70 <writeLog+0xf4>)
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	6339      	str	r1, [r7, #48]	; 0x30
  encTotalR,
  encTotalL,
  encTotalN,
  lSensor[0],
 8003b9e:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <writeLog+0xf8>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  lSensor[1],
 8003ba4:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <writeLog+0xf8>)
 8003ba6:	885b      	ldrh	r3, [r3, #2]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  lSensor[2],
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <writeLog+0xf8>)
 8003bac:	889b      	ldrh	r3, [r3, #4]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  lSensor[3],
 8003bb0:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <writeLog+0xf8>)
 8003bb2:	88db      	ldrh	r3, [r3, #6]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bb4:	623b      	str	r3, [r7, #32]
  lSensor[4],
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <writeLog+0xf8>)
 8003bb8:	891b      	ldrh	r3, [r3, #8]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bba:	61fb      	str	r3, [r7, #28]
  lSensor[5],
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <writeLog+0xf8>)
 8003bbe:	895b      	ldrh	r3, [r3, #10]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bc0:	61bb      	str	r3, [r7, #24]
  lSensor[6],
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <writeLog+0xf8>)
 8003bc4:	899b      	ldrh	r3, [r3, #12]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bc6:	617b      	str	r3, [r7, #20]
  lSensor[7],
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <writeLog+0xf8>)
 8003bca:	89db      	ldrh	r3, [r3, #14]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bcc:	613b      	str	r3, [r7, #16]
  lSensor[8],
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <writeLog+0xf8>)
 8003bd0:	8a1b      	ldrh	r3, [r3, #16]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bd2:	60fb      	str	r3, [r7, #12]
  lSensor[9],
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <writeLog+0xf8>)
 8003bd6:	8a5b      	ldrh	r3, [r3, #18]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bd8:	60bb      	str	r3, [r7, #8]
  lSensor[10],
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <writeLog+0xf8>)
 8003bdc:	8a9b      	ldrh	r3, [r3, #20]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bde:	607b      	str	r3, [r7, #4]
  lSensor[11],
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <writeLog+0xf8>)
 8003be2:	8adb      	ldrh	r3, [r3, #22]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003be4:	603b      	str	r3, [r7, #0]
  gyroVal[INDEX_X],
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <writeLog+0xfc>)
 8003be8:	f9b3 3000 	ldrsh.w	r3, [r3]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bec:	461c      	mov	r4, r3
  gyroVal[INDEX_Y],
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <writeLog+0xfc>)
 8003bf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bf4:	4618      	mov	r0, r3
  gyroVal[INDEX_Z],
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <writeLog+0xfc>)
 8003bf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  f_printf(&fil, "%d,%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <writeLog+0x100>)
 8003c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <writeLog+0x104>)
 8003c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c0e:	9212      	str	r2, [sp, #72]	; 0x48
 8003c10:	9111      	str	r1, [sp, #68]	; 0x44
 8003c12:	9010      	str	r0, [sp, #64]	; 0x40
 8003c14:	940f      	str	r4, [sp, #60]	; 0x3c
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	900e      	str	r0, [sp, #56]	; 0x38
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	900d      	str	r0, [sp, #52]	; 0x34
 8003c1e:	68b8      	ldr	r0, [r7, #8]
 8003c20:	900c      	str	r0, [sp, #48]	; 0x30
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	900b      	str	r0, [sp, #44]	; 0x2c
 8003c26:	6938      	ldr	r0, [r7, #16]
 8003c28:	900a      	str	r0, [sp, #40]	; 0x28
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	9009      	str	r0, [sp, #36]	; 0x24
 8003c2e:	69b8      	ldr	r0, [r7, #24]
 8003c30:	9008      	str	r0, [sp, #32]
 8003c32:	69f8      	ldr	r0, [r7, #28]
 8003c34:	9007      	str	r0, [sp, #28]
 8003c36:	6a38      	ldr	r0, [r7, #32]
 8003c38:	9006      	str	r0, [sp, #24]
 8003c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c3c:	9005      	str	r0, [sp, #20]
 8003c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c40:	9004      	str	r0, [sp, #16]
 8003c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c44:	9003      	str	r0, [sp, #12]
 8003c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c48:	9102      	str	r1, [sp, #8]
 8003c4a:	9601      	str	r6, [sp, #4]
 8003c4c:	9500      	str	r5, [sp, #0]
 8003c4e:	4663      	mov	r3, ip
 8003c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c52:	490c      	ldr	r1, [pc, #48]	; (8003c84 <writeLog+0x108>)
 8003c54:	480c      	ldr	r0, [pc, #48]	; (8003c88 <writeLog+0x10c>)
 8003c56:	f00a fe49 	bl	800e8ec <f_printf>
  rawCurrentR,
  rawCurrentL);
}
 8003c5a:	bf00      	nop
 8003c5c:	373c      	adds	r7, #60	; 0x3c
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20002804 	.word	0x20002804
 8003c68:	20000300 	.word	0x20000300
 8003c6c:	20000304 	.word	0x20000304
 8003c70:	20000308 	.word	0x20000308
 8003c74:	20000344 	.word	0x20000344
 8003c78:	200002b8 	.word	0x200002b8
 8003c7c:	200002d0 	.word	0x200002d0
 8003c80:	200002d2 	.word	0x200002d2
 8003c84:	080141b4 	.word	0x080141b4
 8003c88:	20001788 	.word	0x20001788

08003c8c <endLog>:

void endLog(void) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  modeLOG = 0;
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <endLog+0x24>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY );
 8003c96:	bf00      	nop
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <endLog+0x28>)
 8003c9a:	f005 ff44 	bl	8009b26 <HAL_SPI_GetState>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d1f9      	bne.n	8003c98 <endLog+0xc>
  f_close(&fil);
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <endLog+0x2c>)
 8003ca6:	f00a fbf5 	bl	800e494 <f_close>
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200002d5 	.word	0x200002d5
 8003cb4:	20000548 	.word	0x20000548
 8003cb8:	20001788 	.word	0x20001788

08003cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <Error_Handler+0x8>
	...

08003cc8 <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	71bb      	strb	r3, [r7, #6]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	717b      	strb	r3, [r7, #5]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 8003cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cde:	480e      	ldr	r0, [pc, #56]	; (8003d18 <getMarkerSensor+0x50>)
 8003ce0:	f003 fe40 	bl	8007964 <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 8003ce8:	2102      	movs	r1, #2
 8003cea:	480c      	ldr	r0, [pc, #48]	; (8003d1c <getMarkerSensor+0x54>)
 8003cec:	f003 fe3a 	bl	8007964 <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += RIGHTMARKER;
 8003cf4:	79bb      	ldrb	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <getMarkerSensor+0x38>
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += LEFTMARKER;
 8003d00:	797b      	ldrb	r3, [r7, #5]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <getMarkerSensor+0x44>
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	71fb      	strb	r3, [r7, #7]

	return ret;
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40020800 	.word	0x40020800
 8003d1c:	40020400 	.word	0x40020400

08003d20 <checkMarker>:
// モジュール名 checkMarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkMarker( void ) {
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	71fb      	strb	r3, [r7, #7]

	if (encTotalN - encCross >= encMM(40)) encCross = 0;
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <checkMarker+0xa8>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <checkMarker+0xac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1ad4      	subs	r4, r2, r3
 8003d34:	2028      	movs	r0, #40	; 0x28
 8003d36:	f7fd ff39 	bl	8001bac <encMM>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	db02      	blt.n	8003d46 <checkMarker+0x26>
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <checkMarker+0xac>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

	if ( getMarkerSensor() != 0) {
 8003d46:	f7ff ffbf 	bl	8003cc8 <getMarkerSensor>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d035      	beq.n	8003dbc <checkMarker+0x9c>
		if (encMarker == 0) {
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <checkMarker+0xb0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <checkMarker+0x4e>
			mark = getMarkerSensor();
 8003d58:	f7ff ffb6 	bl	8003cc8 <getMarkerSensor>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <checkMarker+0xb4>)
 8003d62:	601a      	str	r2, [r3, #0]
			encMarker = encTotalN;
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <checkMarker+0xa8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <checkMarker+0xb0>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e026      	b.n	8003dbc <checkMarker+0x9c>
		} else if (encTotalN - encMarker <= encth && encTotalN - encCross <= encMM(40)) {
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <checkMarker+0xa8>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <checkMarker+0xb0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <checkMarker+0xb8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	dc0a      	bgt.n	8003d96 <checkMarker+0x76>
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <checkMarker+0xa8>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <checkMarker+0xac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1ad4      	subs	r4, r2, r3
 8003d8a:	2028      	movs	r0, #40	; 0x28
 8003d8c:	f7fd ff0e 	bl	8001bac <encMM>
 8003d90:	4603      	mov	r3, r0
 8003d92:	429c      	cmp	r4, r3
 8003d94:	dd12      	ble.n	8003dbc <checkMarker+0x9c>
			// if (mark != getMarkerSensor()) {
			// 	ret = 0;
			// 	encMarker = 0;
			// 	encCross = encTotalN;
			// }
		} else if (encTotalN - encMarker >= encth) {
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <checkMarker+0xa8>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <checkMarker+0xb0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <checkMarker+0xb8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	db09      	blt.n	8003dbc <checkMarker+0x9c>
			ret = getMarkerSensor();
 8003da8:	f7ff ff8e 	bl	8003cc8 <getMarkerSensor>
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
			encMarker = 0;
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <checkMarker+0xb0>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
			mark = 0;
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <checkMarker+0xb4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
		}
	}

	return ret;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000308 	.word	0x20000308
 8003dcc:	200027d8 	.word	0x200027d8
 8003dd0:	200027d0 	.word	0x200027d0
 8003dd4:	200027d4 	.word	0x200027d4
 8003dd8:	20000020 	.word	0x20000020

08003ddc <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	460a      	mov	r2, r1
 8003de6:	80fb      	strh	r3, [r7, #6]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80bb      	strh	r3, [r7, #4]

    if (abs(pwmL) < 10) {
 8003dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb8      	it	lt
 8003df4:	425b      	neglt	r3, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d808      	bhi.n	8003e0e <motorPwmOut+0x32>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <motorPwmOut+0xdc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 10);
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	220a      	movs	r2, #10
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e0c:	e01e      	b.n	8003e4c <motorPwmOut+0x70>
    } else if (pwmL > 0) {
 8003e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dd09      	ble.n	8003e2a <motorPwmOut+0x4e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003e16:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8003e1e:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
 8003e28:	e010      	b.n	8003e4c <motorPwmOut+0x70>
    } else if (pwmL < 0){
 8003e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0c      	bge.n	8003e4c <motorPwmOut+0x70>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 8003e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	425b      	neglt	r3, r3
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (abs(pwmR) < 10) {
 8003e4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bfb8      	it	lt
 8003e54:	425b      	neglt	r3, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d808      	bhi.n	8003e6e <motorPwmOut+0x92>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 10);
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	220a      	movs	r2, #10
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    } else if (pwmR < 0) {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
    }

}
 8003e6c:	e01e      	b.n	8003eac <motorPwmOut+0xd0>
    } else if (pwmR > 0) {
 8003e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dd09      	ble.n	8003e8a <motorPwmOut+0xae>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwmR);
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003e88:	e010      	b.n	8003eac <motorPwmOut+0xd0>
    } else if (pwmR < 0) {
 8003e8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0c      	bge.n	8003eac <motorPwmOut+0xd0>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <motorPwmOut+0xdc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwmR));
 8003e9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	425b      	neglt	r3, r3
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <motorPwmOut+0xdc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	200005a0 	.word	0x200005a0

08003ebc <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	80fb      	strh	r3, [r7, #6]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 8003ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	dd14      	ble.n	8003efe <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 8003ed4:	88ba      	ldrh	r2, [r7, #4]
 8003ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfb8      	it	lt
 8003ede:	425b      	neglt	r3, r3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 8003ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bfb8      	it	lt
 8003ef0:	425b      	neglt	r3, r3
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	81bb      	strh	r3, [r7, #12]
 8003efc:	e013      	b.n	8003f26 <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 8003efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	425b      	neglt	r3, r3
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	88bb      	ldrh	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8003f12:	88ba      	ldrh	r2, [r7, #4]
 8003f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	425b      	neglt	r3, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 8003f26:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff53 	bl	8003ddc <motorPwmOut>
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af02      	add	r7, sp, #8
	uint8_t cnt_led, sd_sw;
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	switch ( swValRotary ) {
 8003f46:	4bab      	ldr	r3, [pc, #684]	; (80041f4 <setup+0x2b4>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	f200 86e2 	bhi.w	8004d14 <setup+0xdd4>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <setup+0x18>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f79 	.word	0x08003f79
 8003f5c:	08003f95 	.word	0x08003f95
 8003f60:	080040cd 	.word	0x080040cd
 8003f64:	080042c3 	.word	0x080042c3
 8003f68:	0800443f 	.word	0x0800443f
 8003f6c:	080045cf 	.word	0x080045cf
 8003f70:	08004771 	.word	0x08004771
 8003f74:	08004cb9 	.word	0x08004cb9
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8003f78:	2102      	movs	r1, #2
 8003f7a:	489f      	ldr	r0, [pc, #636]	; (80041f8 <setup+0x2b8>)
 8003f7c:	f000 ff28 	bl	8004dd0 <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8003f80:	499e      	ldr	r1, [pc, #632]	; (80041fc <setup+0x2bc>)
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7fd f996 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8003f88:	499d      	ldr	r1, [pc, #628]	; (8004200 <setup+0x2c0>)
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7fd f992 	bl	80012b4 <lcdRowPrintf>
			break;
 8003f90:	f000 bed7 	b.w	8004d42 <setup+0xe02>
		//------------------------------------------------------------------
		// パラメータ調整(通常トレース)
		//------------------------------------------------------------------
		case 0x1:
			dataTuningLR( &pattern_parameter1, 1 );
 8003f94:	2101      	movs	r1, #1
 8003f96:	489b      	ldr	r0, [pc, #620]	; (8004204 <setup+0x2c4>)
 8003f98:	f000 ffd4 	bl	8004f44 <dataTuningLR>
			
			if ( pattern_parameter1 == 6 ) pattern_parameter1 = 1;
 8003f9c:	4b99      	ldr	r3, [pc, #612]	; (8004204 <setup+0x2c4>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d103      	bne.n	8003fac <setup+0x6c>
 8003fa4:	4b97      	ldr	r3, [pc, #604]	; (8004204 <setup+0x2c4>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e006      	b.n	8003fba <setup+0x7a>
			else if ( pattern_parameter1 == 0 ) pattern_parameter1 = 5;
 8003fac:	4b95      	ldr	r3, [pc, #596]	; (8004204 <setup+0x2c4>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <setup+0x7a>
 8003fb4:	4b93      	ldr	r3, [pc, #588]	; (8004204 <setup+0x2c4>)
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_parameter1 ) {
 8003fba:	4b92      	ldr	r3, [pc, #584]	; (8004204 <setup+0x2c4>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	f200 86b3 	bhi.w	8004d2c <setup+0xdec>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <setup+0x8c>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fe1 	.word	0x08003fe1
 8003fd0:	08004013 	.word	0x08004013
 8003fd4:	08004045 	.word	0x08004045
 8003fd8:	08004077 	.word	0x08004077
 8003fdc:	080040a9 	.word	0x080040a9
				case 1:
					// 通常走行速度
					lcdRowPrintf(UPROW, "STRAIGHT");
 8003fe0:	4989      	ldr	r1, [pc, #548]	; (8004208 <setup+0x2c8>)
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fd f966 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STRAIGHT] / 10);
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <setup+0x2cc>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc faa9 	bl	8000544 <__aeabi_ui2d>
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	4b86      	ldr	r3, [pc, #536]	; (8004210 <setup+0x2d0>)
 8003ff8:	f7fc fc48 	bl	800088c <__aeabi_ddiv>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4984      	ldr	r1, [pc, #528]	; (8004214 <setup+0x2d4>)
 8004002:	2001      	movs	r0, #1
 8004004:	f7fd f956 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STRAIGHT], 1 );
 8004008:	2101      	movs	r1, #1
 800400a:	4880      	ldr	r0, [pc, #512]	; (800420c <setup+0x2cc>)
 800400c:	f000 ff16 	bl	8004e3c <dataTuningUD>
					break;
 8004010:	e05a      	b.n	80040c8 <setup+0x188>
				case 2:
					// 停止速度
					lcdRowPrintf(UPROW, "CURVE   ");
 8004012:	4981      	ldr	r1, [pc, #516]	; (8004218 <setup+0x2d8>)
 8004014:	2000      	movs	r0, #0
 8004016:	f7fd f94d 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVE] / 10);
 800401a:	4b7c      	ldr	r3, [pc, #496]	; (800420c <setup+0x2cc>)
 800401c:	78db      	ldrb	r3, [r3, #3]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc fa90 	bl	8000544 <__aeabi_ui2d>
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b79      	ldr	r3, [pc, #484]	; (8004210 <setup+0x2d0>)
 800402a:	f7fc fc2f 	bl	800088c <__aeabi_ddiv>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4978      	ldr	r1, [pc, #480]	; (8004214 <setup+0x2d4>)
 8004034:	2001      	movs	r0, #1
 8004036:	f7fd f93d 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVE], 1 );
 800403a:	2101      	movs	r1, #1
 800403c:	4877      	ldr	r0, [pc, #476]	; (800421c <setup+0x2dc>)
 800403e:	f000 fefd 	bl	8004e3c <dataTuningUD>
					break;
 8004042:	e041      	b.n	80040c8 <setup+0x188>
				case 3:
					// カーブブレーキ
					lcdRowPrintf(UPROW, "BRAKE   ");
 8004044:	4976      	ldr	r1, [pc, #472]	; (8004220 <setup+0x2e0>)
 8004046:	2000      	movs	r0, #0
 8004048:	f7fd f934 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVEBREAK] / 10);
 800404c:	4b6f      	ldr	r3, [pc, #444]	; (800420c <setup+0x2cc>)
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fa77 	bl	8000544 <__aeabi_ui2d>
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <setup+0x2d0>)
 800405c:	f7fc fc16 	bl	800088c <__aeabi_ddiv>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	496b      	ldr	r1, [pc, #428]	; (8004214 <setup+0x2d4>)
 8004066:	2001      	movs	r0, #1
 8004068:	f7fd f924 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVEBREAK], 1 );
 800406c:	2101      	movs	r1, #1
 800406e:	486d      	ldr	r0, [pc, #436]	; (8004224 <setup+0x2e4>)
 8004070:	f000 fee4 	bl	8004e3c <dataTuningUD>
					break;
 8004074:	e028      	b.n	80040c8 <setup+0x188>
				case 4:
					// 停止速度
					lcdRowPrintf(UPROW, "STOP    ");
 8004076:	496c      	ldr	r1, [pc, #432]	; (8004228 <setup+0x2e8>)
 8004078:	2000      	movs	r0, #0
 800407a:	f7fd f91b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STOP] / 10);
 800407e:	4b63      	ldr	r3, [pc, #396]	; (800420c <setup+0x2cc>)
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fa5e 	bl	8000544 <__aeabi_ui2d>
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	4b60      	ldr	r3, [pc, #384]	; (8004210 <setup+0x2d0>)
 800408e:	f7fc fbfd 	bl	800088c <__aeabi_ddiv>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	495f      	ldr	r1, [pc, #380]	; (8004214 <setup+0x2d4>)
 8004098:	2001      	movs	r0, #1
 800409a:	f7fd f90b 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STOP], 1 );
 800409e:	2101      	movs	r1, #1
 80040a0:	4862      	ldr	r0, [pc, #392]	; (800422c <setup+0x2ec>)
 80040a2:	f000 fecb 	bl	8004e3c <dataTuningUD>
					break;
 80040a6:	e00f      	b.n	80040c8 <setup+0x188>
				case 5:
					lcdRowPrintf(UPROW, "ANGLECUR");
 80040a8:	4961      	ldr	r1, [pc, #388]	; (8004230 <setup+0x2f0>)
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7fd f902 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "    %4d", paramAngle[INDEX_ANGLE_CURVE]);
 80040b0:	4b60      	ldr	r3, [pc, #384]	; (8004234 <setup+0x2f4>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4960      	ldr	r1, [pc, #384]	; (8004238 <setup+0x2f8>)
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fd f8fb 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramAngle[INDEX_ANGLE_CURVE], 1 );
 80040be:	2101      	movs	r1, #1
 80040c0:	485c      	ldr	r0, [pc, #368]	; (8004234 <setup+0x2f4>)
 80040c2:	f000 febb 	bl	8004e3c <dataTuningUD>
					break;
 80040c6:	bf00      	nop
				
			}
			break;
 80040c8:	f000 be30 	b.w	8004d2c <setup+0xdec>
		//------------------------------------------------------------------
		// ゲイン調整(直線トレース)
		//------------------------------------------------------------------
		case 0x2:
			lcdRowPrintf(UPROW, "kp ki kd");
 80040cc:	495b      	ldr	r1, [pc, #364]	; (800423c <setup+0x2fc>)
 80040ce:	2000      	movs	r0, #0
 80040d0:	f7fd f8f0 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 80040d4:	2102      	movs	r1, #2
 80040d6:	485a      	ldr	r0, [pc, #360]	; (8004240 <setup+0x300>)
 80040d8:	f000 fe7a 	bl	8004dd0 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 80040dc:	4b58      	ldr	r3, [pc, #352]	; (8004240 <setup+0x300>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10c      	bne.n	80040fe <setup+0x1be>
				motorPwmOutSynth( tracePwm, 0 );
 80040e4:	4b57      	ldr	r3, [pc, #348]	; (8004244 <setup+0x304>)
 80040e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fee5 	bl	8003ebc <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80040f2:	4b55      	ldr	r3, [pc, #340]	; (8004248 <setup+0x308>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34
 80040fc:	e007      	b.n	800410e <setup+0x1ce>
			} else {
				motorPwmOutSynth( 0, 0 );
 80040fe:	2100      	movs	r1, #0
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff fedb 	bl	8003ebc <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004106:	4b50      	ldr	r3, [pc, #320]	; (8004248 <setup+0x308>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 800410e:	2101      	movs	r1, #1
 8004110:	484e      	ldr	r0, [pc, #312]	; (800424c <setup+0x30c>)
 8004112:	f000 ff17 	bl	8004f44 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <setup+0x30c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d103      	bne.n	8004126 <setup+0x1e6>
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <setup+0x30c>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e006      	b.n	8004134 <setup+0x1f4>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8004126:	4b49      	ldr	r3, [pc, #292]	; (800424c <setup+0x30c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <setup+0x1f4>
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <setup+0x30c>)
 8004130:	2203      	movs	r2, #3
 8004132:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8004134:	4b45      	ldr	r3, [pc, #276]	; (800424c <setup+0x30c>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b03      	cmp	r3, #3
 800413a:	f000 8097 	beq.w	800426c <setup+0x32c>
 800413e:	2b03      	cmp	r3, #3
 8004140:	f300 85f6 	bgt.w	8004d30 <setup+0xdf0>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d003      	beq.n	8004150 <setup+0x210>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d02a      	beq.n	80041a2 <setup+0x262>
					}
					
					dataTuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 800414c:	f000 bdf0 	b.w	8004d30 <setup+0xdf0>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004150:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <setup+0x310>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004158:	d302      	bcc.n	8004160 <setup+0x220>
 800415a:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <setup+0x310>)
 800415c:	2200      	movs	r2, #0
 800415e:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <setup+0x310>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	2bf9      	cmp	r3, #249	; 0xf9
 8004166:	d809      	bhi.n	800417c <setup+0x23c>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 8004168:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <setup+0x314>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <setup+0x318>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	493a      	ldr	r1, [pc, #232]	; (800425c <setup+0x31c>)
 8004174:	2001      	movs	r0, #1
 8004176:	f7fd f89d 	bl	80012b4 <lcdRowPrintf>
 800417a:	e00d      	b.n	8004198 <setup+0x258>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 800417c:	4b38      	ldr	r3, [pc, #224]	; (8004260 <setup+0x320>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <setup+0x314>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <setup+0x318>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	460b      	mov	r3, r1
 8004190:	4934      	ldr	r1, [pc, #208]	; (8004264 <setup+0x324>)
 8004192:	2001      	movs	r0, #1
 8004194:	f7fd f88e 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1_buff, 1 );
 8004198:	2101      	movs	r1, #1
 800419a:	4831      	ldr	r0, [pc, #196]	; (8004260 <setup+0x320>)
 800419c:	f000 fe4e 	bl	8004e3c <dataTuningUD>
					break;
 80041a0:	e08d      	b.n	80042be <setup+0x37e>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80041a2:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <setup+0x310>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041aa:	d302      	bcc.n	80041b2 <setup+0x272>
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <setup+0x310>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <setup+0x310>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2bf9      	cmp	r3, #249	; 0xf9
 80041b8:	d809      	bhi.n	80041ce <setup+0x28e>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 80041ba:	4b29      	ldr	r3, [pc, #164]	; (8004260 <setup+0x320>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <setup+0x318>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	4928      	ldr	r1, [pc, #160]	; (8004268 <setup+0x328>)
 80041c6:	2001      	movs	r0, #1
 80041c8:	f7fd f874 	bl	80012b4 <lcdRowPrintf>
 80041cc:	e00d      	b.n	80041ea <setup+0x2aa>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <setup+0x320>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <setup+0x314>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <setup+0x318>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	460b      	mov	r3, r1
 80041e2:	4920      	ldr	r1, [pc, #128]	; (8004264 <setup+0x324>)
 80041e4:	2001      	movs	r0, #1
 80041e6:	f7fd f865 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1_buff, 1 );
 80041ea:	2101      	movs	r1, #1
 80041ec:	4819      	ldr	r0, [pc, #100]	; (8004254 <setup+0x314>)
 80041ee:	f000 fe25 	bl	8004e3c <dataTuningUD>
					break;
 80041f2:	e064      	b.n	80042be <setup+0x37e>
 80041f4:	200027f5 	.word	0x200027f5
 80041f8:	200027e0 	.word	0x200027e0
 80041fc:	080141f8 	.word	0x080141f8
 8004200:	08014204 	.word	0x08014204
 8004204:	20000028 	.word	0x20000028
 8004208:	08014210 	.word	0x08014210
 800420c:	20000004 	.word	0x20000004
 8004210:	40240000 	.word	0x40240000
 8004214:	0801421c 	.word	0x0801421c
 8004218:	08014228 	.word	0x08014228
 800421c:	20000007 	.word	0x20000007
 8004220:	08014234 	.word	0x08014234
 8004224:	20000005 	.word	0x20000005
 8004228:	08014240 	.word	0x08014240
 800422c:	20000006 	.word	0x20000006
 8004230:	0801424c 	.word	0x0801424c
 8004234:	20000010 	.word	0x20000010
 8004238:	08014258 	.word	0x08014258
 800423c:	08014260 	.word	0x08014260
 8004240:	200027f0 	.word	0x200027f0
 8004244:	2000039a 	.word	0x2000039a
 8004248:	200005e8 	.word	0x200005e8
 800424c:	20000029 	.word	0x20000029
 8004250:	200027e2 	.word	0x200027e2
 8004254:	200003a8 	.word	0x200003a8
 8004258:	2000001c 	.word	0x2000001c
 800425c:	0801426c 	.word	0x0801426c
 8004260:	2000001b 	.word	0x2000001b
 8004264:	08014278 	.word	0x08014278
 8004268:	08014284 	.word	0x08014284
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800426c:	4b9b      	ldr	r3, [pc, #620]	; (80044dc <setup+0x59c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004274:	d302      	bcc.n	800427c <setup+0x33c>
 8004276:	4b99      	ldr	r3, [pc, #612]	; (80044dc <setup+0x59c>)
 8004278:	2200      	movs	r2, #0
 800427a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800427c:	4b97      	ldr	r3, [pc, #604]	; (80044dc <setup+0x59c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	2bf9      	cmp	r3, #249	; 0xf9
 8004282:	d809      	bhi.n	8004298 <setup+0x358>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8004284:	4b96      	ldr	r3, [pc, #600]	; (80044e0 <setup+0x5a0>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b96      	ldr	r3, [pc, #600]	; (80044e4 <setup+0x5a4>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	4996      	ldr	r1, [pc, #600]	; (80044e8 <setup+0x5a8>)
 8004290:	2001      	movs	r0, #1
 8004292:	f7fd f80f 	bl	80012b4 <lcdRowPrintf>
 8004296:	e00d      	b.n	80042b4 <setup+0x374>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8004298:	4b91      	ldr	r3, [pc, #580]	; (80044e0 <setup+0x5a0>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b91      	ldr	r3, [pc, #580]	; (80044e4 <setup+0x5a4>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4b91      	ldr	r3, [pc, #580]	; (80044ec <setup+0x5ac>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	460b      	mov	r3, r1
 80042ac:	4990      	ldr	r1, [pc, #576]	; (80044f0 <setup+0x5b0>)
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7fd f800 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1_buff, 1 );
 80042b4:	2101      	movs	r1, #1
 80042b6:	488d      	ldr	r0, [pc, #564]	; (80044ec <setup+0x5ac>)
 80042b8:	f000 fdc0 	bl	8004e3c <dataTuningUD>
					break;
 80042bc:	bf00      	nop
			break;
 80042be:	f000 bd37 	b.w	8004d30 <setup+0xdf0>
		//------------------------------------------------------------------
		// ゲイン調整(カーブトレース)
		//------------------------------------------------------------------
		case 0x3:
			lcdRowPrintf(UPROW, "kp ki kd");
 80042c2:	498c      	ldr	r1, [pc, #560]	; (80044f4 <setup+0x5b4>)
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7fc fff5 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 80042ca:	2102      	movs	r1, #2
 80042cc:	488a      	ldr	r0, [pc, #552]	; (80044f8 <setup+0x5b8>)
 80042ce:	f000 fd7f 	bl	8004dd0 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <setup+0x5b8>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10c      	bne.n	80042f4 <setup+0x3b4>
				motorPwmOutSynth( tracePwm, 0 );
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <setup+0x5bc>)
 80042dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fdea 	bl	8003ebc <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80042e8:	4b85      	ldr	r3, [pc, #532]	; (8004500 <setup+0x5c0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
 80042f2:	e007      	b.n	8004304 <setup+0x3c4>
			} else {
				motorPwmOutSynth( 0, 0 );
 80042f4:	2100      	movs	r1, #0
 80042f6:	2000      	movs	r0, #0
 80042f8:	f7ff fde0 	bl	8003ebc <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <setup+0x5c0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8004304:	2101      	movs	r1, #1
 8004306:	487f      	ldr	r0, [pc, #508]	; (8004504 <setup+0x5c4>)
 8004308:	f000 fe1c 	bl	8004f44 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 800430c:	4b7d      	ldr	r3, [pc, #500]	; (8004504 <setup+0x5c4>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d103      	bne.n	800431c <setup+0x3dc>
 8004314:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <setup+0x5c4>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e006      	b.n	800432a <setup+0x3ea>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <setup+0x5c4>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <setup+0x3ea>
 8004324:	4b77      	ldr	r3, [pc, #476]	; (8004504 <setup+0x5c4>)
 8004326:	2203      	movs	r2, #3
 8004328:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <setup+0x5c4>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d05a      	beq.n	80043e8 <setup+0x4a8>
 8004332:	2b03      	cmp	r3, #3
 8004334:	f300 84fe 	bgt.w	8004d34 <setup+0xdf4>
 8004338:	2b01      	cmp	r3, #1
 800433a:	d003      	beq.n	8004344 <setup+0x404>
 800433c:	2b02      	cmp	r3, #2
 800433e:	d02a      	beq.n	8004396 <setup+0x456>
					}
					
					dataTuningUD ( &kd1Curve_buff, 1 );
					break;
			}
			break;
 8004340:	f000 bcf8 	b.w	8004d34 <setup+0xdf4>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004344:	4b65      	ldr	r3, [pc, #404]	; (80044dc <setup+0x59c>)
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800434c:	d302      	bcc.n	8004354 <setup+0x414>
 800434e:	4b63      	ldr	r3, [pc, #396]	; (80044dc <setup+0x59c>)
 8004350:	2200      	movs	r2, #0
 8004352:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8004354:	4b61      	ldr	r3, [pc, #388]	; (80044dc <setup+0x59c>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	2bf9      	cmp	r3, #249	; 0xf9
 800435a:	d809      	bhi.n	8004370 <setup+0x430>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1Curve_buff, kd1Curve_buff);
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <setup+0x5c8>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <setup+0x5cc>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	496a      	ldr	r1, [pc, #424]	; (8004510 <setup+0x5d0>)
 8004368:	2001      	movs	r0, #1
 800436a:	f7fc ffa3 	bl	80012b4 <lcdRowPrintf>
 800436e:	e00d      	b.n	800438c <setup+0x44c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8004370:	4b68      	ldr	r3, [pc, #416]	; (8004514 <setup+0x5d4>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b64      	ldr	r3, [pc, #400]	; (8004508 <setup+0x5c8>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	4619      	mov	r1, r3
 800437c:	4b63      	ldr	r3, [pc, #396]	; (800450c <setup+0x5cc>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	460b      	mov	r3, r1
 8004384:	495a      	ldr	r1, [pc, #360]	; (80044f0 <setup+0x5b0>)
 8004386:	2001      	movs	r0, #1
 8004388:	f7fc ff94 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1Curve_buff, 1 );
 800438c:	2101      	movs	r1, #1
 800438e:	4861      	ldr	r0, [pc, #388]	; (8004514 <setup+0x5d4>)
 8004390:	f000 fd54 	bl	8004e3c <dataTuningUD>
					break;
 8004394:	e051      	b.n	800443a <setup+0x4fa>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004396:	4b51      	ldr	r3, [pc, #324]	; (80044dc <setup+0x59c>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800439e:	d302      	bcc.n	80043a6 <setup+0x466>
 80043a0:	4b4e      	ldr	r3, [pc, #312]	; (80044dc <setup+0x59c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80043a6:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <setup+0x59c>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	2bf9      	cmp	r3, #249	; 0xf9
 80043ac:	d809      	bhi.n	80043c2 <setup+0x482>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1Curve_buff, kd1Curve_buff);
 80043ae:	4b59      	ldr	r3, [pc, #356]	; (8004514 <setup+0x5d4>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b55      	ldr	r3, [pc, #340]	; (800450c <setup+0x5cc>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	4957      	ldr	r1, [pc, #348]	; (8004518 <setup+0x5d8>)
 80043ba:	2001      	movs	r0, #1
 80043bc:	f7fc ff7a 	bl	80012b4 <lcdRowPrintf>
 80043c0:	e00d      	b.n	80043de <setup+0x49e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 80043c2:	4b54      	ldr	r3, [pc, #336]	; (8004514 <setup+0x5d4>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b4f      	ldr	r3, [pc, #316]	; (8004508 <setup+0x5c8>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4619      	mov	r1, r3
 80043ce:	4b4f      	ldr	r3, [pc, #316]	; (800450c <setup+0x5cc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	460b      	mov	r3, r1
 80043d6:	4946      	ldr	r1, [pc, #280]	; (80044f0 <setup+0x5b0>)
 80043d8:	2001      	movs	r0, #1
 80043da:	f7fc ff6b 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1Curve_buff, 1 );
 80043de:	2101      	movs	r1, #1
 80043e0:	4849      	ldr	r0, [pc, #292]	; (8004508 <setup+0x5c8>)
 80043e2:	f000 fd2b 	bl	8004e3c <dataTuningUD>
					break;
 80043e6:	e028      	b.n	800443a <setup+0x4fa>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <setup+0x59c>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043f0:	d302      	bcc.n	80043f8 <setup+0x4b8>
 80043f2:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <setup+0x59c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80043f8:	4b38      	ldr	r3, [pc, #224]	; (80044dc <setup+0x59c>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2bf9      	cmp	r3, #249	; 0xf9
 80043fe:	d809      	bhi.n	8004414 <setup+0x4d4>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1Curve_buff, ki1Curve_buff);
 8004400:	4b44      	ldr	r3, [pc, #272]	; (8004514 <setup+0x5d4>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	4b40      	ldr	r3, [pc, #256]	; (8004508 <setup+0x5c8>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4937      	ldr	r1, [pc, #220]	; (80044e8 <setup+0x5a8>)
 800440c:	2001      	movs	r0, #1
 800440e:	f7fc ff51 	bl	80012b4 <lcdRowPrintf>
 8004412:	e00d      	b.n	8004430 <setup+0x4f0>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <setup+0x5d4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <setup+0x5c8>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	4619      	mov	r1, r3
 8004420:	4b3a      	ldr	r3, [pc, #232]	; (800450c <setup+0x5cc>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	460b      	mov	r3, r1
 8004428:	4931      	ldr	r1, [pc, #196]	; (80044f0 <setup+0x5b0>)
 800442a:	2001      	movs	r0, #1
 800442c:	f7fc ff42 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1Curve_buff, 1 );
 8004430:	2101      	movs	r1, #1
 8004432:	4836      	ldr	r0, [pc, #216]	; (800450c <setup+0x5cc>)
 8004434:	f000 fd02 	bl	8004e3c <dataTuningUD>
					break;
 8004438:	bf00      	nop
			break;
 800443a:	f000 bc7b 	b.w	8004d34 <setup+0xdf4>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x4:
			lcdRowPrintf(UPROW, "kp ki kd");
 800443e:	492d      	ldr	r1, [pc, #180]	; (80044f4 <setup+0x5b4>)
 8004440:	2000      	movs	r0, #0
 8004442:	f7fc ff37 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			dataTuningLR( &pattern_gain, 1 );
 8004446:	2101      	movs	r1, #1
 8004448:	482e      	ldr	r0, [pc, #184]	; (8004504 <setup+0x5c4>)
 800444a:	f000 fd7b 	bl	8004f44 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <setup+0x5c4>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d103      	bne.n	800445e <setup+0x51e>
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <setup+0x5c4>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e006      	b.n	800446c <setup+0x52c>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <setup+0x5c4>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <setup+0x52c>
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <setup+0x5c4>)
 8004468:	2203      	movs	r2, #3
 800446a:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <setup+0x5c4>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	f000 8082 	beq.w	800457a <setup+0x63a>
 8004476:	2b03      	cmp	r3, #3
 8004478:	f300 845e 	bgt.w	8004d38 <setup+0xdf8>
 800447c:	2b01      	cmp	r3, #1
 800447e:	d003      	beq.n	8004488 <setup+0x548>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d051      	beq.n	8004528 <setup+0x5e8>
					}
					
					dataTuningUD ( &kd3_buff, 1 );
					break;
			}
			break;
 8004484:	f000 bc58 	b.w	8004d38 <setup+0xdf8>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <setup+0x59c>)
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004490:	d302      	bcc.n	8004498 <setup+0x558>
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <setup+0x59c>)
 8004494:	2200      	movs	r2, #0
 8004496:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <setup+0x59c>)
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2bf9      	cmp	r3, #249	; 0xf9
 800449e:	d809      	bhi.n	80044b4 <setup+0x574>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 80044a0:	4b1e      	ldr	r3, [pc, #120]	; (800451c <setup+0x5dc>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <setup+0x5e0>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	4919      	ldr	r1, [pc, #100]	; (8004510 <setup+0x5d0>)
 80044ac:	2001      	movs	r0, #1
 80044ae:	f7fc ff01 	bl	80012b4 <lcdRowPrintf>
 80044b2:	e00d      	b.n	80044d0 <setup+0x590>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <setup+0x5e4>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <setup+0x5dc>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <setup+0x5e0>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	460b      	mov	r3, r1
 80044c8:	4909      	ldr	r1, [pc, #36]	; (80044f0 <setup+0x5b0>)
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fc fef2 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp2_buff, 1 );
 80044d0:	2101      	movs	r1, #1
 80044d2:	4814      	ldr	r0, [pc, #80]	; (8004524 <setup+0x5e4>)
 80044d4:	f000 fcb2 	bl	8004e3c <dataTuningUD>
					break;
 80044d8:	e078      	b.n	80045cc <setup+0x68c>
 80044da:	bf00      	nop
 80044dc:	200027e2 	.word	0x200027e2
 80044e0:	2000001b 	.word	0x2000001b
 80044e4:	200003a8 	.word	0x200003a8
 80044e8:	08014290 	.word	0x08014290
 80044ec:	2000001c 	.word	0x2000001c
 80044f0:	08014278 	.word	0x08014278
 80044f4:	08014260 	.word	0x08014260
 80044f8:	200027f0 	.word	0x200027f0
 80044fc:	2000039a 	.word	0x2000039a
 8004500:	200005e8 	.word	0x200005e8
 8004504:	20000029 	.word	0x20000029
 8004508:	200003a9 	.word	0x200003a9
 800450c:	2000001e 	.word	0x2000001e
 8004510:	0801426c 	.word	0x0801426c
 8004514:	2000001d 	.word	0x2000001d
 8004518:	08014284 	.word	0x08014284
 800451c:	20000035 	.word	0x20000035
 8004520:	20002831 	.word	0x20002831
 8004524:	20000034 	.word	0x20000034
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004528:	4b97      	ldr	r3, [pc, #604]	; (8004788 <setup+0x848>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004530:	d302      	bcc.n	8004538 <setup+0x5f8>
 8004532:	4b95      	ldr	r3, [pc, #596]	; (8004788 <setup+0x848>)
 8004534:	2200      	movs	r2, #0
 8004536:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8004538:	4b93      	ldr	r3, [pc, #588]	; (8004788 <setup+0x848>)
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	2bf9      	cmp	r3, #249	; 0xf9
 800453e:	d809      	bhi.n	8004554 <setup+0x614>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8004540:	4b92      	ldr	r3, [pc, #584]	; (800478c <setup+0x84c>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b92      	ldr	r3, [pc, #584]	; (8004790 <setup+0x850>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	4992      	ldr	r1, [pc, #584]	; (8004794 <setup+0x854>)
 800454c:	2001      	movs	r0, #1
 800454e:	f7fc feb1 	bl	80012b4 <lcdRowPrintf>
 8004552:	e00d      	b.n	8004570 <setup+0x630>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8004554:	4b8d      	ldr	r3, [pc, #564]	; (800478c <setup+0x84c>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	4b8f      	ldr	r3, [pc, #572]	; (8004798 <setup+0x858>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	4b8b      	ldr	r3, [pc, #556]	; (8004790 <setup+0x850>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	498c      	ldr	r1, [pc, #560]	; (800479c <setup+0x85c>)
 800456a:	2001      	movs	r0, #1
 800456c:	f7fc fea2 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki2_buff, 1 );
 8004570:	2101      	movs	r1, #1
 8004572:	4889      	ldr	r0, [pc, #548]	; (8004798 <setup+0x858>)
 8004574:	f000 fc62 	bl	8004e3c <dataTuningUD>
					break;
 8004578:	e028      	b.n	80045cc <setup+0x68c>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800457a:	4b83      	ldr	r3, [pc, #524]	; (8004788 <setup+0x848>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004582:	d302      	bcc.n	800458a <setup+0x64a>
 8004584:	4b80      	ldr	r3, [pc, #512]	; (8004788 <setup+0x848>)
 8004586:	2200      	movs	r2, #0
 8004588:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <setup+0x848>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	2bf9      	cmp	r3, #249	; 0xf9
 8004590:	d809      	bhi.n	80045a6 <setup+0x666>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 8004592:	4b7e      	ldr	r3, [pc, #504]	; (800478c <setup+0x84c>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <setup+0x858>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4980      	ldr	r1, [pc, #512]	; (80047a0 <setup+0x860>)
 800459e:	2001      	movs	r0, #1
 80045a0:	f7fc fe88 	bl	80012b4 <lcdRowPrintf>
 80045a4:	e00d      	b.n	80045c2 <setup+0x682>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 80045a6:	4b79      	ldr	r3, [pc, #484]	; (800478c <setup+0x84c>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b7a      	ldr	r3, [pc, #488]	; (8004798 <setup+0x858>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	4b77      	ldr	r3, [pc, #476]	; (8004790 <setup+0x850>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	460b      	mov	r3, r1
 80045ba:	4978      	ldr	r1, [pc, #480]	; (800479c <setup+0x85c>)
 80045bc:	2001      	movs	r0, #1
 80045be:	f7fc fe79 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd3_buff, 1 );
 80045c2:	2101      	movs	r1, #1
 80045c4:	4877      	ldr	r0, [pc, #476]	; (80047a4 <setup+0x864>)
 80045c6:	f000 fc39 	bl	8004e3c <dataTuningUD>
					break;
 80045ca:	bf00      	nop
			break;
 80045cc:	e3b4      	b.n	8004d38 <setup+0xdf8>
		//------------------------------------------------------------------
		// ゲイン調整(角速度)
		//------------------------------------------------------------------
		case 0x5:
			lcdRowPrintf(UPROW, "kp ki kd");
 80045ce:	4976      	ldr	r1, [pc, #472]	; (80047a8 <setup+0x868>)
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fc fe6f 	bl	80012b4 <lcdRowPrintf>
			
			anglevelocity = 0;
 80045d6:	4975      	ldr	r1, [pc, #468]	; (80047ac <setup+0x86c>)
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9c1 2300 	strd	r2, r3, [r1]
			targetSpeed = 0;
 80045e4:	4972      	ldr	r1, [pc, #456]	; (80047b0 <setup+0x870>)
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9c1 2300 	strd	r2, r3, [r1]
			data_select( &trace_test, SW_PUSH );
 80045f2:	2102      	movs	r1, #2
 80045f4:	486f      	ldr	r0, [pc, #444]	; (80047b4 <setup+0x874>)
 80045f6:	f000 fbeb 	bl	8004dd0 <data_select>
			// PUSHでトレースON/OFF
//			if ( cntEmc1 > 500 ) {
//				motorPwmOutSynth( 0, 0 );
//			} else
			if ( trace_test == 1 ) {
 80045fa:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <setup+0x874>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10b      	bne.n	800461a <setup+0x6da>
				motorPwmOutSynth( yawPwm, speedPwm );
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <setup+0x878>)
 8004604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004608:	461a      	mov	r2, r3
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <setup+0x87c>)
 800460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7ff fc52 	bl	8003ebc <motorPwmOutSynth>
 8004618:	e003      	b.n	8004622 <setup+0x6e2>
			} else {
				motorPwmOutSynth( 0, 0 );
 800461a:	2100      	movs	r1, #0
 800461c:	2000      	movs	r0, #0
 800461e:	f7ff fc4d 	bl	8003ebc <motorPwmOutSynth>
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8004622:	2101      	movs	r1, #1
 8004624:	4866      	ldr	r0, [pc, #408]	; (80047c0 <setup+0x880>)
 8004626:	f000 fc8d 	bl	8004f44 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <setup+0x880>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b04      	cmp	r3, #4
 8004630:	d103      	bne.n	800463a <setup+0x6fa>
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <setup+0x880>)
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e006      	b.n	8004648 <setup+0x708>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 800463a:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <setup+0x880>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <setup+0x708>
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <setup+0x880>)
 8004644:	2203      	movs	r2, #3
 8004646:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <setup+0x880>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d061      	beq.n	8004714 <setup+0x7d4>
 8004650:	2b03      	cmp	r3, #3
 8004652:	f300 8373 	bgt.w	8004d3c <setup+0xdfc>
 8004656:	2b01      	cmp	r3, #1
 8004658:	d002      	beq.n	8004660 <setup+0x720>
 800465a:	2b02      	cmp	r3, #2
 800465c:	d02d      	beq.n	80046ba <setup+0x77a>
					}
					
					dataTuningUD ( &kd3_buff, 1 );
					break;
			}
			break;
 800465e:	e36d      	b.n	8004d3c <setup+0xdfc>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <setup+0x848>)
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004668:	d302      	bcc.n	8004670 <setup+0x730>
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <setup+0x848>)
 800466c:	2200      	movs	r2, #0
 800466e:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 8004670:	4b45      	ldr	r3, [pc, #276]	; (8004788 <setup+0x848>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2bf9      	cmp	r3, #249	; 0xf9
 8004676:	d80d      	bhi.n	8004694 <setup+0x754>
 8004678:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <setup+0x874>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <setup+0x754>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki3_buff, kd3_buff);
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <setup+0x884>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <setup+0x864>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	494f      	ldr	r1, [pc, #316]	; (80047c8 <setup+0x888>)
 800468c:	2001      	movs	r0, #1
 800468e:	f7fc fe11 	bl	80012b4 <lcdRowPrintf>
 8004692:	e00d      	b.n	80046b0 <setup+0x770>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 8004694:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <setup+0x88c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <setup+0x884>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <setup+0x864>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	460b      	mov	r3, r1
 80046a8:	493c      	ldr	r1, [pc, #240]	; (800479c <setup+0x85c>)
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fc fe02 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp3_buff, 1 );
 80046b0:	2101      	movs	r1, #1
 80046b2:	4846      	ldr	r0, [pc, #280]	; (80047cc <setup+0x88c>)
 80046b4:	f000 fbc2 	bl	8004e3c <dataTuningUD>
					break;
 80046b8:	e059      	b.n	800476e <setup+0x82e>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <setup+0x848>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046c2:	d302      	bcc.n	80046ca <setup+0x78a>
 80046c4:	4b30      	ldr	r3, [pc, #192]	; (8004788 <setup+0x848>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 80046ca:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <setup+0x848>)
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	2bf9      	cmp	r3, #249	; 0xf9
 80046d0:	d80d      	bhi.n	80046ee <setup+0x7ae>
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <setup+0x874>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <setup+0x7ae>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp3_buff, kd3_buff);
 80046da:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <setup+0x88c>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <setup+0x864>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	492b      	ldr	r1, [pc, #172]	; (8004794 <setup+0x854>)
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fc fde4 	bl	80012b4 <lcdRowPrintf>
 80046ec:	e00d      	b.n	800470a <setup+0x7ca>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <setup+0x88c>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <setup+0x884>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <setup+0x864>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	460b      	mov	r3, r1
 8004702:	4926      	ldr	r1, [pc, #152]	; (800479c <setup+0x85c>)
 8004704:	2001      	movs	r0, #1
 8004706:	f7fc fdd5 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki3_buff, 1 );
 800470a:	2101      	movs	r1, #1
 800470c:	482d      	ldr	r0, [pc, #180]	; (80047c4 <setup+0x884>)
 800470e:	f000 fb95 	bl	8004e3c <dataTuningUD>
					break;
 8004712:	e02c      	b.n	800476e <setup+0x82e>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8004714:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <setup+0x848>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800471c:	d302      	bcc.n	8004724 <setup+0x7e4>
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <setup+0x848>)
 8004720:	2200      	movs	r2, #0
 8004722:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 && trace_test == 0 ) {
 8004724:	4b18      	ldr	r3, [pc, #96]	; (8004788 <setup+0x848>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	2bf9      	cmp	r3, #249	; 0xf9
 800472a:	d80d      	bhi.n	8004748 <setup+0x808>
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <setup+0x874>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <setup+0x808>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp3_buff, ki3_buff);
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <setup+0x88c>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <setup+0x884>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4918      	ldr	r1, [pc, #96]	; (80047a0 <setup+0x860>)
 8004740:	2001      	movs	r0, #1
 8004742:	f7fc fdb7 	bl	80012b4 <lcdRowPrintf>
 8004746:	e00d      	b.n	8004764 <setup+0x824>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp3_buff, ki3_buff, kd3_buff);
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <setup+0x88c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <setup+0x884>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <setup+0x864>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	460b      	mov	r3, r1
 800475c:	490f      	ldr	r1, [pc, #60]	; (800479c <setup+0x85c>)
 800475e:	2001      	movs	r0, #1
 8004760:	f7fc fda8 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd3_buff, 1 );
 8004764:	2101      	movs	r1, #1
 8004766:	480f      	ldr	r0, [pc, #60]	; (80047a4 <setup+0x864>)
 8004768:	f000 fb68 	bl	8004e3c <dataTuningUD>
					break;
 800476c:	bf00      	nop
			break;
 800476e:	e2e5      	b.n	8004d3c <setup+0xdfc>
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x6:
			dataTuningLR( &pattern_sensors, 1 );
 8004770:	2101      	movs	r1, #1
 8004772:	4817      	ldr	r0, [pc, #92]	; (80047d0 <setup+0x890>)
 8004774:	f000 fbe6 	bl	8004f44 <dataTuningLR>
			
			if ( pattern_sensors == 11 ) pattern_sensors = 1;
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <setup+0x890>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b0b      	cmp	r3, #11
 800477e:	d129      	bne.n	80047d4 <setup+0x894>
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <setup+0x890>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e02c      	b.n	80047e2 <setup+0x8a2>
 8004788:	200027e2 	.word	0x200027e2
 800478c:	20000034 	.word	0x20000034
 8004790:	20002831 	.word	0x20002831
 8004794:	08014284 	.word	0x08014284
 8004798:	20000035 	.word	0x20000035
 800479c:	08014278 	.word	0x08014278
 80047a0:	08014290 	.word	0x08014290
 80047a4:	20000038 	.word	0x20000038
 80047a8:	08014260 	.word	0x08014260
 80047ac:	20002838 	.word	0x20002838
 80047b0:	20002810 	.word	0x20002810
 80047b4:	200027f0 	.word	0x200027f0
 80047b8:	20002848 	.word	0x20002848
 80047bc:	20002808 	.word	0x20002808
 80047c0:	20000029 	.word	0x20000029
 80047c4:	20000037 	.word	0x20000037
 80047c8:	0801426c 	.word	0x0801426c
 80047cc:	20000036 	.word	0x20000036
 80047d0:	20000024 	.word	0x20000024
			else if ( pattern_sensors == 0 ) pattern_sensors = 10;
 80047d4:	4ba9      	ldr	r3, [pc, #676]	; (8004a7c <setup+0xb3c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <setup+0x8a2>
 80047dc:	4ba7      	ldr	r3, [pc, #668]	; (8004a7c <setup+0xb3c>)
 80047de:	220a      	movs	r2, #10
 80047e0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80047e2:	4ba7      	ldr	r3, [pc, #668]	; (8004a80 <setup+0xb40>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047ea:	635a      	str	r2, [r3, #52]	; 0x34

			switch( pattern_sensors ) {
 80047ec:	4ba3      	ldr	r3, [pc, #652]	; (8004a7c <setup+0xb3c>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	f200 82a4 	bhi.w	8004d40 <setup+0xe00>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <setup+0x8c0>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004829 	.word	0x08004829
 8004804:	08004871 	.word	0x08004871
 8004808:	0800489f 	.word	0x0800489f
 800480c:	080048ef 	.word	0x080048ef
 8004810:	08004909 	.word	0x08004909
 8004814:	0800495b 	.word	0x0800495b
 8004818:	08004a63 	.word	0x08004a63
 800481c:	08004b71 	.word	0x08004b71
 8004820:	08004c53 	.word	0x08004c53
 8004824:	08004c81 	.word	0x08004c81
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 8004828:	4996      	ldr	r1, [pc, #600]	; (8004a84 <setup+0xb44>)
 800482a:	2000      	movs	r0, #0
 800482c:	f7fc fd42 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 8004830:	4995      	ldr	r1, [pc, #596]	; (8004a88 <setup+0xb48>)
 8004832:	2001      	movs	r0, #1
 8004834:	f7fc fd3e 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8004838:	2300      	movs	r3, #0
 800483a:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 800483c:	4b93      	ldr	r3, [pc, #588]	; (8004a8c <setup+0xb4c>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	f040 822f 	bne.w	8004ca4 <setup+0xd64>
						cnt_led = 0x00;
 8004846:	2300      	movs	r3, #0
 8004848:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 800484a:	e00a      	b.n	8004862 <setup+0x922>
							ledOut( cnt_led );
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd fe9c 	bl	800258c <ledOut>
							cnt_led++;
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	3301      	adds	r3, #1
 8004858:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 800485a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800485e:	f001 fcc3 	bl	80061e8 <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	2b07      	cmp	r3, #7
 8004866:	d9f1      	bls.n	800484c <setup+0x90c>
						}
						ledOut( 0 );
 8004868:	2000      	movs	r0, #0
 800486a:	f7fd fe8f 	bl	800258c <ledOut>
					}
					break;
 800486e:	e219      	b.n	8004ca4 <setup+0xd64>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 8004870:	4b87      	ldr	r3, [pc, #540]	; (8004a90 <setup+0xb50>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	4987      	ldr	r1, [pc, #540]	; (8004a94 <setup+0xb54>)
 8004878:	2000      	movs	r0, #0
 800487a:	f7fc fd1b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 800487e:	4b86      	ldr	r3, [pc, #536]	; (8004a98 <setup+0xb58>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	4985      	ldr	r1, [pc, #532]	; (8004a9c <setup+0xb5c>)
 8004886:	2001      	movs	r0, #1
 8004888:	f7fc fd14 	bl	80012b4 <lcdRowPrintf>

					if(swValTact == SW_PUSH) encTotalN = 0;
 800488c:	4b7f      	ldr	r3, [pc, #508]	; (8004a8c <setup+0xb4c>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f040 8209 	bne.w	8004ca8 <setup+0xd68>
 8004896:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <setup+0xb58>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
					break;
 800489c:	e204      	b.n	8004ca8 <setup+0xd68>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 800489e:	4980      	ldr	r1, [pc, #512]	; (8004aa0 <setup+0xb60>)
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7fc fd07 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 80048a6:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <setup+0xb64>)
 80048a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ac:	461a      	mov	r2, r3
 80048ae:	497e      	ldr	r1, [pc, #504]	; (8004aa8 <setup+0xb68>)
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7fc fcff 	bl	80012b4 <lcdRowPrintf>
					// モータ回転
					dataTuningUD ( &motorTestPwm, 100 );
 80048b6:	2164      	movs	r1, #100	; 0x64
 80048b8:	487a      	ldr	r0, [pc, #488]	; (8004aa4 <setup+0xb64>)
 80048ba:	f000 fabf 	bl	8004e3c <dataTuningUD>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 80048be:	4b7b      	ldr	r3, [pc, #492]	; (8004aac <setup+0xb6c>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d10a      	bne.n	80048dc <setup+0x99c>
 80048c6:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <setup+0xb64>)
 80048c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048cc:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <setup+0xb64>)
 80048ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fa81 	bl	8003ddc <motorPwmOut>
 80048da:	e003      	b.n	80048e4 <setup+0x9a4>
					else motorPwmOut(0, 0);
 80048dc:	2100      	movs	r1, #0
 80048de:	2000      	movs	r0, #0
 80048e0:	f7ff fa7c 	bl	8003ddc <motorPwmOut>
										
					data_select( &motor_test, SW_PUSH );
 80048e4:	2102      	movs	r1, #2
 80048e6:	4871      	ldr	r0, [pc, #452]	; (8004aac <setup+0xb6c>)
 80048e8:	f000 fa72 	bl	8004dd0 <data_select>
					break;
 80048ec:	e1e3      	b.n	8004cb6 <setup+0xd76>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 80048ee:	4970      	ldr	r1, [pc, #448]	; (8004ab0 <setup+0xb70>)
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fc fcdf 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkerSensor());
 80048f6:	f7ff f9e7 	bl	8003cc8 <getMarkerSensor>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	496d      	ldr	r1, [pc, #436]	; (8004ab4 <setup+0xb74>)
 8004900:	2001      	movs	r0, #1
 8004902:	f7fc fcd7 	bl	80012b4 <lcdRowPrintf>
					break;
 8004906:	e1d6      	b.n	8004cb6 <setup+0xd76>

				case 5:
					// 電流センサ
					lcdRowPrintf(UPROW, "   %3.0fmA", CurrntR);
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <setup+0xb78>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	496b      	ldr	r1, [pc, #428]	; (8004abc <setup+0xb7c>)
 8004910:	2000      	movs	r0, #0
 8004912:	f7fc fccf 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.0fmA", CurrntL);
 8004916:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <setup+0xb80>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	4967      	ldr	r1, [pc, #412]	; (8004abc <setup+0xb7c>)
 800491e:	2001      	movs	r0, #1
 8004920:	f7fc fcc8 	bl	80012b4 <lcdRowPrintf>

					motorTestPwm = 80;
 8004924:	4b5f      	ldr	r3, [pc, #380]	; (8004aa4 <setup+0xb64>)
 8004926:	2250      	movs	r2, #80	; 0x50
 8004928:	801a      	strh	r2, [r3, #0]
					data_select( &motor_test, SW_PUSH );
 800492a:	2102      	movs	r1, #2
 800492c:	485f      	ldr	r0, [pc, #380]	; (8004aac <setup+0xb6c>)
 800492e:	f000 fa4f 	bl	8004dd0 <data_select>
					if ( motor_test == 1 ) motorPwmOut(motorTestPwm,motorTestPwm);
 8004932:	4b5e      	ldr	r3, [pc, #376]	; (8004aac <setup+0xb6c>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10a      	bne.n	8004950 <setup+0xa10>
 800493a:	4b5a      	ldr	r3, [pc, #360]	; (8004aa4 <setup+0xb64>)
 800493c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004940:	4a58      	ldr	r2, [pc, #352]	; (8004aa4 <setup+0xb64>)
 8004942:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fa47 	bl	8003ddc <motorPwmOut>
					else motorPwmOut(0, 0);
					break;
 800494e:	e1b2      	b.n	8004cb6 <setup+0xd76>
					else motorPwmOut(0, 0);
 8004950:	2100      	movs	r1, #0
 8004952:	2000      	movs	r0, #0
 8004954:	f7ff fa42 	bl	8003ddc <motorPwmOut>
					break;
 8004958:	e1ad      	b.n	8004cb6 <setup+0xd76>

				case 6:
					// ラインセンサ
					dataTuningUD( &pattern_sensor_line, 1 );
 800495a:	2101      	movs	r1, #1
 800495c:	4859      	ldr	r0, [pc, #356]	; (8004ac4 <setup+0xb84>)
 800495e:	f000 fa6d 	bl	8004e3c <dataTuningUD>
					if ( pattern_sensor_line == 7 ) pattern_sensor_line = 1;
 8004962:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <setup+0xb84>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b07      	cmp	r3, #7
 8004968:	d103      	bne.n	8004972 <setup+0xa32>
 800496a:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <setup+0xb84>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e006      	b.n	8004980 <setup+0xa40>
					else if ( pattern_sensor_line == 0 ) pattern_sensor_line = 6;
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <setup+0xb84>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <setup+0xa40>
 800497a:	4b52      	ldr	r3, [pc, #328]	; (8004ac4 <setup+0xb84>)
 800497c:	2206      	movs	r2, #6
 800497e:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_line ) {
 8004980:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <setup+0xb84>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	3b01      	subs	r3, #1
 8004986:	2b05      	cmp	r3, #5
 8004988:	f200 8190 	bhi.w	8004cac <setup+0xd6c>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <setup+0xa54>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049ad 	.word	0x080049ad
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049e9 	.word	0x080049e9
 80049a0:	08004a07 	.word	0x08004a07
 80049a4:	08004a25 	.word	0x08004a25
 80049a8:	08004a43 	.word	0x08004a43
						case 1:
							lcdRowPrintf(UPROW, "L1  %4d",lSensor[0]);
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <setup+0xb88>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4946      	ldr	r1, [pc, #280]	; (8004acc <setup+0xb8c>)
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fc fc7d 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L2  %4d",lSensor[1]);
 80049ba:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <setup+0xb88>)
 80049bc:	885b      	ldrh	r3, [r3, #2]
 80049be:	461a      	mov	r2, r3
 80049c0:	4943      	ldr	r1, [pc, #268]	; (8004ad0 <setup+0xb90>)
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7fc fc76 	bl	80012b4 <lcdRowPrintf>
							break;
 80049c8:	e04a      	b.n	8004a60 <setup+0xb20>

						case 2:
							lcdRowPrintf(UPROW, "L3  %4d",lSensor[2]);
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <setup+0xb88>)
 80049cc:	889b      	ldrh	r3, [r3, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	4940      	ldr	r1, [pc, #256]	; (8004ad4 <setup+0xb94>)
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7fc fc6e 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L4  %4d",lSensor[3]);
 80049d8:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <setup+0xb88>)
 80049da:	88db      	ldrh	r3, [r3, #6]
 80049dc:	461a      	mov	r2, r3
 80049de:	493e      	ldr	r1, [pc, #248]	; (8004ad8 <setup+0xb98>)
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7fc fc67 	bl	80012b4 <lcdRowPrintf>
							break;
 80049e6:	e03b      	b.n	8004a60 <setup+0xb20>
						case 3:
							lcdRowPrintf(UPROW, "L5  %4d",lSensor[4]);
 80049e8:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <setup+0xb88>)
 80049ea:	891b      	ldrh	r3, [r3, #8]
 80049ec:	461a      	mov	r2, r3
 80049ee:	493b      	ldr	r1, [pc, #236]	; (8004adc <setup+0xb9c>)
 80049f0:	2000      	movs	r0, #0
 80049f2:	f7fc fc5f 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "L6  %4d",lSensor[5]);
 80049f6:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <setup+0xb88>)
 80049f8:	895b      	ldrh	r3, [r3, #10]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4938      	ldr	r1, [pc, #224]	; (8004ae0 <setup+0xba0>)
 80049fe:	2001      	movs	r0, #1
 8004a00:	f7fc fc58 	bl	80012b4 <lcdRowPrintf>
							break;
 8004a04:	e02c      	b.n	8004a60 <setup+0xb20>
						
						case 4:
							lcdRowPrintf(UPROW, "R1  %4d",lSensor[11]);
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <setup+0xb88>)
 8004a08:	8adb      	ldrh	r3, [r3, #22]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	4935      	ldr	r1, [pc, #212]	; (8004ae4 <setup+0xba4>)
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7fc fc50 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R2  %4d",lSensor[10]);
 8004a14:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <setup+0xb88>)
 8004a16:	8a9b      	ldrh	r3, [r3, #20]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4933      	ldr	r1, [pc, #204]	; (8004ae8 <setup+0xba8>)
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fc fc49 	bl	80012b4 <lcdRowPrintf>
							break;
 8004a22:	e01d      	b.n	8004a60 <setup+0xb20>

						case 5:
							lcdRowPrintf(UPROW, "R3  %4d",lSensor[9]);
 8004a24:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <setup+0xb88>)
 8004a26:	8a5b      	ldrh	r3, [r3, #18]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4930      	ldr	r1, [pc, #192]	; (8004aec <setup+0xbac>)
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fc fc41 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R4  %4d",lSensor[8]);
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <setup+0xb88>)
 8004a34:	8a1b      	ldrh	r3, [r3, #16]
 8004a36:	461a      	mov	r2, r3
 8004a38:	492d      	ldr	r1, [pc, #180]	; (8004af0 <setup+0xbb0>)
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f7fc fc3a 	bl	80012b4 <lcdRowPrintf>
							break;
 8004a40:	e00e      	b.n	8004a60 <setup+0xb20>

						case 6:
							lcdRowPrintf(UPROW, "R5  %4d",lSensor[7]);
 8004a42:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <setup+0xb88>)
 8004a44:	89db      	ldrh	r3, [r3, #14]
 8004a46:	461a      	mov	r2, r3
 8004a48:	492a      	ldr	r1, [pc, #168]	; (8004af4 <setup+0xbb4>)
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fc fc32 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "R6  %4d",lSensor[6]);
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <setup+0xb88>)
 8004a52:	899b      	ldrh	r3, [r3, #12]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4928      	ldr	r1, [pc, #160]	; (8004af8 <setup+0xbb8>)
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f7fc fc2b 	bl	80012b4 <lcdRowPrintf>
							break;
 8004a5e:	bf00      	nop
					}
					break;
 8004a60:	e124      	b.n	8004cac <setup+0xd6c>
				case 7:
					// 加速度
					dataTuningUD( &pattern_sensor_accele, 1 );
 8004a62:	2101      	movs	r1, #1
 8004a64:	4825      	ldr	r0, [pc, #148]	; (8004afc <setup+0xbbc>)
 8004a66:	f000 f9e9 	bl	8004e3c <dataTuningUD>
					if ( pattern_sensor_accele == 4 ) pattern_sensor_accele = 1;
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <setup+0xbbc>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d146      	bne.n	8004b00 <setup+0xbc0>
 8004a72:	4b22      	ldr	r3, [pc, #136]	; (8004afc <setup+0xbbc>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e049      	b.n	8004b0e <setup+0xbce>
 8004a7a:	bf00      	nop
 8004a7c:	20000024 	.word	0x20000024
 8004a80:	200005e8 	.word	0x200005e8
 8004a84:	0801429c 	.word	0x0801429c
 8004a88:	08014204 	.word	0x08014204
 8004a8c:	200027f4 	.word	0x200027f4
 8004a90:	20000300 	.word	0x20000300
 8004a94:	080142a8 	.word	0x080142a8
 8004a98:	20000308 	.word	0x20000308
 8004a9c:	080142b0 	.word	0x080142b0
 8004aa0:	080142b8 	.word	0x080142b8
 8004aa4:	2000002c 	.word	0x2000002c
 8004aa8:	080142c4 	.word	0x080142c4
 8004aac:	200027ef 	.word	0x200027ef
 8004ab0:	080142d0 	.word	0x080142d0
 8004ab4:	080142dc 	.word	0x080142dc
 8004ab8:	200002c8 	.word	0x200002c8
 8004abc:	080142e8 	.word	0x080142e8
 8004ac0:	200002c0 	.word	0x200002c0
 8004ac4:	20000025 	.word	0x20000025
 8004ac8:	20000344 	.word	0x20000344
 8004acc:	080142f4 	.word	0x080142f4
 8004ad0:	080142fc 	.word	0x080142fc
 8004ad4:	08014304 	.word	0x08014304
 8004ad8:	0801430c 	.word	0x0801430c
 8004adc:	08014314 	.word	0x08014314
 8004ae0:	0801431c 	.word	0x0801431c
 8004ae4:	08014324 	.word	0x08014324
 8004ae8:	0801432c 	.word	0x0801432c
 8004aec:	08014334 	.word	0x08014334
 8004af0:	0801433c 	.word	0x0801433c
 8004af4:	08014344 	.word	0x08014344
 8004af8:	0801434c 	.word	0x0801434c
 8004afc:	20000026 	.word	0x20000026
					else if ( pattern_sensor_accele == 0 ) pattern_sensor_accele = 3;
 8004b00:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <setup+0xe0c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <setup+0xbce>
 8004b08:	4b90      	ldr	r3, [pc, #576]	; (8004d4c <setup+0xe0c>)
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_accele ) {
 8004b0e:	4b8f      	ldr	r3, [pc, #572]	; (8004d4c <setup+0xe0c>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d01f      	beq.n	8004b56 <setup+0xc16>
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	f300 80ca 	bgt.w	8004cb0 <setup+0xd70>
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d002      	beq.n	8004b26 <setup+0xbe6>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d00c      	beq.n	8004b3e <setup+0xbfe>
						case 3:
							lcdRowPrintf(UPROW, "Z accele");
							lcdRowPrintf(LOWROW, "    %4.0f",acceleration[INDEX_Z]);
							break;
					}
					break;
 8004b24:	e0c4      	b.n	8004cb0 <setup+0xd70>
							lcdRowPrintf(UPROW, "X accele");
 8004b26:	498a      	ldr	r1, [pc, #552]	; (8004d50 <setup+0xe10>)
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f7fc fbc3 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleration[INDEX_X]);
 8004b2e:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <setup+0xe14>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	4988      	ldr	r1, [pc, #544]	; (8004d58 <setup+0xe18>)
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7fc fbbc 	bl	80012b4 <lcdRowPrintf>
							break;
 8004b3c:	e017      	b.n	8004b6e <setup+0xc2e>
							lcdRowPrintf(UPROW, "Y accele");
 8004b3e:	4987      	ldr	r1, [pc, #540]	; (8004d5c <setup+0xe1c>)
 8004b40:	2000      	movs	r0, #0
 8004b42:	f7fc fbb7 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleration[INDEX_Y]);
 8004b46:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <setup+0xe14>)
 8004b48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b4c:	4982      	ldr	r1, [pc, #520]	; (8004d58 <setup+0xe18>)
 8004b4e:	2001      	movs	r0, #1
 8004b50:	f7fc fbb0 	bl	80012b4 <lcdRowPrintf>
							break;
 8004b54:	e00b      	b.n	8004b6e <setup+0xc2e>
							lcdRowPrintf(UPROW, "Z accele");
 8004b56:	4982      	ldr	r1, [pc, #520]	; (8004d60 <setup+0xe20>)
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7fc fbab 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",acceleration[INDEX_Z]);
 8004b5e:	4b7d      	ldr	r3, [pc, #500]	; (8004d54 <setup+0xe14>)
 8004b60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b64:	497c      	ldr	r1, [pc, #496]	; (8004d58 <setup+0xe18>)
 8004b66:	2001      	movs	r0, #1
 8004b68:	f7fc fba4 	bl	80012b4 <lcdRowPrintf>
							break;
 8004b6c:	bf00      	nop
					break;
 8004b6e:	e09f      	b.n	8004cb0 <setup+0xd70>
				case 8:
					// 角速度
					dataTuningUD( &pattern_sensor_gyro, 1 );
 8004b70:	2101      	movs	r1, #1
 8004b72:	487c      	ldr	r0, [pc, #496]	; (8004d64 <setup+0xe24>)
 8004b74:	f000 f962 	bl	8004e3c <dataTuningUD>
					if ( pattern_sensor_gyro == 7 ) pattern_sensor_gyro = 1;
 8004b78:	4b7a      	ldr	r3, [pc, #488]	; (8004d64 <setup+0xe24>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d103      	bne.n	8004b88 <setup+0xc48>
 8004b80:	4b78      	ldr	r3, [pc, #480]	; (8004d64 <setup+0xe24>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e006      	b.n	8004b96 <setup+0xc56>
					else if ( pattern_sensor_gyro == 0 ) pattern_sensor_gyro = 6;
 8004b88:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <setup+0xe24>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <setup+0xc56>
 8004b90:	4b74      	ldr	r3, [pc, #464]	; (8004d64 <setup+0xe24>)
 8004b92:	2206      	movs	r2, #6
 8004b94:	701a      	strb	r2, [r3, #0]

					switch( pattern_sensor_gyro ) {
 8004b96:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <setup+0xe24>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	f200 8089 	bhi.w	8004cb4 <setup+0xd74>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <setup+0xc68>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004c39 	.word	0x08004c39
						case 1:
							lcdRowPrintf(UPROW, "X gyro  ");
 8004bc0:	4969      	ldr	r1, [pc, #420]	; (8004d68 <setup+0xe28>)
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7fc fb76 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angularVelocity[INDEX_X]);
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <setup+0xe2c>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	4962      	ldr	r1, [pc, #392]	; (8004d58 <setup+0xe18>)
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7fc fb6f 	bl	80012b4 <lcdRowPrintf>
							break;
 8004bd6:	e03b      	b.n	8004c50 <setup+0xd10>
						case 2:
							lcdRowPrintf(UPROW, "Y gyro  ");
 8004bd8:	4965      	ldr	r1, [pc, #404]	; (8004d70 <setup+0xe30>)
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f7fc fb6a 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angularVelocity[INDEX_Y]);
 8004be0:	4b62      	ldr	r3, [pc, #392]	; (8004d6c <setup+0xe2c>)
 8004be2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004be6:	495c      	ldr	r1, [pc, #368]	; (8004d58 <setup+0xe18>)
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7fc fb63 	bl	80012b4 <lcdRowPrintf>
							break;
 8004bee:	e02f      	b.n	8004c50 <setup+0xd10>
						case 3:
							lcdRowPrintf(UPROW, "Z gyro  ");
 8004bf0:	4960      	ldr	r1, [pc, #384]	; (8004d74 <setup+0xe34>)
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fc fb5e 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angularVelocity[INDEX_Z]);
 8004bf8:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <setup+0xe2c>)
 8004bfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004bfe:	4956      	ldr	r1, [pc, #344]	; (8004d58 <setup+0xe18>)
 8004c00:	2001      	movs	r0, #1
 8004c02:	f7fc fb57 	bl	80012b4 <lcdRowPrintf>
							break;
 8004c06:	e023      	b.n	8004c50 <setup+0xd10>
						case 4:
							lcdRowPrintf(UPROW, "X angle ");
 8004c08:	495b      	ldr	r1, [pc, #364]	; (8004d78 <setup+0xe38>)
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7fc fb52 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angle[INDEX_X]);
 8004c10:	4b5a      	ldr	r3, [pc, #360]	; (8004d7c <setup+0xe3c>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	4950      	ldr	r1, [pc, #320]	; (8004d58 <setup+0xe18>)
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fc fb4b 	bl	80012b4 <lcdRowPrintf>
							break;
 8004c1e:	e017      	b.n	8004c50 <setup+0xd10>
						case 5:
							lcdRowPrintf(UPROW, "Y angle ");
 8004c20:	4957      	ldr	r1, [pc, #348]	; (8004d80 <setup+0xe40>)
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7fc fb46 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angle[INDEX_Y]);
 8004c28:	4b54      	ldr	r3, [pc, #336]	; (8004d7c <setup+0xe3c>)
 8004c2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c2e:	494a      	ldr	r1, [pc, #296]	; (8004d58 <setup+0xe18>)
 8004c30:	2001      	movs	r0, #1
 8004c32:	f7fc fb3f 	bl	80012b4 <lcdRowPrintf>
							break;
 8004c36:	e00b      	b.n	8004c50 <setup+0xd10>
						case 6:
							lcdRowPrintf(UPROW, "Z angle ");
 8004c38:	4952      	ldr	r1, [pc, #328]	; (8004d84 <setup+0xe44>)
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7fc fb3a 	bl	80012b4 <lcdRowPrintf>
							lcdRowPrintf(LOWROW, "    %4.0f",angle[INDEX_Z]);
 8004c40:	4b4e      	ldr	r3, [pc, #312]	; (8004d7c <setup+0xe3c>)
 8004c42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c46:	4944      	ldr	r1, [pc, #272]	; (8004d58 <setup+0xe18>)
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f7fc fb33 	bl	80012b4 <lcdRowPrintf>
							break;
 8004c4e:	bf00      	nop
					}
					break;
 8004c50:	e030      	b.n	8004cb4 <setup+0xd74>
				case 9:
					// PID制御量
					targetSpeed = 120;
 8004c52:	494d      	ldr	r1, [pc, #308]	; (8004d88 <setup+0xe48>)
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <setup+0xe4c>)
 8004c5a:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 8004c5e:	4b4c      	ldr	r3, [pc, #304]	; (8004d90 <setup+0xe50>)
 8004c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c64:	461a      	mov	r2, r3
 8004c66:	494b      	ldr	r1, [pc, #300]	; (8004d94 <setup+0xe54>)
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fc fb23 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",yawPwm);
 8004c6e:	4b4a      	ldr	r3, [pc, #296]	; (8004d98 <setup+0xe58>)
 8004c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c74:	461a      	mov	r2, r3
 8004c76:	4949      	ldr	r1, [pc, #292]	; (8004d9c <setup+0xe5c>)
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f7fc fb1b 	bl	80012b4 <lcdRowPrintf>
					break;
 8004c7e:	e01a      	b.n	8004cb6 <setup+0xd76>
				case 10:
					// 仮想センサ角度
					targetSpeed = 120;
 8004c80:	4941      	ldr	r1, [pc, #260]	; (8004d88 <setup+0xe48>)
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <setup+0xe4c>)
 8004c88:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "Anglesen");
 8004c8c:	4944      	ldr	r1, [pc, #272]	; (8004da0 <setup+0xe60>)
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fc fb10 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.1lf", angleSensor);
 8004c94:	4b43      	ldr	r3, [pc, #268]	; (8004da4 <setup+0xe64>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	4943      	ldr	r1, [pc, #268]	; (8004da8 <setup+0xe68>)
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f7fc fb09 	bl	80012b4 <lcdRowPrintf>
					// lcdRowPrintf(LOWROW, "      %2d", angleSensor);
					break;
 8004ca2:	e008      	b.n	8004cb6 <setup+0xd76>
					break;
 8004ca4:	bf00      	nop
 8004ca6:	e04b      	b.n	8004d40 <setup+0xe00>
					break;
 8004ca8:	bf00      	nop
 8004caa:	e049      	b.n	8004d40 <setup+0xe00>
					break;
 8004cac:	bf00      	nop
 8004cae:	e047      	b.n	8004d40 <setup+0xe00>
					break;
 8004cb0:	bf00      	nop
 8004cb2:	e045      	b.n	8004d40 <setup+0xe00>
					break;
 8004cb4:	bf00      	nop
			} // switch
			break;
 8004cb6:	e043      	b.n	8004d40 <setup+0xe00>
		//------------------------------------------------------------------
		// Log
		//------------------------------------------------------------------
		case 0x7:
			dataTuningLR( &pattern_sensors, 1 );
 8004cb8:	2101      	movs	r1, #1
 8004cba:	483c      	ldr	r0, [pc, #240]	; (8004dac <setup+0xe6c>)
 8004cbc:	f000 f942 	bl	8004f44 <dataTuningLR>
			lcdRowPrintf(UPROW, "LOG     ");
 8004cc0:	493b      	ldr	r1, [pc, #236]	; (8004db0 <setup+0xe70>)
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fc faf6 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "       %d", modeLOG);
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <setup+0xe74>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	493a      	ldr	r1, [pc, #232]	; (8004db8 <setup+0xe78>)
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f7fc faef 	bl	80012b4 <lcdRowPrintf>

			
			switch (patternLog) {
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <setup+0xe7c>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d002      	beq.n	8004ce4 <setup+0xda4>
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d00a      	beq.n	8004cf8 <setup+0xdb8>
					patternLog = 1;
				}
				break;
			
			default:
				break;
 8004ce2:	e016      	b.n	8004d12 <setup+0xdd2>
				if (swValTact == SW_UP) {
 8004ce4:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <setup+0xe80>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10f      	bne.n	8004d0c <setup+0xdcc>
					initLog();
 8004cec:	f7fe fd12 	bl	8003714 <initLog>
					patternLog = 2;
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <setup+0xe7c>)
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
				break;
 8004cf6:	e009      	b.n	8004d0c <setup+0xdcc>
				if (swValTact == SW_DOWN) {
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <setup+0xe80>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d107      	bne.n	8004d10 <setup+0xdd0>
					endLog();
 8004d00:	f7fe ffc4 	bl	8003c8c <endLog>
					patternLog = 1;
 8004d04:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <setup+0xe7c>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
				break;
 8004d0a:	e001      	b.n	8004d10 <setup+0xdd0>
				break;
 8004d0c:	bf00      	nop
 8004d0e:	e018      	b.n	8004d42 <setup+0xe02>
				break;
 8004d10:	bf00      	nop
			}
			break;
 8004d12:	e016      	b.n	8004d42 <setup+0xe02>

	default:
		lcdRowPrintf(UPROW, "%#x     ", swValRotary);
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <setup+0xe84>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	492b      	ldr	r1, [pc, #172]	; (8004dc8 <setup+0xe88>)
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f7fc fac9 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 8004d22:	492a      	ldr	r1, [pc, #168]	; (8004dcc <setup+0xe8c>)
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fc fac5 	bl	80012b4 <lcdRowPrintf>
		break;
 8004d2a:	e00a      	b.n	8004d42 <setup+0xe02>
			break;
 8004d2c:	bf00      	nop
 8004d2e:	e008      	b.n	8004d42 <setup+0xe02>
			break;
 8004d30:	bf00      	nop
 8004d32:	e006      	b.n	8004d42 <setup+0xe02>
			break;
 8004d34:	bf00      	nop
 8004d36:	e004      	b.n	8004d42 <setup+0xe02>
			break;
 8004d38:	bf00      	nop
 8004d3a:	e002      	b.n	8004d42 <setup+0xe02>
			break;
 8004d3c:	bf00      	nop
 8004d3e:	e000      	b.n	8004d42 <setup+0xe02>
			break;
 8004d40:	bf00      	nop
	} // switch
	// } // cntSW
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000026 	.word	0x20000026
 8004d50:	08014354 	.word	0x08014354
 8004d54:	20000288 	.word	0x20000288
 8004d58:	08014360 	.word	0x08014360
 8004d5c:	0801436c 	.word	0x0801436c
 8004d60:	08014378 	.word	0x08014378
 8004d64:	20000027 	.word	0x20000027
 8004d68:	08014384 	.word	0x08014384
 8004d6c:	20000270 	.word	0x20000270
 8004d70:	08014390 	.word	0x08014390
 8004d74:	0801439c 	.word	0x0801439c
 8004d78:	080143a8 	.word	0x080143a8
 8004d7c:	200002a0 	.word	0x200002a0
 8004d80:	080143b4 	.word	0x080143b4
 8004d84:	080143c0 	.word	0x080143c0
 8004d88:	20002810 	.word	0x20002810
 8004d8c:	405e0000 	.word	0x405e0000
 8004d90:	2000039a 	.word	0x2000039a
 8004d94:	080143cc 	.word	0x080143cc
 8004d98:	20002848 	.word	0x20002848
 8004d9c:	080143d4 	.word	0x080143d4
 8004da0:	080143dc 	.word	0x080143dc
 8004da4:	20000390 	.word	0x20000390
 8004da8:	080143e8 	.word	0x080143e8
 8004dac:	20000024 	.word	0x20000024
 8004db0:	080143f4 	.word	0x080143f4
 8004db4:	200002d5 	.word	0x200002d5
 8004db8:	08014400 	.word	0x08014400
 8004dbc:	2000002a 	.word	0x2000002a
 8004dc0:	200027f4 	.word	0x200027f4
 8004dc4:	200027f5 	.word	0x200027f5
 8004dc8:	0801440c 	.word	0x0801440c
 8004dcc:	08014418 	.word	0x08014418

08004dd0 <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <data_select+0x64>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11d      	bne.n	8004e22 <data_select+0x52>
		if ( *data == 1 && push == 0) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d10a      	bne.n	8004e04 <data_select+0x34>
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <data_select+0x68>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <data_select+0x34>
			push = 1;
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <data_select+0x68>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
			*data = 0;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 8004e02:	e011      	b.n	8004e28 <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <data_select+0x58>
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <data_select+0x68>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <data_select+0x58>
			push = 1;
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <data_select+0x68>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
			*data = 1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
}
 8004e20:	e002      	b.n	8004e28 <data_select+0x58>
		push = 0;
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <data_select+0x68>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	200027f4 	.word	0x200027f4
 8004e38:	200027ee 	.word	0x200027ee

08004e3c <dataTuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( void *data, uint8_t add )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 8004e4c:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <dataTuningUD+0xf8>)
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	2b31      	cmp	r3, #49	; 0x31
 8004e52:	d968      	bls.n	8004f26 <dataTuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 8004e54:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <dataTuningUD+0xfc>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d003      	beq.n	8004e64 <dataTuningUD+0x28>
 8004e5c:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <dataTuningUD+0xfc>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d155      	bne.n	8004f10 <dataTuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 8004e64:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <dataTuningUD+0x100>)
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <dataTuningUD+0x100>)
 8004e6e:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004e70:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <dataTuningUD+0xfc>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d123      	bne.n	8004ec0 <dataTuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <dataTuningUD+0x100>)
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	2b13      	cmp	r3, #19
 8004e7e:	d90b      	bls.n	8004e98 <dataTuningUD+0x5c>
					*data2 += add;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	b21a      	sxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004e96:	e042      	b.n	8004f1e <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <dataTuningUD+0x104>)
 8004e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d13d      	bne.n	8004f1e <dataTuningUD+0xe2>
					pushUD = 1;
 8004ea2:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <dataTuningUD+0x104>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004ebe:	e02e      	b.n	8004f1e <dataTuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	; (8004f38 <dataTuningUD+0xfc>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	d12a      	bne.n	8004f1e <dataTuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <dataTuningUD+0x100>)
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	2b13      	cmp	r3, #19
 8004ece:	d90b      	bls.n	8004ee8 <dataTuningUD+0xac>
					*data2 -= add;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004ee6:	e01a      	b.n	8004f1e <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8004ee8:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <dataTuningUD+0x104>)
 8004eea:	f993 3000 	ldrsb.w	r3, [r3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d115      	bne.n	8004f1e <dataTuningUD+0xe2>
					pushUD = 1;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <dataTuningUD+0x104>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	b21a      	sxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004f0e:	e006      	b.n	8004f1e <dataTuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <dataTuningUD+0x104>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <dataTuningUD+0x100>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e000      	b.n	8004f20 <dataTuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 8004f1e:	bf00      	nop
		}
		cntSetup2 = 0;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <dataTuningUD+0xf8>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	801a      	strh	r2, [r3, #0]
	}
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	200027e4 	.word	0x200027e4
 8004f38:	200027f4 	.word	0x200027f4
 8004f3c:	200027e8 	.word	0x200027e8
 8004f40:	200027ed 	.word	0x200027ed

08004f44 <dataTuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( void *data, uint8_t add )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 8004f54:	4b39      	ldr	r3, [pc, #228]	; (800503c <dataTuningLR+0xf8>)
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	2b31      	cmp	r3, #49	; 0x31
 8004f5a:	d968      	bls.n	800502e <dataTuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 8004f5c:	4b38      	ldr	r3, [pc, #224]	; (8005040 <dataTuningLR+0xfc>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d003      	beq.n	8004f6c <dataTuningLR+0x28>
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <dataTuningLR+0xfc>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d155      	bne.n	8005018 <dataTuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <dataTuningLR+0x100>)
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	4b33      	ldr	r3, [pc, #204]	; (8005044 <dataTuningLR+0x100>)
 8004f76:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004f78:	4b31      	ldr	r3, [pc, #196]	; (8005040 <dataTuningLR+0xfc>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d123      	bne.n	8004fc8 <dataTuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8004f80:	4b30      	ldr	r3, [pc, #192]	; (8005044 <dataTuningLR+0x100>)
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	2b13      	cmp	r3, #19
 8004f86:	d90b      	bls.n	8004fa0 <dataTuningLR+0x5c>
					*data2 += add;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b21a      	sxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004f9e:	e042      	b.n	8005026 <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8004fa0:	4b29      	ldr	r3, [pc, #164]	; (8005048 <dataTuningLR+0x104>)
 8004fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <dataTuningLR+0xe2>
					pushLR = 1;
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <dataTuningLR+0x104>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004fc6:	e02e      	b.n	8005026 <dataTuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <dataTuningLR+0xfc>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d12a      	bne.n	8005026 <dataTuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <dataTuningLR+0x100>)
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	2b13      	cmp	r3, #19
 8004fd6:	d90b      	bls.n	8004ff0 <dataTuningLR+0xac>
					*data2 -= add;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004fee:	e01a      	b.n	8005026 <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <dataTuningLR+0x104>)
 8004ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <dataTuningLR+0xe2>
					pushLR = 1;
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <dataTuningLR+0x104>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005006:	b29a      	uxth	r2, r3
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	b29b      	uxth	r3, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	b29b      	uxth	r3, r3
 8005010:	b21a      	sxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8005016:	e006      	b.n	8005026 <dataTuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <dataTuningLR+0x104>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <dataTuningLR+0x100>)
 8005020:	2200      	movs	r2, #0
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e000      	b.n	8005028 <dataTuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 8005026:	bf00      	nop
		}
		cntSetup3 = 0;
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <dataTuningLR+0xf8>)
 800502a:	2200      	movs	r2, #0
 800502c:	801a      	strh	r2, [r3, #0]
	}
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	200027e6 	.word	0x200027e6
 8005040:	200027f4 	.word	0x200027f4
 8005044:	200027ea 	.word	0x200027ea
 8005048:	200027ec 	.word	0x200027ec

0800504c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_MspInit+0x4c>)
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <HAL_MspInit+0x4c>)
 800505c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005060:	6453      	str	r3, [r2, #68]	; 0x44
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <HAL_MspInit+0x4c>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_MspInit+0x4c>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <HAL_MspInit+0x4c>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507c:	6413      	str	r3, [r2, #64]	; 0x40
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_MspInit+0x4c>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800508a:	2007      	movs	r0, #7
 800508c:	f001 ff24 	bl	8006ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800

0800509c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a4:	f107 031c 	add.w	r3, r7, #28
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a53      	ldr	r2, [pc, #332]	; (8005208 <HAL_ADC_MspInit+0x16c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d172      	bne.n	80051a4 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	4b52      	ldr	r3, [pc, #328]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	4a51      	ldr	r2, [pc, #324]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6453      	str	r3, [r2, #68]	; 0x44
 80050ce:	4b4f      	ldr	r3, [pc, #316]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4a4a      	ldr	r2, [pc, #296]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ea:	4b48      	ldr	r3, [pc, #288]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	4b44      	ldr	r3, [pc, #272]	; (800520c <HAL_ADC_MspInit+0x170>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	4a43      	ldr	r2, [pc, #268]	; (800520c <HAL_ADC_MspInit+0x170>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6313      	str	r3, [r2, #48]	; 0x30
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_ADC_MspInit+0x170>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005112:	233f      	movs	r3, #63	; 0x3f
 8005114:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005116:	2303      	movs	r3, #3
 8005118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800511e:	f107 031c 	add.w	r3, r7, #28
 8005122:	4619      	mov	r1, r3
 8005124:	483a      	ldr	r0, [pc, #232]	; (8005210 <HAL_ADC_MspInit+0x174>)
 8005126:	f002 fa89 	bl	800763c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800512a:	23ff      	movs	r3, #255	; 0xff
 800512c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800512e:	2303      	movs	r3, #3
 8005130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005136:	f107 031c 	add.w	r3, r7, #28
 800513a:	4619      	mov	r1, r3
 800513c:	4835      	ldr	r0, [pc, #212]	; (8005214 <HAL_ADC_MspInit+0x178>)
 800513e:	f002 fa7d 	bl	800763c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005142:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <HAL_ADC_MspInit+0x180>)
 8005146:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005148:	4b33      	ldr	r3, [pc, #204]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800514e:	4b32      	ldr	r3, [pc, #200]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005150:	2200      	movs	r2, #0
 8005152:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005154:	4b30      	ldr	r3, [pc, #192]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005156:	2200      	movs	r2, #0
 8005158:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800515c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005160:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005162:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005168:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800516a:	4b2b      	ldr	r3, [pc, #172]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800516c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005178:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800517a:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800517c:	2200      	movs	r2, #0
 800517e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005180:	4b25      	ldr	r3, [pc, #148]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005182:	2200      	movs	r2, #0
 8005184:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005186:	4824      	ldr	r0, [pc, #144]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 8005188:	f001 fee8 	bl	8006f5c <HAL_DMA_Init>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005192:	f7fe fd93 	bl	8003cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <HAL_ADC_MspInit+0x17c>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80051a2:	e02c      	b.n	80051fe <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_ADC_MspInit+0x184>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d127      	bne.n	80051fe <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	4b16      	ldr	r3, [pc, #88]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	4a15      	ldr	r2, [pc, #84]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051bc:	6453      	str	r3, [r2, #68]	; 0x44
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4a0e      	ldr	r2, [pc, #56]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	6313      	str	r3, [r2, #48]	; 0x30
 80051da:	4b0c      	ldr	r3, [pc, #48]	; (800520c <HAL_ADC_MspInit+0x170>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80051e6:	2331      	movs	r3, #49	; 0x31
 80051e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ea:	2303      	movs	r3, #3
 80051ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051f2:	f107 031c 	add.w	r3, r7, #28
 80051f6:	4619      	mov	r1, r3
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <HAL_ADC_MspInit+0x174>)
 80051fa:	f002 fa1f 	bl	800763c <HAL_GPIO_Init>
}
 80051fe:	bf00      	nop
 8005200:	3730      	adds	r7, #48	; 0x30
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40012000 	.word	0x40012000
 800520c:	40023800 	.word	0x40023800
 8005210:	40020800 	.word	0x40020800
 8005214:	40020000 	.word	0x40020000
 8005218:	2000043c 	.word	0x2000043c
 800521c:	40026410 	.word	0x40026410
 8005220:	40012100 	.word	0x40012100

08005224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_I2C_MspInit+0x84>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12c      	bne.n	80052a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	4b18      	ldr	r3, [pc, #96]	; (80052ac <HAL_I2C_MspInit+0x88>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_I2C_MspInit+0x88>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	4b15      	ldr	r3, [pc, #84]	; (80052ac <HAL_I2C_MspInit+0x88>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005268:	2312      	movs	r3, #18
 800526a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2303      	movs	r3, #3
 8005272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005274:	2304      	movs	r3, #4
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	4619      	mov	r1, r3
 800527e:	480c      	ldr	r0, [pc, #48]	; (80052b0 <HAL_I2C_MspInit+0x8c>)
 8005280:	f002 f9dc 	bl	800763c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <HAL_I2C_MspInit+0x88>)
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	4a07      	ldr	r2, [pc, #28]	; (80052ac <HAL_I2C_MspInit+0x88>)
 800528e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005292:	6413      	str	r3, [r2, #64]	; 0x40
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_I2C_MspInit+0x88>)
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80052a0:	bf00      	nop
 80052a2:	3728      	adds	r7, #40	; 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40005400 	.word	0x40005400
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40020400 	.word	0x40020400

080052b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08c      	sub	sp, #48	; 0x30
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052bc:	f107 031c 	add.w	r3, r7, #28
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a42      	ldr	r2, [pc, #264]	; (80053dc <HAL_SPI_MspInit+0x128>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d12d      	bne.n	8005332 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	4b41      	ldr	r3, [pc, #260]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a40      	ldr	r2, [pc, #256]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 80052e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	4b3a      	ldr	r3, [pc, #232]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	4a39      	ldr	r2, [pc, #228]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	6313      	str	r3, [r2, #48]	; 0x30
 8005302:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800530e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8005312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	2302      	movs	r3, #2
 8005316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531c:	2303      	movs	r3, #3
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005320:	2305      	movs	r3, #5
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005324:	f107 031c 	add.w	r3, r7, #28
 8005328:	4619      	mov	r1, r3
 800532a:	482e      	ldr	r0, [pc, #184]	; (80053e4 <HAL_SPI_MspInit+0x130>)
 800532c:	f002 f986 	bl	800763c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005330:	e04f      	b.n	80053d2 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <HAL_SPI_MspInit+0x134>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d14a      	bne.n	80053d2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	6413      	str	r3, [r2, #64]	; 0x40
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6313      	str	r3, [r2, #48]	; 0x30
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_SPI_MspInit+0x12c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005390:	2301      	movs	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80053a0:	2307      	movs	r3, #7
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a4:	f107 031c 	add.w	r3, r7, #28
 80053a8:	4619      	mov	r1, r3
 80053aa:	480e      	ldr	r0, [pc, #56]	; (80053e4 <HAL_SPI_MspInit+0x130>)
 80053ac:	f002 f946 	bl	800763c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80053b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80053b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b6:	2302      	movs	r3, #2
 80053b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053be:	2303      	movs	r3, #3
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053c2:	2306      	movs	r3, #6
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c6:	f107 031c 	add.w	r3, r7, #28
 80053ca:	4619      	mov	r1, r3
 80053cc:	4807      	ldr	r0, [pc, #28]	; (80053ec <HAL_SPI_MspInit+0x138>)
 80053ce:	f002 f935 	bl	800763c <HAL_GPIO_Init>
}
 80053d2:	bf00      	nop
 80053d4:	3730      	adds	r7, #48	; 0x30
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40003800 	.word	0x40003800
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40003c00 	.word	0x40003c00
 80053ec:	40020800 	.word	0x40020800

080053f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_TIM_PWM_MspInit+0x70>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6453      	str	r3, [r2, #68]	; 0x44
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800541e:	e01a      	b.n	8005456 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d115      	bne.n	8005456 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	6413      	str	r3, [r2, #64]	; 0x40
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_TIM_PWM_MspInit+0x74>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	201c      	movs	r0, #28
 800544c:	f001 fd4f 	bl	8006eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005450:	201c      	movs	r0, #28
 8005452:	f001 fd68 	bl	8006f26 <HAL_NVIC_EnableIRQ>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40023800 	.word	0x40023800

08005468 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 031c 	add.w	r3, r7, #28
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a32      	ldr	r2, [pc, #200]	; (8005550 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d12c      	bne.n	80054e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6413      	str	r3, [r2, #64]	; 0x40
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a29      	ldr	r2, [pc, #164]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054c2:	23c0      	movs	r3, #192	; 0xc0
 80054c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c6:	2302      	movs	r3, #2
 80054c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ce:	2300      	movs	r3, #0
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054d2:	2302      	movs	r3, #2
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054d6:	f107 031c 	add.w	r3, r7, #28
 80054da:	4619      	mov	r1, r3
 80054dc:	481e      	ldr	r0, [pc, #120]	; (8005558 <HAL_TIM_Encoder_MspInit+0xf0>)
 80054de:	f002 f8ad 	bl	800763c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054e2:	e030      	b.n	8005546 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIM_Encoder_MspInit+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d12b      	bne.n	8005546 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	4b18      	ldr	r3, [pc, #96]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	4a10      	ldr	r2, [pc, #64]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	6313      	str	r3, [r2, #48]	; 0x30
 800551a:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <HAL_TIM_Encoder_MspInit+0xec>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005526:	23c0      	movs	r3, #192	; 0xc0
 8005528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005532:	2300      	movs	r3, #0
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005536:	2302      	movs	r3, #2
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553a:	f107 031c 	add.w	r3, r7, #28
 800553e:	4619      	mov	r1, r3
 8005540:	4807      	ldr	r0, [pc, #28]	; (8005560 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005542:	f002 f87b 	bl	800763c <HAL_GPIO_Init>
}
 8005546:	bf00      	nop
 8005548:	3730      	adds	r7, #48	; 0x30
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40000400 	.word	0x40000400
 8005554:	40023800 	.word	0x40023800
 8005558:	40020800 	.word	0x40020800
 800555c:	40000800 	.word	0x40000800
 8005560:	40020400 	.word	0x40020400

08005564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_TIM_Base_MspInit+0x48>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d115      	bne.n	80055a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_TIM_Base_MspInit+0x4c>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	4a0c      	ldr	r2, [pc, #48]	; (80055b0 <HAL_TIM_Base_MspInit+0x4c>)
 8005580:	f043 0310 	orr.w	r3, r3, #16
 8005584:	6413      	str	r3, [r2, #64]	; 0x40
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_TIM_Base_MspInit+0x4c>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005592:	2200      	movs	r2, #0
 8005594:	2100      	movs	r1, #0
 8005596:	2036      	movs	r0, #54	; 0x36
 8005598:	f001 fca9 	bl	8006eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800559c:	2036      	movs	r0, #54	; 0x36
 800559e:	f001 fcc2 	bl	8006f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40001000 	.word	0x40001000
 80055b0:	40023800 	.word	0x40023800

080055b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a25      	ldr	r2, [pc, #148]	; (8005668 <HAL_TIM_MspPostInit+0xb4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d11f      	bne.n	8005616 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a23      	ldr	r2, [pc, #140]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b21      	ldr	r3, [pc, #132]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80055f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80055f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f8:	2302      	movs	r3, #2
 80055fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005600:	2300      	movs	r3, #0
 8005602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005604:	2301      	movs	r3, #1
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	4619      	mov	r1, r3
 800560e:	4818      	ldr	r0, [pc, #96]	; (8005670 <HAL_TIM_MspPostInit+0xbc>)
 8005610:	f002 f814 	bl	800763c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005614:	e023      	b.n	800565e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561e:	d11e      	bne.n	800565e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4a10      	ldr	r2, [pc, #64]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6313      	str	r3, [r2, #48]	; 0x30
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_TIM_MspPostInit+0xb8>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800563c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005642:	2302      	movs	r3, #2
 8005644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564a:	2300      	movs	r3, #0
 800564c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800564e:	2301      	movs	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	4619      	mov	r1, r3
 8005658:	4805      	ldr	r0, [pc, #20]	; (8005670 <HAL_TIM_MspPostInit+0xbc>)
 800565a:	f001 ffef 	bl	800763c <HAL_GPIO_Init>
}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40023800 	.word	0x40023800
 8005670:	40020000 	.word	0x40020000

08005674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a28      	ldr	r2, [pc, #160]	; (8005734 <HAL_UART_MspInit+0xc0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d14a      	bne.n	800572c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_UART_MspInit+0xc4>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a26      	ldr	r2, [pc, #152]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a4:	6413      	str	r3, [r2, #64]	; 0x40
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	6313      	str	r3, [r2, #48]	; 0x30
 80056c2:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	6313      	str	r3, [r2, #48]	; 0x30
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_UART_MspInit+0xc4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80056ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f8:	2303      	movs	r3, #3
 80056fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80056fc:	2308      	movs	r3, #8
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005700:	f107 0314 	add.w	r3, r7, #20
 8005704:	4619      	mov	r1, r3
 8005706:	480d      	ldr	r0, [pc, #52]	; (800573c <HAL_UART_MspInit+0xc8>)
 8005708:	f001 ff98 	bl	800763c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800570c:	2304      	movs	r3, #4
 800570e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005710:	2302      	movs	r3, #2
 8005712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005718:	2303      	movs	r3, #3
 800571a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800571c:	2308      	movs	r3, #8
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	4619      	mov	r1, r3
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <HAL_UART_MspInit+0xcc>)
 8005728:	f001 ff88 	bl	800763c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800572c:	bf00      	nop
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40005000 	.word	0x40005000
 8005738:	40023800 	.word	0x40023800
 800573c:	40020800 	.word	0x40020800
 8005740:	40020c00 	.word	0x40020c00

08005744 <SDTimer_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void){
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <SDTimer_Handler+0x40>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d006      	beq.n	8005760 <SDTimer_Handler+0x1c>
		Timer1--;
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <SDTimer_Handler+0x40>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <SDTimer_Handler+0x40>)
 800575e:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <SDTimer_Handler+0x44>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <SDTimer_Handler+0x34>
		Timer2--;
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <SDTimer_Handler+0x44>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <SDTimer_Handler+0x44>)
 8005776:	701a      	strb	r2, [r3, #0]
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	200027f2 	.word	0x200027f2
 8005788:	200027f3 	.word	0x200027f3

0800578c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005790:	e7fe      	b.n	8005790 <NMI_Handler+0x4>

08005792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005792:	b480      	push	{r7}
 8005794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005796:	e7fe      	b.n	8005796 <HardFault_Handler+0x4>

08005798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800579c:	e7fe      	b.n	800579c <MemManage_Handler+0x4>

0800579e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800579e:	b480      	push	{r7}
 80057a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057a2:	e7fe      	b.n	80057a2 <BusFault_Handler+0x4>

080057a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a8:	e7fe      	b.n	80057a8 <UsageFault_Handler+0x4>

080057aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <SysTick_Handler+0x30>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <SysTick_Handler+0x30>)
 80057e4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <SysTick_Handler+0x30>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d904      	bls.n	80057fa <SysTick_Handler+0x26>
    FatFsCnt = 0;
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <SysTick_Handler+0x30>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 80057f6:	f7ff ffa5 	bl	8005744 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057fa:	f000 fcd5 	bl	80061a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200027f1 	.word	0x200027f1

08005808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <TIM2_IRQHandler+0x10>)
 800580e:	f004 fd6f 	bl	800a2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200005e8 	.word	0x200005e8

0800581c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <TIM6_DAC_IRQHandler+0x10>)
 8005822:	f004 fd65 	bl	800a2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	200006c0 	.word	0x200006c0

08005830 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <DMA2_Stream0_IRQHandler+0x10>)
 8005836:	f001 fc97 	bl	8007168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2000043c 	.word	0x2000043c

08005844 <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary( uint16_t ad ) {
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005858:	4293      	cmp	r3, r2
 800585a:	d902      	bls.n	8005862 <getSWrotary+0x1e>
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	e0b6      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 8005868:	d807      	bhi.n	800587a <getSWrotary+0x36>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	f640 6245 	movw	r2, #3653	; 0xe45
 8005870:	4293      	cmp	r3, r2
 8005872:	d902      	bls.n	800587a <getSWrotary+0x36>
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	e0aa      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8005880:	d207      	bcs.n	8005892 <getSWrotary+0x4e>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	f640 22ba 	movw	r2, #2746	; 0xaba
 8005888:	4293      	cmp	r3, r2
 800588a:	d902      	bls.n	8005892 <getSWrotary+0x4e>
 800588c:	2302      	movs	r3, #2
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e09e      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8005898:	d206      	bcs.n	80058a8 <getSWrotary+0x64>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 80058a0:	d302      	bcc.n	80058a8 <getSWrotary+0x64>
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e093      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	f640 1237 	movw	r2, #2359	; 0x937
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d807      	bhi.n	80058c2 <getSWrotary+0x7e>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	f640 1206 	movw	r2, #2310	; 0x906
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d902      	bls.n	80058c2 <getSWrotary+0x7e>
 80058bc:	2304      	movs	r3, #4
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	e086      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	f640 02a6 	movw	r2, #2214	; 0x8a6
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d807      	bhi.n	80058dc <getSWrotary+0x98>
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	f640 0274 	movw	r2, #2164	; 0x874
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d902      	bls.n	80058dc <getSWrotary+0x98>
 80058d6:	2305      	movs	r3, #5
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e079      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	f240 7242 	movw	r2, #1858	; 0x742
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d807      	bhi.n	80058f6 <getSWrotary+0xb2>
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	f240 7211 	movw	r2, #1809	; 0x711
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d902      	bls.n	80058f6 <getSWrotary+0xb2>
 80058f0:	2306      	movs	r3, #6
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e06c      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80058fc:	d207      	bcs.n	800590e <getSWrotary+0xca>
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	f240 62b6 	movw	r2, #1718	; 0x6b6
 8005904:	4293      	cmp	r3, r2
 8005906:	d902      	bls.n	800590e <getSWrotary+0xca>
 8005908:	2307      	movs	r3, #7
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e060      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	f240 6259 	movw	r2, #1625	; 0x659
 8005914:	4293      	cmp	r3, r2
 8005916:	d806      	bhi.n	8005926 <getSWrotary+0xe2>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 800591e:	d902      	bls.n	8005926 <getSWrotary+0xe2>
 8005920:	2308      	movs	r3, #8
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e054      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	f240 6213 	movw	r2, #1555	; 0x613
 800592c:	4293      	cmp	r3, r2
 800592e:	d806      	bhi.n	800593e <getSWrotary+0xfa>
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005936:	d302      	bcc.n	800593e <getSWrotary+0xfa>
 8005938:	2309      	movs	r3, #9
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e048      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	f240 525c 	movw	r2, #1372	; 0x55c
 8005944:	4293      	cmp	r3, r2
 8005946:	d807      	bhi.n	8005958 <getSWrotary+0x114>
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	f240 522d 	movw	r2, #1325	; 0x52d
 800594e:	4293      	cmp	r3, r2
 8005950:	d902      	bls.n	8005958 <getSWrotary+0x114>
 8005952:	230a      	movs	r3, #10
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	e03b      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	f240 522a 	movw	r2, #1322	; 0x52a
 800595e:	4293      	cmp	r3, r2
 8005960:	d807      	bhi.n	8005972 <getSWrotary+0x12e>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f240 42fb 	movw	r2, #1275	; 0x4fb
 8005968:	4293      	cmp	r3, r2
 800596a:	d902      	bls.n	8005972 <getSWrotary+0x12e>
 800596c:	230b      	movs	r3, #11
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e02e      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8005978:	4293      	cmp	r3, r2
 800597a:	d807      	bhi.n	800598c <getSWrotary+0x148>
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005982:	4293      	cmp	r3, r2
 8005984:	d902      	bls.n	800598c <getSWrotary+0x148>
 8005986:	230c      	movs	r3, #12
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e021      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 8005992:	d807      	bhi.n	80059a4 <getSWrotary+0x160>
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	f240 428a 	movw	r2, #1162	; 0x48a
 800599a:	4293      	cmp	r3, r2
 800599c:	d902      	bls.n	80059a4 <getSWrotary+0x160>
 800599e:	230d      	movs	r3, #13
 80059a0:	73fb      	strb	r3, [r7, #15]
 80059a2:	e015      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80059aa:	d207      	bcs.n	80059bc <getSWrotary+0x178>
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	f240 4222 	movw	r2, #1058	; 0x422
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d902      	bls.n	80059bc <getSWrotary+0x178>
 80059b6:	230e      	movs	r3, #14
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e009      	b.n	80059d0 <getSWrotary+0x18c>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80059c2:	d805      	bhi.n	80059d0 <getSWrotary+0x18c>
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 80059ca:	d901      	bls.n	80059d0 <getSWrotary+0x18c>
 80059cc:	230f      	movs	r3, #15
 80059ce:	73fb      	strb	r3, [r7, #15]

	return ret;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact( uint16_t ad ) {
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = SW_NONE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]

	if ( ad > 3900 ) 					ret = 0x0;
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	f640 723c 	movw	r2, #3900	; 0xf3c
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d902      	bls.n	80059fc <getSWtact+0x1e>
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
 80059fa:	e037      	b.n	8005a6c <getSWtact+0x8e>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d807      	bhi.n	8005a16 <getSWtact+0x38>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	f640 422c 	movw	r2, #3116	; 0xc2c
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d902      	bls.n	8005a16 <getSWtact+0x38>
 8005a10:	2305      	movs	r3, #5
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	e02a      	b.n	8005a6c <getSWtact+0x8e>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	f640 32dd 	movw	r2, #3037	; 0xbdd
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d807      	bhi.n	8005a30 <getSWtact+0x52>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	f640 222b 	movw	r2, #2603	; 0xa2b
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d902      	bls.n	8005a30 <getSWtact+0x52>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	e01d      	b.n	8005a6c <getSWtact+0x8e>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	f640 1256 	movw	r2, #2390	; 0x956
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d807      	bhi.n	8005a4a <getSWtact+0x6c>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	f240 729e 	movw	r2, #1950	; 0x79e
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d902      	bls.n	8005a4a <getSWtact+0x6c>
 8005a44:	2303      	movs	r3, #3
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e010      	b.n	8005a6c <getSWtact+0x8e>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005a50:	d207      	bcs.n	8005a62 <getSWtact+0x84>
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d902      	bls.n	8005a62 <getSWtact+0x84>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	e004      	b.n	8005a6c <getSWtact+0x8e>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b95      	cmp	r3, #149	; 0x95
 8005a66:	d801      	bhi.n	8005a6c <getSWtact+0x8e>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]

	return ret;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
	return 1;
 8005a7e:	2301      	movs	r3, #1
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_kill>:

int _kill(int pid, int sig)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a94:	f009 fa6e 	bl	800ef74 <__errno>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2216      	movs	r2, #22
 8005a9c:	601a      	str	r2, [r3, #0]
	return -1;
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_exit>:

void _exit (int status)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ffe7 	bl	8005a8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8005abc:	e7fe      	b.n	8005abc <_exit+0x12>

08005abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e00a      	b.n	8005ae6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ad0:	f3af 8000 	nop.w
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	60ba      	str	r2, [r7, #8]
 8005adc:	b2ca      	uxtb	r2, r1
 8005ade:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dbf0      	blt.n	8005ad0 <_read+0x12>
	}

return len;
 8005aee:	687b      	ldr	r3, [r7, #4]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e009      	b.n	8005b1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	60ba      	str	r2, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	dbf1      	blt.n	8005b0a <_write+0x12>
	}
	return len;
 8005b26:	687b      	ldr	r3, [r7, #4]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_close>:

int _close(int file)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	return -1;
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b58:	605a      	str	r2, [r3, #4]
	return 0;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_isatty>:

int _isatty(int file)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	return 1;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
	return 0;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <_sbrk+0x5c>)
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <_sbrk+0x60>)
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <_sbrk+0x64>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <_sbrk+0x64>)
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <_sbrk+0x68>)
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <_sbrk+0x64>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d207      	bcs.n	8005bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bc8:	f009 f9d4 	bl	800ef74 <__errno>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	220c      	movs	r2, #12
 8005bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	e009      	b.n	8005bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <_sbrk+0x64>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <_sbrk+0x64>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	4a05      	ldr	r2, [pc, #20]	; (8005bfc <_sbrk+0x64>)
 8005be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bea:	68fb      	ldr	r3, [r7, #12]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20020000 	.word	0x20020000
 8005bf8:	00000400 	.word	0x00000400
 8005bfc:	200027f8 	.word	0x200027f8
 8005c00:	20002aa8 	.word	0x20002aa8

08005c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <SystemInit+0x20>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	4a05      	ldr	r2, [pc, #20]	; (8005c24 <SystemInit+0x20>)
 8005c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	e000ed00 	.word	0xe000ed00

08005c28 <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	cntRun++;
 8005c30:	4b4b      	ldr	r3, [pc, #300]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a4a      	ldr	r2, [pc, #296]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c38:	6013      	str	r3, [r2, #0]
    cnt5ms++;
 8005c3a:	4b4a      	ldr	r3, [pc, #296]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	4a48      	ldr	r2, [pc, #288]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c42:	6013      	str	r3, [r2, #0]
    cntLog++;
 8005c44:	4b48      	ldr	r3, [pc, #288]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	4a47      	ldr	r2, [pc, #284]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c4c:	6013      	str	r3, [r2, #0]
    // if (trace_test == 1 || (pattern > 10 && pattern < 100) ) {
    //     if (abs(yawPwm) > 400) {
    //         cntEmc1++;
    //     }
    // }
    if (pattern < 10 ||	 pattern > 100) {
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b09      	cmp	r3, #9
 8005c54:	d903      	bls.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x36>
 8005c56:	4b45      	ldr	r3, [pc, #276]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	d917      	bls.n	8005c8e <HAL_TIM_PeriodElapsedCallback+0x66>
        cntSW++;
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	4b42      	ldr	r3, [pc, #264]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c68:	801a      	strh	r2, [r3, #0]
        cntSetup1++;
 8005c6a:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005c74:	801a      	strh	r2, [r3, #0]
        cntSetup2++;
 8005c76:	4b40      	ldr	r3, [pc, #256]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005c80:	801a      	strh	r2, [r3, #0]
        cntSetup3++;
 8005c82:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005c8c:	801a      	strh	r2, [r3, #0]
    }

    // スイッチの入力を取得
    if( cntSW >= 100 ) {
 8005c8e:	4b38      	ldr	r3, [pc, #224]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	2b63      	cmp	r3, #99	; 0x63
 8005c94:	d928      	bls.n	8005ce8 <HAL_TIM_PeriodElapsedCallback+0xc0>
        HAL_ADC_Start(&hadc2);
 8005c96:	483a      	ldr	r0, [pc, #232]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005c98:	f000 fb0e 	bl	80062b8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc2, 1);
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4838      	ldr	r0, [pc, #224]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005ca0:	f000 fbdc 	bl	800645c <HAL_ADC_PollForConversion>
        swValTact = getSWtact(HAL_ADC_GetValue(&hadc2));
 8005ca4:	4836      	ldr	r0, [pc, #216]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005ca6:	f000 fd75 	bl	8006794 <HAL_ADC_GetValue>
 8005caa:	4603      	mov	r3, r0
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fe95 	bl	80059de <getSWtact>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b32      	ldr	r3, [pc, #200]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005cba:	701a      	strb	r2, [r3, #0]

        HAL_ADC_Start(&hadc2);
 8005cbc:	4830      	ldr	r0, [pc, #192]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005cbe:	f000 fafb 	bl	80062b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1);
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	482e      	ldr	r0, [pc, #184]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005cc6:	f000 fbc9 	bl	800645c <HAL_ADC_PollForConversion>
        swValRotary = getSWrotary(HAL_ADC_GetValue(&hadc2));
 8005cca:	482d      	ldr	r0, [pc, #180]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005ccc:	f000 fd62 	bl	8006794 <HAL_ADC_GetValue>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fdb5 	bl	8005844 <getSWrotary>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8005ce0:	701a      	strb	r2, [r3, #0]
        // HAL_ADC_Stop(&hadc2);
        cntSW = 0;
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	801a      	strh	r2, [r3, #0]
    }
    if (modeLCD == 1) lcdShowProcess();   // LCD
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8005cf0:	f7fb fa44 	bl	800117c <lcdShowProcess>
    

    switch(cnt5ms) {
 8005cf4:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d820      	bhi.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x118>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d2b 	.word	0x08005d2b
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d39 	.word	0x08005d39
        case 1:

            break;
        case 2:
            getCurrent();               // 電流計測
 8005d18:	f7fb fcca 	bl	80016b0 <getCurrent>
            // getBNO055Acceleration();    // 加速度取得       
            getBNO055Gyro();    // 角速度取得
 8005d1c:	f7fb fbae 	bl	800147c <getBNO055Gyro>
            calcDegrees();
 8005d20:	f7fb fc16 	bl	8001550 <calcDegrees>
            motorControlYaw();
 8005d24:	f000 f8fc 	bl	8005f20 <motorControlYaw>
            break;
 8005d28:	e00d      	b.n	8005d46 <HAL_TIM_PeriodElapsedCallback+0x11e>
        case 3:
            if (modeLOG) writeLog();
 8005d2a:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8005d32:	f7fd ff23 	bl	8003b7c <writeLog>
            break;
 8005d36:	e005      	b.n	8005d44 <HAL_TIM_PeriodElapsedCallback+0x11c>
        case 4:
            break;
        case 5:
            cnt5ms = 0;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
            break;
 8005d3e:	e002      	b.n	8005d46 <HAL_TIM_PeriodElapsedCallback+0x11e>
        default:
            break;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <HAL_TIM_PeriodElapsedCallback+0x11e>
            break;
 8005d44:	bf00      	nop
    //     printf("acceleValX %d\t acceleValY %d\t acceleValZ %d\n",acceleValX, acceleValY, acceleValZ);
        
    // }

    // 仮想センサステア計算
    getAngleSensor();
 8005d46:	f7fc fcd3 	bl	80026f0 <getAngleSensor>
    // Encoder
    getEncoder();
 8005d4a:	f7fb fec1 	bl	8001ad0 <getEncoder>
    // PWM
    motorControlTrace();
 8005d4e:	f7fc fdff 	bl	8002950 <motorControlTrace>
    motorControlSpeed();
 8005d52:	f000 f821 	bl	8005d98 <motorControlSpeed>
    
    
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200027fc 	.word	0x200027fc
 8005d64:	20002800 	.word	0x20002800
 8005d68:	20002804 	.word	0x20002804
 8005d6c:	200002d4 	.word	0x200002d4
 8005d70:	200027f6 	.word	0x200027f6
 8005d74:	200027e2 	.word	0x200027e2
 8005d78:	200027e4 	.word	0x200027e4
 8005d7c:	200027e6 	.word	0x200027e6
 8005d80:	200003f4 	.word	0x200003f4
 8005d84:	200027f4 	.word	0x200027f4
 8005d88:	200027f5 	.word	0x200027f5
 8005d8c:	20000002 	.word	0x20000002
 8005d90:	200002d5 	.word	0x200002d5
 8005d94:	00000000 	.word	0x00000000

08005d98 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 8005d9e:	4b54      	ldr	r3, [pc, #336]	; (8005ef0 <motorControlSpeed+0x158>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	f7fa fef6 	bl	8000b98 <__aeabi_d2iz>
 8005dac:	4603      	mov	r3, r0
 8005dae:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 8005db0:	4b50      	ldr	r3, [pc, #320]	; (8005ef4 <motorControlSpeed+0x15c>)
 8005db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005db6:	61bb      	str	r3, [r7, #24]

	// デモモードのときゲイン変更
	if ( demo ) {
 8005db8:	4b4f      	ldr	r3, [pc, #316]	; (8005ef8 <motorControlSpeed+0x160>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00c      	beq.n	8005dda <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	; (8005efc <motorControlSpeed+0x164>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8005dc8:	4b4d      	ldr	r3, [pc, #308]	; (8005f00 <motorControlSpeed+0x168>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <motorControlSpeed+0x16c>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005dd8:	e00b      	b.n	8005df2 <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 8005dda:	4b48      	ldr	r3, [pc, #288]	; (8005efc <motorControlSpeed+0x164>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8005de2:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <motorControlSpeed+0x168>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8005dea:	4b46      	ldr	r3, [pc, #280]	; (8005f04 <motorControlSpeed+0x16c>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 8005dfa:	69f8      	ldr	r0, [r7, #28]
 8005dfc:	f7fa fbb2 	bl	8000564 <__aeabi_i2d>
 8005e00:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <motorControlSpeed+0x170>)
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f7fa fe7f 	bl	8000b08 <__aeabi_dcmpeq>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <motorControlSpeed+0x86>
 8005e10:	493e      	ldr	r1, [pc, #248]	; (8005f0c <motorControlSpeed+0x174>)
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 8005e1e:	6978      	ldr	r0, [r7, #20]
 8005e20:	f7fa fba0 	bl	8000564 <__aeabi_i2d>
 8005e24:	a330      	add	r3, pc, #192	; (adr r3, 8005ee8 <motorControlSpeed+0x150>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fc05 	bl	8000638 <__aeabi_dmul>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <motorControlSpeed+0x174>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa fa46 	bl	80002cc <__adddf3>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4931      	ldr	r1, [pc, #196]	; (8005f0c <motorControlSpeed+0x174>)
 8005e46:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <motorControlSpeed+0x178>)
 8005e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e50:	461a      	mov	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;		// 比例
 8005e58:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 8005e64:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fa fb7b 	bl	8000564 <__aeabi_i2d>
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <motorControlSpeed+0x174>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fbe0 	bl	8000638 <__aeabi_dmul>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f7fa fe8a 	bl	8000b98 <__aeabi_d2iz>
 8005e84:	4603      	mov	r3, r0
 8005e86:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;		// 微分
 8005e88:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4413      	add	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	105b      	asrs	r3, r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eac:	dd02      	ble.n	8005eb4 <motorControlSpeed+0x11c>
 8005eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005eba:	da01      	bge.n	8005ec0 <motorControlSpeed+0x128>
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <motorControlSpeed+0x17c>)
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	b21a      	sxth	r2, r3
 8005ec4:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <motorControlSpeed+0x180>)
 8005ec6:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	b21a      	sxth	r2, r3
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <motorControlSpeed+0x178>)
 8005ece:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f7fa fb47 	bl	8000564 <__aeabi_i2d>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	490b      	ldr	r1, [pc, #44]	; (8005f08 <motorControlSpeed+0x170>)
 8005edc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ee0:	bf00      	nop
 8005ee2:	3728      	adds	r7, #40	; 0x28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005eec:	3f50624d 	.word	0x3f50624d
 8005ef0:	20002810 	.word	0x20002810
 8005ef4:	200002fc 	.word	0x200002fc
 8005ef8:	20002830 	.word	0x20002830
 8005efc:	20000034 	.word	0x20000034
 8005f00:	20000035 	.word	0x20000035
 8005f04:	20002831 	.word	0x20002831
 8005f08:	20002820 	.word	0x20002820
 8005f0c:	20002828 	.word	0x20002828
 8005f10:	20002818 	.word	0x20002818
 8005f14:	fffffc18 	.word	0xfffffc18
 8005f18:	20002808 	.word	0x20002808
 8005f1c:	00000000 	.word	0x00000000

08005f20 <motorControlYaw>:
// モジュール名 motorControlYaw
// 処理概要     角速度制御時のPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlYaw(void) {
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
	double iP, iD, iI;
	int32_t Dev, Dif, kp, ki, kd, iRet;
	
	//サーボモータ用PWM値計算
	kp = kp3_buff;
 8005f26:	4b5a      	ldr	r3, [pc, #360]	; (8006090 <motorControlYaw+0x170>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	ki = ki3_buff;
 8005f2c:	4b59      	ldr	r3, [pc, #356]	; (8006094 <motorControlYaw+0x174>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
	kd = kd3_buff;
 8005f32:	4b59      	ldr	r3, [pc, #356]	; (8006098 <motorControlYaw+0x178>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	623b      	str	r3, [r7, #32]
	Dev = (angularVelocity[INDEX_Z] - (int32_t)anglevelocity);	// 目標値-現在値
 8005f38:	4b58      	ldr	r3, [pc, #352]	; (800609c <motorControlYaw+0x17c>)
 8005f3a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005f3e:	4b58      	ldr	r3, [pc, #352]	; (80060a0 <motorControlYaw+0x180>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	f7fa fe26 	bl	8000b98 <__aeabi_d2iz>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fa fb08 	bl	8000564 <__aeabi_i2d>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa f9b4 	bl	80002c8 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4610      	mov	r0, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	f7fa fe16 	bl	8000b98 <__aeabi_d2iz>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	61fb      	str	r3, [r7, #28]
	// I成分積算
	Int3 += (double)Dev * 0.005;
 8005f70:	69f8      	ldr	r0, [r7, #28]
 8005f72:	f7fa faf7 	bl	8000564 <__aeabi_i2d>
 8005f76:	a344      	add	r3, pc, #272	; (adr r3, 8006088 <motorControlYaw+0x168>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f7fa fb5c 	bl	8000638 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	4b46      	ldr	r3, [pc, #280]	; (80060a4 <motorControlYaw+0x184>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa f99d 	bl	80002cc <__adddf3>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4943      	ldr	r1, [pc, #268]	; (80060a4 <motorControlYaw+0x184>)
 8005f98:	e9c1 2300 	strd	r2, r3, [r1]
	// if ( Int3 > 5000 ) Int3 = 5000;		// I成分リミット
	// else if ( Int3 < -5000 ) Int3 = -5000;s
	Dif = ( Dev - angleZBefore ) * 1;	// dゲイン1/1000倍
 8005f9c:	4b42      	ldr	r3, [pc, #264]	; (80060a8 <motorControlYaw+0x188>)
 8005f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]

	iP = (double)kp * Dev;	// 比例
 8005faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fac:	f7fa fada 	bl	8000564 <__aeabi_i2d>
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	69f8      	ldr	r0, [r7, #28]
 8005fb6:	f7fa fad5 	bl	8000564 <__aeabi_i2d>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa fb39 	bl	8000638 <__aeabi_dmul>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	iI = (double)ki * Int3;	// 積分
 8005fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fd0:	f7fa fac8 	bl	8000564 <__aeabi_i2d>
 8005fd4:	4b33      	ldr	r3, [pc, #204]	; (80060a4 <motorControlYaw+0x184>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa fb2d 	bl	8000638 <__aeabi_dmul>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	iD = (double)kd * Dif;	// 微分
 8005fe6:	6a38      	ldr	r0, [r7, #32]
 8005fe8:	f7fa fabc 	bl	8000564 <__aeabi_i2d>
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	69b8      	ldr	r0, [r7, #24]
 8005ff2:	f7fa fab7 	bl	8000564 <__aeabi_i2d>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7fa fb1b 	bl	8000638 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	e9c7 2300 	strd	r2, r3, [r7]
	iRet = (int32_t)iP + iI + iD;
 800600a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800600e:	f7fa fdc3 	bl	8000b98 <__aeabi_d2iz>
 8006012:	4603      	mov	r3, r0
 8006014:	4618      	mov	r0, r3
 8006016:	f7fa faa5 	bl	8000564 <__aeabi_i2d>
 800601a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601e:	f7fa f955 	bl	80002cc <__adddf3>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602e:	f7fa f94d 	bl	80002cc <__adddf3>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4610      	mov	r0, r2
 8006038:	4619      	mov	r1, r3
 800603a:	f7fa fdad 	bl	8000b98 <__aeabi_d2iz>
 800603e:	4603      	mov	r3, r0
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
	iRet = iRet >> 2;				// PWMを0～100近傍に収める
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	109b      	asrs	r3, r3, #2
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604e:	dd02      	ble.n	8006056 <motorControlYaw+0x136>
 8006050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ( iRet <  -1000 ) iRet = -1000;
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800605c:	da01      	bge.n	8006062 <motorControlYaw+0x142>
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <motorControlYaw+0x18c>)
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	yawPwm = iRet;
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	b21a      	sxth	r2, r3
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <motorControlYaw+0x190>)
 8006068:	801a      	strh	r2, [r3, #0]
	angleZBefore = Dev;				// 次回はこの値が1ms前の値となる
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	b21a      	sxth	r2, r3
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <motorControlYaw+0x188>)
 8006070:	801a      	strh	r2, [r3, #0]
	anglevelocityBefore = angularVelocity[INDEX_Z];
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <motorControlYaw+0x17c>)
 8006074:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006078:	490e      	ldr	r1, [pc, #56]	; (80060b4 <motorControlYaw+0x194>)
 800607a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800607e:	bf00      	nop
 8006080:	3730      	adds	r7, #48	; 0x30
 8006082:	46bd      	mov	sp, r7
 8006084:	bdb0      	pop	{r4, r5, r7, pc}
 8006086:	bf00      	nop
 8006088:	47ae147b 	.word	0x47ae147b
 800608c:	3f747ae1 	.word	0x3f747ae1
 8006090:	20000036 	.word	0x20000036
 8006094:	20000037 	.word	0x20000037
 8006098:	20000038 	.word	0x20000038
 800609c:	20000270 	.word	0x20000270
 80060a0:	20002838 	.word	0x20002838
 80060a4:	20002850 	.word	0x20002850
 80060a8:	2000284a 	.word	0x2000284a
 80060ac:	fffffc18 	.word	0xfffffc18
 80060b0:	20002848 	.word	0x20002848
 80060b4:	20002840 	.word	0x20002840

080060b8 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80060ba:	490d      	ldr	r1, [pc, #52]	; (80060f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80060be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060c0:	e002      	b.n	80060c8 <LoopCopyDataInit>

080060c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060c6:	3304      	adds	r3, #4

080060c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060cc:	d3f9      	bcc.n	80060c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060ce:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80060d0:	4c0a      	ldr	r4, [pc, #40]	; (80060fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80060d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060d4:	e001      	b.n	80060da <LoopFillZerobss>

080060d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060d8:	3204      	adds	r2, #4

080060da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060dc:	d3fb      	bcc.n	80060d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80060de:	f7ff fd91 	bl	8005c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060e2:	f008 ff4d 	bl	800ef80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060e6:	f7fc fd2d 	bl	8002b44 <main>
  bx  lr    
 80060ea:	4770      	bx	lr
  ldr r0, =_sdata
 80060ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060f0:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80060f4:	08014e20 	.word	0x08014e20
  ldr r2, =_sbss
 80060f8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80060fc:	20002aa8 	.word	0x20002aa8

08006100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006100:	e7fe      	b.n	8006100 <ADC_IRQHandler>
	...

08006104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_Init+0x40>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <HAL_Init+0x40>)
 800610e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_Init+0x40>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <HAL_Init+0x40>)
 800611a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800611e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_Init+0x40>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a07      	ldr	r2, [pc, #28]	; (8006144 <HAL_Init+0x40>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800612c:	2003      	movs	r0, #3
 800612e:	f000 fed3 	bl	8006ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006132:	2000      	movs	r0, #0
 8006134:	f000 f808 	bl	8006148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006138:	f7fe ff88 	bl	800504c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40023c00 	.word	0x40023c00

08006148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <HAL_InitTick+0x54>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_InitTick+0x58>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	4619      	mov	r1, r3
 800615a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800615e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	4618      	mov	r0, r3
 8006168:	f000 feeb 	bl	8006f42 <HAL_SYSTICK_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e00e      	b.n	8006194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d80a      	bhi.n	8006192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800617c:	2200      	movs	r2, #0
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	f000 feb3 	bl	8006eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <HAL_InitTick+0x5c>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000030 	.word	0x20000030
 80061a0:	20000040 	.word	0x20000040
 80061a4:	2000003c 	.word	0x2000003c

080061a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_IncTick+0x20>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_IncTick+0x24>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	4a04      	ldr	r2, [pc, #16]	; (80061cc <HAL_IncTick+0x24>)
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000040 	.word	0x20000040
 80061cc:	20002858 	.word	0x20002858

080061d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return uwTick;
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_GetTick+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20002858 	.word	0x20002858

080061e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061f0:	f7ff ffee 	bl	80061d0 <HAL_GetTick>
 80061f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d005      	beq.n	800620e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_Delay+0x44>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800620e:	bf00      	nop
 8006210:	f7ff ffde 	bl	80061d0 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	429a      	cmp	r2, r3
 800621e:	d8f7      	bhi.n	8006210 <HAL_Delay+0x28>
  {
  }
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000040 	.word	0x20000040

08006230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e033      	b.n	80062ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe ff24 	bl	800509c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d118      	bne.n	80062a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006276:	f023 0302 	bic.w	r3, r3, #2
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fbda 	bl	8006a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	f043 0201 	orr.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
 800629e:	e001      	b.n	80062a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_ADC_Start+0x1a>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e0b2      	b.n	8006438 <HAL_ADC_Start+0x180>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d018      	beq.n	800631a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80062f8:	4b52      	ldr	r3, [pc, #328]	; (8006444 <HAL_ADC_Start+0x18c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a52      	ldr	r2, [pc, #328]	; (8006448 <HAL_ADC_Start+0x190>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0c9a      	lsrs	r2, r3, #18
 8006304:	4613      	mov	r3, r2
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	4413      	add	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800630c:	e002      	b.n	8006314 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3b01      	subs	r3, #1
 8006312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f9      	bne.n	800630e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d17a      	bne.n	800641e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d106      	bne.n	8006376 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	f023 0206 	bic.w	r2, r3, #6
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
 8006374:	e002      	b.n	800637c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006384:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_ADC_Start+0x194>)
 8006386:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b00      	cmp	r3, #0
 800639c:	d12a      	bne.n	80063f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	; (8006450 <HAL_ADC_Start+0x198>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d015      	beq.n	80063d4 <HAL_ADC_Start+0x11c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a29      	ldr	r2, [pc, #164]	; (8006454 <HAL_ADC_Start+0x19c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d105      	bne.n	80063be <HAL_ADC_Start+0x106>
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <HAL_ADC_Start+0x194>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a25      	ldr	r2, [pc, #148]	; (8006458 <HAL_ADC_Start+0x1a0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d136      	bne.n	8006436 <HAL_ADC_Start+0x17e>
 80063c8:	4b20      	ldr	r3, [pc, #128]	; (800644c <HAL_ADC_Start+0x194>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d130      	bne.n	8006436 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d129      	bne.n	8006436 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	e020      	b.n	8006436 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a15      	ldr	r2, [pc, #84]	; (8006450 <HAL_ADC_Start+0x198>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d11b      	bne.n	8006436 <HAL_ADC_Start+0x17e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d114      	bne.n	8006436 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	e00b      	b.n	8006436 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f043 0210 	orr.w	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f043 0201 	orr.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000030 	.word	0x20000030
 8006448:	431bde83 	.word	0x431bde83
 800644c:	40012300 	.word	0x40012300
 8006450:	40012000 	.word	0x40012000
 8006454:	40012100 	.word	0x40012100
 8006458:	40012200 	.word	0x40012200

0800645c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	d113      	bne.n	80064a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006488:	d10b      	bne.n	80064a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e063      	b.n	800656a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80064a2:	f7ff fe95 	bl	80061d0 <HAL_GetTick>
 80064a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064a8:	e021      	b.n	80064ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d01d      	beq.n	80064ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_ADC_PollForConversion+0x6c>
 80064b8:	f7ff fe8a 	bl	80061d0 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d212      	bcs.n	80064ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d00b      	beq.n	80064ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e03d      	b.n	800656a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d1d6      	bne.n	80064aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0212 	mvn.w	r2, #18
 8006504:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d123      	bne.n	8006568 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11f      	bne.n	8006568 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	d006      	beq.n	8006544 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006540:	2b00      	cmp	r3, #0
 8006542:	d111      	bne.n	8006568 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d105      	bne.n	8006568 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f043 0201 	orr.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_ADC_Start_DMA+0x1e>
 800658e:	2302      	movs	r3, #2
 8006590:	e0e9      	b.n	8006766 <HAL_ADC_Start_DMA+0x1f2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d018      	beq.n	80065da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065b8:	4b6d      	ldr	r3, [pc, #436]	; (8006770 <HAL_ADC_Start_DMA+0x1fc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a6d      	ldr	r2, [pc, #436]	; (8006774 <HAL_ADC_Start_DMA+0x200>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0c9a      	lsrs	r2, r3, #18
 80065c4:	4613      	mov	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	4413      	add	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065cc:	e002      	b.n	80065d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f9      	bne.n	80065ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e8:	d107      	bne.n	80065fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	f040 80a1 	bne.w	800674c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006612:	f023 0301 	bic.w	r3, r3, #1
 8006616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006648:	d106      	bne.n	8006658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	f023 0206 	bic.w	r2, r3, #6
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
 8006656:	e002      	b.n	800665e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <HAL_ADC_Start_DMA+0x204>)
 8006668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	4a43      	ldr	r2, [pc, #268]	; (800677c <HAL_ADC_Start_DMA+0x208>)
 8006670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	4a42      	ldr	r2, [pc, #264]	; (8006780 <HAL_ADC_Start_DMA+0x20c>)
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	4a41      	ldr	r2, [pc, #260]	; (8006784 <HAL_ADC_Start_DMA+0x210>)
 8006680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800668a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800669a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	334c      	adds	r3, #76	; 0x4c
 80066b6:	4619      	mov	r1, r3
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f000 fcfc 	bl	80070b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d12a      	bne.n	8006722 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2d      	ldr	r2, [pc, #180]	; (8006788 <HAL_ADC_Start_DMA+0x214>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d015      	beq.n	8006702 <HAL_ADC_Start_DMA+0x18e>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2c      	ldr	r2, [pc, #176]	; (800678c <HAL_ADC_Start_DMA+0x218>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d105      	bne.n	80066ec <HAL_ADC_Start_DMA+0x178>
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_ADC_Start_DMA+0x204>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_ADC_Start_DMA+0x21c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d136      	bne.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
 80066f6:	4b20      	ldr	r3, [pc, #128]	; (8006778 <HAL_ADC_Start_DMA+0x204>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 0310 	and.w	r3, r3, #16
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d130      	bne.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d129      	bne.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	e020      	b.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_ADC_Start_DMA+0x214>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d11b      	bne.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d114      	bne.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	e00b      	b.n	8006764 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	f043 0210 	orr.w	r2, r3, #16
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	f043 0201 	orr.w	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000030 	.word	0x20000030
 8006774:	431bde83 	.word	0x431bde83
 8006778:	40012300 	.word	0x40012300
 800677c:	08006c35 	.word	0x08006c35
 8006780:	08006cef 	.word	0x08006cef
 8006784:	08006d0b 	.word	0x08006d0b
 8006788:	40012000 	.word	0x40012000
 800678c:	40012100 	.word	0x40012100
 8006790:	40012200 	.word	0x40012200

08006794 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x1c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e113      	b.n	8006a1c <HAL_ADC_ConfigChannel+0x244>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b09      	cmp	r3, #9
 8006802:	d925      	bls.n	8006850 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68d9      	ldr	r1, [r3, #12]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	4613      	mov	r3, r2
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4413      	add	r3, r2
 8006818:	3b1e      	subs	r3, #30
 800681a:	2207      	movs	r2, #7
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	43da      	mvns	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	400a      	ands	r2, r1
 8006828:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68d9      	ldr	r1, [r3, #12]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	4618      	mov	r0, r3
 800683c:	4603      	mov	r3, r0
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4403      	add	r3, r0
 8006842:	3b1e      	subs	r3, #30
 8006844:	409a      	lsls	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	e022      	b.n	8006896 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6919      	ldr	r1, [r3, #16]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	2207      	movs	r2, #7
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43da      	mvns	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	400a      	ands	r2, r1
 8006872:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6919      	ldr	r1, [r3, #16]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	4618      	mov	r0, r3
 8006886:	4603      	mov	r3, r0
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4403      	add	r3, r0
 800688c:	409a      	lsls	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b06      	cmp	r3, #6
 800689c:	d824      	bhi.n	80068e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	3b05      	subs	r3, #5
 80068b0:	221f      	movs	r2, #31
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43da      	mvns	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	400a      	ands	r2, r1
 80068be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4618      	mov	r0, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	3b05      	subs	r3, #5
 80068da:	fa00 f203 	lsl.w	r2, r0, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34
 80068e6:	e04c      	b.n	8006982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d824      	bhi.n	800693a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	3b23      	subs	r3, #35	; 0x23
 8006902:	221f      	movs	r2, #31
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	43da      	mvns	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	400a      	ands	r2, r1
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	4618      	mov	r0, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	3b23      	subs	r3, #35	; 0x23
 800692c:	fa00 f203 	lsl.w	r2, r0, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
 8006938:	e023      	b.n	8006982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	3b41      	subs	r3, #65	; 0x41
 800694c:	221f      	movs	r2, #31
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43da      	mvns	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	400a      	ands	r2, r1
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	4618      	mov	r0, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	3b41      	subs	r3, #65	; 0x41
 8006976:	fa00 f203 	lsl.w	r2, r0, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006982:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <HAL_ADC_ConfigChannel+0x250>)
 8006984:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <HAL_ADC_ConfigChannel+0x254>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10f      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x1d8>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b12      	cmp	r3, #18
 8006996:	d10b      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_ADC_ConfigChannel+0x254>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d12b      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x23a>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_ADC_ConfigChannel+0x258>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <HAL_ADC_ConfigChannel+0x1f4>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b11      	cmp	r3, #17
 80069ca:	d122      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <HAL_ADC_ConfigChannel+0x258>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d111      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <HAL_ADC_ConfigChannel+0x25c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a11      	ldr	r2, [pc, #68]	; (8006a38 <HAL_ADC_ConfigChannel+0x260>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	0c9a      	lsrs	r2, r3, #18
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a04:	e002      	b.n	8006a0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f9      	bne.n	8006a06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40012300 	.word	0x40012300
 8006a2c:	40012000 	.word	0x40012000
 8006a30:	10000012 	.word	0x10000012
 8006a34:	20000030 	.word	0x20000030
 8006a38:	431bde83 	.word	0x431bde83

08006a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <ADC_Init+0x1f0>)
 8006a46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	021a      	lsls	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6859      	ldr	r1, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	4a58      	ldr	r2, [pc, #352]	; (8006c30 <ADC_Init+0x1f4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d022      	beq.n	8006b1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6899      	ldr	r1, [r3, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6899      	ldr	r1, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	e00f      	b.n	8006b3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0202 	bic.w	r2, r2, #2
 8006b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6899      	ldr	r1, [r3, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7e1b      	ldrb	r3, [r3, #24]
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6859      	ldr	r1, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	3b01      	subs	r3, #1
 8006b94:	035a      	lsls	r2, r3, #13
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e007      	b.n	8006bb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	051a      	lsls	r2, r3, #20
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6899      	ldr	r1, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bf2:	025a      	lsls	r2, r3, #9
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	029a      	lsls	r2, r3, #10
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40012300 	.word	0x40012300
 8006c30:	0f000001 	.word	0x0f000001

08006c34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d13c      	bne.n	8006cc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d12b      	bne.n	8006cc0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d127      	bne.n	8006cc0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d006      	beq.n	8006c8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d119      	bne.n	8006cc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0220 	bic.w	r2, r2, #32
 8006c9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0201 	orr.w	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7fc fcc7 	bl	8003654 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cc6:	e00e      	b.n	8006ce6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fd74 	bl	80067c2 <HAL_ADC_ErrorCallback>
}
 8006cda:	e004      	b.n	8006ce6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fd56 	bl	80067ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f043 0204 	orr.w	r2, r3, #4
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fd49 	bl	80067c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <__NVIC_SetPriorityGrouping+0x44>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d54:	4013      	ands	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d6a:	4a04      	ldr	r2, [pc, #16]	; (8006d7c <__NVIC_SetPriorityGrouping+0x44>)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	60d3      	str	r3, [r2, #12]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	e000ed00 	.word	0xe000ed00

08006d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <__NVIC_GetPriorityGrouping+0x18>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	f003 0307 	and.w	r3, r3, #7
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	e000ed00 	.word	0xe000ed00

08006d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	db0b      	blt.n	8006dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	f003 021f 	and.w	r2, r3, #31
 8006db4:	4907      	ldr	r1, [pc, #28]	; (8006dd4 <__NVIC_EnableIRQ+0x38>)
 8006db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	e000e100 	.word	0xe000e100

08006dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	6039      	str	r1, [r7, #0]
 8006de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db0a      	blt.n	8006e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	490c      	ldr	r1, [pc, #48]	; (8006e24 <__NVIC_SetPriority+0x4c>)
 8006df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df6:	0112      	lsls	r2, r2, #4
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e00:	e00a      	b.n	8006e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	4908      	ldr	r1, [pc, #32]	; (8006e28 <__NVIC_SetPriority+0x50>)
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	0112      	lsls	r2, r2, #4
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	440b      	add	r3, r1
 8006e16:	761a      	strb	r2, [r3, #24]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	e000e100 	.word	0xe000e100
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	; 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f1c3 0307 	rsb	r3, r3, #7
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	bf28      	it	cs
 8006e4a:	2304      	movcs	r3, #4
 8006e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d902      	bls.n	8006e5c <NVIC_EncodePriority+0x30>
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	3b03      	subs	r3, #3
 8006e5a:	e000      	b.n	8006e5e <NVIC_EncodePriority+0x32>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e60:	f04f 32ff 	mov.w	r2, #4294967295
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	401a      	ands	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e74:	f04f 31ff 	mov.w	r1, #4294967295
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7e:	43d9      	mvns	r1, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e84:	4313      	orrs	r3, r2
         );
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3724      	adds	r7, #36	; 0x24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ea4:	d301      	bcc.n	8006eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e00f      	b.n	8006eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <SysTick_Config+0x40>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eb2:	210f      	movs	r1, #15
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	f7ff ff8e 	bl	8006dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <SysTick_Config+0x40>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ec2:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <SysTick_Config+0x40>)
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000e010 	.word	0xe000e010

08006ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ff29 	bl	8006d38 <__NVIC_SetPriorityGrouping>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f00:	f7ff ff3e 	bl	8006d80 <__NVIC_GetPriorityGrouping>
 8006f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f7ff ff8e 	bl	8006e2c <NVIC_EncodePriority>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff5d 	bl	8006dd8 <__NVIC_SetPriority>
}
 8006f1e:	bf00      	nop
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff31 	bl	8006d9c <__NVIC_EnableIRQ>
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ffa2 	bl	8006e94 <SysTick_Config>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f68:	f7ff f932 	bl	80061d0 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e099      	b.n	80070ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f98:	e00f      	b.n	8006fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f9a:	f7ff f919 	bl	80061d0 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	d908      	bls.n	8006fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e078      	b.n	80070ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e8      	bne.n	8006f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <HAL_DMA_Init+0x158>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b04      	cmp	r3, #4
 8007012:	d107      	bne.n	8007024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	4313      	orrs	r3, r2
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b04      	cmp	r3, #4
 800704c:	d117      	bne.n	800707e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa6f 	bl	8007544 <DMA_CheckFifoParam>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800707a:	2301      	movs	r3, #1
 800707c:	e016      	b.n	80070ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa26 	bl	80074d8 <DMA_CalcBaseAndBitshift>
 800708c:	4603      	mov	r3, r0
 800708e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	223f      	movs	r2, #63	; 0x3f
 8007096:	409a      	lsls	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	f010803f 	.word	0xf010803f

080070b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <HAL_DMA_Start_IT+0x26>
 80070da:	2302      	movs	r3, #2
 80070dc:	e040      	b.n	8007160 <HAL_DMA_Start_IT+0xa8>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d12f      	bne.n	8007152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 f9b8 	bl	800747c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007110:	223f      	movs	r2, #63	; 0x3f
 8007112:	409a      	lsls	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0216 	orr.w	r2, r2, #22
 8007126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0208 	orr.w	r2, r2, #8
 800713e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e005      	b.n	800715e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800715a:	2302      	movs	r3, #2
 800715c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007174:	4b8e      	ldr	r3, [pc, #568]	; (80073b0 <HAL_DMA_IRQHandler+0x248>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a8e      	ldr	r2, [pc, #568]	; (80073b4 <HAL_DMA_IRQHandler+0x24c>)
 800717a:	fba2 2303 	umull	r2, r3, r2, r3
 800717e:	0a9b      	lsrs	r3, r3, #10
 8007180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	2208      	movs	r2, #8
 8007194:	409a      	lsls	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4013      	ands	r3, r2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01a      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d013      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0204 	bic.w	r2, r2, #4
 80071ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c0:	2208      	movs	r2, #8
 80071c2:	409a      	lsls	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d8:	2201      	movs	r2, #1
 80071da:	409a      	lsls	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d012      	beq.n	800720a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	2201      	movs	r2, #1
 80071f8:	409a      	lsls	r2, r3
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f043 0202 	orr.w	r2, r3, #2
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720e:	2204      	movs	r2, #4
 8007210:	409a      	lsls	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4013      	ands	r3, r2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d012      	beq.n	8007240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	2204      	movs	r2, #4
 800722e:	409a      	lsls	r2, r3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f043 0204 	orr.w	r2, r3, #4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007244:	2210      	movs	r2, #16
 8007246:	409a      	lsls	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d043      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d03c      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007262:	2210      	movs	r2, #16
 8007264:	409a      	lsls	r2, r3
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d018      	beq.n	80072aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d108      	bne.n	8007298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	d024      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
 8007296:	e01f      	b.n	80072d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
 80072a8:	e016      	b.n	80072d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d107      	bne.n	80072c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0208 	bic.w	r2, r2, #8
 80072c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	2220      	movs	r2, #32
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 808f 	beq.w	8007408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8087 	beq.w	8007408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fe:	2220      	movs	r2, #32
 8007300:	409a      	lsls	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b05      	cmp	r3, #5
 8007310:	d136      	bne.n	8007380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0216 	bic.w	r2, r2, #22
 8007320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <HAL_DMA_IRQHandler+0x1da>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0208 	bic.w	r2, r2, #8
 8007350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007356:	223f      	movs	r2, #63	; 0x3f
 8007358:	409a      	lsls	r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	2b00      	cmp	r3, #0
 8007374:	d07e      	beq.n	8007474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
        }
        return;
 800737e:	e079      	b.n	8007474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01d      	beq.n	80073ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10d      	bne.n	80073b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d031      	beq.n	8007408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
 80073ac:	e02c      	b.n	8007408 <HAL_DMA_IRQHandler+0x2a0>
 80073ae:	bf00      	nop
 80073b0:	20000030 	.word	0x20000030
 80073b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d023      	beq.n	8007408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
 80073c8:	e01e      	b.n	8007408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10f      	bne.n	80073f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0210 	bic.w	r2, r2, #16
 80073e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	2b00      	cmp	r3, #0
 800740e:	d032      	beq.n	8007476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d022      	beq.n	8007462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2205      	movs	r2, #5
 8007420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	3301      	adds	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d307      	bcc.n	8007450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f2      	bne.n	8007434 <HAL_DMA_IRQHandler+0x2cc>
 800744e:	e000      	b.n	8007452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007450:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	e000      	b.n	8007476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007474:	bf00      	nop
    }
  }
}
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d108      	bne.n	80074bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80074ba:	e007      	b.n	80074cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	3b10      	subs	r3, #16
 80074e8:	4a14      	ldr	r2, [pc, #80]	; (800753c <DMA_CalcBaseAndBitshift+0x64>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074f2:	4a13      	ldr	r2, [pc, #76]	; (8007540 <DMA_CalcBaseAndBitshift+0x68>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b03      	cmp	r3, #3
 8007504:	d909      	bls.n	800751a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	659a      	str	r2, [r3, #88]	; 0x58
 8007518:	e007      	b.n	800752a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	aaaaaaab 	.word	0xaaaaaaab
 8007540:	08014484 	.word	0x08014484

08007544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d11f      	bne.n	800759e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d856      	bhi.n	8007612 <DMA_CheckFifoParam+0xce>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <DMA_CheckFifoParam+0x28>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800758f 	.word	0x0800758f
 8007574:	0800757d 	.word	0x0800757d
 8007578:	08007613 	.word	0x08007613
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d046      	beq.n	8007616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800758c:	e043      	b.n	8007616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007596:	d140      	bne.n	800761a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800759c:	e03d      	b.n	800761a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	d121      	bne.n	80075ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d837      	bhi.n	800761e <DMA_CheckFifoParam+0xda>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <DMA_CheckFifoParam+0x70>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075cb 	.word	0x080075cb
 80075bc:	080075c5 	.word	0x080075c5
 80075c0:	080075dd 	.word	0x080075dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
      break;
 80075c8:	e030      	b.n	800762c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d025      	beq.n	8007622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075da:	e022      	b.n	8007622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075e4:	d11f      	bne.n	8007626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075ea:	e01c      	b.n	8007626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d903      	bls.n	80075fa <DMA_CheckFifoParam+0xb6>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d003      	beq.n	8007600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075f8:	e018      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
      break;
 80075fe:	e015      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00e      	beq.n	800762a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
      break;
 8007610:	e00b      	b.n	800762a <DMA_CheckFifoParam+0xe6>
      break;
 8007612:	bf00      	nop
 8007614:	e00a      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;
 8007616:	bf00      	nop
 8007618:	e008      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;
 800761a:	bf00      	nop
 800761c:	e006      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;   
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <DMA_CheckFifoParam+0xe8>
      break;
 800762a:	bf00      	nop
    }
  } 
  
  return status; 
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop

0800763c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800763c:	b480      	push	{r7}
 800763e:	b089      	sub	sp, #36	; 0x24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	e165      	b.n	8007924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007658:	2201      	movs	r2, #1
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4013      	ands	r3, r2
 800766a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	429a      	cmp	r2, r3
 8007672:	f040 8154 	bne.w	800791e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d005      	beq.n	800768e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800768a:	2b02      	cmp	r3, #2
 800768c:	d130      	bne.n	80076f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	2203      	movs	r2, #3
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	43db      	mvns	r3, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4013      	ands	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076c4:	2201      	movs	r2, #1
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	f003 0201 	and.w	r2, r3, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	fa02 f303 	lsl.w	r3, r2, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d017      	beq.n	800772c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	2203      	movs	r2, #3
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	43db      	mvns	r3, r3
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d123      	bne.n	8007780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	08da      	lsrs	r2, r3, #3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3208      	adds	r2, #8
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	220f      	movs	r2, #15
 8007750:	fa02 f303 	lsl.w	r3, r2, r3
 8007754:	43db      	mvns	r3, r3
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4013      	ands	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	4313      	orrs	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	08da      	lsrs	r2, r3, #3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3208      	adds	r2, #8
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	2203      	movs	r2, #3
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	43db      	mvns	r3, r3
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	4013      	ands	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f003 0203 	and.w	r2, r3, #3
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80ae 	beq.w	800791e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	4b5d      	ldr	r3, [pc, #372]	; (800793c <HAL_GPIO_Init+0x300>)
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	4a5c      	ldr	r2, [pc, #368]	; (800793c <HAL_GPIO_Init+0x300>)
 80077cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077d0:	6453      	str	r3, [r2, #68]	; 0x44
 80077d2:	4b5a      	ldr	r3, [pc, #360]	; (800793c <HAL_GPIO_Init+0x300>)
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077de:	4a58      	ldr	r2, [pc, #352]	; (8007940 <HAL_GPIO_Init+0x304>)
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	3302      	adds	r3, #2
 80077e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	220f      	movs	r2, #15
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43db      	mvns	r3, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4013      	ands	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a4f      	ldr	r2, [pc, #316]	; (8007944 <HAL_GPIO_Init+0x308>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d025      	beq.n	8007856 <HAL_GPIO_Init+0x21a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a4e      	ldr	r2, [pc, #312]	; (8007948 <HAL_GPIO_Init+0x30c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01f      	beq.n	8007852 <HAL_GPIO_Init+0x216>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a4d      	ldr	r2, [pc, #308]	; (800794c <HAL_GPIO_Init+0x310>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d019      	beq.n	800784e <HAL_GPIO_Init+0x212>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a4c      	ldr	r2, [pc, #304]	; (8007950 <HAL_GPIO_Init+0x314>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <HAL_GPIO_Init+0x20e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a4b      	ldr	r2, [pc, #300]	; (8007954 <HAL_GPIO_Init+0x318>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00d      	beq.n	8007846 <HAL_GPIO_Init+0x20a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a4a      	ldr	r2, [pc, #296]	; (8007958 <HAL_GPIO_Init+0x31c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d007      	beq.n	8007842 <HAL_GPIO_Init+0x206>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a49      	ldr	r2, [pc, #292]	; (800795c <HAL_GPIO_Init+0x320>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d101      	bne.n	800783e <HAL_GPIO_Init+0x202>
 800783a:	2306      	movs	r3, #6
 800783c:	e00c      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 800783e:	2307      	movs	r3, #7
 8007840:	e00a      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 8007842:	2305      	movs	r3, #5
 8007844:	e008      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 8007846:	2304      	movs	r3, #4
 8007848:	e006      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 800784a:	2303      	movs	r3, #3
 800784c:	e004      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 800784e:	2302      	movs	r3, #2
 8007850:	e002      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_GPIO_Init+0x21c>
 8007856:	2300      	movs	r3, #0
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	f002 0203 	and.w	r2, r2, #3
 800785e:	0092      	lsls	r2, r2, #2
 8007860:	4093      	lsls	r3, r2
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4313      	orrs	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007868:	4935      	ldr	r1, [pc, #212]	; (8007940 <HAL_GPIO_Init+0x304>)
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	089b      	lsrs	r3, r3, #2
 800786e:	3302      	adds	r3, #2
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007876:	4b3a      	ldr	r3, [pc, #232]	; (8007960 <HAL_GPIO_Init+0x324>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	43db      	mvns	r3, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4013      	ands	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800789a:	4a31      	ldr	r2, [pc, #196]	; (8007960 <HAL_GPIO_Init+0x324>)
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078a0:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <HAL_GPIO_Init+0x324>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4013      	ands	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078c4:	4a26      	ldr	r2, [pc, #152]	; (8007960 <HAL_GPIO_Init+0x324>)
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80078ca:	4b25      	ldr	r3, [pc, #148]	; (8007960 <HAL_GPIO_Init+0x324>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <HAL_GPIO_Init+0x324>)
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078f4:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <HAL_GPIO_Init+0x324>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4013      	ands	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007918:	4a11      	ldr	r2, [pc, #68]	; (8007960 <HAL_GPIO_Init+0x324>)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	3301      	adds	r3, #1
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	f67f ae96 	bls.w	8007658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40023800 	.word	0x40023800
 8007940:	40013800 	.word	0x40013800
 8007944:	40020000 	.word	0x40020000
 8007948:	40020400 	.word	0x40020400
 800794c:	40020800 	.word	0x40020800
 8007950:	40020c00 	.word	0x40020c00
 8007954:	40021000 	.word	0x40021000
 8007958:	40021400 	.word	0x40021400
 800795c:	40021800 	.word	0x40021800
 8007960:	40013c00 	.word	0x40013c00

08007964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e001      	b.n	8007986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079a4:	787b      	ldrb	r3, [r7, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079b0:	e003      	b.n	80079ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e12b      	b.n	8007c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fd fc18 	bl	8005224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0201 	bic.w	r2, r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a2c:	f001 f8a4 	bl	8008b78 <HAL_RCC_GetPCLK1Freq>
 8007a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	4a81      	ldr	r2, [pc, #516]	; (8007c3c <HAL_I2C_Init+0x274>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d807      	bhi.n	8007a4c <HAL_I2C_Init+0x84>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4a80      	ldr	r2, [pc, #512]	; (8007c40 <HAL_I2C_Init+0x278>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	bf94      	ite	ls
 8007a44:	2301      	movls	r3, #1
 8007a46:	2300      	movhi	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	e006      	b.n	8007a5a <HAL_I2C_Init+0x92>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a7d      	ldr	r2, [pc, #500]	; (8007c44 <HAL_I2C_Init+0x27c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	bf94      	ite	ls
 8007a54:	2301      	movls	r3, #1
 8007a56:	2300      	movhi	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e0e7      	b.n	8007c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a78      	ldr	r2, [pc, #480]	; (8007c48 <HAL_I2C_Init+0x280>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	0c9b      	lsrs	r3, r3, #18
 8007a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	4a6a      	ldr	r2, [pc, #424]	; (8007c3c <HAL_I2C_Init+0x274>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d802      	bhi.n	8007a9c <HAL_I2C_Init+0xd4>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	e009      	b.n	8007ab0 <HAL_I2C_Init+0xe8>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	4a69      	ldr	r2, [pc, #420]	; (8007c4c <HAL_I2C_Init+0x284>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	099b      	lsrs	r3, r3, #6
 8007aae:	3301      	adds	r3, #1
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	495c      	ldr	r1, [pc, #368]	; (8007c3c <HAL_I2C_Init+0x274>)
 8007acc:	428b      	cmp	r3, r1
 8007ace:	d819      	bhi.n	8007b04 <HAL_I2C_Init+0x13c>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1e59      	subs	r1, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ade:	1c59      	adds	r1, r3, #1
 8007ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ae4:	400b      	ands	r3, r1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <HAL_I2C_Init+0x138>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1e59      	subs	r1, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007af8:	3301      	adds	r3, #1
 8007afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007afe:	e051      	b.n	8007ba4 <HAL_I2C_Init+0x1dc>
 8007b00:	2304      	movs	r3, #4
 8007b02:	e04f      	b.n	8007ba4 <HAL_I2C_Init+0x1dc>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d111      	bne.n	8007b30 <HAL_I2C_Init+0x168>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1e58      	subs	r0, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	440b      	add	r3, r1
 8007b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b1e:	3301      	adds	r3, #1
 8007b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	e012      	b.n	8007b56 <HAL_I2C_Init+0x18e>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	1e58      	subs	r0, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6859      	ldr	r1, [r3, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	0099      	lsls	r1, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b46:	3301      	adds	r3, #1
 8007b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <HAL_I2C_Init+0x196>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e022      	b.n	8007ba4 <HAL_I2C_Init+0x1dc>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10e      	bne.n	8007b84 <HAL_I2C_Init+0x1bc>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1e58      	subs	r0, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6859      	ldr	r1, [r3, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	440b      	add	r3, r1
 8007b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b78:	3301      	adds	r3, #1
 8007b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b82:	e00f      	b.n	8007ba4 <HAL_I2C_Init+0x1dc>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	1e58      	subs	r0, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6859      	ldr	r1, [r3, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	0099      	lsls	r1, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	6809      	ldr	r1, [r1, #0]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69da      	ldr	r2, [r3, #28]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6911      	ldr	r1, [r2, #16]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	68d2      	ldr	r2, [r2, #12]
 8007bde:	4311      	orrs	r1, r2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695a      	ldr	r2, [r3, #20]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	000186a0 	.word	0x000186a0
 8007c40:	001e847f 	.word	0x001e847f
 8007c44:	003d08ff 	.word	0x003d08ff
 8007c48:	431bde83 	.word	0x431bde83
 8007c4c:	10624dd3 	.word	0x10624dd3

08007c50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	817b      	strh	r3, [r7, #10]
 8007c60:	4613      	mov	r3, r2
 8007c62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c64:	f7fe fab4 	bl	80061d0 <HAL_GetTick>
 8007c68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	f040 80e0 	bne.w	8007e38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2319      	movs	r3, #25
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4970      	ldr	r1, [pc, #448]	; (8007e44 <HAL_I2C_Master_Transmit+0x1f4>)
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fc58 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e0d3      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2C_Master_Transmit+0x50>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0cc      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d007      	beq.n	8007cc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2221      	movs	r2, #33	; 0x21
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	893a      	ldrh	r2, [r7, #8]
 8007cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a50      	ldr	r2, [pc, #320]	; (8007e48 <HAL_I2C_Master_Transmit+0x1f8>)
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d08:	8979      	ldrh	r1, [r7, #10]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6a3a      	ldr	r2, [r7, #32]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fac2 	bl	8008298 <I2C_MasterRequestWrite>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e08d      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007d34:	e066      	b.n	8007e04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	6a39      	ldr	r1, [r7, #32]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fcd2 	bl	80086e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d107      	bne.n	8007d5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e06b      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_I2C_Master_Transmit+0x188>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d017      	beq.n	8007dd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	6a39      	ldr	r1, [r7, #32]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fcc2 	bl	8008766 <I2C_WaitOnBTFFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00d      	beq.n	8007e04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d107      	bne.n	8007e00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e01a      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d194      	bne.n	8007d36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	00100002 	.word	0x00100002
 8007e48:	ffff0000 	.word	0xffff0000

08007e4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08c      	sub	sp, #48	; 0x30
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	461a      	mov	r2, r3
 8007e58:	460b      	mov	r3, r1
 8007e5a:	817b      	strh	r3, [r7, #10]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e60:	f7fe f9b6 	bl	80061d0 <HAL_GetTick>
 8007e64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	f040 820b 	bne.w	800828a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2319      	movs	r3, #25
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	497c      	ldr	r1, [pc, #496]	; (8008070 <HAL_I2C_Master_Receive+0x224>)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fb5a 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e1fe      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_I2C_Master_Receive+0x50>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e1f7      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d007      	beq.n	8007ec2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2222      	movs	r2, #34	; 0x22
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2210      	movs	r2, #16
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	893a      	ldrh	r2, [r7, #8]
 8007ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a5c      	ldr	r2, [pc, #368]	; (8008074 <HAL_I2C_Master_Receive+0x228>)
 8007f02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f04:	8979      	ldrh	r1, [r7, #10]
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fa46 	bl	800839c <I2C_MasterRequestRead>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e1b8      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d113      	bne.n	8007f4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f22:	2300      	movs	r3, #0
 8007f24:	623b      	str	r3, [r7, #32]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	623b      	str	r3, [r7, #32]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	623b      	str	r3, [r7, #32]
 8007f36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e18c      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d11b      	bne.n	8007f8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	e16c      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d11b      	bne.n	8007fca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	e14c      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ff0:	e138      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f200 80f1 	bhi.w	80081de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008000:	2b01      	cmp	r3, #1
 8008002:	d123      	bne.n	800804c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fbed 	bl	80087e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e139      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	855a      	strh	r2, [r3, #42]	; 0x2a
 800804a:	e10b      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008050:	2b02      	cmp	r3, #2
 8008052:	d14e      	bne.n	80080f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	2200      	movs	r2, #0
 800805c:	4906      	ldr	r1, [pc, #24]	; (8008078 <HAL_I2C_Master_Receive+0x22c>)
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fa6a 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e10e      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
 800806e:	bf00      	nop
 8008070:	00100002 	.word	0x00100002
 8008074:	ffff0000 	.word	0xffff0000
 8008078:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	b2d2      	uxtb	r2, r2
 8008098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080f0:	e0b8      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	4966      	ldr	r1, [pc, #408]	; (8008294 <HAL_I2C_Master_Receive+0x448>)
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fa1b 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0bf      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2200      	movs	r2, #0
 8008156:	494f      	ldr	r1, [pc, #316]	; (8008294 <HAL_I2C_Master_Receive+0x448>)
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 f9ed 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e091      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081dc:	e042      	b.n	8008264 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 fb00 	bl	80087e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e04c      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d118      	bne.n	8008264 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	f47f aec2 	bne.w	8007ff2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800828a:	2302      	movs	r3, #2
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3728      	adds	r7, #40	; 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	00010004 	.word	0x00010004

08008298 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	607a      	str	r2, [r7, #4]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	460b      	mov	r3, r1
 80082a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d006      	beq.n	80082c2 <I2C_MasterRequestWrite+0x2a>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d003      	beq.n	80082c2 <I2C_MasterRequestWrite+0x2a>
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082c0:	d108      	bne.n	80082d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e00b      	b.n	80082ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b12      	cmp	r3, #18
 80082da:	d107      	bne.n	80082ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f91d 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008312:	d103      	bne.n	800831c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800831a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e035      	b.n	800838c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008328:	d108      	bne.n	800833c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800832a:	897b      	ldrh	r3, [r7, #10]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	461a      	mov	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008338:	611a      	str	r2, [r3, #16]
 800833a:	e01b      	b.n	8008374 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800833c:	897b      	ldrh	r3, [r7, #10]
 800833e:	11db      	asrs	r3, r3, #7
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0306 	and.w	r3, r3, #6
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f063 030f 	orn	r3, r3, #15
 800834c:	b2da      	uxtb	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	490e      	ldr	r1, [pc, #56]	; (8008394 <I2C_MasterRequestWrite+0xfc>)
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f943 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e010      	b.n	800838c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800836a:	897b      	ldrh	r3, [r7, #10]
 800836c:	b2da      	uxtb	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4907      	ldr	r1, [pc, #28]	; (8008398 <I2C_MasterRequestWrite+0x100>)
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f933 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	00010008 	.word	0x00010008
 8008398:	00010002 	.word	0x00010002

0800839c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	460b      	mov	r3, r1
 80083aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d006      	beq.n	80083d6 <I2C_MasterRequestRead+0x3a>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d003      	beq.n	80083d6 <I2C_MasterRequestRead+0x3a>
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d4:	d108      	bne.n	80083e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e00b      	b.n	8008400 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	2b11      	cmp	r3, #17
 80083ee:	d107      	bne.n	8008400 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f893 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00d      	beq.n	8008434 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d103      	bne.n	8008430 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e079      	b.n	8008528 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843c:	d108      	bne.n	8008450 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800843e:	897b      	ldrh	r3, [r7, #10]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	611a      	str	r2, [r3, #16]
 800844e:	e05f      	b.n	8008510 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008450:	897b      	ldrh	r3, [r7, #10]
 8008452:	11db      	asrs	r3, r3, #7
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f063 030f 	orn	r3, r3, #15
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4930      	ldr	r1, [pc, #192]	; (8008530 <I2C_MasterRequestRead+0x194>)
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f8b9 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e054      	b.n	8008528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800847e:	897b      	ldrh	r3, [r7, #10]
 8008480:	b2da      	uxtb	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4929      	ldr	r1, [pc, #164]	; (8008534 <I2C_MasterRequestRead+0x198>)
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8a9 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e044      	b.n	8008528 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800849e:	2300      	movs	r3, #0
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	613b      	str	r3, [r7, #16]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f831 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00d      	beq.n	80084f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d103      	bne.n	80084f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e017      	b.n	8008528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80084f8:	897b      	ldrh	r3, [r7, #10]
 80084fa:	11db      	asrs	r3, r3, #7
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 0306 	and.w	r3, r3, #6
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f063 030e 	orn	r3, r3, #14
 8008508:	b2da      	uxtb	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <I2C_MasterRequestRead+0x198>)
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f865 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	00010008 	.word	0x00010008
 8008534:	00010002 	.word	0x00010002

08008538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008548:	e025      	b.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d021      	beq.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fd fe3d 	bl	80061d0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d116      	bne.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f043 0220 	orr.w	r2, r3, #32
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e023      	b.n	80085de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10d      	bne.n	80085bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	43da      	mvns	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4013      	ands	r3, r2
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf0c      	ite	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	2300      	movne	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	e00c      	b.n	80085d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	43da      	mvns	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4013      	ands	r3, r2
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf0c      	ite	eq
 80085ce:	2301      	moveq	r3, #1
 80085d0:	2300      	movne	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d0b6      	beq.n	800854a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085f4:	e051      	b.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d123      	bne.n	800864e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800861e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f043 0204 	orr.w	r2, r3, #4
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e046      	b.n	80086dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d021      	beq.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fd fdbb 	bl	80061d0 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d116      	bne.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f043 0220 	orr.w	r2, r3, #32
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e020      	b.n	80086dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d10c      	bne.n	80086be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	43da      	mvns	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4013      	ands	r3, r2
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bf14      	ite	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	2300      	moveq	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	e00b      	b.n	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	43da      	mvns	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4013      	ands	r3, r2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d18d      	bne.n	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086f0:	e02d      	b.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f8ce 	bl	8008894 <I2C_IsAcknowledgeFailed>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e02d      	b.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d021      	beq.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870a:	f7fd fd61 	bl	80061d0 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d116      	bne.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f043 0220 	orr.w	r2, r3, #32
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e007      	b.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b80      	cmp	r3, #128	; 0x80
 800875a:	d1ca      	bne.n	80086f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008772:	e02d      	b.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f88d 	bl	8008894 <I2C_IsAcknowledgeFailed>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e02d      	b.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d021      	beq.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878c:	f7fd fd20 	bl	80061d0 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d302      	bcc.n	80087a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d116      	bne.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	f043 0220 	orr.w	r2, r3, #32
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e007      	b.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d1ca      	bne.n	8008774 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087f4:	e042      	b.n	800887c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d119      	bne.n	8008838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0210 	mvn.w	r2, #16
 800880c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e029      	b.n	800888c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008838:	f7fd fcca 	bl	80061d0 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	429a      	cmp	r2, r3
 8008846:	d302      	bcc.n	800884e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d116      	bne.n	800887c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	f043 0220 	orr.w	r2, r3, #32
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e007      	b.n	800888c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d1b5      	bne.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088aa:	d11b      	bne.n	80088e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	4b20      	ldr	r3, [pc, #128]	; (8008984 <HAL_PWREx_EnableOverDrive+0x90>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	4a1f      	ldr	r2, [pc, #124]	; (8008984 <HAL_PWREx_EnableOverDrive+0x90>)
 8008908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890c:	6413      	str	r3, [r2, #64]	; 0x40
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <HAL_PWREx_EnableOverDrive+0x90>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <HAL_PWREx_EnableOverDrive+0x94>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008920:	f7fd fc56 	bl	80061d0 <HAL_GetTick>
 8008924:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008926:	e009      	b.n	800893c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008928:	f7fd fc52 	bl	80061d0 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008936:	d901      	bls.n	800893c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e01f      	b.n	800897c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800893c:	4b13      	ldr	r3, [pc, #76]	; (800898c <HAL_PWREx_EnableOverDrive+0x98>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008948:	d1ee      	bne.n	8008928 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008950:	f7fd fc3e 	bl	80061d0 <HAL_GetTick>
 8008954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008956:	e009      	b.n	800896c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008958:	f7fd fc3a 	bl	80061d0 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008966:	d901      	bls.n	800896c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e007      	b.n	800897c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800896c:	4b07      	ldr	r3, [pc, #28]	; (800898c <HAL_PWREx_EnableOverDrive+0x98>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008978:	d1ee      	bne.n	8008958 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40023800 	.word	0x40023800
 8008988:	420e0040 	.word	0x420e0040
 800898c:	40007000 	.word	0x40007000
 8008990:	420e0044 	.word	0x420e0044

08008994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e0cc      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089a8:	4b68      	ldr	r3, [pc, #416]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d90c      	bls.n	80089d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089b6:	4b65      	ldr	r3, [pc, #404]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b63      	ldr	r3, [pc, #396]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d001      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0b8      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d020      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089e8:	4b59      	ldr	r3, [pc, #356]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	4a58      	ldr	r2, [pc, #352]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 80089ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a00:	4b53      	ldr	r3, [pc, #332]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	4a52      	ldr	r2, [pc, #328]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0c:	4b50      	ldr	r3, [pc, #320]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	494d      	ldr	r1, [pc, #308]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d044      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d107      	bne.n	8008a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a32:	4b47      	ldr	r3, [pc, #284]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d119      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e07f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d003      	beq.n	8008a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a52:	4b3f      	ldr	r3, [pc, #252]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e06f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a62:	4b3b      	ldr	r3, [pc, #236]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e067      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a72:	4b37      	ldr	r3, [pc, #220]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f023 0203 	bic.w	r2, r3, #3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4934      	ldr	r1, [pc, #208]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a84:	f7fd fba4 	bl	80061d0 <HAL_GetTick>
 8008a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a8a:	e00a      	b.n	8008aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a8c:	f7fd fba0 	bl	80061d0 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e04f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa2:	4b2b      	ldr	r3, [pc, #172]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 020c 	and.w	r2, r3, #12
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d1eb      	bne.n	8008a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d20c      	bcs.n	8008adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aca:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d001      	beq.n	8008adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e032      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ae8:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4916      	ldr	r1, [pc, #88]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	490e      	ldr	r1, [pc, #56]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b1a:	f000 f855 	bl	8008bc8 <HAL_RCC_GetSysClockFreq>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	091b      	lsrs	r3, r3, #4
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	490a      	ldr	r1, [pc, #40]	; (8008b54 <HAL_RCC_ClockConfig+0x1c0>)
 8008b2c:	5ccb      	ldrb	r3, [r1, r3]
 8008b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b32:	4a09      	ldr	r2, [pc, #36]	; (8008b58 <HAL_RCC_ClockConfig+0x1c4>)
 8008b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b36:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <HAL_RCC_ClockConfig+0x1c8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd fb04 	bl	8006148 <HAL_InitTick>

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40023c00 	.word	0x40023c00
 8008b50:	40023800 	.word	0x40023800
 8008b54:	0801446c 	.word	0x0801446c
 8008b58:	20000030 	.word	0x20000030
 8008b5c:	2000003c 	.word	0x2000003c

08008b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b64:	4b03      	ldr	r3, [pc, #12]	; (8008b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b66:	681b      	ldr	r3, [r3, #0]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20000030 	.word	0x20000030

08008b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b7c:	f7ff fff0 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	0a9b      	lsrs	r3, r3, #10
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4903      	ldr	r1, [pc, #12]	; (8008b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40023800 	.word	0x40023800
 8008b9c:	0801447c 	.word	0x0801447c

08008ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ba4:	f7ff ffdc 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	0b5b      	lsrs	r3, r3, #13
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bb6:	5ccb      	ldrb	r3, [r1, r3]
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	0801447c 	.word	0x0801447c

08008bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bcc:	b0a6      	sub	sp, #152	; 0x98
 8008bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bee:	4bc8      	ldr	r3, [pc, #800]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
 8008bf6:	2b0c      	cmp	r3, #12
 8008bf8:	f200 817e 	bhi.w	8008ef8 <HAL_RCC_GetSysClockFreq+0x330>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c39 	.word	0x08008c39
 8008c08:	08008ef9 	.word	0x08008ef9
 8008c0c:	08008ef9 	.word	0x08008ef9
 8008c10:	08008ef9 	.word	0x08008ef9
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	08008ef9 	.word	0x08008ef9
 8008c1c:	08008ef9 	.word	0x08008ef9
 8008c20:	08008ef9 	.word	0x08008ef9
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008ef9 	.word	0x08008ef9
 8008c2c:	08008ef9 	.word	0x08008ef9
 8008c30:	08008ef9 	.word	0x08008ef9
 8008c34:	08008db3 	.word	0x08008db3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c38:	4bb6      	ldr	r3, [pc, #728]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8008c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8008c3e:	e15f      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c40:	4bb5      	ldr	r3, [pc, #724]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8008c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008c46:	e15b      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c48:	4bb1      	ldr	r3, [pc, #708]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c54:	4bae      	ldr	r3, [pc, #696]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d031      	beq.n	8008cc4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c60:	4bab      	ldr	r3, [pc, #684]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	099b      	lsrs	r3, r3, #6
 8008c66:	2200      	movs	r2, #0
 8008c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c72:	663b      	str	r3, [r7, #96]	; 0x60
 8008c74:	2300      	movs	r3, #0
 8008c76:	667b      	str	r3, [r7, #100]	; 0x64
 8008c78:	4ba7      	ldr	r3, [pc, #668]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8008c7a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008c7e:	462a      	mov	r2, r5
 8008c80:	fb03 f202 	mul.w	r2, r3, r2
 8008c84:	2300      	movs	r3, #0
 8008c86:	4621      	mov	r1, r4
 8008c88:	fb01 f303 	mul.w	r3, r1, r3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4aa2      	ldr	r2, [pc, #648]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8008c90:	4621      	mov	r1, r4
 8008c92:	fba1 1202 	umull	r1, r2, r1, r2
 8008c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c98:	460a      	mov	r2, r1
 8008c9a:	67ba      	str	r2, [r7, #120]	; 0x78
 8008c9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c9e:	4413      	add	r3, r2
 8008ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008caa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008cac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cb0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008cb4:	f7f8 f808 	bl	8000cc8 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cc2:	e064      	b.n	8008d8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cc4:	4b92      	ldr	r3, [pc, #584]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	099b      	lsrs	r3, r3, #6
 8008cca:	2200      	movs	r2, #0
 8008ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8008cce:	657a      	str	r2, [r7, #84]	; 0x54
 8008cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd8:	2300      	movs	r3, #0
 8008cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cdc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	f04f 0000 	mov.w	r0, #0
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	0159      	lsls	r1, r3, #5
 8008cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cf2:	0150      	lsls	r0, r2, #5
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	1a51      	subs	r1, r2, r1
 8008cfc:	6139      	str	r1, [r7, #16]
 8008cfe:	4629      	mov	r1, r5
 8008d00:	eb63 0301 	sbc.w	r3, r3, r1
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	f04f 0300 	mov.w	r3, #0
 8008d0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d12:	4659      	mov	r1, fp
 8008d14:	018b      	lsls	r3, r1, #6
 8008d16:	4651      	mov	r1, sl
 8008d18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	018a      	lsls	r2, r1, #6
 8008d20:	4651      	mov	r1, sl
 8008d22:	ebb2 0801 	subs.w	r8, r2, r1
 8008d26:	4659      	mov	r1, fp
 8008d28:	eb63 0901 	sbc.w	r9, r3, r1
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d40:	4690      	mov	r8, r2
 8008d42:	4699      	mov	r9, r3
 8008d44:	4623      	mov	r3, r4
 8008d46:	eb18 0303 	adds.w	r3, r8, r3
 8008d4a:	60bb      	str	r3, [r7, #8]
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	eb49 0303 	adc.w	r3, r9, r3
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	f04f 0300 	mov.w	r3, #0
 8008d5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d60:	4629      	mov	r1, r5
 8008d62:	028b      	lsls	r3, r1, #10
 8008d64:	4621      	mov	r1, r4
 8008d66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	028a      	lsls	r2, r1, #10
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d76:	2200      	movs	r2, #0
 8008d78:	643b      	str	r3, [r7, #64]	; 0x40
 8008d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d80:	f7f7 ffa2 	bl	8000cc8 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4613      	mov	r3, r2
 8008d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d8e:	4b60      	ldr	r3, [pc, #384]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	3301      	adds	r3, #1
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8008da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008db0:	e0a6      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008db2:	4b57      	ldr	r3, [pc, #348]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dbe:	4b54      	ldr	r3, [pc, #336]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d02a      	beq.n	8008e20 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dca:	4b51      	ldr	r3, [pc, #324]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	099b      	lsrs	r3, r3, #6
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4b4e      	ldr	r3, [pc, #312]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8008de0:	fb03 f201 	mul.w	r2, r3, r1
 8008de4:	2300      	movs	r3, #0
 8008de6:	fb00 f303 	mul.w	r3, r0, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	4a4a      	ldr	r2, [pc, #296]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8008dee:	fba0 1202 	umull	r1, r2, r0, r2
 8008df2:	677a      	str	r2, [r7, #116]	; 0x74
 8008df4:	460a      	mov	r2, r1
 8008df6:	673a      	str	r2, [r7, #112]	; 0x70
 8008df8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008dfa:	4413      	add	r3, r2
 8008dfc:	677b      	str	r3, [r7, #116]	; 0x74
 8008dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e02:	2200      	movs	r2, #0
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
 8008e06:	637a      	str	r2, [r7, #52]	; 0x34
 8008e08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008e10:	f7f7 ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4613      	mov	r3, r2
 8008e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e1e:	e05b      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e20:	4b3b      	ldr	r3, [pc, #236]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	099b      	lsrs	r3, r3, #6
 8008e26:	2200      	movs	r2, #0
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e32:	623b      	str	r3, [r7, #32]
 8008e34:	2300      	movs	r3, #0
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
 8008e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	f04f 0000 	mov.w	r0, #0
 8008e44:	f04f 0100 	mov.w	r1, #0
 8008e48:	0159      	lsls	r1, r3, #5
 8008e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e4e:	0150      	lsls	r0, r2, #5
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4641      	mov	r1, r8
 8008e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e74:	ebb2 040a 	subs.w	r4, r2, sl
 8008e78:	eb63 050b 	sbc.w	r5, r3, fp
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	00eb      	lsls	r3, r5, #3
 8008e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e8a:	00e2      	lsls	r2, r4, #3
 8008e8c:	4614      	mov	r4, r2
 8008e8e:	461d      	mov	r5, r3
 8008e90:	4643      	mov	r3, r8
 8008e92:	18e3      	adds	r3, r4, r3
 8008e94:	603b      	str	r3, [r7, #0]
 8008e96:	464b      	mov	r3, r9
 8008e98:	eb45 0303 	adc.w	r3, r5, r3
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eaa:	4629      	mov	r1, r5
 8008eac:	028b      	lsls	r3, r1, #10
 8008eae:	4621      	mov	r1, r4
 8008eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	028a      	lsls	r2, r1, #10
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
 8008ec4:	61fa      	str	r2, [r7, #28]
 8008ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eca:	f7f7 fefd 	bl	8000cc8 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	0f1b      	lsrs	r3, r3, #28
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8008ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008ef6:	e003      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ef8:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8008efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3798      	adds	r7, #152	; 0x98
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0e:	bf00      	nop
 8008f10:	40023800 	.word	0x40023800
 8008f14:	00f42400 	.word	0x00f42400
 8008f18:	00b71b00 	.word	0x00b71b00

08008f1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e28d      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8083 	beq.w	8009042 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f3c:	4b94      	ldr	r3, [pc, #592]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 030c 	and.w	r3, r3, #12
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d019      	beq.n	8008f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f48:	4b91      	ldr	r3, [pc, #580]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d106      	bne.n	8008f62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f54:	4b8e      	ldr	r3, [pc, #568]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f60:	d00c      	beq.n	8008f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f62:	4b8b      	ldr	r3, [pc, #556]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f6a:	2b0c      	cmp	r3, #12
 8008f6c:	d112      	bne.n	8008f94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f6e:	4b88      	ldr	r3, [pc, #544]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f7a:	d10b      	bne.n	8008f94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f7c:	4b84      	ldr	r3, [pc, #528]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05b      	beq.n	8009040 <HAL_RCC_OscConfig+0x124>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d157      	bne.n	8009040 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e25a      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9c:	d106      	bne.n	8008fac <HAL_RCC_OscConfig+0x90>
 8008f9e:	4b7c      	ldr	r3, [pc, #496]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a7b      	ldr	r2, [pc, #492]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e01d      	b.n	8008fe8 <HAL_RCC_OscConfig+0xcc>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_RCC_OscConfig+0xb4>
 8008fb6:	4b76      	ldr	r3, [pc, #472]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a75      	ldr	r2, [pc, #468]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	4b73      	ldr	r3, [pc, #460]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a72      	ldr	r2, [pc, #456]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	e00b      	b.n	8008fe8 <HAL_RCC_OscConfig+0xcc>
 8008fd0:	4b6f      	ldr	r3, [pc, #444]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a6e      	ldr	r2, [pc, #440]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4b6c      	ldr	r3, [pc, #432]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a6b      	ldr	r2, [pc, #428]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8008fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d013      	beq.n	8009018 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff0:	f7fd f8ee 	bl	80061d0 <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ff8:	f7fd f8ea 	bl	80061d0 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	; 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e21f      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800900a:	4b61      	ldr	r3, [pc, #388]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xdc>
 8009016:	e014      	b.n	8009042 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009018:	f7fd f8da 	bl	80061d0 <HAL_GetTick>
 800901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009020:	f7fd f8d6 	bl	80061d0 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b64      	cmp	r3, #100	; 0x64
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e20b      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009032:	4b57      	ldr	r3, [pc, #348]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f0      	bne.n	8009020 <HAL_RCC_OscConfig+0x104>
 800903e:	e000      	b.n	8009042 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d06f      	beq.n	800912e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800904e:	4b50      	ldr	r3, [pc, #320]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 030c 	and.w	r3, r3, #12
 8009056:	2b00      	cmp	r3, #0
 8009058:	d017      	beq.n	800908a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800905a:	4b4d      	ldr	r3, [pc, #308]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009062:	2b08      	cmp	r3, #8
 8009064:	d105      	bne.n	8009072 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009066:	4b4a      	ldr	r3, [pc, #296]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009072:	4b47      	ldr	r3, [pc, #284]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800907a:	2b0c      	cmp	r3, #12
 800907c:	d11c      	bne.n	80090b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800907e:	4b44      	ldr	r3, [pc, #272]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d116      	bne.n	80090b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800908a:	4b41      	ldr	r3, [pc, #260]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d005      	beq.n	80090a2 <HAL_RCC_OscConfig+0x186>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d001      	beq.n	80090a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e1d3      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a2:	4b3b      	ldr	r3, [pc, #236]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	4937      	ldr	r1, [pc, #220]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090b6:	e03a      	b.n	800912e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d020      	beq.n	8009102 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090c0:	4b34      	ldr	r3, [pc, #208]	; (8009194 <HAL_RCC_OscConfig+0x278>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c6:	f7fd f883 	bl	80061d0 <HAL_GetTick>
 80090ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090cc:	e008      	b.n	80090e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090ce:	f7fd f87f 	bl	80061d0 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e1b4      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e0:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0f0      	beq.n	80090ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ec:	4b28      	ldr	r3, [pc, #160]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	4925      	ldr	r1, [pc, #148]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	600b      	str	r3, [r1, #0]
 8009100:	e015      	b.n	800912e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009102:	4b24      	ldr	r3, [pc, #144]	; (8009194 <HAL_RCC_OscConfig+0x278>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009108:	f7fd f862 	bl	80061d0 <HAL_GetTick>
 800910c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009110:	f7fd f85e 	bl	80061d0 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e193      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f0      	bne.n	8009110 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d036      	beq.n	80091a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d016      	beq.n	8009170 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009142:	4b15      	ldr	r3, [pc, #84]	; (8009198 <HAL_RCC_OscConfig+0x27c>)
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009148:	f7fd f842 	bl	80061d0 <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009150:	f7fd f83e 	bl	80061d0 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e173      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009162:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <HAL_RCC_OscConfig+0x274>)
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0f0      	beq.n	8009150 <HAL_RCC_OscConfig+0x234>
 800916e:	e01b      	b.n	80091a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009170:	4b09      	ldr	r3, [pc, #36]	; (8009198 <HAL_RCC_OscConfig+0x27c>)
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009176:	f7fd f82b 	bl	80061d0 <HAL_GetTick>
 800917a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800917c:	e00e      	b.n	800919c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800917e:	f7fd f827 	bl	80061d0 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	d907      	bls.n	800919c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e15c      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
 8009190:	40023800 	.word	0x40023800
 8009194:	42470000 	.word	0x42470000
 8009198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800919c:	4b8a      	ldr	r3, [pc, #552]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800919e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1ea      	bne.n	800917e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8097 	beq.w	80092e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ba:	4b83      	ldr	r3, [pc, #524]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10f      	bne.n	80091e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
 80091ca:	4b7f      	ldr	r3, [pc, #508]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	4a7e      	ldr	r2, [pc, #504]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80091d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6413      	str	r3, [r2, #64]	; 0x40
 80091d6:	4b7c      	ldr	r3, [pc, #496]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091de:	60bb      	str	r3, [r7, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091e6:	4b79      	ldr	r3, [pc, #484]	; (80093cc <HAL_RCC_OscConfig+0x4b0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d118      	bne.n	8009224 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091f2:	4b76      	ldr	r3, [pc, #472]	; (80093cc <HAL_RCC_OscConfig+0x4b0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a75      	ldr	r2, [pc, #468]	; (80093cc <HAL_RCC_OscConfig+0x4b0>)
 80091f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091fe:	f7fc ffe7 	bl	80061d0 <HAL_GetTick>
 8009202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009204:	e008      	b.n	8009218 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009206:	f7fc ffe3 	bl	80061d0 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d901      	bls.n	8009218 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e118      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009218:	4b6c      	ldr	r3, [pc, #432]	; (80093cc <HAL_RCC_OscConfig+0x4b0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0f0      	beq.n	8009206 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d106      	bne.n	800923a <HAL_RCC_OscConfig+0x31e>
 800922c:	4b66      	ldr	r3, [pc, #408]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009230:	4a65      	ldr	r2, [pc, #404]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	6713      	str	r3, [r2, #112]	; 0x70
 8009238:	e01c      	b.n	8009274 <HAL_RCC_OscConfig+0x358>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b05      	cmp	r3, #5
 8009240:	d10c      	bne.n	800925c <HAL_RCC_OscConfig+0x340>
 8009242:	4b61      	ldr	r3, [pc, #388]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	4a60      	ldr	r2, [pc, #384]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009248:	f043 0304 	orr.w	r3, r3, #4
 800924c:	6713      	str	r3, [r2, #112]	; 0x70
 800924e:	4b5e      	ldr	r3, [pc, #376]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	4a5d      	ldr	r2, [pc, #372]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009254:	f043 0301 	orr.w	r3, r3, #1
 8009258:	6713      	str	r3, [r2, #112]	; 0x70
 800925a:	e00b      	b.n	8009274 <HAL_RCC_OscConfig+0x358>
 800925c:	4b5a      	ldr	r3, [pc, #360]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009260:	4a59      	ldr	r2, [pc, #356]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009262:	f023 0301 	bic.w	r3, r3, #1
 8009266:	6713      	str	r3, [r2, #112]	; 0x70
 8009268:	4b57      	ldr	r3, [pc, #348]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800926a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926c:	4a56      	ldr	r2, [pc, #344]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800926e:	f023 0304 	bic.w	r3, r3, #4
 8009272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d015      	beq.n	80092a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927c:	f7fc ffa8 	bl	80061d0 <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009282:	e00a      	b.n	800929a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009284:	f7fc ffa4 	bl	80061d0 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009292:	4293      	cmp	r3, r2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e0d7      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800929a:	4b4b      	ldr	r3, [pc, #300]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0ee      	beq.n	8009284 <HAL_RCC_OscConfig+0x368>
 80092a6:	e014      	b.n	80092d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a8:	f7fc ff92 	bl	80061d0 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ae:	e00a      	b.n	80092c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092b0:	f7fc ff8e 	bl	80061d0 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80092be:	4293      	cmp	r3, r2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e0c1      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092c6:	4b40      	ldr	r3, [pc, #256]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1ee      	bne.n	80092b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d105      	bne.n	80092e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092d8:	4b3b      	ldr	r3, [pc, #236]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80092da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092dc:	4a3a      	ldr	r2, [pc, #232]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80092de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80ad 	beq.w	8009448 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092ee:	4b36      	ldr	r3, [pc, #216]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 030c 	and.w	r3, r3, #12
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d060      	beq.n	80093bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d145      	bne.n	800938e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009302:	4b33      	ldr	r3, [pc, #204]	; (80093d0 <HAL_RCC_OscConfig+0x4b4>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009308:	f7fc ff62 	bl	80061d0 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009310:	f7fc ff5e 	bl	80061d0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e093      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f0      	bne.n	8009310 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69da      	ldr	r2, [r3, #28]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	019b      	lsls	r3, r3, #6
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	3b01      	subs	r3, #1
 8009348:	041b      	lsls	r3, r3, #16
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	061b      	lsls	r3, r3, #24
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	071b      	lsls	r3, r3, #28
 800935a:	491b      	ldr	r1, [pc, #108]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 800935c:	4313      	orrs	r3, r2
 800935e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009360:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <HAL_RCC_OscConfig+0x4b4>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009366:	f7fc ff33 	bl	80061d0 <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800936c:	e008      	b.n	8009380 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800936e:	f7fc ff2f 	bl	80061d0 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e064      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009380:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0f0      	beq.n	800936e <HAL_RCC_OscConfig+0x452>
 800938c:	e05c      	b.n	8009448 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800938e:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <HAL_RCC_OscConfig+0x4b4>)
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009394:	f7fc ff1c 	bl	80061d0 <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800939a:	e008      	b.n	80093ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800939c:	f7fc ff18 	bl	80061d0 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e04d      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ae:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <HAL_RCC_OscConfig+0x4ac>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1f0      	bne.n	800939c <HAL_RCC_OscConfig+0x480>
 80093ba:	e045      	b.n	8009448 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d107      	bne.n	80093d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e040      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
 80093c8:	40023800 	.word	0x40023800
 80093cc:	40007000 	.word	0x40007000
 80093d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093d4:	4b1f      	ldr	r3, [pc, #124]	; (8009454 <HAL_RCC_OscConfig+0x538>)
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d030      	beq.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d129      	bne.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d122      	bne.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009404:	4013      	ands	r3, r2
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800940a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800940c:	4293      	cmp	r3, r2
 800940e:	d119      	bne.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	3b01      	subs	r3, #1
 800941e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009420:	429a      	cmp	r2, r3
 8009422:	d10f      	bne.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009430:	429a      	cmp	r2, r3
 8009432:	d107      	bne.n	8009444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009440:	429a      	cmp	r2, r3
 8009442:	d001      	beq.n	8009448 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40023800 	.word	0x40023800

08009458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e07b      	b.n	8009562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d108      	bne.n	8009484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947a:	d009      	beq.n	8009490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	61da      	str	r2, [r3, #28]
 8009482:	e005      	b.n	8009490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fb ff02 	bl	80052b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094d8:	431a      	orrs	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800950a:	431a      	orrs	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009514:	ea42 0103 	orr.w	r1, r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	0c1b      	lsrs	r3, r3, #16
 800952e:	f003 0104 	and.w	r1, r3, #4
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	f003 0210 	and.w	r2, r3, #16
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_SPI_Transmit+0x22>
 8009588:	2302      	movs	r3, #2
 800958a:	e126      	b.n	80097da <HAL_SPI_Transmit+0x270>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009594:	f7fc fe1c 	bl	80061d0 <HAL_GetTick>
 8009598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d002      	beq.n	80095b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
 80095ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095ae:	e10b      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_SPI_Transmit+0x52>
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095c0:	e102      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2203      	movs	r2, #3
 80095c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	88fa      	ldrh	r2, [r7, #6]
 80095da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009608:	d10f      	bne.n	800962a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d007      	beq.n	8009648 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009650:	d14b      	bne.n	80096ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <HAL_SPI_Transmit+0xf6>
 800965a:	8afb      	ldrh	r3, [r7, #22]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d13e      	bne.n	80096de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	881a      	ldrh	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	1c9a      	adds	r2, r3, #2
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009684:	e02b      	b.n	80096de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b02      	cmp	r3, #2
 8009692:	d112      	bne.n	80096ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	881a      	ldrh	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	1c9a      	adds	r2, r3, #2
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80096b8:	e011      	b.n	80096de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ba:	f7fc fd89 	bl	80061d0 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d803      	bhi.n	80096d2 <HAL_SPI_Transmit+0x168>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d0:	d102      	bne.n	80096d8 <HAL_SPI_Transmit+0x16e>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096dc:	e074      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ce      	bne.n	8009686 <HAL_SPI_Transmit+0x11c>
 80096e8:	e04c      	b.n	8009784 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_SPI_Transmit+0x18e>
 80096f2:	8afb      	ldrh	r3, [r7, #22]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d140      	bne.n	800977a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800971e:	e02c      	b.n	800977a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d113      	bne.n	8009756 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974a:	b29b      	uxth	r3, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	86da      	strh	r2, [r3, #54]	; 0x36
 8009754:	e011      	b.n	800977a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009756:	f7fc fd3b 	bl	80061d0 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d803      	bhi.n	800976e <HAL_SPI_Transmit+0x204>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d102      	bne.n	8009774 <HAL_SPI_Transmit+0x20a>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009778:	e026      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1cd      	bne.n	8009720 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fa63 	bl	8009c54 <SPI_EndRxTxTransaction>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	77fb      	strb	r3, [r7, #31]
 80097c4:	e000      	b.n	80097c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80097c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08c      	sub	sp, #48	; 0x30
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097f0:	2301      	movs	r3, #1
 80097f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_SPI_TransmitReceive+0x26>
 8009804:	2302      	movs	r3, #2
 8009806:	e18a      	b.n	8009b1e <HAL_SPI_TransmitReceive+0x33c>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009810:	f7fc fcde 	bl	80061d0 <HAL_GetTick>
 8009814:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800981c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800982a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800982e:	2b01      	cmp	r3, #1
 8009830:	d00f      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x70>
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009838:	d107      	bne.n	800984a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d103      	bne.n	800984a <HAL_SPI_TransmitReceive+0x68>
 8009842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009846:	2b04      	cmp	r3, #4
 8009848:	d003      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800984a:	2302      	movs	r3, #2
 800984c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009850:	e15b      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x82>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x82>
 800985e:	887b      	ldrh	r3, [r7, #2]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800986a:	e14e      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b04      	cmp	r3, #4
 8009876:	d003      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2205      	movs	r2, #5
 800987c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	887a      	ldrh	r2, [r7, #2]
 8009890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	887a      	ldrh	r2, [r7, #2]
 8009896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	887a      	ldrh	r2, [r7, #2]
 80098a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	d007      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098dc:	d178      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x10a>
 80098e6:	8b7b      	ldrh	r3, [r7, #26]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d166      	bne.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	881a      	ldrh	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009910:	e053      	b.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d11b      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x176>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d016      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x176>
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	2b01      	cmp	r3, #1
 800992e:	d113      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	881a      	ldrh	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	1c9a      	adds	r2, r3, #2
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b01      	cmp	r3, #1
 8009964:	d119      	bne.n	800999a <HAL_SPI_TransmitReceive+0x1b8>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d014      	beq.n	800999a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	b292      	uxth	r2, r2
 800997c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	1c9a      	adds	r2, r3, #2
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009996:	2301      	movs	r3, #1
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800999a:	f7fc fc19 	bl	80061d0 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d807      	bhi.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b0:	d003      	beq.n	80099ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099b8:	e0a7      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1a6      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x130>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1a1      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x130>
 80099ce:	e07c      	b.n	8009aca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_SPI_TransmitReceive+0x1fc>
 80099d8:	8b7b      	ldrh	r3, [r7, #26]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d16b      	bne.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	7812      	ldrb	r2, [r2, #0]
 80099ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a04:	e057      	b.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d11c      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d017      	beq.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d114      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	7812      	ldrb	r2, [r2, #0]
 8009a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d119      	bne.n	8009a90 <HAL_SPI_TransmitReceive+0x2ae>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d014      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a90:	f7fc fb9e 	bl	80061d0 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d803      	bhi.n	8009aa8 <HAL_SPI_TransmitReceive+0x2c6>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d102      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x2cc>
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ab4:	e029      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1a2      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x224>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d19d      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f8c0 	bl	8009c54 <SPI_EndRxTxTransaction>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d006      	beq.n	8009ae8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ae6:	e010      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10b      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	e000      	b.n	8009b0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b34:	b2db      	uxtb	r3, r3
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
	...

08009b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b54:	f7fc fb3c 	bl	80061d0 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b64:	f7fc fb34 	bl	80061d0 <HAL_GetTick>
 8009b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6a:	4b39      	ldr	r3, [pc, #228]	; (8009c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0d1b      	lsrs	r3, r3, #20
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	e054      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d050      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b84:	f7fc fb24 	bl	80061d0 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d13d      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb2:	d111      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc6:	d107      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d10f      	bne.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e017      	b.n	8009c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d19b      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000030 	.word	0x20000030

08009c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <SPI_EndRxTxTransaction+0x7c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	; (8009cd4 <SPI_EndRxTxTransaction+0x80>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	0d5b      	lsrs	r3, r3, #21
 8009c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7e:	d112      	bne.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff5a 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d016      	beq.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e00f      	b.n	8009cc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbc:	2b80      	cmp	r3, #128	; 0x80
 8009cbe:	d0f2      	beq.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
 8009cc0:	e000      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cc2:	bf00      	nop
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000030 	.word	0x20000030
 8009cd4:	165e9f81 	.word	0x165e9f81

08009cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e041      	b.n	8009d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7fb fc30 	bl	8005564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f000 fcdc 	bl	800a6d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d001      	beq.n	8009d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e04e      	b.n	8009e2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0201 	orr.w	r2, r2, #1
 8009da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a23      	ldr	r2, [pc, #140]	; (8009e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d022      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dba:	d01d      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1f      	ldr	r2, [pc, #124]	; (8009e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d018      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1e      	ldr	r2, [pc, #120]	; (8009e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d013      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1c      	ldr	r2, [pc, #112]	; (8009e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00e      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1b      	ldr	r2, [pc, #108]	; (8009e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a19      	ldr	r2, [pc, #100]	; (8009e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_Base_Start_IT+0x80>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d111      	bne.n	8009e1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d010      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0201 	orr.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1a:	e007      	b.n	8009e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40000400 	.word	0x40000400
 8009e44:	40000800 	.word	0x40000800
 8009e48:	40000c00 	.word	0x40000c00
 8009e4c:	40010400 	.word	0x40010400
 8009e50:	40014000 	.word	0x40014000
 8009e54:	40001800 	.word	0x40001800

08009e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e041      	b.n	8009eee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fb fab6 	bl	80053f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4619      	mov	r1, r3
 8009e96:	4610      	mov	r0, r2
 8009e98:	f000 fc1c 	bl	800a6d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <HAL_TIM_PWM_Start+0x24>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	bf14      	ite	ne
 8009f14:	2301      	movne	r3, #1
 8009f16:	2300      	moveq	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	e022      	b.n	8009f62 <HAL_TIM_PWM_Start+0x6a>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d109      	bne.n	8009f36 <HAL_TIM_PWM_Start+0x3e>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	bf14      	ite	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	2300      	moveq	r3, #0
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	e015      	b.n	8009f62 <HAL_TIM_PWM_Start+0x6a>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d109      	bne.n	8009f50 <HAL_TIM_PWM_Start+0x58>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	e008      	b.n	8009f62 <HAL_TIM_PWM_Start+0x6a>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	bf14      	ite	ne
 8009f5c:	2301      	movne	r3, #1
 8009f5e:	2300      	moveq	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e07c      	b.n	800a064 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <HAL_TIM_PWM_Start+0x82>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f78:	e013      	b.n	8009fa2 <HAL_TIM_PWM_Start+0xaa>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	d104      	bne.n	8009f8a <HAL_TIM_PWM_Start+0x92>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f88:	e00b      	b.n	8009fa2 <HAL_TIM_PWM_Start+0xaa>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b08      	cmp	r3, #8
 8009f8e:	d104      	bne.n	8009f9a <HAL_TIM_PWM_Start+0xa2>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f98:	e003      	b.n	8009fa2 <HAL_TIM_PWM_Start+0xaa>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fde2 	bl	800ab74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a2d      	ldr	r2, [pc, #180]	; (800a06c <HAL_TIM_PWM_Start+0x174>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <HAL_TIM_PWM_Start+0xcc>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a2c      	ldr	r2, [pc, #176]	; (800a070 <HAL_TIM_PWM_Start+0x178>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d101      	bne.n	8009fc8 <HAL_TIM_PWM_Start+0xd0>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e000      	b.n	8009fca <HAL_TIM_PWM_Start+0xd2>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a22      	ldr	r2, [pc, #136]	; (800a06c <HAL_TIM_PWM_Start+0x174>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d022      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff0:	d01d      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a1f      	ldr	r2, [pc, #124]	; (800a074 <HAL_TIM_PWM_Start+0x17c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d018      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a1d      	ldr	r2, [pc, #116]	; (800a078 <HAL_TIM_PWM_Start+0x180>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d013      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <HAL_TIM_PWM_Start+0x184>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00e      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a16      	ldr	r2, [pc, #88]	; (800a070 <HAL_TIM_PWM_Start+0x178>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d009      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a18      	ldr	r2, [pc, #96]	; (800a080 <HAL_TIM_PWM_Start+0x188>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d004      	beq.n	800a02e <HAL_TIM_PWM_Start+0x136>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a16      	ldr	r2, [pc, #88]	; (800a084 <HAL_TIM_PWM_Start+0x18c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d111      	bne.n	800a052 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	d010      	beq.n	800a062 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0201 	orr.w	r2, r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a050:	e007      	b.n	800a062 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f042 0201 	orr.w	r2, r2, #1
 800a060:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	40010000 	.word	0x40010000
 800a070:	40010400 	.word	0x40010400
 800a074:	40000400 	.word	0x40000400
 800a078:	40000800 	.word	0x40000800
 800a07c:	40000c00 	.word	0x40000c00
 800a080:	40014000 	.word	0x40014000
 800a084:	40001800 	.word	0x40001800

0800a088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e097      	b.n	800a1cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7fb f9d9 	bl	8005468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0cc:	f023 0307 	bic.w	r3, r3, #7
 800a0d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f000 faf9 	bl	800a6d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a10a:	f023 0303 	bic.w	r3, r3, #3
 800a10e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	4313      	orrs	r3, r2
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a128:	f023 030c 	bic.w	r3, r3, #12
 800a12c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	4313      	orrs	r3, r2
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	011a      	lsls	r2, r3, #4
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	031b      	lsls	r3, r3, #12
 800a158:	4313      	orrs	r3, r2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	4313      	orrs	r3, r2
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d110      	bne.n	800a226 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d102      	bne.n	800a210 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a20a:	7b7b      	ldrb	r3, [r7, #13]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d001      	beq.n	800a214 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e069      	b.n	800a2e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a224:	e031      	b.n	800a28a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d110      	bne.n	800a24e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d102      	bne.n	800a238 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a232:	7b3b      	ldrb	r3, [r7, #12]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d001      	beq.n	800a23c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e055      	b.n	800a2e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2202      	movs	r2, #2
 800a240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a24c:	e01d      	b.n	800a28a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d108      	bne.n	800a266 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d105      	bne.n	800a266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a25a:	7b7b      	ldrb	r3, [r7, #13]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d102      	bne.n	800a266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a260:	7b3b      	ldrb	r3, [r7, #12]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d001      	beq.n	800a26a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e03e      	b.n	800a2e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_TIM_Encoder_Start+0xc4>
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b04      	cmp	r3, #4
 800a294:	d008      	beq.n	800a2a8 <HAL_TIM_Encoder_Start+0xd4>
 800a296:	e00f      	b.n	800a2b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2201      	movs	r2, #1
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fc67 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a2a6:	e016      	b.n	800a2d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	2104      	movs	r1, #4
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fc5f 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a2b6:	e00e      	b.n	800a2d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fc57 	bl	800ab74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	2104      	movs	r1, #4
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fc50 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a2d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f042 0201 	orr.w	r2, r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d122      	bne.n	800a34c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b02      	cmp	r3, #2
 800a312:	d11b      	bne.n	800a34c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f06f 0202 	mvn.w	r2, #2
 800a31c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9b0 	bl	800a698 <HAL_TIM_IC_CaptureCallback>
 800a338:	e005      	b.n	800a346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f9a2 	bl	800a684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f9b3 	bl	800a6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b04      	cmp	r3, #4
 800a358:	d122      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b04      	cmp	r3, #4
 800a366:	d11b      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f06f 0204 	mvn.w	r2, #4
 800a370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2202      	movs	r2, #2
 800a376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f986 	bl	800a698 <HAL_TIM_IC_CaptureCallback>
 800a38c:	e005      	b.n	800a39a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f978 	bl	800a684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f989 	bl	800a6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d122      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d11b      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0208 	mvn.w	r2, #8
 800a3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f95c 	bl	800a698 <HAL_TIM_IC_CaptureCallback>
 800a3e0:	e005      	b.n	800a3ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f94e 	bl	800a684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f95f 	bl	800a6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b10      	cmp	r3, #16
 800a400:	d122      	bne.n	800a448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	d11b      	bne.n	800a448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0210 	mvn.w	r2, #16
 800a418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2208      	movs	r2, #8
 800a41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f932 	bl	800a698 <HAL_TIM_IC_CaptureCallback>
 800a434:	e005      	b.n	800a442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f924 	bl	800a684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f935 	bl	800a6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b01      	cmp	r3, #1
 800a454:	d10e      	bne.n	800a474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d107      	bne.n	800a474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0201 	mvn.w	r2, #1
 800a46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7fb fbda 	bl	8005c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47e:	2b80      	cmp	r3, #128	; 0x80
 800a480:	d10e      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48c:	2b80      	cmp	r3, #128	; 0x80
 800a48e:	d107      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fc68 	bl	800ad70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4aa:	2b40      	cmp	r3, #64	; 0x40
 800a4ac:	d10e      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b8:	2b40      	cmp	r3, #64	; 0x40
 800a4ba:	d107      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f8fa 	bl	800a6c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b20      	cmp	r3, #32
 800a4d8:	d10e      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d107      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0220 	mvn.w	r2, #32
 800a4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fc32 	bl	800ad5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a51a:	2302      	movs	r3, #2
 800a51c:	e0ae      	b.n	800a67c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b0c      	cmp	r3, #12
 800a52a:	f200 809f 	bhi.w	800a66c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a569 	.word	0x0800a569
 800a538:	0800a66d 	.word	0x0800a66d
 800a53c:	0800a66d 	.word	0x0800a66d
 800a540:	0800a66d 	.word	0x0800a66d
 800a544:	0800a5a9 	.word	0x0800a5a9
 800a548:	0800a66d 	.word	0x0800a66d
 800a54c:	0800a66d 	.word	0x0800a66d
 800a550:	0800a66d 	.word	0x0800a66d
 800a554:	0800a5eb 	.word	0x0800a5eb
 800a558:	0800a66d 	.word	0x0800a66d
 800a55c:	0800a66d 	.word	0x0800a66d
 800a560:	0800a66d 	.word	0x0800a66d
 800a564:	0800a62b 	.word	0x0800a62b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f950 	bl	800a814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0208 	orr.w	r2, r2, #8
 800a582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	699a      	ldr	r2, [r3, #24]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f022 0204 	bic.w	r2, r2, #4
 800a592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6999      	ldr	r1, [r3, #24]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	619a      	str	r2, [r3, #24]
      break;
 800a5a6:	e064      	b.n	800a672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 f9a0 	bl	800a8f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6999      	ldr	r1, [r3, #24]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	021a      	lsls	r2, r3, #8
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	619a      	str	r2, [r3, #24]
      break;
 800a5e8:	e043      	b.n	800a672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f9f5 	bl	800a9e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69da      	ldr	r2, [r3, #28]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0208 	orr.w	r2, r2, #8
 800a604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	69da      	ldr	r2, [r3, #28]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0204 	bic.w	r2, r2, #4
 800a614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69d9      	ldr	r1, [r3, #28]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	61da      	str	r2, [r3, #28]
      break;
 800a628:	e023      	b.n	800a672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68b9      	ldr	r1, [r7, #8]
 800a630:	4618      	mov	r0, r3
 800a632:	f000 fa49 	bl	800aac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	69da      	ldr	r2, [r3, #28]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69da      	ldr	r2, [r3, #28]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69d9      	ldr	r1, [r3, #28]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	021a      	lsls	r2, r3, #8
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	61da      	str	r2, [r3, #28]
      break;
 800a66a:	e002      	b.n	800a672 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
      break;
 800a670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a40      	ldr	r2, [pc, #256]	; (800a7e8 <TIM_Base_SetConfig+0x114>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d013      	beq.n	800a714 <TIM_Base_SetConfig+0x40>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f2:	d00f      	beq.n	800a714 <TIM_Base_SetConfig+0x40>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a3d      	ldr	r2, [pc, #244]	; (800a7ec <TIM_Base_SetConfig+0x118>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d00b      	beq.n	800a714 <TIM_Base_SetConfig+0x40>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a3c      	ldr	r2, [pc, #240]	; (800a7f0 <TIM_Base_SetConfig+0x11c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d007      	beq.n	800a714 <TIM_Base_SetConfig+0x40>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a3b      	ldr	r2, [pc, #236]	; (800a7f4 <TIM_Base_SetConfig+0x120>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d003      	beq.n	800a714 <TIM_Base_SetConfig+0x40>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a3a      	ldr	r2, [pc, #232]	; (800a7f8 <TIM_Base_SetConfig+0x124>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d108      	bne.n	800a726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a71a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a2f      	ldr	r2, [pc, #188]	; (800a7e8 <TIM_Base_SetConfig+0x114>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d02b      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a734:	d027      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a2c      	ldr	r2, [pc, #176]	; (800a7ec <TIM_Base_SetConfig+0x118>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d023      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2b      	ldr	r2, [pc, #172]	; (800a7f0 <TIM_Base_SetConfig+0x11c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d01f      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a2a      	ldr	r2, [pc, #168]	; (800a7f4 <TIM_Base_SetConfig+0x120>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d01b      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a29      	ldr	r2, [pc, #164]	; (800a7f8 <TIM_Base_SetConfig+0x124>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d017      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a28      	ldr	r2, [pc, #160]	; (800a7fc <TIM_Base_SetConfig+0x128>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d013      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a27      	ldr	r2, [pc, #156]	; (800a800 <TIM_Base_SetConfig+0x12c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00f      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a26      	ldr	r2, [pc, #152]	; (800a804 <TIM_Base_SetConfig+0x130>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d00b      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a25      	ldr	r2, [pc, #148]	; (800a808 <TIM_Base_SetConfig+0x134>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d007      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a24      	ldr	r2, [pc, #144]	; (800a80c <TIM_Base_SetConfig+0x138>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d003      	beq.n	800a786 <TIM_Base_SetConfig+0xb2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a23      	ldr	r2, [pc, #140]	; (800a810 <TIM_Base_SetConfig+0x13c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d108      	bne.n	800a798 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <TIM_Base_SetConfig+0x114>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d003      	beq.n	800a7cc <TIM_Base_SetConfig+0xf8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a0c      	ldr	r2, [pc, #48]	; (800a7f8 <TIM_Base_SetConfig+0x124>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d103      	bne.n	800a7d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	615a      	str	r2, [r3, #20]
}
 800a7da:	bf00      	nop
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	40010000 	.word	0x40010000
 800a7ec:	40000400 	.word	0x40000400
 800a7f0:	40000800 	.word	0x40000800
 800a7f4:	40000c00 	.word	0x40000c00
 800a7f8:	40010400 	.word	0x40010400
 800a7fc:	40014000 	.word	0x40014000
 800a800:	40014400 	.word	0x40014400
 800a804:	40014800 	.word	0x40014800
 800a808:	40001800 	.word	0x40001800
 800a80c:	40001c00 	.word	0x40001c00
 800a810:	40002000 	.word	0x40002000

0800a814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f023 0201 	bic.w	r2, r3, #1
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f023 0302 	bic.w	r3, r3, #2
 800a85c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a20      	ldr	r2, [pc, #128]	; (800a8ec <TIM_OC1_SetConfig+0xd8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d003      	beq.n	800a878 <TIM_OC1_SetConfig+0x64>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a1f      	ldr	r2, [pc, #124]	; (800a8f0 <TIM_OC1_SetConfig+0xdc>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d10c      	bne.n	800a892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0308 	bic.w	r3, r3, #8
 800a87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f023 0304 	bic.w	r3, r3, #4
 800a890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a15      	ldr	r2, [pc, #84]	; (800a8ec <TIM_OC1_SetConfig+0xd8>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d003      	beq.n	800a8a2 <TIM_OC1_SetConfig+0x8e>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a14      	ldr	r2, [pc, #80]	; (800a8f0 <TIM_OC1_SetConfig+0xdc>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d111      	bne.n	800a8c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	621a      	str	r2, [r3, #32]
}
 800a8e0:	bf00      	nop
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	40010000 	.word	0x40010000
 800a8f0:	40010400 	.word	0x40010400

0800a8f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	f023 0210 	bic.w	r2, r3, #16
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	021b      	lsls	r3, r3, #8
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4313      	orrs	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f023 0320 	bic.w	r3, r3, #32
 800a93e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	011b      	lsls	r3, r3, #4
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a22      	ldr	r2, [pc, #136]	; (800a9d8 <TIM_OC2_SetConfig+0xe4>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d003      	beq.n	800a95c <TIM_OC2_SetConfig+0x68>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a21      	ldr	r2, [pc, #132]	; (800a9dc <TIM_OC2_SetConfig+0xe8>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d10d      	bne.n	800a978 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a17      	ldr	r2, [pc, #92]	; (800a9d8 <TIM_OC2_SetConfig+0xe4>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <TIM_OC2_SetConfig+0x94>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a16      	ldr	r2, [pc, #88]	; (800a9dc <TIM_OC2_SetConfig+0xe8>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d113      	bne.n	800a9b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a98e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	621a      	str	r2, [r3, #32]
}
 800a9ca:	bf00      	nop
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40010000 	.word	0x40010000
 800a9dc:	40010400 	.word	0x40010400

0800a9e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0303 	bic.w	r3, r3, #3
 800aa16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	021b      	lsls	r3, r3, #8
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a21      	ldr	r2, [pc, #132]	; (800aac0 <TIM_OC3_SetConfig+0xe0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC3_SetConfig+0x66>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a20      	ldr	r2, [pc, #128]	; (800aac4 <TIM_OC3_SetConfig+0xe4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d10d      	bne.n	800aa62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a16      	ldr	r2, [pc, #88]	; (800aac0 <TIM_OC3_SetConfig+0xe0>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d003      	beq.n	800aa72 <TIM_OC3_SetConfig+0x92>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <TIM_OC3_SetConfig+0xe4>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d113      	bne.n	800aa9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	011b      	lsls	r3, r3, #4
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685a      	ldr	r2, [r3, #4]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	621a      	str	r2, [r3, #32]
}
 800aab4:	bf00      	nop
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400

0800aac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	031b      	lsls	r3, r3, #12
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a12      	ldr	r2, [pc, #72]	; (800ab6c <TIM_OC4_SetConfig+0xa4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <TIM_OC4_SetConfig+0x68>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a11      	ldr	r2, [pc, #68]	; (800ab70 <TIM_OC4_SetConfig+0xa8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d109      	bne.n	800ab44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	019b      	lsls	r3, r3, #6
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	621a      	str	r2, [r3, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40010400 	.word	0x40010400

0800ab74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2201      	movs	r2, #1
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a1a      	ldr	r2, [r3, #32]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	fa01 f303 	lsl.w	r3, r1, r3
 800abac:	431a      	orrs	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	621a      	str	r2, [r3, #32]
}
 800abb2:	bf00      	nop
 800abb4:	371c      	adds	r7, #28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
	...

0800abc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e05a      	b.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d022      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac24:	d01d      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1d      	ldr	r2, [pc, #116]	; (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d018      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a1b      	ldr	r2, [pc, #108]	; (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d013      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a1a      	ldr	r2, [pc, #104]	; (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00e      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a18      	ldr	r2, [pc, #96]	; (800acac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d009      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a17      	ldr	r2, [pc, #92]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d004      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d10c      	bne.n	800ac7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40010000 	.word	0x40010000
 800aca0:	40000400 	.word	0x40000400
 800aca4:	40000800 	.word	0x40000800
 800aca8:	40000c00 	.word	0x40000c00
 800acac:	40010400 	.word	0x40010400
 800acb0:	40014000 	.word	0x40014000
 800acb4:	40001800 	.word	0x40001800

0800acb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e03d      	b.n	800ad50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e03f      	b.n	800ae16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d106      	bne.n	800adb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7fa fc62 	bl	8005674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2224      	movs	r2, #36	; 0x24
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f829 	bl	800ae20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	691a      	ldr	r2, [r3, #16]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800addc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695a      	ldr	r2, [r3, #20]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae24:	b0c0      	sub	sp, #256	; 0x100
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae3c:	68d9      	ldr	r1, [r3, #12]
 800ae3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	ea40 0301 	orr.w	r3, r0, r1
 800ae48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	431a      	orrs	r2, r3
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae78:	f021 010c 	bic.w	r1, r1, #12
 800ae7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae86:	430b      	orrs	r3, r1
 800ae88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae9a:	6999      	ldr	r1, [r3, #24]
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	ea40 0301 	orr.w	r3, r0, r1
 800aea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	4b8f      	ldr	r3, [pc, #572]	; (800b0ec <UART_SetConfig+0x2cc>)
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d005      	beq.n	800aec0 <UART_SetConfig+0xa0>
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b8d      	ldr	r3, [pc, #564]	; (800b0f0 <UART_SetConfig+0x2d0>)
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d104      	bne.n	800aeca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aec0:	f7fd fe6e 	bl	8008ba0 <HAL_RCC_GetPCLK2Freq>
 800aec4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aec8:	e003      	b.n	800aed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aeca:	f7fd fe55 	bl	8008b78 <HAL_RCC_GetPCLK1Freq>
 800aece:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aedc:	f040 810c 	bne.w	800b0f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aeea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aeee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aef2:	4622      	mov	r2, r4
 800aef4:	462b      	mov	r3, r5
 800aef6:	1891      	adds	r1, r2, r2
 800aef8:	65b9      	str	r1, [r7, #88]	; 0x58
 800aefa:	415b      	adcs	r3, r3
 800aefc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aefe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af02:	4621      	mov	r1, r4
 800af04:	eb12 0801 	adds.w	r8, r2, r1
 800af08:	4629      	mov	r1, r5
 800af0a:	eb43 0901 	adc.w	r9, r3, r1
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	f04f 0300 	mov.w	r3, #0
 800af16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af22:	4690      	mov	r8, r2
 800af24:	4699      	mov	r9, r3
 800af26:	4623      	mov	r3, r4
 800af28:	eb18 0303 	adds.w	r3, r8, r3
 800af2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af30:	462b      	mov	r3, r5
 800af32:	eb49 0303 	adc.w	r3, r9, r3
 800af36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af4e:	460b      	mov	r3, r1
 800af50:	18db      	adds	r3, r3, r3
 800af52:	653b      	str	r3, [r7, #80]	; 0x50
 800af54:	4613      	mov	r3, r2
 800af56:	eb42 0303 	adc.w	r3, r2, r3
 800af5a:	657b      	str	r3, [r7, #84]	; 0x54
 800af5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af64:	f7f5 feb0 	bl	8000cc8 <__aeabi_uldivmod>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4b61      	ldr	r3, [pc, #388]	; (800b0f4 <UART_SetConfig+0x2d4>)
 800af6e:	fba3 2302 	umull	r2, r3, r3, r2
 800af72:	095b      	lsrs	r3, r3, #5
 800af74:	011c      	lsls	r4, r3, #4
 800af76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800af84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	1891      	adds	r1, r2, r2
 800af8e:	64b9      	str	r1, [r7, #72]	; 0x48
 800af90:	415b      	adcs	r3, r3
 800af92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800af98:	4641      	mov	r1, r8
 800af9a:	eb12 0a01 	adds.w	sl, r2, r1
 800af9e:	4649      	mov	r1, r9
 800afa0:	eb43 0b01 	adc.w	fp, r3, r1
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afb8:	4692      	mov	sl, r2
 800afba:	469b      	mov	fp, r3
 800afbc:	4643      	mov	r3, r8
 800afbe:	eb1a 0303 	adds.w	r3, sl, r3
 800afc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afc6:	464b      	mov	r3, r9
 800afc8:	eb4b 0303 	adc.w	r3, fp, r3
 800afcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800afe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800afe4:	460b      	mov	r3, r1
 800afe6:	18db      	adds	r3, r3, r3
 800afe8:	643b      	str	r3, [r7, #64]	; 0x40
 800afea:	4613      	mov	r3, r2
 800afec:	eb42 0303 	adc.w	r3, r2, r3
 800aff0:	647b      	str	r3, [r7, #68]	; 0x44
 800aff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800affa:	f7f5 fe65 	bl	8000cc8 <__aeabi_uldivmod>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4611      	mov	r1, r2
 800b004:	4b3b      	ldr	r3, [pc, #236]	; (800b0f4 <UART_SetConfig+0x2d4>)
 800b006:	fba3 2301 	umull	r2, r3, r3, r1
 800b00a:	095b      	lsrs	r3, r3, #5
 800b00c:	2264      	movs	r2, #100	; 0x64
 800b00e:	fb02 f303 	mul.w	r3, r2, r3
 800b012:	1acb      	subs	r3, r1, r3
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b01a:	4b36      	ldr	r3, [pc, #216]	; (800b0f4 <UART_SetConfig+0x2d4>)
 800b01c:	fba3 2302 	umull	r2, r3, r3, r2
 800b020:	095b      	lsrs	r3, r3, #5
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b028:	441c      	add	r4, r3
 800b02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b034:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b03c:	4642      	mov	r2, r8
 800b03e:	464b      	mov	r3, r9
 800b040:	1891      	adds	r1, r2, r2
 800b042:	63b9      	str	r1, [r7, #56]	; 0x38
 800b044:	415b      	adcs	r3, r3
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b04c:	4641      	mov	r1, r8
 800b04e:	1851      	adds	r1, r2, r1
 800b050:	6339      	str	r1, [r7, #48]	; 0x30
 800b052:	4649      	mov	r1, r9
 800b054:	414b      	adcs	r3, r1
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b064:	4659      	mov	r1, fp
 800b066:	00cb      	lsls	r3, r1, #3
 800b068:	4651      	mov	r1, sl
 800b06a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b06e:	4651      	mov	r1, sl
 800b070:	00ca      	lsls	r2, r1, #3
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	4603      	mov	r3, r0
 800b078:	4642      	mov	r2, r8
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b080:	464b      	mov	r3, r9
 800b082:	460a      	mov	r2, r1
 800b084:	eb42 0303 	adc.w	r3, r2, r3
 800b088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b098:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b09c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	18db      	adds	r3, r3, r3
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	eb42 0303 	adc.w	r3, r2, r3
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0b6:	f7f5 fe07 	bl	8000cc8 <__aeabi_uldivmod>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <UART_SetConfig+0x2d4>)
 800b0c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b0c4:	095b      	lsrs	r3, r3, #5
 800b0c6:	2164      	movs	r1, #100	; 0x64
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	3332      	adds	r3, #50	; 0x32
 800b0d2:	4a08      	ldr	r2, [pc, #32]	; (800b0f4 <UART_SetConfig+0x2d4>)
 800b0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d8:	095b      	lsrs	r3, r3, #5
 800b0da:	f003 0207 	and.w	r2, r3, #7
 800b0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4422      	add	r2, r4
 800b0e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b0e8:	e105      	b.n	800b2f6 <UART_SetConfig+0x4d6>
 800b0ea:	bf00      	nop
 800b0ec:	40011000 	.word	0x40011000
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b102:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b10a:	4642      	mov	r2, r8
 800b10c:	464b      	mov	r3, r9
 800b10e:	1891      	adds	r1, r2, r2
 800b110:	6239      	str	r1, [r7, #32]
 800b112:	415b      	adcs	r3, r3
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
 800b116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b11a:	4641      	mov	r1, r8
 800b11c:	1854      	adds	r4, r2, r1
 800b11e:	4649      	mov	r1, r9
 800b120:	eb43 0501 	adc.w	r5, r3, r1
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	f04f 0300 	mov.w	r3, #0
 800b12c:	00eb      	lsls	r3, r5, #3
 800b12e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b132:	00e2      	lsls	r2, r4, #3
 800b134:	4614      	mov	r4, r2
 800b136:	461d      	mov	r5, r3
 800b138:	4643      	mov	r3, r8
 800b13a:	18e3      	adds	r3, r4, r3
 800b13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b140:	464b      	mov	r3, r9
 800b142:	eb45 0303 	adc.w	r3, r5, r3
 800b146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	f04f 0300 	mov.w	r3, #0
 800b162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b166:	4629      	mov	r1, r5
 800b168:	008b      	lsls	r3, r1, #2
 800b16a:	4621      	mov	r1, r4
 800b16c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b170:	4621      	mov	r1, r4
 800b172:	008a      	lsls	r2, r1, #2
 800b174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b178:	f7f5 fda6 	bl	8000cc8 <__aeabi_uldivmod>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4b60      	ldr	r3, [pc, #384]	; (800b304 <UART_SetConfig+0x4e4>)
 800b182:	fba3 2302 	umull	r2, r3, r3, r2
 800b186:	095b      	lsrs	r3, r3, #5
 800b188:	011c      	lsls	r4, r3, #4
 800b18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b194:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b19c:	4642      	mov	r2, r8
 800b19e:	464b      	mov	r3, r9
 800b1a0:	1891      	adds	r1, r2, r2
 800b1a2:	61b9      	str	r1, [r7, #24]
 800b1a4:	415b      	adcs	r3, r3
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	1851      	adds	r1, r2, r1
 800b1b0:	6139      	str	r1, [r7, #16]
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	414b      	adcs	r3, r1
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	00cb      	lsls	r3, r1, #3
 800b1c8:	4651      	mov	r1, sl
 800b1ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ce:	4651      	mov	r1, sl
 800b1d0:	00ca      	lsls	r2, r1, #3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4642      	mov	r2, r8
 800b1da:	189b      	adds	r3, r3, r2
 800b1dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1e0:	464b      	mov	r3, r9
 800b1e2:	460a      	mov	r2, r1
 800b1e4:	eb42 0303 	adc.w	r3, r2, r3
 800b1e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b1f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b1f8:	f04f 0200 	mov.w	r2, #0
 800b1fc:	f04f 0300 	mov.w	r3, #0
 800b200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b204:	4649      	mov	r1, r9
 800b206:	008b      	lsls	r3, r1, #2
 800b208:	4641      	mov	r1, r8
 800b20a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b20e:	4641      	mov	r1, r8
 800b210:	008a      	lsls	r2, r1, #2
 800b212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b216:	f7f5 fd57 	bl	8000cc8 <__aeabi_uldivmod>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4b39      	ldr	r3, [pc, #228]	; (800b304 <UART_SetConfig+0x4e4>)
 800b220:	fba3 1302 	umull	r1, r3, r3, r2
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	2164      	movs	r1, #100	; 0x64
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	011b      	lsls	r3, r3, #4
 800b230:	3332      	adds	r3, #50	; 0x32
 800b232:	4a34      	ldr	r2, [pc, #208]	; (800b304 <UART_SetConfig+0x4e4>)
 800b234:	fba2 2303 	umull	r2, r3, r2, r3
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b23e:	441c      	add	r4, r3
 800b240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b244:	2200      	movs	r2, #0
 800b246:	673b      	str	r3, [r7, #112]	; 0x70
 800b248:	677a      	str	r2, [r7, #116]	; 0x74
 800b24a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b24e:	4642      	mov	r2, r8
 800b250:	464b      	mov	r3, r9
 800b252:	1891      	adds	r1, r2, r2
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	415b      	adcs	r3, r3
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b25e:	4641      	mov	r1, r8
 800b260:	1851      	adds	r1, r2, r1
 800b262:	6039      	str	r1, [r7, #0]
 800b264:	4649      	mov	r1, r9
 800b266:	414b      	adcs	r3, r1
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	f04f 0300 	mov.w	r3, #0
 800b272:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b276:	4659      	mov	r1, fp
 800b278:	00cb      	lsls	r3, r1, #3
 800b27a:	4651      	mov	r1, sl
 800b27c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b280:	4651      	mov	r1, sl
 800b282:	00ca      	lsls	r2, r1, #3
 800b284:	4610      	mov	r0, r2
 800b286:	4619      	mov	r1, r3
 800b288:	4603      	mov	r3, r0
 800b28a:	4642      	mov	r2, r8
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b290:	464b      	mov	r3, r9
 800b292:	460a      	mov	r2, r1
 800b294:	eb42 0303 	adc.w	r3, r2, r3
 800b298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	663b      	str	r3, [r7, #96]	; 0x60
 800b2a4:	667a      	str	r2, [r7, #100]	; 0x64
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	008b      	lsls	r3, r1, #2
 800b2b6:	4641      	mov	r1, r8
 800b2b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2bc:	4641      	mov	r1, r8
 800b2be:	008a      	lsls	r2, r1, #2
 800b2c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2c4:	f7f5 fd00 	bl	8000cc8 <__aeabi_uldivmod>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4b0d      	ldr	r3, [pc, #52]	; (800b304 <UART_SetConfig+0x4e4>)
 800b2ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b2d2:	095b      	lsrs	r3, r3, #5
 800b2d4:	2164      	movs	r1, #100	; 0x64
 800b2d6:	fb01 f303 	mul.w	r3, r1, r3
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	011b      	lsls	r3, r3, #4
 800b2de:	3332      	adds	r3, #50	; 0x32
 800b2e0:	4a08      	ldr	r2, [pc, #32]	; (800b304 <UART_SetConfig+0x4e4>)
 800b2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e6:	095b      	lsrs	r3, r3, #5
 800b2e8:	f003 020f 	and.w	r2, r3, #15
 800b2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4422      	add	r2, r4
 800b2f4:	609a      	str	r2, [r3, #8]
}
 800b2f6:	bf00      	nop
 800b2f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b302:	bf00      	nop
 800b304:	51eb851f 	.word	0x51eb851f

0800b308 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b30c:	4904      	ldr	r1, [pc, #16]	; (800b320 <MX_FATFS_Init+0x18>)
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <MX_FATFS_Init+0x1c>)
 800b310:	f003 fd56 	bl	800edc0 <FATFS_LinkDriver>
 800b314:	4603      	mov	r3, r0
 800b316:	461a      	mov	r2, r3
 800b318:	4b03      	ldr	r3, [pc, #12]	; (800b328 <MX_FATFS_Init+0x20>)
 800b31a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b31c:	bf00      	nop
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20002860 	.word	0x20002860
 800b324:	20000044 	.word	0x20000044
 800b328:	2000285c 	.word	0x2000285c

0800b32c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b32c:	b480      	push	{r7}
 800b32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b330:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b332:	4618      	mov	r0, r3
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
    return SD_disk_initialize(pdrv);
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7f6 fdff 	bl	8001f4c <SD_disk_initialize>
 800b34e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
    return SD_disk_status(pdrv);
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	4618      	mov	r0, r3
 800b366:	f7f6 fedb 	bl	8002120 <SD_disk_status>
 800b36a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 800b384:	7bf8      	ldrb	r0, [r7, #15]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	f7f6 fede 	bl	800214c <SD_disk_read>
 800b390:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 800b3aa:	7bf8      	ldrb	r0, [r7, #15]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	f7f6 ff35 	bl	8002220 <SD_disk_write>
 800b3b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	603a      	str	r2, [r7, #0]
 800b3ca:	71fb      	strb	r3, [r7, #7]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800b3d0:	79b9      	ldrb	r1, [r7, #6]
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f6 ffa6 	bl	8002328 <SD_disk_ioctl>
 800b3dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	4a08      	ldr	r2, [pc, #32]	; (800b418 <disk_status+0x30>)
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	79fa      	ldrb	r2, [r7, #7]
 800b400:	4905      	ldr	r1, [pc, #20]	; (800b418 <disk_status+0x30>)
 800b402:	440a      	add	r2, r1
 800b404:	7a12      	ldrb	r2, [r2, #8]
 800b406:	4610      	mov	r0, r2
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20002a8c 	.word	0x20002a8c

0800b41c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	4a0d      	ldr	r2, [pc, #52]	; (800b464 <disk_initialize+0x48>)
 800b42e:	5cd3      	ldrb	r3, [r2, r3]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d111      	bne.n	800b458 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	4a0b      	ldr	r2, [pc, #44]	; (800b464 <disk_initialize+0x48>)
 800b438:	2101      	movs	r1, #1
 800b43a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	4a09      	ldr	r2, [pc, #36]	; (800b464 <disk_initialize+0x48>)
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	79fa      	ldrb	r2, [r7, #7]
 800b44a:	4906      	ldr	r1, [pc, #24]	; (800b464 <disk_initialize+0x48>)
 800b44c:	440a      	add	r2, r1
 800b44e:	7a12      	ldrb	r2, [r2, #8]
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b458:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20002a8c 	.word	0x20002a8c

0800b468 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607a      	str	r2, [r7, #4]
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <disk_read+0x3c>)
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	4413      	add	r3, r2
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	689c      	ldr	r4, [r3, #8]
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4a07      	ldr	r2, [pc, #28]	; (800b4a4 <disk_read+0x3c>)
 800b488:	4413      	add	r3, r2
 800b48a:	7a18      	ldrb	r0, [r3, #8]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	47a0      	blx	r4
 800b494:	4603      	mov	r3, r0
 800b496:	75fb      	strb	r3, [r7, #23]
  return res;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd90      	pop	{r4, r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20002a8c 	.word	0x20002a8c

0800b4a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b4a8:	b590      	push	{r4, r7, lr}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	603b      	str	r3, [r7, #0]
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	; (800b4e4 <disk_write+0x3c>)
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	68dc      	ldr	r4, [r3, #12]
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	4a07      	ldr	r2, [pc, #28]	; (800b4e4 <disk_write+0x3c>)
 800b4c8:	4413      	add	r3, r2
 800b4ca:	7a18      	ldrb	r0, [r3, #8]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	47a0      	blx	r4
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	371c      	adds	r7, #28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd90      	pop	{r4, r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20002a8c 	.word	0x20002a8c

0800b4e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	603a      	str	r2, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	4a09      	ldr	r2, [pc, #36]	; (800b520 <disk_ioctl+0x38>)
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	79fa      	ldrb	r2, [r7, #7]
 800b506:	4906      	ldr	r1, [pc, #24]	; (800b520 <disk_ioctl+0x38>)
 800b508:	440a      	add	r2, r1
 800b50a:	7a10      	ldrb	r0, [r2, #8]
 800b50c:	79b9      	ldrb	r1, [r7, #6]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	4798      	blx	r3
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]
  return res;
 800b516:	7bfb      	ldrb	r3, [r7, #15]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20002a8c 	.word	0x20002a8c

0800b524 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3301      	adds	r3, #1
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b534:	89fb      	ldrh	r3, [r7, #14]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	b21a      	sxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b21b      	sxth	r3, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	b21b      	sxth	r3, r3
 800b544:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b546:	89fb      	ldrh	r3, [r7, #14]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3303      	adds	r3, #3
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	021b      	lsls	r3, r3, #8
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	3202      	adds	r2, #2
 800b56c:	7812      	ldrb	r2, [r2, #0]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	021b      	lsls	r3, r3, #8
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	3201      	adds	r2, #1
 800b57a:	7812      	ldrb	r2, [r2, #0]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	7812      	ldrb	r2, [r2, #0]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	887a      	ldrh	r2, [r7, #2]
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	887b      	ldrh	r3, [r7, #2]
 800b5b4:	0a1b      	lsrs	r3, r3, #8
 800b5b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	607a      	str	r2, [r7, #4]
 800b5be:	887a      	ldrh	r2, [r7, #2]
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	701a      	strb	r2, [r3, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	0a1b      	lsrs	r3, r3, #8
 800b5ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	607a      	str	r2, [r7, #4]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	0a1b      	lsrs	r3, r3, #8
 800b5fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	0a1b      	lsrs	r3, r3, #8
 800b60e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	607a      	str	r2, [r7, #4]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	b2d2      	uxtb	r2, r2
 800b61a:	701a      	strb	r2, [r3, #0]
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	1c53      	adds	r3, r2, #1
 800b646:	613b      	str	r3, [r7, #16]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	1c59      	adds	r1, r3, #1
 800b64c:	6179      	str	r1, [r7, #20]
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3b01      	subs	r3, #1
 800b656:	607b      	str	r3, [r7, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1f1      	bne.n	800b642 <mem_cpy+0x1a>
	}
}
 800b65e:	bf00      	nop
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b66a:	b480      	push	{r7}
 800b66c:	b087      	sub	sp, #28
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	617a      	str	r2, [r7, #20]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3b01      	subs	r3, #1
 800b68a:	607b      	str	r3, [r7, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f3      	bne.n	800b67a <mem_set+0x10>
}
 800b692:	bf00      	nop
 800b694:	bf00      	nop
 800b696:	371c      	adds	r7, #28
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6a0:	b480      	push	{r7}
 800b6a2:	b089      	sub	sp, #36	; 0x24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	61fb      	str	r3, [r7, #28]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	61fa      	str	r2, [r7, #28]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	61ba      	str	r2, [r7, #24]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	1acb      	subs	r3, r1, r3
 800b6cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	607b      	str	r3, [r7, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <mem_cmp+0x40>
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0eb      	beq.n	800b6b8 <mem_cmp+0x18>

	return r;
 800b6e0:	697b      	ldr	r3, [r7, #20]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3724      	adds	r7, #36	; 0x24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b6f8:	e002      	b.n	800b700 <chk_chr+0x12>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <chk_chr+0x26>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	4293      	cmp	r3, r2
 800b712:	d1f2      	bne.n	800b6fa <chk_chr+0xc>
	return *str;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	781b      	ldrb	r3, [r3, #0]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e029      	b.n	800b78c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b738:	4a27      	ldr	r2, [pc, #156]	; (800b7d8 <chk_lock+0xb4>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	4413      	add	r3, r2
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d01d      	beq.n	800b782 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b746:	4a24      	ldr	r2, [pc, #144]	; (800b7d8 <chk_lock+0xb4>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	4413      	add	r3, r2
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d116      	bne.n	800b786 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b758:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <chk_lock+0xb4>)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	4413      	add	r3, r2
 800b760:	3304      	adds	r3, #4
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b768:	429a      	cmp	r2, r3
 800b76a:	d10c      	bne.n	800b786 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b76c:	4a1a      	ldr	r2, [pc, #104]	; (800b7d8 <chk_lock+0xb4>)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	011b      	lsls	r3, r3, #4
 800b772:	4413      	add	r3, r2
 800b774:	3308      	adds	r3, #8
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d102      	bne.n	800b786 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b780:	e007      	b.n	800b792 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b782:	2301      	movs	r3, #1
 800b784:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3301      	adds	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d9d2      	bls.n	800b738 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d109      	bne.n	800b7ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d102      	bne.n	800b7a4 <chk_lock+0x80>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d101      	bne.n	800b7a8 <chk_lock+0x84>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e010      	b.n	800b7ca <chk_lock+0xa6>
 800b7a8:	2312      	movs	r3, #18
 800b7aa:	e00e      	b.n	800b7ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <chk_lock+0xa0>
 800b7b2:	4a09      	ldr	r2, [pc, #36]	; (800b7d8 <chk_lock+0xb4>)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	4413      	add	r3, r2
 800b7ba:	330c      	adds	r3, #12
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c2:	d101      	bne.n	800b7c8 <chk_lock+0xa4>
 800b7c4:	2310      	movs	r3, #16
 800b7c6:	e000      	b.n	800b7ca <chk_lock+0xa6>
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	2000286c 	.word	0x2000286c

0800b7dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	e002      	b.n	800b7ee <enq_lock+0x12>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	607b      	str	r3, [r7, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d806      	bhi.n	800b802 <enq_lock+0x26>
 800b7f4:	4a09      	ldr	r2, [pc, #36]	; (800b81c <enq_lock+0x40>)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	011b      	lsls	r3, r3, #4
 800b7fa:	4413      	add	r3, r2
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1f2      	bne.n	800b7e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b02      	cmp	r3, #2
 800b806:	bf14      	ite	ne
 800b808:	2301      	movne	r3, #1
 800b80a:	2300      	moveq	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	2000286c 	.word	0x2000286c

0800b820 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e01f      	b.n	800b870 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b830:	4a41      	ldr	r2, [pc, #260]	; (800b938 <inc_lock+0x118>)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	4413      	add	r3, r2
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d113      	bne.n	800b86a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b842:	4a3d      	ldr	r2, [pc, #244]	; (800b938 <inc_lock+0x118>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	4413      	add	r3, r2
 800b84a:	3304      	adds	r3, #4
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b852:	429a      	cmp	r2, r3
 800b854:	d109      	bne.n	800b86a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b856:	4a38      	ldr	r2, [pc, #224]	; (800b938 <inc_lock+0x118>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	4413      	add	r3, r2
 800b85e:	3308      	adds	r3, #8
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b866:	429a      	cmp	r2, r3
 800b868:	d006      	beq.n	800b878 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d9dc      	bls.n	800b830 <inc_lock+0x10>
 800b876:	e000      	b.n	800b87a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b878:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d132      	bne.n	800b8e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e002      	b.n	800b88c <inc_lock+0x6c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3301      	adds	r3, #1
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d806      	bhi.n	800b8a0 <inc_lock+0x80>
 800b892:	4a29      	ldr	r2, [pc, #164]	; (800b938 <inc_lock+0x118>)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	4413      	add	r3, r2
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1f2      	bne.n	800b886 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d101      	bne.n	800b8aa <inc_lock+0x8a>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e040      	b.n	800b92c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4922      	ldr	r1, [pc, #136]	; (800b938 <inc_lock+0x118>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	440b      	add	r3, r1
 800b8b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	491e      	ldr	r1, [pc, #120]	; (800b938 <inc_lock+0x118>)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	011b      	lsls	r3, r3, #4
 800b8c2:	440b      	add	r3, r1
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	695a      	ldr	r2, [r3, #20]
 800b8cc:	491a      	ldr	r1, [pc, #104]	; (800b938 <inc_lock+0x118>)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	440b      	add	r3, r1
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8d8:	4a17      	ldr	r2, [pc, #92]	; (800b938 <inc_lock+0x118>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	4413      	add	r3, r2
 800b8e0:	330c      	adds	r3, #12
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d009      	beq.n	800b900 <inc_lock+0xe0>
 800b8ec:	4a12      	ldr	r2, [pc, #72]	; (800b938 <inc_lock+0x118>)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	4413      	add	r3, r2
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <inc_lock+0xe0>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e015      	b.n	800b92c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d108      	bne.n	800b918 <inc_lock+0xf8>
 800b906:	4a0c      	ldr	r2, [pc, #48]	; (800b938 <inc_lock+0x118>)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	011b      	lsls	r3, r3, #4
 800b90c:	4413      	add	r3, r2
 800b90e:	330c      	adds	r3, #12
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	b29a      	uxth	r2, r3
 800b916:	e001      	b.n	800b91c <inc_lock+0xfc>
 800b918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b91c:	4906      	ldr	r1, [pc, #24]	; (800b938 <inc_lock+0x118>)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	011b      	lsls	r3, r3, #4
 800b922:	440b      	add	r3, r1
 800b924:	330c      	adds	r3, #12
 800b926:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3301      	adds	r3, #1
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	2000286c 	.word	0x2000286c

0800b93c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3b01      	subs	r3, #1
 800b948:	607b      	str	r3, [r7, #4]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d825      	bhi.n	800b99c <dec_lock+0x60>
		n = Files[i].ctr;
 800b950:	4a17      	ldr	r2, [pc, #92]	; (800b9b0 <dec_lock+0x74>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	4413      	add	r3, r2
 800b958:	330c      	adds	r3, #12
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b95e:	89fb      	ldrh	r3, [r7, #14]
 800b960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b964:	d101      	bne.n	800b96a <dec_lock+0x2e>
 800b966:	2300      	movs	r3, #0
 800b968:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b96a:	89fb      	ldrh	r3, [r7, #14]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <dec_lock+0x3a>
 800b970:	89fb      	ldrh	r3, [r7, #14]
 800b972:	3b01      	subs	r3, #1
 800b974:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b976:	4a0e      	ldr	r2, [pc, #56]	; (800b9b0 <dec_lock+0x74>)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	011b      	lsls	r3, r3, #4
 800b97c:	4413      	add	r3, r2
 800b97e:	330c      	adds	r3, #12
 800b980:	89fa      	ldrh	r2, [r7, #14]
 800b982:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b984:	89fb      	ldrh	r3, [r7, #14]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d105      	bne.n	800b996 <dec_lock+0x5a>
 800b98a:	4a09      	ldr	r2, [pc, #36]	; (800b9b0 <dec_lock+0x74>)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	4413      	add	r3, r2
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	737b      	strb	r3, [r7, #13]
 800b99a:	e001      	b.n	800b9a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b99c:	2302      	movs	r3, #2
 800b99e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b9a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	2000286c 	.word	0x2000286c

0800b9b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e010      	b.n	800b9e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b9c2:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <clear_lock+0x44>)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	4413      	add	r3, r2
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d105      	bne.n	800b9de <clear_lock+0x2a>
 800b9d2:	4a09      	ldr	r2, [pc, #36]	; (800b9f8 <clear_lock+0x44>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	4413      	add	r3, r2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d9eb      	bls.n	800b9c2 <clear_lock+0xe>
	}
}
 800b9ea:	bf00      	nop
 800b9ec:	bf00      	nop
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	2000286c 	.word	0x2000286c

0800b9fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	78db      	ldrb	r3, [r3, #3]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d034      	beq.n	800ba7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	7858      	ldrb	r0, [r3, #1]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba20:	2301      	movs	r3, #1
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	f7ff fd40 	bl	800b4a8 <disk_write>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	73fb      	strb	r3, [r7, #15]
 800ba32:	e022      	b.n	800ba7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d217      	bcs.n	800ba7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	789b      	ldrb	r3, [r3, #2]
 800ba4e:	613b      	str	r3, [r7, #16]
 800ba50:	e010      	b.n	800ba74 <sync_window+0x78>
					wsect += fs->fsize;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4413      	add	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	7858      	ldrb	r0, [r3, #1]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba66:	2301      	movs	r3, #1
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	f7ff fd1d 	bl	800b4a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	613b      	str	r3, [r7, #16]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d8eb      	bhi.n	800ba52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d01b      	beq.n	800bad4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff ffad 	bl	800b9fc <sync_window>
 800baa2:	4603      	mov	r3, r0
 800baa4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d113      	bne.n	800bad4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	7858      	ldrb	r0, [r3, #1]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bab6:	2301      	movs	r3, #1
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	f7ff fcd5 	bl	800b468 <disk_read>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bac4:	f04f 33ff 	mov.w	r3, #4294967295
 800bac8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff ff87 	bl	800b9fc <sync_window>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d159      	bne.n	800bbac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	d149      	bne.n	800bb94 <sync_fs+0xb4>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	791b      	ldrb	r3, [r3, #4]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d145      	bne.n	800bb94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	899b      	ldrh	r3, [r3, #12]
 800bb12:	461a      	mov	r2, r3
 800bb14:	2100      	movs	r1, #0
 800bb16:	f7ff fda8 	bl	800b66a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	333c      	adds	r3, #60	; 0x3c
 800bb1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff fd37 	bl	800b59a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	333c      	adds	r3, #60	; 0x3c
 800bb30:	4921      	ldr	r1, [pc, #132]	; (800bbb8 <sync_fs+0xd8>)
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff fd4c 	bl	800b5d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	333c      	adds	r3, #60	; 0x3c
 800bb3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb40:	491e      	ldr	r1, [pc, #120]	; (800bbbc <sync_fs+0xdc>)
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fd44 	bl	800b5d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	333c      	adds	r3, #60	; 0x3c
 800bb4c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f7ff fd3a 	bl	800b5d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	333c      	adds	r3, #60	; 0x3c
 800bb60:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	f7ff fd30 	bl	800b5d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7858      	ldrb	r0, [r3, #1]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f7ff fc8d 	bl	800b4a8 <disk_write>
			fs->fsi_flag = 0;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff fca3 	bl	800b4e8 <disk_ioctl>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <sync_fs+0xcc>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	41615252 	.word	0x41615252
 800bbbc:	61417272 	.word	0x61417272

0800bbc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	3b02      	subs	r3, #2
 800bbce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	3b02      	subs	r3, #2
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d301      	bcc.n	800bbe0 <clust2sect+0x20>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	e008      	b.n	800bbf2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	895b      	ldrh	r3, [r3, #10]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	fb03 f202 	mul.w	r2, r3, r2
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	4413      	add	r3, r2
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d904      	bls.n	800bc1e <get_fat+0x20>
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d302      	bcc.n	800bc24 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc1e:	2301      	movs	r3, #1
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	e0bb      	b.n	800bd9c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295
 800bc28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	f000 8083 	beq.w	800bd3a <get_fat+0x13c>
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	f300 80a7 	bgt.w	800bd88 <get_fat+0x18a>
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d002      	beq.n	800bc44 <get_fat+0x46>
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d056      	beq.n	800bcf0 <get_fat+0xf2>
 800bc42:	e0a1      	b.n	800bd88 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	4413      	add	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	899b      	ldrh	r3, [r3, #12]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc62:	4413      	add	r3, r2
 800bc64:	4619      	mov	r1, r3
 800bc66:	6938      	ldr	r0, [r7, #16]
 800bc68:	f7ff ff0c 	bl	800ba84 <move_window>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f040 808d 	bne.w	800bd8e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	60fa      	str	r2, [r7, #12]
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	8992      	ldrh	r2, [r2, #12]
 800bc7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc82:	fb01 f202 	mul.w	r2, r1, r2
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	899b      	ldrh	r3, [r3, #12]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bca2:	4413      	add	r3, r2
 800bca4:	4619      	mov	r1, r3
 800bca6:	6938      	ldr	r0, [r7, #16]
 800bca8:	f7ff feec 	bl	800ba84 <move_window>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d16f      	bne.n	800bd92 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	899b      	ldrh	r3, [r3, #12]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcbe:	fb01 f202 	mul.w	r2, r1, r2
 800bcc2:	1a9b      	subs	r3, r3, r2
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	461a      	mov	r2, r3
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <get_fat+0xe8>
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	091b      	lsrs	r3, r3, #4
 800bce4:	e002      	b.n	800bcec <get_fat+0xee>
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcec:	617b      	str	r3, [r7, #20]
			break;
 800bcee:	e055      	b.n	800bd9c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	899b      	ldrh	r3, [r3, #12]
 800bcf8:	085b      	lsrs	r3, r3, #1
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd04:	4413      	add	r3, r2
 800bd06:	4619      	mov	r1, r3
 800bd08:	6938      	ldr	r0, [r7, #16]
 800bd0a:	f7ff febb 	bl	800ba84 <move_window>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d140      	bne.n	800bd96 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	8992      	ldrh	r2, [r2, #12]
 800bd22:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd26:	fb00 f202 	mul.w	r2, r0, r2
 800bd2a:	1a9b      	subs	r3, r3, r2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fbf8 	bl	800b524 <ld_word>
 800bd34:	4603      	mov	r3, r0
 800bd36:	617b      	str	r3, [r7, #20]
			break;
 800bd38:	e030      	b.n	800bd9c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	899b      	ldrh	r3, [r3, #12]
 800bd42:	089b      	lsrs	r3, r3, #2
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4619      	mov	r1, r3
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd4e:	4413      	add	r3, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	6938      	ldr	r0, [r7, #16]
 800bd54:	f7ff fe96 	bl	800ba84 <move_window>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d11d      	bne.n	800bd9a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	8992      	ldrh	r2, [r2, #12]
 800bd6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd70:	fb00 f202 	mul.w	r2, r0, r2
 800bd74:	1a9b      	subs	r3, r3, r2
 800bd76:	440b      	add	r3, r1
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff fbeb 	bl	800b554 <ld_dword>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd84:	617b      	str	r3, [r7, #20]
			break;
 800bd86:	e009      	b.n	800bd9c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e006      	b.n	800bd9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd8e:	bf00      	nop
 800bd90:	e004      	b.n	800bd9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd92:	bf00      	nop
 800bd94:	e002      	b.n	800bd9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd96:	bf00      	nop
 800bd98:	e000      	b.n	800bd9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd9a:	bf00      	nop
		}
	}

	return val;
 800bd9c:	697b      	ldr	r3, [r7, #20]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bda6:	b590      	push	{r4, r7, lr}
 800bda8:	b089      	sub	sp, #36	; 0x24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	f240 8102 	bls.w	800bfc2 <put_fat+0x21c>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	f080 80fc 	bcs.w	800bfc2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	f000 80b6 	beq.w	800bf40 <put_fat+0x19a>
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	f300 80fd 	bgt.w	800bfd4 <put_fat+0x22e>
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d003      	beq.n	800bde6 <put_fat+0x40>
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	f000 8083 	beq.w	800beea <put_fat+0x144>
 800bde4:	e0f6      	b.n	800bfd4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	899b      	ldrh	r3, [r3, #12]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	fbb3 f3f1 	udiv	r3, r3, r1
 800be04:	4413      	add	r3, r2
 800be06:	4619      	mov	r1, r3
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff fe3b 	bl	800ba84 <move_window>
 800be0e:	4603      	mov	r3, r0
 800be10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be12:	7ffb      	ldrb	r3, [r7, #31]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 80d6 	bne.w	800bfc6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	61ba      	str	r2, [r7, #24]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	8992      	ldrh	r2, [r2, #12]
 800be2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be2e:	fb00 f202 	mul.w	r2, r0, r2
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	440b      	add	r3, r1
 800be36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00d      	beq.n	800be5e <put_fat+0xb8>
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	b25b      	sxtb	r3, r3
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	b25a      	sxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	b25b      	sxtb	r3, r3
 800be56:	4313      	orrs	r3, r2
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	e001      	b.n	800be62 <put_fat+0xbc>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	899b      	ldrh	r3, [r3, #12]
 800be74:	4619      	mov	r1, r3
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	fbb3 f3f1 	udiv	r3, r3, r1
 800be7c:	4413      	add	r3, r2
 800be7e:	4619      	mov	r1, r3
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7ff fdff 	bl	800ba84 <move_window>
 800be86:	4603      	mov	r3, r0
 800be88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be8a:	7ffb      	ldrb	r3, [r7, #31]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 809c 	bne.w	800bfca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	899b      	ldrh	r3, [r3, #12]
 800be9c:	461a      	mov	r2, r3
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bea4:	fb00 f202 	mul.w	r2, r0, r2
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	440b      	add	r3, r1
 800beac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <put_fat+0x11a>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	091b      	lsrs	r3, r3, #4
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	e00e      	b.n	800bede <put_fat+0x138>
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b25b      	sxtb	r3, r3
 800bec6:	f023 030f 	bic.w	r3, r3, #15
 800beca:	b25a      	sxtb	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	0a1b      	lsrs	r3, r3, #8
 800bed0:	b25b      	sxtb	r3, r3
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	b25b      	sxtb	r3, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2201      	movs	r2, #1
 800bee6:	70da      	strb	r2, [r3, #3]
			break;
 800bee8:	e074      	b.n	800bfd4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	899b      	ldrh	r3, [r3, #12]
 800bef2:	085b      	lsrs	r3, r3, #1
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	4619      	mov	r1, r3
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	fbb3 f3f1 	udiv	r3, r3, r1
 800befe:	4413      	add	r3, r2
 800bf00:	4619      	mov	r1, r3
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fdbe 	bl	800ba84 <move_window>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf0c:	7ffb      	ldrb	r3, [r7, #31]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d15d      	bne.n	800bfce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	8992      	ldrh	r2, [r2, #12]
 800bf20:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf24:	fb00 f202 	mul.w	r2, r0, r2
 800bf28:	1a9b      	subs	r3, r3, r2
 800bf2a:	440b      	add	r3, r1
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	b292      	uxth	r2, r2
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fb31 	bl	800b59a <st_word>
			fs->wflag = 1;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	70da      	strb	r2, [r3, #3]
			break;
 800bf3e:	e049      	b.n	800bfd4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	899b      	ldrh	r3, [r3, #12]
 800bf48:	089b      	lsrs	r3, r3, #2
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf54:	4413      	add	r3, r2
 800bf56:	4619      	mov	r1, r3
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f7ff fd93 	bl	800ba84 <move_window>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf62:	7ffb      	ldrb	r3, [r7, #31]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d134      	bne.n	800bfd2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	8992      	ldrh	r2, [r2, #12]
 800bf7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf80:	fb00 f202 	mul.w	r2, r0, r2
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	440b      	add	r3, r1
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7ff fae3 	bl	800b554 <ld_dword>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf94:	4323      	orrs	r3, r4
 800bf96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	8992      	ldrh	r2, [r2, #12]
 800bfa6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfaa:	fb00 f202 	mul.w	r2, r0, r2
 800bfae:	1a9b      	subs	r3, r3, r2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fb0b 	bl	800b5d0 <st_dword>
			fs->wflag = 1;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	70da      	strb	r2, [r3, #3]
			break;
 800bfc0:	e008      	b.n	800bfd4 <put_fat+0x22e>
		}
	}
 800bfc2:	bf00      	nop
 800bfc4:	e006      	b.n	800bfd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bfc6:	bf00      	nop
 800bfc8:	e004      	b.n	800bfd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bfca:	bf00      	nop
 800bfcc:	e002      	b.n	800bfd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bfce:	bf00      	nop
 800bfd0:	e000      	b.n	800bfd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bfd2:	bf00      	nop
	return res;
 800bfd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3724      	adds	r7, #36	; 0x24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd90      	pop	{r4, r7, pc}

0800bfde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d904      	bls.n	800c004 <remove_chain+0x26>
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	429a      	cmp	r2, r3
 800c002:	d301      	bcc.n	800c008 <remove_chain+0x2a>
 800c004:	2302      	movs	r3, #2
 800c006:	e04b      	b.n	800c0a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00c      	beq.n	800c028 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	69b8      	ldr	r0, [r7, #24]
 800c016:	f7ff fec6 	bl	800bda6 <put_fat>
 800c01a:	4603      	mov	r3, r0
 800c01c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c01e:	7ffb      	ldrb	r3, [r7, #31]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <remove_chain+0x4a>
 800c024:	7ffb      	ldrb	r3, [r7, #31]
 800c026:	e03b      	b.n	800c0a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff fde7 	bl	800bbfe <get_fat>
 800c030:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d031      	beq.n	800c09c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d101      	bne.n	800c042 <remove_chain+0x64>
 800c03e:	2302      	movs	r3, #2
 800c040:	e02e      	b.n	800c0a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d101      	bne.n	800c04e <remove_chain+0x70>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e028      	b.n	800c0a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c04e:	2200      	movs	r2, #0
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f7ff fea7 	bl	800bda6 <put_fat>
 800c058:	4603      	mov	r3, r0
 800c05a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c05c:	7ffb      	ldrb	r3, [r7, #31]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <remove_chain+0x88>
 800c062:	7ffb      	ldrb	r3, [r7, #31]
 800c064:	e01c      	b.n	800c0a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	699a      	ldr	r2, [r3, #24]
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	3b02      	subs	r3, #2
 800c070:	429a      	cmp	r2, r3
 800c072:	d20b      	bcs.n	800c08c <remove_chain+0xae>
			fs->free_clst++;
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	f043 0301 	orr.w	r3, r3, #1
 800c086:	b2da      	uxtb	r2, r3
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	429a      	cmp	r2, r3
 800c098:	d3c6      	bcc.n	800c028 <remove_chain+0x4a>
 800c09a:	e000      	b.n	800c09e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c09c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3720      	adds	r7, #32
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10d      	bne.n	800c0da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <create_chain+0x2c>
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d31b      	bcc.n	800c10c <create_chain+0x64>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	61bb      	str	r3, [r7, #24]
 800c0d8:	e018      	b.n	800c10c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7ff fd8e 	bl	800bbfe <get_fat>
 800c0e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d801      	bhi.n	800c0ee <create_chain+0x46>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e070      	b.n	800c1d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d101      	bne.n	800c0fa <create_chain+0x52>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	e06a      	b.n	800c1d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	429a      	cmp	r2, r3
 800c102:	d201      	bcs.n	800c108 <create_chain+0x60>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	e063      	b.n	800c1d0 <create_chain+0x128>
		scl = clst;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	3301      	adds	r3, #1
 800c114:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	69fa      	ldr	r2, [r7, #28]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d307      	bcc.n	800c130 <create_chain+0x88>
				ncl = 2;
 800c120:	2302      	movs	r3, #2
 800c122:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c124:	69fa      	ldr	r2, [r7, #28]
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d901      	bls.n	800c130 <create_chain+0x88>
 800c12c:	2300      	movs	r3, #0
 800c12e:	e04f      	b.n	800c1d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c130:	69f9      	ldr	r1, [r7, #28]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff fd63 	bl	800bbfe <get_fat>
 800c138:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00e      	beq.n	800c15e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d003      	beq.n	800c14e <create_chain+0xa6>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14c:	d101      	bne.n	800c152 <create_chain+0xaa>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	e03e      	b.n	800c1d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c152:	69fa      	ldr	r2, [r7, #28]
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	429a      	cmp	r2, r3
 800c158:	d1da      	bne.n	800c110 <create_chain+0x68>
 800c15a:	2300      	movs	r3, #0
 800c15c:	e038      	b.n	800c1d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c15e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c160:	f04f 32ff 	mov.w	r2, #4294967295
 800c164:	69f9      	ldr	r1, [r7, #28]
 800c166:	6938      	ldr	r0, [r7, #16]
 800c168:	f7ff fe1d 	bl	800bda6 <put_fat>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <create_chain+0xe2>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6938      	ldr	r0, [r7, #16]
 800c182:	f7ff fe10 	bl	800bda6 <put_fat>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d116      	bne.n	800c1be <create_chain+0x116>
		fs->last_clst = ncl;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	3b02      	subs	r3, #2
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d804      	bhi.n	800c1ae <create_chain+0x106>
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	1e5a      	subs	r2, r3, #1
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	791b      	ldrb	r3, [r3, #4]
 800c1b2:	f043 0301 	orr.w	r3, r3, #1
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	711a      	strb	r2, [r3, #4]
 800c1bc:	e007      	b.n	800c1ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d102      	bne.n	800c1ca <create_chain+0x122>
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c8:	e000      	b.n	800c1cc <create_chain+0x124>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1ce:	69fb      	ldr	r3, [r7, #28]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3720      	adds	r7, #32
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b087      	sub	sp, #28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	899b      	ldrh	r3, [r3, #12]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	8952      	ldrh	r2, [r2, #10]
 800c200:	fbb3 f3f2 	udiv	r3, r3, r2
 800c204:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1d1a      	adds	r2, r3, #4
 800c20a:	613a      	str	r2, [r7, #16]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <clmt_clust+0x42>
 800c216:	2300      	movs	r3, #0
 800c218:	e010      	b.n	800c23c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d307      	bcc.n	800c232 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	617b      	str	r3, [r7, #20]
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	3304      	adds	r3, #4
 800c22e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c230:	e7e9      	b.n	800c206 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c232:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	4413      	add	r3, r2
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c25e:	d204      	bcs.n	800c26a <dir_sdi+0x22>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	f003 031f 	and.w	r3, r3, #31
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c26a:	2302      	movs	r3, #2
 800c26c:	e071      	b.n	800c352 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <dir_sdi+0x46>
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d902      	bls.n	800c28e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10c      	bne.n	800c2ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	095b      	lsrs	r3, r3, #5
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	8912      	ldrh	r2, [r2, #8]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d301      	bcc.n	800c2a4 <dir_sdi+0x5c>
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	e056      	b.n	800c352 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	61da      	str	r2, [r3, #28]
 800c2ac:	e02d      	b.n	800c30a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	895b      	ldrh	r3, [r3, #10]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	899b      	ldrh	r3, [r3, #12]
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2be:	e019      	b.n	800c2f4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6979      	ldr	r1, [r7, #20]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff fc9a 	bl	800bbfe <get_fat>
 800c2ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d101      	bne.n	800c2d8 <dir_sdi+0x90>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e03c      	b.n	800c352 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d904      	bls.n	800c2e8 <dir_sdi+0xa0>
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d301      	bcc.n	800c2ec <dir_sdi+0xa4>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e032      	b.n	800c352 <dir_sdi+0x10a>
			ofs -= csz;
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d2e1      	bcs.n	800c2c0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c2fc:	6979      	ldr	r1, [r7, #20]
 800c2fe:	6938      	ldr	r0, [r7, #16]
 800c300:	f7ff fc5e 	bl	800bbc0 <clust2sect>
 800c304:	4602      	mov	r2, r0
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <dir_sdi+0xd4>
 800c318:	2302      	movs	r3, #2
 800c31a:	e01a      	b.n	800c352 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	69da      	ldr	r2, [r3, #28]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	899b      	ldrh	r3, [r3, #12]
 800c324:	4619      	mov	r1, r3
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	fbb3 f3f1 	udiv	r3, r3, r1
 800c32c:	441a      	add	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	899b      	ldrh	r3, [r3, #12]
 800c33c:	461a      	mov	r2, r3
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	fbb3 f0f2 	udiv	r0, r3, r2
 800c344:	fb00 f202 	mul.w	r2, r0, r2
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	18ca      	adds	r2, r1, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b086      	sub	sp, #24
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	3320      	adds	r3, #32
 800c370:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <dir_next+0x28>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c380:	d301      	bcc.n	800c386 <dir_next+0x2c>
 800c382:	2304      	movs	r3, #4
 800c384:	e0bb      	b.n	800c4fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	899b      	ldrh	r3, [r3, #12]
 800c38a:	461a      	mov	r2, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c392:	fb01 f202 	mul.w	r2, r1, r2
 800c396:	1a9b      	subs	r3, r3, r2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f040 809d 	bne.w	800c4d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	69db      	ldr	r3, [r3, #28]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	095b      	lsrs	r3, r3, #5
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	8912      	ldrh	r2, [r2, #8]
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	f0c0 808d 	bcc.w	800c4d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	61da      	str	r2, [r3, #28]
 800c3c4:	2304      	movs	r3, #4
 800c3c6:	e09a      	b.n	800c4fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	899b      	ldrh	r3, [r3, #12]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	8952      	ldrh	r2, [r2, #10]
 800c3d8:	3a01      	subs	r2, #1
 800c3da:	4013      	ands	r3, r2
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d17b      	bne.n	800c4d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	f7ff fc08 	bl	800bbfe <get_fat>
 800c3ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d801      	bhi.n	800c3fa <dir_next+0xa0>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e081      	b.n	800c4fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c400:	d101      	bne.n	800c406 <dir_next+0xac>
 800c402:	2301      	movs	r3, #1
 800c404:	e07b      	b.n	800c4fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d359      	bcc.n	800c4c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d104      	bne.n	800c420 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	61da      	str	r2, [r3, #28]
 800c41c:	2304      	movs	r3, #4
 800c41e:	e06e      	b.n	800c4fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7ff fe3d 	bl	800c0a8 <create_chain>
 800c42e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <dir_next+0xe0>
 800c436:	2307      	movs	r3, #7
 800c438:	e061      	b.n	800c4fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d101      	bne.n	800c444 <dir_next+0xea>
 800c440:	2302      	movs	r3, #2
 800c442:	e05c      	b.n	800c4fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44a:	d101      	bne.n	800c450 <dir_next+0xf6>
 800c44c:	2301      	movs	r3, #1
 800c44e:	e056      	b.n	800c4fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff fad3 	bl	800b9fc <sync_window>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <dir_next+0x106>
 800c45c:	2301      	movs	r3, #1
 800c45e:	e04e      	b.n	800c4fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	899b      	ldrh	r3, [r3, #12]
 800c46a:	461a      	mov	r2, r3
 800c46c:	2100      	movs	r1, #0
 800c46e:	f7ff f8fc 	bl	800b66a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c472:	2300      	movs	r3, #0
 800c474:	613b      	str	r3, [r7, #16]
 800c476:	6979      	ldr	r1, [r7, #20]
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f7ff fba1 	bl	800bbc0 <clust2sect>
 800c47e:	4602      	mov	r2, r0
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	639a      	str	r2, [r3, #56]	; 0x38
 800c484:	e012      	b.n	800c4ac <dir_next+0x152>
						fs->wflag = 1;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2201      	movs	r2, #1
 800c48a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f7ff fab5 	bl	800b9fc <sync_window>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <dir_next+0x142>
 800c498:	2301      	movs	r3, #1
 800c49a:	e030      	b.n	800c4fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	613b      	str	r3, [r7, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	639a      	str	r2, [r3, #56]	; 0x38
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	895b      	ldrh	r3, [r3, #10]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d3e6      	bcc.n	800c486 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c4ca:	6979      	ldr	r1, [r7, #20]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff fb77 	bl	800bbc0 <clust2sect>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	899b      	ldrh	r3, [r3, #12]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4f0:	fb00 f202 	mul.w	r2, r0, r2
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	18ca      	adds	r2, r1, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b086      	sub	sp, #24
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c516:	2100      	movs	r1, #0
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff fe95 	bl	800c248 <dir_sdi>
 800c51e:	4603      	mov	r3, r0
 800c520:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d12b      	bne.n	800c580 <dir_alloc+0x7a>
		n = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	4619      	mov	r1, r3
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f7ff faa6 	bl	800ba84 <move_window>
 800c538:	4603      	mov	r3, r0
 800c53a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d11d      	bne.n	800c57e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2be5      	cmp	r3, #229	; 0xe5
 800c54a:	d004      	beq.n	800c556 <dir_alloc+0x50>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a1b      	ldr	r3, [r3, #32]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d107      	bne.n	800c566 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3301      	adds	r3, #1
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	429a      	cmp	r2, r3
 800c562:	d102      	bne.n	800c56a <dir_alloc+0x64>
 800c564:	e00c      	b.n	800c580 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c566:	2300      	movs	r3, #0
 800c568:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c56a:	2101      	movs	r1, #1
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff fef4 	bl	800c35a <dir_next>
 800c572:	4603      	mov	r3, r0
 800c574:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0d7      	beq.n	800c52c <dir_alloc+0x26>
 800c57c:	e000      	b.n	800c580 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c57e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	2b04      	cmp	r3, #4
 800c584:	d101      	bne.n	800c58a <dir_alloc+0x84>
 800c586:	2307      	movs	r3, #7
 800c588:	75fb      	strb	r3, [r7, #23]
	return res;
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	331a      	adds	r3, #26
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe ffbe 	bl	800b524 <ld_word>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	d109      	bne.n	800c5c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fe ffb3 	bl	800b524 <ld_word>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	041b      	lsls	r3, r3, #16
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	331a      	adds	r3, #26
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	b292      	uxth	r2, r2
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe ffd6 	bl	800b59a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d109      	bne.n	800c60a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	f103 0214 	add.w	r2, r3, #20
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	0c1b      	lsrs	r3, r3, #16
 800c600:	b29b      	uxth	r3, r3
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f7fe ffc8 	bl	800b59a <st_word>
	}
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c614:	b590      	push	{r4, r7, lr}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	331a      	adds	r3, #26
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe ff7e 	bl	800b524 <ld_word>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <cmp_lfn+0x1e>
 800c62e:	2300      	movs	r3, #0
 800c630:	e059      	b.n	800c6e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c63a:	1e5a      	subs	r2, r3, #1
 800c63c:	4613      	mov	r3, r2
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	4413      	add	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c648:	2301      	movs	r3, #1
 800c64a:	81fb      	strh	r3, [r7, #14]
 800c64c:	2300      	movs	r3, #0
 800c64e:	613b      	str	r3, [r7, #16]
 800c650:	e033      	b.n	800c6ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c652:	4a27      	ldr	r2, [pc, #156]	; (800c6f0 <cmp_lfn+0xdc>)
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	4413      	add	r3, r2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	4413      	add	r3, r2
 800c660:	4618      	mov	r0, r3
 800c662:	f7fe ff5f 	bl	800b524 <ld_word>
 800c666:	4603      	mov	r3, r0
 800c668:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c66a:	89fb      	ldrh	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d01a      	beq.n	800c6a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2bfe      	cmp	r3, #254	; 0xfe
 800c674:	d812      	bhi.n	800c69c <cmp_lfn+0x88>
 800c676:	89bb      	ldrh	r3, [r7, #12]
 800c678:	4618      	mov	r0, r3
 800c67a:	f002 fbed 	bl	800ee58 <ff_wtoupper>
 800c67e:	4603      	mov	r3, r0
 800c680:	461c      	mov	r4, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	617a      	str	r2, [r7, #20]
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f002 fbe1 	bl	800ee58 <ff_wtoupper>
 800c696:	4603      	mov	r3, r0
 800c698:	429c      	cmp	r4, r3
 800c69a:	d001      	beq.n	800c6a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c69c:	2300      	movs	r3, #0
 800c69e:	e022      	b.n	800c6e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c6a0:	89bb      	ldrh	r3, [r7, #12]
 800c6a2:	81fb      	strh	r3, [r7, #14]
 800c6a4:	e006      	b.n	800c6b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c6a6:	89bb      	ldrh	r3, [r7, #12]
 800c6a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d001      	beq.n	800c6b4 <cmp_lfn+0xa0>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e018      	b.n	800c6e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	613b      	str	r3, [r7, #16]
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2b0c      	cmp	r3, #12
 800c6be:	d9c8      	bls.n	800c652 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <cmp_lfn+0xd0>
 800c6cc:	89fb      	ldrh	r3, [r7, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <cmp_lfn+0xd0>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	4413      	add	r3, r2
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <cmp_lfn+0xd0>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	e000      	b.n	800c6e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6e4:	2301      	movs	r3, #1
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd90      	pop	{r4, r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	0801450c 	.word	0x0801450c

0800c6f4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	331a      	adds	r3, #26
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe ff0e 	bl	800b524 <ld_word>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <pick_lfn+0x1e>
 800c70e:	2300      	movs	r3, #0
 800c710:	e04d      	b.n	800c7ae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c71a:	1e5a      	subs	r2, r3, #1
 800c71c:	4613      	mov	r3, r2
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	4413      	add	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c728:	2301      	movs	r3, #1
 800c72a:	81fb      	strh	r3, [r7, #14]
 800c72c:	2300      	movs	r3, #0
 800c72e:	613b      	str	r3, [r7, #16]
 800c730:	e028      	b.n	800c784 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c732:	4a21      	ldr	r2, [pc, #132]	; (800c7b8 <pick_lfn+0xc4>)
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	4413      	add	r3, r2
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	4413      	add	r3, r2
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe feef 	bl	800b524 <ld_word>
 800c746:	4603      	mov	r3, r0
 800c748:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c74a:	89fb      	ldrh	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00f      	beq.n	800c770 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	2bfe      	cmp	r3, #254	; 0xfe
 800c754:	d901      	bls.n	800c75a <pick_lfn+0x66>
 800c756:	2300      	movs	r3, #0
 800c758:	e029      	b.n	800c7ae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c75a:	89bb      	ldrh	r3, [r7, #12]
 800c75c:	81fb      	strh	r3, [r7, #14]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	617a      	str	r2, [r7, #20]
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4413      	add	r3, r2
 800c76a:	89fa      	ldrh	r2, [r7, #14]
 800c76c:	801a      	strh	r2, [r3, #0]
 800c76e:	e006      	b.n	800c77e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c770:	89bb      	ldrh	r3, [r7, #12]
 800c772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c776:	4293      	cmp	r3, r2
 800c778:	d001      	beq.n	800c77e <pick_lfn+0x8a>
 800c77a:	2300      	movs	r3, #0
 800c77c:	e017      	b.n	800c7ae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	3301      	adds	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b0c      	cmp	r3, #12
 800c788:	d9d3      	bls.n	800c732 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2bfe      	cmp	r3, #254	; 0xfe
 800c79a:	d901      	bls.n	800c7a0 <pick_lfn+0xac>
 800c79c:	2300      	movs	r3, #0
 800c79e:	e006      	b.n	800c7ae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c7ac:	2301      	movs	r3, #1
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0801450c 	.word	0x0801450c

0800c7bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	71fb      	strb	r3, [r7, #7]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	330d      	adds	r3, #13
 800c7d6:	79ba      	ldrb	r2, [r7, #6]
 800c7d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	330b      	adds	r3, #11
 800c7de:	220f      	movs	r2, #15
 800c7e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	330c      	adds	r3, #12
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	331a      	adds	r3, #26
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fed2 	bl	800b59a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	1e5a      	subs	r2, r3, #1
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	4413      	add	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4413      	add	r3, r2
 800c804:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	82fb      	strh	r3, [r7, #22]
 800c80a:	2300      	movs	r3, #0
 800c80c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c80e:	8afb      	ldrh	r3, [r7, #22]
 800c810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c814:	4293      	cmp	r3, r2
 800c816:	d007      	beq.n	800c828 <put_lfn+0x6c>
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	61fa      	str	r2, [r7, #28]
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	4413      	add	r3, r2
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c828:	4a17      	ldr	r2, [pc, #92]	; (800c888 <put_lfn+0xcc>)
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	4413      	add	r3, r2
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	4413      	add	r3, r2
 800c836:	8afa      	ldrh	r2, [r7, #22]
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fead 	bl	800b59a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c840:	8afb      	ldrh	r3, [r7, #22]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <put_lfn+0x90>
 800c846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c84a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	3301      	adds	r3, #1
 800c850:	61bb      	str	r3, [r7, #24]
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	2b0c      	cmp	r3, #12
 800c856:	d9da      	bls.n	800c80e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c858:	8afb      	ldrh	r3, [r7, #22]
 800c85a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c85e:	4293      	cmp	r3, r2
 800c860:	d006      	beq.n	800c870 <put_lfn+0xb4>
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d103      	bne.n	800c878 <put_lfn+0xbc>
 800c870:	79fb      	ldrb	r3, [r7, #7]
 800c872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c876:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	79fa      	ldrb	r2, [r7, #7]
 800c87c:	701a      	strb	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	3720      	adds	r7, #32
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	0801450c 	.word	0x0801450c

0800c88c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08c      	sub	sp, #48	; 0x30
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c89a:	220b      	movs	r2, #11
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7fe fec2 	bl	800b628 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b05      	cmp	r3, #5
 800c8a8:	d92b      	bls.n	800c902 <gen_numname+0x76>
		sr = seq;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c8ae:	e022      	b.n	800c8f6 <gen_numname+0x6a>
			wc = *lfn++;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	607a      	str	r2, [r7, #4]
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8be:	e017      	b.n	800c8f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	005a      	lsls	r2, r3, #1
 800c8c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c8ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8d0:	085b      	lsrs	r3, r3, #1
 800c8d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <gen_numname+0x5e>
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c8e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c8e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	2b0f      	cmp	r3, #15
 800c8f4:	d9e4      	bls.n	800c8c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1d8      	bne.n	800c8b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c902:	2307      	movs	r3, #7
 800c904:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	f003 030f 	and.w	r3, r3, #15
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	3330      	adds	r3, #48	; 0x30
 800c912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c91a:	2b39      	cmp	r3, #57	; 0x39
 800c91c:	d904      	bls.n	800c928 <gen_numname+0x9c>
 800c91e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c922:	3307      	adds	r3, #7
 800c924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	1e5a      	subs	r2, r3, #1
 800c92c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c92e:	3330      	adds	r3, #48	; 0x30
 800c930:	443b      	add	r3, r7
 800c932:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c936:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	091b      	lsrs	r3, r3, #4
 800c93e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1df      	bne.n	800c906 <gen_numname+0x7a>
	ns[i] = '~';
 800c946:	f107 0214 	add.w	r2, r7, #20
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	4413      	add	r3, r2
 800c94e:	227e      	movs	r2, #126	; 0x7e
 800c950:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c952:	2300      	movs	r3, #0
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
 800c956:	e002      	b.n	800c95e <gen_numname+0xd2>
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	3301      	adds	r3, #1
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
 800c95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	429a      	cmp	r2, r3
 800c964:	d205      	bcs.n	800c972 <gen_numname+0xe6>
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	4413      	add	r3, r2
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d1f2      	bne.n	800c958 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	2b07      	cmp	r3, #7
 800c976:	d807      	bhi.n	800c988 <gen_numname+0xfc>
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c97e:	3330      	adds	r3, #48	; 0x30
 800c980:	443b      	add	r3, r7
 800c982:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c986:	e000      	b.n	800c98a <gen_numname+0xfe>
 800c988:	2120      	movs	r1, #32
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	1c5a      	adds	r2, r3, #1
 800c98e:	627a      	str	r2, [r7, #36]	; 0x24
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	4413      	add	r3, r2
 800c994:	460a      	mov	r2, r1
 800c996:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	2b07      	cmp	r3, #7
 800c99c:	d9e9      	bls.n	800c972 <gen_numname+0xe6>
}
 800c99e:	bf00      	nop
 800c9a0:	bf00      	nop
 800c9a2:	3730      	adds	r7, #48	; 0x30
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c9b4:	230b      	movs	r3, #11
 800c9b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	0852      	lsrs	r2, r2, #1
 800c9be:	01db      	lsls	r3, r3, #7
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	1c59      	adds	r1, r3, #1
 800c9c8:	6079      	str	r1, [r7, #4]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1ed      	bne.n	800c9b8 <sum_sfn+0x10>
	return sum;
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b086      	sub	sp, #24
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9fe:	23ff      	movs	r3, #255	; 0xff
 800ca00:	757b      	strb	r3, [r7, #21]
 800ca02:	23ff      	movs	r3, #255	; 0xff
 800ca04:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ca06:	e081      	b.n	800cb0c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	69db      	ldr	r3, [r3, #28]
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6938      	ldr	r0, [r7, #16]
 800ca10:	f7ff f838 	bl	800ba84 <move_window>
 800ca14:	4603      	mov	r3, r0
 800ca16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d17c      	bne.n	800cb18 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ca26:	7dbb      	ldrb	r3, [r7, #22]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	75fb      	strb	r3, [r7, #23]
 800ca30:	e077      	b.n	800cb22 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	330b      	adds	r3, #11
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca3e:	73fb      	strb	r3, [r7, #15]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7bfa      	ldrb	r2, [r7, #15]
 800ca44:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca46:	7dbb      	ldrb	r3, [r7, #22]
 800ca48:	2be5      	cmp	r3, #229	; 0xe5
 800ca4a:	d00e      	beq.n	800ca6a <dir_read+0x80>
 800ca4c:	7dbb      	ldrb	r3, [r7, #22]
 800ca4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ca50:	d00b      	beq.n	800ca6a <dir_read+0x80>
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	f023 0320 	bic.w	r3, r3, #32
 800ca58:	2b08      	cmp	r3, #8
 800ca5a:	bf0c      	ite	eq
 800ca5c:	2301      	moveq	r3, #1
 800ca5e:	2300      	movne	r3, #0
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d002      	beq.n	800ca70 <dir_read+0x86>
				ord = 0xFF;
 800ca6a:	23ff      	movs	r3, #255	; 0xff
 800ca6c:	757b      	strb	r3, [r7, #21]
 800ca6e:	e044      	b.n	800cafa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	2b0f      	cmp	r3, #15
 800ca74:	d12f      	bne.n	800cad6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca76:	7dbb      	ldrb	r3, [r7, #22]
 800ca78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00d      	beq.n	800ca9c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	7b5b      	ldrb	r3, [r3, #13]
 800ca86:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca88:	7dbb      	ldrb	r3, [r7, #22]
 800ca8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca8e:	75bb      	strb	r3, [r7, #22]
 800ca90:	7dbb      	ldrb	r3, [r7, #22]
 800ca92:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	695a      	ldr	r2, [r3, #20]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca9c:	7dba      	ldrb	r2, [r7, #22]
 800ca9e:	7d7b      	ldrb	r3, [r7, #21]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d115      	bne.n	800cad0 <dir_read+0xe6>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	330d      	adds	r3, #13
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	7d3a      	ldrb	r2, [r7, #20]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d10e      	bne.n	800cad0 <dir_read+0xe6>
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	691a      	ldr	r2, [r3, #16]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7ff fe19 	bl	800c6f4 <pick_lfn>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d003      	beq.n	800cad0 <dir_read+0xe6>
 800cac8:	7d7b      	ldrb	r3, [r7, #21]
 800caca:	3b01      	subs	r3, #1
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	e000      	b.n	800cad2 <dir_read+0xe8>
 800cad0:	23ff      	movs	r3, #255	; 0xff
 800cad2:	757b      	strb	r3, [r7, #21]
 800cad4:	e011      	b.n	800cafa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cad6:	7d7b      	ldrb	r3, [r7, #21]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d109      	bne.n	800caf0 <dir_read+0x106>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff ff61 	bl	800c9a8 <sum_sfn>
 800cae6:	4603      	mov	r3, r0
 800cae8:	461a      	mov	r2, r3
 800caea:	7d3b      	ldrb	r3, [r7, #20]
 800caec:	4293      	cmp	r3, r2
 800caee:	d015      	beq.n	800cb1c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f04f 32ff 	mov.w	r2, #4294967295
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800caf8:	e010      	b.n	800cb1c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cafa:	2100      	movs	r1, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fc2c 	bl	800c35a <dir_next>
 800cb02:	4603      	mov	r3, r0
 800cb04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d109      	bne.n	800cb20 <dir_read+0x136>
	while (dp->sect) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	69db      	ldr	r3, [r3, #28]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f47f af79 	bne.w	800ca08 <dir_read+0x1e>
 800cb16:	e004      	b.n	800cb22 <dir_read+0x138>
		if (res != FR_OK) break;
 800cb18:	bf00      	nop
 800cb1a:	e002      	b.n	800cb22 <dir_read+0x138>
					break;
 800cb1c:	bf00      	nop
 800cb1e:	e000      	b.n	800cb22 <dir_read+0x138>
		if (res != FR_OK) break;
 800cb20:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <dir_read+0x144>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	61da      	str	r2, [r3, #28]
	return res;
 800cb2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb46:	2100      	movs	r1, #0
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fb7d 	bl	800c248 <dir_sdi>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <dir_find+0x24>
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	e0a9      	b.n	800ccb0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb5c:	23ff      	movs	r3, #255	; 0xff
 800cb5e:	753b      	strb	r3, [r7, #20]
 800cb60:	7d3b      	ldrb	r3, [r7, #20]
 800cb62:	757b      	strb	r3, [r7, #21]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	4619      	mov	r1, r3
 800cb72:	6938      	ldr	r0, [r7, #16]
 800cb74:	f7fe ff86 	bl	800ba84 <move_window>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 8090 	bne.w	800cca4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb8c:	7dbb      	ldrb	r3, [r7, #22]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d102      	bne.n	800cb98 <dir_find+0x60>
 800cb92:	2304      	movs	r3, #4
 800cb94:	75fb      	strb	r3, [r7, #23]
 800cb96:	e08a      	b.n	800ccae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	330b      	adds	r3, #11
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cba4:	73fb      	strb	r3, [r7, #15]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7bfa      	ldrb	r2, [r7, #15]
 800cbaa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cbac:	7dbb      	ldrb	r3, [r7, #22]
 800cbae:	2be5      	cmp	r3, #229	; 0xe5
 800cbb0:	d007      	beq.n	800cbc2 <dir_find+0x8a>
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	f003 0308 	and.w	r3, r3, #8
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d009      	beq.n	800cbd0 <dir_find+0x98>
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
 800cbbe:	2b0f      	cmp	r3, #15
 800cbc0:	d006      	beq.n	800cbd0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbc2:	23ff      	movs	r3, #255	; 0xff
 800cbc4:	757b      	strb	r3, [r7, #21]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbcc:	631a      	str	r2, [r3, #48]	; 0x30
 800cbce:	e05e      	b.n	800cc8e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	2b0f      	cmp	r3, #15
 800cbd4:	d136      	bne.n	800cc44 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d154      	bne.n	800cc8e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cbe4:	7dbb      	ldrb	r3, [r7, #22]
 800cbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00d      	beq.n	800cc0a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	7b5b      	ldrb	r3, [r3, #13]
 800cbf4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbf6:	7dbb      	ldrb	r3, [r7, #22]
 800cbf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbfc:	75bb      	strb	r3, [r7, #22]
 800cbfe:	7dbb      	ldrb	r3, [r7, #22]
 800cc00:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	695a      	ldr	r2, [r3, #20]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc0a:	7dba      	ldrb	r2, [r7, #22]
 800cc0c:	7d7b      	ldrb	r3, [r7, #21]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d115      	bne.n	800cc3e <dir_find+0x106>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	330d      	adds	r3, #13
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	7d3a      	ldrb	r2, [r7, #20]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d10e      	bne.n	800cc3e <dir_find+0x106>
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a1b      	ldr	r3, [r3, #32]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f7ff fcf2 	bl	800c614 <cmp_lfn>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <dir_find+0x106>
 800cc36:	7d7b      	ldrb	r3, [r7, #21]
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	e000      	b.n	800cc40 <dir_find+0x108>
 800cc3e:	23ff      	movs	r3, #255	; 0xff
 800cc40:	757b      	strb	r3, [r7, #21]
 800cc42:	e024      	b.n	800cc8e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc44:	7d7b      	ldrb	r3, [r7, #21]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d109      	bne.n	800cc5e <dir_find+0x126>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff feaa 	bl	800c9a8 <sum_sfn>
 800cc54:	4603      	mov	r3, r0
 800cc56:	461a      	mov	r2, r3
 800cc58:	7d3b      	ldrb	r3, [r7, #20]
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d024      	beq.n	800cca8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <dir_find+0x14a>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a18      	ldr	r0, [r3, #32]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3324      	adds	r3, #36	; 0x24
 800cc74:	220b      	movs	r2, #11
 800cc76:	4619      	mov	r1, r3
 800cc78:	f7fe fd12 	bl	800b6a0 <mem_cmp>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d014      	beq.n	800ccac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc82:	23ff      	movs	r3, #255	; 0xff
 800cc84:	757b      	strb	r3, [r7, #21]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc8e:	2100      	movs	r1, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff fb62 	bl	800c35a <dir_next>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f43f af65 	beq.w	800cb6c <dir_find+0x34>
 800cca2:	e004      	b.n	800ccae <dir_find+0x176>
		if (res != FR_OK) break;
 800cca4:	bf00      	nop
 800cca6:	e002      	b.n	800ccae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cca8:	bf00      	nop
 800ccaa:	e000      	b.n	800ccae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ccac:	bf00      	nop

	return res;
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08c      	sub	sp, #48	; 0x30
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cccc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <dir_register+0x20>
 800ccd4:	2306      	movs	r3, #6
 800ccd6:	e0e0      	b.n	800ce9a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ccd8:	2300      	movs	r3, #0
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
 800ccdc:	e002      	b.n	800cce4 <dir_register+0x2c>
 800ccde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce0:	3301      	adds	r3, #1
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	691a      	ldr	r2, [r3, #16]
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	4413      	add	r3, r2
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1f4      	bne.n	800ccde <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ccfa:	f107 030c 	add.w	r3, r7, #12
 800ccfe:	220c      	movs	r2, #12
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe fc91 	bl	800b628 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d032      	beq.n	800cd76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2240      	movs	r2, #64	; 0x40
 800cd14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cd18:	2301      	movs	r3, #1
 800cd1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd1c:	e016      	b.n	800cd4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	691a      	ldr	r2, [r3, #16]
 800cd28:	f107 010c 	add.w	r1, r7, #12
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	f7ff fdad 	bl	800c88c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ff00 	bl	800cb38 <dir_find>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cd3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	3301      	adds	r3, #1
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	2b63      	cmp	r3, #99	; 0x63
 800cd50:	d9e5      	bls.n	800cd1e <dir_register+0x66>
 800cd52:	e000      	b.n	800cd56 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cd54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	2b64      	cmp	r3, #100	; 0x64
 800cd5a:	d101      	bne.n	800cd60 <dir_register+0xa8>
 800cd5c:	2307      	movs	r3, #7
 800cd5e:	e09c      	b.n	800ce9a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cd60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d002      	beq.n	800cd6e <dir_register+0xb6>
 800cd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd6c:	e095      	b.n	800ce9a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cd6e:	7dfa      	ldrb	r2, [r7, #23]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <dir_register+0xd8>
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	330c      	adds	r3, #12
 800cd84:	4a47      	ldr	r2, [pc, #284]	; (800cea4 <dir_register+0x1ec>)
 800cd86:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8a:	089b      	lsrs	r3, r3, #2
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	e000      	b.n	800cd92 <dir_register+0xda>
 800cd90:	2301      	movs	r3, #1
 800cd92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd94:	6a39      	ldr	r1, [r7, #32]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fbb5 	bl	800c506 <dir_alloc>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d148      	bne.n	800ce3c <dir_register+0x184>
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	623b      	str	r3, [r7, #32]
 800cdb0:	6a3b      	ldr	r3, [r7, #32]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d042      	beq.n	800ce3c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	695a      	ldr	r2, [r3, #20]
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	015b      	lsls	r3, r3, #5
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fa40 	bl	800c248 <dir_sdi>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cdce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d132      	bne.n	800ce3c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	3324      	adds	r3, #36	; 0x24
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7ff fde4 	bl	800c9a8 <sum_sfn>
 800cde0:	4603      	mov	r3, r0
 800cde2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	4619      	mov	r1, r3
 800cdea:	69f8      	ldr	r0, [r7, #28]
 800cdec:	f7fe fe4a 	bl	800ba84 <move_window>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cdf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d11d      	bne.n	800ce3a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	6918      	ldr	r0, [r3, #16]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a19      	ldr	r1, [r3, #32]
 800ce06:	6a3b      	ldr	r3, [r7, #32]
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	7efb      	ldrb	r3, [r7, #27]
 800ce0c:	f7ff fcd6 	bl	800c7bc <put_lfn>
				fs->wflag = 1;
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	2201      	movs	r2, #1
 800ce14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ce16:	2100      	movs	r1, #0
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fa9e 	bl	800c35a <dir_next>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ce24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d107      	bne.n	800ce3c <dir_register+0x184>
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	623b      	str	r3, [r7, #32]
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1d5      	bne.n	800cde4 <dir_register+0x12c>
 800ce38:	e000      	b.n	800ce3c <dir_register+0x184>
				if (res != FR_OK) break;
 800ce3a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ce3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d128      	bne.n	800ce96 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	69f8      	ldr	r0, [r7, #28]
 800ce4c:	f7fe fe1a 	bl	800ba84 <move_window>
 800ce50:	4603      	mov	r3, r0
 800ce52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ce56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d11b      	bne.n	800ce96 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	2220      	movs	r2, #32
 800ce64:	2100      	movs	r1, #0
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fbff 	bl	800b66a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a18      	ldr	r0, [r3, #32]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3324      	adds	r3, #36	; 0x24
 800ce74:	220b      	movs	r2, #11
 800ce76:	4619      	mov	r1, r3
 800ce78:	f7fe fbd6 	bl	800b628 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	330c      	adds	r3, #12
 800ce88:	f002 0218 	and.w	r2, r2, #24
 800ce8c:	b2d2      	uxtb	r2, r2
 800ce8e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	2201      	movs	r2, #1
 800ce94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3730      	adds	r7, #48	; 0x30
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	4ec4ec4f 	.word	0x4ec4ec4f

0800cea8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 80c9 	beq.w	800d05a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced0:	d032      	beq.n	800cf38 <get_fileinfo+0x90>
			i = j = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ceda:	e01b      	b.n	800cf14 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cedc:	89fb      	ldrh	r3, [r7, #14]
 800cede:	2100      	movs	r1, #0
 800cee0:	4618      	mov	r0, r3
 800cee2:	f001 ff7d 	bl	800ede0 <ff_convert>
 800cee6:	4603      	mov	r3, r0
 800cee8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ceea:	89fb      	ldrh	r3, [r7, #14]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <get_fileinfo+0x4e>
 800cef0:	2300      	movs	r3, #0
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	e01a      	b.n	800cf2c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	2bfe      	cmp	r3, #254	; 0xfe
 800cefa:	d902      	bls.n	800cf02 <get_fileinfo+0x5a>
 800cefc:	2300      	movs	r3, #0
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	e014      	b.n	800cf2c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	61fa      	str	r2, [r7, #28]
 800cf08:	89fa      	ldrh	r2, [r7, #14]
 800cf0a:	b2d1      	uxtb	r1, r2
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	4413      	add	r3, r2
 800cf10:	460a      	mov	r2, r1
 800cf12:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	691a      	ldr	r2, [r3, #16]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	1c59      	adds	r1, r3, #1
 800cf1c:	61b9      	str	r1, [r7, #24]
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4413      	add	r3, r2
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	81fb      	strh	r3, [r7, #14]
 800cf26:	89fb      	ldrh	r3, [r7, #14]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1d7      	bne.n	800cedc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	4413      	add	r3, r2
 800cf32:	3316      	adds	r3, #22
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61bb      	str	r3, [r7, #24]
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	4413      	add	r3, r2
 800cf46:	3316      	adds	r3, #22
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cf4c:	e04c      	b.n	800cfe8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1a      	ldr	r2, [r3, #32]
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	1c59      	adds	r1, r3, #1
 800cf56:	61f9      	str	r1, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d100      	bne.n	800cf66 <get_fileinfo+0xbe>
 800cf64:	e040      	b.n	800cfe8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	2b05      	cmp	r3, #5
 800cf6a:	d101      	bne.n	800cf70 <get_fileinfo+0xc8>
 800cf6c:	23e5      	movs	r3, #229	; 0xe5
 800cf6e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	2b09      	cmp	r3, #9
 800cf74:	d10f      	bne.n	800cf96 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cf76:	89bb      	ldrh	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d105      	bne.n	800cf88 <get_fileinfo+0xe0>
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	4413      	add	r3, r2
 800cf82:	3316      	adds	r3, #22
 800cf84:	222e      	movs	r2, #46	; 0x2e
 800cf86:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	61ba      	str	r2, [r7, #24]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	4413      	add	r3, r2
 800cf92:	222e      	movs	r2, #46	; 0x2e
 800cf94:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	3309      	adds	r3, #9
 800cf9e:	7dfa      	ldrb	r2, [r7, #23]
 800cfa0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cfa2:	89bb      	ldrh	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11c      	bne.n	800cfe2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
 800cfaa:	2b40      	cmp	r3, #64	; 0x40
 800cfac:	d913      	bls.n	800cfd6 <get_fileinfo+0x12e>
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b5a      	cmp	r3, #90	; 0x5a
 800cfb2:	d810      	bhi.n	800cfd6 <get_fileinfo+0x12e>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	330c      	adds	r3, #12
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	2b08      	cmp	r3, #8
 800cfc2:	d901      	bls.n	800cfc8 <get_fileinfo+0x120>
 800cfc4:	2310      	movs	r3, #16
 800cfc6:	e000      	b.n	800cfca <get_fileinfo+0x122>
 800cfc8:	2308      	movs	r3, #8
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
 800cfd2:	3320      	adds	r3, #32
 800cfd4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	4413      	add	r3, r2
 800cfdc:	3316      	adds	r3, #22
 800cfde:	7dfa      	ldrb	r2, [r7, #23]
 800cfe0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2b0a      	cmp	r3, #10
 800cfec:	d9af      	bls.n	800cf4e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cfee:	89bb      	ldrh	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10d      	bne.n	800d010 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	4413      	add	r3, r2
 800cffa:	3316      	adds	r3, #22
 800cffc:	2200      	movs	r2, #0
 800cffe:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	330c      	adds	r3, #12
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <get_fileinfo+0x168>
 800d00c:	2300      	movs	r3, #0
 800d00e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	4413      	add	r3, r2
 800d016:	3309      	adds	r3, #9
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	7ada      	ldrb	r2, [r3, #11]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	331c      	adds	r3, #28
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe fa91 	bl	800b554 <ld_dword>
 800d032:	4602      	mov	r2, r0
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a1b      	ldr	r3, [r3, #32]
 800d03c:	3316      	adds	r3, #22
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fa88 	bl	800b554 <ld_dword>
 800d044:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	b29a      	uxth	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	80da      	strh	r2, [r3, #6]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	0c1b      	lsrs	r3, r3, #16
 800d052:	b29a      	uxth	r2, r3
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	809a      	strh	r2, [r3, #4]
 800d058:	e000      	b.n	800d05c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d05a:	bf00      	nop
}
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08a      	sub	sp, #40	; 0x28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	613b      	str	r3, [r7, #16]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	2300      	movs	r3, #0
 800d07e:	617b      	str	r3, [r7, #20]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	61ba      	str	r2, [r7, #24]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	4413      	add	r3, r2
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d094:	2b1f      	cmp	r3, #31
 800d096:	d940      	bls.n	800d11a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d09a:	2b2f      	cmp	r3, #47	; 0x2f
 800d09c:	d006      	beq.n	800d0ac <create_name+0x48>
 800d09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0a0:	2b5c      	cmp	r3, #92	; 0x5c
 800d0a2:	d110      	bne.n	800d0c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0a4:	e002      	b.n	800d0ac <create_name+0x48>
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	61bb      	str	r3, [r7, #24]
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b2f      	cmp	r3, #47	; 0x2f
 800d0b6:	d0f6      	beq.n	800d0a6 <create_name+0x42>
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	4413      	add	r3, r2
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b5c      	cmp	r3, #92	; 0x5c
 800d0c2:	d0f0      	beq.n	800d0a6 <create_name+0x42>
			break;
 800d0c4:	e02a      	b.n	800d11c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d0ca:	d901      	bls.n	800d0d0 <create_name+0x6c>
 800d0cc:	2306      	movs	r3, #6
 800d0ce:	e1ca      	b.n	800d466 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d0d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0d8:	2101      	movs	r1, #1
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f001 fe80 	bl	800ede0 <ff_convert>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <create_name+0x8a>
 800d0ea:	2306      	movs	r3, #6
 800d0ec:	e1bb      	b.n	800d466 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d0f2:	d809      	bhi.n	800d108 <create_name+0xa4>
 800d0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	489f      	ldr	r0, [pc, #636]	; (800d378 <create_name+0x314>)
 800d0fa:	f7fe faf8 	bl	800b6ee <chk_chr>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d001      	beq.n	800d108 <create_name+0xa4>
 800d104:	2306      	movs	r3, #6
 800d106:	e1ae      	b.n	800d466 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	617a      	str	r2, [r7, #20]
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	4413      	add	r3, r2
 800d114:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d116:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d118:	e7b4      	b.n	800d084 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d11a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	441a      	add	r2, r3
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d128:	2b1f      	cmp	r3, #31
 800d12a:	d801      	bhi.n	800d130 <create_name+0xcc>
 800d12c:	2304      	movs	r3, #4
 800d12e:	e000      	b.n	800d132 <create_name+0xce>
 800d130:	2300      	movs	r3, #0
 800d132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d109      	bne.n	800d150 <create_name+0xec>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d142:	3b01      	subs	r3, #1
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	4413      	add	r3, r2
 800d14a:	881b      	ldrh	r3, [r3, #0]
 800d14c:	2b2e      	cmp	r3, #46	; 0x2e
 800d14e:	d016      	beq.n	800d17e <create_name+0x11a>
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d14e      	bne.n	800d1f4 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d15c:	3b01      	subs	r3, #1
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4413      	add	r3, r2
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	2b2e      	cmp	r3, #46	; 0x2e
 800d168:	d144      	bne.n	800d1f4 <create_name+0x190>
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d170:	3b02      	subs	r3, #2
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4413      	add	r3, r2
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	2b2e      	cmp	r3, #46	; 0x2e
 800d17c:	d13a      	bne.n	800d1f4 <create_name+0x190>
		lfn[di] = 0;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4413      	add	r3, r2
 800d186:	2200      	movs	r2, #0
 800d188:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800d18a:	2300      	movs	r3, #0
 800d18c:	623b      	str	r3, [r7, #32]
 800d18e:	e00f      	b.n	800d1b0 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800d190:	6a3a      	ldr	r2, [r7, #32]
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	429a      	cmp	r2, r3
 800d196:	d201      	bcs.n	800d19c <create_name+0x138>
 800d198:	212e      	movs	r1, #46	; 0x2e
 800d19a:	e000      	b.n	800d19e <create_name+0x13a>
 800d19c:	2120      	movs	r1, #32
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3324      	adds	r3, #36	; 0x24
 800d1a6:	460a      	mov	r2, r1
 800d1a8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	623b      	str	r3, [r7, #32]
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	2b0a      	cmp	r3, #10
 800d1b4:	d9ec      	bls.n	800d190 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800d1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ba:	f043 0320 	orr.w	r3, r3, #32
 800d1be:	b2d9      	uxtb	r1, r3
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3324      	adds	r3, #36	; 0x24
 800d1c8:	460a      	mov	r2, r1
 800d1ca:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e14a      	b.n	800d466 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4413      	add	r3, r2
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	d002      	beq.n	800d1ee <create_name+0x18a>
 800d1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ec:	d106      	bne.n	800d1fc <create_name+0x198>
		di--;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1ea      	bne.n	800d1d0 <create_name+0x16c>
 800d1fa:	e000      	b.n	800d1fe <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800d1fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	4413      	add	r3, r2
 800d206:	2200      	movs	r2, #0
 800d208:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <create_name+0x1b0>
 800d210:	2306      	movs	r3, #6
 800d212:	e128      	b.n	800d466 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3324      	adds	r3, #36	; 0x24
 800d218:	220b      	movs	r2, #11
 800d21a:	2120      	movs	r1, #32
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fa24 	bl	800b66a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d222:	2300      	movs	r3, #0
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	e002      	b.n	800d22e <create_name+0x1ca>
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	3301      	adds	r3, #1
 800d22c:	61bb      	str	r3, [r7, #24]
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	4413      	add	r3, r2
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	2b20      	cmp	r3, #32
 800d23a:	d0f5      	beq.n	800d228 <create_name+0x1c4>
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	4413      	add	r3, r2
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	2b2e      	cmp	r3, #46	; 0x2e
 800d248:	d0ee      	beq.n	800d228 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d009      	beq.n	800d264 <create_name+0x200>
 800d250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d254:	f043 0303 	orr.w	r3, r3, #3
 800d258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d25c:	e002      	b.n	800d264 <create_name+0x200>
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	3b01      	subs	r3, #1
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d009      	beq.n	800d27e <create_name+0x21a>
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d270:	3b01      	subs	r3, #1
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4413      	add	r3, r2
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	2b2e      	cmp	r3, #46	; 0x2e
 800d27c:	d1ef      	bne.n	800d25e <create_name+0x1fa>

	i = b = 0; ni = 8;
 800d27e:	2300      	movs	r3, #0
 800d280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d284:	2300      	movs	r3, #0
 800d286:	623b      	str	r3, [r7, #32]
 800d288:	2308      	movs	r3, #8
 800d28a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	61ba      	str	r2, [r7, #24]
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 8097 	beq.w	800d3d2 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a6:	2b20      	cmp	r3, #32
 800d2a8:	d006      	beq.n	800d2b8 <create_name+0x254>
 800d2aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ae:	d10a      	bne.n	800d2c6 <create_name+0x262>
 800d2b0:	69ba      	ldr	r2, [r7, #24]
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d006      	beq.n	800d2c6 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800d2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2bc:	f043 0303 	orr.w	r3, r3, #3
 800d2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2c4:	e084      	b.n	800d3d0 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d2c6:	6a3a      	ldr	r2, [r7, #32]
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d203      	bcs.n	800d2d6 <create_name+0x272>
 800d2ce:	69ba      	ldr	r2, [r7, #24]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d123      	bne.n	800d31e <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	2b0b      	cmp	r3, #11
 800d2da:	d106      	bne.n	800d2ea <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800d2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e0:	f043 0303 	orr.w	r3, r3, #3
 800d2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2e8:	e076      	b.n	800d3d8 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d005      	beq.n	800d2fe <create_name+0x29a>
 800d2f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2f6:	f043 0303 	orr.w	r3, r3, #3
 800d2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	429a      	cmp	r2, r3
 800d304:	d867      	bhi.n	800d3d6 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	61bb      	str	r3, [r7, #24]
 800d30a:	2308      	movs	r3, #8
 800d30c:	623b      	str	r3, [r7, #32]
 800d30e:	230b      	movs	r3, #11
 800d310:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d31c:	e058      	b.n	800d3d0 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d320:	2b7f      	cmp	r3, #127	; 0x7f
 800d322:	d914      	bls.n	800d34e <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d326:	2100      	movs	r1, #0
 800d328:	4618      	mov	r0, r3
 800d32a:	f001 fd59 	bl	800ede0 <ff_convert>
 800d32e:	4603      	mov	r3, r0
 800d330:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	d004      	beq.n	800d342 <create_name+0x2de>
 800d338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d33a:	3b80      	subs	r3, #128	; 0x80
 800d33c:	4a0f      	ldr	r2, [pc, #60]	; (800d37c <create_name+0x318>)
 800d33e:	5cd3      	ldrb	r3, [r2, r3]
 800d340:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d346:	f043 0302 	orr.w	r3, r3, #2
 800d34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d34e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d350:	2b00      	cmp	r3, #0
 800d352:	d007      	beq.n	800d364 <create_name+0x300>
 800d354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d356:	4619      	mov	r1, r3
 800d358:	4809      	ldr	r0, [pc, #36]	; (800d380 <create_name+0x31c>)
 800d35a:	f7fe f9c8 	bl	800b6ee <chk_chr>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00f      	beq.n	800d384 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d364:	235f      	movs	r3, #95	; 0x5f
 800d366:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36c:	f043 0303 	orr.w	r3, r3, #3
 800d370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d374:	e022      	b.n	800d3bc <create_name+0x358>
 800d376:	bf00      	nop
 800d378:	08014424 	.word	0x08014424
 800d37c:	0801448c 	.word	0x0801448c
 800d380:	08014430 	.word	0x08014430
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d386:	2b40      	cmp	r3, #64	; 0x40
 800d388:	d909      	bls.n	800d39e <create_name+0x33a>
 800d38a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d38c:	2b5a      	cmp	r3, #90	; 0x5a
 800d38e:	d806      	bhi.n	800d39e <create_name+0x33a>
					b |= 2;
 800d390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d39c:	e00e      	b.n	800d3bc <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a0:	2b60      	cmp	r3, #96	; 0x60
 800d3a2:	d90b      	bls.n	800d3bc <create_name+0x358>
 800d3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a6:	2b7a      	cmp	r3, #122	; 0x7a
 800d3a8:	d808      	bhi.n	800d3bc <create_name+0x358>
						b |= 1; w -= 0x20;
 800d3aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3ae:	f043 0301 	orr.w	r3, r3, #1
 800d3b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b8:	3b20      	subs	r3, #32
 800d3ba:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	623a      	str	r2, [r7, #32]
 800d3c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3c4:	b2d1      	uxtb	r1, r2
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	460a      	mov	r2, r1
 800d3cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d3d0:	e75c      	b.n	800d28c <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800d3d2:	bf00      	nop
 800d3d4:	e000      	b.n	800d3d8 <create_name+0x374>
			if (si > di) break;			/* No extension */
 800d3d6:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d3de:	2be5      	cmp	r3, #229	; 0xe5
 800d3e0:	d103      	bne.n	800d3ea <create_name+0x386>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2205      	movs	r2, #5
 800d3e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	2b08      	cmp	r3, #8
 800d3ee:	d104      	bne.n	800d3fa <create_name+0x396>
 800d3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d3fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3fe:	f003 030c 	and.w	r3, r3, #12
 800d402:	2b0c      	cmp	r3, #12
 800d404:	d005      	beq.n	800d412 <create_name+0x3ae>
 800d406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d105      	bne.n	800d41e <create_name+0x3ba>
 800d412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d416:	f043 0302 	orr.w	r3, r3, #2
 800d41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d117      	bne.n	800d45a <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d42a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	2b01      	cmp	r3, #1
 800d434:	d105      	bne.n	800d442 <create_name+0x3de>
 800d436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d43a:	f043 0310 	orr.w	r3, r3, #16
 800d43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d446:	f003 030c 	and.w	r3, r3, #12
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d105      	bne.n	800d45a <create_name+0x3f6>
 800d44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d452:	f043 0308 	orr.w	r3, r3, #8
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d460:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d464:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d466:	4618      	mov	r0, r3
 800d468:	3728      	adds	r7, #40	; 0x28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop

0800d470 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b2f      	cmp	r3, #47	; 0x2f
 800d48a:	d00b      	beq.n	800d4a4 <follow_path+0x34>
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	2b5c      	cmp	r3, #92	; 0x5c
 800d492:	d007      	beq.n	800d4a4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	69da      	ldr	r2, [r3, #28]
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	609a      	str	r2, [r3, #8]
 800d49c:	e00d      	b.n	800d4ba <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b2f      	cmp	r3, #47	; 0x2f
 800d4aa:	d0f8      	beq.n	800d49e <follow_path+0x2e>
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d4b2:	d0f4      	beq.n	800d49e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b1f      	cmp	r3, #31
 800d4c0:	d80a      	bhi.n	800d4d8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2280      	movs	r2, #128	; 0x80
 800d4c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7fe febb 	bl	800c248 <dir_sdi>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	75fb      	strb	r3, [r7, #23]
 800d4d6:	e05b      	b.n	800d590 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d4d8:	463b      	mov	r3, r7
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff fdc1 	bl	800d064 <create_name>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d14c      	bne.n	800d586 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fb23 	bl	800cb38 <dir_find>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01b      	beq.n	800d53c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	2b04      	cmp	r3, #4
 800d508:	d13f      	bne.n	800d58a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800d50a:	7afb      	ldrb	r3, [r7, #11]
 800d50c:	f003 0320 	and.w	r3, r3, #32
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d514:	7afb      	ldrb	r3, [r7, #11]
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d031      	beq.n	800d582 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2280      	movs	r2, #128	; 0x80
 800d522:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800d52a:	e02e      	b.n	800d58a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d52c:	7afb      	ldrb	r3, [r7, #11]
 800d52e:	f003 0304 	and.w	r3, r3, #4
 800d532:	2b00      	cmp	r3, #0
 800d534:	d129      	bne.n	800d58a <follow_path+0x11a>
 800d536:	2305      	movs	r3, #5
 800d538:	75fb      	strb	r3, [r7, #23]
				break;
 800d53a:	e026      	b.n	800d58a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d53c:	7afb      	ldrb	r3, [r7, #11]
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	2b00      	cmp	r3, #0
 800d544:	d123      	bne.n	800d58e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	799b      	ldrb	r3, [r3, #6]
 800d54a:	f003 0310 	and.w	r3, r3, #16
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d102      	bne.n	800d558 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800d552:	2305      	movs	r3, #5
 800d554:	75fb      	strb	r3, [r7, #23]
 800d556:	e01b      	b.n	800d590 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	8992      	ldrh	r2, [r2, #12]
 800d566:	fbb3 f0f2 	udiv	r0, r3, r2
 800d56a:	fb00 f202 	mul.w	r2, r0, r2
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	440b      	add	r3, r1
 800d572:	4619      	mov	r1, r3
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff f80d 	bl	800c594 <ld_clust>
 800d57a:	4602      	mov	r2, r0
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	609a      	str	r2, [r3, #8]
 800d580:	e7aa      	b.n	800d4d8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d582:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d584:	e7a8      	b.n	800d4d8 <follow_path+0x68>
			if (res != FR_OK) break;
 800d586:	bf00      	nop
 800d588:	e002      	b.n	800d590 <follow_path+0x120>
				break;
 800d58a:	bf00      	nop
 800d58c:	e000      	b.n	800d590 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d58e:	bf00      	nop
			}
		}
	}

	return res;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d59a:	b480      	push	{r7}
 800d59c:	b087      	sub	sp, #28
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d031      	beq.n	800d614 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	617b      	str	r3, [r7, #20]
 800d5b6:	e002      	b.n	800d5be <get_ldnumber+0x24>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	617b      	str	r3, [r7, #20]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	2b1f      	cmp	r3, #31
 800d5c4:	d903      	bls.n	800d5ce <get_ldnumber+0x34>
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b3a      	cmp	r3, #58	; 0x3a
 800d5cc:	d1f4      	bne.n	800d5b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b3a      	cmp	r3, #58	; 0x3a
 800d5d4:	d11c      	bne.n	800d610 <get_ldnumber+0x76>
			tp = *path;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	1c5a      	adds	r2, r3, #1
 800d5e0:	60fa      	str	r2, [r7, #12]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	3b30      	subs	r3, #48	; 0x30
 800d5e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b09      	cmp	r3, #9
 800d5ec:	d80e      	bhi.n	800d60c <get_ldnumber+0x72>
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d10a      	bne.n	800d60c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d107      	bne.n	800d60c <get_ldnumber+0x72>
					vol = (int)i;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	3301      	adds	r3, #1
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	e002      	b.n	800d616 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d610:	2300      	movs	r3, #0
 800d612:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d614:	693b      	ldr	r3, [r7, #16]
}
 800d616:	4618      	mov	r0, r3
 800d618:	371c      	adds	r7, #28
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
	...

0800d624 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	70da      	strb	r2, [r3, #3]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f04f 32ff 	mov.w	r2, #4294967295
 800d63a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fe fa20 	bl	800ba84 <move_window>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <check_fs+0x2a>
 800d64a:	2304      	movs	r3, #4
 800d64c:	e038      	b.n	800d6c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	333c      	adds	r3, #60	; 0x3c
 800d652:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d656:	4618      	mov	r0, r3
 800d658:	f7fd ff64 	bl	800b524 <ld_word>
 800d65c:	4603      	mov	r3, r0
 800d65e:	461a      	mov	r2, r3
 800d660:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d664:	429a      	cmp	r2, r3
 800d666:	d001      	beq.n	800d66c <check_fs+0x48>
 800d668:	2303      	movs	r3, #3
 800d66a:	e029      	b.n	800d6c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d672:	2be9      	cmp	r3, #233	; 0xe9
 800d674:	d009      	beq.n	800d68a <check_fs+0x66>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d67c:	2beb      	cmp	r3, #235	; 0xeb
 800d67e:	d11e      	bne.n	800d6be <check_fs+0x9a>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d686:	2b90      	cmp	r3, #144	; 0x90
 800d688:	d119      	bne.n	800d6be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	333c      	adds	r3, #60	; 0x3c
 800d68e:	3336      	adds	r3, #54	; 0x36
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd ff5f 	bl	800b554 <ld_dword>
 800d696:	4603      	mov	r3, r0
 800d698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d69c:	4a0a      	ldr	r2, [pc, #40]	; (800d6c8 <check_fs+0xa4>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d101      	bne.n	800d6a6 <check_fs+0x82>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e00c      	b.n	800d6c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	333c      	adds	r3, #60	; 0x3c
 800d6aa:	3352      	adds	r3, #82	; 0x52
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fd ff51 	bl	800b554 <ld_dword>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4a05      	ldr	r2, [pc, #20]	; (800d6cc <check_fs+0xa8>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d101      	bne.n	800d6be <check_fs+0x9a>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e000      	b.n	800d6c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d6be:	2302      	movs	r3, #2
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	00544146 	.word	0x00544146
 800d6cc:	33544146 	.word	0x33544146

0800d6d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b096      	sub	sp, #88	; 0x58
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7ff ff58 	bl	800d59a <get_ldnumber>
 800d6ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	da01      	bge.n	800d6f6 <find_volume+0x26>
 800d6f2:	230b      	movs	r3, #11
 800d6f4:	e268      	b.n	800dbc8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d6f6:	4a9f      	ldr	r2, [pc, #636]	; (800d974 <find_volume+0x2a4>)
 800d6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <find_volume+0x3a>
 800d706:	230c      	movs	r3, #12
 800d708:	e25e      	b.n	800dbc8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d70e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	f023 0301 	bic.w	r3, r3, #1
 800d716:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d01a      	beq.n	800d756 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	785b      	ldrb	r3, [r3, #1]
 800d724:	4618      	mov	r0, r3
 800d726:	f7fd fe5f 	bl	800b3e8 <disk_status>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10c      	bne.n	800d756 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d007      	beq.n	800d752 <find_volume+0x82>
 800d742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d74e:	230a      	movs	r3, #10
 800d750:	e23a      	b.n	800dbc8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800d752:	2300      	movs	r3, #0
 800d754:	e238      	b.n	800dbc8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	2200      	movs	r2, #0
 800d75a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	785b      	ldrb	r3, [r3, #1]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fd fe57 	bl	800b41c <disk_initialize>
 800d76e:	4603      	mov	r3, r0
 800d770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d780:	2303      	movs	r3, #3
 800d782:	e221      	b.n	800dbc8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d784:	79fb      	ldrb	r3, [r7, #7]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d007      	beq.n	800d79a <find_volume+0xca>
 800d78a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d78e:	f003 0304 	and.w	r3, r3, #4
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d796:	230a      	movs	r3, #10
 800d798:	e216      	b.n	800dbc8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	7858      	ldrb	r0, [r3, #1]
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	330c      	adds	r3, #12
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	2102      	movs	r1, #2
 800d7a6:	f7fd fe9f 	bl	800b4e8 <disk_ioctl>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <find_volume+0xe4>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e209      	b.n	800dbc8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	899b      	ldrh	r3, [r3, #12]
 800d7b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7bc:	d80d      	bhi.n	800d7da <find_volume+0x10a>
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	899b      	ldrh	r3, [r3, #12]
 800d7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7c6:	d308      	bcc.n	800d7da <find_volume+0x10a>
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	899b      	ldrh	r3, [r3, #12]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	899b      	ldrh	r3, [r3, #12]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <find_volume+0x10e>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e1f4      	b.n	800dbc8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d7e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7e6:	f7ff ff1d 	bl	800d624 <check_fs>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d149      	bne.n	800d88c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d7fc:	e01e      	b.n	800d83c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d806:	011b      	lsls	r3, r3, #4
 800d808:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d80c:	4413      	add	r3, r2
 800d80e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	3304      	adds	r3, #4
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d006      	beq.n	800d828 <find_volume+0x158>
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	3308      	adds	r3, #8
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd fe98 	bl	800b554 <ld_dword>
 800d824:	4602      	mov	r2, r0
 800d826:	e000      	b.n	800d82a <find_volume+0x15a>
 800d828:	2200      	movs	r2, #0
 800d82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	3358      	adds	r3, #88	; 0x58
 800d830:	443b      	add	r3, r7
 800d832:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d838:	3301      	adds	r3, #1
 800d83a:	643b      	str	r3, [r7, #64]	; 0x40
 800d83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d9dd      	bls.n	800d7fe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d842:	2300      	movs	r3, #0
 800d844:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <find_volume+0x182>
 800d84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84e:	3b01      	subs	r3, #1
 800d850:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	3358      	adds	r3, #88	; 0x58
 800d858:	443b      	add	r3, r7
 800d85a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d85e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d862:	2b00      	cmp	r3, #0
 800d864:	d005      	beq.n	800d872 <find_volume+0x1a2>
 800d866:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d86a:	f7ff fedb 	bl	800d624 <check_fs>
 800d86e:	4603      	mov	r3, r0
 800d870:	e000      	b.n	800d874 <find_volume+0x1a4>
 800d872:	2303      	movs	r3, #3
 800d874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d905      	bls.n	800d88c <find_volume+0x1bc>
 800d880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d882:	3301      	adds	r3, #1
 800d884:	643b      	str	r3, [r7, #64]	; 0x40
 800d886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d9e2      	bls.n	800d852 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d88c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d890:	2b04      	cmp	r3, #4
 800d892:	d101      	bne.n	800d898 <find_volume+0x1c8>
 800d894:	2301      	movs	r3, #1
 800d896:	e197      	b.n	800dbc8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d901      	bls.n	800d8a4 <find_volume+0x1d4>
 800d8a0:	230d      	movs	r3, #13
 800d8a2:	e191      	b.n	800dbc8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a6:	333c      	adds	r3, #60	; 0x3c
 800d8a8:	330b      	adds	r3, #11
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fd fe3a 	bl	800b524 <ld_word>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	899b      	ldrh	r3, [r3, #12]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d001      	beq.n	800d8c0 <find_volume+0x1f0>
 800d8bc:	230d      	movs	r3, #13
 800d8be:	e183      	b.n	800dbc8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	333c      	adds	r3, #60	; 0x3c
 800d8c4:	3316      	adds	r3, #22
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fd fe2c 	bl	800b524 <ld_word>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <find_volume+0x214>
 800d8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d8:	333c      	adds	r3, #60	; 0x3c
 800d8da:	3324      	adds	r3, #36	; 0x24
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fd fe39 	bl	800b554 <ld_dword>
 800d8e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8e8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	789b      	ldrb	r3, [r3, #2]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d005      	beq.n	800d908 <find_volume+0x238>
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	789b      	ldrb	r3, [r3, #2]
 800d900:	2b02      	cmp	r3, #2
 800d902:	d001      	beq.n	800d908 <find_volume+0x238>
 800d904:	230d      	movs	r3, #13
 800d906:	e15f      	b.n	800dbc8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	789b      	ldrb	r3, [r3, #2]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d910:	fb02 f303 	mul.w	r3, r2, r3
 800d914:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d918:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d008      	beq.n	800d93c <find_volume+0x26c>
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	895b      	ldrh	r3, [r3, #10]
 800d92e:	461a      	mov	r2, r3
 800d930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d932:	895b      	ldrh	r3, [r3, #10]
 800d934:	3b01      	subs	r3, #1
 800d936:	4013      	ands	r3, r2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <find_volume+0x270>
 800d93c:	230d      	movs	r3, #13
 800d93e:	e143      	b.n	800dbc8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	333c      	adds	r3, #60	; 0x3c
 800d944:	3311      	adds	r3, #17
 800d946:	4618      	mov	r0, r3
 800d948:	f7fd fdec 	bl	800b524 <ld_word>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d956:	891b      	ldrh	r3, [r3, #8]
 800d958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d95a:	8992      	ldrh	r2, [r2, #12]
 800d95c:	0952      	lsrs	r2, r2, #5
 800d95e:	b292      	uxth	r2, r2
 800d960:	fbb3 f1f2 	udiv	r1, r3, r2
 800d964:	fb01 f202 	mul.w	r2, r1, r2
 800d968:	1a9b      	subs	r3, r3, r2
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d003      	beq.n	800d978 <find_volume+0x2a8>
 800d970:	230d      	movs	r3, #13
 800d972:	e129      	b.n	800dbc8 <find_volume+0x4f8>
 800d974:	20002864 	.word	0x20002864

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	333c      	adds	r3, #60	; 0x3c
 800d97c:	3313      	adds	r3, #19
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fd fdd0 	bl	800b524 <ld_word>
 800d984:	4603      	mov	r3, r0
 800d986:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <find_volume+0x2cc>
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	333c      	adds	r3, #60	; 0x3c
 800d992:	3320      	adds	r3, #32
 800d994:	4618      	mov	r0, r3
 800d996:	f7fd fddd 	bl	800b554 <ld_dword>
 800d99a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99e:	333c      	adds	r3, #60	; 0x3c
 800d9a0:	330e      	adds	r3, #14
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fd fdbe 	bl	800b524 <ld_word>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d9ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d101      	bne.n	800d9b6 <find_volume+0x2e6>
 800d9b2:	230d      	movs	r3, #13
 800d9b4:	e108      	b.n	800dbc8 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d9b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ba:	4413      	add	r3, r2
 800d9bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9be:	8911      	ldrh	r1, [r2, #8]
 800d9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9c2:	8992      	ldrh	r2, [r2, #12]
 800d9c4:	0952      	lsrs	r2, r2, #5
 800d9c6:	b292      	uxth	r2, r2
 800d9c8:	fbb1 f2f2 	udiv	r2, r1, r2
 800d9cc:	b292      	uxth	r2, r2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d9d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d201      	bcs.n	800d9de <find_volume+0x30e>
 800d9da:	230d      	movs	r3, #13
 800d9dc:	e0f4      	b.n	800dbc8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d9de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9e6:	8952      	ldrh	r2, [r2, #10]
 800d9e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <find_volume+0x328>
 800d9f4:	230d      	movs	r3, #13
 800d9f6:	e0e7      	b.n	800dbc8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800da04:	4293      	cmp	r3, r2
 800da06:	d802      	bhi.n	800da0e <find_volume+0x33e>
 800da08:	2302      	movs	r3, #2
 800da0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	f640 72f5 	movw	r2, #4085	; 0xff5
 800da14:	4293      	cmp	r3, r2
 800da16:	d802      	bhi.n	800da1e <find_volume+0x34e>
 800da18:	2301      	movs	r3, #1
 800da1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800da1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da20:	1c9a      	adds	r2, r3, #2
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da2a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800da2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da30:	441a      	add	r2, r3
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800da36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	441a      	add	r2, r3
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800da40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da44:	2b03      	cmp	r3, #3
 800da46:	d11e      	bne.n	800da86 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4a:	333c      	adds	r3, #60	; 0x3c
 800da4c:	332a      	adds	r3, #42	; 0x2a
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fd fd68 	bl	800b524 <ld_word>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d001      	beq.n	800da5e <find_volume+0x38e>
 800da5a:	230d      	movs	r3, #13
 800da5c:	e0b4      	b.n	800dbc8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800da5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da60:	891b      	ldrh	r3, [r3, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <find_volume+0x39a>
 800da66:	230d      	movs	r3, #13
 800da68:	e0ae      	b.n	800dbc8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800da6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6c:	333c      	adds	r3, #60	; 0x3c
 800da6e:	332c      	adds	r3, #44	; 0x2c
 800da70:	4618      	mov	r0, r3
 800da72:	f7fd fd6f 	bl	800b554 <ld_dword>
 800da76:	4602      	mov	r2, r0
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800da7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7e:	6a1b      	ldr	r3, [r3, #32]
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	647b      	str	r3, [r7, #68]	; 0x44
 800da84:	e01f      	b.n	800dac6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	891b      	ldrh	r3, [r3, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <find_volume+0x3c2>
 800da8e:	230d      	movs	r3, #13
 800da90:	e09a      	b.n	800dbc8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da98:	441a      	add	r2, r3
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d103      	bne.n	800daae <find_volume+0x3de>
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	e00a      	b.n	800dac4 <find_volume+0x3f4>
 800daae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab0:	6a1a      	ldr	r2, [r3, #32]
 800dab2:	4613      	mov	r3, r2
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	4413      	add	r3, r2
 800dab8:	085a      	lsrs	r2, r3, #1
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	f003 0301 	and.w	r3, r3, #1
 800dac2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dac4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	899b      	ldrh	r3, [r3, #12]
 800dace:	4619      	mov	r1, r3
 800dad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dad2:	440b      	add	r3, r1
 800dad4:	3b01      	subs	r3, #1
 800dad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dad8:	8989      	ldrh	r1, [r1, #12]
 800dada:	fbb3 f3f1 	udiv	r3, r3, r1
 800dade:	429a      	cmp	r2, r3
 800dae0:	d201      	bcs.n	800dae6 <find_volume+0x416>
 800dae2:	230d      	movs	r3, #13
 800dae4:	e070      	b.n	800dbc8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295
 800daec:	619a      	str	r2, [r3, #24]
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	2280      	movs	r2, #128	; 0x80
 800dafa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dafc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db00:	2b03      	cmp	r3, #3
 800db02:	d149      	bne.n	800db98 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	333c      	adds	r3, #60	; 0x3c
 800db08:	3330      	adds	r3, #48	; 0x30
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fd0a 	bl	800b524 <ld_word>
 800db10:	4603      	mov	r3, r0
 800db12:	2b01      	cmp	r3, #1
 800db14:	d140      	bne.n	800db98 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800db16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db18:	3301      	adds	r3, #1
 800db1a:	4619      	mov	r1, r3
 800db1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db1e:	f7fd ffb1 	bl	800ba84 <move_window>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d137      	bne.n	800db98 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	2200      	movs	r2, #0
 800db2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	333c      	adds	r3, #60	; 0x3c
 800db32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fcf4 	bl	800b524 <ld_word>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db44:	429a      	cmp	r2, r3
 800db46:	d127      	bne.n	800db98 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4a:	333c      	adds	r3, #60	; 0x3c
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd fd01 	bl	800b554 <ld_dword>
 800db52:	4603      	mov	r3, r0
 800db54:	4a1e      	ldr	r2, [pc, #120]	; (800dbd0 <find_volume+0x500>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d11e      	bne.n	800db98 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800db5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5c:	333c      	adds	r3, #60	; 0x3c
 800db5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db62:	4618      	mov	r0, r3
 800db64:	f7fd fcf6 	bl	800b554 <ld_dword>
 800db68:	4603      	mov	r3, r0
 800db6a:	4a1a      	ldr	r2, [pc, #104]	; (800dbd4 <find_volume+0x504>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d113      	bne.n	800db98 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	333c      	adds	r3, #60	; 0x3c
 800db74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fceb 	bl	800b554 <ld_dword>
 800db7e:	4602      	mov	r2, r0
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	333c      	adds	r3, #60	; 0x3c
 800db88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fd fce1 	bl	800b554 <ld_dword>
 800db92:	4602      	mov	r2, r0
 800db94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db96:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800db9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dba0:	4b0d      	ldr	r3, [pc, #52]	; (800dbd8 <find_volume+0x508>)
 800dba2:	881b      	ldrh	r3, [r3, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	4b0b      	ldr	r3, [pc, #44]	; (800dbd8 <find_volume+0x508>)
 800dbaa:	801a      	strh	r2, [r3, #0]
 800dbac:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <find_volume+0x508>)
 800dbae:	881a      	ldrh	r2, [r3, #0]
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	4a09      	ldr	r2, [pc, #36]	; (800dbdc <find_volume+0x50c>)
 800dbb8:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dbc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbc2:	f7fd fef7 	bl	800b9b4 <clear_lock>
#endif
	return FR_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3758      	adds	r7, #88	; 0x58
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	41615252 	.word	0x41615252
 800dbd4:	61417272 	.word	0x61417272
 800dbd8:	20002868 	.word	0x20002868
 800dbdc:	2000288c 	.word	0x2000288c

0800dbe0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dbea:	2309      	movs	r3, #9
 800dbec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01c      	beq.n	800dc2e <validate+0x4e>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d018      	beq.n	800dc2e <validate+0x4e>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d013      	beq.n	800dc2e <validate+0x4e>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	889a      	ldrh	r2, [r3, #4]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	88db      	ldrh	r3, [r3, #6]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d10c      	bne.n	800dc2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	785b      	ldrb	r3, [r3, #1]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fd fbe4 	bl	800b3e8 <disk_status>
 800dc20:	4603      	mov	r3, r0
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <validate+0x4e>
			res = FR_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dc2e:	7bfb      	ldrb	r3, [r7, #15]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <validate+0x5a>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	e000      	b.n	800dc3c <validate+0x5c>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	6013      	str	r3, [r2, #0]
	return res;
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	4613      	mov	r3, r2
 800dc58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc5e:	f107 0310 	add.w	r3, r7, #16
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff fc99 	bl	800d59a <get_ldnumber>
 800dc68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	da01      	bge.n	800dc74 <f_mount+0x28>
 800dc70:	230b      	movs	r3, #11
 800dc72:	e02b      	b.n	800dccc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dc74:	4a17      	ldr	r2, [pc, #92]	; (800dcd4 <f_mount+0x88>)
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dc84:	69b8      	ldr	r0, [r7, #24]
 800dc86:	f7fd fe95 	bl	800b9b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	490d      	ldr	r1, [pc, #52]	; (800dcd4 <f_mount+0x88>)
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d002      	beq.n	800dcb2 <f_mount+0x66>
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d001      	beq.n	800dcb6 <f_mount+0x6a>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e00a      	b.n	800dccc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dcb6:	f107 010c 	add.w	r1, r7, #12
 800dcba:	f107 0308 	add.w	r3, r7, #8
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fd05 	bl	800d6d0 <find_volume>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dcca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3720      	adds	r7, #32
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20002864 	.word	0x20002864

0800dcd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b09a      	sub	sp, #104	; 0x68
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	4613      	mov	r3, r2
 800dce4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <f_open+0x18>
 800dcec:	2309      	movs	r3, #9
 800dcee:	e1bb      	b.n	800e068 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dcf8:	79fa      	ldrb	r2, [r7, #7]
 800dcfa:	f107 0114 	add.w	r1, r7, #20
 800dcfe:	f107 0308 	add.w	r3, r7, #8
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fce4 	bl	800d6d0 <find_volume>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dd0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f040 819f 	bne.w	800e056 <f_open+0x37e>
		dj.obj.fs = fs;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	f107 0318 	add.w	r3, r7, #24
 800dd22:	4611      	mov	r1, r2
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7ff fba3 	bl	800d470 <follow_path>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dd30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d11a      	bne.n	800dd6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dd38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dd3c:	b25b      	sxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	da03      	bge.n	800dd4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800dd42:	2306      	movs	r3, #6
 800dd44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd48:	e011      	b.n	800dd6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	f023 0301 	bic.w	r3, r3, #1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	bf14      	ite	ne
 800dd54:	2301      	movne	r3, #1
 800dd56:	2300      	moveq	r3, #0
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f107 0318 	add.w	r3, r7, #24
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fd fcde 	bl	800b724 <chk_lock>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dd6e:	79fb      	ldrb	r3, [r7, #7]
 800dd70:	f003 031c 	and.w	r3, r3, #28
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d07f      	beq.n	800de78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dd78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d017      	beq.n	800ddb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dd80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd84:	2b04      	cmp	r3, #4
 800dd86:	d10e      	bne.n	800dda6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd88:	f7fd fd28 	bl	800b7dc <enq_lock>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d006      	beq.n	800dda0 <f_open+0xc8>
 800dd92:	f107 0318 	add.w	r3, r7, #24
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe ff8e 	bl	800ccb8 <dir_register>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	e000      	b.n	800dda2 <f_open+0xca>
 800dda0:	2312      	movs	r3, #18
 800dda2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	f043 0308 	orr.w	r3, r3, #8
 800ddac:	71fb      	strb	r3, [r7, #7]
 800ddae:	e010      	b.n	800ddd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ddb0:	7fbb      	ldrb	r3, [r7, #30]
 800ddb2:	f003 0311 	and.w	r3, r3, #17
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d003      	beq.n	800ddc2 <f_open+0xea>
					res = FR_DENIED;
 800ddba:	2307      	movs	r3, #7
 800ddbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ddc0:	e007      	b.n	800ddd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d002      	beq.n	800ddd2 <f_open+0xfa>
 800ddcc:	2308      	movs	r3, #8
 800ddce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ddd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d168      	bne.n	800deac <f_open+0x1d4>
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	f003 0308 	and.w	r3, r3, #8
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d063      	beq.n	800deac <f_open+0x1d4>
				dw = GET_FATTIME();
 800dde4:	f7fd faa2 	bl	800b32c <get_fattime>
 800dde8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	330e      	adds	r3, #14
 800ddee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fd fbed 	bl	800b5d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	3316      	adds	r3, #22
 800ddfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fd fbe7 	bl	800b5d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	330b      	adds	r3, #11
 800de06:	2220      	movs	r2, #32
 800de08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f7fe fbbf 	bl	800c594 <ld_clust>
 800de16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de1c:	2200      	movs	r2, #0
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe fbd7 	bl	800c5d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800de24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de26:	331c      	adds	r3, #28
 800de28:	2100      	movs	r1, #0
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fd fbd0 	bl	800b5d0 <st_dword>
					fs->wflag = 1;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2201      	movs	r2, #1
 800de34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d037      	beq.n	800deac <f_open+0x1d4>
						dw = fs->winsect;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800de42:	f107 0318 	add.w	r3, r7, #24
 800de46:	2200      	movs	r2, #0
 800de48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe f8c7 	bl	800bfde <remove_chain>
 800de50:	4603      	mov	r3, r0
 800de52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800de56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d126      	bne.n	800deac <f_open+0x1d4>
							res = move_window(fs, dw);
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de62:	4618      	mov	r0, r3
 800de64:	f7fd fe0e 	bl	800ba84 <move_window>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de72:	3a01      	subs	r2, #1
 800de74:	615a      	str	r2, [r3, #20]
 800de76:	e019      	b.n	800deac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d115      	bne.n	800deac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de80:	7fbb      	ldrb	r3, [r7, #30]
 800de82:	f003 0310 	and.w	r3, r3, #16
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800de8a:	2304      	movs	r3, #4
 800de8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800de90:	e00c      	b.n	800deac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de92:	79fb      	ldrb	r3, [r7, #7]
 800de94:	f003 0302 	and.w	r3, r3, #2
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d007      	beq.n	800deac <f_open+0x1d4>
 800de9c:	7fbb      	ldrb	r3, [r7, #30]
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d002      	beq.n	800deac <f_open+0x1d4>
						res = FR_DENIED;
 800dea6:	2307      	movs	r3, #7
 800dea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800deac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d128      	bne.n	800df06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	f003 0308 	and.w	r3, r3, #8
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800debe:	79fb      	ldrb	r3, [r7, #7]
 800dec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	f023 0301 	bic.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	bf14      	ite	ne
 800dede:	2301      	movne	r3, #1
 800dee0:	2300      	moveq	r3, #0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	461a      	mov	r2, r3
 800dee6:	f107 0318 	add.w	r3, r7, #24
 800deea:	4611      	mov	r1, r2
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd fc97 	bl	800b820 <inc_lock>
 800def2:	4602      	mov	r2, r0
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <f_open+0x22e>
 800df00:	2302      	movs	r3, #2
 800df02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800df06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f040 80a3 	bne.w	800e056 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe fb3c 	bl	800c594 <ld_clust>
 800df1c:	4602      	mov	r2, r0
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	331c      	adds	r3, #28
 800df26:	4618      	mov	r0, r3
 800df28:	f7fd fb14 	bl	800b554 <ld_dword>
 800df2c:	4602      	mov	r2, r0
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df38:	697a      	ldr	r2, [r7, #20]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	88da      	ldrh	r2, [r3, #6]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	79fa      	ldrb	r2, [r7, #7]
 800df4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3330      	adds	r3, #48	; 0x30
 800df62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fd fb7e 	bl	800b66a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df6e:	79fb      	ldrb	r3, [r7, #7]
 800df70:	f003 0320 	and.w	r3, r3, #32
 800df74:	2b00      	cmp	r3, #0
 800df76:	d06e      	beq.n	800e056 <f_open+0x37e>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d06a      	beq.n	800e056 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68da      	ldr	r2, [r3, #12]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	895b      	ldrh	r3, [r3, #10]
 800df8c:	461a      	mov	r2, r3
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	899b      	ldrh	r3, [r3, #12]
 800df92:	fb02 f303 	mul.w	r3, r2, r3
 800df96:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfa4:	e016      	b.n	800dfd4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fd fe27 	bl	800bbfe <get_fat>
 800dfb0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dfb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d802      	bhi.n	800dfbe <f_open+0x2e6>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc4:	d102      	bne.n	800dfcc <f_open+0x2f4>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d103      	bne.n	800dfe4 <f_open+0x30c>
 800dfdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d8e0      	bhi.n	800dfa6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfe8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dfea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d131      	bne.n	800e056 <f_open+0x37e>
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	899b      	ldrh	r3, [r3, #12]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dffa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dffe:	fb01 f202 	mul.w	r2, r1, r2
 800e002:	1a9b      	subs	r3, r3, r2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d026      	beq.n	800e056 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd fdd7 	bl	800bbc0 <clust2sect>
 800e012:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d103      	bne.n	800e022 <f_open+0x34a>
						res = FR_INT_ERR;
 800e01a:	2302      	movs	r3, #2
 800e01c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e020:	e019      	b.n	800e056 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	899b      	ldrh	r3, [r3, #12]
 800e026:	461a      	mov	r2, r3
 800e028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e02a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e030:	441a      	add	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	7858      	ldrb	r0, [r3, #1]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6a1a      	ldr	r2, [r3, #32]
 800e044:	2301      	movs	r3, #1
 800e046:	f7fd fa0f 	bl	800b468 <disk_read>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <f_open+0x37e>
 800e050:	2301      	movs	r3, #1
 800e052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e056:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d002      	beq.n	800e064 <f_open+0x38c>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3768      	adds	r7, #104	; 0x68
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08c      	sub	sp, #48	; 0x30
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2200      	movs	r2, #0
 800e086:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f107 0210 	add.w	r2, r7, #16
 800e08e:	4611      	mov	r1, r2
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff fda5 	bl	800dbe0 <validate>
 800e096:	4603      	mov	r3, r0
 800e098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d107      	bne.n	800e0b4 <f_write+0x44>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	7d5b      	ldrb	r3, [r3, #21]
 800e0a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e0ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <f_write+0x4a>
 800e0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0b8:	e16a      	b.n	800e390 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	7d1b      	ldrb	r3, [r3, #20]
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <f_write+0x5a>
 800e0c6:	2307      	movs	r3, #7
 800e0c8:	e162      	b.n	800e390 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	699a      	ldr	r2, [r3, #24]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	441a      	add	r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	f080 814c 	bcs.w	800e374 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	43db      	mvns	r3, r3
 800e0e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e0e4:	e146      	b.n	800e374 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	8992      	ldrh	r2, [r2, #12]
 800e0ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0f2:	fb01 f202 	mul.w	r2, r1, r2
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 80f1 	bne.w	800e2e0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	693a      	ldr	r2, [r7, #16]
 800e104:	8992      	ldrh	r2, [r2, #12]
 800e106:	fbb3 f3f2 	udiv	r3, r3, r2
 800e10a:	693a      	ldr	r2, [r7, #16]
 800e10c:	8952      	ldrh	r2, [r2, #10]
 800e10e:	3a01      	subs	r2, #1
 800e110:	4013      	ands	r3, r2
 800e112:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d143      	bne.n	800e1a2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10c      	bne.n	800e13c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d11a      	bne.n	800e164 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2100      	movs	r1, #0
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd ffb8 	bl	800c0a8 <create_chain>
 800e138:	62b8      	str	r0, [r7, #40]	; 0x28
 800e13a:	e013      	b.n	800e164 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e140:	2b00      	cmp	r3, #0
 800e142:	d007      	beq.n	800e154 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	4619      	mov	r1, r3
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7fe f844 	bl	800c1d8 <clmt_clust>
 800e150:	62b8      	str	r0, [r7, #40]	; 0x28
 800e152:	e007      	b.n	800e164 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	4619      	mov	r1, r3
 800e15c:	4610      	mov	r0, r2
 800e15e:	f7fd ffa3 	bl	800c0a8 <create_chain>
 800e162:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 8109 	beq.w	800e37e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d104      	bne.n	800e17c <f_write+0x10c>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2202      	movs	r2, #2
 800e176:	755a      	strb	r2, [r3, #21]
 800e178:	2302      	movs	r3, #2
 800e17a:	e109      	b.n	800e390 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e182:	d104      	bne.n	800e18e <f_write+0x11e>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2201      	movs	r2, #1
 800e188:	755a      	strb	r2, [r3, #21]
 800e18a:	2301      	movs	r3, #1
 800e18c:	e100      	b.n	800e390 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e192:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <f_write+0x132>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	7d1b      	ldrb	r3, [r3, #20]
 800e1a6:	b25b      	sxtb	r3, r3
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	da18      	bge.n	800e1de <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	7858      	ldrb	r0, [r3, #1]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6a1a      	ldr	r2, [r3, #32]
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	f7fd f974 	bl	800b4a8 <disk_write>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d004      	beq.n	800e1d0 <f_write+0x160>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	755a      	strb	r2, [r3, #21]
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e0df      	b.n	800e390 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	7d1b      	ldrb	r3, [r3, #20]
 800e1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1de:	693a      	ldr	r2, [r7, #16]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	69db      	ldr	r3, [r3, #28]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7fd fcea 	bl	800bbc0 <clust2sect>
 800e1ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d104      	bne.n	800e1fe <f_write+0x18e>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	755a      	strb	r2, [r3, #21]
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	e0c8      	b.n	800e390 <f_write+0x320>
			sect += csect;
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	4413      	add	r3, r2
 800e204:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	461a      	mov	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e212:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d043      	beq.n	800e2a2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	4413      	add	r3, r2
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	8952      	ldrh	r2, [r2, #10]
 800e224:	4293      	cmp	r3, r2
 800e226:	d905      	bls.n	800e234 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	895b      	ldrh	r3, [r3, #10]
 800e22c:	461a      	mov	r2, r3
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	7858      	ldrb	r0, [r3, #1]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	697a      	ldr	r2, [r7, #20]
 800e23c:	69f9      	ldr	r1, [r7, #28]
 800e23e:	f7fd f933 	bl	800b4a8 <disk_write>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <f_write+0x1e2>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2201      	movs	r2, #1
 800e24c:	755a      	strb	r2, [r3, #21]
 800e24e:	2301      	movs	r3, #1
 800e250:	e09e      	b.n	800e390 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a1a      	ldr	r2, [r3, #32]
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	6a3a      	ldr	r2, [r7, #32]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d918      	bls.n	800e292 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6a1a      	ldr	r2, [r3, #32]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	8992      	ldrh	r2, [r2, #12]
 800e272:	fb02 f303 	mul.w	r3, r2, r3
 800e276:	69fa      	ldr	r2, [r7, #28]
 800e278:	18d1      	adds	r1, r2, r3
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	899b      	ldrh	r3, [r3, #12]
 800e27e:	461a      	mov	r2, r3
 800e280:	f7fd f9d2 	bl	800b628 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	7d1b      	ldrb	r3, [r3, #20]
 800e288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	899b      	ldrh	r3, [r3, #12]
 800e296:	461a      	mov	r2, r3
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	fb02 f303 	mul.w	r3, r2, r3
 800e29e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e2a0:	e04b      	b.n	800e33a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d016      	beq.n	800e2da <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d210      	bcs.n	800e2da <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	7858      	ldrb	r0, [r3, #1]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	f7fd f8cf 	bl	800b468 <disk_read>
 800e2ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d004      	beq.n	800e2da <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	755a      	strb	r2, [r3, #21]
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e05a      	b.n	800e390 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	899b      	ldrh	r3, [r3, #12]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	699b      	ldr	r3, [r3, #24]
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	8992      	ldrh	r2, [r2, #12]
 800e2ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2f2:	fb01 f202 	mul.w	r2, r1, r2
 800e2f6:	1a9b      	subs	r3, r3, r2
 800e2f8:	1ac3      	subs	r3, r0, r3
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	429a      	cmp	r2, r3
 800e302:	d901      	bls.n	800e308 <f_write+0x298>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	699b      	ldr	r3, [r3, #24]
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	8992      	ldrh	r2, [r2, #12]
 800e316:	fbb3 f0f2 	udiv	r0, r3, r2
 800e31a:	fb00 f202 	mul.w	r2, r0, r2
 800e31e:	1a9b      	subs	r3, r3, r2
 800e320:	440b      	add	r3, r1
 800e322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	4618      	mov	r0, r3
 800e328:	f7fd f97e 	bl	800b628 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e334:	b2da      	uxtb	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33e:	4413      	add	r3, r2
 800e340:	61fb      	str	r3, [r7, #28]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	699a      	ldr	r2, [r3, #24]
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	441a      	add	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	619a      	str	r2, [r3, #24]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	699b      	ldr	r3, [r3, #24]
 800e356:	429a      	cmp	r2, r3
 800e358:	bf38      	it	cc
 800e35a:	461a      	movcc	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	60da      	str	r2, [r3, #12]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e366:	441a      	add	r2, r3
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f47f aeb5 	bne.w	800e0e6 <f_write+0x76>
 800e37c:	e000      	b.n	800e380 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e37e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	7d1b      	ldrb	r3, [r3, #20]
 800e384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3730      	adds	r7, #48	; 0x30
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f107 0208 	add.w	r2, r7, #8
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff fc19 	bl	800dbe0 <validate>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d168      	bne.n	800e48a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7d1b      	ldrb	r3, [r3, #20]
 800e3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d062      	beq.n	800e48a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7d1b      	ldrb	r3, [r3, #20]
 800e3c8:	b25b      	sxtb	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	da15      	bge.n	800e3fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	7858      	ldrb	r0, [r3, #1]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a1a      	ldr	r2, [r3, #32]
 800e3dc:	2301      	movs	r3, #1
 800e3de:	f7fd f863 	bl	800b4a8 <disk_write>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <f_sync+0x54>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e04f      	b.n	800e48c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7d1b      	ldrb	r3, [r3, #20]
 800e3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e3fa:	f7fc ff97 	bl	800b32c <get_fattime>
 800e3fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e400:	68ba      	ldr	r2, [r7, #8]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e406:	4619      	mov	r1, r3
 800e408:	4610      	mov	r0, r2
 800e40a:	f7fd fb3b 	bl	800ba84 <move_window>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d138      	bne.n	800e48a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	330b      	adds	r3, #11
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	330b      	adds	r3, #11
 800e428:	f042 0220 	orr.w	r2, r2, #32
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	461a      	mov	r2, r3
 800e43a:	68f9      	ldr	r1, [r7, #12]
 800e43c:	f7fe f8c9 	bl	800c5d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f103 021c 	add.w	r2, r3, #28
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	4619      	mov	r1, r3
 800e44c:	4610      	mov	r0, r2
 800e44e:	f7fd f8bf 	bl	800b5d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3316      	adds	r3, #22
 800e456:	6939      	ldr	r1, [r7, #16]
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fd f8b9 	bl	800b5d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3312      	adds	r3, #18
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	f7fd f898 	bl	800b59a <st_word>
					fs->wflag = 1;
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2201      	movs	r2, #1
 800e46e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	4618      	mov	r0, r3
 800e474:	f7fd fb34 	bl	800bae0 <sync_fs>
 800e478:	4603      	mov	r3, r0
 800e47a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	7d1b      	ldrb	r3, [r3, #20]
 800e480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e484:	b2da      	uxtb	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7ff ff7b 	bl	800e398 <f_sync>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d118      	bne.n	800e4de <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f107 0208 	add.w	r2, r7, #8
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fb93 	bl	800dbe0 <validate>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10c      	bne.n	800e4de <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fd fa37 	bl	800b93c <dec_lock>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <f_opendir+0x14>
 800e4f8:	2309      	movs	r3, #9
 800e4fa:	e064      	b.n	800e5c6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e500:	f107 010c 	add.w	r1, r7, #12
 800e504:	463b      	mov	r3, r7
 800e506:	2200      	movs	r2, #0
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff f8e1 	bl	800d6d0 <find_volume>
 800e50e:	4603      	mov	r3, r0
 800e510:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e512:	7dfb      	ldrb	r3, [r7, #23]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d14f      	bne.n	800e5b8 <f_opendir+0xd0>
		obj->fs = fs;
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7fe ffa4 	bl	800d470 <follow_path>
 800e528:	4603      	mov	r3, r0
 800e52a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d13d      	bne.n	800e5ae <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	db12      	blt.n	800e564 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	799b      	ldrb	r3, [r3, #6]
 800e542:	f003 0310 	and.w	r3, r3, #16
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00a      	beq.n	800e560 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a1b      	ldr	r3, [r3, #32]
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f7fe f81e 	bl	800c594 <ld_clust>
 800e558:	4602      	mov	r2, r0
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	609a      	str	r2, [r3, #8]
 800e55e:	e001      	b.n	800e564 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e560:	2305      	movs	r3, #5
 800e562:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e564:	7dfb      	ldrb	r3, [r7, #23]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d121      	bne.n	800e5ae <f_opendir+0xc6>
				obj->id = fs->id;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	88da      	ldrh	r2, [r3, #6]
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e572:	2100      	movs	r1, #0
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7fd fe67 	bl	800c248 <dir_sdi>
 800e57a:	4603      	mov	r3, r0
 800e57c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d114      	bne.n	800e5ae <f_opendir+0xc6>
					if (obj->sclust) {
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00d      	beq.n	800e5a8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e58c:	2100      	movs	r1, #0
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7fd f946 	bl	800b820 <inc_lock>
 800e594:	4602      	mov	r2, r0
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d105      	bne.n	800e5ae <f_opendir+0xc6>
 800e5a2:	2312      	movs	r3, #18
 800e5a4:	75fb      	strb	r3, [r7, #23]
 800e5a6:	e002      	b.n	800e5ae <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e5ae:	7dfb      	ldrb	r3, [r7, #23]
 800e5b0:	2b04      	cmp	r3, #4
 800e5b2:	d101      	bne.n	800e5b8 <f_opendir+0xd0>
 800e5b4:	2305      	movs	r3, #5
 800e5b6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <f_opendir+0xdc>
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e5c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f107 0208 	add.w	r2, r7, #8
 800e5dc:	4611      	mov	r1, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff fafe 	bl	800dbe0 <validate>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d110      	bne.n	800e610 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d006      	beq.n	800e604 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fd f99e 	bl	800b93c <dec_lock>
 800e600:	4603      	mov	r3, r0
 800e602:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e604:	7bfb      	ldrb	r3, [r7, #15]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d102      	bne.n	800e610 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e610:	7bfb      	ldrb	r3, [r7, #15]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b084      	sub	sp, #16
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f107 0208 	add.w	r2, r7, #8
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fad7 	bl	800dbe0 <validate>
 800e632:	4603      	mov	r3, r0
 800e634:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d126      	bne.n	800e68a <f_readdir+0x70>
		if (!fno) {
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e642:	2100      	movs	r1, #0
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7fd fdff 	bl	800c248 <dir_sdi>
 800e64a:	4603      	mov	r3, r0
 800e64c:	73fb      	strb	r3, [r7, #15]
 800e64e:	e01c      	b.n	800e68a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e650:	2100      	movs	r1, #0
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7fe f9c9 	bl	800c9ea <dir_read>
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d101      	bne.n	800e666 <f_readdir+0x4c>
 800e662:	2300      	movs	r3, #0
 800e664:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10e      	bne.n	800e68a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7fe fc1a 	bl	800cea8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e674:	2100      	movs	r1, #0
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7fd fe6f 	bl	800c35a <dir_next>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	2b04      	cmp	r3, #4
 800e684:	d101      	bne.n	800e68a <f_readdir+0x70>
 800e686:	2300      	movs	r3, #0
 800e688:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b092      	sub	sp, #72	; 0x48
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e6a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e6a4:	f107 030c 	add.w	r3, r7, #12
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff f810 	bl	800d6d0 <find_volume>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e6b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f040 8099 	bne.w	800e7f2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	699a      	ldr	r2, [r3, #24]
 800e6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6cc:	6a1b      	ldr	r3, [r3, #32]
 800e6ce:	3b02      	subs	r3, #2
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d804      	bhi.n	800e6de <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	699a      	ldr	r2, [r3, #24]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	e089      	b.n	800e7f2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d128      	bne.n	800e73c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e6f2:	f107 0314 	add.w	r3, r7, #20
 800e6f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd fa80 	bl	800bbfe <get_fat>
 800e6fe:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d103      	bne.n	800e710 <f_getfree+0x7c>
 800e708:	2301      	movs	r3, #1
 800e70a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e70e:	e063      	b.n	800e7d8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	2b01      	cmp	r3, #1
 800e714:	d103      	bne.n	800e71e <f_getfree+0x8a>
 800e716:	2302      	movs	r3, #2
 800e718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e71c:	e05c      	b.n	800e7d8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	2b00      	cmp	r3, #0
 800e722:	d102      	bne.n	800e72a <f_getfree+0x96>
 800e724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e726:	3301      	adds	r3, #1
 800e728:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800e72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72c:	3301      	adds	r3, #1
 800e72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	6a1b      	ldr	r3, [r3, #32]
 800e734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e736:	429a      	cmp	r2, r3
 800e738:	d3db      	bcc.n	800e6f2 <f_getfree+0x5e>
 800e73a:	e04d      	b.n	800e7d8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e746:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	637b      	str	r3, [r7, #52]	; 0x34
 800e74c:	2300      	movs	r3, #0
 800e74e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800e750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e752:	2b00      	cmp	r3, #0
 800e754:	d113      	bne.n	800e77e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	63ba      	str	r2, [r7, #56]	; 0x38
 800e75e:	4619      	mov	r1, r3
 800e760:	f7fd f990 	bl	800ba84 <move_window>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800e76a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d131      	bne.n	800e7d6 <f_getfree+0x142>
							p = fs->win;
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	333c      	adds	r3, #60	; 0x3c
 800e776:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77a:	899b      	ldrh	r3, [r3, #12]
 800e77c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	2b02      	cmp	r3, #2
 800e784:	d10f      	bne.n	800e7a6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e788:	f7fc fecc 	bl	800b524 <ld_word>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <f_getfree+0x104>
 800e792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e794:	3301      	adds	r3, #1
 800e796:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	3302      	adds	r3, #2
 800e79c:	633b      	str	r3, [r7, #48]	; 0x30
 800e79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a0:	3b02      	subs	r3, #2
 800e7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e7a4:	e010      	b.n	800e7c8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7a8:	f7fc fed4 	bl	800b554 <ld_dword>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d102      	bne.n	800e7bc <f_getfree+0x128>
 800e7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	3304      	adds	r3, #4
 800e7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c4:	3b04      	subs	r3, #4
 800e7c6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1bd      	bne.n	800e750 <f_getfree+0xbc>
 800e7d4:	e000      	b.n	800e7d8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800e7d6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7dc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	791a      	ldrb	r2, [r3, #4]
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	f042 0201 	orr.w	r2, r2, #1
 800e7ee:	b2d2      	uxtb	r2, r2
 800e7f0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e7f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3748      	adds	r7, #72	; 0x48
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	2b0a      	cmp	r3, #10
 800e80e:	d103      	bne.n	800e818 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e810:	210d      	movs	r1, #13
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7ff fff3 	bl	800e7fe <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	db25      	blt.n	800e870 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	60fa      	str	r2, [r7, #12]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	4413      	add	r3, r2
 800e82e:	78fa      	ldrb	r2, [r7, #3]
 800e830:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2b3c      	cmp	r3, #60	; 0x3c
 800e836:	dd12      	ble.n	800e85e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6818      	ldr	r0, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f103 010c 	add.w	r1, r3, #12
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	f107 0308 	add.w	r3, r7, #8
 800e848:	f7ff fc12 	bl	800e070 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	429a      	cmp	r2, r3
 800e852:	d101      	bne.n	800e858 <putc_bfd+0x5a>
 800e854:	2300      	movs	r3, #0
 800e856:	e001      	b.n	800e85c <putc_bfd+0x5e>
 800e858:	f04f 33ff 	mov.w	r3, #4294967295
 800e85c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	609a      	str	r2, [r3, #8]
 800e86e:	e000      	b.n	800e872 <putc_bfd+0x74>
	if (i < 0) return;
 800e870:	bf00      	nop
}
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	db16      	blt.n	800e8b6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6818      	ldr	r0, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f103 010c 	add.w	r1, r3, #12
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	461a      	mov	r2, r3
 800e898:	f107 030c 	add.w	r3, r7, #12
 800e89c:	f7ff fbe8 	bl	800e070 <f_write>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d107      	bne.n	800e8b6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d102      	bne.n	800e8b6 <putc_flush+0x3e>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	e001      	b.n	800e8ba <putc_flush+0x42>
	return EOF;
 800e8b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	683a      	ldr	r2, [r7, #0]
 800e8d0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	605a      	str	r2, [r3, #4]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	609a      	str	r2, [r3, #8]
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800e8ec:	b40e      	push	{r1, r2, r3}
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b0a7      	sub	sp, #156	; 0x9c
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800e8f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8fa:	6879      	ldr	r1, [r7, #4]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff ffe0 	bl	800e8c2 <putc_init>

	va_start(arp, fmt);
 800e902:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e906:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800e908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e90c:	1c5a      	adds	r2, r3, #1
 800e90e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800e918:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 81f2 	beq.w	800ed06 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800e922:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e926:	2b25      	cmp	r3, #37	; 0x25
 800e928:	d008      	beq.n	800e93c <f_printf+0x50>
			putc_bfd(&pb, c);
 800e92a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e92e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff ff62 	bl	800e7fe <putc_bfd>
			continue;
 800e93a:	e1e3      	b.n	800ed04 <f_printf+0x418>
		}
		w = f = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e942:	2300      	movs	r3, #0
 800e944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800e948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800e958:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e95c:	2b30      	cmp	r3, #48	; 0x30
 800e95e:	d10b      	bne.n	800e978 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800e960:	2301      	movs	r3, #1
 800e962:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e976:	e024      	b.n	800e9c2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800e978:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e97c:	2b2d      	cmp	r3, #45	; 0x2d
 800e97e:	d120      	bne.n	800e9c2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800e980:	2302      	movs	r3, #2
 800e982:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e98a:	1c5a      	adds	r2, r3, #1
 800e98c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800e996:	e014      	b.n	800e9c2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800e998:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e99c:	4613      	mov	r3, r2
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	4413      	add	r3, r2
 800e9a2:	005b      	lsls	r3, r3, #1
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e9aa:	4413      	add	r3, r2
 800e9ac:	3b30      	subs	r3, #48	; 0x30
 800e9ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800e9b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800e9c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e9c6:	2b2f      	cmp	r3, #47	; 0x2f
 800e9c8:	d903      	bls.n	800e9d2 <f_printf+0xe6>
 800e9ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e9ce:	2b39      	cmp	r3, #57	; 0x39
 800e9d0:	d9e2      	bls.n	800e998 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800e9d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e9d6:	2b6c      	cmp	r3, #108	; 0x6c
 800e9d8:	d003      	beq.n	800e9e2 <f_printf+0xf6>
 800e9da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e9de:	2b4c      	cmp	r3, #76	; 0x4c
 800e9e0:	d10d      	bne.n	800e9fe <f_printf+0x112>
			f |= 4; c = *fmt++;
 800e9e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e9e6:	f043 0304 	orr.w	r3, r3, #4
 800e9ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e9ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800e9fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f000 8181 	beq.w	800ed0a <f_printf+0x41e>
		d = c;
 800ea08:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ea0c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ea10:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ea14:	2b60      	cmp	r3, #96	; 0x60
 800ea16:	d908      	bls.n	800ea2a <f_printf+0x13e>
 800ea18:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ea1c:	2b7a      	cmp	r3, #122	; 0x7a
 800ea1e:	d804      	bhi.n	800ea2a <f_printf+0x13e>
 800ea20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ea24:	3b20      	subs	r3, #32
 800ea26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ea2a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ea2e:	3b42      	subs	r3, #66	; 0x42
 800ea30:	2b16      	cmp	r3, #22
 800ea32:	f200 8098 	bhi.w	800eb66 <f_printf+0x27a>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <f_printf+0x150>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800eb47 	.word	0x0800eb47
 800ea40:	0800eb2f 	.word	0x0800eb2f
 800ea44:	0800eb57 	.word	0x0800eb57
 800ea48:	0800eb67 	.word	0x0800eb67
 800ea4c:	0800eb67 	.word	0x0800eb67
 800ea50:	0800eb67 	.word	0x0800eb67
 800ea54:	0800eb67 	.word	0x0800eb67
 800ea58:	0800eb67 	.word	0x0800eb67
 800ea5c:	0800eb67 	.word	0x0800eb67
 800ea60:	0800eb67 	.word	0x0800eb67
 800ea64:	0800eb67 	.word	0x0800eb67
 800ea68:	0800eb67 	.word	0x0800eb67
 800ea6c:	0800eb67 	.word	0x0800eb67
 800ea70:	0800eb4f 	.word	0x0800eb4f
 800ea74:	0800eb67 	.word	0x0800eb67
 800ea78:	0800eb67 	.word	0x0800eb67
 800ea7c:	0800eb67 	.word	0x0800eb67
 800ea80:	0800ea99 	.word	0x0800ea99
 800ea84:	0800eb67 	.word	0x0800eb67
 800ea88:	0800eb57 	.word	0x0800eb57
 800ea8c:	0800eb67 	.word	0x0800eb67
 800ea90:	0800eb67 	.word	0x0800eb67
 800ea94:	0800eb5f 	.word	0x0800eb5f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ea98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800eaa8:	e004      	b.n	800eab4 <f_printf+0x1c8>
 800eaaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eaae:	3301      	adds	r3, #1
 800eab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800eab4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eaba:	4413      	add	r3, r2
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1f3      	bne.n	800eaaa <f_printf+0x1be>
			if (!(f & 2)) {
 800eac2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eac6:	f003 0302 	and.w	r3, r3, #2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d11a      	bne.n	800eb04 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800eace:	e005      	b.n	800eadc <f_printf+0x1f0>
 800ead0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ead4:	2120      	movs	r1, #32
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fe91 	bl	800e7fe <putc_bfd>
 800eadc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eae6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d8f0      	bhi.n	800ead0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800eaee:	e009      	b.n	800eb04 <f_printf+0x218>
 800eaf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800eaf6:	781a      	ldrb	r2, [r3, #0]
 800eaf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fe7d 	bl	800e7fe <putc_bfd>
 800eb04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f1      	bne.n	800eaf0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800eb0c:	e005      	b.n	800eb1a <f_printf+0x22e>
 800eb0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb12:	2120      	movs	r1, #32
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fe72 	bl	800e7fe <putc_bfd>
 800eb1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eb24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d8f0      	bhi.n	800eb0e <f_printf+0x222>
			continue;
 800eb2c:	e0ea      	b.n	800ed04 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800eb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb30:	1d1a      	adds	r2, r3, #4
 800eb32:	67ba      	str	r2, [r7, #120]	; 0x78
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	b2da      	uxtb	r2, r3
 800eb38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fe5d 	bl	800e7fe <putc_bfd>
 800eb44:	e0de      	b.n	800ed04 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800eb46:	2302      	movs	r3, #2
 800eb48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eb4c:	e014      	b.n	800eb78 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800eb4e:	2308      	movs	r3, #8
 800eb50:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eb54:	e010      	b.n	800eb78 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800eb56:	230a      	movs	r3, #10
 800eb58:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eb5c:	e00c      	b.n	800eb78 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800eb5e:	2310      	movs	r3, #16
 800eb60:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eb64:	e008      	b.n	800eb78 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800eb66:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800eb6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb6e:	4611      	mov	r1, r2
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff fe44 	bl	800e7fe <putc_bfd>
 800eb76:	e0c5      	b.n	800ed04 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800eb78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d004      	beq.n	800eb8e <f_printf+0x2a2>
 800eb84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb86:	1d1a      	adds	r2, r3, #4
 800eb88:	67ba      	str	r2, [r7, #120]	; 0x78
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	e00c      	b.n	800eba8 <f_printf+0x2bc>
 800eb8e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800eb92:	2b44      	cmp	r3, #68	; 0x44
 800eb94:	d104      	bne.n	800eba0 <f_printf+0x2b4>
 800eb96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb98:	1d1a      	adds	r2, r3, #4
 800eb9a:	67ba      	str	r2, [r7, #120]	; 0x78
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	e003      	b.n	800eba8 <f_printf+0x2bc>
 800eba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eba2:	1d1a      	adds	r2, r3, #4
 800eba4:	67ba      	str	r2, [r7, #120]	; 0x78
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ebac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ebb0:	2b44      	cmp	r3, #68	; 0x44
 800ebb2:	d10e      	bne.n	800ebd2 <f_printf+0x2e6>
 800ebb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	da0a      	bge.n	800ebd2 <f_printf+0x2e6>
			v = 0 - v;
 800ebbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebc0:	425b      	negs	r3, r3
 800ebc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ebc6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ebca:	f043 0308 	orr.w	r3, r3, #8
 800ebce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ebd8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ebdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebe0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebe4:	fb01 f202 	mul.w	r2, r1, r2
 800ebe8:	1a9b      	subs	r3, r3, r2
 800ebea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800ebee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ebf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ebf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ebfe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ec02:	2b09      	cmp	r3, #9
 800ec04:	d90b      	bls.n	800ec1e <f_printf+0x332>
 800ec06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ec0a:	2b78      	cmp	r3, #120	; 0x78
 800ec0c:	d101      	bne.n	800ec12 <f_printf+0x326>
 800ec0e:	2227      	movs	r2, #39	; 0x27
 800ec10:	e000      	b.n	800ec14 <f_printf+0x328>
 800ec12:	2207      	movs	r2, #7
 800ec14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ec18:	4413      	add	r3, r2
 800ec1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ec1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ec28:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ec2c:	3230      	adds	r2, #48	; 0x30
 800ec2e:	b2d2      	uxtb	r2, r2
 800ec30:	3398      	adds	r3, #152	; 0x98
 800ec32:	443b      	add	r3, r7
 800ec34:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ec38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d003      	beq.n	800ec48 <f_printf+0x35c>
 800ec40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec44:	2b1f      	cmp	r3, #31
 800ec46:	d9c7      	bls.n	800ebd8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ec48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d009      	beq.n	800ec68 <f_printf+0x37c>
 800ec54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ec5e:	3398      	adds	r3, #152	; 0x98
 800ec60:	443b      	add	r3, r7
 800ec62:	222d      	movs	r2, #45	; 0x2d
 800ec64:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ec68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ec70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <f_printf+0x394>
 800ec7c:	2330      	movs	r3, #48	; 0x30
 800ec7e:	e000      	b.n	800ec82 <f_printf+0x396>
 800ec80:	2320      	movs	r3, #32
 800ec82:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ec86:	e007      	b.n	800ec98 <f_printf+0x3ac>
 800ec88:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ec8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff fdb3 	bl	800e7fe <putc_bfd>
 800ec98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d108      	bne.n	800ecb6 <f_printf+0x3ca>
 800eca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ecae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d8e8      	bhi.n	800ec88 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ecb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ecc0:	f107 020c 	add.w	r2, r7, #12
 800ecc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecc8:	4413      	add	r3, r2
 800ecca:	781a      	ldrb	r2, [r3, #0]
 800eccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fd93 	bl	800e7fe <putc_bfd>
		} while (i);
 800ecd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1ea      	bne.n	800ecb6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ece0:	e007      	b.n	800ecf2 <f_printf+0x406>
 800ece2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ece6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecea:	4611      	mov	r1, r2
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7ff fd86 	bl	800e7fe <putc_bfd>
 800ecf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ecfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d8ee      	bhi.n	800ece2 <f_printf+0x3f6>
		c = *fmt++;
 800ed04:	e600      	b.n	800e908 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ed06:	bf00      	nop
 800ed08:	e000      	b.n	800ed0c <f_printf+0x420>
		if (!c) break;
 800ed0a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ed0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff fdb1 	bl	800e878 <putc_flush>
 800ed16:	4603      	mov	r3, r0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	379c      	adds	r7, #156	; 0x9c
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed22:	b003      	add	sp, #12
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop

0800ed28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b087      	sub	sp, #28
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	4613      	mov	r3, r2
 800ed34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed36:	2301      	movs	r3, #1
 800ed38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed3e:	4b1f      	ldr	r3, [pc, #124]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed40:	7a5b      	ldrb	r3, [r3, #9]
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d131      	bne.n	800edac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed48:	4b1c      	ldr	r3, [pc, #112]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed4a:	7a5b      	ldrb	r3, [r3, #9]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	461a      	mov	r2, r3
 800ed50:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed52:	2100      	movs	r1, #0
 800ed54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed56:	4b19      	ldr	r3, [pc, #100]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed58:	7a5b      	ldrb	r3, [r3, #9]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	4a17      	ldr	r2, [pc, #92]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed66:	4b15      	ldr	r3, [pc, #84]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed68:	7a5b      	ldrb	r3, [r3, #9]
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4b13      	ldr	r3, [pc, #76]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed70:	4413      	add	r3, r2
 800ed72:	79fa      	ldrb	r2, [r7, #7]
 800ed74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed78:	7a5b      	ldrb	r3, [r3, #9]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	1c5a      	adds	r2, r3, #1
 800ed7e:	b2d1      	uxtb	r1, r2
 800ed80:	4a0e      	ldr	r2, [pc, #56]	; (800edbc <FATFS_LinkDriverEx+0x94>)
 800ed82:	7251      	strb	r1, [r2, #9]
 800ed84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed86:	7dbb      	ldrb	r3, [r7, #22]
 800ed88:	3330      	adds	r3, #48	; 0x30
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	3301      	adds	r3, #1
 800ed94:	223a      	movs	r2, #58	; 0x3a
 800ed96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	3302      	adds	r3, #2
 800ed9c:	222f      	movs	r2, #47	; 0x2f
 800ed9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	3303      	adds	r3, #3
 800eda4:	2200      	movs	r2, #0
 800eda6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800edac:	7dfb      	ldrb	r3, [r7, #23]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	371c      	adds	r7, #28
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	20002a8c 	.word	0x20002a8c

0800edc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800edca:	2200      	movs	r2, #0
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7ff ffaa 	bl	800ed28 <FATFS_LinkDriverEx>
 800edd4:	4603      	mov	r3, r0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	6039      	str	r1, [r7, #0]
 800edea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800edec:	88fb      	ldrh	r3, [r7, #6]
 800edee:	2b7f      	cmp	r3, #127	; 0x7f
 800edf0:	d802      	bhi.n	800edf8 <ff_convert+0x18>
		c = chr;
 800edf2:	88fb      	ldrh	r3, [r7, #6]
 800edf4:	81fb      	strh	r3, [r7, #14]
 800edf6:	e025      	b.n	800ee44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00b      	beq.n	800ee16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	2bff      	cmp	r3, #255	; 0xff
 800ee02:	d805      	bhi.n	800ee10 <ff_convert+0x30>
 800ee04:	88fb      	ldrh	r3, [r7, #6]
 800ee06:	3b80      	subs	r3, #128	; 0x80
 800ee08:	4a12      	ldr	r2, [pc, #72]	; (800ee54 <ff_convert+0x74>)
 800ee0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee0e:	e000      	b.n	800ee12 <ff_convert+0x32>
 800ee10:	2300      	movs	r3, #0
 800ee12:	81fb      	strh	r3, [r7, #14]
 800ee14:	e016      	b.n	800ee44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ee16:	2300      	movs	r3, #0
 800ee18:	81fb      	strh	r3, [r7, #14]
 800ee1a:	e009      	b.n	800ee30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ee1c:	89fb      	ldrh	r3, [r7, #14]
 800ee1e:	4a0d      	ldr	r2, [pc, #52]	; (800ee54 <ff_convert+0x74>)
 800ee20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee24:	88fa      	ldrh	r2, [r7, #6]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d006      	beq.n	800ee38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ee2a:	89fb      	ldrh	r3, [r7, #14]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	81fb      	strh	r3, [r7, #14]
 800ee30:	89fb      	ldrh	r3, [r7, #14]
 800ee32:	2b7f      	cmp	r3, #127	; 0x7f
 800ee34:	d9f2      	bls.n	800ee1c <ff_convert+0x3c>
 800ee36:	e000      	b.n	800ee3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ee38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ee3a:	89fb      	ldrh	r3, [r7, #14]
 800ee3c:	3380      	adds	r3, #128	; 0x80
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ee44:	89fb      	ldrh	r3, [r7, #14]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	0801451c 	.word	0x0801451c

0800ee58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ee62:	88fb      	ldrh	r3, [r7, #6]
 800ee64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee68:	d201      	bcs.n	800ee6e <ff_wtoupper+0x16>
 800ee6a:	4b3e      	ldr	r3, [pc, #248]	; (800ef64 <ff_wtoupper+0x10c>)
 800ee6c:	e000      	b.n	800ee70 <ff_wtoupper+0x18>
 800ee6e:	4b3e      	ldr	r3, [pc, #248]	; (800ef68 <ff_wtoupper+0x110>)
 800ee70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	1c9a      	adds	r2, r3, #2
 800ee76:	617a      	str	r2, [r7, #20]
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ee7c:	8a7b      	ldrh	r3, [r7, #18]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d068      	beq.n	800ef54 <ff_wtoupper+0xfc>
 800ee82:	88fa      	ldrh	r2, [r7, #6]
 800ee84:	8a7b      	ldrh	r3, [r7, #18]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d364      	bcc.n	800ef54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	1c9a      	adds	r2, r3, #2
 800ee8e:	617a      	str	r2, [r7, #20]
 800ee90:	881b      	ldrh	r3, [r3, #0]
 800ee92:	823b      	strh	r3, [r7, #16]
 800ee94:	8a3b      	ldrh	r3, [r7, #16]
 800ee96:	0a1b      	lsrs	r3, r3, #8
 800ee98:	81fb      	strh	r3, [r7, #14]
 800ee9a:	8a3b      	ldrh	r3, [r7, #16]
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eea0:	88fa      	ldrh	r2, [r7, #6]
 800eea2:	8a79      	ldrh	r1, [r7, #18]
 800eea4:	8a3b      	ldrh	r3, [r7, #16]
 800eea6:	440b      	add	r3, r1
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	da49      	bge.n	800ef40 <ff_wtoupper+0xe8>
			switch (cmd) {
 800eeac:	89fb      	ldrh	r3, [r7, #14]
 800eeae:	2b08      	cmp	r3, #8
 800eeb0:	d84f      	bhi.n	800ef52 <ff_wtoupper+0xfa>
 800eeb2:	a201      	add	r2, pc, #4	; (adr r2, 800eeb8 <ff_wtoupper+0x60>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800eedd 	.word	0x0800eedd
 800eebc:	0800eeef 	.word	0x0800eeef
 800eec0:	0800ef05 	.word	0x0800ef05
 800eec4:	0800ef0d 	.word	0x0800ef0d
 800eec8:	0800ef15 	.word	0x0800ef15
 800eecc:	0800ef1d 	.word	0x0800ef1d
 800eed0:	0800ef25 	.word	0x0800ef25
 800eed4:	0800ef2d 	.word	0x0800ef2d
 800eed8:	0800ef35 	.word	0x0800ef35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eedc:	88fa      	ldrh	r2, [r7, #6]
 800eede:	8a7b      	ldrh	r3, [r7, #18]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	4413      	add	r3, r2
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	80fb      	strh	r3, [r7, #6]
 800eeec:	e027      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eeee:	88fa      	ldrh	r2, [r7, #6]
 800eef0:	8a7b      	ldrh	r3, [r7, #18]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	88fa      	ldrh	r2, [r7, #6]
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	80fb      	strh	r3, [r7, #6]
 800ef02:	e01c      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef04:	88fb      	ldrh	r3, [r7, #6]
 800ef06:	3b10      	subs	r3, #16
 800ef08:	80fb      	strh	r3, [r7, #6]
 800ef0a:	e018      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef0c:	88fb      	ldrh	r3, [r7, #6]
 800ef0e:	3b20      	subs	r3, #32
 800ef10:	80fb      	strh	r3, [r7, #6]
 800ef12:	e014      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef14:	88fb      	ldrh	r3, [r7, #6]
 800ef16:	3b30      	subs	r3, #48	; 0x30
 800ef18:	80fb      	strh	r3, [r7, #6]
 800ef1a:	e010      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef1c:	88fb      	ldrh	r3, [r7, #6]
 800ef1e:	3b1a      	subs	r3, #26
 800ef20:	80fb      	strh	r3, [r7, #6]
 800ef22:	e00c      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ef24:	88fb      	ldrh	r3, [r7, #6]
 800ef26:	3308      	adds	r3, #8
 800ef28:	80fb      	strh	r3, [r7, #6]
 800ef2a:	e008      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ef2c:	88fb      	ldrh	r3, [r7, #6]
 800ef2e:	3b50      	subs	r3, #80	; 0x50
 800ef30:	80fb      	strh	r3, [r7, #6]
 800ef32:	e004      	b.n	800ef3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ef34:	88fb      	ldrh	r3, [r7, #6]
 800ef36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ef3a:	80fb      	strh	r3, [r7, #6]
 800ef3c:	bf00      	nop
			}
			break;
 800ef3e:	e008      	b.n	800ef52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ef40:	89fb      	ldrh	r3, [r7, #14]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d195      	bne.n	800ee72 <ff_wtoupper+0x1a>
 800ef46:	8a3b      	ldrh	r3, [r7, #16]
 800ef48:	005b      	lsls	r3, r3, #1
 800ef4a:	697a      	ldr	r2, [r7, #20]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ef50:	e78f      	b.n	800ee72 <ff_wtoupper+0x1a>
			break;
 800ef52:	bf00      	nop
	}

	return chr;
 800ef54:	88fb      	ldrh	r3, [r7, #6]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	371c      	adds	r7, #28
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	0801461c 	.word	0x0801461c
 800ef68:	08014810 	.word	0x08014810

0800ef6c <atoi>:
 800ef6c:	220a      	movs	r2, #10
 800ef6e:	2100      	movs	r1, #0
 800ef70:	f001 bf62 	b.w	8010e38 <strtol>

0800ef74 <__errno>:
 800ef74:	4b01      	ldr	r3, [pc, #4]	; (800ef7c <__errno+0x8>)
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20000058 	.word	0x20000058

0800ef80 <__libc_init_array>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	4d0d      	ldr	r5, [pc, #52]	; (800efb8 <__libc_init_array+0x38>)
 800ef84:	4c0d      	ldr	r4, [pc, #52]	; (800efbc <__libc_init_array+0x3c>)
 800ef86:	1b64      	subs	r4, r4, r5
 800ef88:	10a4      	asrs	r4, r4, #2
 800ef8a:	2600      	movs	r6, #0
 800ef8c:	42a6      	cmp	r6, r4
 800ef8e:	d109      	bne.n	800efa4 <__libc_init_array+0x24>
 800ef90:	4d0b      	ldr	r5, [pc, #44]	; (800efc0 <__libc_init_array+0x40>)
 800ef92:	4c0c      	ldr	r4, [pc, #48]	; (800efc4 <__libc_init_array+0x44>)
 800ef94:	f005 f84a 	bl	801402c <_init>
 800ef98:	1b64      	subs	r4, r4, r5
 800ef9a:	10a4      	asrs	r4, r4, #2
 800ef9c:	2600      	movs	r6, #0
 800ef9e:	42a6      	cmp	r6, r4
 800efa0:	d105      	bne.n	800efae <__libc_init_array+0x2e>
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800efa8:	4798      	blx	r3
 800efaa:	3601      	adds	r6, #1
 800efac:	e7ee      	b.n	800ef8c <__libc_init_array+0xc>
 800efae:	f855 3b04 	ldr.w	r3, [r5], #4
 800efb2:	4798      	blx	r3
 800efb4:	3601      	adds	r6, #1
 800efb6:	e7f2      	b.n	800ef9e <__libc_init_array+0x1e>
 800efb8:	08014e18 	.word	0x08014e18
 800efbc:	08014e18 	.word	0x08014e18
 800efc0:	08014e18 	.word	0x08014e18
 800efc4:	08014e1c 	.word	0x08014e1c

0800efc8 <memset>:
 800efc8:	4402      	add	r2, r0
 800efca:	4603      	mov	r3, r0
 800efcc:	4293      	cmp	r3, r2
 800efce:	d100      	bne.n	800efd2 <memset+0xa>
 800efd0:	4770      	bx	lr
 800efd2:	f803 1b01 	strb.w	r1, [r3], #1
 800efd6:	e7f9      	b.n	800efcc <memset+0x4>

0800efd8 <__cvt>:
 800efd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efdc:	ec55 4b10 	vmov	r4, r5, d0
 800efe0:	2d00      	cmp	r5, #0
 800efe2:	460e      	mov	r6, r1
 800efe4:	4619      	mov	r1, r3
 800efe6:	462b      	mov	r3, r5
 800efe8:	bfbb      	ittet	lt
 800efea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efee:	461d      	movlt	r5, r3
 800eff0:	2300      	movge	r3, #0
 800eff2:	232d      	movlt	r3, #45	; 0x2d
 800eff4:	700b      	strb	r3, [r1, #0]
 800eff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eff8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800effc:	4691      	mov	r9, r2
 800effe:	f023 0820 	bic.w	r8, r3, #32
 800f002:	bfbc      	itt	lt
 800f004:	4622      	movlt	r2, r4
 800f006:	4614      	movlt	r4, r2
 800f008:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f00c:	d005      	beq.n	800f01a <__cvt+0x42>
 800f00e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f012:	d100      	bne.n	800f016 <__cvt+0x3e>
 800f014:	3601      	adds	r6, #1
 800f016:	2102      	movs	r1, #2
 800f018:	e000      	b.n	800f01c <__cvt+0x44>
 800f01a:	2103      	movs	r1, #3
 800f01c:	ab03      	add	r3, sp, #12
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	ab02      	add	r3, sp, #8
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	ec45 4b10 	vmov	d0, r4, r5
 800f028:	4653      	mov	r3, sl
 800f02a:	4632      	mov	r2, r6
 800f02c:	f001 ffd8 	bl	8010fe0 <_dtoa_r>
 800f030:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f034:	4607      	mov	r7, r0
 800f036:	d102      	bne.n	800f03e <__cvt+0x66>
 800f038:	f019 0f01 	tst.w	r9, #1
 800f03c:	d022      	beq.n	800f084 <__cvt+0xac>
 800f03e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f042:	eb07 0906 	add.w	r9, r7, r6
 800f046:	d110      	bne.n	800f06a <__cvt+0x92>
 800f048:	783b      	ldrb	r3, [r7, #0]
 800f04a:	2b30      	cmp	r3, #48	; 0x30
 800f04c:	d10a      	bne.n	800f064 <__cvt+0x8c>
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	4620      	mov	r0, r4
 800f054:	4629      	mov	r1, r5
 800f056:	f7f1 fd57 	bl	8000b08 <__aeabi_dcmpeq>
 800f05a:	b918      	cbnz	r0, 800f064 <__cvt+0x8c>
 800f05c:	f1c6 0601 	rsb	r6, r6, #1
 800f060:	f8ca 6000 	str.w	r6, [sl]
 800f064:	f8da 3000 	ldr.w	r3, [sl]
 800f068:	4499      	add	r9, r3
 800f06a:	2200      	movs	r2, #0
 800f06c:	2300      	movs	r3, #0
 800f06e:	4620      	mov	r0, r4
 800f070:	4629      	mov	r1, r5
 800f072:	f7f1 fd49 	bl	8000b08 <__aeabi_dcmpeq>
 800f076:	b108      	cbz	r0, 800f07c <__cvt+0xa4>
 800f078:	f8cd 900c 	str.w	r9, [sp, #12]
 800f07c:	2230      	movs	r2, #48	; 0x30
 800f07e:	9b03      	ldr	r3, [sp, #12]
 800f080:	454b      	cmp	r3, r9
 800f082:	d307      	bcc.n	800f094 <__cvt+0xbc>
 800f084:	9b03      	ldr	r3, [sp, #12]
 800f086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f088:	1bdb      	subs	r3, r3, r7
 800f08a:	4638      	mov	r0, r7
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	b004      	add	sp, #16
 800f090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f094:	1c59      	adds	r1, r3, #1
 800f096:	9103      	str	r1, [sp, #12]
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	e7f0      	b.n	800f07e <__cvt+0xa6>

0800f09c <__exponent>:
 800f09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	bfb8      	it	lt
 800f0a4:	4249      	neglt	r1, r1
 800f0a6:	f803 2b02 	strb.w	r2, [r3], #2
 800f0aa:	bfb4      	ite	lt
 800f0ac:	222d      	movlt	r2, #45	; 0x2d
 800f0ae:	222b      	movge	r2, #43	; 0x2b
 800f0b0:	2909      	cmp	r1, #9
 800f0b2:	7042      	strb	r2, [r0, #1]
 800f0b4:	dd2a      	ble.n	800f10c <__exponent+0x70>
 800f0b6:	f10d 0407 	add.w	r4, sp, #7
 800f0ba:	46a4      	mov	ip, r4
 800f0bc:	270a      	movs	r7, #10
 800f0be:	46a6      	mov	lr, r4
 800f0c0:	460a      	mov	r2, r1
 800f0c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f0c6:	fb07 1516 	mls	r5, r7, r6, r1
 800f0ca:	3530      	adds	r5, #48	; 0x30
 800f0cc:	2a63      	cmp	r2, #99	; 0x63
 800f0ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	dcf1      	bgt.n	800f0be <__exponent+0x22>
 800f0da:	3130      	adds	r1, #48	; 0x30
 800f0dc:	f1ae 0502 	sub.w	r5, lr, #2
 800f0e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0e4:	1c44      	adds	r4, r0, #1
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	4561      	cmp	r1, ip
 800f0ea:	d30a      	bcc.n	800f102 <__exponent+0x66>
 800f0ec:	f10d 0209 	add.w	r2, sp, #9
 800f0f0:	eba2 020e 	sub.w	r2, r2, lr
 800f0f4:	4565      	cmp	r5, ip
 800f0f6:	bf88      	it	hi
 800f0f8:	2200      	movhi	r2, #0
 800f0fa:	4413      	add	r3, r2
 800f0fc:	1a18      	subs	r0, r3, r0
 800f0fe:	b003      	add	sp, #12
 800f100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f102:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f106:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f10a:	e7ed      	b.n	800f0e8 <__exponent+0x4c>
 800f10c:	2330      	movs	r3, #48	; 0x30
 800f10e:	3130      	adds	r1, #48	; 0x30
 800f110:	7083      	strb	r3, [r0, #2]
 800f112:	70c1      	strb	r1, [r0, #3]
 800f114:	1d03      	adds	r3, r0, #4
 800f116:	e7f1      	b.n	800f0fc <__exponent+0x60>

0800f118 <_printf_float>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	ed2d 8b02 	vpush	{d8}
 800f120:	b08d      	sub	sp, #52	; 0x34
 800f122:	460c      	mov	r4, r1
 800f124:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f128:	4616      	mov	r6, r2
 800f12a:	461f      	mov	r7, r3
 800f12c:	4605      	mov	r5, r0
 800f12e:	f003 f8c7 	bl	80122c0 <_localeconv_r>
 800f132:	f8d0 a000 	ldr.w	sl, [r0]
 800f136:	4650      	mov	r0, sl
 800f138:	f7f1 f86a 	bl	8000210 <strlen>
 800f13c:	2300      	movs	r3, #0
 800f13e:	930a      	str	r3, [sp, #40]	; 0x28
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	9305      	str	r3, [sp, #20]
 800f144:	f8d8 3000 	ldr.w	r3, [r8]
 800f148:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f14c:	3307      	adds	r3, #7
 800f14e:	f023 0307 	bic.w	r3, r3, #7
 800f152:	f103 0208 	add.w	r2, r3, #8
 800f156:	f8c8 2000 	str.w	r2, [r8]
 800f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f162:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f16a:	9307      	str	r3, [sp, #28]
 800f16c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f170:	ee08 0a10 	vmov	s16, r0
 800f174:	4b9f      	ldr	r3, [pc, #636]	; (800f3f4 <_printf_float+0x2dc>)
 800f176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f17a:	f04f 32ff 	mov.w	r2, #4294967295
 800f17e:	f7f1 fcf5 	bl	8000b6c <__aeabi_dcmpun>
 800f182:	bb88      	cbnz	r0, 800f1e8 <_printf_float+0xd0>
 800f184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f188:	4b9a      	ldr	r3, [pc, #616]	; (800f3f4 <_printf_float+0x2dc>)
 800f18a:	f04f 32ff 	mov.w	r2, #4294967295
 800f18e:	f7f1 fccf 	bl	8000b30 <__aeabi_dcmple>
 800f192:	bb48      	cbnz	r0, 800f1e8 <_printf_float+0xd0>
 800f194:	2200      	movs	r2, #0
 800f196:	2300      	movs	r3, #0
 800f198:	4640      	mov	r0, r8
 800f19a:	4649      	mov	r1, r9
 800f19c:	f7f1 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800f1a0:	b110      	cbz	r0, 800f1a8 <_printf_float+0x90>
 800f1a2:	232d      	movs	r3, #45	; 0x2d
 800f1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1a8:	4b93      	ldr	r3, [pc, #588]	; (800f3f8 <_printf_float+0x2e0>)
 800f1aa:	4894      	ldr	r0, [pc, #592]	; (800f3fc <_printf_float+0x2e4>)
 800f1ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1b0:	bf94      	ite	ls
 800f1b2:	4698      	movls	r8, r3
 800f1b4:	4680      	movhi	r8, r0
 800f1b6:	2303      	movs	r3, #3
 800f1b8:	6123      	str	r3, [r4, #16]
 800f1ba:	9b05      	ldr	r3, [sp, #20]
 800f1bc:	f023 0204 	bic.w	r2, r3, #4
 800f1c0:	6022      	str	r2, [r4, #0]
 800f1c2:	f04f 0900 	mov.w	r9, #0
 800f1c6:	9700      	str	r7, [sp, #0]
 800f1c8:	4633      	mov	r3, r6
 800f1ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f000 f9d8 	bl	800f584 <_printf_common>
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	f040 8090 	bne.w	800f2fa <_printf_float+0x1e2>
 800f1da:	f04f 30ff 	mov.w	r0, #4294967295
 800f1de:	b00d      	add	sp, #52	; 0x34
 800f1e0:	ecbd 8b02 	vpop	{d8}
 800f1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e8:	4642      	mov	r2, r8
 800f1ea:	464b      	mov	r3, r9
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	f7f1 fcbc 	bl	8000b6c <__aeabi_dcmpun>
 800f1f4:	b140      	cbz	r0, 800f208 <_printf_float+0xf0>
 800f1f6:	464b      	mov	r3, r9
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	bfbc      	itt	lt
 800f1fc:	232d      	movlt	r3, #45	; 0x2d
 800f1fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f202:	487f      	ldr	r0, [pc, #508]	; (800f400 <_printf_float+0x2e8>)
 800f204:	4b7f      	ldr	r3, [pc, #508]	; (800f404 <_printf_float+0x2ec>)
 800f206:	e7d1      	b.n	800f1ac <_printf_float+0x94>
 800f208:	6863      	ldr	r3, [r4, #4]
 800f20a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f20e:	9206      	str	r2, [sp, #24]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	d13f      	bne.n	800f294 <_printf_float+0x17c>
 800f214:	2306      	movs	r3, #6
 800f216:	6063      	str	r3, [r4, #4]
 800f218:	9b05      	ldr	r3, [sp, #20]
 800f21a:	6861      	ldr	r1, [r4, #4]
 800f21c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f220:	2300      	movs	r3, #0
 800f222:	9303      	str	r3, [sp, #12]
 800f224:	ab0a      	add	r3, sp, #40	; 0x28
 800f226:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f22a:	ab09      	add	r3, sp, #36	; 0x24
 800f22c:	ec49 8b10 	vmov	d0, r8, r9
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	6022      	str	r2, [r4, #0]
 800f234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f238:	4628      	mov	r0, r5
 800f23a:	f7ff fecd 	bl	800efd8 <__cvt>
 800f23e:	9b06      	ldr	r3, [sp, #24]
 800f240:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f242:	2b47      	cmp	r3, #71	; 0x47
 800f244:	4680      	mov	r8, r0
 800f246:	d108      	bne.n	800f25a <_printf_float+0x142>
 800f248:	1cc8      	adds	r0, r1, #3
 800f24a:	db02      	blt.n	800f252 <_printf_float+0x13a>
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	4299      	cmp	r1, r3
 800f250:	dd41      	ble.n	800f2d6 <_printf_float+0x1be>
 800f252:	f1ab 0b02 	sub.w	fp, fp, #2
 800f256:	fa5f fb8b 	uxtb.w	fp, fp
 800f25a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f25e:	d820      	bhi.n	800f2a2 <_printf_float+0x18a>
 800f260:	3901      	subs	r1, #1
 800f262:	465a      	mov	r2, fp
 800f264:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f268:	9109      	str	r1, [sp, #36]	; 0x24
 800f26a:	f7ff ff17 	bl	800f09c <__exponent>
 800f26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f270:	1813      	adds	r3, r2, r0
 800f272:	2a01      	cmp	r2, #1
 800f274:	4681      	mov	r9, r0
 800f276:	6123      	str	r3, [r4, #16]
 800f278:	dc02      	bgt.n	800f280 <_printf_float+0x168>
 800f27a:	6822      	ldr	r2, [r4, #0]
 800f27c:	07d2      	lsls	r2, r2, #31
 800f27e:	d501      	bpl.n	800f284 <_printf_float+0x16c>
 800f280:	3301      	adds	r3, #1
 800f282:	6123      	str	r3, [r4, #16]
 800f284:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d09c      	beq.n	800f1c6 <_printf_float+0xae>
 800f28c:	232d      	movs	r3, #45	; 0x2d
 800f28e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f292:	e798      	b.n	800f1c6 <_printf_float+0xae>
 800f294:	9a06      	ldr	r2, [sp, #24]
 800f296:	2a47      	cmp	r2, #71	; 0x47
 800f298:	d1be      	bne.n	800f218 <_printf_float+0x100>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1bc      	bne.n	800f218 <_printf_float+0x100>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e7b9      	b.n	800f216 <_printf_float+0xfe>
 800f2a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2a6:	d118      	bne.n	800f2da <_printf_float+0x1c2>
 800f2a8:	2900      	cmp	r1, #0
 800f2aa:	6863      	ldr	r3, [r4, #4]
 800f2ac:	dd0b      	ble.n	800f2c6 <_printf_float+0x1ae>
 800f2ae:	6121      	str	r1, [r4, #16]
 800f2b0:	b913      	cbnz	r3, 800f2b8 <_printf_float+0x1a0>
 800f2b2:	6822      	ldr	r2, [r4, #0]
 800f2b4:	07d0      	lsls	r0, r2, #31
 800f2b6:	d502      	bpl.n	800f2be <_printf_float+0x1a6>
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	440b      	add	r3, r1
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2c0:	f04f 0900 	mov.w	r9, #0
 800f2c4:	e7de      	b.n	800f284 <_printf_float+0x16c>
 800f2c6:	b913      	cbnz	r3, 800f2ce <_printf_float+0x1b6>
 800f2c8:	6822      	ldr	r2, [r4, #0]
 800f2ca:	07d2      	lsls	r2, r2, #31
 800f2cc:	d501      	bpl.n	800f2d2 <_printf_float+0x1ba>
 800f2ce:	3302      	adds	r3, #2
 800f2d0:	e7f4      	b.n	800f2bc <_printf_float+0x1a4>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e7f2      	b.n	800f2bc <_printf_float+0x1a4>
 800f2d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2dc:	4299      	cmp	r1, r3
 800f2de:	db05      	blt.n	800f2ec <_printf_float+0x1d4>
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	6121      	str	r1, [r4, #16]
 800f2e4:	07d8      	lsls	r0, r3, #31
 800f2e6:	d5ea      	bpl.n	800f2be <_printf_float+0x1a6>
 800f2e8:	1c4b      	adds	r3, r1, #1
 800f2ea:	e7e7      	b.n	800f2bc <_printf_float+0x1a4>
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	bfd4      	ite	le
 800f2f0:	f1c1 0202 	rsble	r2, r1, #2
 800f2f4:	2201      	movgt	r2, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	e7e0      	b.n	800f2bc <_printf_float+0x1a4>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	055a      	lsls	r2, r3, #21
 800f2fe:	d407      	bmi.n	800f310 <_printf_float+0x1f8>
 800f300:	6923      	ldr	r3, [r4, #16]
 800f302:	4642      	mov	r2, r8
 800f304:	4631      	mov	r1, r6
 800f306:	4628      	mov	r0, r5
 800f308:	47b8      	blx	r7
 800f30a:	3001      	adds	r0, #1
 800f30c:	d12c      	bne.n	800f368 <_printf_float+0x250>
 800f30e:	e764      	b.n	800f1da <_printf_float+0xc2>
 800f310:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f314:	f240 80e0 	bls.w	800f4d8 <_printf_float+0x3c0>
 800f318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f31c:	2200      	movs	r2, #0
 800f31e:	2300      	movs	r3, #0
 800f320:	f7f1 fbf2 	bl	8000b08 <__aeabi_dcmpeq>
 800f324:	2800      	cmp	r0, #0
 800f326:	d034      	beq.n	800f392 <_printf_float+0x27a>
 800f328:	4a37      	ldr	r2, [pc, #220]	; (800f408 <_printf_float+0x2f0>)
 800f32a:	2301      	movs	r3, #1
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af51 	beq.w	800f1da <_printf_float+0xc2>
 800f338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f33c:	429a      	cmp	r2, r3
 800f33e:	db02      	blt.n	800f346 <_printf_float+0x22e>
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	07d8      	lsls	r0, r3, #31
 800f344:	d510      	bpl.n	800f368 <_printf_float+0x250>
 800f346:	ee18 3a10 	vmov	r3, s16
 800f34a:	4652      	mov	r2, sl
 800f34c:	4631      	mov	r1, r6
 800f34e:	4628      	mov	r0, r5
 800f350:	47b8      	blx	r7
 800f352:	3001      	adds	r0, #1
 800f354:	f43f af41 	beq.w	800f1da <_printf_float+0xc2>
 800f358:	f04f 0800 	mov.w	r8, #0
 800f35c:	f104 091a 	add.w	r9, r4, #26
 800f360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f362:	3b01      	subs	r3, #1
 800f364:	4543      	cmp	r3, r8
 800f366:	dc09      	bgt.n	800f37c <_printf_float+0x264>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	079b      	lsls	r3, r3, #30
 800f36c:	f100 8105 	bmi.w	800f57a <_printf_float+0x462>
 800f370:	68e0      	ldr	r0, [r4, #12]
 800f372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f374:	4298      	cmp	r0, r3
 800f376:	bfb8      	it	lt
 800f378:	4618      	movlt	r0, r3
 800f37a:	e730      	b.n	800f1de <_printf_float+0xc6>
 800f37c:	2301      	movs	r3, #1
 800f37e:	464a      	mov	r2, r9
 800f380:	4631      	mov	r1, r6
 800f382:	4628      	mov	r0, r5
 800f384:	47b8      	blx	r7
 800f386:	3001      	adds	r0, #1
 800f388:	f43f af27 	beq.w	800f1da <_printf_float+0xc2>
 800f38c:	f108 0801 	add.w	r8, r8, #1
 800f390:	e7e6      	b.n	800f360 <_printf_float+0x248>
 800f392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f394:	2b00      	cmp	r3, #0
 800f396:	dc39      	bgt.n	800f40c <_printf_float+0x2f4>
 800f398:	4a1b      	ldr	r2, [pc, #108]	; (800f408 <_printf_float+0x2f0>)
 800f39a:	2301      	movs	r3, #1
 800f39c:	4631      	mov	r1, r6
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f43f af19 	beq.w	800f1da <_printf_float+0xc2>
 800f3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	d102      	bne.n	800f3b6 <_printf_float+0x29e>
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	07d9      	lsls	r1, r3, #31
 800f3b4:	d5d8      	bpl.n	800f368 <_printf_float+0x250>
 800f3b6:	ee18 3a10 	vmov	r3, s16
 800f3ba:	4652      	mov	r2, sl
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4628      	mov	r0, r5
 800f3c0:	47b8      	blx	r7
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	f43f af09 	beq.w	800f1da <_printf_float+0xc2>
 800f3c8:	f04f 0900 	mov.w	r9, #0
 800f3cc:	f104 0a1a 	add.w	sl, r4, #26
 800f3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d2:	425b      	negs	r3, r3
 800f3d4:	454b      	cmp	r3, r9
 800f3d6:	dc01      	bgt.n	800f3dc <_printf_float+0x2c4>
 800f3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3da:	e792      	b.n	800f302 <_printf_float+0x1ea>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	4652      	mov	r2, sl
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f aef7 	beq.w	800f1da <_printf_float+0xc2>
 800f3ec:	f109 0901 	add.w	r9, r9, #1
 800f3f0:	e7ee      	b.n	800f3d0 <_printf_float+0x2b8>
 800f3f2:	bf00      	nop
 800f3f4:	7fefffff 	.word	0x7fefffff
 800f3f8:	080148d0 	.word	0x080148d0
 800f3fc:	080148d4 	.word	0x080148d4
 800f400:	080148dc 	.word	0x080148dc
 800f404:	080148d8 	.word	0x080148d8
 800f408:	080148e0 	.word	0x080148e0
 800f40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f40e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f410:	429a      	cmp	r2, r3
 800f412:	bfa8      	it	ge
 800f414:	461a      	movge	r2, r3
 800f416:	2a00      	cmp	r2, #0
 800f418:	4691      	mov	r9, r2
 800f41a:	dc37      	bgt.n	800f48c <_printf_float+0x374>
 800f41c:	f04f 0b00 	mov.w	fp, #0
 800f420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f424:	f104 021a 	add.w	r2, r4, #26
 800f428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f42a:	9305      	str	r3, [sp, #20]
 800f42c:	eba3 0309 	sub.w	r3, r3, r9
 800f430:	455b      	cmp	r3, fp
 800f432:	dc33      	bgt.n	800f49c <_printf_float+0x384>
 800f434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f438:	429a      	cmp	r2, r3
 800f43a:	db3b      	blt.n	800f4b4 <_printf_float+0x39c>
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	07da      	lsls	r2, r3, #31
 800f440:	d438      	bmi.n	800f4b4 <_printf_float+0x39c>
 800f442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f444:	9a05      	ldr	r2, [sp, #20]
 800f446:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f448:	1a9a      	subs	r2, r3, r2
 800f44a:	eba3 0901 	sub.w	r9, r3, r1
 800f44e:	4591      	cmp	r9, r2
 800f450:	bfa8      	it	ge
 800f452:	4691      	movge	r9, r2
 800f454:	f1b9 0f00 	cmp.w	r9, #0
 800f458:	dc35      	bgt.n	800f4c6 <_printf_float+0x3ae>
 800f45a:	f04f 0800 	mov.w	r8, #0
 800f45e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f462:	f104 0a1a 	add.w	sl, r4, #26
 800f466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f46a:	1a9b      	subs	r3, r3, r2
 800f46c:	eba3 0309 	sub.w	r3, r3, r9
 800f470:	4543      	cmp	r3, r8
 800f472:	f77f af79 	ble.w	800f368 <_printf_float+0x250>
 800f476:	2301      	movs	r3, #1
 800f478:	4652      	mov	r2, sl
 800f47a:	4631      	mov	r1, r6
 800f47c:	4628      	mov	r0, r5
 800f47e:	47b8      	blx	r7
 800f480:	3001      	adds	r0, #1
 800f482:	f43f aeaa 	beq.w	800f1da <_printf_float+0xc2>
 800f486:	f108 0801 	add.w	r8, r8, #1
 800f48a:	e7ec      	b.n	800f466 <_printf_float+0x34e>
 800f48c:	4613      	mov	r3, r2
 800f48e:	4631      	mov	r1, r6
 800f490:	4642      	mov	r2, r8
 800f492:	4628      	mov	r0, r5
 800f494:	47b8      	blx	r7
 800f496:	3001      	adds	r0, #1
 800f498:	d1c0      	bne.n	800f41c <_printf_float+0x304>
 800f49a:	e69e      	b.n	800f1da <_printf_float+0xc2>
 800f49c:	2301      	movs	r3, #1
 800f49e:	4631      	mov	r1, r6
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	9205      	str	r2, [sp, #20]
 800f4a4:	47b8      	blx	r7
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	f43f ae97 	beq.w	800f1da <_printf_float+0xc2>
 800f4ac:	9a05      	ldr	r2, [sp, #20]
 800f4ae:	f10b 0b01 	add.w	fp, fp, #1
 800f4b2:	e7b9      	b.n	800f428 <_printf_float+0x310>
 800f4b4:	ee18 3a10 	vmov	r3, s16
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4628      	mov	r0, r5
 800f4be:	47b8      	blx	r7
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d1be      	bne.n	800f442 <_printf_float+0x32a>
 800f4c4:	e689      	b.n	800f1da <_printf_float+0xc2>
 800f4c6:	9a05      	ldr	r2, [sp, #20]
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	4442      	add	r2, r8
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	47b8      	blx	r7
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	d1c1      	bne.n	800f45a <_printf_float+0x342>
 800f4d6:	e680      	b.n	800f1da <_printf_float+0xc2>
 800f4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4da:	2a01      	cmp	r2, #1
 800f4dc:	dc01      	bgt.n	800f4e2 <_printf_float+0x3ca>
 800f4de:	07db      	lsls	r3, r3, #31
 800f4e0:	d538      	bpl.n	800f554 <_printf_float+0x43c>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	4642      	mov	r2, r8
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	47b8      	blx	r7
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f43f ae74 	beq.w	800f1da <_printf_float+0xc2>
 800f4f2:	ee18 3a10 	vmov	r3, s16
 800f4f6:	4652      	mov	r2, sl
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	47b8      	blx	r7
 800f4fe:	3001      	adds	r0, #1
 800f500:	f43f ae6b 	beq.w	800f1da <_printf_float+0xc2>
 800f504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f508:	2200      	movs	r2, #0
 800f50a:	2300      	movs	r3, #0
 800f50c:	f7f1 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 800f510:	b9d8      	cbnz	r0, 800f54a <_printf_float+0x432>
 800f512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f514:	f108 0201 	add.w	r2, r8, #1
 800f518:	3b01      	subs	r3, #1
 800f51a:	4631      	mov	r1, r6
 800f51c:	4628      	mov	r0, r5
 800f51e:	47b8      	blx	r7
 800f520:	3001      	adds	r0, #1
 800f522:	d10e      	bne.n	800f542 <_printf_float+0x42a>
 800f524:	e659      	b.n	800f1da <_printf_float+0xc2>
 800f526:	2301      	movs	r3, #1
 800f528:	4652      	mov	r2, sl
 800f52a:	4631      	mov	r1, r6
 800f52c:	4628      	mov	r0, r5
 800f52e:	47b8      	blx	r7
 800f530:	3001      	adds	r0, #1
 800f532:	f43f ae52 	beq.w	800f1da <_printf_float+0xc2>
 800f536:	f108 0801 	add.w	r8, r8, #1
 800f53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f53c:	3b01      	subs	r3, #1
 800f53e:	4543      	cmp	r3, r8
 800f540:	dcf1      	bgt.n	800f526 <_printf_float+0x40e>
 800f542:	464b      	mov	r3, r9
 800f544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f548:	e6dc      	b.n	800f304 <_printf_float+0x1ec>
 800f54a:	f04f 0800 	mov.w	r8, #0
 800f54e:	f104 0a1a 	add.w	sl, r4, #26
 800f552:	e7f2      	b.n	800f53a <_printf_float+0x422>
 800f554:	2301      	movs	r3, #1
 800f556:	4642      	mov	r2, r8
 800f558:	e7df      	b.n	800f51a <_printf_float+0x402>
 800f55a:	2301      	movs	r3, #1
 800f55c:	464a      	mov	r2, r9
 800f55e:	4631      	mov	r1, r6
 800f560:	4628      	mov	r0, r5
 800f562:	47b8      	blx	r7
 800f564:	3001      	adds	r0, #1
 800f566:	f43f ae38 	beq.w	800f1da <_printf_float+0xc2>
 800f56a:	f108 0801 	add.w	r8, r8, #1
 800f56e:	68e3      	ldr	r3, [r4, #12]
 800f570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f572:	1a5b      	subs	r3, r3, r1
 800f574:	4543      	cmp	r3, r8
 800f576:	dcf0      	bgt.n	800f55a <_printf_float+0x442>
 800f578:	e6fa      	b.n	800f370 <_printf_float+0x258>
 800f57a:	f04f 0800 	mov.w	r8, #0
 800f57e:	f104 0919 	add.w	r9, r4, #25
 800f582:	e7f4      	b.n	800f56e <_printf_float+0x456>

0800f584 <_printf_common>:
 800f584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f588:	4616      	mov	r6, r2
 800f58a:	4699      	mov	r9, r3
 800f58c:	688a      	ldr	r2, [r1, #8]
 800f58e:	690b      	ldr	r3, [r1, #16]
 800f590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f594:	4293      	cmp	r3, r2
 800f596:	bfb8      	it	lt
 800f598:	4613      	movlt	r3, r2
 800f59a:	6033      	str	r3, [r6, #0]
 800f59c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5a0:	4607      	mov	r7, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	b10a      	cbz	r2, 800f5aa <_printf_common+0x26>
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	6033      	str	r3, [r6, #0]
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	0699      	lsls	r1, r3, #26
 800f5ae:	bf42      	ittt	mi
 800f5b0:	6833      	ldrmi	r3, [r6, #0]
 800f5b2:	3302      	addmi	r3, #2
 800f5b4:	6033      	strmi	r3, [r6, #0]
 800f5b6:	6825      	ldr	r5, [r4, #0]
 800f5b8:	f015 0506 	ands.w	r5, r5, #6
 800f5bc:	d106      	bne.n	800f5cc <_printf_common+0x48>
 800f5be:	f104 0a19 	add.w	sl, r4, #25
 800f5c2:	68e3      	ldr	r3, [r4, #12]
 800f5c4:	6832      	ldr	r2, [r6, #0]
 800f5c6:	1a9b      	subs	r3, r3, r2
 800f5c8:	42ab      	cmp	r3, r5
 800f5ca:	dc26      	bgt.n	800f61a <_printf_common+0x96>
 800f5cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5d0:	1e13      	subs	r3, r2, #0
 800f5d2:	6822      	ldr	r2, [r4, #0]
 800f5d4:	bf18      	it	ne
 800f5d6:	2301      	movne	r3, #1
 800f5d8:	0692      	lsls	r2, r2, #26
 800f5da:	d42b      	bmi.n	800f634 <_printf_common+0xb0>
 800f5dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5e0:	4649      	mov	r1, r9
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	47c0      	blx	r8
 800f5e6:	3001      	adds	r0, #1
 800f5e8:	d01e      	beq.n	800f628 <_printf_common+0xa4>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	68e5      	ldr	r5, [r4, #12]
 800f5ee:	6832      	ldr	r2, [r6, #0]
 800f5f0:	f003 0306 	and.w	r3, r3, #6
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	bf08      	it	eq
 800f5f8:	1aad      	subeq	r5, r5, r2
 800f5fa:	68a3      	ldr	r3, [r4, #8]
 800f5fc:	6922      	ldr	r2, [r4, #16]
 800f5fe:	bf0c      	ite	eq
 800f600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f604:	2500      	movne	r5, #0
 800f606:	4293      	cmp	r3, r2
 800f608:	bfc4      	itt	gt
 800f60a:	1a9b      	subgt	r3, r3, r2
 800f60c:	18ed      	addgt	r5, r5, r3
 800f60e:	2600      	movs	r6, #0
 800f610:	341a      	adds	r4, #26
 800f612:	42b5      	cmp	r5, r6
 800f614:	d11a      	bne.n	800f64c <_printf_common+0xc8>
 800f616:	2000      	movs	r0, #0
 800f618:	e008      	b.n	800f62c <_printf_common+0xa8>
 800f61a:	2301      	movs	r3, #1
 800f61c:	4652      	mov	r2, sl
 800f61e:	4649      	mov	r1, r9
 800f620:	4638      	mov	r0, r7
 800f622:	47c0      	blx	r8
 800f624:	3001      	adds	r0, #1
 800f626:	d103      	bne.n	800f630 <_printf_common+0xac>
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f630:	3501      	adds	r5, #1
 800f632:	e7c6      	b.n	800f5c2 <_printf_common+0x3e>
 800f634:	18e1      	adds	r1, r4, r3
 800f636:	1c5a      	adds	r2, r3, #1
 800f638:	2030      	movs	r0, #48	; 0x30
 800f63a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f63e:	4422      	add	r2, r4
 800f640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f648:	3302      	adds	r3, #2
 800f64a:	e7c7      	b.n	800f5dc <_printf_common+0x58>
 800f64c:	2301      	movs	r3, #1
 800f64e:	4622      	mov	r2, r4
 800f650:	4649      	mov	r1, r9
 800f652:	4638      	mov	r0, r7
 800f654:	47c0      	blx	r8
 800f656:	3001      	adds	r0, #1
 800f658:	d0e6      	beq.n	800f628 <_printf_common+0xa4>
 800f65a:	3601      	adds	r6, #1
 800f65c:	e7d9      	b.n	800f612 <_printf_common+0x8e>
	...

0800f660 <_printf_i>:
 800f660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f664:	7e0f      	ldrb	r7, [r1, #24]
 800f666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f668:	2f78      	cmp	r7, #120	; 0x78
 800f66a:	4691      	mov	r9, r2
 800f66c:	4680      	mov	r8, r0
 800f66e:	460c      	mov	r4, r1
 800f670:	469a      	mov	sl, r3
 800f672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f676:	d807      	bhi.n	800f688 <_printf_i+0x28>
 800f678:	2f62      	cmp	r7, #98	; 0x62
 800f67a:	d80a      	bhi.n	800f692 <_printf_i+0x32>
 800f67c:	2f00      	cmp	r7, #0
 800f67e:	f000 80d8 	beq.w	800f832 <_printf_i+0x1d2>
 800f682:	2f58      	cmp	r7, #88	; 0x58
 800f684:	f000 80a3 	beq.w	800f7ce <_printf_i+0x16e>
 800f688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f68c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f690:	e03a      	b.n	800f708 <_printf_i+0xa8>
 800f692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f696:	2b15      	cmp	r3, #21
 800f698:	d8f6      	bhi.n	800f688 <_printf_i+0x28>
 800f69a:	a101      	add	r1, pc, #4	; (adr r1, 800f6a0 <_printf_i+0x40>)
 800f69c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6a0:	0800f6f9 	.word	0x0800f6f9
 800f6a4:	0800f70d 	.word	0x0800f70d
 800f6a8:	0800f689 	.word	0x0800f689
 800f6ac:	0800f689 	.word	0x0800f689
 800f6b0:	0800f689 	.word	0x0800f689
 800f6b4:	0800f689 	.word	0x0800f689
 800f6b8:	0800f70d 	.word	0x0800f70d
 800f6bc:	0800f689 	.word	0x0800f689
 800f6c0:	0800f689 	.word	0x0800f689
 800f6c4:	0800f689 	.word	0x0800f689
 800f6c8:	0800f689 	.word	0x0800f689
 800f6cc:	0800f819 	.word	0x0800f819
 800f6d0:	0800f73d 	.word	0x0800f73d
 800f6d4:	0800f7fb 	.word	0x0800f7fb
 800f6d8:	0800f689 	.word	0x0800f689
 800f6dc:	0800f689 	.word	0x0800f689
 800f6e0:	0800f83b 	.word	0x0800f83b
 800f6e4:	0800f689 	.word	0x0800f689
 800f6e8:	0800f73d 	.word	0x0800f73d
 800f6ec:	0800f689 	.word	0x0800f689
 800f6f0:	0800f689 	.word	0x0800f689
 800f6f4:	0800f803 	.word	0x0800f803
 800f6f8:	682b      	ldr	r3, [r5, #0]
 800f6fa:	1d1a      	adds	r2, r3, #4
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	602a      	str	r2, [r5, #0]
 800f700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f708:	2301      	movs	r3, #1
 800f70a:	e0a3      	b.n	800f854 <_printf_i+0x1f4>
 800f70c:	6820      	ldr	r0, [r4, #0]
 800f70e:	6829      	ldr	r1, [r5, #0]
 800f710:	0606      	lsls	r6, r0, #24
 800f712:	f101 0304 	add.w	r3, r1, #4
 800f716:	d50a      	bpl.n	800f72e <_printf_i+0xce>
 800f718:	680e      	ldr	r6, [r1, #0]
 800f71a:	602b      	str	r3, [r5, #0]
 800f71c:	2e00      	cmp	r6, #0
 800f71e:	da03      	bge.n	800f728 <_printf_i+0xc8>
 800f720:	232d      	movs	r3, #45	; 0x2d
 800f722:	4276      	negs	r6, r6
 800f724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f728:	485e      	ldr	r0, [pc, #376]	; (800f8a4 <_printf_i+0x244>)
 800f72a:	230a      	movs	r3, #10
 800f72c:	e019      	b.n	800f762 <_printf_i+0x102>
 800f72e:	680e      	ldr	r6, [r1, #0]
 800f730:	602b      	str	r3, [r5, #0]
 800f732:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f736:	bf18      	it	ne
 800f738:	b236      	sxthne	r6, r6
 800f73a:	e7ef      	b.n	800f71c <_printf_i+0xbc>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	6820      	ldr	r0, [r4, #0]
 800f740:	1d19      	adds	r1, r3, #4
 800f742:	6029      	str	r1, [r5, #0]
 800f744:	0601      	lsls	r1, r0, #24
 800f746:	d501      	bpl.n	800f74c <_printf_i+0xec>
 800f748:	681e      	ldr	r6, [r3, #0]
 800f74a:	e002      	b.n	800f752 <_printf_i+0xf2>
 800f74c:	0646      	lsls	r6, r0, #25
 800f74e:	d5fb      	bpl.n	800f748 <_printf_i+0xe8>
 800f750:	881e      	ldrh	r6, [r3, #0]
 800f752:	4854      	ldr	r0, [pc, #336]	; (800f8a4 <_printf_i+0x244>)
 800f754:	2f6f      	cmp	r7, #111	; 0x6f
 800f756:	bf0c      	ite	eq
 800f758:	2308      	moveq	r3, #8
 800f75a:	230a      	movne	r3, #10
 800f75c:	2100      	movs	r1, #0
 800f75e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f762:	6865      	ldr	r5, [r4, #4]
 800f764:	60a5      	str	r5, [r4, #8]
 800f766:	2d00      	cmp	r5, #0
 800f768:	bfa2      	ittt	ge
 800f76a:	6821      	ldrge	r1, [r4, #0]
 800f76c:	f021 0104 	bicge.w	r1, r1, #4
 800f770:	6021      	strge	r1, [r4, #0]
 800f772:	b90e      	cbnz	r6, 800f778 <_printf_i+0x118>
 800f774:	2d00      	cmp	r5, #0
 800f776:	d04d      	beq.n	800f814 <_printf_i+0x1b4>
 800f778:	4615      	mov	r5, r2
 800f77a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f77e:	fb03 6711 	mls	r7, r3, r1, r6
 800f782:	5dc7      	ldrb	r7, [r0, r7]
 800f784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f788:	4637      	mov	r7, r6
 800f78a:	42bb      	cmp	r3, r7
 800f78c:	460e      	mov	r6, r1
 800f78e:	d9f4      	bls.n	800f77a <_printf_i+0x11a>
 800f790:	2b08      	cmp	r3, #8
 800f792:	d10b      	bne.n	800f7ac <_printf_i+0x14c>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	07de      	lsls	r6, r3, #31
 800f798:	d508      	bpl.n	800f7ac <_printf_i+0x14c>
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	6861      	ldr	r1, [r4, #4]
 800f79e:	4299      	cmp	r1, r3
 800f7a0:	bfde      	ittt	le
 800f7a2:	2330      	movle	r3, #48	; 0x30
 800f7a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7ac:	1b52      	subs	r2, r2, r5
 800f7ae:	6122      	str	r2, [r4, #16]
 800f7b0:	f8cd a000 	str.w	sl, [sp]
 800f7b4:	464b      	mov	r3, r9
 800f7b6:	aa03      	add	r2, sp, #12
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	f7ff fee2 	bl	800f584 <_printf_common>
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	d14c      	bne.n	800f85e <_printf_i+0x1fe>
 800f7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c8:	b004      	add	sp, #16
 800f7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ce:	4835      	ldr	r0, [pc, #212]	; (800f8a4 <_printf_i+0x244>)
 800f7d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7d4:	6829      	ldr	r1, [r5, #0]
 800f7d6:	6823      	ldr	r3, [r4, #0]
 800f7d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7dc:	6029      	str	r1, [r5, #0]
 800f7de:	061d      	lsls	r5, r3, #24
 800f7e0:	d514      	bpl.n	800f80c <_printf_i+0x1ac>
 800f7e2:	07df      	lsls	r7, r3, #31
 800f7e4:	bf44      	itt	mi
 800f7e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f7ea:	6023      	strmi	r3, [r4, #0]
 800f7ec:	b91e      	cbnz	r6, 800f7f6 <_printf_i+0x196>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	f023 0320 	bic.w	r3, r3, #32
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	2310      	movs	r3, #16
 800f7f8:	e7b0      	b.n	800f75c <_printf_i+0xfc>
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f043 0320 	orr.w	r3, r3, #32
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	2378      	movs	r3, #120	; 0x78
 800f804:	4828      	ldr	r0, [pc, #160]	; (800f8a8 <_printf_i+0x248>)
 800f806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f80a:	e7e3      	b.n	800f7d4 <_printf_i+0x174>
 800f80c:	0659      	lsls	r1, r3, #25
 800f80e:	bf48      	it	mi
 800f810:	b2b6      	uxthmi	r6, r6
 800f812:	e7e6      	b.n	800f7e2 <_printf_i+0x182>
 800f814:	4615      	mov	r5, r2
 800f816:	e7bb      	b.n	800f790 <_printf_i+0x130>
 800f818:	682b      	ldr	r3, [r5, #0]
 800f81a:	6826      	ldr	r6, [r4, #0]
 800f81c:	6961      	ldr	r1, [r4, #20]
 800f81e:	1d18      	adds	r0, r3, #4
 800f820:	6028      	str	r0, [r5, #0]
 800f822:	0635      	lsls	r5, r6, #24
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	d501      	bpl.n	800f82c <_printf_i+0x1cc>
 800f828:	6019      	str	r1, [r3, #0]
 800f82a:	e002      	b.n	800f832 <_printf_i+0x1d2>
 800f82c:	0670      	lsls	r0, r6, #25
 800f82e:	d5fb      	bpl.n	800f828 <_printf_i+0x1c8>
 800f830:	8019      	strh	r1, [r3, #0]
 800f832:	2300      	movs	r3, #0
 800f834:	6123      	str	r3, [r4, #16]
 800f836:	4615      	mov	r5, r2
 800f838:	e7ba      	b.n	800f7b0 <_printf_i+0x150>
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	1d1a      	adds	r2, r3, #4
 800f83e:	602a      	str	r2, [r5, #0]
 800f840:	681d      	ldr	r5, [r3, #0]
 800f842:	6862      	ldr	r2, [r4, #4]
 800f844:	2100      	movs	r1, #0
 800f846:	4628      	mov	r0, r5
 800f848:	f7f0 fcea 	bl	8000220 <memchr>
 800f84c:	b108      	cbz	r0, 800f852 <_printf_i+0x1f2>
 800f84e:	1b40      	subs	r0, r0, r5
 800f850:	6060      	str	r0, [r4, #4]
 800f852:	6863      	ldr	r3, [r4, #4]
 800f854:	6123      	str	r3, [r4, #16]
 800f856:	2300      	movs	r3, #0
 800f858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f85c:	e7a8      	b.n	800f7b0 <_printf_i+0x150>
 800f85e:	6923      	ldr	r3, [r4, #16]
 800f860:	462a      	mov	r2, r5
 800f862:	4649      	mov	r1, r9
 800f864:	4640      	mov	r0, r8
 800f866:	47d0      	blx	sl
 800f868:	3001      	adds	r0, #1
 800f86a:	d0ab      	beq.n	800f7c4 <_printf_i+0x164>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	079b      	lsls	r3, r3, #30
 800f870:	d413      	bmi.n	800f89a <_printf_i+0x23a>
 800f872:	68e0      	ldr	r0, [r4, #12]
 800f874:	9b03      	ldr	r3, [sp, #12]
 800f876:	4298      	cmp	r0, r3
 800f878:	bfb8      	it	lt
 800f87a:	4618      	movlt	r0, r3
 800f87c:	e7a4      	b.n	800f7c8 <_printf_i+0x168>
 800f87e:	2301      	movs	r3, #1
 800f880:	4632      	mov	r2, r6
 800f882:	4649      	mov	r1, r9
 800f884:	4640      	mov	r0, r8
 800f886:	47d0      	blx	sl
 800f888:	3001      	adds	r0, #1
 800f88a:	d09b      	beq.n	800f7c4 <_printf_i+0x164>
 800f88c:	3501      	adds	r5, #1
 800f88e:	68e3      	ldr	r3, [r4, #12]
 800f890:	9903      	ldr	r1, [sp, #12]
 800f892:	1a5b      	subs	r3, r3, r1
 800f894:	42ab      	cmp	r3, r5
 800f896:	dcf2      	bgt.n	800f87e <_printf_i+0x21e>
 800f898:	e7eb      	b.n	800f872 <_printf_i+0x212>
 800f89a:	2500      	movs	r5, #0
 800f89c:	f104 0619 	add.w	r6, r4, #25
 800f8a0:	e7f5      	b.n	800f88e <_printf_i+0x22e>
 800f8a2:	bf00      	nop
 800f8a4:	080148e2 	.word	0x080148e2
 800f8a8:	080148f3 	.word	0x080148f3

0800f8ac <_scanf_float>:
 800f8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b0:	b087      	sub	sp, #28
 800f8b2:	4617      	mov	r7, r2
 800f8b4:	9303      	str	r3, [sp, #12]
 800f8b6:	688b      	ldr	r3, [r1, #8]
 800f8b8:	1e5a      	subs	r2, r3, #1
 800f8ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f8be:	bf83      	ittte	hi
 800f8c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f8c4:	195b      	addhi	r3, r3, r5
 800f8c6:	9302      	strhi	r3, [sp, #8]
 800f8c8:	2300      	movls	r3, #0
 800f8ca:	bf86      	itte	hi
 800f8cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f8d0:	608b      	strhi	r3, [r1, #8]
 800f8d2:	9302      	strls	r3, [sp, #8]
 800f8d4:	680b      	ldr	r3, [r1, #0]
 800f8d6:	468b      	mov	fp, r1
 800f8d8:	2500      	movs	r5, #0
 800f8da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f8de:	f84b 3b1c 	str.w	r3, [fp], #28
 800f8e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f8e6:	4680      	mov	r8, r0
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	465e      	mov	r6, fp
 800f8ec:	46aa      	mov	sl, r5
 800f8ee:	46a9      	mov	r9, r5
 800f8f0:	9501      	str	r5, [sp, #4]
 800f8f2:	68a2      	ldr	r2, [r4, #8]
 800f8f4:	b152      	cbz	r2, 800f90c <_scanf_float+0x60>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2b4e      	cmp	r3, #78	; 0x4e
 800f8fc:	d864      	bhi.n	800f9c8 <_scanf_float+0x11c>
 800f8fe:	2b40      	cmp	r3, #64	; 0x40
 800f900:	d83c      	bhi.n	800f97c <_scanf_float+0xd0>
 800f902:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f906:	b2c8      	uxtb	r0, r1
 800f908:	280e      	cmp	r0, #14
 800f90a:	d93a      	bls.n	800f982 <_scanf_float+0xd6>
 800f90c:	f1b9 0f00 	cmp.w	r9, #0
 800f910:	d003      	beq.n	800f91a <_scanf_float+0x6e>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f918:	6023      	str	r3, [r4, #0]
 800f91a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f91e:	f1ba 0f01 	cmp.w	sl, #1
 800f922:	f200 8113 	bhi.w	800fb4c <_scanf_float+0x2a0>
 800f926:	455e      	cmp	r6, fp
 800f928:	f200 8105 	bhi.w	800fb36 <_scanf_float+0x28a>
 800f92c:	2501      	movs	r5, #1
 800f92e:	4628      	mov	r0, r5
 800f930:	b007      	add	sp, #28
 800f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f936:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f93a:	2a0d      	cmp	r2, #13
 800f93c:	d8e6      	bhi.n	800f90c <_scanf_float+0x60>
 800f93e:	a101      	add	r1, pc, #4	; (adr r1, 800f944 <_scanf_float+0x98>)
 800f940:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f944:	0800fa83 	.word	0x0800fa83
 800f948:	0800f90d 	.word	0x0800f90d
 800f94c:	0800f90d 	.word	0x0800f90d
 800f950:	0800f90d 	.word	0x0800f90d
 800f954:	0800fae3 	.word	0x0800fae3
 800f958:	0800fabb 	.word	0x0800fabb
 800f95c:	0800f90d 	.word	0x0800f90d
 800f960:	0800f90d 	.word	0x0800f90d
 800f964:	0800fa91 	.word	0x0800fa91
 800f968:	0800f90d 	.word	0x0800f90d
 800f96c:	0800f90d 	.word	0x0800f90d
 800f970:	0800f90d 	.word	0x0800f90d
 800f974:	0800f90d 	.word	0x0800f90d
 800f978:	0800fa49 	.word	0x0800fa49
 800f97c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f980:	e7db      	b.n	800f93a <_scanf_float+0x8e>
 800f982:	290e      	cmp	r1, #14
 800f984:	d8c2      	bhi.n	800f90c <_scanf_float+0x60>
 800f986:	a001      	add	r0, pc, #4	; (adr r0, 800f98c <_scanf_float+0xe0>)
 800f988:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f98c:	0800fa3b 	.word	0x0800fa3b
 800f990:	0800f90d 	.word	0x0800f90d
 800f994:	0800fa3b 	.word	0x0800fa3b
 800f998:	0800facf 	.word	0x0800facf
 800f99c:	0800f90d 	.word	0x0800f90d
 800f9a0:	0800f9e9 	.word	0x0800f9e9
 800f9a4:	0800fa25 	.word	0x0800fa25
 800f9a8:	0800fa25 	.word	0x0800fa25
 800f9ac:	0800fa25 	.word	0x0800fa25
 800f9b0:	0800fa25 	.word	0x0800fa25
 800f9b4:	0800fa25 	.word	0x0800fa25
 800f9b8:	0800fa25 	.word	0x0800fa25
 800f9bc:	0800fa25 	.word	0x0800fa25
 800f9c0:	0800fa25 	.word	0x0800fa25
 800f9c4:	0800fa25 	.word	0x0800fa25
 800f9c8:	2b6e      	cmp	r3, #110	; 0x6e
 800f9ca:	d809      	bhi.n	800f9e0 <_scanf_float+0x134>
 800f9cc:	2b60      	cmp	r3, #96	; 0x60
 800f9ce:	d8b2      	bhi.n	800f936 <_scanf_float+0x8a>
 800f9d0:	2b54      	cmp	r3, #84	; 0x54
 800f9d2:	d077      	beq.n	800fac4 <_scanf_float+0x218>
 800f9d4:	2b59      	cmp	r3, #89	; 0x59
 800f9d6:	d199      	bne.n	800f90c <_scanf_float+0x60>
 800f9d8:	2d07      	cmp	r5, #7
 800f9da:	d197      	bne.n	800f90c <_scanf_float+0x60>
 800f9dc:	2508      	movs	r5, #8
 800f9de:	e029      	b.n	800fa34 <_scanf_float+0x188>
 800f9e0:	2b74      	cmp	r3, #116	; 0x74
 800f9e2:	d06f      	beq.n	800fac4 <_scanf_float+0x218>
 800f9e4:	2b79      	cmp	r3, #121	; 0x79
 800f9e6:	e7f6      	b.n	800f9d6 <_scanf_float+0x12a>
 800f9e8:	6821      	ldr	r1, [r4, #0]
 800f9ea:	05c8      	lsls	r0, r1, #23
 800f9ec:	d51a      	bpl.n	800fa24 <_scanf_float+0x178>
 800f9ee:	9b02      	ldr	r3, [sp, #8]
 800f9f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f9f4:	6021      	str	r1, [r4, #0]
 800f9f6:	f109 0901 	add.w	r9, r9, #1
 800f9fa:	b11b      	cbz	r3, 800fa04 <_scanf_float+0x158>
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	3201      	adds	r2, #1
 800fa00:	9302      	str	r3, [sp, #8]
 800fa02:	60a2      	str	r2, [r4, #8]
 800fa04:	68a3      	ldr	r3, [r4, #8]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	60a3      	str	r3, [r4, #8]
 800fa0a:	6923      	ldr	r3, [r4, #16]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	6123      	str	r3, [r4, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	3b01      	subs	r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	607b      	str	r3, [r7, #4]
 800fa18:	f340 8084 	ble.w	800fb24 <_scanf_float+0x278>
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	603b      	str	r3, [r7, #0]
 800fa22:	e766      	b.n	800f8f2 <_scanf_float+0x46>
 800fa24:	eb1a 0f05 	cmn.w	sl, r5
 800fa28:	f47f af70 	bne.w	800f90c <_scanf_float+0x60>
 800fa2c:	6822      	ldr	r2, [r4, #0]
 800fa2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa32:	6022      	str	r2, [r4, #0]
 800fa34:	f806 3b01 	strb.w	r3, [r6], #1
 800fa38:	e7e4      	b.n	800fa04 <_scanf_float+0x158>
 800fa3a:	6822      	ldr	r2, [r4, #0]
 800fa3c:	0610      	lsls	r0, r2, #24
 800fa3e:	f57f af65 	bpl.w	800f90c <_scanf_float+0x60>
 800fa42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa46:	e7f4      	b.n	800fa32 <_scanf_float+0x186>
 800fa48:	f1ba 0f00 	cmp.w	sl, #0
 800fa4c:	d10e      	bne.n	800fa6c <_scanf_float+0x1c0>
 800fa4e:	f1b9 0f00 	cmp.w	r9, #0
 800fa52:	d10e      	bne.n	800fa72 <_scanf_float+0x1c6>
 800fa54:	6822      	ldr	r2, [r4, #0]
 800fa56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa5e:	d108      	bne.n	800fa72 <_scanf_float+0x1c6>
 800fa60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa64:	6022      	str	r2, [r4, #0]
 800fa66:	f04f 0a01 	mov.w	sl, #1
 800fa6a:	e7e3      	b.n	800fa34 <_scanf_float+0x188>
 800fa6c:	f1ba 0f02 	cmp.w	sl, #2
 800fa70:	d055      	beq.n	800fb1e <_scanf_float+0x272>
 800fa72:	2d01      	cmp	r5, #1
 800fa74:	d002      	beq.n	800fa7c <_scanf_float+0x1d0>
 800fa76:	2d04      	cmp	r5, #4
 800fa78:	f47f af48 	bne.w	800f90c <_scanf_float+0x60>
 800fa7c:	3501      	adds	r5, #1
 800fa7e:	b2ed      	uxtb	r5, r5
 800fa80:	e7d8      	b.n	800fa34 <_scanf_float+0x188>
 800fa82:	f1ba 0f01 	cmp.w	sl, #1
 800fa86:	f47f af41 	bne.w	800f90c <_scanf_float+0x60>
 800fa8a:	f04f 0a02 	mov.w	sl, #2
 800fa8e:	e7d1      	b.n	800fa34 <_scanf_float+0x188>
 800fa90:	b97d      	cbnz	r5, 800fab2 <_scanf_float+0x206>
 800fa92:	f1b9 0f00 	cmp.w	r9, #0
 800fa96:	f47f af3c 	bne.w	800f912 <_scanf_float+0x66>
 800fa9a:	6822      	ldr	r2, [r4, #0]
 800fa9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800faa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800faa4:	f47f af39 	bne.w	800f91a <_scanf_float+0x6e>
 800faa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800faac:	6022      	str	r2, [r4, #0]
 800faae:	2501      	movs	r5, #1
 800fab0:	e7c0      	b.n	800fa34 <_scanf_float+0x188>
 800fab2:	2d03      	cmp	r5, #3
 800fab4:	d0e2      	beq.n	800fa7c <_scanf_float+0x1d0>
 800fab6:	2d05      	cmp	r5, #5
 800fab8:	e7de      	b.n	800fa78 <_scanf_float+0x1cc>
 800faba:	2d02      	cmp	r5, #2
 800fabc:	f47f af26 	bne.w	800f90c <_scanf_float+0x60>
 800fac0:	2503      	movs	r5, #3
 800fac2:	e7b7      	b.n	800fa34 <_scanf_float+0x188>
 800fac4:	2d06      	cmp	r5, #6
 800fac6:	f47f af21 	bne.w	800f90c <_scanf_float+0x60>
 800faca:	2507      	movs	r5, #7
 800facc:	e7b2      	b.n	800fa34 <_scanf_float+0x188>
 800face:	6822      	ldr	r2, [r4, #0]
 800fad0:	0591      	lsls	r1, r2, #22
 800fad2:	f57f af1b 	bpl.w	800f90c <_scanf_float+0x60>
 800fad6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fada:	6022      	str	r2, [r4, #0]
 800fadc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fae0:	e7a8      	b.n	800fa34 <_scanf_float+0x188>
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fae8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800faec:	d006      	beq.n	800fafc <_scanf_float+0x250>
 800faee:	0550      	lsls	r0, r2, #21
 800faf0:	f57f af0c 	bpl.w	800f90c <_scanf_float+0x60>
 800faf4:	f1b9 0f00 	cmp.w	r9, #0
 800faf8:	f43f af0f 	beq.w	800f91a <_scanf_float+0x6e>
 800fafc:	0591      	lsls	r1, r2, #22
 800fafe:	bf58      	it	pl
 800fb00:	9901      	ldrpl	r1, [sp, #4]
 800fb02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb06:	bf58      	it	pl
 800fb08:	eba9 0101 	subpl.w	r1, r9, r1
 800fb0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb10:	bf58      	it	pl
 800fb12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb16:	6022      	str	r2, [r4, #0]
 800fb18:	f04f 0900 	mov.w	r9, #0
 800fb1c:	e78a      	b.n	800fa34 <_scanf_float+0x188>
 800fb1e:	f04f 0a03 	mov.w	sl, #3
 800fb22:	e787      	b.n	800fa34 <_scanf_float+0x188>
 800fb24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb28:	4639      	mov	r1, r7
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	4798      	blx	r3
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f aedf 	beq.w	800f8f2 <_scanf_float+0x46>
 800fb34:	e6ea      	b.n	800f90c <_scanf_float+0x60>
 800fb36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb3e:	463a      	mov	r2, r7
 800fb40:	4640      	mov	r0, r8
 800fb42:	4798      	blx	r3
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	3b01      	subs	r3, #1
 800fb48:	6123      	str	r3, [r4, #16]
 800fb4a:	e6ec      	b.n	800f926 <_scanf_float+0x7a>
 800fb4c:	1e6b      	subs	r3, r5, #1
 800fb4e:	2b06      	cmp	r3, #6
 800fb50:	d825      	bhi.n	800fb9e <_scanf_float+0x2f2>
 800fb52:	2d02      	cmp	r5, #2
 800fb54:	d836      	bhi.n	800fbc4 <_scanf_float+0x318>
 800fb56:	455e      	cmp	r6, fp
 800fb58:	f67f aee8 	bls.w	800f92c <_scanf_float+0x80>
 800fb5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb64:	463a      	mov	r2, r7
 800fb66:	4640      	mov	r0, r8
 800fb68:	4798      	blx	r3
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	6123      	str	r3, [r4, #16]
 800fb70:	e7f1      	b.n	800fb56 <_scanf_float+0x2aa>
 800fb72:	9802      	ldr	r0, [sp, #8]
 800fb74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fb7c:	9002      	str	r0, [sp, #8]
 800fb7e:	463a      	mov	r2, r7
 800fb80:	4640      	mov	r0, r8
 800fb82:	4798      	blx	r3
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	3b01      	subs	r3, #1
 800fb88:	6123      	str	r3, [r4, #16]
 800fb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb8e:	fa5f fa8a 	uxtb.w	sl, sl
 800fb92:	f1ba 0f02 	cmp.w	sl, #2
 800fb96:	d1ec      	bne.n	800fb72 <_scanf_float+0x2c6>
 800fb98:	3d03      	subs	r5, #3
 800fb9a:	b2ed      	uxtb	r5, r5
 800fb9c:	1b76      	subs	r6, r6, r5
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	05da      	lsls	r2, r3, #23
 800fba2:	d52f      	bpl.n	800fc04 <_scanf_float+0x358>
 800fba4:	055b      	lsls	r3, r3, #21
 800fba6:	d510      	bpl.n	800fbca <_scanf_float+0x31e>
 800fba8:	455e      	cmp	r6, fp
 800fbaa:	f67f aebf 	bls.w	800f92c <_scanf_float+0x80>
 800fbae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbb6:	463a      	mov	r2, r7
 800fbb8:	4640      	mov	r0, r8
 800fbba:	4798      	blx	r3
 800fbbc:	6923      	ldr	r3, [r4, #16]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	6123      	str	r3, [r4, #16]
 800fbc2:	e7f1      	b.n	800fba8 <_scanf_float+0x2fc>
 800fbc4:	46aa      	mov	sl, r5
 800fbc6:	9602      	str	r6, [sp, #8]
 800fbc8:	e7df      	b.n	800fb8a <_scanf_float+0x2de>
 800fbca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fbce:	6923      	ldr	r3, [r4, #16]
 800fbd0:	2965      	cmp	r1, #101	; 0x65
 800fbd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbd6:	f106 35ff 	add.w	r5, r6, #4294967295
 800fbda:	6123      	str	r3, [r4, #16]
 800fbdc:	d00c      	beq.n	800fbf8 <_scanf_float+0x34c>
 800fbde:	2945      	cmp	r1, #69	; 0x45
 800fbe0:	d00a      	beq.n	800fbf8 <_scanf_float+0x34c>
 800fbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbe6:	463a      	mov	r2, r7
 800fbe8:	4640      	mov	r0, r8
 800fbea:	4798      	blx	r3
 800fbec:	6923      	ldr	r3, [r4, #16]
 800fbee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	1eb5      	subs	r5, r6, #2
 800fbf6:	6123      	str	r3, [r4, #16]
 800fbf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbfc:	463a      	mov	r2, r7
 800fbfe:	4640      	mov	r0, r8
 800fc00:	4798      	blx	r3
 800fc02:	462e      	mov	r6, r5
 800fc04:	6825      	ldr	r5, [r4, #0]
 800fc06:	f015 0510 	ands.w	r5, r5, #16
 800fc0a:	d159      	bne.n	800fcc0 <_scanf_float+0x414>
 800fc0c:	7035      	strb	r5, [r6, #0]
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc18:	d11b      	bne.n	800fc52 <_scanf_float+0x3a6>
 800fc1a:	9b01      	ldr	r3, [sp, #4]
 800fc1c:	454b      	cmp	r3, r9
 800fc1e:	eba3 0209 	sub.w	r2, r3, r9
 800fc22:	d123      	bne.n	800fc6c <_scanf_float+0x3c0>
 800fc24:	2200      	movs	r2, #0
 800fc26:	4659      	mov	r1, fp
 800fc28:	4640      	mov	r0, r8
 800fc2a:	f001 f81f 	bl	8010c6c <_strtod_r>
 800fc2e:	6822      	ldr	r2, [r4, #0]
 800fc30:	9b03      	ldr	r3, [sp, #12]
 800fc32:	f012 0f02 	tst.w	r2, #2
 800fc36:	ec57 6b10 	vmov	r6, r7, d0
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	d021      	beq.n	800fc82 <_scanf_float+0x3d6>
 800fc3e:	9903      	ldr	r1, [sp, #12]
 800fc40:	1d1a      	adds	r2, r3, #4
 800fc42:	600a      	str	r2, [r1, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	e9c3 6700 	strd	r6, r7, [r3]
 800fc4a:	68e3      	ldr	r3, [r4, #12]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	60e3      	str	r3, [r4, #12]
 800fc50:	e66d      	b.n	800f92e <_scanf_float+0x82>
 800fc52:	9b04      	ldr	r3, [sp, #16]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d0e5      	beq.n	800fc24 <_scanf_float+0x378>
 800fc58:	9905      	ldr	r1, [sp, #20]
 800fc5a:	230a      	movs	r3, #10
 800fc5c:	462a      	mov	r2, r5
 800fc5e:	3101      	adds	r1, #1
 800fc60:	4640      	mov	r0, r8
 800fc62:	f001 f8e7 	bl	8010e34 <_strtol_r>
 800fc66:	9b04      	ldr	r3, [sp, #16]
 800fc68:	9e05      	ldr	r6, [sp, #20]
 800fc6a:	1ac2      	subs	r2, r0, r3
 800fc6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fc70:	429e      	cmp	r6, r3
 800fc72:	bf28      	it	cs
 800fc74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fc78:	4912      	ldr	r1, [pc, #72]	; (800fcc4 <_scanf_float+0x418>)
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f000 f9b4 	bl	800ffe8 <siprintf>
 800fc80:	e7d0      	b.n	800fc24 <_scanf_float+0x378>
 800fc82:	9903      	ldr	r1, [sp, #12]
 800fc84:	f012 0f04 	tst.w	r2, #4
 800fc88:	f103 0204 	add.w	r2, r3, #4
 800fc8c:	600a      	str	r2, [r1, #0]
 800fc8e:	d1d9      	bne.n	800fc44 <_scanf_float+0x398>
 800fc90:	f8d3 8000 	ldr.w	r8, [r3]
 800fc94:	ee10 2a10 	vmov	r2, s0
 800fc98:	ee10 0a10 	vmov	r0, s0
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	4639      	mov	r1, r7
 800fca0:	f7f0 ff64 	bl	8000b6c <__aeabi_dcmpun>
 800fca4:	b128      	cbz	r0, 800fcb2 <_scanf_float+0x406>
 800fca6:	4808      	ldr	r0, [pc, #32]	; (800fcc8 <_scanf_float+0x41c>)
 800fca8:	f000 f998 	bl	800ffdc <nanf>
 800fcac:	ed88 0a00 	vstr	s0, [r8]
 800fcb0:	e7cb      	b.n	800fc4a <_scanf_float+0x39e>
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	f7f0 ffb7 	bl	8000c28 <__aeabi_d2f>
 800fcba:	f8c8 0000 	str.w	r0, [r8]
 800fcbe:	e7c4      	b.n	800fc4a <_scanf_float+0x39e>
 800fcc0:	2500      	movs	r5, #0
 800fcc2:	e634      	b.n	800f92e <_scanf_float+0x82>
 800fcc4:	08014904 	.word	0x08014904
 800fcc8:	08014a0f 	.word	0x08014a0f

0800fccc <swapfunc>:
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	b510      	push	{r4, lr}
 800fcd0:	d00a      	beq.n	800fce8 <swapfunc+0x1c>
 800fcd2:	0892      	lsrs	r2, r2, #2
 800fcd4:	3a01      	subs	r2, #1
 800fcd6:	6803      	ldr	r3, [r0, #0]
 800fcd8:	680c      	ldr	r4, [r1, #0]
 800fcda:	f840 4b04 	str.w	r4, [r0], #4
 800fcde:	2a00      	cmp	r2, #0
 800fce0:	f841 3b04 	str.w	r3, [r1], #4
 800fce4:	dcf6      	bgt.n	800fcd4 <swapfunc+0x8>
 800fce6:	bd10      	pop	{r4, pc}
 800fce8:	4402      	add	r2, r0
 800fcea:	780c      	ldrb	r4, [r1, #0]
 800fcec:	7803      	ldrb	r3, [r0, #0]
 800fcee:	f800 4b01 	strb.w	r4, [r0], #1
 800fcf2:	f801 3b01 	strb.w	r3, [r1], #1
 800fcf6:	1a13      	subs	r3, r2, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	dcf6      	bgt.n	800fcea <swapfunc+0x1e>
 800fcfc:	e7f3      	b.n	800fce6 <swapfunc+0x1a>

0800fcfe <med3.constprop.0>:
 800fcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd00:	460c      	mov	r4, r1
 800fd02:	4615      	mov	r5, r2
 800fd04:	4607      	mov	r7, r0
 800fd06:	461e      	mov	r6, r3
 800fd08:	4798      	blx	r3
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	4620      	mov	r0, r4
 800fd10:	da0a      	bge.n	800fd28 <med3.constprop.0+0x2a>
 800fd12:	47b0      	blx	r6
 800fd14:	2800      	cmp	r0, #0
 800fd16:	db05      	blt.n	800fd24 <med3.constprop.0+0x26>
 800fd18:	4629      	mov	r1, r5
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	47b0      	blx	r6
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	db0a      	blt.n	800fd38 <med3.constprop.0+0x3a>
 800fd22:	463c      	mov	r4, r7
 800fd24:	4620      	mov	r0, r4
 800fd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd28:	47b0      	blx	r6
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	dcfa      	bgt.n	800fd24 <med3.constprop.0+0x26>
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4638      	mov	r0, r7
 800fd32:	47b0      	blx	r6
 800fd34:	2800      	cmp	r0, #0
 800fd36:	dbf4      	blt.n	800fd22 <med3.constprop.0+0x24>
 800fd38:	462c      	mov	r4, r5
 800fd3a:	e7f3      	b.n	800fd24 <med3.constprop.0+0x26>

0800fd3c <qsort>:
 800fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd40:	469a      	mov	sl, r3
 800fd42:	ea40 0302 	orr.w	r3, r0, r2
 800fd46:	079b      	lsls	r3, r3, #30
 800fd48:	b097      	sub	sp, #92	; 0x5c
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	4614      	mov	r4, r2
 800fd4e:	d11a      	bne.n	800fd86 <qsort+0x4a>
 800fd50:	f1b2 0804 	subs.w	r8, r2, #4
 800fd54:	bf18      	it	ne
 800fd56:	f04f 0801 	movne.w	r8, #1
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9302      	str	r3, [sp, #8]
 800fd5e:	1933      	adds	r3, r6, r4
 800fd60:	fb04 f701 	mul.w	r7, r4, r1
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	2906      	cmp	r1, #6
 800fd68:	eb06 0307 	add.w	r3, r6, r7
 800fd6c:	9303      	str	r3, [sp, #12]
 800fd6e:	d82a      	bhi.n	800fdc6 <qsort+0x8a>
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	9a03      	ldr	r2, [sp, #12]
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d310      	bcc.n	800fd9a <qsort+0x5e>
 800fd78:	9b02      	ldr	r3, [sp, #8]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f040 811e 	bne.w	800ffbc <qsort+0x280>
 800fd80:	b017      	add	sp, #92	; 0x5c
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	f04f 0802 	mov.w	r8, #2
 800fd8a:	e7e6      	b.n	800fd5a <qsort+0x1e>
 800fd8c:	4643      	mov	r3, r8
 800fd8e:	4622      	mov	r2, r4
 800fd90:	4639      	mov	r1, r7
 800fd92:	4628      	mov	r0, r5
 800fd94:	f7ff ff9a 	bl	800fccc <swapfunc>
 800fd98:	e00e      	b.n	800fdb8 <qsort+0x7c>
 800fd9a:	9d01      	ldr	r5, [sp, #4]
 800fd9c:	e00d      	b.n	800fdba <qsort+0x7e>
 800fd9e:	1b2f      	subs	r7, r5, r4
 800fda0:	4629      	mov	r1, r5
 800fda2:	4638      	mov	r0, r7
 800fda4:	47d0      	blx	sl
 800fda6:	2800      	cmp	r0, #0
 800fda8:	dd09      	ble.n	800fdbe <qsort+0x82>
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	d1ed      	bne.n	800fd8c <qsort+0x50>
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	683a      	ldr	r2, [r7, #0]
 800fdb4:	602a      	str	r2, [r5, #0]
 800fdb6:	603b      	str	r3, [r7, #0]
 800fdb8:	463d      	mov	r5, r7
 800fdba:	42ae      	cmp	r6, r5
 800fdbc:	d3ef      	bcc.n	800fd9e <qsort+0x62>
 800fdbe:	9b01      	ldr	r3, [sp, #4]
 800fdc0:	4423      	add	r3, r4
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	e7d4      	b.n	800fd70 <qsort+0x34>
 800fdc6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800fdca:	1b3f      	subs	r7, r7, r4
 800fdcc:	2907      	cmp	r1, #7
 800fdce:	fb04 6909 	mla	r9, r4, r9, r6
 800fdd2:	4437      	add	r7, r6
 800fdd4:	d022      	beq.n	800fe1c <qsort+0xe0>
 800fdd6:	2928      	cmp	r1, #40	; 0x28
 800fdd8:	d945      	bls.n	800fe66 <qsort+0x12a>
 800fdda:	08c9      	lsrs	r1, r1, #3
 800fddc:	fb04 f501 	mul.w	r5, r4, r1
 800fde0:	4653      	mov	r3, sl
 800fde2:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800fde6:	1971      	adds	r1, r6, r5
 800fde8:	4630      	mov	r0, r6
 800fdea:	f7ff ff88 	bl	800fcfe <med3.constprop.0>
 800fdee:	4649      	mov	r1, r9
 800fdf0:	eb09 0205 	add.w	r2, r9, r5
 800fdf4:	4653      	mov	r3, sl
 800fdf6:	4683      	mov	fp, r0
 800fdf8:	1b48      	subs	r0, r1, r5
 800fdfa:	f7ff ff80 	bl	800fcfe <med3.constprop.0>
 800fdfe:	463a      	mov	r2, r7
 800fe00:	4681      	mov	r9, r0
 800fe02:	4653      	mov	r3, sl
 800fe04:	1b79      	subs	r1, r7, r5
 800fe06:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800fe0a:	f7ff ff78 	bl	800fcfe <med3.constprop.0>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4649      	mov	r1, r9
 800fe12:	4653      	mov	r3, sl
 800fe14:	4658      	mov	r0, fp
 800fe16:	f7ff ff72 	bl	800fcfe <med3.constprop.0>
 800fe1a:	4681      	mov	r9, r0
 800fe1c:	f1b8 0f00 	cmp.w	r8, #0
 800fe20:	d124      	bne.n	800fe6c <qsort+0x130>
 800fe22:	6833      	ldr	r3, [r6, #0]
 800fe24:	f8d9 2000 	ldr.w	r2, [r9]
 800fe28:	6032      	str	r2, [r6, #0]
 800fe2a:	f8c9 3000 	str.w	r3, [r9]
 800fe2e:	eb06 0b04 	add.w	fp, r6, r4
 800fe32:	46b9      	mov	r9, r7
 800fe34:	465d      	mov	r5, fp
 800fe36:	2300      	movs	r3, #0
 800fe38:	45bb      	cmp	fp, r7
 800fe3a:	d835      	bhi.n	800fea8 <qsort+0x16c>
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4658      	mov	r0, fp
 800fe40:	9304      	str	r3, [sp, #16]
 800fe42:	47d0      	blx	sl
 800fe44:	2800      	cmp	r0, #0
 800fe46:	9b04      	ldr	r3, [sp, #16]
 800fe48:	dc3e      	bgt.n	800fec8 <qsort+0x18c>
 800fe4a:	d10a      	bne.n	800fe62 <qsort+0x126>
 800fe4c:	f1b8 0f00 	cmp.w	r8, #0
 800fe50:	d113      	bne.n	800fe7a <qsort+0x13e>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	f8db 2000 	ldr.w	r2, [fp]
 800fe58:	602a      	str	r2, [r5, #0]
 800fe5a:	f8cb 3000 	str.w	r3, [fp]
 800fe5e:	4425      	add	r5, r4
 800fe60:	2301      	movs	r3, #1
 800fe62:	44a3      	add	fp, r4
 800fe64:	e7e8      	b.n	800fe38 <qsort+0xfc>
 800fe66:	463a      	mov	r2, r7
 800fe68:	46b3      	mov	fp, r6
 800fe6a:	e7d1      	b.n	800fe10 <qsort+0xd4>
 800fe6c:	4643      	mov	r3, r8
 800fe6e:	4622      	mov	r2, r4
 800fe70:	4649      	mov	r1, r9
 800fe72:	4630      	mov	r0, r6
 800fe74:	f7ff ff2a 	bl	800fccc <swapfunc>
 800fe78:	e7d9      	b.n	800fe2e <qsort+0xf2>
 800fe7a:	4643      	mov	r3, r8
 800fe7c:	4622      	mov	r2, r4
 800fe7e:	4659      	mov	r1, fp
 800fe80:	4628      	mov	r0, r5
 800fe82:	f7ff ff23 	bl	800fccc <swapfunc>
 800fe86:	e7ea      	b.n	800fe5e <qsort+0x122>
 800fe88:	d10b      	bne.n	800fea2 <qsort+0x166>
 800fe8a:	f1b8 0f00 	cmp.w	r8, #0
 800fe8e:	d114      	bne.n	800feba <qsort+0x17e>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	f8d9 2000 	ldr.w	r2, [r9]
 800fe96:	603a      	str	r2, [r7, #0]
 800fe98:	f8c9 3000 	str.w	r3, [r9]
 800fe9c:	eba9 0904 	sub.w	r9, r9, r4
 800fea0:	2301      	movs	r3, #1
 800fea2:	9f04      	ldr	r7, [sp, #16]
 800fea4:	45bb      	cmp	fp, r7
 800fea6:	d90f      	bls.n	800fec8 <qsort+0x18c>
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d143      	bne.n	800ff34 <qsort+0x1f8>
 800feac:	9b01      	ldr	r3, [sp, #4]
 800feae:	9a03      	ldr	r2, [sp, #12]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	f4bf af61 	bcs.w	800fd78 <qsort+0x3c>
 800feb6:	9d01      	ldr	r5, [sp, #4]
 800feb8:	e036      	b.n	800ff28 <qsort+0x1ec>
 800feba:	4643      	mov	r3, r8
 800febc:	4622      	mov	r2, r4
 800febe:	4649      	mov	r1, r9
 800fec0:	4638      	mov	r0, r7
 800fec2:	f7ff ff03 	bl	800fccc <swapfunc>
 800fec6:	e7e9      	b.n	800fe9c <qsort+0x160>
 800fec8:	4631      	mov	r1, r6
 800feca:	4638      	mov	r0, r7
 800fecc:	9305      	str	r3, [sp, #20]
 800fece:	47d0      	blx	sl
 800fed0:	1b3b      	subs	r3, r7, r4
 800fed2:	2800      	cmp	r0, #0
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	9b05      	ldr	r3, [sp, #20]
 800fed8:	dad6      	bge.n	800fe88 <qsort+0x14c>
 800feda:	f1b8 0f00 	cmp.w	r8, #0
 800fede:	d006      	beq.n	800feee <qsort+0x1b2>
 800fee0:	4643      	mov	r3, r8
 800fee2:	4622      	mov	r2, r4
 800fee4:	4639      	mov	r1, r7
 800fee6:	4658      	mov	r0, fp
 800fee8:	f7ff fef0 	bl	800fccc <swapfunc>
 800feec:	e005      	b.n	800fefa <qsort+0x1be>
 800feee:	f8db 3000 	ldr.w	r3, [fp]
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	f8cb 2000 	str.w	r2, [fp]
 800fef8:	603b      	str	r3, [r7, #0]
 800fefa:	9f04      	ldr	r7, [sp, #16]
 800fefc:	e7b0      	b.n	800fe60 <qsort+0x124>
 800fefe:	4643      	mov	r3, r8
 800ff00:	4622      	mov	r2, r4
 800ff02:	4639      	mov	r1, r7
 800ff04:	4628      	mov	r0, r5
 800ff06:	f7ff fee1 	bl	800fccc <swapfunc>
 800ff0a:	e00c      	b.n	800ff26 <qsort+0x1ea>
 800ff0c:	1b2f      	subs	r7, r5, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4638      	mov	r0, r7
 800ff12:	47d0      	blx	sl
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dd09      	ble.n	800ff2c <qsort+0x1f0>
 800ff18:	f1b8 0f00 	cmp.w	r8, #0
 800ff1c:	d1ef      	bne.n	800fefe <qsort+0x1c2>
 800ff1e:	682b      	ldr	r3, [r5, #0]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	602a      	str	r2, [r5, #0]
 800ff24:	603b      	str	r3, [r7, #0]
 800ff26:	463d      	mov	r5, r7
 800ff28:	42ae      	cmp	r6, r5
 800ff2a:	d3ef      	bcc.n	800ff0c <qsort+0x1d0>
 800ff2c:	9b01      	ldr	r3, [sp, #4]
 800ff2e:	4423      	add	r3, r4
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	e7bb      	b.n	800feac <qsort+0x170>
 800ff34:	ebab 0305 	sub.w	r3, fp, r5
 800ff38:	1baa      	subs	r2, r5, r6
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	bfa8      	it	ge
 800ff3e:	461a      	movge	r2, r3
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	b12a      	cbz	r2, 800ff50 <qsort+0x214>
 800ff44:	4643      	mov	r3, r8
 800ff46:	ebab 0102 	sub.w	r1, fp, r2
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7ff febe 	bl	800fccc <swapfunc>
 800ff50:	9b03      	ldr	r3, [sp, #12]
 800ff52:	eba3 0209 	sub.w	r2, r3, r9
 800ff56:	eba9 0707 	sub.w	r7, r9, r7
 800ff5a:	1b12      	subs	r2, r2, r4
 800ff5c:	42ba      	cmp	r2, r7
 800ff5e:	bf28      	it	cs
 800ff60:	463a      	movcs	r2, r7
 800ff62:	b12a      	cbz	r2, 800ff70 <qsort+0x234>
 800ff64:	9903      	ldr	r1, [sp, #12]
 800ff66:	4643      	mov	r3, r8
 800ff68:	1a89      	subs	r1, r1, r2
 800ff6a:	4658      	mov	r0, fp
 800ff6c:	f7ff feae 	bl	800fccc <swapfunc>
 800ff70:	9d01      	ldr	r5, [sp, #4]
 800ff72:	9b03      	ldr	r3, [sp, #12]
 800ff74:	42af      	cmp	r7, r5
 800ff76:	eba3 0007 	sub.w	r0, r3, r7
 800ff7a:	d904      	bls.n	800ff86 <qsort+0x24a>
 800ff7c:	4633      	mov	r3, r6
 800ff7e:	463d      	mov	r5, r7
 800ff80:	9f01      	ldr	r7, [sp, #4]
 800ff82:	4606      	mov	r6, r0
 800ff84:	4618      	mov	r0, r3
 800ff86:	42a7      	cmp	r7, r4
 800ff88:	d921      	bls.n	800ffce <qsort+0x292>
 800ff8a:	fbb7 f1f4 	udiv	r1, r7, r4
 800ff8e:	9b02      	ldr	r3, [sp, #8]
 800ff90:	2b07      	cmp	r3, #7
 800ff92:	d80d      	bhi.n	800ffb0 <qsort+0x274>
 800ff94:	fbb5 f5f4 	udiv	r5, r5, r4
 800ff98:	aa16      	add	r2, sp, #88	; 0x58
 800ff9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff9e:	f843 6c40 	str.w	r6, [r3, #-64]
 800ffa2:	f843 5c3c 	str.w	r5, [r3, #-60]
 800ffa6:	9b02      	ldr	r3, [sp, #8]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	9302      	str	r3, [sp, #8]
 800ffac:	4606      	mov	r6, r0
 800ffae:	e6d6      	b.n	800fd5e <qsort+0x22>
 800ffb0:	4653      	mov	r3, sl
 800ffb2:	4622      	mov	r2, r4
 800ffb4:	f7ff fec2 	bl	800fd3c <qsort>
 800ffb8:	42a5      	cmp	r5, r4
 800ffba:	d80b      	bhi.n	800ffd4 <qsort+0x298>
 800ffbc:	9b02      	ldr	r3, [sp, #8]
 800ffbe:	aa16      	add	r2, sp, #88	; 0x58
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	9302      	str	r3, [sp, #8]
 800ffc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ffc8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800ffcc:	e7ee      	b.n	800ffac <qsort+0x270>
 800ffce:	42a5      	cmp	r5, r4
 800ffd0:	f67f aed2 	bls.w	800fd78 <qsort+0x3c>
 800ffd4:	fbb5 f1f4 	udiv	r1, r5, r4
 800ffd8:	4630      	mov	r0, r6
 800ffda:	e7e7      	b.n	800ffac <qsort+0x270>

0800ffdc <nanf>:
 800ffdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ffe4 <nanf+0x8>
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	7fc00000 	.word	0x7fc00000

0800ffe8 <siprintf>:
 800ffe8:	b40e      	push	{r1, r2, r3}
 800ffea:	b500      	push	{lr}
 800ffec:	b09c      	sub	sp, #112	; 0x70
 800ffee:	ab1d      	add	r3, sp, #116	; 0x74
 800fff0:	9002      	str	r0, [sp, #8]
 800fff2:	9006      	str	r0, [sp, #24]
 800fff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fff8:	4809      	ldr	r0, [pc, #36]	; (8010020 <siprintf+0x38>)
 800fffa:	9107      	str	r1, [sp, #28]
 800fffc:	9104      	str	r1, [sp, #16]
 800fffe:	4909      	ldr	r1, [pc, #36]	; (8010024 <siprintf+0x3c>)
 8010000:	f853 2b04 	ldr.w	r2, [r3], #4
 8010004:	9105      	str	r1, [sp, #20]
 8010006:	6800      	ldr	r0, [r0, #0]
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	a902      	add	r1, sp, #8
 801000c:	f002 ff98 	bl	8012f40 <_svfiprintf_r>
 8010010:	9b02      	ldr	r3, [sp, #8]
 8010012:	2200      	movs	r2, #0
 8010014:	701a      	strb	r2, [r3, #0]
 8010016:	b01c      	add	sp, #112	; 0x70
 8010018:	f85d eb04 	ldr.w	lr, [sp], #4
 801001c:	b003      	add	sp, #12
 801001e:	4770      	bx	lr
 8010020:	20000058 	.word	0x20000058
 8010024:	ffff0208 	.word	0xffff0208

08010028 <sulp>:
 8010028:	b570      	push	{r4, r5, r6, lr}
 801002a:	4604      	mov	r4, r0
 801002c:	460d      	mov	r5, r1
 801002e:	ec45 4b10 	vmov	d0, r4, r5
 8010032:	4616      	mov	r6, r2
 8010034:	f002 fce2 	bl	80129fc <__ulp>
 8010038:	ec51 0b10 	vmov	r0, r1, d0
 801003c:	b17e      	cbz	r6, 801005e <sulp+0x36>
 801003e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010046:	2b00      	cmp	r3, #0
 8010048:	dd09      	ble.n	801005e <sulp+0x36>
 801004a:	051b      	lsls	r3, r3, #20
 801004c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010050:	2400      	movs	r4, #0
 8010052:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010056:	4622      	mov	r2, r4
 8010058:	462b      	mov	r3, r5
 801005a:	f7f0 faed 	bl	8000638 <__aeabi_dmul>
 801005e:	bd70      	pop	{r4, r5, r6, pc}

08010060 <_strtod_l>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	ed2d 8b02 	vpush	{d8}
 8010068:	b09d      	sub	sp, #116	; 0x74
 801006a:	461f      	mov	r7, r3
 801006c:	2300      	movs	r3, #0
 801006e:	9318      	str	r3, [sp, #96]	; 0x60
 8010070:	4ba2      	ldr	r3, [pc, #648]	; (80102fc <_strtod_l+0x29c>)
 8010072:	9213      	str	r2, [sp, #76]	; 0x4c
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	9305      	str	r3, [sp, #20]
 8010078:	4604      	mov	r4, r0
 801007a:	4618      	mov	r0, r3
 801007c:	4688      	mov	r8, r1
 801007e:	f7f0 f8c7 	bl	8000210 <strlen>
 8010082:	f04f 0a00 	mov.w	sl, #0
 8010086:	4605      	mov	r5, r0
 8010088:	f04f 0b00 	mov.w	fp, #0
 801008c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010092:	781a      	ldrb	r2, [r3, #0]
 8010094:	2a2b      	cmp	r2, #43	; 0x2b
 8010096:	d04e      	beq.n	8010136 <_strtod_l+0xd6>
 8010098:	d83b      	bhi.n	8010112 <_strtod_l+0xb2>
 801009a:	2a0d      	cmp	r2, #13
 801009c:	d834      	bhi.n	8010108 <_strtod_l+0xa8>
 801009e:	2a08      	cmp	r2, #8
 80100a0:	d834      	bhi.n	801010c <_strtod_l+0xac>
 80100a2:	2a00      	cmp	r2, #0
 80100a4:	d03e      	beq.n	8010124 <_strtod_l+0xc4>
 80100a6:	2300      	movs	r3, #0
 80100a8:	930a      	str	r3, [sp, #40]	; 0x28
 80100aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80100ac:	7833      	ldrb	r3, [r6, #0]
 80100ae:	2b30      	cmp	r3, #48	; 0x30
 80100b0:	f040 80b0 	bne.w	8010214 <_strtod_l+0x1b4>
 80100b4:	7873      	ldrb	r3, [r6, #1]
 80100b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80100ba:	2b58      	cmp	r3, #88	; 0x58
 80100bc:	d168      	bne.n	8010190 <_strtod_l+0x130>
 80100be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100c0:	9301      	str	r3, [sp, #4]
 80100c2:	ab18      	add	r3, sp, #96	; 0x60
 80100c4:	9702      	str	r7, [sp, #8]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	4a8d      	ldr	r2, [pc, #564]	; (8010300 <_strtod_l+0x2a0>)
 80100ca:	ab19      	add	r3, sp, #100	; 0x64
 80100cc:	a917      	add	r1, sp, #92	; 0x5c
 80100ce:	4620      	mov	r0, r4
 80100d0:	f001 fdee 	bl	8011cb0 <__gethex>
 80100d4:	f010 0707 	ands.w	r7, r0, #7
 80100d8:	4605      	mov	r5, r0
 80100da:	d005      	beq.n	80100e8 <_strtod_l+0x88>
 80100dc:	2f06      	cmp	r7, #6
 80100de:	d12c      	bne.n	801013a <_strtod_l+0xda>
 80100e0:	3601      	adds	r6, #1
 80100e2:	2300      	movs	r3, #0
 80100e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80100e6:	930a      	str	r3, [sp, #40]	; 0x28
 80100e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f040 8590 	bne.w	8010c10 <_strtod_l+0xbb0>
 80100f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f2:	b1eb      	cbz	r3, 8010130 <_strtod_l+0xd0>
 80100f4:	4652      	mov	r2, sl
 80100f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80100fa:	ec43 2b10 	vmov	d0, r2, r3
 80100fe:	b01d      	add	sp, #116	; 0x74
 8010100:	ecbd 8b02 	vpop	{d8}
 8010104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	2a20      	cmp	r2, #32
 801010a:	d1cc      	bne.n	80100a6 <_strtod_l+0x46>
 801010c:	3301      	adds	r3, #1
 801010e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010110:	e7be      	b.n	8010090 <_strtod_l+0x30>
 8010112:	2a2d      	cmp	r2, #45	; 0x2d
 8010114:	d1c7      	bne.n	80100a6 <_strtod_l+0x46>
 8010116:	2201      	movs	r2, #1
 8010118:	920a      	str	r2, [sp, #40]	; 0x28
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	9217      	str	r2, [sp, #92]	; 0x5c
 801011e:	785b      	ldrb	r3, [r3, #1]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1c2      	bne.n	80100aa <_strtod_l+0x4a>
 8010124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010126:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801012a:	2b00      	cmp	r3, #0
 801012c:	f040 856e 	bne.w	8010c0c <_strtod_l+0xbac>
 8010130:	4652      	mov	r2, sl
 8010132:	465b      	mov	r3, fp
 8010134:	e7e1      	b.n	80100fa <_strtod_l+0x9a>
 8010136:	2200      	movs	r2, #0
 8010138:	e7ee      	b.n	8010118 <_strtod_l+0xb8>
 801013a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801013c:	b13a      	cbz	r2, 801014e <_strtod_l+0xee>
 801013e:	2135      	movs	r1, #53	; 0x35
 8010140:	a81a      	add	r0, sp, #104	; 0x68
 8010142:	f002 fd66 	bl	8012c12 <__copybits>
 8010146:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010148:	4620      	mov	r0, r4
 801014a:	f002 f925 	bl	8012398 <_Bfree>
 801014e:	3f01      	subs	r7, #1
 8010150:	2f04      	cmp	r7, #4
 8010152:	d806      	bhi.n	8010162 <_strtod_l+0x102>
 8010154:	e8df f007 	tbb	[pc, r7]
 8010158:	1714030a 	.word	0x1714030a
 801015c:	0a          	.byte	0x0a
 801015d:	00          	.byte	0x00
 801015e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010162:	0728      	lsls	r0, r5, #28
 8010164:	d5c0      	bpl.n	80100e8 <_strtod_l+0x88>
 8010166:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801016a:	e7bd      	b.n	80100e8 <_strtod_l+0x88>
 801016c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010170:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010172:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010176:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801017a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801017e:	e7f0      	b.n	8010162 <_strtod_l+0x102>
 8010180:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010304 <_strtod_l+0x2a4>
 8010184:	e7ed      	b.n	8010162 <_strtod_l+0x102>
 8010186:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801018a:	f04f 3aff 	mov.w	sl, #4294967295
 801018e:	e7e8      	b.n	8010162 <_strtod_l+0x102>
 8010190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	9217      	str	r2, [sp, #92]	; 0x5c
 8010196:	785b      	ldrb	r3, [r3, #1]
 8010198:	2b30      	cmp	r3, #48	; 0x30
 801019a:	d0f9      	beq.n	8010190 <_strtod_l+0x130>
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0a3      	beq.n	80100e8 <_strtod_l+0x88>
 80101a0:	2301      	movs	r3, #1
 80101a2:	f04f 0900 	mov.w	r9, #0
 80101a6:	9304      	str	r3, [sp, #16]
 80101a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101aa:	9308      	str	r3, [sp, #32]
 80101ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80101b0:	464f      	mov	r7, r9
 80101b2:	220a      	movs	r2, #10
 80101b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80101b6:	7806      	ldrb	r6, [r0, #0]
 80101b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80101bc:	b2d9      	uxtb	r1, r3
 80101be:	2909      	cmp	r1, #9
 80101c0:	d92a      	bls.n	8010218 <_strtod_l+0x1b8>
 80101c2:	9905      	ldr	r1, [sp, #20]
 80101c4:	462a      	mov	r2, r5
 80101c6:	f003 f92f 	bl	8013428 <strncmp>
 80101ca:	b398      	cbz	r0, 8010234 <_strtod_l+0x1d4>
 80101cc:	2000      	movs	r0, #0
 80101ce:	4632      	mov	r2, r6
 80101d0:	463d      	mov	r5, r7
 80101d2:	9005      	str	r0, [sp, #20]
 80101d4:	4603      	mov	r3, r0
 80101d6:	2a65      	cmp	r2, #101	; 0x65
 80101d8:	d001      	beq.n	80101de <_strtod_l+0x17e>
 80101da:	2a45      	cmp	r2, #69	; 0x45
 80101dc:	d118      	bne.n	8010210 <_strtod_l+0x1b0>
 80101de:	b91d      	cbnz	r5, 80101e8 <_strtod_l+0x188>
 80101e0:	9a04      	ldr	r2, [sp, #16]
 80101e2:	4302      	orrs	r2, r0
 80101e4:	d09e      	beq.n	8010124 <_strtod_l+0xc4>
 80101e6:	2500      	movs	r5, #0
 80101e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80101ec:	f108 0201 	add.w	r2, r8, #1
 80101f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80101f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80101f6:	2a2b      	cmp	r2, #43	; 0x2b
 80101f8:	d075      	beq.n	80102e6 <_strtod_l+0x286>
 80101fa:	2a2d      	cmp	r2, #45	; 0x2d
 80101fc:	d07b      	beq.n	80102f6 <_strtod_l+0x296>
 80101fe:	f04f 0c00 	mov.w	ip, #0
 8010202:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010206:	2909      	cmp	r1, #9
 8010208:	f240 8082 	bls.w	8010310 <_strtod_l+0x2b0>
 801020c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010210:	2600      	movs	r6, #0
 8010212:	e09d      	b.n	8010350 <_strtod_l+0x2f0>
 8010214:	2300      	movs	r3, #0
 8010216:	e7c4      	b.n	80101a2 <_strtod_l+0x142>
 8010218:	2f08      	cmp	r7, #8
 801021a:	bfd8      	it	le
 801021c:	9907      	ldrle	r1, [sp, #28]
 801021e:	f100 0001 	add.w	r0, r0, #1
 8010222:	bfda      	itte	le
 8010224:	fb02 3301 	mlale	r3, r2, r1, r3
 8010228:	9307      	strle	r3, [sp, #28]
 801022a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801022e:	3701      	adds	r7, #1
 8010230:	9017      	str	r0, [sp, #92]	; 0x5c
 8010232:	e7bf      	b.n	80101b4 <_strtod_l+0x154>
 8010234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010236:	195a      	adds	r2, r3, r5
 8010238:	9217      	str	r2, [sp, #92]	; 0x5c
 801023a:	5d5a      	ldrb	r2, [r3, r5]
 801023c:	2f00      	cmp	r7, #0
 801023e:	d037      	beq.n	80102b0 <_strtod_l+0x250>
 8010240:	9005      	str	r0, [sp, #20]
 8010242:	463d      	mov	r5, r7
 8010244:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010248:	2b09      	cmp	r3, #9
 801024a:	d912      	bls.n	8010272 <_strtod_l+0x212>
 801024c:	2301      	movs	r3, #1
 801024e:	e7c2      	b.n	80101d6 <_strtod_l+0x176>
 8010250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	9217      	str	r2, [sp, #92]	; 0x5c
 8010256:	785a      	ldrb	r2, [r3, #1]
 8010258:	3001      	adds	r0, #1
 801025a:	2a30      	cmp	r2, #48	; 0x30
 801025c:	d0f8      	beq.n	8010250 <_strtod_l+0x1f0>
 801025e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010262:	2b08      	cmp	r3, #8
 8010264:	f200 84d9 	bhi.w	8010c1a <_strtod_l+0xbba>
 8010268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801026a:	9005      	str	r0, [sp, #20]
 801026c:	2000      	movs	r0, #0
 801026e:	9308      	str	r3, [sp, #32]
 8010270:	4605      	mov	r5, r0
 8010272:	3a30      	subs	r2, #48	; 0x30
 8010274:	f100 0301 	add.w	r3, r0, #1
 8010278:	d014      	beq.n	80102a4 <_strtod_l+0x244>
 801027a:	9905      	ldr	r1, [sp, #20]
 801027c:	4419      	add	r1, r3
 801027e:	9105      	str	r1, [sp, #20]
 8010280:	462b      	mov	r3, r5
 8010282:	eb00 0e05 	add.w	lr, r0, r5
 8010286:	210a      	movs	r1, #10
 8010288:	4573      	cmp	r3, lr
 801028a:	d113      	bne.n	80102b4 <_strtod_l+0x254>
 801028c:	182b      	adds	r3, r5, r0
 801028e:	2b08      	cmp	r3, #8
 8010290:	f105 0501 	add.w	r5, r5, #1
 8010294:	4405      	add	r5, r0
 8010296:	dc1c      	bgt.n	80102d2 <_strtod_l+0x272>
 8010298:	9907      	ldr	r1, [sp, #28]
 801029a:	230a      	movs	r3, #10
 801029c:	fb03 2301 	mla	r3, r3, r1, r2
 80102a0:	9307      	str	r3, [sp, #28]
 80102a2:	2300      	movs	r3, #0
 80102a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80102a6:	1c51      	adds	r1, r2, #1
 80102a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80102aa:	7852      	ldrb	r2, [r2, #1]
 80102ac:	4618      	mov	r0, r3
 80102ae:	e7c9      	b.n	8010244 <_strtod_l+0x1e4>
 80102b0:	4638      	mov	r0, r7
 80102b2:	e7d2      	b.n	801025a <_strtod_l+0x1fa>
 80102b4:	2b08      	cmp	r3, #8
 80102b6:	dc04      	bgt.n	80102c2 <_strtod_l+0x262>
 80102b8:	9e07      	ldr	r6, [sp, #28]
 80102ba:	434e      	muls	r6, r1
 80102bc:	9607      	str	r6, [sp, #28]
 80102be:	3301      	adds	r3, #1
 80102c0:	e7e2      	b.n	8010288 <_strtod_l+0x228>
 80102c2:	f103 0c01 	add.w	ip, r3, #1
 80102c6:	f1bc 0f10 	cmp.w	ip, #16
 80102ca:	bfd8      	it	le
 80102cc:	fb01 f909 	mulle.w	r9, r1, r9
 80102d0:	e7f5      	b.n	80102be <_strtod_l+0x25e>
 80102d2:	2d10      	cmp	r5, #16
 80102d4:	bfdc      	itt	le
 80102d6:	230a      	movle	r3, #10
 80102d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80102dc:	e7e1      	b.n	80102a2 <_strtod_l+0x242>
 80102de:	2300      	movs	r3, #0
 80102e0:	9305      	str	r3, [sp, #20]
 80102e2:	2301      	movs	r3, #1
 80102e4:	e77c      	b.n	80101e0 <_strtod_l+0x180>
 80102e6:	f04f 0c00 	mov.w	ip, #0
 80102ea:	f108 0202 	add.w	r2, r8, #2
 80102ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80102f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80102f4:	e785      	b.n	8010202 <_strtod_l+0x1a2>
 80102f6:	f04f 0c01 	mov.w	ip, #1
 80102fa:	e7f6      	b.n	80102ea <_strtod_l+0x28a>
 80102fc:	08014bf0 	.word	0x08014bf0
 8010300:	0801490c 	.word	0x0801490c
 8010304:	7ff00000 	.word	0x7ff00000
 8010308:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801030a:	1c51      	adds	r1, r2, #1
 801030c:	9117      	str	r1, [sp, #92]	; 0x5c
 801030e:	7852      	ldrb	r2, [r2, #1]
 8010310:	2a30      	cmp	r2, #48	; 0x30
 8010312:	d0f9      	beq.n	8010308 <_strtod_l+0x2a8>
 8010314:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010318:	2908      	cmp	r1, #8
 801031a:	f63f af79 	bhi.w	8010210 <_strtod_l+0x1b0>
 801031e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010324:	9206      	str	r2, [sp, #24]
 8010326:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010328:	1c51      	adds	r1, r2, #1
 801032a:	9117      	str	r1, [sp, #92]	; 0x5c
 801032c:	7852      	ldrb	r2, [r2, #1]
 801032e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010332:	2e09      	cmp	r6, #9
 8010334:	d937      	bls.n	80103a6 <_strtod_l+0x346>
 8010336:	9e06      	ldr	r6, [sp, #24]
 8010338:	1b89      	subs	r1, r1, r6
 801033a:	2908      	cmp	r1, #8
 801033c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010340:	dc02      	bgt.n	8010348 <_strtod_l+0x2e8>
 8010342:	4576      	cmp	r6, lr
 8010344:	bfa8      	it	ge
 8010346:	4676      	movge	r6, lr
 8010348:	f1bc 0f00 	cmp.w	ip, #0
 801034c:	d000      	beq.n	8010350 <_strtod_l+0x2f0>
 801034e:	4276      	negs	r6, r6
 8010350:	2d00      	cmp	r5, #0
 8010352:	d14d      	bne.n	80103f0 <_strtod_l+0x390>
 8010354:	9904      	ldr	r1, [sp, #16]
 8010356:	4301      	orrs	r1, r0
 8010358:	f47f aec6 	bne.w	80100e8 <_strtod_l+0x88>
 801035c:	2b00      	cmp	r3, #0
 801035e:	f47f aee1 	bne.w	8010124 <_strtod_l+0xc4>
 8010362:	2a69      	cmp	r2, #105	; 0x69
 8010364:	d027      	beq.n	80103b6 <_strtod_l+0x356>
 8010366:	dc24      	bgt.n	80103b2 <_strtod_l+0x352>
 8010368:	2a49      	cmp	r2, #73	; 0x49
 801036a:	d024      	beq.n	80103b6 <_strtod_l+0x356>
 801036c:	2a4e      	cmp	r2, #78	; 0x4e
 801036e:	f47f aed9 	bne.w	8010124 <_strtod_l+0xc4>
 8010372:	499f      	ldr	r1, [pc, #636]	; (80105f0 <_strtod_l+0x590>)
 8010374:	a817      	add	r0, sp, #92	; 0x5c
 8010376:	f001 fef3 	bl	8012160 <__match>
 801037a:	2800      	cmp	r0, #0
 801037c:	f43f aed2 	beq.w	8010124 <_strtod_l+0xc4>
 8010380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b28      	cmp	r3, #40	; 0x28
 8010386:	d12d      	bne.n	80103e4 <_strtod_l+0x384>
 8010388:	499a      	ldr	r1, [pc, #616]	; (80105f4 <_strtod_l+0x594>)
 801038a:	aa1a      	add	r2, sp, #104	; 0x68
 801038c:	a817      	add	r0, sp, #92	; 0x5c
 801038e:	f001 fefb 	bl	8012188 <__hexnan>
 8010392:	2805      	cmp	r0, #5
 8010394:	d126      	bne.n	80103e4 <_strtod_l+0x384>
 8010396:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010398:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801039c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80103a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80103a4:	e6a0      	b.n	80100e8 <_strtod_l+0x88>
 80103a6:	210a      	movs	r1, #10
 80103a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80103ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80103b0:	e7b9      	b.n	8010326 <_strtod_l+0x2c6>
 80103b2:	2a6e      	cmp	r2, #110	; 0x6e
 80103b4:	e7db      	b.n	801036e <_strtod_l+0x30e>
 80103b6:	4990      	ldr	r1, [pc, #576]	; (80105f8 <_strtod_l+0x598>)
 80103b8:	a817      	add	r0, sp, #92	; 0x5c
 80103ba:	f001 fed1 	bl	8012160 <__match>
 80103be:	2800      	cmp	r0, #0
 80103c0:	f43f aeb0 	beq.w	8010124 <_strtod_l+0xc4>
 80103c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103c6:	498d      	ldr	r1, [pc, #564]	; (80105fc <_strtod_l+0x59c>)
 80103c8:	3b01      	subs	r3, #1
 80103ca:	a817      	add	r0, sp, #92	; 0x5c
 80103cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80103ce:	f001 fec7 	bl	8012160 <__match>
 80103d2:	b910      	cbnz	r0, 80103da <_strtod_l+0x37a>
 80103d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103d6:	3301      	adds	r3, #1
 80103d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80103da:	f8df b230 	ldr.w	fp, [pc, #560]	; 801060c <_strtod_l+0x5ac>
 80103de:	f04f 0a00 	mov.w	sl, #0
 80103e2:	e681      	b.n	80100e8 <_strtod_l+0x88>
 80103e4:	4886      	ldr	r0, [pc, #536]	; (8010600 <_strtod_l+0x5a0>)
 80103e6:	f003 f807 	bl	80133f8 <nan>
 80103ea:	ec5b ab10 	vmov	sl, fp, d0
 80103ee:	e67b      	b.n	80100e8 <_strtod_l+0x88>
 80103f0:	9b05      	ldr	r3, [sp, #20]
 80103f2:	9807      	ldr	r0, [sp, #28]
 80103f4:	1af3      	subs	r3, r6, r3
 80103f6:	2f00      	cmp	r7, #0
 80103f8:	bf08      	it	eq
 80103fa:	462f      	moveq	r7, r5
 80103fc:	2d10      	cmp	r5, #16
 80103fe:	9306      	str	r3, [sp, #24]
 8010400:	46a8      	mov	r8, r5
 8010402:	bfa8      	it	ge
 8010404:	f04f 0810 	movge.w	r8, #16
 8010408:	f7f0 f89c 	bl	8000544 <__aeabi_ui2d>
 801040c:	2d09      	cmp	r5, #9
 801040e:	4682      	mov	sl, r0
 8010410:	468b      	mov	fp, r1
 8010412:	dd13      	ble.n	801043c <_strtod_l+0x3dc>
 8010414:	4b7b      	ldr	r3, [pc, #492]	; (8010604 <_strtod_l+0x5a4>)
 8010416:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801041a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801041e:	f7f0 f90b 	bl	8000638 <__aeabi_dmul>
 8010422:	4682      	mov	sl, r0
 8010424:	4648      	mov	r0, r9
 8010426:	468b      	mov	fp, r1
 8010428:	f7f0 f88c 	bl	8000544 <__aeabi_ui2d>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4650      	mov	r0, sl
 8010432:	4659      	mov	r1, fp
 8010434:	f7ef ff4a 	bl	80002cc <__adddf3>
 8010438:	4682      	mov	sl, r0
 801043a:	468b      	mov	fp, r1
 801043c:	2d0f      	cmp	r5, #15
 801043e:	dc38      	bgt.n	80104b2 <_strtod_l+0x452>
 8010440:	9b06      	ldr	r3, [sp, #24]
 8010442:	2b00      	cmp	r3, #0
 8010444:	f43f ae50 	beq.w	80100e8 <_strtod_l+0x88>
 8010448:	dd24      	ble.n	8010494 <_strtod_l+0x434>
 801044a:	2b16      	cmp	r3, #22
 801044c:	dc0b      	bgt.n	8010466 <_strtod_l+0x406>
 801044e:	496d      	ldr	r1, [pc, #436]	; (8010604 <_strtod_l+0x5a4>)
 8010450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010458:	4652      	mov	r2, sl
 801045a:	465b      	mov	r3, fp
 801045c:	f7f0 f8ec 	bl	8000638 <__aeabi_dmul>
 8010460:	4682      	mov	sl, r0
 8010462:	468b      	mov	fp, r1
 8010464:	e640      	b.n	80100e8 <_strtod_l+0x88>
 8010466:	9a06      	ldr	r2, [sp, #24]
 8010468:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801046c:	4293      	cmp	r3, r2
 801046e:	db20      	blt.n	80104b2 <_strtod_l+0x452>
 8010470:	4c64      	ldr	r4, [pc, #400]	; (8010604 <_strtod_l+0x5a4>)
 8010472:	f1c5 050f 	rsb	r5, r5, #15
 8010476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801047a:	4652      	mov	r2, sl
 801047c:	465b      	mov	r3, fp
 801047e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010482:	f7f0 f8d9 	bl	8000638 <__aeabi_dmul>
 8010486:	9b06      	ldr	r3, [sp, #24]
 8010488:	1b5d      	subs	r5, r3, r5
 801048a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801048e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010492:	e7e3      	b.n	801045c <_strtod_l+0x3fc>
 8010494:	9b06      	ldr	r3, [sp, #24]
 8010496:	3316      	adds	r3, #22
 8010498:	db0b      	blt.n	80104b2 <_strtod_l+0x452>
 801049a:	9b05      	ldr	r3, [sp, #20]
 801049c:	1b9e      	subs	r6, r3, r6
 801049e:	4b59      	ldr	r3, [pc, #356]	; (8010604 <_strtod_l+0x5a4>)
 80104a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80104a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80104a8:	4650      	mov	r0, sl
 80104aa:	4659      	mov	r1, fp
 80104ac:	f7f0 f9ee 	bl	800088c <__aeabi_ddiv>
 80104b0:	e7d6      	b.n	8010460 <_strtod_l+0x400>
 80104b2:	9b06      	ldr	r3, [sp, #24]
 80104b4:	eba5 0808 	sub.w	r8, r5, r8
 80104b8:	4498      	add	r8, r3
 80104ba:	f1b8 0f00 	cmp.w	r8, #0
 80104be:	dd74      	ble.n	80105aa <_strtod_l+0x54a>
 80104c0:	f018 030f 	ands.w	r3, r8, #15
 80104c4:	d00a      	beq.n	80104dc <_strtod_l+0x47c>
 80104c6:	494f      	ldr	r1, [pc, #316]	; (8010604 <_strtod_l+0x5a4>)
 80104c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80104cc:	4652      	mov	r2, sl
 80104ce:	465b      	mov	r3, fp
 80104d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104d4:	f7f0 f8b0 	bl	8000638 <__aeabi_dmul>
 80104d8:	4682      	mov	sl, r0
 80104da:	468b      	mov	fp, r1
 80104dc:	f038 080f 	bics.w	r8, r8, #15
 80104e0:	d04f      	beq.n	8010582 <_strtod_l+0x522>
 80104e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80104e6:	dd22      	ble.n	801052e <_strtod_l+0x4ce>
 80104e8:	2500      	movs	r5, #0
 80104ea:	462e      	mov	r6, r5
 80104ec:	9507      	str	r5, [sp, #28]
 80104ee:	9505      	str	r5, [sp, #20]
 80104f0:	2322      	movs	r3, #34	; 0x22
 80104f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801060c <_strtod_l+0x5ac>
 80104f6:	6023      	str	r3, [r4, #0]
 80104f8:	f04f 0a00 	mov.w	sl, #0
 80104fc:	9b07      	ldr	r3, [sp, #28]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f43f adf2 	beq.w	80100e8 <_strtod_l+0x88>
 8010504:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010506:	4620      	mov	r0, r4
 8010508:	f001 ff46 	bl	8012398 <_Bfree>
 801050c:	9905      	ldr	r1, [sp, #20]
 801050e:	4620      	mov	r0, r4
 8010510:	f001 ff42 	bl	8012398 <_Bfree>
 8010514:	4631      	mov	r1, r6
 8010516:	4620      	mov	r0, r4
 8010518:	f001 ff3e 	bl	8012398 <_Bfree>
 801051c:	9907      	ldr	r1, [sp, #28]
 801051e:	4620      	mov	r0, r4
 8010520:	f001 ff3a 	bl	8012398 <_Bfree>
 8010524:	4629      	mov	r1, r5
 8010526:	4620      	mov	r0, r4
 8010528:	f001 ff36 	bl	8012398 <_Bfree>
 801052c:	e5dc      	b.n	80100e8 <_strtod_l+0x88>
 801052e:	4b36      	ldr	r3, [pc, #216]	; (8010608 <_strtod_l+0x5a8>)
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	2300      	movs	r3, #0
 8010534:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010538:	4650      	mov	r0, sl
 801053a:	4659      	mov	r1, fp
 801053c:	4699      	mov	r9, r3
 801053e:	f1b8 0f01 	cmp.w	r8, #1
 8010542:	dc21      	bgt.n	8010588 <_strtod_l+0x528>
 8010544:	b10b      	cbz	r3, 801054a <_strtod_l+0x4ea>
 8010546:	4682      	mov	sl, r0
 8010548:	468b      	mov	fp, r1
 801054a:	4b2f      	ldr	r3, [pc, #188]	; (8010608 <_strtod_l+0x5a8>)
 801054c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010550:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010554:	4652      	mov	r2, sl
 8010556:	465b      	mov	r3, fp
 8010558:	e9d9 0100 	ldrd	r0, r1, [r9]
 801055c:	f7f0 f86c 	bl	8000638 <__aeabi_dmul>
 8010560:	4b2a      	ldr	r3, [pc, #168]	; (801060c <_strtod_l+0x5ac>)
 8010562:	460a      	mov	r2, r1
 8010564:	400b      	ands	r3, r1
 8010566:	492a      	ldr	r1, [pc, #168]	; (8010610 <_strtod_l+0x5b0>)
 8010568:	428b      	cmp	r3, r1
 801056a:	4682      	mov	sl, r0
 801056c:	d8bc      	bhi.n	80104e8 <_strtod_l+0x488>
 801056e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010572:	428b      	cmp	r3, r1
 8010574:	bf86      	itte	hi
 8010576:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010614 <_strtod_l+0x5b4>
 801057a:	f04f 3aff 	movhi.w	sl, #4294967295
 801057e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010582:	2300      	movs	r3, #0
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	e084      	b.n	8010692 <_strtod_l+0x632>
 8010588:	f018 0f01 	tst.w	r8, #1
 801058c:	d005      	beq.n	801059a <_strtod_l+0x53a>
 801058e:	9b04      	ldr	r3, [sp, #16]
 8010590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010594:	f7f0 f850 	bl	8000638 <__aeabi_dmul>
 8010598:	2301      	movs	r3, #1
 801059a:	9a04      	ldr	r2, [sp, #16]
 801059c:	3208      	adds	r2, #8
 801059e:	f109 0901 	add.w	r9, r9, #1
 80105a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80105a6:	9204      	str	r2, [sp, #16]
 80105a8:	e7c9      	b.n	801053e <_strtod_l+0x4de>
 80105aa:	d0ea      	beq.n	8010582 <_strtod_l+0x522>
 80105ac:	f1c8 0800 	rsb	r8, r8, #0
 80105b0:	f018 020f 	ands.w	r2, r8, #15
 80105b4:	d00a      	beq.n	80105cc <_strtod_l+0x56c>
 80105b6:	4b13      	ldr	r3, [pc, #76]	; (8010604 <_strtod_l+0x5a4>)
 80105b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105bc:	4650      	mov	r0, sl
 80105be:	4659      	mov	r1, fp
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	f7f0 f962 	bl	800088c <__aeabi_ddiv>
 80105c8:	4682      	mov	sl, r0
 80105ca:	468b      	mov	fp, r1
 80105cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80105d0:	d0d7      	beq.n	8010582 <_strtod_l+0x522>
 80105d2:	f1b8 0f1f 	cmp.w	r8, #31
 80105d6:	dd1f      	ble.n	8010618 <_strtod_l+0x5b8>
 80105d8:	2500      	movs	r5, #0
 80105da:	462e      	mov	r6, r5
 80105dc:	9507      	str	r5, [sp, #28]
 80105de:	9505      	str	r5, [sp, #20]
 80105e0:	2322      	movs	r3, #34	; 0x22
 80105e2:	f04f 0a00 	mov.w	sl, #0
 80105e6:	f04f 0b00 	mov.w	fp, #0
 80105ea:	6023      	str	r3, [r4, #0]
 80105ec:	e786      	b.n	80104fc <_strtod_l+0x49c>
 80105ee:	bf00      	nop
 80105f0:	080148dd 	.word	0x080148dd
 80105f4:	08014920 	.word	0x08014920
 80105f8:	080148d5 	.word	0x080148d5
 80105fc:	08014b14 	.word	0x08014b14
 8010600:	08014a0f 	.word	0x08014a0f
 8010604:	08014c88 	.word	0x08014c88
 8010608:	08014c60 	.word	0x08014c60
 801060c:	7ff00000 	.word	0x7ff00000
 8010610:	7ca00000 	.word	0x7ca00000
 8010614:	7fefffff 	.word	0x7fefffff
 8010618:	f018 0310 	ands.w	r3, r8, #16
 801061c:	bf18      	it	ne
 801061e:	236a      	movne	r3, #106	; 0x6a
 8010620:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80109d0 <_strtod_l+0x970>
 8010624:	9304      	str	r3, [sp, #16]
 8010626:	4650      	mov	r0, sl
 8010628:	4659      	mov	r1, fp
 801062a:	2300      	movs	r3, #0
 801062c:	f018 0f01 	tst.w	r8, #1
 8010630:	d004      	beq.n	801063c <_strtod_l+0x5dc>
 8010632:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010636:	f7ef ffff 	bl	8000638 <__aeabi_dmul>
 801063a:	2301      	movs	r3, #1
 801063c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010640:	f109 0908 	add.w	r9, r9, #8
 8010644:	d1f2      	bne.n	801062c <_strtod_l+0x5cc>
 8010646:	b10b      	cbz	r3, 801064c <_strtod_l+0x5ec>
 8010648:	4682      	mov	sl, r0
 801064a:	468b      	mov	fp, r1
 801064c:	9b04      	ldr	r3, [sp, #16]
 801064e:	b1c3      	cbz	r3, 8010682 <_strtod_l+0x622>
 8010650:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010658:	2b00      	cmp	r3, #0
 801065a:	4659      	mov	r1, fp
 801065c:	dd11      	ble.n	8010682 <_strtod_l+0x622>
 801065e:	2b1f      	cmp	r3, #31
 8010660:	f340 8124 	ble.w	80108ac <_strtod_l+0x84c>
 8010664:	2b34      	cmp	r3, #52	; 0x34
 8010666:	bfde      	ittt	le
 8010668:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801066c:	f04f 33ff 	movle.w	r3, #4294967295
 8010670:	fa03 f202 	lslle.w	r2, r3, r2
 8010674:	f04f 0a00 	mov.w	sl, #0
 8010678:	bfcc      	ite	gt
 801067a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801067e:	ea02 0b01 	andle.w	fp, r2, r1
 8010682:	2200      	movs	r2, #0
 8010684:	2300      	movs	r3, #0
 8010686:	4650      	mov	r0, sl
 8010688:	4659      	mov	r1, fp
 801068a:	f7f0 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 801068e:	2800      	cmp	r0, #0
 8010690:	d1a2      	bne.n	80105d8 <_strtod_l+0x578>
 8010692:	9b07      	ldr	r3, [sp, #28]
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	9908      	ldr	r1, [sp, #32]
 8010698:	462b      	mov	r3, r5
 801069a:	463a      	mov	r2, r7
 801069c:	4620      	mov	r0, r4
 801069e:	f001 fee3 	bl	8012468 <__s2b>
 80106a2:	9007      	str	r0, [sp, #28]
 80106a4:	2800      	cmp	r0, #0
 80106a6:	f43f af1f 	beq.w	80104e8 <_strtod_l+0x488>
 80106aa:	9b05      	ldr	r3, [sp, #20]
 80106ac:	1b9e      	subs	r6, r3, r6
 80106ae:	9b06      	ldr	r3, [sp, #24]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	bfb4      	ite	lt
 80106b4:	4633      	movlt	r3, r6
 80106b6:	2300      	movge	r3, #0
 80106b8:	930c      	str	r3, [sp, #48]	; 0x30
 80106ba:	9b06      	ldr	r3, [sp, #24]
 80106bc:	2500      	movs	r5, #0
 80106be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80106c2:	9312      	str	r3, [sp, #72]	; 0x48
 80106c4:	462e      	mov	r6, r5
 80106c6:	9b07      	ldr	r3, [sp, #28]
 80106c8:	4620      	mov	r0, r4
 80106ca:	6859      	ldr	r1, [r3, #4]
 80106cc:	f001 fe24 	bl	8012318 <_Balloc>
 80106d0:	9005      	str	r0, [sp, #20]
 80106d2:	2800      	cmp	r0, #0
 80106d4:	f43f af0c 	beq.w	80104f0 <_strtod_l+0x490>
 80106d8:	9b07      	ldr	r3, [sp, #28]
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	3202      	adds	r2, #2
 80106de:	f103 010c 	add.w	r1, r3, #12
 80106e2:	0092      	lsls	r2, r2, #2
 80106e4:	300c      	adds	r0, #12
 80106e6:	f001 fe09 	bl	80122fc <memcpy>
 80106ea:	ec4b ab10 	vmov	d0, sl, fp
 80106ee:	aa1a      	add	r2, sp, #104	; 0x68
 80106f0:	a919      	add	r1, sp, #100	; 0x64
 80106f2:	4620      	mov	r0, r4
 80106f4:	f002 f9fe 	bl	8012af4 <__d2b>
 80106f8:	ec4b ab18 	vmov	d8, sl, fp
 80106fc:	9018      	str	r0, [sp, #96]	; 0x60
 80106fe:	2800      	cmp	r0, #0
 8010700:	f43f aef6 	beq.w	80104f0 <_strtod_l+0x490>
 8010704:	2101      	movs	r1, #1
 8010706:	4620      	mov	r0, r4
 8010708:	f001 ff48 	bl	801259c <__i2b>
 801070c:	4606      	mov	r6, r0
 801070e:	2800      	cmp	r0, #0
 8010710:	f43f aeee 	beq.w	80104f0 <_strtod_l+0x490>
 8010714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010716:	9904      	ldr	r1, [sp, #16]
 8010718:	2b00      	cmp	r3, #0
 801071a:	bfab      	itete	ge
 801071c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801071e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010720:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010722:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010726:	bfac      	ite	ge
 8010728:	eb03 0902 	addge.w	r9, r3, r2
 801072c:	1ad7      	sublt	r7, r2, r3
 801072e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010730:	eba3 0801 	sub.w	r8, r3, r1
 8010734:	4490      	add	r8, r2
 8010736:	4ba1      	ldr	r3, [pc, #644]	; (80109bc <_strtod_l+0x95c>)
 8010738:	f108 38ff 	add.w	r8, r8, #4294967295
 801073c:	4598      	cmp	r8, r3
 801073e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010742:	f280 80c7 	bge.w	80108d4 <_strtod_l+0x874>
 8010746:	eba3 0308 	sub.w	r3, r3, r8
 801074a:	2b1f      	cmp	r3, #31
 801074c:	eba2 0203 	sub.w	r2, r2, r3
 8010750:	f04f 0101 	mov.w	r1, #1
 8010754:	f300 80b1 	bgt.w	80108ba <_strtod_l+0x85a>
 8010758:	fa01 f303 	lsl.w	r3, r1, r3
 801075c:	930d      	str	r3, [sp, #52]	; 0x34
 801075e:	2300      	movs	r3, #0
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	eb09 0802 	add.w	r8, r9, r2
 8010766:	9b04      	ldr	r3, [sp, #16]
 8010768:	45c1      	cmp	r9, r8
 801076a:	4417      	add	r7, r2
 801076c:	441f      	add	r7, r3
 801076e:	464b      	mov	r3, r9
 8010770:	bfa8      	it	ge
 8010772:	4643      	movge	r3, r8
 8010774:	42bb      	cmp	r3, r7
 8010776:	bfa8      	it	ge
 8010778:	463b      	movge	r3, r7
 801077a:	2b00      	cmp	r3, #0
 801077c:	bfc2      	ittt	gt
 801077e:	eba8 0803 	subgt.w	r8, r8, r3
 8010782:	1aff      	subgt	r7, r7, r3
 8010784:	eba9 0903 	subgt.w	r9, r9, r3
 8010788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801078a:	2b00      	cmp	r3, #0
 801078c:	dd17      	ble.n	80107be <_strtod_l+0x75e>
 801078e:	4631      	mov	r1, r6
 8010790:	461a      	mov	r2, r3
 8010792:	4620      	mov	r0, r4
 8010794:	f001 ffc2 	bl	801271c <__pow5mult>
 8010798:	4606      	mov	r6, r0
 801079a:	2800      	cmp	r0, #0
 801079c:	f43f aea8 	beq.w	80104f0 <_strtod_l+0x490>
 80107a0:	4601      	mov	r1, r0
 80107a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80107a4:	4620      	mov	r0, r4
 80107a6:	f001 ff0f 	bl	80125c8 <__multiply>
 80107aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80107ac:	2800      	cmp	r0, #0
 80107ae:	f43f ae9f 	beq.w	80104f0 <_strtod_l+0x490>
 80107b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107b4:	4620      	mov	r0, r4
 80107b6:	f001 fdef 	bl	8012398 <_Bfree>
 80107ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107bc:	9318      	str	r3, [sp, #96]	; 0x60
 80107be:	f1b8 0f00 	cmp.w	r8, #0
 80107c2:	f300 808c 	bgt.w	80108de <_strtod_l+0x87e>
 80107c6:	9b06      	ldr	r3, [sp, #24]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dd08      	ble.n	80107de <_strtod_l+0x77e>
 80107cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107ce:	9905      	ldr	r1, [sp, #20]
 80107d0:	4620      	mov	r0, r4
 80107d2:	f001 ffa3 	bl	801271c <__pow5mult>
 80107d6:	9005      	str	r0, [sp, #20]
 80107d8:	2800      	cmp	r0, #0
 80107da:	f43f ae89 	beq.w	80104f0 <_strtod_l+0x490>
 80107de:	2f00      	cmp	r7, #0
 80107e0:	dd08      	ble.n	80107f4 <_strtod_l+0x794>
 80107e2:	9905      	ldr	r1, [sp, #20]
 80107e4:	463a      	mov	r2, r7
 80107e6:	4620      	mov	r0, r4
 80107e8:	f001 fff2 	bl	80127d0 <__lshift>
 80107ec:	9005      	str	r0, [sp, #20]
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f43f ae7e 	beq.w	80104f0 <_strtod_l+0x490>
 80107f4:	f1b9 0f00 	cmp.w	r9, #0
 80107f8:	dd08      	ble.n	801080c <_strtod_l+0x7ac>
 80107fa:	4631      	mov	r1, r6
 80107fc:	464a      	mov	r2, r9
 80107fe:	4620      	mov	r0, r4
 8010800:	f001 ffe6 	bl	80127d0 <__lshift>
 8010804:	4606      	mov	r6, r0
 8010806:	2800      	cmp	r0, #0
 8010808:	f43f ae72 	beq.w	80104f0 <_strtod_l+0x490>
 801080c:	9a05      	ldr	r2, [sp, #20]
 801080e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010810:	4620      	mov	r0, r4
 8010812:	f002 f869 	bl	80128e8 <__mdiff>
 8010816:	4605      	mov	r5, r0
 8010818:	2800      	cmp	r0, #0
 801081a:	f43f ae69 	beq.w	80104f0 <_strtod_l+0x490>
 801081e:	68c3      	ldr	r3, [r0, #12]
 8010820:	930b      	str	r3, [sp, #44]	; 0x2c
 8010822:	2300      	movs	r3, #0
 8010824:	60c3      	str	r3, [r0, #12]
 8010826:	4631      	mov	r1, r6
 8010828:	f002 f842 	bl	80128b0 <__mcmp>
 801082c:	2800      	cmp	r0, #0
 801082e:	da60      	bge.n	80108f2 <_strtod_l+0x892>
 8010830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010832:	ea53 030a 	orrs.w	r3, r3, sl
 8010836:	f040 8082 	bne.w	801093e <_strtod_l+0x8de>
 801083a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801083e:	2b00      	cmp	r3, #0
 8010840:	d17d      	bne.n	801093e <_strtod_l+0x8de>
 8010842:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010846:	0d1b      	lsrs	r3, r3, #20
 8010848:	051b      	lsls	r3, r3, #20
 801084a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801084e:	d976      	bls.n	801093e <_strtod_l+0x8de>
 8010850:	696b      	ldr	r3, [r5, #20]
 8010852:	b913      	cbnz	r3, 801085a <_strtod_l+0x7fa>
 8010854:	692b      	ldr	r3, [r5, #16]
 8010856:	2b01      	cmp	r3, #1
 8010858:	dd71      	ble.n	801093e <_strtod_l+0x8de>
 801085a:	4629      	mov	r1, r5
 801085c:	2201      	movs	r2, #1
 801085e:	4620      	mov	r0, r4
 8010860:	f001 ffb6 	bl	80127d0 <__lshift>
 8010864:	4631      	mov	r1, r6
 8010866:	4605      	mov	r5, r0
 8010868:	f002 f822 	bl	80128b0 <__mcmp>
 801086c:	2800      	cmp	r0, #0
 801086e:	dd66      	ble.n	801093e <_strtod_l+0x8de>
 8010870:	9904      	ldr	r1, [sp, #16]
 8010872:	4a53      	ldr	r2, [pc, #332]	; (80109c0 <_strtod_l+0x960>)
 8010874:	465b      	mov	r3, fp
 8010876:	2900      	cmp	r1, #0
 8010878:	f000 8081 	beq.w	801097e <_strtod_l+0x91e>
 801087c:	ea02 010b 	and.w	r1, r2, fp
 8010880:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010884:	dc7b      	bgt.n	801097e <_strtod_l+0x91e>
 8010886:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801088a:	f77f aea9 	ble.w	80105e0 <_strtod_l+0x580>
 801088e:	4b4d      	ldr	r3, [pc, #308]	; (80109c4 <_strtod_l+0x964>)
 8010890:	4650      	mov	r0, sl
 8010892:	4659      	mov	r1, fp
 8010894:	2200      	movs	r2, #0
 8010896:	f7ef fecf 	bl	8000638 <__aeabi_dmul>
 801089a:	460b      	mov	r3, r1
 801089c:	4303      	orrs	r3, r0
 801089e:	bf08      	it	eq
 80108a0:	2322      	moveq	r3, #34	; 0x22
 80108a2:	4682      	mov	sl, r0
 80108a4:	468b      	mov	fp, r1
 80108a6:	bf08      	it	eq
 80108a8:	6023      	streq	r3, [r4, #0]
 80108aa:	e62b      	b.n	8010504 <_strtod_l+0x4a4>
 80108ac:	f04f 32ff 	mov.w	r2, #4294967295
 80108b0:	fa02 f303 	lsl.w	r3, r2, r3
 80108b4:	ea03 0a0a 	and.w	sl, r3, sl
 80108b8:	e6e3      	b.n	8010682 <_strtod_l+0x622>
 80108ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80108be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80108c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80108c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80108ca:	fa01 f308 	lsl.w	r3, r1, r8
 80108ce:	9308      	str	r3, [sp, #32]
 80108d0:	910d      	str	r1, [sp, #52]	; 0x34
 80108d2:	e746      	b.n	8010762 <_strtod_l+0x702>
 80108d4:	2300      	movs	r3, #0
 80108d6:	9308      	str	r3, [sp, #32]
 80108d8:	2301      	movs	r3, #1
 80108da:	930d      	str	r3, [sp, #52]	; 0x34
 80108dc:	e741      	b.n	8010762 <_strtod_l+0x702>
 80108de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80108e0:	4642      	mov	r2, r8
 80108e2:	4620      	mov	r0, r4
 80108e4:	f001 ff74 	bl	80127d0 <__lshift>
 80108e8:	9018      	str	r0, [sp, #96]	; 0x60
 80108ea:	2800      	cmp	r0, #0
 80108ec:	f47f af6b 	bne.w	80107c6 <_strtod_l+0x766>
 80108f0:	e5fe      	b.n	80104f0 <_strtod_l+0x490>
 80108f2:	465f      	mov	r7, fp
 80108f4:	d16e      	bne.n	80109d4 <_strtod_l+0x974>
 80108f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108fc:	b342      	cbz	r2, 8010950 <_strtod_l+0x8f0>
 80108fe:	4a32      	ldr	r2, [pc, #200]	; (80109c8 <_strtod_l+0x968>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d128      	bne.n	8010956 <_strtod_l+0x8f6>
 8010904:	9b04      	ldr	r3, [sp, #16]
 8010906:	4651      	mov	r1, sl
 8010908:	b1eb      	cbz	r3, 8010946 <_strtod_l+0x8e6>
 801090a:	4b2d      	ldr	r3, [pc, #180]	; (80109c0 <_strtod_l+0x960>)
 801090c:	403b      	ands	r3, r7
 801090e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010912:	f04f 32ff 	mov.w	r2, #4294967295
 8010916:	d819      	bhi.n	801094c <_strtod_l+0x8ec>
 8010918:	0d1b      	lsrs	r3, r3, #20
 801091a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801091e:	fa02 f303 	lsl.w	r3, r2, r3
 8010922:	4299      	cmp	r1, r3
 8010924:	d117      	bne.n	8010956 <_strtod_l+0x8f6>
 8010926:	4b29      	ldr	r3, [pc, #164]	; (80109cc <_strtod_l+0x96c>)
 8010928:	429f      	cmp	r7, r3
 801092a:	d102      	bne.n	8010932 <_strtod_l+0x8d2>
 801092c:	3101      	adds	r1, #1
 801092e:	f43f addf 	beq.w	80104f0 <_strtod_l+0x490>
 8010932:	4b23      	ldr	r3, [pc, #140]	; (80109c0 <_strtod_l+0x960>)
 8010934:	403b      	ands	r3, r7
 8010936:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801093a:	f04f 0a00 	mov.w	sl, #0
 801093e:	9b04      	ldr	r3, [sp, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1a4      	bne.n	801088e <_strtod_l+0x82e>
 8010944:	e5de      	b.n	8010504 <_strtod_l+0x4a4>
 8010946:	f04f 33ff 	mov.w	r3, #4294967295
 801094a:	e7ea      	b.n	8010922 <_strtod_l+0x8c2>
 801094c:	4613      	mov	r3, r2
 801094e:	e7e8      	b.n	8010922 <_strtod_l+0x8c2>
 8010950:	ea53 030a 	orrs.w	r3, r3, sl
 8010954:	d08c      	beq.n	8010870 <_strtod_l+0x810>
 8010956:	9b08      	ldr	r3, [sp, #32]
 8010958:	b1db      	cbz	r3, 8010992 <_strtod_l+0x932>
 801095a:	423b      	tst	r3, r7
 801095c:	d0ef      	beq.n	801093e <_strtod_l+0x8de>
 801095e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010960:	9a04      	ldr	r2, [sp, #16]
 8010962:	4650      	mov	r0, sl
 8010964:	4659      	mov	r1, fp
 8010966:	b1c3      	cbz	r3, 801099a <_strtod_l+0x93a>
 8010968:	f7ff fb5e 	bl	8010028 <sulp>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	ec51 0b18 	vmov	r0, r1, d8
 8010974:	f7ef fcaa 	bl	80002cc <__adddf3>
 8010978:	4682      	mov	sl, r0
 801097a:	468b      	mov	fp, r1
 801097c:	e7df      	b.n	801093e <_strtod_l+0x8de>
 801097e:	4013      	ands	r3, r2
 8010980:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010984:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010988:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801098c:	f04f 3aff 	mov.w	sl, #4294967295
 8010990:	e7d5      	b.n	801093e <_strtod_l+0x8de>
 8010992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010994:	ea13 0f0a 	tst.w	r3, sl
 8010998:	e7e0      	b.n	801095c <_strtod_l+0x8fc>
 801099a:	f7ff fb45 	bl	8010028 <sulp>
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	ec51 0b18 	vmov	r0, r1, d8
 80109a6:	f7ef fc8f 	bl	80002c8 <__aeabi_dsub>
 80109aa:	2200      	movs	r2, #0
 80109ac:	2300      	movs	r3, #0
 80109ae:	4682      	mov	sl, r0
 80109b0:	468b      	mov	fp, r1
 80109b2:	f7f0 f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d0c1      	beq.n	801093e <_strtod_l+0x8de>
 80109ba:	e611      	b.n	80105e0 <_strtod_l+0x580>
 80109bc:	fffffc02 	.word	0xfffffc02
 80109c0:	7ff00000 	.word	0x7ff00000
 80109c4:	39500000 	.word	0x39500000
 80109c8:	000fffff 	.word	0x000fffff
 80109cc:	7fefffff 	.word	0x7fefffff
 80109d0:	08014938 	.word	0x08014938
 80109d4:	4631      	mov	r1, r6
 80109d6:	4628      	mov	r0, r5
 80109d8:	f002 f8e8 	bl	8012bac <__ratio>
 80109dc:	ec59 8b10 	vmov	r8, r9, d0
 80109e0:	ee10 0a10 	vmov	r0, s0
 80109e4:	2200      	movs	r2, #0
 80109e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80109ea:	4649      	mov	r1, r9
 80109ec:	f7f0 f8a0 	bl	8000b30 <__aeabi_dcmple>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d07a      	beq.n	8010aea <_strtod_l+0xa8a>
 80109f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d04a      	beq.n	8010a90 <_strtod_l+0xa30>
 80109fa:	4b95      	ldr	r3, [pc, #596]	; (8010c50 <_strtod_l+0xbf0>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010c50 <_strtod_l+0xbf0>
 8010a06:	f04f 0800 	mov.w	r8, #0
 8010a0a:	4b92      	ldr	r3, [pc, #584]	; (8010c54 <_strtod_l+0xbf4>)
 8010a0c:	403b      	ands	r3, r7
 8010a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8010a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a12:	4b91      	ldr	r3, [pc, #580]	; (8010c58 <_strtod_l+0xbf8>)
 8010a14:	429a      	cmp	r2, r3
 8010a16:	f040 80b0 	bne.w	8010b7a <_strtod_l+0xb1a>
 8010a1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010a22:	ec4b ab10 	vmov	d0, sl, fp
 8010a26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a2a:	f001 ffe7 	bl	80129fc <__ulp>
 8010a2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a32:	ec53 2b10 	vmov	r2, r3, d0
 8010a36:	f7ef fdff 	bl	8000638 <__aeabi_dmul>
 8010a3a:	4652      	mov	r2, sl
 8010a3c:	465b      	mov	r3, fp
 8010a3e:	f7ef fc45 	bl	80002cc <__adddf3>
 8010a42:	460b      	mov	r3, r1
 8010a44:	4983      	ldr	r1, [pc, #524]	; (8010c54 <_strtod_l+0xbf4>)
 8010a46:	4a85      	ldr	r2, [pc, #532]	; (8010c5c <_strtod_l+0xbfc>)
 8010a48:	4019      	ands	r1, r3
 8010a4a:	4291      	cmp	r1, r2
 8010a4c:	4682      	mov	sl, r0
 8010a4e:	d960      	bls.n	8010b12 <_strtod_l+0xab2>
 8010a50:	ee18 3a90 	vmov	r3, s17
 8010a54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d104      	bne.n	8010a66 <_strtod_l+0xa06>
 8010a5c:	ee18 3a10 	vmov	r3, s16
 8010a60:	3301      	adds	r3, #1
 8010a62:	f43f ad45 	beq.w	80104f0 <_strtod_l+0x490>
 8010a66:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010c68 <_strtod_l+0xc08>
 8010a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8010a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a70:	4620      	mov	r0, r4
 8010a72:	f001 fc91 	bl	8012398 <_Bfree>
 8010a76:	9905      	ldr	r1, [sp, #20]
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f001 fc8d 	bl	8012398 <_Bfree>
 8010a7e:	4631      	mov	r1, r6
 8010a80:	4620      	mov	r0, r4
 8010a82:	f001 fc89 	bl	8012398 <_Bfree>
 8010a86:	4629      	mov	r1, r5
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f001 fc85 	bl	8012398 <_Bfree>
 8010a8e:	e61a      	b.n	80106c6 <_strtod_l+0x666>
 8010a90:	f1ba 0f00 	cmp.w	sl, #0
 8010a94:	d11b      	bne.n	8010ace <_strtod_l+0xa6e>
 8010a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a9a:	b9f3      	cbnz	r3, 8010ada <_strtod_l+0xa7a>
 8010a9c:	4b6c      	ldr	r3, [pc, #432]	; (8010c50 <_strtod_l+0xbf0>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	f7f0 f83a 	bl	8000b1c <__aeabi_dcmplt>
 8010aa8:	b9d0      	cbnz	r0, 8010ae0 <_strtod_l+0xa80>
 8010aaa:	4640      	mov	r0, r8
 8010aac:	4649      	mov	r1, r9
 8010aae:	4b6c      	ldr	r3, [pc, #432]	; (8010c60 <_strtod_l+0xc00>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f7ef fdc1 	bl	8000638 <__aeabi_dmul>
 8010ab6:	4680      	mov	r8, r0
 8010ab8:	4689      	mov	r9, r1
 8010aba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010abe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010ac2:	9315      	str	r3, [sp, #84]	; 0x54
 8010ac4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010ac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010acc:	e79d      	b.n	8010a0a <_strtod_l+0x9aa>
 8010ace:	f1ba 0f01 	cmp.w	sl, #1
 8010ad2:	d102      	bne.n	8010ada <_strtod_l+0xa7a>
 8010ad4:	2f00      	cmp	r7, #0
 8010ad6:	f43f ad83 	beq.w	80105e0 <_strtod_l+0x580>
 8010ada:	4b62      	ldr	r3, [pc, #392]	; (8010c64 <_strtod_l+0xc04>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	e78e      	b.n	80109fe <_strtod_l+0x99e>
 8010ae0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010c60 <_strtod_l+0xc00>
 8010ae4:	f04f 0800 	mov.w	r8, #0
 8010ae8:	e7e7      	b.n	8010aba <_strtod_l+0xa5a>
 8010aea:	4b5d      	ldr	r3, [pc, #372]	; (8010c60 <_strtod_l+0xc00>)
 8010aec:	4640      	mov	r0, r8
 8010aee:	4649      	mov	r1, r9
 8010af0:	2200      	movs	r2, #0
 8010af2:	f7ef fda1 	bl	8000638 <__aeabi_dmul>
 8010af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010af8:	4680      	mov	r8, r0
 8010afa:	4689      	mov	r9, r1
 8010afc:	b933      	cbnz	r3, 8010b0c <_strtod_l+0xaac>
 8010afe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b02:	900e      	str	r0, [sp, #56]	; 0x38
 8010b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010b0a:	e7dd      	b.n	8010ac8 <_strtod_l+0xa68>
 8010b0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010b10:	e7f9      	b.n	8010b06 <_strtod_l+0xaa6>
 8010b12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010b16:	9b04      	ldr	r3, [sp, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1a8      	bne.n	8010a6e <_strtod_l+0xa0e>
 8010b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b22:	0d1b      	lsrs	r3, r3, #20
 8010b24:	051b      	lsls	r3, r3, #20
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d1a1      	bne.n	8010a6e <_strtod_l+0xa0e>
 8010b2a:	4640      	mov	r0, r8
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	f7f0 f8e3 	bl	8000cf8 <__aeabi_d2lz>
 8010b32:	f7ef fd53 	bl	80005dc <__aeabi_l2d>
 8010b36:	4602      	mov	r2, r0
 8010b38:	460b      	mov	r3, r1
 8010b3a:	4640      	mov	r0, r8
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	f7ef fbc3 	bl	80002c8 <__aeabi_dsub>
 8010b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b48:	ea43 030a 	orr.w	r3, r3, sl
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	4680      	mov	r8, r0
 8010b50:	4689      	mov	r9, r1
 8010b52:	d055      	beq.n	8010c00 <_strtod_l+0xba0>
 8010b54:	a336      	add	r3, pc, #216	; (adr r3, 8010c30 <_strtod_l+0xbd0>)
 8010b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5a:	f7ef ffdf 	bl	8000b1c <__aeabi_dcmplt>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f47f acd0 	bne.w	8010504 <_strtod_l+0x4a4>
 8010b64:	a334      	add	r3, pc, #208	; (adr r3, 8010c38 <_strtod_l+0xbd8>)
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	4640      	mov	r0, r8
 8010b6c:	4649      	mov	r1, r9
 8010b6e:	f7ef fff3 	bl	8000b58 <__aeabi_dcmpgt>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	f43f af7b 	beq.w	8010a6e <_strtod_l+0xa0e>
 8010b78:	e4c4      	b.n	8010504 <_strtod_l+0x4a4>
 8010b7a:	9b04      	ldr	r3, [sp, #16]
 8010b7c:	b333      	cbz	r3, 8010bcc <_strtod_l+0xb6c>
 8010b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010b84:	d822      	bhi.n	8010bcc <_strtod_l+0xb6c>
 8010b86:	a32e      	add	r3, pc, #184	; (adr r3, 8010c40 <_strtod_l+0xbe0>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	4640      	mov	r0, r8
 8010b8e:	4649      	mov	r1, r9
 8010b90:	f7ef ffce 	bl	8000b30 <__aeabi_dcmple>
 8010b94:	b1a0      	cbz	r0, 8010bc0 <_strtod_l+0xb60>
 8010b96:	4649      	mov	r1, r9
 8010b98:	4640      	mov	r0, r8
 8010b9a:	f7f0 f825 	bl	8000be8 <__aeabi_d2uiz>
 8010b9e:	2801      	cmp	r0, #1
 8010ba0:	bf38      	it	cc
 8010ba2:	2001      	movcc	r0, #1
 8010ba4:	f7ef fcce 	bl	8000544 <__aeabi_ui2d>
 8010ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010baa:	4680      	mov	r8, r0
 8010bac:	4689      	mov	r9, r1
 8010bae:	bb23      	cbnz	r3, 8010bfa <_strtod_l+0xb9a>
 8010bb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bb4:	9010      	str	r0, [sp, #64]	; 0x40
 8010bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8010bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010bbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010bc8:	1a9b      	subs	r3, r3, r2
 8010bca:	9309      	str	r3, [sp, #36]	; 0x24
 8010bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8010bd4:	eef0 0a68 	vmov.f32	s1, s17
 8010bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bdc:	f001 ff0e 	bl	80129fc <__ulp>
 8010be0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010be4:	ec53 2b10 	vmov	r2, r3, d0
 8010be8:	f7ef fd26 	bl	8000638 <__aeabi_dmul>
 8010bec:	ec53 2b18 	vmov	r2, r3, d8
 8010bf0:	f7ef fb6c 	bl	80002cc <__adddf3>
 8010bf4:	4682      	mov	sl, r0
 8010bf6:	468b      	mov	fp, r1
 8010bf8:	e78d      	b.n	8010b16 <_strtod_l+0xab6>
 8010bfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010bfe:	e7db      	b.n	8010bb8 <_strtod_l+0xb58>
 8010c00:	a311      	add	r3, pc, #68	; (adr r3, 8010c48 <_strtod_l+0xbe8>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	f7ef ff89 	bl	8000b1c <__aeabi_dcmplt>
 8010c0a:	e7b2      	b.n	8010b72 <_strtod_l+0xb12>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c14:	6013      	str	r3, [r2, #0]
 8010c16:	f7ff ba6b 	b.w	80100f0 <_strtod_l+0x90>
 8010c1a:	2a65      	cmp	r2, #101	; 0x65
 8010c1c:	f43f ab5f 	beq.w	80102de <_strtod_l+0x27e>
 8010c20:	2a45      	cmp	r2, #69	; 0x45
 8010c22:	f43f ab5c 	beq.w	80102de <_strtod_l+0x27e>
 8010c26:	2301      	movs	r3, #1
 8010c28:	f7ff bb94 	b.w	8010354 <_strtod_l+0x2f4>
 8010c2c:	f3af 8000 	nop.w
 8010c30:	94a03595 	.word	0x94a03595
 8010c34:	3fdfffff 	.word	0x3fdfffff
 8010c38:	35afe535 	.word	0x35afe535
 8010c3c:	3fe00000 	.word	0x3fe00000
 8010c40:	ffc00000 	.word	0xffc00000
 8010c44:	41dfffff 	.word	0x41dfffff
 8010c48:	94a03595 	.word	0x94a03595
 8010c4c:	3fcfffff 	.word	0x3fcfffff
 8010c50:	3ff00000 	.word	0x3ff00000
 8010c54:	7ff00000 	.word	0x7ff00000
 8010c58:	7fe00000 	.word	0x7fe00000
 8010c5c:	7c9fffff 	.word	0x7c9fffff
 8010c60:	3fe00000 	.word	0x3fe00000
 8010c64:	bff00000 	.word	0xbff00000
 8010c68:	7fefffff 	.word	0x7fefffff

08010c6c <_strtod_r>:
 8010c6c:	4b01      	ldr	r3, [pc, #4]	; (8010c74 <_strtod_r+0x8>)
 8010c6e:	f7ff b9f7 	b.w	8010060 <_strtod_l>
 8010c72:	bf00      	nop
 8010c74:	200000c0 	.word	0x200000c0

08010c78 <strtok>:
 8010c78:	4b16      	ldr	r3, [pc, #88]	; (8010cd4 <strtok+0x5c>)
 8010c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c7c:	681e      	ldr	r6, [r3, #0]
 8010c7e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010c80:	4605      	mov	r5, r0
 8010c82:	b9fc      	cbnz	r4, 8010cc4 <strtok+0x4c>
 8010c84:	2050      	movs	r0, #80	; 0x50
 8010c86:	9101      	str	r1, [sp, #4]
 8010c88:	f001 fb1e 	bl	80122c8 <malloc>
 8010c8c:	9901      	ldr	r1, [sp, #4]
 8010c8e:	65b0      	str	r0, [r6, #88]	; 0x58
 8010c90:	4602      	mov	r2, r0
 8010c92:	b920      	cbnz	r0, 8010c9e <strtok+0x26>
 8010c94:	4b10      	ldr	r3, [pc, #64]	; (8010cd8 <strtok+0x60>)
 8010c96:	4811      	ldr	r0, [pc, #68]	; (8010cdc <strtok+0x64>)
 8010c98:	2157      	movs	r1, #87	; 0x57
 8010c9a:	f000 f8f7 	bl	8010e8c <__assert_func>
 8010c9e:	e9c0 4400 	strd	r4, r4, [r0]
 8010ca2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010ca6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010caa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010cae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010cb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010cb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010cba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010cbe:	6184      	str	r4, [r0, #24]
 8010cc0:	7704      	strb	r4, [r0, #28]
 8010cc2:	6244      	str	r4, [r0, #36]	; 0x24
 8010cc4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4628      	mov	r0, r5
 8010cca:	b002      	add	sp, #8
 8010ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cd0:	f000 b806 	b.w	8010ce0 <__strtok_r>
 8010cd4:	20000058 	.word	0x20000058
 8010cd8:	08014960 	.word	0x08014960
 8010cdc:	08014977 	.word	0x08014977

08010ce0 <__strtok_r>:
 8010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce2:	b908      	cbnz	r0, 8010ce8 <__strtok_r+0x8>
 8010ce4:	6810      	ldr	r0, [r2, #0]
 8010ce6:	b188      	cbz	r0, 8010d0c <__strtok_r+0x2c>
 8010ce8:	4604      	mov	r4, r0
 8010cea:	4620      	mov	r0, r4
 8010cec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010cf6:	b91e      	cbnz	r6, 8010d00 <__strtok_r+0x20>
 8010cf8:	b965      	cbnz	r5, 8010d14 <__strtok_r+0x34>
 8010cfa:	6015      	str	r5, [r2, #0]
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	e005      	b.n	8010d0c <__strtok_r+0x2c>
 8010d00:	42b5      	cmp	r5, r6
 8010d02:	d1f6      	bne.n	8010cf2 <__strtok_r+0x12>
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d1f0      	bne.n	8010cea <__strtok_r+0xa>
 8010d08:	6014      	str	r4, [r2, #0]
 8010d0a:	7003      	strb	r3, [r0, #0]
 8010d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d0e:	461c      	mov	r4, r3
 8010d10:	e00c      	b.n	8010d2c <__strtok_r+0x4c>
 8010d12:	b915      	cbnz	r5, 8010d1a <__strtok_r+0x3a>
 8010d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d18:	460e      	mov	r6, r1
 8010d1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010d1e:	42ab      	cmp	r3, r5
 8010d20:	d1f7      	bne.n	8010d12 <__strtok_r+0x32>
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d0f3      	beq.n	8010d0e <__strtok_r+0x2e>
 8010d26:	2300      	movs	r3, #0
 8010d28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010d2c:	6014      	str	r4, [r2, #0]
 8010d2e:	e7ed      	b.n	8010d0c <__strtok_r+0x2c>

08010d30 <_strtol_l.constprop.0>:
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d36:	d001      	beq.n	8010d3c <_strtol_l.constprop.0+0xc>
 8010d38:	2b24      	cmp	r3, #36	; 0x24
 8010d3a:	d906      	bls.n	8010d4a <_strtol_l.constprop.0+0x1a>
 8010d3c:	f7fe f91a 	bl	800ef74 <__errno>
 8010d40:	2316      	movs	r3, #22
 8010d42:	6003      	str	r3, [r0, #0]
 8010d44:	2000      	movs	r0, #0
 8010d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010e30 <_strtol_l.constprop.0+0x100>
 8010d4e:	460d      	mov	r5, r1
 8010d50:	462e      	mov	r6, r5
 8010d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010d5a:	f017 0708 	ands.w	r7, r7, #8
 8010d5e:	d1f7      	bne.n	8010d50 <_strtol_l.constprop.0+0x20>
 8010d60:	2c2d      	cmp	r4, #45	; 0x2d
 8010d62:	d132      	bne.n	8010dca <_strtol_l.constprop.0+0x9a>
 8010d64:	782c      	ldrb	r4, [r5, #0]
 8010d66:	2701      	movs	r7, #1
 8010d68:	1cb5      	adds	r5, r6, #2
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d05b      	beq.n	8010e26 <_strtol_l.constprop.0+0xf6>
 8010d6e:	2b10      	cmp	r3, #16
 8010d70:	d109      	bne.n	8010d86 <_strtol_l.constprop.0+0x56>
 8010d72:	2c30      	cmp	r4, #48	; 0x30
 8010d74:	d107      	bne.n	8010d86 <_strtol_l.constprop.0+0x56>
 8010d76:	782c      	ldrb	r4, [r5, #0]
 8010d78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010d7c:	2c58      	cmp	r4, #88	; 0x58
 8010d7e:	d14d      	bne.n	8010e1c <_strtol_l.constprop.0+0xec>
 8010d80:	786c      	ldrb	r4, [r5, #1]
 8010d82:	2310      	movs	r3, #16
 8010d84:	3502      	adds	r5, #2
 8010d86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d8e:	f04f 0c00 	mov.w	ip, #0
 8010d92:	fbb8 f9f3 	udiv	r9, r8, r3
 8010d96:	4666      	mov	r6, ip
 8010d98:	fb03 8a19 	mls	sl, r3, r9, r8
 8010d9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010da0:	f1be 0f09 	cmp.w	lr, #9
 8010da4:	d816      	bhi.n	8010dd4 <_strtol_l.constprop.0+0xa4>
 8010da6:	4674      	mov	r4, lr
 8010da8:	42a3      	cmp	r3, r4
 8010daa:	dd24      	ble.n	8010df6 <_strtol_l.constprop.0+0xc6>
 8010dac:	f1bc 0f00 	cmp.w	ip, #0
 8010db0:	db1e      	blt.n	8010df0 <_strtol_l.constprop.0+0xc0>
 8010db2:	45b1      	cmp	r9, r6
 8010db4:	d31c      	bcc.n	8010df0 <_strtol_l.constprop.0+0xc0>
 8010db6:	d101      	bne.n	8010dbc <_strtol_l.constprop.0+0x8c>
 8010db8:	45a2      	cmp	sl, r4
 8010dba:	db19      	blt.n	8010df0 <_strtol_l.constprop.0+0xc0>
 8010dbc:	fb06 4603 	mla	r6, r6, r3, r4
 8010dc0:	f04f 0c01 	mov.w	ip, #1
 8010dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dc8:	e7e8      	b.n	8010d9c <_strtol_l.constprop.0+0x6c>
 8010dca:	2c2b      	cmp	r4, #43	; 0x2b
 8010dcc:	bf04      	itt	eq
 8010dce:	782c      	ldrbeq	r4, [r5, #0]
 8010dd0:	1cb5      	addeq	r5, r6, #2
 8010dd2:	e7ca      	b.n	8010d6a <_strtol_l.constprop.0+0x3a>
 8010dd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010dd8:	f1be 0f19 	cmp.w	lr, #25
 8010ddc:	d801      	bhi.n	8010de2 <_strtol_l.constprop.0+0xb2>
 8010dde:	3c37      	subs	r4, #55	; 0x37
 8010de0:	e7e2      	b.n	8010da8 <_strtol_l.constprop.0+0x78>
 8010de2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010de6:	f1be 0f19 	cmp.w	lr, #25
 8010dea:	d804      	bhi.n	8010df6 <_strtol_l.constprop.0+0xc6>
 8010dec:	3c57      	subs	r4, #87	; 0x57
 8010dee:	e7db      	b.n	8010da8 <_strtol_l.constprop.0+0x78>
 8010df0:	f04f 3cff 	mov.w	ip, #4294967295
 8010df4:	e7e6      	b.n	8010dc4 <_strtol_l.constprop.0+0x94>
 8010df6:	f1bc 0f00 	cmp.w	ip, #0
 8010dfa:	da05      	bge.n	8010e08 <_strtol_l.constprop.0+0xd8>
 8010dfc:	2322      	movs	r3, #34	; 0x22
 8010dfe:	6003      	str	r3, [r0, #0]
 8010e00:	4646      	mov	r6, r8
 8010e02:	b942      	cbnz	r2, 8010e16 <_strtol_l.constprop.0+0xe6>
 8010e04:	4630      	mov	r0, r6
 8010e06:	e79e      	b.n	8010d46 <_strtol_l.constprop.0+0x16>
 8010e08:	b107      	cbz	r7, 8010e0c <_strtol_l.constprop.0+0xdc>
 8010e0a:	4276      	negs	r6, r6
 8010e0c:	2a00      	cmp	r2, #0
 8010e0e:	d0f9      	beq.n	8010e04 <_strtol_l.constprop.0+0xd4>
 8010e10:	f1bc 0f00 	cmp.w	ip, #0
 8010e14:	d000      	beq.n	8010e18 <_strtol_l.constprop.0+0xe8>
 8010e16:	1e69      	subs	r1, r5, #1
 8010e18:	6011      	str	r1, [r2, #0]
 8010e1a:	e7f3      	b.n	8010e04 <_strtol_l.constprop.0+0xd4>
 8010e1c:	2430      	movs	r4, #48	; 0x30
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1b1      	bne.n	8010d86 <_strtol_l.constprop.0+0x56>
 8010e22:	2308      	movs	r3, #8
 8010e24:	e7af      	b.n	8010d86 <_strtol_l.constprop.0+0x56>
 8010e26:	2c30      	cmp	r4, #48	; 0x30
 8010e28:	d0a5      	beq.n	8010d76 <_strtol_l.constprop.0+0x46>
 8010e2a:	230a      	movs	r3, #10
 8010e2c:	e7ab      	b.n	8010d86 <_strtol_l.constprop.0+0x56>
 8010e2e:	bf00      	nop
 8010e30:	08014a11 	.word	0x08014a11

08010e34 <_strtol_r>:
 8010e34:	f7ff bf7c 	b.w	8010d30 <_strtol_l.constprop.0>

08010e38 <strtol>:
 8010e38:	4613      	mov	r3, r2
 8010e3a:	460a      	mov	r2, r1
 8010e3c:	4601      	mov	r1, r0
 8010e3e:	4802      	ldr	r0, [pc, #8]	; (8010e48 <strtol+0x10>)
 8010e40:	6800      	ldr	r0, [r0, #0]
 8010e42:	f7ff bf75 	b.w	8010d30 <_strtol_l.constprop.0>
 8010e46:	bf00      	nop
 8010e48:	20000058 	.word	0x20000058

08010e4c <_vsiprintf_r>:
 8010e4c:	b500      	push	{lr}
 8010e4e:	b09b      	sub	sp, #108	; 0x6c
 8010e50:	9100      	str	r1, [sp, #0]
 8010e52:	9104      	str	r1, [sp, #16]
 8010e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e58:	9105      	str	r1, [sp, #20]
 8010e5a:	9102      	str	r1, [sp, #8]
 8010e5c:	4905      	ldr	r1, [pc, #20]	; (8010e74 <_vsiprintf_r+0x28>)
 8010e5e:	9103      	str	r1, [sp, #12]
 8010e60:	4669      	mov	r1, sp
 8010e62:	f002 f86d 	bl	8012f40 <_svfiprintf_r>
 8010e66:	9b00      	ldr	r3, [sp, #0]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	701a      	strb	r2, [r3, #0]
 8010e6c:	b01b      	add	sp, #108	; 0x6c
 8010e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e72:	bf00      	nop
 8010e74:	ffff0208 	.word	0xffff0208

08010e78 <vsiprintf>:
 8010e78:	4613      	mov	r3, r2
 8010e7a:	460a      	mov	r2, r1
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	4802      	ldr	r0, [pc, #8]	; (8010e88 <vsiprintf+0x10>)
 8010e80:	6800      	ldr	r0, [r0, #0]
 8010e82:	f7ff bfe3 	b.w	8010e4c <_vsiprintf_r>
 8010e86:	bf00      	nop
 8010e88:	20000058 	.word	0x20000058

08010e8c <__assert_func>:
 8010e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e8e:	4614      	mov	r4, r2
 8010e90:	461a      	mov	r2, r3
 8010e92:	4b09      	ldr	r3, [pc, #36]	; (8010eb8 <__assert_func+0x2c>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4605      	mov	r5, r0
 8010e98:	68d8      	ldr	r0, [r3, #12]
 8010e9a:	b14c      	cbz	r4, 8010eb0 <__assert_func+0x24>
 8010e9c:	4b07      	ldr	r3, [pc, #28]	; (8010ebc <__assert_func+0x30>)
 8010e9e:	9100      	str	r1, [sp, #0]
 8010ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ea4:	4906      	ldr	r1, [pc, #24]	; (8010ec0 <__assert_func+0x34>)
 8010ea6:	462b      	mov	r3, r5
 8010ea8:	f000 fe88 	bl	8011bbc <fiprintf>
 8010eac:	f002 fb9e 	bl	80135ec <abort>
 8010eb0:	4b04      	ldr	r3, [pc, #16]	; (8010ec4 <__assert_func+0x38>)
 8010eb2:	461c      	mov	r4, r3
 8010eb4:	e7f3      	b.n	8010e9e <__assert_func+0x12>
 8010eb6:	bf00      	nop
 8010eb8:	20000058 	.word	0x20000058
 8010ebc:	080149d4 	.word	0x080149d4
 8010ec0:	080149e1 	.word	0x080149e1
 8010ec4:	08014a0f 	.word	0x08014a0f

08010ec8 <quorem>:
 8010ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	6903      	ldr	r3, [r0, #16]
 8010ece:	690c      	ldr	r4, [r1, #16]
 8010ed0:	42a3      	cmp	r3, r4
 8010ed2:	4607      	mov	r7, r0
 8010ed4:	f2c0 8081 	blt.w	8010fda <quorem+0x112>
 8010ed8:	3c01      	subs	r4, #1
 8010eda:	f101 0814 	add.w	r8, r1, #20
 8010ede:	f100 0514 	add.w	r5, r0, #20
 8010ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ee6:	9301      	str	r3, [sp, #4]
 8010ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010efc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f00:	d331      	bcc.n	8010f66 <quorem+0x9e>
 8010f02:	f04f 0e00 	mov.w	lr, #0
 8010f06:	4640      	mov	r0, r8
 8010f08:	46ac      	mov	ip, r5
 8010f0a:	46f2      	mov	sl, lr
 8010f0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f10:	b293      	uxth	r3, r2
 8010f12:	fb06 e303 	mla	r3, r6, r3, lr
 8010f16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8010f20:	f8dc a000 	ldr.w	sl, [ip]
 8010f24:	0c12      	lsrs	r2, r2, #16
 8010f26:	fa13 f38a 	uxtah	r3, r3, sl
 8010f2a:	fb06 e202 	mla	r2, r6, r2, lr
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	9b00      	ldr	r3, [sp, #0]
 8010f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010f36:	b292      	uxth	r2, r2
 8010f38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f40:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f44:	4581      	cmp	r9, r0
 8010f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f4a:	f84c 3b04 	str.w	r3, [ip], #4
 8010f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010f52:	d2db      	bcs.n	8010f0c <quorem+0x44>
 8010f54:	f855 300b 	ldr.w	r3, [r5, fp]
 8010f58:	b92b      	cbnz	r3, 8010f66 <quorem+0x9e>
 8010f5a:	9b01      	ldr	r3, [sp, #4]
 8010f5c:	3b04      	subs	r3, #4
 8010f5e:	429d      	cmp	r5, r3
 8010f60:	461a      	mov	r2, r3
 8010f62:	d32e      	bcc.n	8010fc2 <quorem+0xfa>
 8010f64:	613c      	str	r4, [r7, #16]
 8010f66:	4638      	mov	r0, r7
 8010f68:	f001 fca2 	bl	80128b0 <__mcmp>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	db24      	blt.n	8010fba <quorem+0xf2>
 8010f70:	3601      	adds	r6, #1
 8010f72:	4628      	mov	r0, r5
 8010f74:	f04f 0c00 	mov.w	ip, #0
 8010f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f7c:	f8d0 e000 	ldr.w	lr, [r0]
 8010f80:	b293      	uxth	r3, r2
 8010f82:	ebac 0303 	sub.w	r3, ip, r3
 8010f86:	0c12      	lsrs	r2, r2, #16
 8010f88:	fa13 f38e 	uxtah	r3, r3, lr
 8010f8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f9a:	45c1      	cmp	r9, r8
 8010f9c:	f840 3b04 	str.w	r3, [r0], #4
 8010fa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010fa4:	d2e8      	bcs.n	8010f78 <quorem+0xb0>
 8010fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fae:	b922      	cbnz	r2, 8010fba <quorem+0xf2>
 8010fb0:	3b04      	subs	r3, #4
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	d30a      	bcc.n	8010fce <quorem+0x106>
 8010fb8:	613c      	str	r4, [r7, #16]
 8010fba:	4630      	mov	r0, r6
 8010fbc:	b003      	add	sp, #12
 8010fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc2:	6812      	ldr	r2, [r2, #0]
 8010fc4:	3b04      	subs	r3, #4
 8010fc6:	2a00      	cmp	r2, #0
 8010fc8:	d1cc      	bne.n	8010f64 <quorem+0x9c>
 8010fca:	3c01      	subs	r4, #1
 8010fcc:	e7c7      	b.n	8010f5e <quorem+0x96>
 8010fce:	6812      	ldr	r2, [r2, #0]
 8010fd0:	3b04      	subs	r3, #4
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d1f0      	bne.n	8010fb8 <quorem+0xf0>
 8010fd6:	3c01      	subs	r4, #1
 8010fd8:	e7eb      	b.n	8010fb2 <quorem+0xea>
 8010fda:	2000      	movs	r0, #0
 8010fdc:	e7ee      	b.n	8010fbc <quorem+0xf4>
	...

08010fe0 <_dtoa_r>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	ed2d 8b04 	vpush	{d8-d9}
 8010fe8:	ec57 6b10 	vmov	r6, r7, d0
 8010fec:	b093      	sub	sp, #76	; 0x4c
 8010fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ff4:	9106      	str	r1, [sp, #24]
 8010ff6:	ee10 aa10 	vmov	sl, s0
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8010ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8011000:	46bb      	mov	fp, r7
 8011002:	b975      	cbnz	r5, 8011022 <_dtoa_r+0x42>
 8011004:	2010      	movs	r0, #16
 8011006:	f001 f95f 	bl	80122c8 <malloc>
 801100a:	4602      	mov	r2, r0
 801100c:	6260      	str	r0, [r4, #36]	; 0x24
 801100e:	b920      	cbnz	r0, 801101a <_dtoa_r+0x3a>
 8011010:	4ba7      	ldr	r3, [pc, #668]	; (80112b0 <_dtoa_r+0x2d0>)
 8011012:	21ea      	movs	r1, #234	; 0xea
 8011014:	48a7      	ldr	r0, [pc, #668]	; (80112b4 <_dtoa_r+0x2d4>)
 8011016:	f7ff ff39 	bl	8010e8c <__assert_func>
 801101a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801101e:	6005      	str	r5, [r0, #0]
 8011020:	60c5      	str	r5, [r0, #12]
 8011022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011024:	6819      	ldr	r1, [r3, #0]
 8011026:	b151      	cbz	r1, 801103e <_dtoa_r+0x5e>
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	604a      	str	r2, [r1, #4]
 801102c:	2301      	movs	r3, #1
 801102e:	4093      	lsls	r3, r2
 8011030:	608b      	str	r3, [r1, #8]
 8011032:	4620      	mov	r0, r4
 8011034:	f001 f9b0 	bl	8012398 <_Bfree>
 8011038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]
 801103e:	1e3b      	subs	r3, r7, #0
 8011040:	bfaa      	itet	ge
 8011042:	2300      	movge	r3, #0
 8011044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011048:	f8c8 3000 	strge.w	r3, [r8]
 801104c:	4b9a      	ldr	r3, [pc, #616]	; (80112b8 <_dtoa_r+0x2d8>)
 801104e:	bfbc      	itt	lt
 8011050:	2201      	movlt	r2, #1
 8011052:	f8c8 2000 	strlt.w	r2, [r8]
 8011056:	ea33 030b 	bics.w	r3, r3, fp
 801105a:	d11b      	bne.n	8011094 <_dtoa_r+0xb4>
 801105c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801105e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011062:	6013      	str	r3, [r2, #0]
 8011064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011068:	4333      	orrs	r3, r6
 801106a:	f000 8592 	beq.w	8011b92 <_dtoa_r+0xbb2>
 801106e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011070:	b963      	cbnz	r3, 801108c <_dtoa_r+0xac>
 8011072:	4b92      	ldr	r3, [pc, #584]	; (80112bc <_dtoa_r+0x2dc>)
 8011074:	e022      	b.n	80110bc <_dtoa_r+0xdc>
 8011076:	4b92      	ldr	r3, [pc, #584]	; (80112c0 <_dtoa_r+0x2e0>)
 8011078:	9301      	str	r3, [sp, #4]
 801107a:	3308      	adds	r3, #8
 801107c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	9801      	ldr	r0, [sp, #4]
 8011082:	b013      	add	sp, #76	; 0x4c
 8011084:	ecbd 8b04 	vpop	{d8-d9}
 8011088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108c:	4b8b      	ldr	r3, [pc, #556]	; (80112bc <_dtoa_r+0x2dc>)
 801108e:	9301      	str	r3, [sp, #4]
 8011090:	3303      	adds	r3, #3
 8011092:	e7f3      	b.n	801107c <_dtoa_r+0x9c>
 8011094:	2200      	movs	r2, #0
 8011096:	2300      	movs	r3, #0
 8011098:	4650      	mov	r0, sl
 801109a:	4659      	mov	r1, fp
 801109c:	f7ef fd34 	bl	8000b08 <__aeabi_dcmpeq>
 80110a0:	ec4b ab19 	vmov	d9, sl, fp
 80110a4:	4680      	mov	r8, r0
 80110a6:	b158      	cbz	r0, 80110c0 <_dtoa_r+0xe0>
 80110a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110aa:	2301      	movs	r3, #1
 80110ac:	6013      	str	r3, [r2, #0]
 80110ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 856b 	beq.w	8011b8c <_dtoa_r+0xbac>
 80110b6:	4883      	ldr	r0, [pc, #524]	; (80112c4 <_dtoa_r+0x2e4>)
 80110b8:	6018      	str	r0, [r3, #0]
 80110ba:	1e43      	subs	r3, r0, #1
 80110bc:	9301      	str	r3, [sp, #4]
 80110be:	e7df      	b.n	8011080 <_dtoa_r+0xa0>
 80110c0:	ec4b ab10 	vmov	d0, sl, fp
 80110c4:	aa10      	add	r2, sp, #64	; 0x40
 80110c6:	a911      	add	r1, sp, #68	; 0x44
 80110c8:	4620      	mov	r0, r4
 80110ca:	f001 fd13 	bl	8012af4 <__d2b>
 80110ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80110d2:	ee08 0a10 	vmov	s16, r0
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	f000 8084 	beq.w	80111e4 <_dtoa_r+0x204>
 80110dc:	ee19 3a90 	vmov	r3, s19
 80110e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80110e8:	4656      	mov	r6, sl
 80110ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80110ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80110f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80110f6:	4b74      	ldr	r3, [pc, #464]	; (80112c8 <_dtoa_r+0x2e8>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	4630      	mov	r0, r6
 80110fc:	4639      	mov	r1, r7
 80110fe:	f7ef f8e3 	bl	80002c8 <__aeabi_dsub>
 8011102:	a365      	add	r3, pc, #404	; (adr r3, 8011298 <_dtoa_r+0x2b8>)
 8011104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011108:	f7ef fa96 	bl	8000638 <__aeabi_dmul>
 801110c:	a364      	add	r3, pc, #400	; (adr r3, 80112a0 <_dtoa_r+0x2c0>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef f8db 	bl	80002cc <__adddf3>
 8011116:	4606      	mov	r6, r0
 8011118:	4628      	mov	r0, r5
 801111a:	460f      	mov	r7, r1
 801111c:	f7ef fa22 	bl	8000564 <__aeabi_i2d>
 8011120:	a361      	add	r3, pc, #388	; (adr r3, 80112a8 <_dtoa_r+0x2c8>)
 8011122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011126:	f7ef fa87 	bl	8000638 <__aeabi_dmul>
 801112a:	4602      	mov	r2, r0
 801112c:	460b      	mov	r3, r1
 801112e:	4630      	mov	r0, r6
 8011130:	4639      	mov	r1, r7
 8011132:	f7ef f8cb 	bl	80002cc <__adddf3>
 8011136:	4606      	mov	r6, r0
 8011138:	460f      	mov	r7, r1
 801113a:	f7ef fd2d 	bl	8000b98 <__aeabi_d2iz>
 801113e:	2200      	movs	r2, #0
 8011140:	9000      	str	r0, [sp, #0]
 8011142:	2300      	movs	r3, #0
 8011144:	4630      	mov	r0, r6
 8011146:	4639      	mov	r1, r7
 8011148:	f7ef fce8 	bl	8000b1c <__aeabi_dcmplt>
 801114c:	b150      	cbz	r0, 8011164 <_dtoa_r+0x184>
 801114e:	9800      	ldr	r0, [sp, #0]
 8011150:	f7ef fa08 	bl	8000564 <__aeabi_i2d>
 8011154:	4632      	mov	r2, r6
 8011156:	463b      	mov	r3, r7
 8011158:	f7ef fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 801115c:	b910      	cbnz	r0, 8011164 <_dtoa_r+0x184>
 801115e:	9b00      	ldr	r3, [sp, #0]
 8011160:	3b01      	subs	r3, #1
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	2b16      	cmp	r3, #22
 8011168:	d85a      	bhi.n	8011220 <_dtoa_r+0x240>
 801116a:	9a00      	ldr	r2, [sp, #0]
 801116c:	4b57      	ldr	r3, [pc, #348]	; (80112cc <_dtoa_r+0x2ec>)
 801116e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	ec51 0b19 	vmov	r0, r1, d9
 801117a:	f7ef fccf 	bl	8000b1c <__aeabi_dcmplt>
 801117e:	2800      	cmp	r0, #0
 8011180:	d050      	beq.n	8011224 <_dtoa_r+0x244>
 8011182:	9b00      	ldr	r3, [sp, #0]
 8011184:	3b01      	subs	r3, #1
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	2300      	movs	r3, #0
 801118a:	930b      	str	r3, [sp, #44]	; 0x2c
 801118c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801118e:	1b5d      	subs	r5, r3, r5
 8011190:	1e6b      	subs	r3, r5, #1
 8011192:	9305      	str	r3, [sp, #20]
 8011194:	bf45      	ittet	mi
 8011196:	f1c5 0301 	rsbmi	r3, r5, #1
 801119a:	9304      	strmi	r3, [sp, #16]
 801119c:	2300      	movpl	r3, #0
 801119e:	2300      	movmi	r3, #0
 80111a0:	bf4c      	ite	mi
 80111a2:	9305      	strmi	r3, [sp, #20]
 80111a4:	9304      	strpl	r3, [sp, #16]
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	db3d      	blt.n	8011228 <_dtoa_r+0x248>
 80111ac:	9b05      	ldr	r3, [sp, #20]
 80111ae:	9a00      	ldr	r2, [sp, #0]
 80111b0:	920a      	str	r2, [sp, #40]	; 0x28
 80111b2:	4413      	add	r3, r2
 80111b4:	9305      	str	r3, [sp, #20]
 80111b6:	2300      	movs	r3, #0
 80111b8:	9307      	str	r3, [sp, #28]
 80111ba:	9b06      	ldr	r3, [sp, #24]
 80111bc:	2b09      	cmp	r3, #9
 80111be:	f200 8089 	bhi.w	80112d4 <_dtoa_r+0x2f4>
 80111c2:	2b05      	cmp	r3, #5
 80111c4:	bfc4      	itt	gt
 80111c6:	3b04      	subgt	r3, #4
 80111c8:	9306      	strgt	r3, [sp, #24]
 80111ca:	9b06      	ldr	r3, [sp, #24]
 80111cc:	f1a3 0302 	sub.w	r3, r3, #2
 80111d0:	bfcc      	ite	gt
 80111d2:	2500      	movgt	r5, #0
 80111d4:	2501      	movle	r5, #1
 80111d6:	2b03      	cmp	r3, #3
 80111d8:	f200 8087 	bhi.w	80112ea <_dtoa_r+0x30a>
 80111dc:	e8df f003 	tbb	[pc, r3]
 80111e0:	59383a2d 	.word	0x59383a2d
 80111e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80111e8:	441d      	add	r5, r3
 80111ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80111ee:	2b20      	cmp	r3, #32
 80111f0:	bfc1      	itttt	gt
 80111f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80111f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80111fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80111fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011202:	bfda      	itte	le
 8011204:	f1c3 0320 	rsble	r3, r3, #32
 8011208:	fa06 f003 	lslle.w	r0, r6, r3
 801120c:	4318      	orrgt	r0, r3
 801120e:	f7ef f999 	bl	8000544 <__aeabi_ui2d>
 8011212:	2301      	movs	r3, #1
 8011214:	4606      	mov	r6, r0
 8011216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801121a:	3d01      	subs	r5, #1
 801121c:	930e      	str	r3, [sp, #56]	; 0x38
 801121e:	e76a      	b.n	80110f6 <_dtoa_r+0x116>
 8011220:	2301      	movs	r3, #1
 8011222:	e7b2      	b.n	801118a <_dtoa_r+0x1aa>
 8011224:	900b      	str	r0, [sp, #44]	; 0x2c
 8011226:	e7b1      	b.n	801118c <_dtoa_r+0x1ac>
 8011228:	9b04      	ldr	r3, [sp, #16]
 801122a:	9a00      	ldr	r2, [sp, #0]
 801122c:	1a9b      	subs	r3, r3, r2
 801122e:	9304      	str	r3, [sp, #16]
 8011230:	4253      	negs	r3, r2
 8011232:	9307      	str	r3, [sp, #28]
 8011234:	2300      	movs	r3, #0
 8011236:	930a      	str	r3, [sp, #40]	; 0x28
 8011238:	e7bf      	b.n	80111ba <_dtoa_r+0x1da>
 801123a:	2300      	movs	r3, #0
 801123c:	9308      	str	r3, [sp, #32]
 801123e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	dc55      	bgt.n	80112f0 <_dtoa_r+0x310>
 8011244:	2301      	movs	r3, #1
 8011246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801124a:	461a      	mov	r2, r3
 801124c:	9209      	str	r2, [sp, #36]	; 0x24
 801124e:	e00c      	b.n	801126a <_dtoa_r+0x28a>
 8011250:	2301      	movs	r3, #1
 8011252:	e7f3      	b.n	801123c <_dtoa_r+0x25c>
 8011254:	2300      	movs	r3, #0
 8011256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011258:	9308      	str	r3, [sp, #32]
 801125a:	9b00      	ldr	r3, [sp, #0]
 801125c:	4413      	add	r3, r2
 801125e:	9302      	str	r3, [sp, #8]
 8011260:	3301      	adds	r3, #1
 8011262:	2b01      	cmp	r3, #1
 8011264:	9303      	str	r3, [sp, #12]
 8011266:	bfb8      	it	lt
 8011268:	2301      	movlt	r3, #1
 801126a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801126c:	2200      	movs	r2, #0
 801126e:	6042      	str	r2, [r0, #4]
 8011270:	2204      	movs	r2, #4
 8011272:	f102 0614 	add.w	r6, r2, #20
 8011276:	429e      	cmp	r6, r3
 8011278:	6841      	ldr	r1, [r0, #4]
 801127a:	d93d      	bls.n	80112f8 <_dtoa_r+0x318>
 801127c:	4620      	mov	r0, r4
 801127e:	f001 f84b 	bl	8012318 <_Balloc>
 8011282:	9001      	str	r0, [sp, #4]
 8011284:	2800      	cmp	r0, #0
 8011286:	d13b      	bne.n	8011300 <_dtoa_r+0x320>
 8011288:	4b11      	ldr	r3, [pc, #68]	; (80112d0 <_dtoa_r+0x2f0>)
 801128a:	4602      	mov	r2, r0
 801128c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011290:	e6c0      	b.n	8011014 <_dtoa_r+0x34>
 8011292:	2301      	movs	r3, #1
 8011294:	e7df      	b.n	8011256 <_dtoa_r+0x276>
 8011296:	bf00      	nop
 8011298:	636f4361 	.word	0x636f4361
 801129c:	3fd287a7 	.word	0x3fd287a7
 80112a0:	8b60c8b3 	.word	0x8b60c8b3
 80112a4:	3fc68a28 	.word	0x3fc68a28
 80112a8:	509f79fb 	.word	0x509f79fb
 80112ac:	3fd34413 	.word	0x3fd34413
 80112b0:	08014960 	.word	0x08014960
 80112b4:	08014b1e 	.word	0x08014b1e
 80112b8:	7ff00000 	.word	0x7ff00000
 80112bc:	08014b1a 	.word	0x08014b1a
 80112c0:	08014b11 	.word	0x08014b11
 80112c4:	080148e1 	.word	0x080148e1
 80112c8:	3ff80000 	.word	0x3ff80000
 80112cc:	08014c88 	.word	0x08014c88
 80112d0:	08014b79 	.word	0x08014b79
 80112d4:	2501      	movs	r5, #1
 80112d6:	2300      	movs	r3, #0
 80112d8:	9306      	str	r3, [sp, #24]
 80112da:	9508      	str	r5, [sp, #32]
 80112dc:	f04f 33ff 	mov.w	r3, #4294967295
 80112e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112e4:	2200      	movs	r2, #0
 80112e6:	2312      	movs	r3, #18
 80112e8:	e7b0      	b.n	801124c <_dtoa_r+0x26c>
 80112ea:	2301      	movs	r3, #1
 80112ec:	9308      	str	r3, [sp, #32]
 80112ee:	e7f5      	b.n	80112dc <_dtoa_r+0x2fc>
 80112f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112f6:	e7b8      	b.n	801126a <_dtoa_r+0x28a>
 80112f8:	3101      	adds	r1, #1
 80112fa:	6041      	str	r1, [r0, #4]
 80112fc:	0052      	lsls	r2, r2, #1
 80112fe:	e7b8      	b.n	8011272 <_dtoa_r+0x292>
 8011300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011302:	9a01      	ldr	r2, [sp, #4]
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	9b03      	ldr	r3, [sp, #12]
 8011308:	2b0e      	cmp	r3, #14
 801130a:	f200 809d 	bhi.w	8011448 <_dtoa_r+0x468>
 801130e:	2d00      	cmp	r5, #0
 8011310:	f000 809a 	beq.w	8011448 <_dtoa_r+0x468>
 8011314:	9b00      	ldr	r3, [sp, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	dd32      	ble.n	8011380 <_dtoa_r+0x3a0>
 801131a:	4ab7      	ldr	r2, [pc, #732]	; (80115f8 <_dtoa_r+0x618>)
 801131c:	f003 030f 	and.w	r3, r3, #15
 8011320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011328:	9b00      	ldr	r3, [sp, #0]
 801132a:	05d8      	lsls	r0, r3, #23
 801132c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011330:	d516      	bpl.n	8011360 <_dtoa_r+0x380>
 8011332:	4bb2      	ldr	r3, [pc, #712]	; (80115fc <_dtoa_r+0x61c>)
 8011334:	ec51 0b19 	vmov	r0, r1, d9
 8011338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801133c:	f7ef faa6 	bl	800088c <__aeabi_ddiv>
 8011340:	f007 070f 	and.w	r7, r7, #15
 8011344:	4682      	mov	sl, r0
 8011346:	468b      	mov	fp, r1
 8011348:	2503      	movs	r5, #3
 801134a:	4eac      	ldr	r6, [pc, #688]	; (80115fc <_dtoa_r+0x61c>)
 801134c:	b957      	cbnz	r7, 8011364 <_dtoa_r+0x384>
 801134e:	4642      	mov	r2, r8
 8011350:	464b      	mov	r3, r9
 8011352:	4650      	mov	r0, sl
 8011354:	4659      	mov	r1, fp
 8011356:	f7ef fa99 	bl	800088c <__aeabi_ddiv>
 801135a:	4682      	mov	sl, r0
 801135c:	468b      	mov	fp, r1
 801135e:	e028      	b.n	80113b2 <_dtoa_r+0x3d2>
 8011360:	2502      	movs	r5, #2
 8011362:	e7f2      	b.n	801134a <_dtoa_r+0x36a>
 8011364:	07f9      	lsls	r1, r7, #31
 8011366:	d508      	bpl.n	801137a <_dtoa_r+0x39a>
 8011368:	4640      	mov	r0, r8
 801136a:	4649      	mov	r1, r9
 801136c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011370:	f7ef f962 	bl	8000638 <__aeabi_dmul>
 8011374:	3501      	adds	r5, #1
 8011376:	4680      	mov	r8, r0
 8011378:	4689      	mov	r9, r1
 801137a:	107f      	asrs	r7, r7, #1
 801137c:	3608      	adds	r6, #8
 801137e:	e7e5      	b.n	801134c <_dtoa_r+0x36c>
 8011380:	f000 809b 	beq.w	80114ba <_dtoa_r+0x4da>
 8011384:	9b00      	ldr	r3, [sp, #0]
 8011386:	4f9d      	ldr	r7, [pc, #628]	; (80115fc <_dtoa_r+0x61c>)
 8011388:	425e      	negs	r6, r3
 801138a:	4b9b      	ldr	r3, [pc, #620]	; (80115f8 <_dtoa_r+0x618>)
 801138c:	f006 020f 	and.w	r2, r6, #15
 8011390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	ec51 0b19 	vmov	r0, r1, d9
 801139c:	f7ef f94c 	bl	8000638 <__aeabi_dmul>
 80113a0:	1136      	asrs	r6, r6, #4
 80113a2:	4682      	mov	sl, r0
 80113a4:	468b      	mov	fp, r1
 80113a6:	2300      	movs	r3, #0
 80113a8:	2502      	movs	r5, #2
 80113aa:	2e00      	cmp	r6, #0
 80113ac:	d17a      	bne.n	80114a4 <_dtoa_r+0x4c4>
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d1d3      	bne.n	801135a <_dtoa_r+0x37a>
 80113b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	f000 8082 	beq.w	80114be <_dtoa_r+0x4de>
 80113ba:	4b91      	ldr	r3, [pc, #580]	; (8011600 <_dtoa_r+0x620>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4650      	mov	r0, sl
 80113c0:	4659      	mov	r1, fp
 80113c2:	f7ef fbab 	bl	8000b1c <__aeabi_dcmplt>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d079      	beq.n	80114be <_dtoa_r+0x4de>
 80113ca:	9b03      	ldr	r3, [sp, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d076      	beq.n	80114be <_dtoa_r+0x4de>
 80113d0:	9b02      	ldr	r3, [sp, #8]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	dd36      	ble.n	8011444 <_dtoa_r+0x464>
 80113d6:	9b00      	ldr	r3, [sp, #0]
 80113d8:	4650      	mov	r0, sl
 80113da:	4659      	mov	r1, fp
 80113dc:	1e5f      	subs	r7, r3, #1
 80113de:	2200      	movs	r2, #0
 80113e0:	4b88      	ldr	r3, [pc, #544]	; (8011604 <_dtoa_r+0x624>)
 80113e2:	f7ef f929 	bl	8000638 <__aeabi_dmul>
 80113e6:	9e02      	ldr	r6, [sp, #8]
 80113e8:	4682      	mov	sl, r0
 80113ea:	468b      	mov	fp, r1
 80113ec:	3501      	adds	r5, #1
 80113ee:	4628      	mov	r0, r5
 80113f0:	f7ef f8b8 	bl	8000564 <__aeabi_i2d>
 80113f4:	4652      	mov	r2, sl
 80113f6:	465b      	mov	r3, fp
 80113f8:	f7ef f91e 	bl	8000638 <__aeabi_dmul>
 80113fc:	4b82      	ldr	r3, [pc, #520]	; (8011608 <_dtoa_r+0x628>)
 80113fe:	2200      	movs	r2, #0
 8011400:	f7ee ff64 	bl	80002cc <__adddf3>
 8011404:	46d0      	mov	r8, sl
 8011406:	46d9      	mov	r9, fp
 8011408:	4682      	mov	sl, r0
 801140a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801140e:	2e00      	cmp	r6, #0
 8011410:	d158      	bne.n	80114c4 <_dtoa_r+0x4e4>
 8011412:	4b7e      	ldr	r3, [pc, #504]	; (801160c <_dtoa_r+0x62c>)
 8011414:	2200      	movs	r2, #0
 8011416:	4640      	mov	r0, r8
 8011418:	4649      	mov	r1, r9
 801141a:	f7ee ff55 	bl	80002c8 <__aeabi_dsub>
 801141e:	4652      	mov	r2, sl
 8011420:	465b      	mov	r3, fp
 8011422:	4680      	mov	r8, r0
 8011424:	4689      	mov	r9, r1
 8011426:	f7ef fb97 	bl	8000b58 <__aeabi_dcmpgt>
 801142a:	2800      	cmp	r0, #0
 801142c:	f040 8295 	bne.w	801195a <_dtoa_r+0x97a>
 8011430:	4652      	mov	r2, sl
 8011432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011436:	4640      	mov	r0, r8
 8011438:	4649      	mov	r1, r9
 801143a:	f7ef fb6f 	bl	8000b1c <__aeabi_dcmplt>
 801143e:	2800      	cmp	r0, #0
 8011440:	f040 8289 	bne.w	8011956 <_dtoa_r+0x976>
 8011444:	ec5b ab19 	vmov	sl, fp, d9
 8011448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801144a:	2b00      	cmp	r3, #0
 801144c:	f2c0 8148 	blt.w	80116e0 <_dtoa_r+0x700>
 8011450:	9a00      	ldr	r2, [sp, #0]
 8011452:	2a0e      	cmp	r2, #14
 8011454:	f300 8144 	bgt.w	80116e0 <_dtoa_r+0x700>
 8011458:	4b67      	ldr	r3, [pc, #412]	; (80115f8 <_dtoa_r+0x618>)
 801145a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801145e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011464:	2b00      	cmp	r3, #0
 8011466:	f280 80d5 	bge.w	8011614 <_dtoa_r+0x634>
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f300 80d1 	bgt.w	8011614 <_dtoa_r+0x634>
 8011472:	f040 826f 	bne.w	8011954 <_dtoa_r+0x974>
 8011476:	4b65      	ldr	r3, [pc, #404]	; (801160c <_dtoa_r+0x62c>)
 8011478:	2200      	movs	r2, #0
 801147a:	4640      	mov	r0, r8
 801147c:	4649      	mov	r1, r9
 801147e:	f7ef f8db 	bl	8000638 <__aeabi_dmul>
 8011482:	4652      	mov	r2, sl
 8011484:	465b      	mov	r3, fp
 8011486:	f7ef fb5d 	bl	8000b44 <__aeabi_dcmpge>
 801148a:	9e03      	ldr	r6, [sp, #12]
 801148c:	4637      	mov	r7, r6
 801148e:	2800      	cmp	r0, #0
 8011490:	f040 8245 	bne.w	801191e <_dtoa_r+0x93e>
 8011494:	9d01      	ldr	r5, [sp, #4]
 8011496:	2331      	movs	r3, #49	; 0x31
 8011498:	f805 3b01 	strb.w	r3, [r5], #1
 801149c:	9b00      	ldr	r3, [sp, #0]
 801149e:	3301      	adds	r3, #1
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	e240      	b.n	8011926 <_dtoa_r+0x946>
 80114a4:	07f2      	lsls	r2, r6, #31
 80114a6:	d505      	bpl.n	80114b4 <_dtoa_r+0x4d4>
 80114a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114ac:	f7ef f8c4 	bl	8000638 <__aeabi_dmul>
 80114b0:	3501      	adds	r5, #1
 80114b2:	2301      	movs	r3, #1
 80114b4:	1076      	asrs	r6, r6, #1
 80114b6:	3708      	adds	r7, #8
 80114b8:	e777      	b.n	80113aa <_dtoa_r+0x3ca>
 80114ba:	2502      	movs	r5, #2
 80114bc:	e779      	b.n	80113b2 <_dtoa_r+0x3d2>
 80114be:	9f00      	ldr	r7, [sp, #0]
 80114c0:	9e03      	ldr	r6, [sp, #12]
 80114c2:	e794      	b.n	80113ee <_dtoa_r+0x40e>
 80114c4:	9901      	ldr	r1, [sp, #4]
 80114c6:	4b4c      	ldr	r3, [pc, #304]	; (80115f8 <_dtoa_r+0x618>)
 80114c8:	4431      	add	r1, r6
 80114ca:	910d      	str	r1, [sp, #52]	; 0x34
 80114cc:	9908      	ldr	r1, [sp, #32]
 80114ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80114d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80114d6:	2900      	cmp	r1, #0
 80114d8:	d043      	beq.n	8011562 <_dtoa_r+0x582>
 80114da:	494d      	ldr	r1, [pc, #308]	; (8011610 <_dtoa_r+0x630>)
 80114dc:	2000      	movs	r0, #0
 80114de:	f7ef f9d5 	bl	800088c <__aeabi_ddiv>
 80114e2:	4652      	mov	r2, sl
 80114e4:	465b      	mov	r3, fp
 80114e6:	f7ee feef 	bl	80002c8 <__aeabi_dsub>
 80114ea:	9d01      	ldr	r5, [sp, #4]
 80114ec:	4682      	mov	sl, r0
 80114ee:	468b      	mov	fp, r1
 80114f0:	4649      	mov	r1, r9
 80114f2:	4640      	mov	r0, r8
 80114f4:	f7ef fb50 	bl	8000b98 <__aeabi_d2iz>
 80114f8:	4606      	mov	r6, r0
 80114fa:	f7ef f833 	bl	8000564 <__aeabi_i2d>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	f7ee fedf 	bl	80002c8 <__aeabi_dsub>
 801150a:	3630      	adds	r6, #48	; 0x30
 801150c:	f805 6b01 	strb.w	r6, [r5], #1
 8011510:	4652      	mov	r2, sl
 8011512:	465b      	mov	r3, fp
 8011514:	4680      	mov	r8, r0
 8011516:	4689      	mov	r9, r1
 8011518:	f7ef fb00 	bl	8000b1c <__aeabi_dcmplt>
 801151c:	2800      	cmp	r0, #0
 801151e:	d163      	bne.n	80115e8 <_dtoa_r+0x608>
 8011520:	4642      	mov	r2, r8
 8011522:	464b      	mov	r3, r9
 8011524:	4936      	ldr	r1, [pc, #216]	; (8011600 <_dtoa_r+0x620>)
 8011526:	2000      	movs	r0, #0
 8011528:	f7ee fece 	bl	80002c8 <__aeabi_dsub>
 801152c:	4652      	mov	r2, sl
 801152e:	465b      	mov	r3, fp
 8011530:	f7ef faf4 	bl	8000b1c <__aeabi_dcmplt>
 8011534:	2800      	cmp	r0, #0
 8011536:	f040 80b5 	bne.w	80116a4 <_dtoa_r+0x6c4>
 801153a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801153c:	429d      	cmp	r5, r3
 801153e:	d081      	beq.n	8011444 <_dtoa_r+0x464>
 8011540:	4b30      	ldr	r3, [pc, #192]	; (8011604 <_dtoa_r+0x624>)
 8011542:	2200      	movs	r2, #0
 8011544:	4650      	mov	r0, sl
 8011546:	4659      	mov	r1, fp
 8011548:	f7ef f876 	bl	8000638 <__aeabi_dmul>
 801154c:	4b2d      	ldr	r3, [pc, #180]	; (8011604 <_dtoa_r+0x624>)
 801154e:	4682      	mov	sl, r0
 8011550:	468b      	mov	fp, r1
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	2200      	movs	r2, #0
 8011558:	f7ef f86e 	bl	8000638 <__aeabi_dmul>
 801155c:	4680      	mov	r8, r0
 801155e:	4689      	mov	r9, r1
 8011560:	e7c6      	b.n	80114f0 <_dtoa_r+0x510>
 8011562:	4650      	mov	r0, sl
 8011564:	4659      	mov	r1, fp
 8011566:	f7ef f867 	bl	8000638 <__aeabi_dmul>
 801156a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801156c:	9d01      	ldr	r5, [sp, #4]
 801156e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011570:	4682      	mov	sl, r0
 8011572:	468b      	mov	fp, r1
 8011574:	4649      	mov	r1, r9
 8011576:	4640      	mov	r0, r8
 8011578:	f7ef fb0e 	bl	8000b98 <__aeabi_d2iz>
 801157c:	4606      	mov	r6, r0
 801157e:	f7ee fff1 	bl	8000564 <__aeabi_i2d>
 8011582:	3630      	adds	r6, #48	; 0x30
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4640      	mov	r0, r8
 801158a:	4649      	mov	r1, r9
 801158c:	f7ee fe9c 	bl	80002c8 <__aeabi_dsub>
 8011590:	f805 6b01 	strb.w	r6, [r5], #1
 8011594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011596:	429d      	cmp	r5, r3
 8011598:	4680      	mov	r8, r0
 801159a:	4689      	mov	r9, r1
 801159c:	f04f 0200 	mov.w	r2, #0
 80115a0:	d124      	bne.n	80115ec <_dtoa_r+0x60c>
 80115a2:	4b1b      	ldr	r3, [pc, #108]	; (8011610 <_dtoa_r+0x630>)
 80115a4:	4650      	mov	r0, sl
 80115a6:	4659      	mov	r1, fp
 80115a8:	f7ee fe90 	bl	80002cc <__adddf3>
 80115ac:	4602      	mov	r2, r0
 80115ae:	460b      	mov	r3, r1
 80115b0:	4640      	mov	r0, r8
 80115b2:	4649      	mov	r1, r9
 80115b4:	f7ef fad0 	bl	8000b58 <__aeabi_dcmpgt>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d173      	bne.n	80116a4 <_dtoa_r+0x6c4>
 80115bc:	4652      	mov	r2, sl
 80115be:	465b      	mov	r3, fp
 80115c0:	4913      	ldr	r1, [pc, #76]	; (8011610 <_dtoa_r+0x630>)
 80115c2:	2000      	movs	r0, #0
 80115c4:	f7ee fe80 	bl	80002c8 <__aeabi_dsub>
 80115c8:	4602      	mov	r2, r0
 80115ca:	460b      	mov	r3, r1
 80115cc:	4640      	mov	r0, r8
 80115ce:	4649      	mov	r1, r9
 80115d0:	f7ef faa4 	bl	8000b1c <__aeabi_dcmplt>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	f43f af35 	beq.w	8011444 <_dtoa_r+0x464>
 80115da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80115dc:	1e6b      	subs	r3, r5, #1
 80115de:	930f      	str	r3, [sp, #60]	; 0x3c
 80115e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80115e4:	2b30      	cmp	r3, #48	; 0x30
 80115e6:	d0f8      	beq.n	80115da <_dtoa_r+0x5fa>
 80115e8:	9700      	str	r7, [sp, #0]
 80115ea:	e049      	b.n	8011680 <_dtoa_r+0x6a0>
 80115ec:	4b05      	ldr	r3, [pc, #20]	; (8011604 <_dtoa_r+0x624>)
 80115ee:	f7ef f823 	bl	8000638 <__aeabi_dmul>
 80115f2:	4680      	mov	r8, r0
 80115f4:	4689      	mov	r9, r1
 80115f6:	e7bd      	b.n	8011574 <_dtoa_r+0x594>
 80115f8:	08014c88 	.word	0x08014c88
 80115fc:	08014c60 	.word	0x08014c60
 8011600:	3ff00000 	.word	0x3ff00000
 8011604:	40240000 	.word	0x40240000
 8011608:	401c0000 	.word	0x401c0000
 801160c:	40140000 	.word	0x40140000
 8011610:	3fe00000 	.word	0x3fe00000
 8011614:	9d01      	ldr	r5, [sp, #4]
 8011616:	4656      	mov	r6, sl
 8011618:	465f      	mov	r7, fp
 801161a:	4642      	mov	r2, r8
 801161c:	464b      	mov	r3, r9
 801161e:	4630      	mov	r0, r6
 8011620:	4639      	mov	r1, r7
 8011622:	f7ef f933 	bl	800088c <__aeabi_ddiv>
 8011626:	f7ef fab7 	bl	8000b98 <__aeabi_d2iz>
 801162a:	4682      	mov	sl, r0
 801162c:	f7ee ff9a 	bl	8000564 <__aeabi_i2d>
 8011630:	4642      	mov	r2, r8
 8011632:	464b      	mov	r3, r9
 8011634:	f7ef f800 	bl	8000638 <__aeabi_dmul>
 8011638:	4602      	mov	r2, r0
 801163a:	460b      	mov	r3, r1
 801163c:	4630      	mov	r0, r6
 801163e:	4639      	mov	r1, r7
 8011640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011644:	f7ee fe40 	bl	80002c8 <__aeabi_dsub>
 8011648:	f805 6b01 	strb.w	r6, [r5], #1
 801164c:	9e01      	ldr	r6, [sp, #4]
 801164e:	9f03      	ldr	r7, [sp, #12]
 8011650:	1bae      	subs	r6, r5, r6
 8011652:	42b7      	cmp	r7, r6
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	d135      	bne.n	80116c6 <_dtoa_r+0x6e6>
 801165a:	f7ee fe37 	bl	80002cc <__adddf3>
 801165e:	4642      	mov	r2, r8
 8011660:	464b      	mov	r3, r9
 8011662:	4606      	mov	r6, r0
 8011664:	460f      	mov	r7, r1
 8011666:	f7ef fa77 	bl	8000b58 <__aeabi_dcmpgt>
 801166a:	b9d0      	cbnz	r0, 80116a2 <_dtoa_r+0x6c2>
 801166c:	4642      	mov	r2, r8
 801166e:	464b      	mov	r3, r9
 8011670:	4630      	mov	r0, r6
 8011672:	4639      	mov	r1, r7
 8011674:	f7ef fa48 	bl	8000b08 <__aeabi_dcmpeq>
 8011678:	b110      	cbz	r0, 8011680 <_dtoa_r+0x6a0>
 801167a:	f01a 0f01 	tst.w	sl, #1
 801167e:	d110      	bne.n	80116a2 <_dtoa_r+0x6c2>
 8011680:	4620      	mov	r0, r4
 8011682:	ee18 1a10 	vmov	r1, s16
 8011686:	f000 fe87 	bl	8012398 <_Bfree>
 801168a:	2300      	movs	r3, #0
 801168c:	9800      	ldr	r0, [sp, #0]
 801168e:	702b      	strb	r3, [r5, #0]
 8011690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011692:	3001      	adds	r0, #1
 8011694:	6018      	str	r0, [r3, #0]
 8011696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011698:	2b00      	cmp	r3, #0
 801169a:	f43f acf1 	beq.w	8011080 <_dtoa_r+0xa0>
 801169e:	601d      	str	r5, [r3, #0]
 80116a0:	e4ee      	b.n	8011080 <_dtoa_r+0xa0>
 80116a2:	9f00      	ldr	r7, [sp, #0]
 80116a4:	462b      	mov	r3, r5
 80116a6:	461d      	mov	r5, r3
 80116a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116ac:	2a39      	cmp	r2, #57	; 0x39
 80116ae:	d106      	bne.n	80116be <_dtoa_r+0x6de>
 80116b0:	9a01      	ldr	r2, [sp, #4]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d1f7      	bne.n	80116a6 <_dtoa_r+0x6c6>
 80116b6:	9901      	ldr	r1, [sp, #4]
 80116b8:	2230      	movs	r2, #48	; 0x30
 80116ba:	3701      	adds	r7, #1
 80116bc:	700a      	strb	r2, [r1, #0]
 80116be:	781a      	ldrb	r2, [r3, #0]
 80116c0:	3201      	adds	r2, #1
 80116c2:	701a      	strb	r2, [r3, #0]
 80116c4:	e790      	b.n	80115e8 <_dtoa_r+0x608>
 80116c6:	4ba6      	ldr	r3, [pc, #664]	; (8011960 <_dtoa_r+0x980>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	f7ee ffb5 	bl	8000638 <__aeabi_dmul>
 80116ce:	2200      	movs	r2, #0
 80116d0:	2300      	movs	r3, #0
 80116d2:	4606      	mov	r6, r0
 80116d4:	460f      	mov	r7, r1
 80116d6:	f7ef fa17 	bl	8000b08 <__aeabi_dcmpeq>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d09d      	beq.n	801161a <_dtoa_r+0x63a>
 80116de:	e7cf      	b.n	8011680 <_dtoa_r+0x6a0>
 80116e0:	9a08      	ldr	r2, [sp, #32]
 80116e2:	2a00      	cmp	r2, #0
 80116e4:	f000 80d7 	beq.w	8011896 <_dtoa_r+0x8b6>
 80116e8:	9a06      	ldr	r2, [sp, #24]
 80116ea:	2a01      	cmp	r2, #1
 80116ec:	f300 80ba 	bgt.w	8011864 <_dtoa_r+0x884>
 80116f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	f000 80b2 	beq.w	801185c <_dtoa_r+0x87c>
 80116f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80116fc:	9e07      	ldr	r6, [sp, #28]
 80116fe:	9d04      	ldr	r5, [sp, #16]
 8011700:	9a04      	ldr	r2, [sp, #16]
 8011702:	441a      	add	r2, r3
 8011704:	9204      	str	r2, [sp, #16]
 8011706:	9a05      	ldr	r2, [sp, #20]
 8011708:	2101      	movs	r1, #1
 801170a:	441a      	add	r2, r3
 801170c:	4620      	mov	r0, r4
 801170e:	9205      	str	r2, [sp, #20]
 8011710:	f000 ff44 	bl	801259c <__i2b>
 8011714:	4607      	mov	r7, r0
 8011716:	2d00      	cmp	r5, #0
 8011718:	dd0c      	ble.n	8011734 <_dtoa_r+0x754>
 801171a:	9b05      	ldr	r3, [sp, #20]
 801171c:	2b00      	cmp	r3, #0
 801171e:	dd09      	ble.n	8011734 <_dtoa_r+0x754>
 8011720:	42ab      	cmp	r3, r5
 8011722:	9a04      	ldr	r2, [sp, #16]
 8011724:	bfa8      	it	ge
 8011726:	462b      	movge	r3, r5
 8011728:	1ad2      	subs	r2, r2, r3
 801172a:	9204      	str	r2, [sp, #16]
 801172c:	9a05      	ldr	r2, [sp, #20]
 801172e:	1aed      	subs	r5, r5, r3
 8011730:	1ad3      	subs	r3, r2, r3
 8011732:	9305      	str	r3, [sp, #20]
 8011734:	9b07      	ldr	r3, [sp, #28]
 8011736:	b31b      	cbz	r3, 8011780 <_dtoa_r+0x7a0>
 8011738:	9b08      	ldr	r3, [sp, #32]
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 80af 	beq.w	801189e <_dtoa_r+0x8be>
 8011740:	2e00      	cmp	r6, #0
 8011742:	dd13      	ble.n	801176c <_dtoa_r+0x78c>
 8011744:	4639      	mov	r1, r7
 8011746:	4632      	mov	r2, r6
 8011748:	4620      	mov	r0, r4
 801174a:	f000 ffe7 	bl	801271c <__pow5mult>
 801174e:	ee18 2a10 	vmov	r2, s16
 8011752:	4601      	mov	r1, r0
 8011754:	4607      	mov	r7, r0
 8011756:	4620      	mov	r0, r4
 8011758:	f000 ff36 	bl	80125c8 <__multiply>
 801175c:	ee18 1a10 	vmov	r1, s16
 8011760:	4680      	mov	r8, r0
 8011762:	4620      	mov	r0, r4
 8011764:	f000 fe18 	bl	8012398 <_Bfree>
 8011768:	ee08 8a10 	vmov	s16, r8
 801176c:	9b07      	ldr	r3, [sp, #28]
 801176e:	1b9a      	subs	r2, r3, r6
 8011770:	d006      	beq.n	8011780 <_dtoa_r+0x7a0>
 8011772:	ee18 1a10 	vmov	r1, s16
 8011776:	4620      	mov	r0, r4
 8011778:	f000 ffd0 	bl	801271c <__pow5mult>
 801177c:	ee08 0a10 	vmov	s16, r0
 8011780:	2101      	movs	r1, #1
 8011782:	4620      	mov	r0, r4
 8011784:	f000 ff0a 	bl	801259c <__i2b>
 8011788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801178a:	2b00      	cmp	r3, #0
 801178c:	4606      	mov	r6, r0
 801178e:	f340 8088 	ble.w	80118a2 <_dtoa_r+0x8c2>
 8011792:	461a      	mov	r2, r3
 8011794:	4601      	mov	r1, r0
 8011796:	4620      	mov	r0, r4
 8011798:	f000 ffc0 	bl	801271c <__pow5mult>
 801179c:	9b06      	ldr	r3, [sp, #24]
 801179e:	2b01      	cmp	r3, #1
 80117a0:	4606      	mov	r6, r0
 80117a2:	f340 8081 	ble.w	80118a8 <_dtoa_r+0x8c8>
 80117a6:	f04f 0800 	mov.w	r8, #0
 80117aa:	6933      	ldr	r3, [r6, #16]
 80117ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80117b0:	6918      	ldr	r0, [r3, #16]
 80117b2:	f000 fea3 	bl	80124fc <__hi0bits>
 80117b6:	f1c0 0020 	rsb	r0, r0, #32
 80117ba:	9b05      	ldr	r3, [sp, #20]
 80117bc:	4418      	add	r0, r3
 80117be:	f010 001f 	ands.w	r0, r0, #31
 80117c2:	f000 8092 	beq.w	80118ea <_dtoa_r+0x90a>
 80117c6:	f1c0 0320 	rsb	r3, r0, #32
 80117ca:	2b04      	cmp	r3, #4
 80117cc:	f340 808a 	ble.w	80118e4 <_dtoa_r+0x904>
 80117d0:	f1c0 001c 	rsb	r0, r0, #28
 80117d4:	9b04      	ldr	r3, [sp, #16]
 80117d6:	4403      	add	r3, r0
 80117d8:	9304      	str	r3, [sp, #16]
 80117da:	9b05      	ldr	r3, [sp, #20]
 80117dc:	4403      	add	r3, r0
 80117de:	4405      	add	r5, r0
 80117e0:	9305      	str	r3, [sp, #20]
 80117e2:	9b04      	ldr	r3, [sp, #16]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dd07      	ble.n	80117f8 <_dtoa_r+0x818>
 80117e8:	ee18 1a10 	vmov	r1, s16
 80117ec:	461a      	mov	r2, r3
 80117ee:	4620      	mov	r0, r4
 80117f0:	f000 ffee 	bl	80127d0 <__lshift>
 80117f4:	ee08 0a10 	vmov	s16, r0
 80117f8:	9b05      	ldr	r3, [sp, #20]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	dd05      	ble.n	801180a <_dtoa_r+0x82a>
 80117fe:	4631      	mov	r1, r6
 8011800:	461a      	mov	r2, r3
 8011802:	4620      	mov	r0, r4
 8011804:	f000 ffe4 	bl	80127d0 <__lshift>
 8011808:	4606      	mov	r6, r0
 801180a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801180c:	2b00      	cmp	r3, #0
 801180e:	d06e      	beq.n	80118ee <_dtoa_r+0x90e>
 8011810:	ee18 0a10 	vmov	r0, s16
 8011814:	4631      	mov	r1, r6
 8011816:	f001 f84b 	bl	80128b0 <__mcmp>
 801181a:	2800      	cmp	r0, #0
 801181c:	da67      	bge.n	80118ee <_dtoa_r+0x90e>
 801181e:	9b00      	ldr	r3, [sp, #0]
 8011820:	3b01      	subs	r3, #1
 8011822:	ee18 1a10 	vmov	r1, s16
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	220a      	movs	r2, #10
 801182a:	2300      	movs	r3, #0
 801182c:	4620      	mov	r0, r4
 801182e:	f000 fdd5 	bl	80123dc <__multadd>
 8011832:	9b08      	ldr	r3, [sp, #32]
 8011834:	ee08 0a10 	vmov	s16, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 81b1 	beq.w	8011ba0 <_dtoa_r+0xbc0>
 801183e:	2300      	movs	r3, #0
 8011840:	4639      	mov	r1, r7
 8011842:	220a      	movs	r2, #10
 8011844:	4620      	mov	r0, r4
 8011846:	f000 fdc9 	bl	80123dc <__multadd>
 801184a:	9b02      	ldr	r3, [sp, #8]
 801184c:	2b00      	cmp	r3, #0
 801184e:	4607      	mov	r7, r0
 8011850:	f300 808e 	bgt.w	8011970 <_dtoa_r+0x990>
 8011854:	9b06      	ldr	r3, [sp, #24]
 8011856:	2b02      	cmp	r3, #2
 8011858:	dc51      	bgt.n	80118fe <_dtoa_r+0x91e>
 801185a:	e089      	b.n	8011970 <_dtoa_r+0x990>
 801185c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801185e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011862:	e74b      	b.n	80116fc <_dtoa_r+0x71c>
 8011864:	9b03      	ldr	r3, [sp, #12]
 8011866:	1e5e      	subs	r6, r3, #1
 8011868:	9b07      	ldr	r3, [sp, #28]
 801186a:	42b3      	cmp	r3, r6
 801186c:	bfbf      	itttt	lt
 801186e:	9b07      	ldrlt	r3, [sp, #28]
 8011870:	9607      	strlt	r6, [sp, #28]
 8011872:	1af2      	sublt	r2, r6, r3
 8011874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011876:	bfb6      	itet	lt
 8011878:	189b      	addlt	r3, r3, r2
 801187a:	1b9e      	subge	r6, r3, r6
 801187c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801187e:	9b03      	ldr	r3, [sp, #12]
 8011880:	bfb8      	it	lt
 8011882:	2600      	movlt	r6, #0
 8011884:	2b00      	cmp	r3, #0
 8011886:	bfb7      	itett	lt
 8011888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801188c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011890:	1a9d      	sublt	r5, r3, r2
 8011892:	2300      	movlt	r3, #0
 8011894:	e734      	b.n	8011700 <_dtoa_r+0x720>
 8011896:	9e07      	ldr	r6, [sp, #28]
 8011898:	9d04      	ldr	r5, [sp, #16]
 801189a:	9f08      	ldr	r7, [sp, #32]
 801189c:	e73b      	b.n	8011716 <_dtoa_r+0x736>
 801189e:	9a07      	ldr	r2, [sp, #28]
 80118a0:	e767      	b.n	8011772 <_dtoa_r+0x792>
 80118a2:	9b06      	ldr	r3, [sp, #24]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	dc18      	bgt.n	80118da <_dtoa_r+0x8fa>
 80118a8:	f1ba 0f00 	cmp.w	sl, #0
 80118ac:	d115      	bne.n	80118da <_dtoa_r+0x8fa>
 80118ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118b2:	b993      	cbnz	r3, 80118da <_dtoa_r+0x8fa>
 80118b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118b8:	0d1b      	lsrs	r3, r3, #20
 80118ba:	051b      	lsls	r3, r3, #20
 80118bc:	b183      	cbz	r3, 80118e0 <_dtoa_r+0x900>
 80118be:	9b04      	ldr	r3, [sp, #16]
 80118c0:	3301      	adds	r3, #1
 80118c2:	9304      	str	r3, [sp, #16]
 80118c4:	9b05      	ldr	r3, [sp, #20]
 80118c6:	3301      	adds	r3, #1
 80118c8:	9305      	str	r3, [sp, #20]
 80118ca:	f04f 0801 	mov.w	r8, #1
 80118ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f47f af6a 	bne.w	80117aa <_dtoa_r+0x7ca>
 80118d6:	2001      	movs	r0, #1
 80118d8:	e76f      	b.n	80117ba <_dtoa_r+0x7da>
 80118da:	f04f 0800 	mov.w	r8, #0
 80118de:	e7f6      	b.n	80118ce <_dtoa_r+0x8ee>
 80118e0:	4698      	mov	r8, r3
 80118e2:	e7f4      	b.n	80118ce <_dtoa_r+0x8ee>
 80118e4:	f43f af7d 	beq.w	80117e2 <_dtoa_r+0x802>
 80118e8:	4618      	mov	r0, r3
 80118ea:	301c      	adds	r0, #28
 80118ec:	e772      	b.n	80117d4 <_dtoa_r+0x7f4>
 80118ee:	9b03      	ldr	r3, [sp, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	dc37      	bgt.n	8011964 <_dtoa_r+0x984>
 80118f4:	9b06      	ldr	r3, [sp, #24]
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	dd34      	ble.n	8011964 <_dtoa_r+0x984>
 80118fa:	9b03      	ldr	r3, [sp, #12]
 80118fc:	9302      	str	r3, [sp, #8]
 80118fe:	9b02      	ldr	r3, [sp, #8]
 8011900:	b96b      	cbnz	r3, 801191e <_dtoa_r+0x93e>
 8011902:	4631      	mov	r1, r6
 8011904:	2205      	movs	r2, #5
 8011906:	4620      	mov	r0, r4
 8011908:	f000 fd68 	bl	80123dc <__multadd>
 801190c:	4601      	mov	r1, r0
 801190e:	4606      	mov	r6, r0
 8011910:	ee18 0a10 	vmov	r0, s16
 8011914:	f000 ffcc 	bl	80128b0 <__mcmp>
 8011918:	2800      	cmp	r0, #0
 801191a:	f73f adbb 	bgt.w	8011494 <_dtoa_r+0x4b4>
 801191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011920:	9d01      	ldr	r5, [sp, #4]
 8011922:	43db      	mvns	r3, r3
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	f04f 0800 	mov.w	r8, #0
 801192a:	4631      	mov	r1, r6
 801192c:	4620      	mov	r0, r4
 801192e:	f000 fd33 	bl	8012398 <_Bfree>
 8011932:	2f00      	cmp	r7, #0
 8011934:	f43f aea4 	beq.w	8011680 <_dtoa_r+0x6a0>
 8011938:	f1b8 0f00 	cmp.w	r8, #0
 801193c:	d005      	beq.n	801194a <_dtoa_r+0x96a>
 801193e:	45b8      	cmp	r8, r7
 8011940:	d003      	beq.n	801194a <_dtoa_r+0x96a>
 8011942:	4641      	mov	r1, r8
 8011944:	4620      	mov	r0, r4
 8011946:	f000 fd27 	bl	8012398 <_Bfree>
 801194a:	4639      	mov	r1, r7
 801194c:	4620      	mov	r0, r4
 801194e:	f000 fd23 	bl	8012398 <_Bfree>
 8011952:	e695      	b.n	8011680 <_dtoa_r+0x6a0>
 8011954:	2600      	movs	r6, #0
 8011956:	4637      	mov	r7, r6
 8011958:	e7e1      	b.n	801191e <_dtoa_r+0x93e>
 801195a:	9700      	str	r7, [sp, #0]
 801195c:	4637      	mov	r7, r6
 801195e:	e599      	b.n	8011494 <_dtoa_r+0x4b4>
 8011960:	40240000 	.word	0x40240000
 8011964:	9b08      	ldr	r3, [sp, #32]
 8011966:	2b00      	cmp	r3, #0
 8011968:	f000 80ca 	beq.w	8011b00 <_dtoa_r+0xb20>
 801196c:	9b03      	ldr	r3, [sp, #12]
 801196e:	9302      	str	r3, [sp, #8]
 8011970:	2d00      	cmp	r5, #0
 8011972:	dd05      	ble.n	8011980 <_dtoa_r+0x9a0>
 8011974:	4639      	mov	r1, r7
 8011976:	462a      	mov	r2, r5
 8011978:	4620      	mov	r0, r4
 801197a:	f000 ff29 	bl	80127d0 <__lshift>
 801197e:	4607      	mov	r7, r0
 8011980:	f1b8 0f00 	cmp.w	r8, #0
 8011984:	d05b      	beq.n	8011a3e <_dtoa_r+0xa5e>
 8011986:	6879      	ldr	r1, [r7, #4]
 8011988:	4620      	mov	r0, r4
 801198a:	f000 fcc5 	bl	8012318 <_Balloc>
 801198e:	4605      	mov	r5, r0
 8011990:	b928      	cbnz	r0, 801199e <_dtoa_r+0x9be>
 8011992:	4b87      	ldr	r3, [pc, #540]	; (8011bb0 <_dtoa_r+0xbd0>)
 8011994:	4602      	mov	r2, r0
 8011996:	f240 21ea 	movw	r1, #746	; 0x2ea
 801199a:	f7ff bb3b 	b.w	8011014 <_dtoa_r+0x34>
 801199e:	693a      	ldr	r2, [r7, #16]
 80119a0:	3202      	adds	r2, #2
 80119a2:	0092      	lsls	r2, r2, #2
 80119a4:	f107 010c 	add.w	r1, r7, #12
 80119a8:	300c      	adds	r0, #12
 80119aa:	f000 fca7 	bl	80122fc <memcpy>
 80119ae:	2201      	movs	r2, #1
 80119b0:	4629      	mov	r1, r5
 80119b2:	4620      	mov	r0, r4
 80119b4:	f000 ff0c 	bl	80127d0 <__lshift>
 80119b8:	9b01      	ldr	r3, [sp, #4]
 80119ba:	f103 0901 	add.w	r9, r3, #1
 80119be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80119c2:	4413      	add	r3, r2
 80119c4:	9305      	str	r3, [sp, #20]
 80119c6:	f00a 0301 	and.w	r3, sl, #1
 80119ca:	46b8      	mov	r8, r7
 80119cc:	9304      	str	r3, [sp, #16]
 80119ce:	4607      	mov	r7, r0
 80119d0:	4631      	mov	r1, r6
 80119d2:	ee18 0a10 	vmov	r0, s16
 80119d6:	f7ff fa77 	bl	8010ec8 <quorem>
 80119da:	4641      	mov	r1, r8
 80119dc:	9002      	str	r0, [sp, #8]
 80119de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80119e2:	ee18 0a10 	vmov	r0, s16
 80119e6:	f000 ff63 	bl	80128b0 <__mcmp>
 80119ea:	463a      	mov	r2, r7
 80119ec:	9003      	str	r0, [sp, #12]
 80119ee:	4631      	mov	r1, r6
 80119f0:	4620      	mov	r0, r4
 80119f2:	f000 ff79 	bl	80128e8 <__mdiff>
 80119f6:	68c2      	ldr	r2, [r0, #12]
 80119f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80119fc:	4605      	mov	r5, r0
 80119fe:	bb02      	cbnz	r2, 8011a42 <_dtoa_r+0xa62>
 8011a00:	4601      	mov	r1, r0
 8011a02:	ee18 0a10 	vmov	r0, s16
 8011a06:	f000 ff53 	bl	80128b0 <__mcmp>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	4620      	mov	r0, r4
 8011a10:	9207      	str	r2, [sp, #28]
 8011a12:	f000 fcc1 	bl	8012398 <_Bfree>
 8011a16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011a1a:	ea43 0102 	orr.w	r1, r3, r2
 8011a1e:	9b04      	ldr	r3, [sp, #16]
 8011a20:	430b      	orrs	r3, r1
 8011a22:	464d      	mov	r5, r9
 8011a24:	d10f      	bne.n	8011a46 <_dtoa_r+0xa66>
 8011a26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a2a:	d02a      	beq.n	8011a82 <_dtoa_r+0xaa2>
 8011a2c:	9b03      	ldr	r3, [sp, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	dd02      	ble.n	8011a38 <_dtoa_r+0xa58>
 8011a32:	9b02      	ldr	r3, [sp, #8]
 8011a34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011a38:	f88b a000 	strb.w	sl, [fp]
 8011a3c:	e775      	b.n	801192a <_dtoa_r+0x94a>
 8011a3e:	4638      	mov	r0, r7
 8011a40:	e7ba      	b.n	80119b8 <_dtoa_r+0x9d8>
 8011a42:	2201      	movs	r2, #1
 8011a44:	e7e2      	b.n	8011a0c <_dtoa_r+0xa2c>
 8011a46:	9b03      	ldr	r3, [sp, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	db04      	blt.n	8011a56 <_dtoa_r+0xa76>
 8011a4c:	9906      	ldr	r1, [sp, #24]
 8011a4e:	430b      	orrs	r3, r1
 8011a50:	9904      	ldr	r1, [sp, #16]
 8011a52:	430b      	orrs	r3, r1
 8011a54:	d122      	bne.n	8011a9c <_dtoa_r+0xabc>
 8011a56:	2a00      	cmp	r2, #0
 8011a58:	ddee      	ble.n	8011a38 <_dtoa_r+0xa58>
 8011a5a:	ee18 1a10 	vmov	r1, s16
 8011a5e:	2201      	movs	r2, #1
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 feb5 	bl	80127d0 <__lshift>
 8011a66:	4631      	mov	r1, r6
 8011a68:	ee08 0a10 	vmov	s16, r0
 8011a6c:	f000 ff20 	bl	80128b0 <__mcmp>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	dc03      	bgt.n	8011a7c <_dtoa_r+0xa9c>
 8011a74:	d1e0      	bne.n	8011a38 <_dtoa_r+0xa58>
 8011a76:	f01a 0f01 	tst.w	sl, #1
 8011a7a:	d0dd      	beq.n	8011a38 <_dtoa_r+0xa58>
 8011a7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a80:	d1d7      	bne.n	8011a32 <_dtoa_r+0xa52>
 8011a82:	2339      	movs	r3, #57	; 0x39
 8011a84:	f88b 3000 	strb.w	r3, [fp]
 8011a88:	462b      	mov	r3, r5
 8011a8a:	461d      	mov	r5, r3
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a92:	2a39      	cmp	r2, #57	; 0x39
 8011a94:	d071      	beq.n	8011b7a <_dtoa_r+0xb9a>
 8011a96:	3201      	adds	r2, #1
 8011a98:	701a      	strb	r2, [r3, #0]
 8011a9a:	e746      	b.n	801192a <_dtoa_r+0x94a>
 8011a9c:	2a00      	cmp	r2, #0
 8011a9e:	dd07      	ble.n	8011ab0 <_dtoa_r+0xad0>
 8011aa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011aa4:	d0ed      	beq.n	8011a82 <_dtoa_r+0xaa2>
 8011aa6:	f10a 0301 	add.w	r3, sl, #1
 8011aaa:	f88b 3000 	strb.w	r3, [fp]
 8011aae:	e73c      	b.n	801192a <_dtoa_r+0x94a>
 8011ab0:	9b05      	ldr	r3, [sp, #20]
 8011ab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011ab6:	4599      	cmp	r9, r3
 8011ab8:	d047      	beq.n	8011b4a <_dtoa_r+0xb6a>
 8011aba:	ee18 1a10 	vmov	r1, s16
 8011abe:	2300      	movs	r3, #0
 8011ac0:	220a      	movs	r2, #10
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f000 fc8a 	bl	80123dc <__multadd>
 8011ac8:	45b8      	cmp	r8, r7
 8011aca:	ee08 0a10 	vmov	s16, r0
 8011ace:	f04f 0300 	mov.w	r3, #0
 8011ad2:	f04f 020a 	mov.w	r2, #10
 8011ad6:	4641      	mov	r1, r8
 8011ad8:	4620      	mov	r0, r4
 8011ada:	d106      	bne.n	8011aea <_dtoa_r+0xb0a>
 8011adc:	f000 fc7e 	bl	80123dc <__multadd>
 8011ae0:	4680      	mov	r8, r0
 8011ae2:	4607      	mov	r7, r0
 8011ae4:	f109 0901 	add.w	r9, r9, #1
 8011ae8:	e772      	b.n	80119d0 <_dtoa_r+0x9f0>
 8011aea:	f000 fc77 	bl	80123dc <__multadd>
 8011aee:	4639      	mov	r1, r7
 8011af0:	4680      	mov	r8, r0
 8011af2:	2300      	movs	r3, #0
 8011af4:	220a      	movs	r2, #10
 8011af6:	4620      	mov	r0, r4
 8011af8:	f000 fc70 	bl	80123dc <__multadd>
 8011afc:	4607      	mov	r7, r0
 8011afe:	e7f1      	b.n	8011ae4 <_dtoa_r+0xb04>
 8011b00:	9b03      	ldr	r3, [sp, #12]
 8011b02:	9302      	str	r3, [sp, #8]
 8011b04:	9d01      	ldr	r5, [sp, #4]
 8011b06:	ee18 0a10 	vmov	r0, s16
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	f7ff f9dc 	bl	8010ec8 <quorem>
 8011b10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011b14:	9b01      	ldr	r3, [sp, #4]
 8011b16:	f805 ab01 	strb.w	sl, [r5], #1
 8011b1a:	1aea      	subs	r2, r5, r3
 8011b1c:	9b02      	ldr	r3, [sp, #8]
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	dd09      	ble.n	8011b36 <_dtoa_r+0xb56>
 8011b22:	ee18 1a10 	vmov	r1, s16
 8011b26:	2300      	movs	r3, #0
 8011b28:	220a      	movs	r2, #10
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	f000 fc56 	bl	80123dc <__multadd>
 8011b30:	ee08 0a10 	vmov	s16, r0
 8011b34:	e7e7      	b.n	8011b06 <_dtoa_r+0xb26>
 8011b36:	9b02      	ldr	r3, [sp, #8]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	bfc8      	it	gt
 8011b3c:	461d      	movgt	r5, r3
 8011b3e:	9b01      	ldr	r3, [sp, #4]
 8011b40:	bfd8      	it	le
 8011b42:	2501      	movle	r5, #1
 8011b44:	441d      	add	r5, r3
 8011b46:	f04f 0800 	mov.w	r8, #0
 8011b4a:	ee18 1a10 	vmov	r1, s16
 8011b4e:	2201      	movs	r2, #1
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 fe3d 	bl	80127d0 <__lshift>
 8011b56:	4631      	mov	r1, r6
 8011b58:	ee08 0a10 	vmov	s16, r0
 8011b5c:	f000 fea8 	bl	80128b0 <__mcmp>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	dc91      	bgt.n	8011a88 <_dtoa_r+0xaa8>
 8011b64:	d102      	bne.n	8011b6c <_dtoa_r+0xb8c>
 8011b66:	f01a 0f01 	tst.w	sl, #1
 8011b6a:	d18d      	bne.n	8011a88 <_dtoa_r+0xaa8>
 8011b6c:	462b      	mov	r3, r5
 8011b6e:	461d      	mov	r5, r3
 8011b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b74:	2a30      	cmp	r2, #48	; 0x30
 8011b76:	d0fa      	beq.n	8011b6e <_dtoa_r+0xb8e>
 8011b78:	e6d7      	b.n	801192a <_dtoa_r+0x94a>
 8011b7a:	9a01      	ldr	r2, [sp, #4]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d184      	bne.n	8011a8a <_dtoa_r+0xaaa>
 8011b80:	9b00      	ldr	r3, [sp, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	2331      	movs	r3, #49	; 0x31
 8011b88:	7013      	strb	r3, [r2, #0]
 8011b8a:	e6ce      	b.n	801192a <_dtoa_r+0x94a>
 8011b8c:	4b09      	ldr	r3, [pc, #36]	; (8011bb4 <_dtoa_r+0xbd4>)
 8011b8e:	f7ff ba95 	b.w	80110bc <_dtoa_r+0xdc>
 8011b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f47f aa6e 	bne.w	8011076 <_dtoa_r+0x96>
 8011b9a:	4b07      	ldr	r3, [pc, #28]	; (8011bb8 <_dtoa_r+0xbd8>)
 8011b9c:	f7ff ba8e 	b.w	80110bc <_dtoa_r+0xdc>
 8011ba0:	9b02      	ldr	r3, [sp, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	dcae      	bgt.n	8011b04 <_dtoa_r+0xb24>
 8011ba6:	9b06      	ldr	r3, [sp, #24]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	f73f aea8 	bgt.w	80118fe <_dtoa_r+0x91e>
 8011bae:	e7a9      	b.n	8011b04 <_dtoa_r+0xb24>
 8011bb0:	08014b79 	.word	0x08014b79
 8011bb4:	080148e0 	.word	0x080148e0
 8011bb8:	08014b11 	.word	0x08014b11

08011bbc <fiprintf>:
 8011bbc:	b40e      	push	{r1, r2, r3}
 8011bbe:	b503      	push	{r0, r1, lr}
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	ab03      	add	r3, sp, #12
 8011bc4:	4805      	ldr	r0, [pc, #20]	; (8011bdc <fiprintf+0x20>)
 8011bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bca:	6800      	ldr	r0, [r0, #0]
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	f001 fae1 	bl	8013194 <_vfiprintf_r>
 8011bd2:	b002      	add	sp, #8
 8011bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bd8:	b003      	add	sp, #12
 8011bda:	4770      	bx	lr
 8011bdc:	20000058 	.word	0x20000058

08011be0 <rshift>:
 8011be0:	6903      	ldr	r3, [r0, #16]
 8011be2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bea:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011bee:	f100 0414 	add.w	r4, r0, #20
 8011bf2:	dd45      	ble.n	8011c80 <rshift+0xa0>
 8011bf4:	f011 011f 	ands.w	r1, r1, #31
 8011bf8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011bfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011c00:	d10c      	bne.n	8011c1c <rshift+0x3c>
 8011c02:	f100 0710 	add.w	r7, r0, #16
 8011c06:	4629      	mov	r1, r5
 8011c08:	42b1      	cmp	r1, r6
 8011c0a:	d334      	bcc.n	8011c76 <rshift+0x96>
 8011c0c:	1a9b      	subs	r3, r3, r2
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	1eea      	subs	r2, r5, #3
 8011c12:	4296      	cmp	r6, r2
 8011c14:	bf38      	it	cc
 8011c16:	2300      	movcc	r3, #0
 8011c18:	4423      	add	r3, r4
 8011c1a:	e015      	b.n	8011c48 <rshift+0x68>
 8011c1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011c20:	f1c1 0820 	rsb	r8, r1, #32
 8011c24:	40cf      	lsrs	r7, r1
 8011c26:	f105 0e04 	add.w	lr, r5, #4
 8011c2a:	46a1      	mov	r9, r4
 8011c2c:	4576      	cmp	r6, lr
 8011c2e:	46f4      	mov	ip, lr
 8011c30:	d815      	bhi.n	8011c5e <rshift+0x7e>
 8011c32:	1a9a      	subs	r2, r3, r2
 8011c34:	0092      	lsls	r2, r2, #2
 8011c36:	3a04      	subs	r2, #4
 8011c38:	3501      	adds	r5, #1
 8011c3a:	42ae      	cmp	r6, r5
 8011c3c:	bf38      	it	cc
 8011c3e:	2200      	movcc	r2, #0
 8011c40:	18a3      	adds	r3, r4, r2
 8011c42:	50a7      	str	r7, [r4, r2]
 8011c44:	b107      	cbz	r7, 8011c48 <rshift+0x68>
 8011c46:	3304      	adds	r3, #4
 8011c48:	1b1a      	subs	r2, r3, r4
 8011c4a:	42a3      	cmp	r3, r4
 8011c4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c50:	bf08      	it	eq
 8011c52:	2300      	moveq	r3, #0
 8011c54:	6102      	str	r2, [r0, #16]
 8011c56:	bf08      	it	eq
 8011c58:	6143      	streq	r3, [r0, #20]
 8011c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c5e:	f8dc c000 	ldr.w	ip, [ip]
 8011c62:	fa0c fc08 	lsl.w	ip, ip, r8
 8011c66:	ea4c 0707 	orr.w	r7, ip, r7
 8011c6a:	f849 7b04 	str.w	r7, [r9], #4
 8011c6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c72:	40cf      	lsrs	r7, r1
 8011c74:	e7da      	b.n	8011c2c <rshift+0x4c>
 8011c76:	f851 cb04 	ldr.w	ip, [r1], #4
 8011c7a:	f847 cf04 	str.w	ip, [r7, #4]!
 8011c7e:	e7c3      	b.n	8011c08 <rshift+0x28>
 8011c80:	4623      	mov	r3, r4
 8011c82:	e7e1      	b.n	8011c48 <rshift+0x68>

08011c84 <__hexdig_fun>:
 8011c84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c88:	2b09      	cmp	r3, #9
 8011c8a:	d802      	bhi.n	8011c92 <__hexdig_fun+0xe>
 8011c8c:	3820      	subs	r0, #32
 8011c8e:	b2c0      	uxtb	r0, r0
 8011c90:	4770      	bx	lr
 8011c92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011c96:	2b05      	cmp	r3, #5
 8011c98:	d801      	bhi.n	8011c9e <__hexdig_fun+0x1a>
 8011c9a:	3847      	subs	r0, #71	; 0x47
 8011c9c:	e7f7      	b.n	8011c8e <__hexdig_fun+0xa>
 8011c9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011ca2:	2b05      	cmp	r3, #5
 8011ca4:	d801      	bhi.n	8011caa <__hexdig_fun+0x26>
 8011ca6:	3827      	subs	r0, #39	; 0x27
 8011ca8:	e7f1      	b.n	8011c8e <__hexdig_fun+0xa>
 8011caa:	2000      	movs	r0, #0
 8011cac:	4770      	bx	lr
	...

08011cb0 <__gethex>:
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	ed2d 8b02 	vpush	{d8}
 8011cb8:	b089      	sub	sp, #36	; 0x24
 8011cba:	ee08 0a10 	vmov	s16, r0
 8011cbe:	9304      	str	r3, [sp, #16]
 8011cc0:	4bb4      	ldr	r3, [pc, #720]	; (8011f94 <__gethex+0x2e4>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	9301      	str	r3, [sp, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	468b      	mov	fp, r1
 8011cca:	4690      	mov	r8, r2
 8011ccc:	f7ee faa0 	bl	8000210 <strlen>
 8011cd0:	9b01      	ldr	r3, [sp, #4]
 8011cd2:	f8db 2000 	ldr.w	r2, [fp]
 8011cd6:	4403      	add	r3, r0
 8011cd8:	4682      	mov	sl, r0
 8011cda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	1c93      	adds	r3, r2, #2
 8011ce2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011ce6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011cea:	32fe      	adds	r2, #254	; 0xfe
 8011cec:	18d1      	adds	r1, r2, r3
 8011cee:	461f      	mov	r7, r3
 8011cf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011cf4:	9100      	str	r1, [sp, #0]
 8011cf6:	2830      	cmp	r0, #48	; 0x30
 8011cf8:	d0f8      	beq.n	8011cec <__gethex+0x3c>
 8011cfa:	f7ff ffc3 	bl	8011c84 <__hexdig_fun>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d13a      	bne.n	8011d7a <__gethex+0xca>
 8011d04:	9901      	ldr	r1, [sp, #4]
 8011d06:	4652      	mov	r2, sl
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f001 fb8d 	bl	8013428 <strncmp>
 8011d0e:	4605      	mov	r5, r0
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d168      	bne.n	8011de6 <__gethex+0x136>
 8011d14:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011d18:	eb07 060a 	add.w	r6, r7, sl
 8011d1c:	f7ff ffb2 	bl	8011c84 <__hexdig_fun>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d062      	beq.n	8011dea <__gethex+0x13a>
 8011d24:	4633      	mov	r3, r6
 8011d26:	7818      	ldrb	r0, [r3, #0]
 8011d28:	2830      	cmp	r0, #48	; 0x30
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	f103 0301 	add.w	r3, r3, #1
 8011d30:	d0f9      	beq.n	8011d26 <__gethex+0x76>
 8011d32:	f7ff ffa7 	bl	8011c84 <__hexdig_fun>
 8011d36:	2301      	movs	r3, #1
 8011d38:	fab0 f480 	clz	r4, r0
 8011d3c:	0964      	lsrs	r4, r4, #5
 8011d3e:	4635      	mov	r5, r6
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	463a      	mov	r2, r7
 8011d44:	4616      	mov	r6, r2
 8011d46:	3201      	adds	r2, #1
 8011d48:	7830      	ldrb	r0, [r6, #0]
 8011d4a:	f7ff ff9b 	bl	8011c84 <__hexdig_fun>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d1f8      	bne.n	8011d44 <__gethex+0x94>
 8011d52:	9901      	ldr	r1, [sp, #4]
 8011d54:	4652      	mov	r2, sl
 8011d56:	4630      	mov	r0, r6
 8011d58:	f001 fb66 	bl	8013428 <strncmp>
 8011d5c:	b980      	cbnz	r0, 8011d80 <__gethex+0xd0>
 8011d5e:	b94d      	cbnz	r5, 8011d74 <__gethex+0xc4>
 8011d60:	eb06 050a 	add.w	r5, r6, sl
 8011d64:	462a      	mov	r2, r5
 8011d66:	4616      	mov	r6, r2
 8011d68:	3201      	adds	r2, #1
 8011d6a:	7830      	ldrb	r0, [r6, #0]
 8011d6c:	f7ff ff8a 	bl	8011c84 <__hexdig_fun>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d1f8      	bne.n	8011d66 <__gethex+0xb6>
 8011d74:	1bad      	subs	r5, r5, r6
 8011d76:	00ad      	lsls	r5, r5, #2
 8011d78:	e004      	b.n	8011d84 <__gethex+0xd4>
 8011d7a:	2400      	movs	r4, #0
 8011d7c:	4625      	mov	r5, r4
 8011d7e:	e7e0      	b.n	8011d42 <__gethex+0x92>
 8011d80:	2d00      	cmp	r5, #0
 8011d82:	d1f7      	bne.n	8011d74 <__gethex+0xc4>
 8011d84:	7833      	ldrb	r3, [r6, #0]
 8011d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d8a:	2b50      	cmp	r3, #80	; 0x50
 8011d8c:	d13b      	bne.n	8011e06 <__gethex+0x156>
 8011d8e:	7873      	ldrb	r3, [r6, #1]
 8011d90:	2b2b      	cmp	r3, #43	; 0x2b
 8011d92:	d02c      	beq.n	8011dee <__gethex+0x13e>
 8011d94:	2b2d      	cmp	r3, #45	; 0x2d
 8011d96:	d02e      	beq.n	8011df6 <__gethex+0x146>
 8011d98:	1c71      	adds	r1, r6, #1
 8011d9a:	f04f 0900 	mov.w	r9, #0
 8011d9e:	7808      	ldrb	r0, [r1, #0]
 8011da0:	f7ff ff70 	bl	8011c84 <__hexdig_fun>
 8011da4:	1e43      	subs	r3, r0, #1
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b18      	cmp	r3, #24
 8011daa:	d82c      	bhi.n	8011e06 <__gethex+0x156>
 8011dac:	f1a0 0210 	sub.w	r2, r0, #16
 8011db0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011db4:	f7ff ff66 	bl	8011c84 <__hexdig_fun>
 8011db8:	1e43      	subs	r3, r0, #1
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b18      	cmp	r3, #24
 8011dbe:	d91d      	bls.n	8011dfc <__gethex+0x14c>
 8011dc0:	f1b9 0f00 	cmp.w	r9, #0
 8011dc4:	d000      	beq.n	8011dc8 <__gethex+0x118>
 8011dc6:	4252      	negs	r2, r2
 8011dc8:	4415      	add	r5, r2
 8011dca:	f8cb 1000 	str.w	r1, [fp]
 8011dce:	b1e4      	cbz	r4, 8011e0a <__gethex+0x15a>
 8011dd0:	9b00      	ldr	r3, [sp, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	bf14      	ite	ne
 8011dd6:	2700      	movne	r7, #0
 8011dd8:	2706      	moveq	r7, #6
 8011dda:	4638      	mov	r0, r7
 8011ddc:	b009      	add	sp, #36	; 0x24
 8011dde:	ecbd 8b02 	vpop	{d8}
 8011de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de6:	463e      	mov	r6, r7
 8011de8:	4625      	mov	r5, r4
 8011dea:	2401      	movs	r4, #1
 8011dec:	e7ca      	b.n	8011d84 <__gethex+0xd4>
 8011dee:	f04f 0900 	mov.w	r9, #0
 8011df2:	1cb1      	adds	r1, r6, #2
 8011df4:	e7d3      	b.n	8011d9e <__gethex+0xee>
 8011df6:	f04f 0901 	mov.w	r9, #1
 8011dfa:	e7fa      	b.n	8011df2 <__gethex+0x142>
 8011dfc:	230a      	movs	r3, #10
 8011dfe:	fb03 0202 	mla	r2, r3, r2, r0
 8011e02:	3a10      	subs	r2, #16
 8011e04:	e7d4      	b.n	8011db0 <__gethex+0x100>
 8011e06:	4631      	mov	r1, r6
 8011e08:	e7df      	b.n	8011dca <__gethex+0x11a>
 8011e0a:	1bf3      	subs	r3, r6, r7
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	4621      	mov	r1, r4
 8011e10:	2b07      	cmp	r3, #7
 8011e12:	dc0b      	bgt.n	8011e2c <__gethex+0x17c>
 8011e14:	ee18 0a10 	vmov	r0, s16
 8011e18:	f000 fa7e 	bl	8012318 <_Balloc>
 8011e1c:	4604      	mov	r4, r0
 8011e1e:	b940      	cbnz	r0, 8011e32 <__gethex+0x182>
 8011e20:	4b5d      	ldr	r3, [pc, #372]	; (8011f98 <__gethex+0x2e8>)
 8011e22:	4602      	mov	r2, r0
 8011e24:	21de      	movs	r1, #222	; 0xde
 8011e26:	485d      	ldr	r0, [pc, #372]	; (8011f9c <__gethex+0x2ec>)
 8011e28:	f7ff f830 	bl	8010e8c <__assert_func>
 8011e2c:	3101      	adds	r1, #1
 8011e2e:	105b      	asrs	r3, r3, #1
 8011e30:	e7ee      	b.n	8011e10 <__gethex+0x160>
 8011e32:	f100 0914 	add.w	r9, r0, #20
 8011e36:	f04f 0b00 	mov.w	fp, #0
 8011e3a:	f1ca 0301 	rsb	r3, sl, #1
 8011e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011e42:	f8cd b000 	str.w	fp, [sp]
 8011e46:	9306      	str	r3, [sp, #24]
 8011e48:	42b7      	cmp	r7, r6
 8011e4a:	d340      	bcc.n	8011ece <__gethex+0x21e>
 8011e4c:	9802      	ldr	r0, [sp, #8]
 8011e4e:	9b00      	ldr	r3, [sp, #0]
 8011e50:	f840 3b04 	str.w	r3, [r0], #4
 8011e54:	eba0 0009 	sub.w	r0, r0, r9
 8011e58:	1080      	asrs	r0, r0, #2
 8011e5a:	0146      	lsls	r6, r0, #5
 8011e5c:	6120      	str	r0, [r4, #16]
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f000 fb4c 	bl	80124fc <__hi0bits>
 8011e64:	1a30      	subs	r0, r6, r0
 8011e66:	f8d8 6000 	ldr.w	r6, [r8]
 8011e6a:	42b0      	cmp	r0, r6
 8011e6c:	dd63      	ble.n	8011f36 <__gethex+0x286>
 8011e6e:	1b87      	subs	r7, r0, r6
 8011e70:	4639      	mov	r1, r7
 8011e72:	4620      	mov	r0, r4
 8011e74:	f000 fef0 	bl	8012c58 <__any_on>
 8011e78:	4682      	mov	sl, r0
 8011e7a:	b1a8      	cbz	r0, 8011ea8 <__gethex+0x1f8>
 8011e7c:	1e7b      	subs	r3, r7, #1
 8011e7e:	1159      	asrs	r1, r3, #5
 8011e80:	f003 021f 	and.w	r2, r3, #31
 8011e84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e88:	f04f 0a01 	mov.w	sl, #1
 8011e8c:	fa0a f202 	lsl.w	r2, sl, r2
 8011e90:	420a      	tst	r2, r1
 8011e92:	d009      	beq.n	8011ea8 <__gethex+0x1f8>
 8011e94:	4553      	cmp	r3, sl
 8011e96:	dd05      	ble.n	8011ea4 <__gethex+0x1f4>
 8011e98:	1eb9      	subs	r1, r7, #2
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f000 fedc 	bl	8012c58 <__any_on>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d145      	bne.n	8011f30 <__gethex+0x280>
 8011ea4:	f04f 0a02 	mov.w	sl, #2
 8011ea8:	4639      	mov	r1, r7
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff fe98 	bl	8011be0 <rshift>
 8011eb0:	443d      	add	r5, r7
 8011eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011eb6:	42ab      	cmp	r3, r5
 8011eb8:	da4c      	bge.n	8011f54 <__gethex+0x2a4>
 8011eba:	ee18 0a10 	vmov	r0, s16
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	f000 fa6a 	bl	8012398 <_Bfree>
 8011ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	6013      	str	r3, [r2, #0]
 8011eca:	27a3      	movs	r7, #163	; 0xa3
 8011ecc:	e785      	b.n	8011dda <__gethex+0x12a>
 8011ece:	1e73      	subs	r3, r6, #1
 8011ed0:	9a05      	ldr	r2, [sp, #20]
 8011ed2:	9303      	str	r3, [sp, #12]
 8011ed4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d019      	beq.n	8011f10 <__gethex+0x260>
 8011edc:	f1bb 0f20 	cmp.w	fp, #32
 8011ee0:	d107      	bne.n	8011ef2 <__gethex+0x242>
 8011ee2:	9b02      	ldr	r3, [sp, #8]
 8011ee4:	9a00      	ldr	r2, [sp, #0]
 8011ee6:	f843 2b04 	str.w	r2, [r3], #4
 8011eea:	9302      	str	r3, [sp, #8]
 8011eec:	2300      	movs	r3, #0
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	469b      	mov	fp, r3
 8011ef2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011ef6:	f7ff fec5 	bl	8011c84 <__hexdig_fun>
 8011efa:	9b00      	ldr	r3, [sp, #0]
 8011efc:	f000 000f 	and.w	r0, r0, #15
 8011f00:	fa00 f00b 	lsl.w	r0, r0, fp
 8011f04:	4303      	orrs	r3, r0
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	f10b 0b04 	add.w	fp, fp, #4
 8011f0c:	9b03      	ldr	r3, [sp, #12]
 8011f0e:	e00d      	b.n	8011f2c <__gethex+0x27c>
 8011f10:	9b03      	ldr	r3, [sp, #12]
 8011f12:	9a06      	ldr	r2, [sp, #24]
 8011f14:	4413      	add	r3, r2
 8011f16:	42bb      	cmp	r3, r7
 8011f18:	d3e0      	bcc.n	8011edc <__gethex+0x22c>
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	9901      	ldr	r1, [sp, #4]
 8011f1e:	9307      	str	r3, [sp, #28]
 8011f20:	4652      	mov	r2, sl
 8011f22:	f001 fa81 	bl	8013428 <strncmp>
 8011f26:	9b07      	ldr	r3, [sp, #28]
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d1d7      	bne.n	8011edc <__gethex+0x22c>
 8011f2c:	461e      	mov	r6, r3
 8011f2e:	e78b      	b.n	8011e48 <__gethex+0x198>
 8011f30:	f04f 0a03 	mov.w	sl, #3
 8011f34:	e7b8      	b.n	8011ea8 <__gethex+0x1f8>
 8011f36:	da0a      	bge.n	8011f4e <__gethex+0x29e>
 8011f38:	1a37      	subs	r7, r6, r0
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	ee18 0a10 	vmov	r0, s16
 8011f40:	463a      	mov	r2, r7
 8011f42:	f000 fc45 	bl	80127d0 <__lshift>
 8011f46:	1bed      	subs	r5, r5, r7
 8011f48:	4604      	mov	r4, r0
 8011f4a:	f100 0914 	add.w	r9, r0, #20
 8011f4e:	f04f 0a00 	mov.w	sl, #0
 8011f52:	e7ae      	b.n	8011eb2 <__gethex+0x202>
 8011f54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011f58:	42a8      	cmp	r0, r5
 8011f5a:	dd72      	ble.n	8012042 <__gethex+0x392>
 8011f5c:	1b45      	subs	r5, r0, r5
 8011f5e:	42ae      	cmp	r6, r5
 8011f60:	dc36      	bgt.n	8011fd0 <__gethex+0x320>
 8011f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d02a      	beq.n	8011fc0 <__gethex+0x310>
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d02c      	beq.n	8011fc8 <__gethex+0x318>
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d11c      	bne.n	8011fac <__gethex+0x2fc>
 8011f72:	42ae      	cmp	r6, r5
 8011f74:	d11a      	bne.n	8011fac <__gethex+0x2fc>
 8011f76:	2e01      	cmp	r6, #1
 8011f78:	d112      	bne.n	8011fa0 <__gethex+0x2f0>
 8011f7a:	9a04      	ldr	r2, [sp, #16]
 8011f7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f80:	6013      	str	r3, [r2, #0]
 8011f82:	2301      	movs	r3, #1
 8011f84:	6123      	str	r3, [r4, #16]
 8011f86:	f8c9 3000 	str.w	r3, [r9]
 8011f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f8c:	2762      	movs	r7, #98	; 0x62
 8011f8e:	601c      	str	r4, [r3, #0]
 8011f90:	e723      	b.n	8011dda <__gethex+0x12a>
 8011f92:	bf00      	nop
 8011f94:	08014bf0 	.word	0x08014bf0
 8011f98:	08014b79 	.word	0x08014b79
 8011f9c:	08014b8a 	.word	0x08014b8a
 8011fa0:	1e71      	subs	r1, r6, #1
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 fe58 	bl	8012c58 <__any_on>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d1e6      	bne.n	8011f7a <__gethex+0x2ca>
 8011fac:	ee18 0a10 	vmov	r0, s16
 8011fb0:	4621      	mov	r1, r4
 8011fb2:	f000 f9f1 	bl	8012398 <_Bfree>
 8011fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fb8:	2300      	movs	r3, #0
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	2750      	movs	r7, #80	; 0x50
 8011fbe:	e70c      	b.n	8011dda <__gethex+0x12a>
 8011fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d1f2      	bne.n	8011fac <__gethex+0x2fc>
 8011fc6:	e7d8      	b.n	8011f7a <__gethex+0x2ca>
 8011fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1d5      	bne.n	8011f7a <__gethex+0x2ca>
 8011fce:	e7ed      	b.n	8011fac <__gethex+0x2fc>
 8011fd0:	1e6f      	subs	r7, r5, #1
 8011fd2:	f1ba 0f00 	cmp.w	sl, #0
 8011fd6:	d131      	bne.n	801203c <__gethex+0x38c>
 8011fd8:	b127      	cbz	r7, 8011fe4 <__gethex+0x334>
 8011fda:	4639      	mov	r1, r7
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f000 fe3b 	bl	8012c58 <__any_on>
 8011fe2:	4682      	mov	sl, r0
 8011fe4:	117b      	asrs	r3, r7, #5
 8011fe6:	2101      	movs	r1, #1
 8011fe8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011fec:	f007 071f 	and.w	r7, r7, #31
 8011ff0:	fa01 f707 	lsl.w	r7, r1, r7
 8011ff4:	421f      	tst	r7, r3
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	bf18      	it	ne
 8011ffc:	f04a 0a02 	orrne.w	sl, sl, #2
 8012000:	1b76      	subs	r6, r6, r5
 8012002:	f7ff fded 	bl	8011be0 <rshift>
 8012006:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801200a:	2702      	movs	r7, #2
 801200c:	f1ba 0f00 	cmp.w	sl, #0
 8012010:	d048      	beq.n	80120a4 <__gethex+0x3f4>
 8012012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012016:	2b02      	cmp	r3, #2
 8012018:	d015      	beq.n	8012046 <__gethex+0x396>
 801201a:	2b03      	cmp	r3, #3
 801201c:	d017      	beq.n	801204e <__gethex+0x39e>
 801201e:	2b01      	cmp	r3, #1
 8012020:	d109      	bne.n	8012036 <__gethex+0x386>
 8012022:	f01a 0f02 	tst.w	sl, #2
 8012026:	d006      	beq.n	8012036 <__gethex+0x386>
 8012028:	f8d9 0000 	ldr.w	r0, [r9]
 801202c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012030:	f01a 0f01 	tst.w	sl, #1
 8012034:	d10e      	bne.n	8012054 <__gethex+0x3a4>
 8012036:	f047 0710 	orr.w	r7, r7, #16
 801203a:	e033      	b.n	80120a4 <__gethex+0x3f4>
 801203c:	f04f 0a01 	mov.w	sl, #1
 8012040:	e7d0      	b.n	8011fe4 <__gethex+0x334>
 8012042:	2701      	movs	r7, #1
 8012044:	e7e2      	b.n	801200c <__gethex+0x35c>
 8012046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012048:	f1c3 0301 	rsb	r3, r3, #1
 801204c:	9315      	str	r3, [sp, #84]	; 0x54
 801204e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012050:	2b00      	cmp	r3, #0
 8012052:	d0f0      	beq.n	8012036 <__gethex+0x386>
 8012054:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012058:	f104 0314 	add.w	r3, r4, #20
 801205c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012060:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012064:	f04f 0c00 	mov.w	ip, #0
 8012068:	4618      	mov	r0, r3
 801206a:	f853 2b04 	ldr.w	r2, [r3], #4
 801206e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012072:	d01c      	beq.n	80120ae <__gethex+0x3fe>
 8012074:	3201      	adds	r2, #1
 8012076:	6002      	str	r2, [r0, #0]
 8012078:	2f02      	cmp	r7, #2
 801207a:	f104 0314 	add.w	r3, r4, #20
 801207e:	d13f      	bne.n	8012100 <__gethex+0x450>
 8012080:	f8d8 2000 	ldr.w	r2, [r8]
 8012084:	3a01      	subs	r2, #1
 8012086:	42b2      	cmp	r2, r6
 8012088:	d10a      	bne.n	80120a0 <__gethex+0x3f0>
 801208a:	1171      	asrs	r1, r6, #5
 801208c:	2201      	movs	r2, #1
 801208e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012092:	f006 061f 	and.w	r6, r6, #31
 8012096:	fa02 f606 	lsl.w	r6, r2, r6
 801209a:	421e      	tst	r6, r3
 801209c:	bf18      	it	ne
 801209e:	4617      	movne	r7, r2
 80120a0:	f047 0720 	orr.w	r7, r7, #32
 80120a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120a6:	601c      	str	r4, [r3, #0]
 80120a8:	9b04      	ldr	r3, [sp, #16]
 80120aa:	601d      	str	r5, [r3, #0]
 80120ac:	e695      	b.n	8011dda <__gethex+0x12a>
 80120ae:	4299      	cmp	r1, r3
 80120b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80120b4:	d8d8      	bhi.n	8012068 <__gethex+0x3b8>
 80120b6:	68a3      	ldr	r3, [r4, #8]
 80120b8:	459b      	cmp	fp, r3
 80120ba:	db19      	blt.n	80120f0 <__gethex+0x440>
 80120bc:	6861      	ldr	r1, [r4, #4]
 80120be:	ee18 0a10 	vmov	r0, s16
 80120c2:	3101      	adds	r1, #1
 80120c4:	f000 f928 	bl	8012318 <_Balloc>
 80120c8:	4681      	mov	r9, r0
 80120ca:	b918      	cbnz	r0, 80120d4 <__gethex+0x424>
 80120cc:	4b1a      	ldr	r3, [pc, #104]	; (8012138 <__gethex+0x488>)
 80120ce:	4602      	mov	r2, r0
 80120d0:	2184      	movs	r1, #132	; 0x84
 80120d2:	e6a8      	b.n	8011e26 <__gethex+0x176>
 80120d4:	6922      	ldr	r2, [r4, #16]
 80120d6:	3202      	adds	r2, #2
 80120d8:	f104 010c 	add.w	r1, r4, #12
 80120dc:	0092      	lsls	r2, r2, #2
 80120de:	300c      	adds	r0, #12
 80120e0:	f000 f90c 	bl	80122fc <memcpy>
 80120e4:	4621      	mov	r1, r4
 80120e6:	ee18 0a10 	vmov	r0, s16
 80120ea:	f000 f955 	bl	8012398 <_Bfree>
 80120ee:	464c      	mov	r4, r9
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80120f8:	6122      	str	r2, [r4, #16]
 80120fa:	2201      	movs	r2, #1
 80120fc:	615a      	str	r2, [r3, #20]
 80120fe:	e7bb      	b.n	8012078 <__gethex+0x3c8>
 8012100:	6922      	ldr	r2, [r4, #16]
 8012102:	455a      	cmp	r2, fp
 8012104:	dd0b      	ble.n	801211e <__gethex+0x46e>
 8012106:	2101      	movs	r1, #1
 8012108:	4620      	mov	r0, r4
 801210a:	f7ff fd69 	bl	8011be0 <rshift>
 801210e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012112:	3501      	adds	r5, #1
 8012114:	42ab      	cmp	r3, r5
 8012116:	f6ff aed0 	blt.w	8011eba <__gethex+0x20a>
 801211a:	2701      	movs	r7, #1
 801211c:	e7c0      	b.n	80120a0 <__gethex+0x3f0>
 801211e:	f016 061f 	ands.w	r6, r6, #31
 8012122:	d0fa      	beq.n	801211a <__gethex+0x46a>
 8012124:	4453      	add	r3, sl
 8012126:	f1c6 0620 	rsb	r6, r6, #32
 801212a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801212e:	f000 f9e5 	bl	80124fc <__hi0bits>
 8012132:	42b0      	cmp	r0, r6
 8012134:	dbe7      	blt.n	8012106 <__gethex+0x456>
 8012136:	e7f0      	b.n	801211a <__gethex+0x46a>
 8012138:	08014b79 	.word	0x08014b79

0801213c <L_shift>:
 801213c:	f1c2 0208 	rsb	r2, r2, #8
 8012140:	0092      	lsls	r2, r2, #2
 8012142:	b570      	push	{r4, r5, r6, lr}
 8012144:	f1c2 0620 	rsb	r6, r2, #32
 8012148:	6843      	ldr	r3, [r0, #4]
 801214a:	6804      	ldr	r4, [r0, #0]
 801214c:	fa03 f506 	lsl.w	r5, r3, r6
 8012150:	432c      	orrs	r4, r5
 8012152:	40d3      	lsrs	r3, r2
 8012154:	6004      	str	r4, [r0, #0]
 8012156:	f840 3f04 	str.w	r3, [r0, #4]!
 801215a:	4288      	cmp	r0, r1
 801215c:	d3f4      	bcc.n	8012148 <L_shift+0xc>
 801215e:	bd70      	pop	{r4, r5, r6, pc}

08012160 <__match>:
 8012160:	b530      	push	{r4, r5, lr}
 8012162:	6803      	ldr	r3, [r0, #0]
 8012164:	3301      	adds	r3, #1
 8012166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801216a:	b914      	cbnz	r4, 8012172 <__match+0x12>
 801216c:	6003      	str	r3, [r0, #0]
 801216e:	2001      	movs	r0, #1
 8012170:	bd30      	pop	{r4, r5, pc}
 8012172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801217a:	2d19      	cmp	r5, #25
 801217c:	bf98      	it	ls
 801217e:	3220      	addls	r2, #32
 8012180:	42a2      	cmp	r2, r4
 8012182:	d0f0      	beq.n	8012166 <__match+0x6>
 8012184:	2000      	movs	r0, #0
 8012186:	e7f3      	b.n	8012170 <__match+0x10>

08012188 <__hexnan>:
 8012188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218c:	680b      	ldr	r3, [r1, #0]
 801218e:	115e      	asrs	r6, r3, #5
 8012190:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012194:	f013 031f 	ands.w	r3, r3, #31
 8012198:	b087      	sub	sp, #28
 801219a:	bf18      	it	ne
 801219c:	3604      	addne	r6, #4
 801219e:	2500      	movs	r5, #0
 80121a0:	1f37      	subs	r7, r6, #4
 80121a2:	4690      	mov	r8, r2
 80121a4:	6802      	ldr	r2, [r0, #0]
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	4682      	mov	sl, r0
 80121aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80121ae:	46b9      	mov	r9, r7
 80121b0:	463c      	mov	r4, r7
 80121b2:	9502      	str	r5, [sp, #8]
 80121b4:	46ab      	mov	fp, r5
 80121b6:	7851      	ldrb	r1, [r2, #1]
 80121b8:	1c53      	adds	r3, r2, #1
 80121ba:	9303      	str	r3, [sp, #12]
 80121bc:	b341      	cbz	r1, 8012210 <__hexnan+0x88>
 80121be:	4608      	mov	r0, r1
 80121c0:	9205      	str	r2, [sp, #20]
 80121c2:	9104      	str	r1, [sp, #16]
 80121c4:	f7ff fd5e 	bl	8011c84 <__hexdig_fun>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d14f      	bne.n	801226c <__hexnan+0xe4>
 80121cc:	9904      	ldr	r1, [sp, #16]
 80121ce:	9a05      	ldr	r2, [sp, #20]
 80121d0:	2920      	cmp	r1, #32
 80121d2:	d818      	bhi.n	8012206 <__hexnan+0x7e>
 80121d4:	9b02      	ldr	r3, [sp, #8]
 80121d6:	459b      	cmp	fp, r3
 80121d8:	dd13      	ble.n	8012202 <__hexnan+0x7a>
 80121da:	454c      	cmp	r4, r9
 80121dc:	d206      	bcs.n	80121ec <__hexnan+0x64>
 80121de:	2d07      	cmp	r5, #7
 80121e0:	dc04      	bgt.n	80121ec <__hexnan+0x64>
 80121e2:	462a      	mov	r2, r5
 80121e4:	4649      	mov	r1, r9
 80121e6:	4620      	mov	r0, r4
 80121e8:	f7ff ffa8 	bl	801213c <L_shift>
 80121ec:	4544      	cmp	r4, r8
 80121ee:	d950      	bls.n	8012292 <__hexnan+0x10a>
 80121f0:	2300      	movs	r3, #0
 80121f2:	f1a4 0904 	sub.w	r9, r4, #4
 80121f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80121fa:	f8cd b008 	str.w	fp, [sp, #8]
 80121fe:	464c      	mov	r4, r9
 8012200:	461d      	mov	r5, r3
 8012202:	9a03      	ldr	r2, [sp, #12]
 8012204:	e7d7      	b.n	80121b6 <__hexnan+0x2e>
 8012206:	2929      	cmp	r1, #41	; 0x29
 8012208:	d156      	bne.n	80122b8 <__hexnan+0x130>
 801220a:	3202      	adds	r2, #2
 801220c:	f8ca 2000 	str.w	r2, [sl]
 8012210:	f1bb 0f00 	cmp.w	fp, #0
 8012214:	d050      	beq.n	80122b8 <__hexnan+0x130>
 8012216:	454c      	cmp	r4, r9
 8012218:	d206      	bcs.n	8012228 <__hexnan+0xa0>
 801221a:	2d07      	cmp	r5, #7
 801221c:	dc04      	bgt.n	8012228 <__hexnan+0xa0>
 801221e:	462a      	mov	r2, r5
 8012220:	4649      	mov	r1, r9
 8012222:	4620      	mov	r0, r4
 8012224:	f7ff ff8a 	bl	801213c <L_shift>
 8012228:	4544      	cmp	r4, r8
 801222a:	d934      	bls.n	8012296 <__hexnan+0x10e>
 801222c:	f1a8 0204 	sub.w	r2, r8, #4
 8012230:	4623      	mov	r3, r4
 8012232:	f853 1b04 	ldr.w	r1, [r3], #4
 8012236:	f842 1f04 	str.w	r1, [r2, #4]!
 801223a:	429f      	cmp	r7, r3
 801223c:	d2f9      	bcs.n	8012232 <__hexnan+0xaa>
 801223e:	1b3b      	subs	r3, r7, r4
 8012240:	f023 0303 	bic.w	r3, r3, #3
 8012244:	3304      	adds	r3, #4
 8012246:	3401      	adds	r4, #1
 8012248:	3e03      	subs	r6, #3
 801224a:	42b4      	cmp	r4, r6
 801224c:	bf88      	it	hi
 801224e:	2304      	movhi	r3, #4
 8012250:	4443      	add	r3, r8
 8012252:	2200      	movs	r2, #0
 8012254:	f843 2b04 	str.w	r2, [r3], #4
 8012258:	429f      	cmp	r7, r3
 801225a:	d2fb      	bcs.n	8012254 <__hexnan+0xcc>
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	b91b      	cbnz	r3, 8012268 <__hexnan+0xe0>
 8012260:	4547      	cmp	r7, r8
 8012262:	d127      	bne.n	80122b4 <__hexnan+0x12c>
 8012264:	2301      	movs	r3, #1
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	2005      	movs	r0, #5
 801226a:	e026      	b.n	80122ba <__hexnan+0x132>
 801226c:	3501      	adds	r5, #1
 801226e:	2d08      	cmp	r5, #8
 8012270:	f10b 0b01 	add.w	fp, fp, #1
 8012274:	dd06      	ble.n	8012284 <__hexnan+0xfc>
 8012276:	4544      	cmp	r4, r8
 8012278:	d9c3      	bls.n	8012202 <__hexnan+0x7a>
 801227a:	2300      	movs	r3, #0
 801227c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012280:	2501      	movs	r5, #1
 8012282:	3c04      	subs	r4, #4
 8012284:	6822      	ldr	r2, [r4, #0]
 8012286:	f000 000f 	and.w	r0, r0, #15
 801228a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801228e:	6022      	str	r2, [r4, #0]
 8012290:	e7b7      	b.n	8012202 <__hexnan+0x7a>
 8012292:	2508      	movs	r5, #8
 8012294:	e7b5      	b.n	8012202 <__hexnan+0x7a>
 8012296:	9b01      	ldr	r3, [sp, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d0df      	beq.n	801225c <__hexnan+0xd4>
 801229c:	f04f 32ff 	mov.w	r2, #4294967295
 80122a0:	f1c3 0320 	rsb	r3, r3, #32
 80122a4:	fa22 f303 	lsr.w	r3, r2, r3
 80122a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80122ac:	401a      	ands	r2, r3
 80122ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80122b2:	e7d3      	b.n	801225c <__hexnan+0xd4>
 80122b4:	3f04      	subs	r7, #4
 80122b6:	e7d1      	b.n	801225c <__hexnan+0xd4>
 80122b8:	2004      	movs	r0, #4
 80122ba:	b007      	add	sp, #28
 80122bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122c0 <_localeconv_r>:
 80122c0:	4800      	ldr	r0, [pc, #0]	; (80122c4 <_localeconv_r+0x4>)
 80122c2:	4770      	bx	lr
 80122c4:	200001b0 	.word	0x200001b0

080122c8 <malloc>:
 80122c8:	4b02      	ldr	r3, [pc, #8]	; (80122d4 <malloc+0xc>)
 80122ca:	4601      	mov	r1, r0
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f000 bd67 	b.w	8012da0 <_malloc_r>
 80122d2:	bf00      	nop
 80122d4:	20000058 	.word	0x20000058

080122d8 <__ascii_mbtowc>:
 80122d8:	b082      	sub	sp, #8
 80122da:	b901      	cbnz	r1, 80122de <__ascii_mbtowc+0x6>
 80122dc:	a901      	add	r1, sp, #4
 80122de:	b142      	cbz	r2, 80122f2 <__ascii_mbtowc+0x1a>
 80122e0:	b14b      	cbz	r3, 80122f6 <__ascii_mbtowc+0x1e>
 80122e2:	7813      	ldrb	r3, [r2, #0]
 80122e4:	600b      	str	r3, [r1, #0]
 80122e6:	7812      	ldrb	r2, [r2, #0]
 80122e8:	1e10      	subs	r0, r2, #0
 80122ea:	bf18      	it	ne
 80122ec:	2001      	movne	r0, #1
 80122ee:	b002      	add	sp, #8
 80122f0:	4770      	bx	lr
 80122f2:	4610      	mov	r0, r2
 80122f4:	e7fb      	b.n	80122ee <__ascii_mbtowc+0x16>
 80122f6:	f06f 0001 	mvn.w	r0, #1
 80122fa:	e7f8      	b.n	80122ee <__ascii_mbtowc+0x16>

080122fc <memcpy>:
 80122fc:	440a      	add	r2, r1
 80122fe:	4291      	cmp	r1, r2
 8012300:	f100 33ff 	add.w	r3, r0, #4294967295
 8012304:	d100      	bne.n	8012308 <memcpy+0xc>
 8012306:	4770      	bx	lr
 8012308:	b510      	push	{r4, lr}
 801230a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801230e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012312:	4291      	cmp	r1, r2
 8012314:	d1f9      	bne.n	801230a <memcpy+0xe>
 8012316:	bd10      	pop	{r4, pc}

08012318 <_Balloc>:
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801231c:	4604      	mov	r4, r0
 801231e:	460d      	mov	r5, r1
 8012320:	b976      	cbnz	r6, 8012340 <_Balloc+0x28>
 8012322:	2010      	movs	r0, #16
 8012324:	f7ff ffd0 	bl	80122c8 <malloc>
 8012328:	4602      	mov	r2, r0
 801232a:	6260      	str	r0, [r4, #36]	; 0x24
 801232c:	b920      	cbnz	r0, 8012338 <_Balloc+0x20>
 801232e:	4b18      	ldr	r3, [pc, #96]	; (8012390 <_Balloc+0x78>)
 8012330:	4818      	ldr	r0, [pc, #96]	; (8012394 <_Balloc+0x7c>)
 8012332:	2166      	movs	r1, #102	; 0x66
 8012334:	f7fe fdaa 	bl	8010e8c <__assert_func>
 8012338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801233c:	6006      	str	r6, [r0, #0]
 801233e:	60c6      	str	r6, [r0, #12]
 8012340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012342:	68f3      	ldr	r3, [r6, #12]
 8012344:	b183      	cbz	r3, 8012368 <_Balloc+0x50>
 8012346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801234e:	b9b8      	cbnz	r0, 8012380 <_Balloc+0x68>
 8012350:	2101      	movs	r1, #1
 8012352:	fa01 f605 	lsl.w	r6, r1, r5
 8012356:	1d72      	adds	r2, r6, #5
 8012358:	0092      	lsls	r2, r2, #2
 801235a:	4620      	mov	r0, r4
 801235c:	f000 fc9d 	bl	8012c9a <_calloc_r>
 8012360:	b160      	cbz	r0, 801237c <_Balloc+0x64>
 8012362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012366:	e00e      	b.n	8012386 <_Balloc+0x6e>
 8012368:	2221      	movs	r2, #33	; 0x21
 801236a:	2104      	movs	r1, #4
 801236c:	4620      	mov	r0, r4
 801236e:	f000 fc94 	bl	8012c9a <_calloc_r>
 8012372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012374:	60f0      	str	r0, [r6, #12]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d1e4      	bne.n	8012346 <_Balloc+0x2e>
 801237c:	2000      	movs	r0, #0
 801237e:	bd70      	pop	{r4, r5, r6, pc}
 8012380:	6802      	ldr	r2, [r0, #0]
 8012382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012386:	2300      	movs	r3, #0
 8012388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801238c:	e7f7      	b.n	801237e <_Balloc+0x66>
 801238e:	bf00      	nop
 8012390:	08014960 	.word	0x08014960
 8012394:	08014c04 	.word	0x08014c04

08012398 <_Bfree>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801239c:	4605      	mov	r5, r0
 801239e:	460c      	mov	r4, r1
 80123a0:	b976      	cbnz	r6, 80123c0 <_Bfree+0x28>
 80123a2:	2010      	movs	r0, #16
 80123a4:	f7ff ff90 	bl	80122c8 <malloc>
 80123a8:	4602      	mov	r2, r0
 80123aa:	6268      	str	r0, [r5, #36]	; 0x24
 80123ac:	b920      	cbnz	r0, 80123b8 <_Bfree+0x20>
 80123ae:	4b09      	ldr	r3, [pc, #36]	; (80123d4 <_Bfree+0x3c>)
 80123b0:	4809      	ldr	r0, [pc, #36]	; (80123d8 <_Bfree+0x40>)
 80123b2:	218a      	movs	r1, #138	; 0x8a
 80123b4:	f7fe fd6a 	bl	8010e8c <__assert_func>
 80123b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123bc:	6006      	str	r6, [r0, #0]
 80123be:	60c6      	str	r6, [r0, #12]
 80123c0:	b13c      	cbz	r4, 80123d2 <_Bfree+0x3a>
 80123c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80123c4:	6862      	ldr	r2, [r4, #4]
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123cc:	6021      	str	r1, [r4, #0]
 80123ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80123d2:	bd70      	pop	{r4, r5, r6, pc}
 80123d4:	08014960 	.word	0x08014960
 80123d8:	08014c04 	.word	0x08014c04

080123dc <__multadd>:
 80123dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	690d      	ldr	r5, [r1, #16]
 80123e2:	4607      	mov	r7, r0
 80123e4:	460c      	mov	r4, r1
 80123e6:	461e      	mov	r6, r3
 80123e8:	f101 0c14 	add.w	ip, r1, #20
 80123ec:	2000      	movs	r0, #0
 80123ee:	f8dc 3000 	ldr.w	r3, [ip]
 80123f2:	b299      	uxth	r1, r3
 80123f4:	fb02 6101 	mla	r1, r2, r1, r6
 80123f8:	0c1e      	lsrs	r6, r3, #16
 80123fa:	0c0b      	lsrs	r3, r1, #16
 80123fc:	fb02 3306 	mla	r3, r2, r6, r3
 8012400:	b289      	uxth	r1, r1
 8012402:	3001      	adds	r0, #1
 8012404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012408:	4285      	cmp	r5, r0
 801240a:	f84c 1b04 	str.w	r1, [ip], #4
 801240e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012412:	dcec      	bgt.n	80123ee <__multadd+0x12>
 8012414:	b30e      	cbz	r6, 801245a <__multadd+0x7e>
 8012416:	68a3      	ldr	r3, [r4, #8]
 8012418:	42ab      	cmp	r3, r5
 801241a:	dc19      	bgt.n	8012450 <__multadd+0x74>
 801241c:	6861      	ldr	r1, [r4, #4]
 801241e:	4638      	mov	r0, r7
 8012420:	3101      	adds	r1, #1
 8012422:	f7ff ff79 	bl	8012318 <_Balloc>
 8012426:	4680      	mov	r8, r0
 8012428:	b928      	cbnz	r0, 8012436 <__multadd+0x5a>
 801242a:	4602      	mov	r2, r0
 801242c:	4b0c      	ldr	r3, [pc, #48]	; (8012460 <__multadd+0x84>)
 801242e:	480d      	ldr	r0, [pc, #52]	; (8012464 <__multadd+0x88>)
 8012430:	21b5      	movs	r1, #181	; 0xb5
 8012432:	f7fe fd2b 	bl	8010e8c <__assert_func>
 8012436:	6922      	ldr	r2, [r4, #16]
 8012438:	3202      	adds	r2, #2
 801243a:	f104 010c 	add.w	r1, r4, #12
 801243e:	0092      	lsls	r2, r2, #2
 8012440:	300c      	adds	r0, #12
 8012442:	f7ff ff5b 	bl	80122fc <memcpy>
 8012446:	4621      	mov	r1, r4
 8012448:	4638      	mov	r0, r7
 801244a:	f7ff ffa5 	bl	8012398 <_Bfree>
 801244e:	4644      	mov	r4, r8
 8012450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012454:	3501      	adds	r5, #1
 8012456:	615e      	str	r6, [r3, #20]
 8012458:	6125      	str	r5, [r4, #16]
 801245a:	4620      	mov	r0, r4
 801245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012460:	08014b79 	.word	0x08014b79
 8012464:	08014c04 	.word	0x08014c04

08012468 <__s2b>:
 8012468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801246c:	460c      	mov	r4, r1
 801246e:	4615      	mov	r5, r2
 8012470:	461f      	mov	r7, r3
 8012472:	2209      	movs	r2, #9
 8012474:	3308      	adds	r3, #8
 8012476:	4606      	mov	r6, r0
 8012478:	fb93 f3f2 	sdiv	r3, r3, r2
 801247c:	2100      	movs	r1, #0
 801247e:	2201      	movs	r2, #1
 8012480:	429a      	cmp	r2, r3
 8012482:	db09      	blt.n	8012498 <__s2b+0x30>
 8012484:	4630      	mov	r0, r6
 8012486:	f7ff ff47 	bl	8012318 <_Balloc>
 801248a:	b940      	cbnz	r0, 801249e <__s2b+0x36>
 801248c:	4602      	mov	r2, r0
 801248e:	4b19      	ldr	r3, [pc, #100]	; (80124f4 <__s2b+0x8c>)
 8012490:	4819      	ldr	r0, [pc, #100]	; (80124f8 <__s2b+0x90>)
 8012492:	21ce      	movs	r1, #206	; 0xce
 8012494:	f7fe fcfa 	bl	8010e8c <__assert_func>
 8012498:	0052      	lsls	r2, r2, #1
 801249a:	3101      	adds	r1, #1
 801249c:	e7f0      	b.n	8012480 <__s2b+0x18>
 801249e:	9b08      	ldr	r3, [sp, #32]
 80124a0:	6143      	str	r3, [r0, #20]
 80124a2:	2d09      	cmp	r5, #9
 80124a4:	f04f 0301 	mov.w	r3, #1
 80124a8:	6103      	str	r3, [r0, #16]
 80124aa:	dd16      	ble.n	80124da <__s2b+0x72>
 80124ac:	f104 0909 	add.w	r9, r4, #9
 80124b0:	46c8      	mov	r8, r9
 80124b2:	442c      	add	r4, r5
 80124b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80124b8:	4601      	mov	r1, r0
 80124ba:	3b30      	subs	r3, #48	; 0x30
 80124bc:	220a      	movs	r2, #10
 80124be:	4630      	mov	r0, r6
 80124c0:	f7ff ff8c 	bl	80123dc <__multadd>
 80124c4:	45a0      	cmp	r8, r4
 80124c6:	d1f5      	bne.n	80124b4 <__s2b+0x4c>
 80124c8:	f1a5 0408 	sub.w	r4, r5, #8
 80124cc:	444c      	add	r4, r9
 80124ce:	1b2d      	subs	r5, r5, r4
 80124d0:	1963      	adds	r3, r4, r5
 80124d2:	42bb      	cmp	r3, r7
 80124d4:	db04      	blt.n	80124e0 <__s2b+0x78>
 80124d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124da:	340a      	adds	r4, #10
 80124dc:	2509      	movs	r5, #9
 80124de:	e7f6      	b.n	80124ce <__s2b+0x66>
 80124e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124e4:	4601      	mov	r1, r0
 80124e6:	3b30      	subs	r3, #48	; 0x30
 80124e8:	220a      	movs	r2, #10
 80124ea:	4630      	mov	r0, r6
 80124ec:	f7ff ff76 	bl	80123dc <__multadd>
 80124f0:	e7ee      	b.n	80124d0 <__s2b+0x68>
 80124f2:	bf00      	nop
 80124f4:	08014b79 	.word	0x08014b79
 80124f8:	08014c04 	.word	0x08014c04

080124fc <__hi0bits>:
 80124fc:	0c03      	lsrs	r3, r0, #16
 80124fe:	041b      	lsls	r3, r3, #16
 8012500:	b9d3      	cbnz	r3, 8012538 <__hi0bits+0x3c>
 8012502:	0400      	lsls	r0, r0, #16
 8012504:	2310      	movs	r3, #16
 8012506:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801250a:	bf04      	itt	eq
 801250c:	0200      	lsleq	r0, r0, #8
 801250e:	3308      	addeq	r3, #8
 8012510:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012514:	bf04      	itt	eq
 8012516:	0100      	lsleq	r0, r0, #4
 8012518:	3304      	addeq	r3, #4
 801251a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801251e:	bf04      	itt	eq
 8012520:	0080      	lsleq	r0, r0, #2
 8012522:	3302      	addeq	r3, #2
 8012524:	2800      	cmp	r0, #0
 8012526:	db05      	blt.n	8012534 <__hi0bits+0x38>
 8012528:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801252c:	f103 0301 	add.w	r3, r3, #1
 8012530:	bf08      	it	eq
 8012532:	2320      	moveq	r3, #32
 8012534:	4618      	mov	r0, r3
 8012536:	4770      	bx	lr
 8012538:	2300      	movs	r3, #0
 801253a:	e7e4      	b.n	8012506 <__hi0bits+0xa>

0801253c <__lo0bits>:
 801253c:	6803      	ldr	r3, [r0, #0]
 801253e:	f013 0207 	ands.w	r2, r3, #7
 8012542:	4601      	mov	r1, r0
 8012544:	d00b      	beq.n	801255e <__lo0bits+0x22>
 8012546:	07da      	lsls	r2, r3, #31
 8012548:	d423      	bmi.n	8012592 <__lo0bits+0x56>
 801254a:	0798      	lsls	r0, r3, #30
 801254c:	bf49      	itett	mi
 801254e:	085b      	lsrmi	r3, r3, #1
 8012550:	089b      	lsrpl	r3, r3, #2
 8012552:	2001      	movmi	r0, #1
 8012554:	600b      	strmi	r3, [r1, #0]
 8012556:	bf5c      	itt	pl
 8012558:	600b      	strpl	r3, [r1, #0]
 801255a:	2002      	movpl	r0, #2
 801255c:	4770      	bx	lr
 801255e:	b298      	uxth	r0, r3
 8012560:	b9a8      	cbnz	r0, 801258e <__lo0bits+0x52>
 8012562:	0c1b      	lsrs	r3, r3, #16
 8012564:	2010      	movs	r0, #16
 8012566:	b2da      	uxtb	r2, r3
 8012568:	b90a      	cbnz	r2, 801256e <__lo0bits+0x32>
 801256a:	3008      	adds	r0, #8
 801256c:	0a1b      	lsrs	r3, r3, #8
 801256e:	071a      	lsls	r2, r3, #28
 8012570:	bf04      	itt	eq
 8012572:	091b      	lsreq	r3, r3, #4
 8012574:	3004      	addeq	r0, #4
 8012576:	079a      	lsls	r2, r3, #30
 8012578:	bf04      	itt	eq
 801257a:	089b      	lsreq	r3, r3, #2
 801257c:	3002      	addeq	r0, #2
 801257e:	07da      	lsls	r2, r3, #31
 8012580:	d403      	bmi.n	801258a <__lo0bits+0x4e>
 8012582:	085b      	lsrs	r3, r3, #1
 8012584:	f100 0001 	add.w	r0, r0, #1
 8012588:	d005      	beq.n	8012596 <__lo0bits+0x5a>
 801258a:	600b      	str	r3, [r1, #0]
 801258c:	4770      	bx	lr
 801258e:	4610      	mov	r0, r2
 8012590:	e7e9      	b.n	8012566 <__lo0bits+0x2a>
 8012592:	2000      	movs	r0, #0
 8012594:	4770      	bx	lr
 8012596:	2020      	movs	r0, #32
 8012598:	4770      	bx	lr
	...

0801259c <__i2b>:
 801259c:	b510      	push	{r4, lr}
 801259e:	460c      	mov	r4, r1
 80125a0:	2101      	movs	r1, #1
 80125a2:	f7ff feb9 	bl	8012318 <_Balloc>
 80125a6:	4602      	mov	r2, r0
 80125a8:	b928      	cbnz	r0, 80125b6 <__i2b+0x1a>
 80125aa:	4b05      	ldr	r3, [pc, #20]	; (80125c0 <__i2b+0x24>)
 80125ac:	4805      	ldr	r0, [pc, #20]	; (80125c4 <__i2b+0x28>)
 80125ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80125b2:	f7fe fc6b 	bl	8010e8c <__assert_func>
 80125b6:	2301      	movs	r3, #1
 80125b8:	6144      	str	r4, [r0, #20]
 80125ba:	6103      	str	r3, [r0, #16]
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	bf00      	nop
 80125c0:	08014b79 	.word	0x08014b79
 80125c4:	08014c04 	.word	0x08014c04

080125c8 <__multiply>:
 80125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125cc:	4691      	mov	r9, r2
 80125ce:	690a      	ldr	r2, [r1, #16]
 80125d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	bfb8      	it	lt
 80125d8:	460b      	movlt	r3, r1
 80125da:	460c      	mov	r4, r1
 80125dc:	bfbc      	itt	lt
 80125de:	464c      	movlt	r4, r9
 80125e0:	4699      	movlt	r9, r3
 80125e2:	6927      	ldr	r7, [r4, #16]
 80125e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80125e8:	68a3      	ldr	r3, [r4, #8]
 80125ea:	6861      	ldr	r1, [r4, #4]
 80125ec:	eb07 060a 	add.w	r6, r7, sl
 80125f0:	42b3      	cmp	r3, r6
 80125f2:	b085      	sub	sp, #20
 80125f4:	bfb8      	it	lt
 80125f6:	3101      	addlt	r1, #1
 80125f8:	f7ff fe8e 	bl	8012318 <_Balloc>
 80125fc:	b930      	cbnz	r0, 801260c <__multiply+0x44>
 80125fe:	4602      	mov	r2, r0
 8012600:	4b44      	ldr	r3, [pc, #272]	; (8012714 <__multiply+0x14c>)
 8012602:	4845      	ldr	r0, [pc, #276]	; (8012718 <__multiply+0x150>)
 8012604:	f240 115d 	movw	r1, #349	; 0x15d
 8012608:	f7fe fc40 	bl	8010e8c <__assert_func>
 801260c:	f100 0514 	add.w	r5, r0, #20
 8012610:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012614:	462b      	mov	r3, r5
 8012616:	2200      	movs	r2, #0
 8012618:	4543      	cmp	r3, r8
 801261a:	d321      	bcc.n	8012660 <__multiply+0x98>
 801261c:	f104 0314 	add.w	r3, r4, #20
 8012620:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012624:	f109 0314 	add.w	r3, r9, #20
 8012628:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801262c:	9202      	str	r2, [sp, #8]
 801262e:	1b3a      	subs	r2, r7, r4
 8012630:	3a15      	subs	r2, #21
 8012632:	f022 0203 	bic.w	r2, r2, #3
 8012636:	3204      	adds	r2, #4
 8012638:	f104 0115 	add.w	r1, r4, #21
 801263c:	428f      	cmp	r7, r1
 801263e:	bf38      	it	cc
 8012640:	2204      	movcc	r2, #4
 8012642:	9201      	str	r2, [sp, #4]
 8012644:	9a02      	ldr	r2, [sp, #8]
 8012646:	9303      	str	r3, [sp, #12]
 8012648:	429a      	cmp	r2, r3
 801264a:	d80c      	bhi.n	8012666 <__multiply+0x9e>
 801264c:	2e00      	cmp	r6, #0
 801264e:	dd03      	ble.n	8012658 <__multiply+0x90>
 8012650:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012654:	2b00      	cmp	r3, #0
 8012656:	d05a      	beq.n	801270e <__multiply+0x146>
 8012658:	6106      	str	r6, [r0, #16]
 801265a:	b005      	add	sp, #20
 801265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012660:	f843 2b04 	str.w	r2, [r3], #4
 8012664:	e7d8      	b.n	8012618 <__multiply+0x50>
 8012666:	f8b3 a000 	ldrh.w	sl, [r3]
 801266a:	f1ba 0f00 	cmp.w	sl, #0
 801266e:	d024      	beq.n	80126ba <__multiply+0xf2>
 8012670:	f104 0e14 	add.w	lr, r4, #20
 8012674:	46a9      	mov	r9, r5
 8012676:	f04f 0c00 	mov.w	ip, #0
 801267a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801267e:	f8d9 1000 	ldr.w	r1, [r9]
 8012682:	fa1f fb82 	uxth.w	fp, r2
 8012686:	b289      	uxth	r1, r1
 8012688:	fb0a 110b 	mla	r1, sl, fp, r1
 801268c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012690:	f8d9 2000 	ldr.w	r2, [r9]
 8012694:	4461      	add	r1, ip
 8012696:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801269a:	fb0a c20b 	mla	r2, sl, fp, ip
 801269e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80126a2:	b289      	uxth	r1, r1
 80126a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80126a8:	4577      	cmp	r7, lr
 80126aa:	f849 1b04 	str.w	r1, [r9], #4
 80126ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80126b2:	d8e2      	bhi.n	801267a <__multiply+0xb2>
 80126b4:	9a01      	ldr	r2, [sp, #4]
 80126b6:	f845 c002 	str.w	ip, [r5, r2]
 80126ba:	9a03      	ldr	r2, [sp, #12]
 80126bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80126c0:	3304      	adds	r3, #4
 80126c2:	f1b9 0f00 	cmp.w	r9, #0
 80126c6:	d020      	beq.n	801270a <__multiply+0x142>
 80126c8:	6829      	ldr	r1, [r5, #0]
 80126ca:	f104 0c14 	add.w	ip, r4, #20
 80126ce:	46ae      	mov	lr, r5
 80126d0:	f04f 0a00 	mov.w	sl, #0
 80126d4:	f8bc b000 	ldrh.w	fp, [ip]
 80126d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80126dc:	fb09 220b 	mla	r2, r9, fp, r2
 80126e0:	4492      	add	sl, r2
 80126e2:	b289      	uxth	r1, r1
 80126e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80126e8:	f84e 1b04 	str.w	r1, [lr], #4
 80126ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80126f0:	f8be 1000 	ldrh.w	r1, [lr]
 80126f4:	0c12      	lsrs	r2, r2, #16
 80126f6:	fb09 1102 	mla	r1, r9, r2, r1
 80126fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80126fe:	4567      	cmp	r7, ip
 8012700:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012704:	d8e6      	bhi.n	80126d4 <__multiply+0x10c>
 8012706:	9a01      	ldr	r2, [sp, #4]
 8012708:	50a9      	str	r1, [r5, r2]
 801270a:	3504      	adds	r5, #4
 801270c:	e79a      	b.n	8012644 <__multiply+0x7c>
 801270e:	3e01      	subs	r6, #1
 8012710:	e79c      	b.n	801264c <__multiply+0x84>
 8012712:	bf00      	nop
 8012714:	08014b79 	.word	0x08014b79
 8012718:	08014c04 	.word	0x08014c04

0801271c <__pow5mult>:
 801271c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012720:	4615      	mov	r5, r2
 8012722:	f012 0203 	ands.w	r2, r2, #3
 8012726:	4606      	mov	r6, r0
 8012728:	460f      	mov	r7, r1
 801272a:	d007      	beq.n	801273c <__pow5mult+0x20>
 801272c:	4c25      	ldr	r4, [pc, #148]	; (80127c4 <__pow5mult+0xa8>)
 801272e:	3a01      	subs	r2, #1
 8012730:	2300      	movs	r3, #0
 8012732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012736:	f7ff fe51 	bl	80123dc <__multadd>
 801273a:	4607      	mov	r7, r0
 801273c:	10ad      	asrs	r5, r5, #2
 801273e:	d03d      	beq.n	80127bc <__pow5mult+0xa0>
 8012740:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012742:	b97c      	cbnz	r4, 8012764 <__pow5mult+0x48>
 8012744:	2010      	movs	r0, #16
 8012746:	f7ff fdbf 	bl	80122c8 <malloc>
 801274a:	4602      	mov	r2, r0
 801274c:	6270      	str	r0, [r6, #36]	; 0x24
 801274e:	b928      	cbnz	r0, 801275c <__pow5mult+0x40>
 8012750:	4b1d      	ldr	r3, [pc, #116]	; (80127c8 <__pow5mult+0xac>)
 8012752:	481e      	ldr	r0, [pc, #120]	; (80127cc <__pow5mult+0xb0>)
 8012754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012758:	f7fe fb98 	bl	8010e8c <__assert_func>
 801275c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012760:	6004      	str	r4, [r0, #0]
 8012762:	60c4      	str	r4, [r0, #12]
 8012764:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801276c:	b94c      	cbnz	r4, 8012782 <__pow5mult+0x66>
 801276e:	f240 2171 	movw	r1, #625	; 0x271
 8012772:	4630      	mov	r0, r6
 8012774:	f7ff ff12 	bl	801259c <__i2b>
 8012778:	2300      	movs	r3, #0
 801277a:	f8c8 0008 	str.w	r0, [r8, #8]
 801277e:	4604      	mov	r4, r0
 8012780:	6003      	str	r3, [r0, #0]
 8012782:	f04f 0900 	mov.w	r9, #0
 8012786:	07eb      	lsls	r3, r5, #31
 8012788:	d50a      	bpl.n	80127a0 <__pow5mult+0x84>
 801278a:	4639      	mov	r1, r7
 801278c:	4622      	mov	r2, r4
 801278e:	4630      	mov	r0, r6
 8012790:	f7ff ff1a 	bl	80125c8 <__multiply>
 8012794:	4639      	mov	r1, r7
 8012796:	4680      	mov	r8, r0
 8012798:	4630      	mov	r0, r6
 801279a:	f7ff fdfd 	bl	8012398 <_Bfree>
 801279e:	4647      	mov	r7, r8
 80127a0:	106d      	asrs	r5, r5, #1
 80127a2:	d00b      	beq.n	80127bc <__pow5mult+0xa0>
 80127a4:	6820      	ldr	r0, [r4, #0]
 80127a6:	b938      	cbnz	r0, 80127b8 <__pow5mult+0x9c>
 80127a8:	4622      	mov	r2, r4
 80127aa:	4621      	mov	r1, r4
 80127ac:	4630      	mov	r0, r6
 80127ae:	f7ff ff0b 	bl	80125c8 <__multiply>
 80127b2:	6020      	str	r0, [r4, #0]
 80127b4:	f8c0 9000 	str.w	r9, [r0]
 80127b8:	4604      	mov	r4, r0
 80127ba:	e7e4      	b.n	8012786 <__pow5mult+0x6a>
 80127bc:	4638      	mov	r0, r7
 80127be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127c2:	bf00      	nop
 80127c4:	08014d50 	.word	0x08014d50
 80127c8:	08014960 	.word	0x08014960
 80127cc:	08014c04 	.word	0x08014c04

080127d0 <__lshift>:
 80127d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127d4:	460c      	mov	r4, r1
 80127d6:	6849      	ldr	r1, [r1, #4]
 80127d8:	6923      	ldr	r3, [r4, #16]
 80127da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127de:	68a3      	ldr	r3, [r4, #8]
 80127e0:	4607      	mov	r7, r0
 80127e2:	4691      	mov	r9, r2
 80127e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127e8:	f108 0601 	add.w	r6, r8, #1
 80127ec:	42b3      	cmp	r3, r6
 80127ee:	db0b      	blt.n	8012808 <__lshift+0x38>
 80127f0:	4638      	mov	r0, r7
 80127f2:	f7ff fd91 	bl	8012318 <_Balloc>
 80127f6:	4605      	mov	r5, r0
 80127f8:	b948      	cbnz	r0, 801280e <__lshift+0x3e>
 80127fa:	4602      	mov	r2, r0
 80127fc:	4b2a      	ldr	r3, [pc, #168]	; (80128a8 <__lshift+0xd8>)
 80127fe:	482b      	ldr	r0, [pc, #172]	; (80128ac <__lshift+0xdc>)
 8012800:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012804:	f7fe fb42 	bl	8010e8c <__assert_func>
 8012808:	3101      	adds	r1, #1
 801280a:	005b      	lsls	r3, r3, #1
 801280c:	e7ee      	b.n	80127ec <__lshift+0x1c>
 801280e:	2300      	movs	r3, #0
 8012810:	f100 0114 	add.w	r1, r0, #20
 8012814:	f100 0210 	add.w	r2, r0, #16
 8012818:	4618      	mov	r0, r3
 801281a:	4553      	cmp	r3, sl
 801281c:	db37      	blt.n	801288e <__lshift+0xbe>
 801281e:	6920      	ldr	r0, [r4, #16]
 8012820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012824:	f104 0314 	add.w	r3, r4, #20
 8012828:	f019 091f 	ands.w	r9, r9, #31
 801282c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012830:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012834:	d02f      	beq.n	8012896 <__lshift+0xc6>
 8012836:	f1c9 0e20 	rsb	lr, r9, #32
 801283a:	468a      	mov	sl, r1
 801283c:	f04f 0c00 	mov.w	ip, #0
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	fa02 f209 	lsl.w	r2, r2, r9
 8012846:	ea42 020c 	orr.w	r2, r2, ip
 801284a:	f84a 2b04 	str.w	r2, [sl], #4
 801284e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012852:	4298      	cmp	r0, r3
 8012854:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012858:	d8f2      	bhi.n	8012840 <__lshift+0x70>
 801285a:	1b03      	subs	r3, r0, r4
 801285c:	3b15      	subs	r3, #21
 801285e:	f023 0303 	bic.w	r3, r3, #3
 8012862:	3304      	adds	r3, #4
 8012864:	f104 0215 	add.w	r2, r4, #21
 8012868:	4290      	cmp	r0, r2
 801286a:	bf38      	it	cc
 801286c:	2304      	movcc	r3, #4
 801286e:	f841 c003 	str.w	ip, [r1, r3]
 8012872:	f1bc 0f00 	cmp.w	ip, #0
 8012876:	d001      	beq.n	801287c <__lshift+0xac>
 8012878:	f108 0602 	add.w	r6, r8, #2
 801287c:	3e01      	subs	r6, #1
 801287e:	4638      	mov	r0, r7
 8012880:	612e      	str	r6, [r5, #16]
 8012882:	4621      	mov	r1, r4
 8012884:	f7ff fd88 	bl	8012398 <_Bfree>
 8012888:	4628      	mov	r0, r5
 801288a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801288e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012892:	3301      	adds	r3, #1
 8012894:	e7c1      	b.n	801281a <__lshift+0x4a>
 8012896:	3904      	subs	r1, #4
 8012898:	f853 2b04 	ldr.w	r2, [r3], #4
 801289c:	f841 2f04 	str.w	r2, [r1, #4]!
 80128a0:	4298      	cmp	r0, r3
 80128a2:	d8f9      	bhi.n	8012898 <__lshift+0xc8>
 80128a4:	e7ea      	b.n	801287c <__lshift+0xac>
 80128a6:	bf00      	nop
 80128a8:	08014b79 	.word	0x08014b79
 80128ac:	08014c04 	.word	0x08014c04

080128b0 <__mcmp>:
 80128b0:	b530      	push	{r4, r5, lr}
 80128b2:	6902      	ldr	r2, [r0, #16]
 80128b4:	690c      	ldr	r4, [r1, #16]
 80128b6:	1b12      	subs	r2, r2, r4
 80128b8:	d10e      	bne.n	80128d8 <__mcmp+0x28>
 80128ba:	f100 0314 	add.w	r3, r0, #20
 80128be:	3114      	adds	r1, #20
 80128c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80128c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80128c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80128cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80128d0:	42a5      	cmp	r5, r4
 80128d2:	d003      	beq.n	80128dc <__mcmp+0x2c>
 80128d4:	d305      	bcc.n	80128e2 <__mcmp+0x32>
 80128d6:	2201      	movs	r2, #1
 80128d8:	4610      	mov	r0, r2
 80128da:	bd30      	pop	{r4, r5, pc}
 80128dc:	4283      	cmp	r3, r0
 80128de:	d3f3      	bcc.n	80128c8 <__mcmp+0x18>
 80128e0:	e7fa      	b.n	80128d8 <__mcmp+0x28>
 80128e2:	f04f 32ff 	mov.w	r2, #4294967295
 80128e6:	e7f7      	b.n	80128d8 <__mcmp+0x28>

080128e8 <__mdiff>:
 80128e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ec:	460c      	mov	r4, r1
 80128ee:	4606      	mov	r6, r0
 80128f0:	4611      	mov	r1, r2
 80128f2:	4620      	mov	r0, r4
 80128f4:	4690      	mov	r8, r2
 80128f6:	f7ff ffdb 	bl	80128b0 <__mcmp>
 80128fa:	1e05      	subs	r5, r0, #0
 80128fc:	d110      	bne.n	8012920 <__mdiff+0x38>
 80128fe:	4629      	mov	r1, r5
 8012900:	4630      	mov	r0, r6
 8012902:	f7ff fd09 	bl	8012318 <_Balloc>
 8012906:	b930      	cbnz	r0, 8012916 <__mdiff+0x2e>
 8012908:	4b3a      	ldr	r3, [pc, #232]	; (80129f4 <__mdiff+0x10c>)
 801290a:	4602      	mov	r2, r0
 801290c:	f240 2132 	movw	r1, #562	; 0x232
 8012910:	4839      	ldr	r0, [pc, #228]	; (80129f8 <__mdiff+0x110>)
 8012912:	f7fe fabb 	bl	8010e8c <__assert_func>
 8012916:	2301      	movs	r3, #1
 8012918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801291c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012920:	bfa4      	itt	ge
 8012922:	4643      	movge	r3, r8
 8012924:	46a0      	movge	r8, r4
 8012926:	4630      	mov	r0, r6
 8012928:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801292c:	bfa6      	itte	ge
 801292e:	461c      	movge	r4, r3
 8012930:	2500      	movge	r5, #0
 8012932:	2501      	movlt	r5, #1
 8012934:	f7ff fcf0 	bl	8012318 <_Balloc>
 8012938:	b920      	cbnz	r0, 8012944 <__mdiff+0x5c>
 801293a:	4b2e      	ldr	r3, [pc, #184]	; (80129f4 <__mdiff+0x10c>)
 801293c:	4602      	mov	r2, r0
 801293e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012942:	e7e5      	b.n	8012910 <__mdiff+0x28>
 8012944:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012948:	6926      	ldr	r6, [r4, #16]
 801294a:	60c5      	str	r5, [r0, #12]
 801294c:	f104 0914 	add.w	r9, r4, #20
 8012950:	f108 0514 	add.w	r5, r8, #20
 8012954:	f100 0e14 	add.w	lr, r0, #20
 8012958:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801295c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012960:	f108 0210 	add.w	r2, r8, #16
 8012964:	46f2      	mov	sl, lr
 8012966:	2100      	movs	r1, #0
 8012968:	f859 3b04 	ldr.w	r3, [r9], #4
 801296c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012970:	fa1f f883 	uxth.w	r8, r3
 8012974:	fa11 f18b 	uxtah	r1, r1, fp
 8012978:	0c1b      	lsrs	r3, r3, #16
 801297a:	eba1 0808 	sub.w	r8, r1, r8
 801297e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012982:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012986:	fa1f f888 	uxth.w	r8, r8
 801298a:	1419      	asrs	r1, r3, #16
 801298c:	454e      	cmp	r6, r9
 801298e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012992:	f84a 3b04 	str.w	r3, [sl], #4
 8012996:	d8e7      	bhi.n	8012968 <__mdiff+0x80>
 8012998:	1b33      	subs	r3, r6, r4
 801299a:	3b15      	subs	r3, #21
 801299c:	f023 0303 	bic.w	r3, r3, #3
 80129a0:	3304      	adds	r3, #4
 80129a2:	3415      	adds	r4, #21
 80129a4:	42a6      	cmp	r6, r4
 80129a6:	bf38      	it	cc
 80129a8:	2304      	movcc	r3, #4
 80129aa:	441d      	add	r5, r3
 80129ac:	4473      	add	r3, lr
 80129ae:	469e      	mov	lr, r3
 80129b0:	462e      	mov	r6, r5
 80129b2:	4566      	cmp	r6, ip
 80129b4:	d30e      	bcc.n	80129d4 <__mdiff+0xec>
 80129b6:	f10c 0203 	add.w	r2, ip, #3
 80129ba:	1b52      	subs	r2, r2, r5
 80129bc:	f022 0203 	bic.w	r2, r2, #3
 80129c0:	3d03      	subs	r5, #3
 80129c2:	45ac      	cmp	ip, r5
 80129c4:	bf38      	it	cc
 80129c6:	2200      	movcc	r2, #0
 80129c8:	441a      	add	r2, r3
 80129ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80129ce:	b17b      	cbz	r3, 80129f0 <__mdiff+0x108>
 80129d0:	6107      	str	r7, [r0, #16]
 80129d2:	e7a3      	b.n	801291c <__mdiff+0x34>
 80129d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80129d8:	fa11 f288 	uxtah	r2, r1, r8
 80129dc:	1414      	asrs	r4, r2, #16
 80129de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80129e2:	b292      	uxth	r2, r2
 80129e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80129e8:	f84e 2b04 	str.w	r2, [lr], #4
 80129ec:	1421      	asrs	r1, r4, #16
 80129ee:	e7e0      	b.n	80129b2 <__mdiff+0xca>
 80129f0:	3f01      	subs	r7, #1
 80129f2:	e7ea      	b.n	80129ca <__mdiff+0xe2>
 80129f4:	08014b79 	.word	0x08014b79
 80129f8:	08014c04 	.word	0x08014c04

080129fc <__ulp>:
 80129fc:	b082      	sub	sp, #8
 80129fe:	ed8d 0b00 	vstr	d0, [sp]
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	4912      	ldr	r1, [pc, #72]	; (8012a50 <__ulp+0x54>)
 8012a06:	4019      	ands	r1, r3
 8012a08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	dd05      	ble.n	8012a1c <__ulp+0x20>
 8012a10:	2200      	movs	r2, #0
 8012a12:	460b      	mov	r3, r1
 8012a14:	ec43 2b10 	vmov	d0, r2, r3
 8012a18:	b002      	add	sp, #8
 8012a1a:	4770      	bx	lr
 8012a1c:	4249      	negs	r1, r1
 8012a1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012a22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012a26:	f04f 0200 	mov.w	r2, #0
 8012a2a:	f04f 0300 	mov.w	r3, #0
 8012a2e:	da04      	bge.n	8012a3a <__ulp+0x3e>
 8012a30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012a34:	fa41 f300 	asr.w	r3, r1, r0
 8012a38:	e7ec      	b.n	8012a14 <__ulp+0x18>
 8012a3a:	f1a0 0114 	sub.w	r1, r0, #20
 8012a3e:	291e      	cmp	r1, #30
 8012a40:	bfda      	itte	le
 8012a42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012a46:	fa20 f101 	lsrle.w	r1, r0, r1
 8012a4a:	2101      	movgt	r1, #1
 8012a4c:	460a      	mov	r2, r1
 8012a4e:	e7e1      	b.n	8012a14 <__ulp+0x18>
 8012a50:	7ff00000 	.word	0x7ff00000

08012a54 <__b2d>:
 8012a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a56:	6905      	ldr	r5, [r0, #16]
 8012a58:	f100 0714 	add.w	r7, r0, #20
 8012a5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012a60:	1f2e      	subs	r6, r5, #4
 8012a62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012a66:	4620      	mov	r0, r4
 8012a68:	f7ff fd48 	bl	80124fc <__hi0bits>
 8012a6c:	f1c0 0320 	rsb	r3, r0, #32
 8012a70:	280a      	cmp	r0, #10
 8012a72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012af0 <__b2d+0x9c>
 8012a76:	600b      	str	r3, [r1, #0]
 8012a78:	dc14      	bgt.n	8012aa4 <__b2d+0x50>
 8012a7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012a7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012a82:	42b7      	cmp	r7, r6
 8012a84:	ea41 030c 	orr.w	r3, r1, ip
 8012a88:	bf34      	ite	cc
 8012a8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012a8e:	2100      	movcs	r1, #0
 8012a90:	3015      	adds	r0, #21
 8012a92:	fa04 f000 	lsl.w	r0, r4, r0
 8012a96:	fa21 f10e 	lsr.w	r1, r1, lr
 8012a9a:	ea40 0201 	orr.w	r2, r0, r1
 8012a9e:	ec43 2b10 	vmov	d0, r2, r3
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa4:	42b7      	cmp	r7, r6
 8012aa6:	bf3a      	itte	cc
 8012aa8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012aac:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ab0:	2100      	movcs	r1, #0
 8012ab2:	380b      	subs	r0, #11
 8012ab4:	d017      	beq.n	8012ae6 <__b2d+0x92>
 8012ab6:	f1c0 0c20 	rsb	ip, r0, #32
 8012aba:	fa04 f500 	lsl.w	r5, r4, r0
 8012abe:	42be      	cmp	r6, r7
 8012ac0:	fa21 f40c 	lsr.w	r4, r1, ip
 8012ac4:	ea45 0504 	orr.w	r5, r5, r4
 8012ac8:	bf8c      	ite	hi
 8012aca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012ace:	2400      	movls	r4, #0
 8012ad0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ad4:	fa01 f000 	lsl.w	r0, r1, r0
 8012ad8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012adc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ae0:	ea40 0204 	orr.w	r2, r0, r4
 8012ae4:	e7db      	b.n	8012a9e <__b2d+0x4a>
 8012ae6:	ea44 030c 	orr.w	r3, r4, ip
 8012aea:	460a      	mov	r2, r1
 8012aec:	e7d7      	b.n	8012a9e <__b2d+0x4a>
 8012aee:	bf00      	nop
 8012af0:	3ff00000 	.word	0x3ff00000

08012af4 <__d2b>:
 8012af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012af8:	4689      	mov	r9, r1
 8012afa:	2101      	movs	r1, #1
 8012afc:	ec57 6b10 	vmov	r6, r7, d0
 8012b00:	4690      	mov	r8, r2
 8012b02:	f7ff fc09 	bl	8012318 <_Balloc>
 8012b06:	4604      	mov	r4, r0
 8012b08:	b930      	cbnz	r0, 8012b18 <__d2b+0x24>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <__d2b+0xb0>)
 8012b0e:	4826      	ldr	r0, [pc, #152]	; (8012ba8 <__d2b+0xb4>)
 8012b10:	f240 310a 	movw	r1, #778	; 0x30a
 8012b14:	f7fe f9ba 	bl	8010e8c <__assert_func>
 8012b18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b20:	bb35      	cbnz	r5, 8012b70 <__d2b+0x7c>
 8012b22:	2e00      	cmp	r6, #0
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	d028      	beq.n	8012b7a <__d2b+0x86>
 8012b28:	4668      	mov	r0, sp
 8012b2a:	9600      	str	r6, [sp, #0]
 8012b2c:	f7ff fd06 	bl	801253c <__lo0bits>
 8012b30:	9900      	ldr	r1, [sp, #0]
 8012b32:	b300      	cbz	r0, 8012b76 <__d2b+0x82>
 8012b34:	9a01      	ldr	r2, [sp, #4]
 8012b36:	f1c0 0320 	rsb	r3, r0, #32
 8012b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b3e:	430b      	orrs	r3, r1
 8012b40:	40c2      	lsrs	r2, r0
 8012b42:	6163      	str	r3, [r4, #20]
 8012b44:	9201      	str	r2, [sp, #4]
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	61a3      	str	r3, [r4, #24]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	bf14      	ite	ne
 8012b4e:	2202      	movne	r2, #2
 8012b50:	2201      	moveq	r2, #1
 8012b52:	6122      	str	r2, [r4, #16]
 8012b54:	b1d5      	cbz	r5, 8012b8c <__d2b+0x98>
 8012b56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b5a:	4405      	add	r5, r0
 8012b5c:	f8c9 5000 	str.w	r5, [r9]
 8012b60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b64:	f8c8 0000 	str.w	r0, [r8]
 8012b68:	4620      	mov	r0, r4
 8012b6a:	b003      	add	sp, #12
 8012b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b74:	e7d5      	b.n	8012b22 <__d2b+0x2e>
 8012b76:	6161      	str	r1, [r4, #20]
 8012b78:	e7e5      	b.n	8012b46 <__d2b+0x52>
 8012b7a:	a801      	add	r0, sp, #4
 8012b7c:	f7ff fcde 	bl	801253c <__lo0bits>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	6163      	str	r3, [r4, #20]
 8012b84:	2201      	movs	r2, #1
 8012b86:	6122      	str	r2, [r4, #16]
 8012b88:	3020      	adds	r0, #32
 8012b8a:	e7e3      	b.n	8012b54 <__d2b+0x60>
 8012b8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b94:	f8c9 0000 	str.w	r0, [r9]
 8012b98:	6918      	ldr	r0, [r3, #16]
 8012b9a:	f7ff fcaf 	bl	80124fc <__hi0bits>
 8012b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ba2:	e7df      	b.n	8012b64 <__d2b+0x70>
 8012ba4:	08014b79 	.word	0x08014b79
 8012ba8:	08014c04 	.word	0x08014c04

08012bac <__ratio>:
 8012bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb0:	4688      	mov	r8, r1
 8012bb2:	4669      	mov	r1, sp
 8012bb4:	4681      	mov	r9, r0
 8012bb6:	f7ff ff4d 	bl	8012a54 <__b2d>
 8012bba:	a901      	add	r1, sp, #4
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	ec55 4b10 	vmov	r4, r5, d0
 8012bc2:	f7ff ff47 	bl	8012a54 <__b2d>
 8012bc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012bca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012bce:	eba3 0c02 	sub.w	ip, r3, r2
 8012bd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012bd6:	1a9b      	subs	r3, r3, r2
 8012bd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012bdc:	ec51 0b10 	vmov	r0, r1, d0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	bfd6      	itet	le
 8012be4:	460a      	movle	r2, r1
 8012be6:	462a      	movgt	r2, r5
 8012be8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012bec:	468b      	mov	fp, r1
 8012bee:	462f      	mov	r7, r5
 8012bf0:	bfd4      	ite	le
 8012bf2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012bf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	ee10 2a10 	vmov	r2, s0
 8012c00:	465b      	mov	r3, fp
 8012c02:	4639      	mov	r1, r7
 8012c04:	f7ed fe42 	bl	800088c <__aeabi_ddiv>
 8012c08:	ec41 0b10 	vmov	d0, r0, r1
 8012c0c:	b003      	add	sp, #12
 8012c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c12 <__copybits>:
 8012c12:	3901      	subs	r1, #1
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	1149      	asrs	r1, r1, #5
 8012c18:	6914      	ldr	r4, [r2, #16]
 8012c1a:	3101      	adds	r1, #1
 8012c1c:	f102 0314 	add.w	r3, r2, #20
 8012c20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012c24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012c28:	1f05      	subs	r5, r0, #4
 8012c2a:	42a3      	cmp	r3, r4
 8012c2c:	d30c      	bcc.n	8012c48 <__copybits+0x36>
 8012c2e:	1aa3      	subs	r3, r4, r2
 8012c30:	3b11      	subs	r3, #17
 8012c32:	f023 0303 	bic.w	r3, r3, #3
 8012c36:	3211      	adds	r2, #17
 8012c38:	42a2      	cmp	r2, r4
 8012c3a:	bf88      	it	hi
 8012c3c:	2300      	movhi	r3, #0
 8012c3e:	4418      	add	r0, r3
 8012c40:	2300      	movs	r3, #0
 8012c42:	4288      	cmp	r0, r1
 8012c44:	d305      	bcc.n	8012c52 <__copybits+0x40>
 8012c46:	bd70      	pop	{r4, r5, r6, pc}
 8012c48:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c50:	e7eb      	b.n	8012c2a <__copybits+0x18>
 8012c52:	f840 3b04 	str.w	r3, [r0], #4
 8012c56:	e7f4      	b.n	8012c42 <__copybits+0x30>

08012c58 <__any_on>:
 8012c58:	f100 0214 	add.w	r2, r0, #20
 8012c5c:	6900      	ldr	r0, [r0, #16]
 8012c5e:	114b      	asrs	r3, r1, #5
 8012c60:	4298      	cmp	r0, r3
 8012c62:	b510      	push	{r4, lr}
 8012c64:	db11      	blt.n	8012c8a <__any_on+0x32>
 8012c66:	dd0a      	ble.n	8012c7e <__any_on+0x26>
 8012c68:	f011 011f 	ands.w	r1, r1, #31
 8012c6c:	d007      	beq.n	8012c7e <__any_on+0x26>
 8012c6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c72:	fa24 f001 	lsr.w	r0, r4, r1
 8012c76:	fa00 f101 	lsl.w	r1, r0, r1
 8012c7a:	428c      	cmp	r4, r1
 8012c7c:	d10b      	bne.n	8012c96 <__any_on+0x3e>
 8012c7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d803      	bhi.n	8012c8e <__any_on+0x36>
 8012c86:	2000      	movs	r0, #0
 8012c88:	bd10      	pop	{r4, pc}
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	e7f7      	b.n	8012c7e <__any_on+0x26>
 8012c8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c92:	2900      	cmp	r1, #0
 8012c94:	d0f5      	beq.n	8012c82 <__any_on+0x2a>
 8012c96:	2001      	movs	r0, #1
 8012c98:	e7f6      	b.n	8012c88 <__any_on+0x30>

08012c9a <_calloc_r>:
 8012c9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c9c:	fba1 2402 	umull	r2, r4, r1, r2
 8012ca0:	b94c      	cbnz	r4, 8012cb6 <_calloc_r+0x1c>
 8012ca2:	4611      	mov	r1, r2
 8012ca4:	9201      	str	r2, [sp, #4]
 8012ca6:	f000 f87b 	bl	8012da0 <_malloc_r>
 8012caa:	9a01      	ldr	r2, [sp, #4]
 8012cac:	4605      	mov	r5, r0
 8012cae:	b930      	cbnz	r0, 8012cbe <_calloc_r+0x24>
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	b003      	add	sp, #12
 8012cb4:	bd30      	pop	{r4, r5, pc}
 8012cb6:	220c      	movs	r2, #12
 8012cb8:	6002      	str	r2, [r0, #0]
 8012cba:	2500      	movs	r5, #0
 8012cbc:	e7f8      	b.n	8012cb0 <_calloc_r+0x16>
 8012cbe:	4621      	mov	r1, r4
 8012cc0:	f7fc f982 	bl	800efc8 <memset>
 8012cc4:	e7f4      	b.n	8012cb0 <_calloc_r+0x16>
	...

08012cc8 <_free_r>:
 8012cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cca:	2900      	cmp	r1, #0
 8012ccc:	d044      	beq.n	8012d58 <_free_r+0x90>
 8012cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cd2:	9001      	str	r0, [sp, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8012cda:	bfb8      	it	lt
 8012cdc:	18e4      	addlt	r4, r4, r3
 8012cde:	f000 fec7 	bl	8013a70 <__malloc_lock>
 8012ce2:	4a1e      	ldr	r2, [pc, #120]	; (8012d5c <_free_r+0x94>)
 8012ce4:	9801      	ldr	r0, [sp, #4]
 8012ce6:	6813      	ldr	r3, [r2, #0]
 8012ce8:	b933      	cbnz	r3, 8012cf8 <_free_r+0x30>
 8012cea:	6063      	str	r3, [r4, #4]
 8012cec:	6014      	str	r4, [r2, #0]
 8012cee:	b003      	add	sp, #12
 8012cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cf4:	f000 bec2 	b.w	8013a7c <__malloc_unlock>
 8012cf8:	42a3      	cmp	r3, r4
 8012cfa:	d908      	bls.n	8012d0e <_free_r+0x46>
 8012cfc:	6825      	ldr	r5, [r4, #0]
 8012cfe:	1961      	adds	r1, r4, r5
 8012d00:	428b      	cmp	r3, r1
 8012d02:	bf01      	itttt	eq
 8012d04:	6819      	ldreq	r1, [r3, #0]
 8012d06:	685b      	ldreq	r3, [r3, #4]
 8012d08:	1949      	addeq	r1, r1, r5
 8012d0a:	6021      	streq	r1, [r4, #0]
 8012d0c:	e7ed      	b.n	8012cea <_free_r+0x22>
 8012d0e:	461a      	mov	r2, r3
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	b10b      	cbz	r3, 8012d18 <_free_r+0x50>
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	d9fa      	bls.n	8012d0e <_free_r+0x46>
 8012d18:	6811      	ldr	r1, [r2, #0]
 8012d1a:	1855      	adds	r5, r2, r1
 8012d1c:	42a5      	cmp	r5, r4
 8012d1e:	d10b      	bne.n	8012d38 <_free_r+0x70>
 8012d20:	6824      	ldr	r4, [r4, #0]
 8012d22:	4421      	add	r1, r4
 8012d24:	1854      	adds	r4, r2, r1
 8012d26:	42a3      	cmp	r3, r4
 8012d28:	6011      	str	r1, [r2, #0]
 8012d2a:	d1e0      	bne.n	8012cee <_free_r+0x26>
 8012d2c:	681c      	ldr	r4, [r3, #0]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	6053      	str	r3, [r2, #4]
 8012d32:	4421      	add	r1, r4
 8012d34:	6011      	str	r1, [r2, #0]
 8012d36:	e7da      	b.n	8012cee <_free_r+0x26>
 8012d38:	d902      	bls.n	8012d40 <_free_r+0x78>
 8012d3a:	230c      	movs	r3, #12
 8012d3c:	6003      	str	r3, [r0, #0]
 8012d3e:	e7d6      	b.n	8012cee <_free_r+0x26>
 8012d40:	6825      	ldr	r5, [r4, #0]
 8012d42:	1961      	adds	r1, r4, r5
 8012d44:	428b      	cmp	r3, r1
 8012d46:	bf04      	itt	eq
 8012d48:	6819      	ldreq	r1, [r3, #0]
 8012d4a:	685b      	ldreq	r3, [r3, #4]
 8012d4c:	6063      	str	r3, [r4, #4]
 8012d4e:	bf04      	itt	eq
 8012d50:	1949      	addeq	r1, r1, r5
 8012d52:	6021      	streq	r1, [r4, #0]
 8012d54:	6054      	str	r4, [r2, #4]
 8012d56:	e7ca      	b.n	8012cee <_free_r+0x26>
 8012d58:	b003      	add	sp, #12
 8012d5a:	bd30      	pop	{r4, r5, pc}
 8012d5c:	20002a98 	.word	0x20002a98

08012d60 <sbrk_aligned>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	4e0e      	ldr	r6, [pc, #56]	; (8012d9c <sbrk_aligned+0x3c>)
 8012d64:	460c      	mov	r4, r1
 8012d66:	6831      	ldr	r1, [r6, #0]
 8012d68:	4605      	mov	r5, r0
 8012d6a:	b911      	cbnz	r1, 8012d72 <sbrk_aligned+0x12>
 8012d6c:	f000 fb4c 	bl	8013408 <_sbrk_r>
 8012d70:	6030      	str	r0, [r6, #0]
 8012d72:	4621      	mov	r1, r4
 8012d74:	4628      	mov	r0, r5
 8012d76:	f000 fb47 	bl	8013408 <_sbrk_r>
 8012d7a:	1c43      	adds	r3, r0, #1
 8012d7c:	d00a      	beq.n	8012d94 <sbrk_aligned+0x34>
 8012d7e:	1cc4      	adds	r4, r0, #3
 8012d80:	f024 0403 	bic.w	r4, r4, #3
 8012d84:	42a0      	cmp	r0, r4
 8012d86:	d007      	beq.n	8012d98 <sbrk_aligned+0x38>
 8012d88:	1a21      	subs	r1, r4, r0
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	f000 fb3c 	bl	8013408 <_sbrk_r>
 8012d90:	3001      	adds	r0, #1
 8012d92:	d101      	bne.n	8012d98 <sbrk_aligned+0x38>
 8012d94:	f04f 34ff 	mov.w	r4, #4294967295
 8012d98:	4620      	mov	r0, r4
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	20002a9c 	.word	0x20002a9c

08012da0 <_malloc_r>:
 8012da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da4:	1ccd      	adds	r5, r1, #3
 8012da6:	f025 0503 	bic.w	r5, r5, #3
 8012daa:	3508      	adds	r5, #8
 8012dac:	2d0c      	cmp	r5, #12
 8012dae:	bf38      	it	cc
 8012db0:	250c      	movcc	r5, #12
 8012db2:	2d00      	cmp	r5, #0
 8012db4:	4607      	mov	r7, r0
 8012db6:	db01      	blt.n	8012dbc <_malloc_r+0x1c>
 8012db8:	42a9      	cmp	r1, r5
 8012dba:	d905      	bls.n	8012dc8 <_malloc_r+0x28>
 8012dbc:	230c      	movs	r3, #12
 8012dbe:	603b      	str	r3, [r7, #0]
 8012dc0:	2600      	movs	r6, #0
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc8:	4e2e      	ldr	r6, [pc, #184]	; (8012e84 <_malloc_r+0xe4>)
 8012dca:	f000 fe51 	bl	8013a70 <__malloc_lock>
 8012dce:	6833      	ldr	r3, [r6, #0]
 8012dd0:	461c      	mov	r4, r3
 8012dd2:	bb34      	cbnz	r4, 8012e22 <_malloc_r+0x82>
 8012dd4:	4629      	mov	r1, r5
 8012dd6:	4638      	mov	r0, r7
 8012dd8:	f7ff ffc2 	bl	8012d60 <sbrk_aligned>
 8012ddc:	1c43      	adds	r3, r0, #1
 8012dde:	4604      	mov	r4, r0
 8012de0:	d14d      	bne.n	8012e7e <_malloc_r+0xde>
 8012de2:	6834      	ldr	r4, [r6, #0]
 8012de4:	4626      	mov	r6, r4
 8012de6:	2e00      	cmp	r6, #0
 8012de8:	d140      	bne.n	8012e6c <_malloc_r+0xcc>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	4631      	mov	r1, r6
 8012dee:	4638      	mov	r0, r7
 8012df0:	eb04 0803 	add.w	r8, r4, r3
 8012df4:	f000 fb08 	bl	8013408 <_sbrk_r>
 8012df8:	4580      	cmp	r8, r0
 8012dfa:	d13a      	bne.n	8012e72 <_malloc_r+0xd2>
 8012dfc:	6821      	ldr	r1, [r4, #0]
 8012dfe:	3503      	adds	r5, #3
 8012e00:	1a6d      	subs	r5, r5, r1
 8012e02:	f025 0503 	bic.w	r5, r5, #3
 8012e06:	3508      	adds	r5, #8
 8012e08:	2d0c      	cmp	r5, #12
 8012e0a:	bf38      	it	cc
 8012e0c:	250c      	movcc	r5, #12
 8012e0e:	4629      	mov	r1, r5
 8012e10:	4638      	mov	r0, r7
 8012e12:	f7ff ffa5 	bl	8012d60 <sbrk_aligned>
 8012e16:	3001      	adds	r0, #1
 8012e18:	d02b      	beq.n	8012e72 <_malloc_r+0xd2>
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	442b      	add	r3, r5
 8012e1e:	6023      	str	r3, [r4, #0]
 8012e20:	e00e      	b.n	8012e40 <_malloc_r+0xa0>
 8012e22:	6822      	ldr	r2, [r4, #0]
 8012e24:	1b52      	subs	r2, r2, r5
 8012e26:	d41e      	bmi.n	8012e66 <_malloc_r+0xc6>
 8012e28:	2a0b      	cmp	r2, #11
 8012e2a:	d916      	bls.n	8012e5a <_malloc_r+0xba>
 8012e2c:	1961      	adds	r1, r4, r5
 8012e2e:	42a3      	cmp	r3, r4
 8012e30:	6025      	str	r5, [r4, #0]
 8012e32:	bf18      	it	ne
 8012e34:	6059      	strne	r1, [r3, #4]
 8012e36:	6863      	ldr	r3, [r4, #4]
 8012e38:	bf08      	it	eq
 8012e3a:	6031      	streq	r1, [r6, #0]
 8012e3c:	5162      	str	r2, [r4, r5]
 8012e3e:	604b      	str	r3, [r1, #4]
 8012e40:	4638      	mov	r0, r7
 8012e42:	f104 060b 	add.w	r6, r4, #11
 8012e46:	f000 fe19 	bl	8013a7c <__malloc_unlock>
 8012e4a:	f026 0607 	bic.w	r6, r6, #7
 8012e4e:	1d23      	adds	r3, r4, #4
 8012e50:	1af2      	subs	r2, r6, r3
 8012e52:	d0b6      	beq.n	8012dc2 <_malloc_r+0x22>
 8012e54:	1b9b      	subs	r3, r3, r6
 8012e56:	50a3      	str	r3, [r4, r2]
 8012e58:	e7b3      	b.n	8012dc2 <_malloc_r+0x22>
 8012e5a:	6862      	ldr	r2, [r4, #4]
 8012e5c:	42a3      	cmp	r3, r4
 8012e5e:	bf0c      	ite	eq
 8012e60:	6032      	streq	r2, [r6, #0]
 8012e62:	605a      	strne	r2, [r3, #4]
 8012e64:	e7ec      	b.n	8012e40 <_malloc_r+0xa0>
 8012e66:	4623      	mov	r3, r4
 8012e68:	6864      	ldr	r4, [r4, #4]
 8012e6a:	e7b2      	b.n	8012dd2 <_malloc_r+0x32>
 8012e6c:	4634      	mov	r4, r6
 8012e6e:	6876      	ldr	r6, [r6, #4]
 8012e70:	e7b9      	b.n	8012de6 <_malloc_r+0x46>
 8012e72:	230c      	movs	r3, #12
 8012e74:	603b      	str	r3, [r7, #0]
 8012e76:	4638      	mov	r0, r7
 8012e78:	f000 fe00 	bl	8013a7c <__malloc_unlock>
 8012e7c:	e7a1      	b.n	8012dc2 <_malloc_r+0x22>
 8012e7e:	6025      	str	r5, [r4, #0]
 8012e80:	e7de      	b.n	8012e40 <_malloc_r+0xa0>
 8012e82:	bf00      	nop
 8012e84:	20002a98 	.word	0x20002a98

08012e88 <__ssputs_r>:
 8012e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e8c:	688e      	ldr	r6, [r1, #8]
 8012e8e:	429e      	cmp	r6, r3
 8012e90:	4682      	mov	sl, r0
 8012e92:	460c      	mov	r4, r1
 8012e94:	4690      	mov	r8, r2
 8012e96:	461f      	mov	r7, r3
 8012e98:	d838      	bhi.n	8012f0c <__ssputs_r+0x84>
 8012e9a:	898a      	ldrh	r2, [r1, #12]
 8012e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ea0:	d032      	beq.n	8012f08 <__ssputs_r+0x80>
 8012ea2:	6825      	ldr	r5, [r4, #0]
 8012ea4:	6909      	ldr	r1, [r1, #16]
 8012ea6:	eba5 0901 	sub.w	r9, r5, r1
 8012eaa:	6965      	ldr	r5, [r4, #20]
 8012eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	444b      	add	r3, r9
 8012eb8:	106d      	asrs	r5, r5, #1
 8012eba:	429d      	cmp	r5, r3
 8012ebc:	bf38      	it	cc
 8012ebe:	461d      	movcc	r5, r3
 8012ec0:	0553      	lsls	r3, r2, #21
 8012ec2:	d531      	bpl.n	8012f28 <__ssputs_r+0xa0>
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	f7ff ff6b 	bl	8012da0 <_malloc_r>
 8012eca:	4606      	mov	r6, r0
 8012ecc:	b950      	cbnz	r0, 8012ee4 <__ssputs_r+0x5c>
 8012ece:	230c      	movs	r3, #12
 8012ed0:	f8ca 3000 	str.w	r3, [sl]
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eda:	81a3      	strh	r3, [r4, #12]
 8012edc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ee4:	6921      	ldr	r1, [r4, #16]
 8012ee6:	464a      	mov	r2, r9
 8012ee8:	f7ff fa08 	bl	80122fc <memcpy>
 8012eec:	89a3      	ldrh	r3, [r4, #12]
 8012eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ef6:	81a3      	strh	r3, [r4, #12]
 8012ef8:	6126      	str	r6, [r4, #16]
 8012efa:	6165      	str	r5, [r4, #20]
 8012efc:	444e      	add	r6, r9
 8012efe:	eba5 0509 	sub.w	r5, r5, r9
 8012f02:	6026      	str	r6, [r4, #0]
 8012f04:	60a5      	str	r5, [r4, #8]
 8012f06:	463e      	mov	r6, r7
 8012f08:	42be      	cmp	r6, r7
 8012f0a:	d900      	bls.n	8012f0e <__ssputs_r+0x86>
 8012f0c:	463e      	mov	r6, r7
 8012f0e:	6820      	ldr	r0, [r4, #0]
 8012f10:	4632      	mov	r2, r6
 8012f12:	4641      	mov	r1, r8
 8012f14:	f000 fd92 	bl	8013a3c <memmove>
 8012f18:	68a3      	ldr	r3, [r4, #8]
 8012f1a:	1b9b      	subs	r3, r3, r6
 8012f1c:	60a3      	str	r3, [r4, #8]
 8012f1e:	6823      	ldr	r3, [r4, #0]
 8012f20:	4433      	add	r3, r6
 8012f22:	6023      	str	r3, [r4, #0]
 8012f24:	2000      	movs	r0, #0
 8012f26:	e7db      	b.n	8012ee0 <__ssputs_r+0x58>
 8012f28:	462a      	mov	r2, r5
 8012f2a:	f000 fdad 	bl	8013a88 <_realloc_r>
 8012f2e:	4606      	mov	r6, r0
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d1e1      	bne.n	8012ef8 <__ssputs_r+0x70>
 8012f34:	6921      	ldr	r1, [r4, #16]
 8012f36:	4650      	mov	r0, sl
 8012f38:	f7ff fec6 	bl	8012cc8 <_free_r>
 8012f3c:	e7c7      	b.n	8012ece <__ssputs_r+0x46>
	...

08012f40 <_svfiprintf_r>:
 8012f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f44:	4698      	mov	r8, r3
 8012f46:	898b      	ldrh	r3, [r1, #12]
 8012f48:	061b      	lsls	r3, r3, #24
 8012f4a:	b09d      	sub	sp, #116	; 0x74
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	460d      	mov	r5, r1
 8012f50:	4614      	mov	r4, r2
 8012f52:	d50e      	bpl.n	8012f72 <_svfiprintf_r+0x32>
 8012f54:	690b      	ldr	r3, [r1, #16]
 8012f56:	b963      	cbnz	r3, 8012f72 <_svfiprintf_r+0x32>
 8012f58:	2140      	movs	r1, #64	; 0x40
 8012f5a:	f7ff ff21 	bl	8012da0 <_malloc_r>
 8012f5e:	6028      	str	r0, [r5, #0]
 8012f60:	6128      	str	r0, [r5, #16]
 8012f62:	b920      	cbnz	r0, 8012f6e <_svfiprintf_r+0x2e>
 8012f64:	230c      	movs	r3, #12
 8012f66:	603b      	str	r3, [r7, #0]
 8012f68:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6c:	e0d1      	b.n	8013112 <_svfiprintf_r+0x1d2>
 8012f6e:	2340      	movs	r3, #64	; 0x40
 8012f70:	616b      	str	r3, [r5, #20]
 8012f72:	2300      	movs	r3, #0
 8012f74:	9309      	str	r3, [sp, #36]	; 0x24
 8012f76:	2320      	movs	r3, #32
 8012f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f80:	2330      	movs	r3, #48	; 0x30
 8012f82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801312c <_svfiprintf_r+0x1ec>
 8012f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f8a:	f04f 0901 	mov.w	r9, #1
 8012f8e:	4623      	mov	r3, r4
 8012f90:	469a      	mov	sl, r3
 8012f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f96:	b10a      	cbz	r2, 8012f9c <_svfiprintf_r+0x5c>
 8012f98:	2a25      	cmp	r2, #37	; 0x25
 8012f9a:	d1f9      	bne.n	8012f90 <_svfiprintf_r+0x50>
 8012f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8012fa0:	d00b      	beq.n	8012fba <_svfiprintf_r+0x7a>
 8012fa2:	465b      	mov	r3, fp
 8012fa4:	4622      	mov	r2, r4
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ff6d 	bl	8012e88 <__ssputs_r>
 8012fae:	3001      	adds	r0, #1
 8012fb0:	f000 80aa 	beq.w	8013108 <_svfiprintf_r+0x1c8>
 8012fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fb6:	445a      	add	r2, fp
 8012fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8012fba:	f89a 3000 	ldrb.w	r3, [sl]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f000 80a2 	beq.w	8013108 <_svfiprintf_r+0x1c8>
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fce:	f10a 0a01 	add.w	sl, sl, #1
 8012fd2:	9304      	str	r3, [sp, #16]
 8012fd4:	9307      	str	r3, [sp, #28]
 8012fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fda:	931a      	str	r3, [sp, #104]	; 0x68
 8012fdc:	4654      	mov	r4, sl
 8012fde:	2205      	movs	r2, #5
 8012fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fe4:	4851      	ldr	r0, [pc, #324]	; (801312c <_svfiprintf_r+0x1ec>)
 8012fe6:	f7ed f91b 	bl	8000220 <memchr>
 8012fea:	9a04      	ldr	r2, [sp, #16]
 8012fec:	b9d8      	cbnz	r0, 8013026 <_svfiprintf_r+0xe6>
 8012fee:	06d0      	lsls	r0, r2, #27
 8012ff0:	bf44      	itt	mi
 8012ff2:	2320      	movmi	r3, #32
 8012ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ff8:	0711      	lsls	r1, r2, #28
 8012ffa:	bf44      	itt	mi
 8012ffc:	232b      	movmi	r3, #43	; 0x2b
 8012ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013002:	f89a 3000 	ldrb.w	r3, [sl]
 8013006:	2b2a      	cmp	r3, #42	; 0x2a
 8013008:	d015      	beq.n	8013036 <_svfiprintf_r+0xf6>
 801300a:	9a07      	ldr	r2, [sp, #28]
 801300c:	4654      	mov	r4, sl
 801300e:	2000      	movs	r0, #0
 8013010:	f04f 0c0a 	mov.w	ip, #10
 8013014:	4621      	mov	r1, r4
 8013016:	f811 3b01 	ldrb.w	r3, [r1], #1
 801301a:	3b30      	subs	r3, #48	; 0x30
 801301c:	2b09      	cmp	r3, #9
 801301e:	d94e      	bls.n	80130be <_svfiprintf_r+0x17e>
 8013020:	b1b0      	cbz	r0, 8013050 <_svfiprintf_r+0x110>
 8013022:	9207      	str	r2, [sp, #28]
 8013024:	e014      	b.n	8013050 <_svfiprintf_r+0x110>
 8013026:	eba0 0308 	sub.w	r3, r0, r8
 801302a:	fa09 f303 	lsl.w	r3, r9, r3
 801302e:	4313      	orrs	r3, r2
 8013030:	9304      	str	r3, [sp, #16]
 8013032:	46a2      	mov	sl, r4
 8013034:	e7d2      	b.n	8012fdc <_svfiprintf_r+0x9c>
 8013036:	9b03      	ldr	r3, [sp, #12]
 8013038:	1d19      	adds	r1, r3, #4
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	9103      	str	r1, [sp, #12]
 801303e:	2b00      	cmp	r3, #0
 8013040:	bfbb      	ittet	lt
 8013042:	425b      	neglt	r3, r3
 8013044:	f042 0202 	orrlt.w	r2, r2, #2
 8013048:	9307      	strge	r3, [sp, #28]
 801304a:	9307      	strlt	r3, [sp, #28]
 801304c:	bfb8      	it	lt
 801304e:	9204      	strlt	r2, [sp, #16]
 8013050:	7823      	ldrb	r3, [r4, #0]
 8013052:	2b2e      	cmp	r3, #46	; 0x2e
 8013054:	d10c      	bne.n	8013070 <_svfiprintf_r+0x130>
 8013056:	7863      	ldrb	r3, [r4, #1]
 8013058:	2b2a      	cmp	r3, #42	; 0x2a
 801305a:	d135      	bne.n	80130c8 <_svfiprintf_r+0x188>
 801305c:	9b03      	ldr	r3, [sp, #12]
 801305e:	1d1a      	adds	r2, r3, #4
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	9203      	str	r2, [sp, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	bfb8      	it	lt
 8013068:	f04f 33ff 	movlt.w	r3, #4294967295
 801306c:	3402      	adds	r4, #2
 801306e:	9305      	str	r3, [sp, #20]
 8013070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801313c <_svfiprintf_r+0x1fc>
 8013074:	7821      	ldrb	r1, [r4, #0]
 8013076:	2203      	movs	r2, #3
 8013078:	4650      	mov	r0, sl
 801307a:	f7ed f8d1 	bl	8000220 <memchr>
 801307e:	b140      	cbz	r0, 8013092 <_svfiprintf_r+0x152>
 8013080:	2340      	movs	r3, #64	; 0x40
 8013082:	eba0 000a 	sub.w	r0, r0, sl
 8013086:	fa03 f000 	lsl.w	r0, r3, r0
 801308a:	9b04      	ldr	r3, [sp, #16]
 801308c:	4303      	orrs	r3, r0
 801308e:	3401      	adds	r4, #1
 8013090:	9304      	str	r3, [sp, #16]
 8013092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013096:	4826      	ldr	r0, [pc, #152]	; (8013130 <_svfiprintf_r+0x1f0>)
 8013098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801309c:	2206      	movs	r2, #6
 801309e:	f7ed f8bf 	bl	8000220 <memchr>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d038      	beq.n	8013118 <_svfiprintf_r+0x1d8>
 80130a6:	4b23      	ldr	r3, [pc, #140]	; (8013134 <_svfiprintf_r+0x1f4>)
 80130a8:	bb1b      	cbnz	r3, 80130f2 <_svfiprintf_r+0x1b2>
 80130aa:	9b03      	ldr	r3, [sp, #12]
 80130ac:	3307      	adds	r3, #7
 80130ae:	f023 0307 	bic.w	r3, r3, #7
 80130b2:	3308      	adds	r3, #8
 80130b4:	9303      	str	r3, [sp, #12]
 80130b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b8:	4433      	add	r3, r6
 80130ba:	9309      	str	r3, [sp, #36]	; 0x24
 80130bc:	e767      	b.n	8012f8e <_svfiprintf_r+0x4e>
 80130be:	fb0c 3202 	mla	r2, ip, r2, r3
 80130c2:	460c      	mov	r4, r1
 80130c4:	2001      	movs	r0, #1
 80130c6:	e7a5      	b.n	8013014 <_svfiprintf_r+0xd4>
 80130c8:	2300      	movs	r3, #0
 80130ca:	3401      	adds	r4, #1
 80130cc:	9305      	str	r3, [sp, #20]
 80130ce:	4619      	mov	r1, r3
 80130d0:	f04f 0c0a 	mov.w	ip, #10
 80130d4:	4620      	mov	r0, r4
 80130d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130da:	3a30      	subs	r2, #48	; 0x30
 80130dc:	2a09      	cmp	r2, #9
 80130de:	d903      	bls.n	80130e8 <_svfiprintf_r+0x1a8>
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d0c5      	beq.n	8013070 <_svfiprintf_r+0x130>
 80130e4:	9105      	str	r1, [sp, #20]
 80130e6:	e7c3      	b.n	8013070 <_svfiprintf_r+0x130>
 80130e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80130ec:	4604      	mov	r4, r0
 80130ee:	2301      	movs	r3, #1
 80130f0:	e7f0      	b.n	80130d4 <_svfiprintf_r+0x194>
 80130f2:	ab03      	add	r3, sp, #12
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	462a      	mov	r2, r5
 80130f8:	4b0f      	ldr	r3, [pc, #60]	; (8013138 <_svfiprintf_r+0x1f8>)
 80130fa:	a904      	add	r1, sp, #16
 80130fc:	4638      	mov	r0, r7
 80130fe:	f7fc f80b 	bl	800f118 <_printf_float>
 8013102:	1c42      	adds	r2, r0, #1
 8013104:	4606      	mov	r6, r0
 8013106:	d1d6      	bne.n	80130b6 <_svfiprintf_r+0x176>
 8013108:	89ab      	ldrh	r3, [r5, #12]
 801310a:	065b      	lsls	r3, r3, #25
 801310c:	f53f af2c 	bmi.w	8012f68 <_svfiprintf_r+0x28>
 8013110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013112:	b01d      	add	sp, #116	; 0x74
 8013114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013118:	ab03      	add	r3, sp, #12
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	462a      	mov	r2, r5
 801311e:	4b06      	ldr	r3, [pc, #24]	; (8013138 <_svfiprintf_r+0x1f8>)
 8013120:	a904      	add	r1, sp, #16
 8013122:	4638      	mov	r0, r7
 8013124:	f7fc fa9c 	bl	800f660 <_printf_i>
 8013128:	e7eb      	b.n	8013102 <_svfiprintf_r+0x1c2>
 801312a:	bf00      	nop
 801312c:	08014d5c 	.word	0x08014d5c
 8013130:	08014d66 	.word	0x08014d66
 8013134:	0800f119 	.word	0x0800f119
 8013138:	08012e89 	.word	0x08012e89
 801313c:	08014d62 	.word	0x08014d62

08013140 <__sfputc_r>:
 8013140:	6893      	ldr	r3, [r2, #8]
 8013142:	3b01      	subs	r3, #1
 8013144:	2b00      	cmp	r3, #0
 8013146:	b410      	push	{r4}
 8013148:	6093      	str	r3, [r2, #8]
 801314a:	da08      	bge.n	801315e <__sfputc_r+0x1e>
 801314c:	6994      	ldr	r4, [r2, #24]
 801314e:	42a3      	cmp	r3, r4
 8013150:	db01      	blt.n	8013156 <__sfputc_r+0x16>
 8013152:	290a      	cmp	r1, #10
 8013154:	d103      	bne.n	801315e <__sfputc_r+0x1e>
 8013156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801315a:	f000 b979 	b.w	8013450 <__swbuf_r>
 801315e:	6813      	ldr	r3, [r2, #0]
 8013160:	1c58      	adds	r0, r3, #1
 8013162:	6010      	str	r0, [r2, #0]
 8013164:	7019      	strb	r1, [r3, #0]
 8013166:	4608      	mov	r0, r1
 8013168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801316c:	4770      	bx	lr

0801316e <__sfputs_r>:
 801316e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013170:	4606      	mov	r6, r0
 8013172:	460f      	mov	r7, r1
 8013174:	4614      	mov	r4, r2
 8013176:	18d5      	adds	r5, r2, r3
 8013178:	42ac      	cmp	r4, r5
 801317a:	d101      	bne.n	8013180 <__sfputs_r+0x12>
 801317c:	2000      	movs	r0, #0
 801317e:	e007      	b.n	8013190 <__sfputs_r+0x22>
 8013180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013184:	463a      	mov	r2, r7
 8013186:	4630      	mov	r0, r6
 8013188:	f7ff ffda 	bl	8013140 <__sfputc_r>
 801318c:	1c43      	adds	r3, r0, #1
 801318e:	d1f3      	bne.n	8013178 <__sfputs_r+0xa>
 8013190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013194 <_vfiprintf_r>:
 8013194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013198:	460d      	mov	r5, r1
 801319a:	b09d      	sub	sp, #116	; 0x74
 801319c:	4614      	mov	r4, r2
 801319e:	4698      	mov	r8, r3
 80131a0:	4606      	mov	r6, r0
 80131a2:	b118      	cbz	r0, 80131ac <_vfiprintf_r+0x18>
 80131a4:	6983      	ldr	r3, [r0, #24]
 80131a6:	b90b      	cbnz	r3, 80131ac <_vfiprintf_r+0x18>
 80131a8:	f000 fb42 	bl	8013830 <__sinit>
 80131ac:	4b89      	ldr	r3, [pc, #548]	; (80133d4 <_vfiprintf_r+0x240>)
 80131ae:	429d      	cmp	r5, r3
 80131b0:	d11b      	bne.n	80131ea <_vfiprintf_r+0x56>
 80131b2:	6875      	ldr	r5, [r6, #4]
 80131b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131b6:	07d9      	lsls	r1, r3, #31
 80131b8:	d405      	bmi.n	80131c6 <_vfiprintf_r+0x32>
 80131ba:	89ab      	ldrh	r3, [r5, #12]
 80131bc:	059a      	lsls	r2, r3, #22
 80131be:	d402      	bmi.n	80131c6 <_vfiprintf_r+0x32>
 80131c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131c2:	f000 fbd3 	bl	801396c <__retarget_lock_acquire_recursive>
 80131c6:	89ab      	ldrh	r3, [r5, #12]
 80131c8:	071b      	lsls	r3, r3, #28
 80131ca:	d501      	bpl.n	80131d0 <_vfiprintf_r+0x3c>
 80131cc:	692b      	ldr	r3, [r5, #16]
 80131ce:	b9eb      	cbnz	r3, 801320c <_vfiprintf_r+0x78>
 80131d0:	4629      	mov	r1, r5
 80131d2:	4630      	mov	r0, r6
 80131d4:	f000 f99c 	bl	8013510 <__swsetup_r>
 80131d8:	b1c0      	cbz	r0, 801320c <_vfiprintf_r+0x78>
 80131da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131dc:	07dc      	lsls	r4, r3, #31
 80131de:	d50e      	bpl.n	80131fe <_vfiprintf_r+0x6a>
 80131e0:	f04f 30ff 	mov.w	r0, #4294967295
 80131e4:	b01d      	add	sp, #116	; 0x74
 80131e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ea:	4b7b      	ldr	r3, [pc, #492]	; (80133d8 <_vfiprintf_r+0x244>)
 80131ec:	429d      	cmp	r5, r3
 80131ee:	d101      	bne.n	80131f4 <_vfiprintf_r+0x60>
 80131f0:	68b5      	ldr	r5, [r6, #8]
 80131f2:	e7df      	b.n	80131b4 <_vfiprintf_r+0x20>
 80131f4:	4b79      	ldr	r3, [pc, #484]	; (80133dc <_vfiprintf_r+0x248>)
 80131f6:	429d      	cmp	r5, r3
 80131f8:	bf08      	it	eq
 80131fa:	68f5      	ldreq	r5, [r6, #12]
 80131fc:	e7da      	b.n	80131b4 <_vfiprintf_r+0x20>
 80131fe:	89ab      	ldrh	r3, [r5, #12]
 8013200:	0598      	lsls	r0, r3, #22
 8013202:	d4ed      	bmi.n	80131e0 <_vfiprintf_r+0x4c>
 8013204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013206:	f000 fbb2 	bl	801396e <__retarget_lock_release_recursive>
 801320a:	e7e9      	b.n	80131e0 <_vfiprintf_r+0x4c>
 801320c:	2300      	movs	r3, #0
 801320e:	9309      	str	r3, [sp, #36]	; 0x24
 8013210:	2320      	movs	r3, #32
 8013212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013216:	f8cd 800c 	str.w	r8, [sp, #12]
 801321a:	2330      	movs	r3, #48	; 0x30
 801321c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80133e0 <_vfiprintf_r+0x24c>
 8013220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013224:	f04f 0901 	mov.w	r9, #1
 8013228:	4623      	mov	r3, r4
 801322a:	469a      	mov	sl, r3
 801322c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013230:	b10a      	cbz	r2, 8013236 <_vfiprintf_r+0xa2>
 8013232:	2a25      	cmp	r2, #37	; 0x25
 8013234:	d1f9      	bne.n	801322a <_vfiprintf_r+0x96>
 8013236:	ebba 0b04 	subs.w	fp, sl, r4
 801323a:	d00b      	beq.n	8013254 <_vfiprintf_r+0xc0>
 801323c:	465b      	mov	r3, fp
 801323e:	4622      	mov	r2, r4
 8013240:	4629      	mov	r1, r5
 8013242:	4630      	mov	r0, r6
 8013244:	f7ff ff93 	bl	801316e <__sfputs_r>
 8013248:	3001      	adds	r0, #1
 801324a:	f000 80aa 	beq.w	80133a2 <_vfiprintf_r+0x20e>
 801324e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013250:	445a      	add	r2, fp
 8013252:	9209      	str	r2, [sp, #36]	; 0x24
 8013254:	f89a 3000 	ldrb.w	r3, [sl]
 8013258:	2b00      	cmp	r3, #0
 801325a:	f000 80a2 	beq.w	80133a2 <_vfiprintf_r+0x20e>
 801325e:	2300      	movs	r3, #0
 8013260:	f04f 32ff 	mov.w	r2, #4294967295
 8013264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013268:	f10a 0a01 	add.w	sl, sl, #1
 801326c:	9304      	str	r3, [sp, #16]
 801326e:	9307      	str	r3, [sp, #28]
 8013270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013274:	931a      	str	r3, [sp, #104]	; 0x68
 8013276:	4654      	mov	r4, sl
 8013278:	2205      	movs	r2, #5
 801327a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801327e:	4858      	ldr	r0, [pc, #352]	; (80133e0 <_vfiprintf_r+0x24c>)
 8013280:	f7ec ffce 	bl	8000220 <memchr>
 8013284:	9a04      	ldr	r2, [sp, #16]
 8013286:	b9d8      	cbnz	r0, 80132c0 <_vfiprintf_r+0x12c>
 8013288:	06d1      	lsls	r1, r2, #27
 801328a:	bf44      	itt	mi
 801328c:	2320      	movmi	r3, #32
 801328e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013292:	0713      	lsls	r3, r2, #28
 8013294:	bf44      	itt	mi
 8013296:	232b      	movmi	r3, #43	; 0x2b
 8013298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801329c:	f89a 3000 	ldrb.w	r3, [sl]
 80132a0:	2b2a      	cmp	r3, #42	; 0x2a
 80132a2:	d015      	beq.n	80132d0 <_vfiprintf_r+0x13c>
 80132a4:	9a07      	ldr	r2, [sp, #28]
 80132a6:	4654      	mov	r4, sl
 80132a8:	2000      	movs	r0, #0
 80132aa:	f04f 0c0a 	mov.w	ip, #10
 80132ae:	4621      	mov	r1, r4
 80132b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132b4:	3b30      	subs	r3, #48	; 0x30
 80132b6:	2b09      	cmp	r3, #9
 80132b8:	d94e      	bls.n	8013358 <_vfiprintf_r+0x1c4>
 80132ba:	b1b0      	cbz	r0, 80132ea <_vfiprintf_r+0x156>
 80132bc:	9207      	str	r2, [sp, #28]
 80132be:	e014      	b.n	80132ea <_vfiprintf_r+0x156>
 80132c0:	eba0 0308 	sub.w	r3, r0, r8
 80132c4:	fa09 f303 	lsl.w	r3, r9, r3
 80132c8:	4313      	orrs	r3, r2
 80132ca:	9304      	str	r3, [sp, #16]
 80132cc:	46a2      	mov	sl, r4
 80132ce:	e7d2      	b.n	8013276 <_vfiprintf_r+0xe2>
 80132d0:	9b03      	ldr	r3, [sp, #12]
 80132d2:	1d19      	adds	r1, r3, #4
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	9103      	str	r1, [sp, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bfbb      	ittet	lt
 80132dc:	425b      	neglt	r3, r3
 80132de:	f042 0202 	orrlt.w	r2, r2, #2
 80132e2:	9307      	strge	r3, [sp, #28]
 80132e4:	9307      	strlt	r3, [sp, #28]
 80132e6:	bfb8      	it	lt
 80132e8:	9204      	strlt	r2, [sp, #16]
 80132ea:	7823      	ldrb	r3, [r4, #0]
 80132ec:	2b2e      	cmp	r3, #46	; 0x2e
 80132ee:	d10c      	bne.n	801330a <_vfiprintf_r+0x176>
 80132f0:	7863      	ldrb	r3, [r4, #1]
 80132f2:	2b2a      	cmp	r3, #42	; 0x2a
 80132f4:	d135      	bne.n	8013362 <_vfiprintf_r+0x1ce>
 80132f6:	9b03      	ldr	r3, [sp, #12]
 80132f8:	1d1a      	adds	r2, r3, #4
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	9203      	str	r2, [sp, #12]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	bfb8      	it	lt
 8013302:	f04f 33ff 	movlt.w	r3, #4294967295
 8013306:	3402      	adds	r4, #2
 8013308:	9305      	str	r3, [sp, #20]
 801330a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80133f0 <_vfiprintf_r+0x25c>
 801330e:	7821      	ldrb	r1, [r4, #0]
 8013310:	2203      	movs	r2, #3
 8013312:	4650      	mov	r0, sl
 8013314:	f7ec ff84 	bl	8000220 <memchr>
 8013318:	b140      	cbz	r0, 801332c <_vfiprintf_r+0x198>
 801331a:	2340      	movs	r3, #64	; 0x40
 801331c:	eba0 000a 	sub.w	r0, r0, sl
 8013320:	fa03 f000 	lsl.w	r0, r3, r0
 8013324:	9b04      	ldr	r3, [sp, #16]
 8013326:	4303      	orrs	r3, r0
 8013328:	3401      	adds	r4, #1
 801332a:	9304      	str	r3, [sp, #16]
 801332c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013330:	482c      	ldr	r0, [pc, #176]	; (80133e4 <_vfiprintf_r+0x250>)
 8013332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013336:	2206      	movs	r2, #6
 8013338:	f7ec ff72 	bl	8000220 <memchr>
 801333c:	2800      	cmp	r0, #0
 801333e:	d03f      	beq.n	80133c0 <_vfiprintf_r+0x22c>
 8013340:	4b29      	ldr	r3, [pc, #164]	; (80133e8 <_vfiprintf_r+0x254>)
 8013342:	bb1b      	cbnz	r3, 801338c <_vfiprintf_r+0x1f8>
 8013344:	9b03      	ldr	r3, [sp, #12]
 8013346:	3307      	adds	r3, #7
 8013348:	f023 0307 	bic.w	r3, r3, #7
 801334c:	3308      	adds	r3, #8
 801334e:	9303      	str	r3, [sp, #12]
 8013350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013352:	443b      	add	r3, r7
 8013354:	9309      	str	r3, [sp, #36]	; 0x24
 8013356:	e767      	b.n	8013228 <_vfiprintf_r+0x94>
 8013358:	fb0c 3202 	mla	r2, ip, r2, r3
 801335c:	460c      	mov	r4, r1
 801335e:	2001      	movs	r0, #1
 8013360:	e7a5      	b.n	80132ae <_vfiprintf_r+0x11a>
 8013362:	2300      	movs	r3, #0
 8013364:	3401      	adds	r4, #1
 8013366:	9305      	str	r3, [sp, #20]
 8013368:	4619      	mov	r1, r3
 801336a:	f04f 0c0a 	mov.w	ip, #10
 801336e:	4620      	mov	r0, r4
 8013370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013374:	3a30      	subs	r2, #48	; 0x30
 8013376:	2a09      	cmp	r2, #9
 8013378:	d903      	bls.n	8013382 <_vfiprintf_r+0x1ee>
 801337a:	2b00      	cmp	r3, #0
 801337c:	d0c5      	beq.n	801330a <_vfiprintf_r+0x176>
 801337e:	9105      	str	r1, [sp, #20]
 8013380:	e7c3      	b.n	801330a <_vfiprintf_r+0x176>
 8013382:	fb0c 2101 	mla	r1, ip, r1, r2
 8013386:	4604      	mov	r4, r0
 8013388:	2301      	movs	r3, #1
 801338a:	e7f0      	b.n	801336e <_vfiprintf_r+0x1da>
 801338c:	ab03      	add	r3, sp, #12
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	462a      	mov	r2, r5
 8013392:	4b16      	ldr	r3, [pc, #88]	; (80133ec <_vfiprintf_r+0x258>)
 8013394:	a904      	add	r1, sp, #16
 8013396:	4630      	mov	r0, r6
 8013398:	f7fb febe 	bl	800f118 <_printf_float>
 801339c:	4607      	mov	r7, r0
 801339e:	1c78      	adds	r0, r7, #1
 80133a0:	d1d6      	bne.n	8013350 <_vfiprintf_r+0x1bc>
 80133a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133a4:	07d9      	lsls	r1, r3, #31
 80133a6:	d405      	bmi.n	80133b4 <_vfiprintf_r+0x220>
 80133a8:	89ab      	ldrh	r3, [r5, #12]
 80133aa:	059a      	lsls	r2, r3, #22
 80133ac:	d402      	bmi.n	80133b4 <_vfiprintf_r+0x220>
 80133ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133b0:	f000 fadd 	bl	801396e <__retarget_lock_release_recursive>
 80133b4:	89ab      	ldrh	r3, [r5, #12]
 80133b6:	065b      	lsls	r3, r3, #25
 80133b8:	f53f af12 	bmi.w	80131e0 <_vfiprintf_r+0x4c>
 80133bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133be:	e711      	b.n	80131e4 <_vfiprintf_r+0x50>
 80133c0:	ab03      	add	r3, sp, #12
 80133c2:	9300      	str	r3, [sp, #0]
 80133c4:	462a      	mov	r2, r5
 80133c6:	4b09      	ldr	r3, [pc, #36]	; (80133ec <_vfiprintf_r+0x258>)
 80133c8:	a904      	add	r1, sp, #16
 80133ca:	4630      	mov	r0, r6
 80133cc:	f7fc f948 	bl	800f660 <_printf_i>
 80133d0:	e7e4      	b.n	801339c <_vfiprintf_r+0x208>
 80133d2:	bf00      	nop
 80133d4:	08014d90 	.word	0x08014d90
 80133d8:	08014db0 	.word	0x08014db0
 80133dc:	08014d70 	.word	0x08014d70
 80133e0:	08014d5c 	.word	0x08014d5c
 80133e4:	08014d66 	.word	0x08014d66
 80133e8:	0800f119 	.word	0x0800f119
 80133ec:	0801316f 	.word	0x0801316f
 80133f0:	08014d62 	.word	0x08014d62
 80133f4:	00000000 	.word	0x00000000

080133f8 <nan>:
 80133f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013400 <nan+0x8>
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop
 8013400:	00000000 	.word	0x00000000
 8013404:	7ff80000 	.word	0x7ff80000

08013408 <_sbrk_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d06      	ldr	r5, [pc, #24]	; (8013424 <_sbrk_r+0x1c>)
 801340c:	2300      	movs	r3, #0
 801340e:	4604      	mov	r4, r0
 8013410:	4608      	mov	r0, r1
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	f7f2 fbc0 	bl	8005b98 <_sbrk>
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	d102      	bne.n	8013422 <_sbrk_r+0x1a>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	b103      	cbz	r3, 8013422 <_sbrk_r+0x1a>
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	bd38      	pop	{r3, r4, r5, pc}
 8013424:	20002aa4 	.word	0x20002aa4

08013428 <strncmp>:
 8013428:	b510      	push	{r4, lr}
 801342a:	b17a      	cbz	r2, 801344c <strncmp+0x24>
 801342c:	4603      	mov	r3, r0
 801342e:	3901      	subs	r1, #1
 8013430:	1884      	adds	r4, r0, r2
 8013432:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801343a:	4290      	cmp	r0, r2
 801343c:	d101      	bne.n	8013442 <strncmp+0x1a>
 801343e:	42a3      	cmp	r3, r4
 8013440:	d101      	bne.n	8013446 <strncmp+0x1e>
 8013442:	1a80      	subs	r0, r0, r2
 8013444:	bd10      	pop	{r4, pc}
 8013446:	2800      	cmp	r0, #0
 8013448:	d1f3      	bne.n	8013432 <strncmp+0xa>
 801344a:	e7fa      	b.n	8013442 <strncmp+0x1a>
 801344c:	4610      	mov	r0, r2
 801344e:	e7f9      	b.n	8013444 <strncmp+0x1c>

08013450 <__swbuf_r>:
 8013450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013452:	460e      	mov	r6, r1
 8013454:	4614      	mov	r4, r2
 8013456:	4605      	mov	r5, r0
 8013458:	b118      	cbz	r0, 8013462 <__swbuf_r+0x12>
 801345a:	6983      	ldr	r3, [r0, #24]
 801345c:	b90b      	cbnz	r3, 8013462 <__swbuf_r+0x12>
 801345e:	f000 f9e7 	bl	8013830 <__sinit>
 8013462:	4b21      	ldr	r3, [pc, #132]	; (80134e8 <__swbuf_r+0x98>)
 8013464:	429c      	cmp	r4, r3
 8013466:	d12b      	bne.n	80134c0 <__swbuf_r+0x70>
 8013468:	686c      	ldr	r4, [r5, #4]
 801346a:	69a3      	ldr	r3, [r4, #24]
 801346c:	60a3      	str	r3, [r4, #8]
 801346e:	89a3      	ldrh	r3, [r4, #12]
 8013470:	071a      	lsls	r2, r3, #28
 8013472:	d52f      	bpl.n	80134d4 <__swbuf_r+0x84>
 8013474:	6923      	ldr	r3, [r4, #16]
 8013476:	b36b      	cbz	r3, 80134d4 <__swbuf_r+0x84>
 8013478:	6923      	ldr	r3, [r4, #16]
 801347a:	6820      	ldr	r0, [r4, #0]
 801347c:	1ac0      	subs	r0, r0, r3
 801347e:	6963      	ldr	r3, [r4, #20]
 8013480:	b2f6      	uxtb	r6, r6
 8013482:	4283      	cmp	r3, r0
 8013484:	4637      	mov	r7, r6
 8013486:	dc04      	bgt.n	8013492 <__swbuf_r+0x42>
 8013488:	4621      	mov	r1, r4
 801348a:	4628      	mov	r0, r5
 801348c:	f000 f93c 	bl	8013708 <_fflush_r>
 8013490:	bb30      	cbnz	r0, 80134e0 <__swbuf_r+0x90>
 8013492:	68a3      	ldr	r3, [r4, #8]
 8013494:	3b01      	subs	r3, #1
 8013496:	60a3      	str	r3, [r4, #8]
 8013498:	6823      	ldr	r3, [r4, #0]
 801349a:	1c5a      	adds	r2, r3, #1
 801349c:	6022      	str	r2, [r4, #0]
 801349e:	701e      	strb	r6, [r3, #0]
 80134a0:	6963      	ldr	r3, [r4, #20]
 80134a2:	3001      	adds	r0, #1
 80134a4:	4283      	cmp	r3, r0
 80134a6:	d004      	beq.n	80134b2 <__swbuf_r+0x62>
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	07db      	lsls	r3, r3, #31
 80134ac:	d506      	bpl.n	80134bc <__swbuf_r+0x6c>
 80134ae:	2e0a      	cmp	r6, #10
 80134b0:	d104      	bne.n	80134bc <__swbuf_r+0x6c>
 80134b2:	4621      	mov	r1, r4
 80134b4:	4628      	mov	r0, r5
 80134b6:	f000 f927 	bl	8013708 <_fflush_r>
 80134ba:	b988      	cbnz	r0, 80134e0 <__swbuf_r+0x90>
 80134bc:	4638      	mov	r0, r7
 80134be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c0:	4b0a      	ldr	r3, [pc, #40]	; (80134ec <__swbuf_r+0x9c>)
 80134c2:	429c      	cmp	r4, r3
 80134c4:	d101      	bne.n	80134ca <__swbuf_r+0x7a>
 80134c6:	68ac      	ldr	r4, [r5, #8]
 80134c8:	e7cf      	b.n	801346a <__swbuf_r+0x1a>
 80134ca:	4b09      	ldr	r3, [pc, #36]	; (80134f0 <__swbuf_r+0xa0>)
 80134cc:	429c      	cmp	r4, r3
 80134ce:	bf08      	it	eq
 80134d0:	68ec      	ldreq	r4, [r5, #12]
 80134d2:	e7ca      	b.n	801346a <__swbuf_r+0x1a>
 80134d4:	4621      	mov	r1, r4
 80134d6:	4628      	mov	r0, r5
 80134d8:	f000 f81a 	bl	8013510 <__swsetup_r>
 80134dc:	2800      	cmp	r0, #0
 80134de:	d0cb      	beq.n	8013478 <__swbuf_r+0x28>
 80134e0:	f04f 37ff 	mov.w	r7, #4294967295
 80134e4:	e7ea      	b.n	80134bc <__swbuf_r+0x6c>
 80134e6:	bf00      	nop
 80134e8:	08014d90 	.word	0x08014d90
 80134ec:	08014db0 	.word	0x08014db0
 80134f0:	08014d70 	.word	0x08014d70

080134f4 <__ascii_wctomb>:
 80134f4:	b149      	cbz	r1, 801350a <__ascii_wctomb+0x16>
 80134f6:	2aff      	cmp	r2, #255	; 0xff
 80134f8:	bf85      	ittet	hi
 80134fa:	238a      	movhi	r3, #138	; 0x8a
 80134fc:	6003      	strhi	r3, [r0, #0]
 80134fe:	700a      	strbls	r2, [r1, #0]
 8013500:	f04f 30ff 	movhi.w	r0, #4294967295
 8013504:	bf98      	it	ls
 8013506:	2001      	movls	r0, #1
 8013508:	4770      	bx	lr
 801350a:	4608      	mov	r0, r1
 801350c:	4770      	bx	lr
	...

08013510 <__swsetup_r>:
 8013510:	4b32      	ldr	r3, [pc, #200]	; (80135dc <__swsetup_r+0xcc>)
 8013512:	b570      	push	{r4, r5, r6, lr}
 8013514:	681d      	ldr	r5, [r3, #0]
 8013516:	4606      	mov	r6, r0
 8013518:	460c      	mov	r4, r1
 801351a:	b125      	cbz	r5, 8013526 <__swsetup_r+0x16>
 801351c:	69ab      	ldr	r3, [r5, #24]
 801351e:	b913      	cbnz	r3, 8013526 <__swsetup_r+0x16>
 8013520:	4628      	mov	r0, r5
 8013522:	f000 f985 	bl	8013830 <__sinit>
 8013526:	4b2e      	ldr	r3, [pc, #184]	; (80135e0 <__swsetup_r+0xd0>)
 8013528:	429c      	cmp	r4, r3
 801352a:	d10f      	bne.n	801354c <__swsetup_r+0x3c>
 801352c:	686c      	ldr	r4, [r5, #4]
 801352e:	89a3      	ldrh	r3, [r4, #12]
 8013530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013534:	0719      	lsls	r1, r3, #28
 8013536:	d42c      	bmi.n	8013592 <__swsetup_r+0x82>
 8013538:	06dd      	lsls	r5, r3, #27
 801353a:	d411      	bmi.n	8013560 <__swsetup_r+0x50>
 801353c:	2309      	movs	r3, #9
 801353e:	6033      	str	r3, [r6, #0]
 8013540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013544:	81a3      	strh	r3, [r4, #12]
 8013546:	f04f 30ff 	mov.w	r0, #4294967295
 801354a:	e03e      	b.n	80135ca <__swsetup_r+0xba>
 801354c:	4b25      	ldr	r3, [pc, #148]	; (80135e4 <__swsetup_r+0xd4>)
 801354e:	429c      	cmp	r4, r3
 8013550:	d101      	bne.n	8013556 <__swsetup_r+0x46>
 8013552:	68ac      	ldr	r4, [r5, #8]
 8013554:	e7eb      	b.n	801352e <__swsetup_r+0x1e>
 8013556:	4b24      	ldr	r3, [pc, #144]	; (80135e8 <__swsetup_r+0xd8>)
 8013558:	429c      	cmp	r4, r3
 801355a:	bf08      	it	eq
 801355c:	68ec      	ldreq	r4, [r5, #12]
 801355e:	e7e6      	b.n	801352e <__swsetup_r+0x1e>
 8013560:	0758      	lsls	r0, r3, #29
 8013562:	d512      	bpl.n	801358a <__swsetup_r+0x7a>
 8013564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013566:	b141      	cbz	r1, 801357a <__swsetup_r+0x6a>
 8013568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801356c:	4299      	cmp	r1, r3
 801356e:	d002      	beq.n	8013576 <__swsetup_r+0x66>
 8013570:	4630      	mov	r0, r6
 8013572:	f7ff fba9 	bl	8012cc8 <_free_r>
 8013576:	2300      	movs	r3, #0
 8013578:	6363      	str	r3, [r4, #52]	; 0x34
 801357a:	89a3      	ldrh	r3, [r4, #12]
 801357c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013580:	81a3      	strh	r3, [r4, #12]
 8013582:	2300      	movs	r3, #0
 8013584:	6063      	str	r3, [r4, #4]
 8013586:	6923      	ldr	r3, [r4, #16]
 8013588:	6023      	str	r3, [r4, #0]
 801358a:	89a3      	ldrh	r3, [r4, #12]
 801358c:	f043 0308 	orr.w	r3, r3, #8
 8013590:	81a3      	strh	r3, [r4, #12]
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	b94b      	cbnz	r3, 80135aa <__swsetup_r+0x9a>
 8013596:	89a3      	ldrh	r3, [r4, #12]
 8013598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135a0:	d003      	beq.n	80135aa <__swsetup_r+0x9a>
 80135a2:	4621      	mov	r1, r4
 80135a4:	4630      	mov	r0, r6
 80135a6:	f000 fa09 	bl	80139bc <__smakebuf_r>
 80135aa:	89a0      	ldrh	r0, [r4, #12]
 80135ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135b0:	f010 0301 	ands.w	r3, r0, #1
 80135b4:	d00a      	beq.n	80135cc <__swsetup_r+0xbc>
 80135b6:	2300      	movs	r3, #0
 80135b8:	60a3      	str	r3, [r4, #8]
 80135ba:	6963      	ldr	r3, [r4, #20]
 80135bc:	425b      	negs	r3, r3
 80135be:	61a3      	str	r3, [r4, #24]
 80135c0:	6923      	ldr	r3, [r4, #16]
 80135c2:	b943      	cbnz	r3, 80135d6 <__swsetup_r+0xc6>
 80135c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80135c8:	d1ba      	bne.n	8013540 <__swsetup_r+0x30>
 80135ca:	bd70      	pop	{r4, r5, r6, pc}
 80135cc:	0781      	lsls	r1, r0, #30
 80135ce:	bf58      	it	pl
 80135d0:	6963      	ldrpl	r3, [r4, #20]
 80135d2:	60a3      	str	r3, [r4, #8]
 80135d4:	e7f4      	b.n	80135c0 <__swsetup_r+0xb0>
 80135d6:	2000      	movs	r0, #0
 80135d8:	e7f7      	b.n	80135ca <__swsetup_r+0xba>
 80135da:	bf00      	nop
 80135dc:	20000058 	.word	0x20000058
 80135e0:	08014d90 	.word	0x08014d90
 80135e4:	08014db0 	.word	0x08014db0
 80135e8:	08014d70 	.word	0x08014d70

080135ec <abort>:
 80135ec:	b508      	push	{r3, lr}
 80135ee:	2006      	movs	r0, #6
 80135f0:	f000 faa2 	bl	8013b38 <raise>
 80135f4:	2001      	movs	r0, #1
 80135f6:	f7f2 fa58 	bl	8005aaa <_exit>
	...

080135fc <__sflush_r>:
 80135fc:	898a      	ldrh	r2, [r1, #12]
 80135fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013602:	4605      	mov	r5, r0
 8013604:	0710      	lsls	r0, r2, #28
 8013606:	460c      	mov	r4, r1
 8013608:	d458      	bmi.n	80136bc <__sflush_r+0xc0>
 801360a:	684b      	ldr	r3, [r1, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	dc05      	bgt.n	801361c <__sflush_r+0x20>
 8013610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013612:	2b00      	cmp	r3, #0
 8013614:	dc02      	bgt.n	801361c <__sflush_r+0x20>
 8013616:	2000      	movs	r0, #0
 8013618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801361c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801361e:	2e00      	cmp	r6, #0
 8013620:	d0f9      	beq.n	8013616 <__sflush_r+0x1a>
 8013622:	2300      	movs	r3, #0
 8013624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013628:	682f      	ldr	r7, [r5, #0]
 801362a:	602b      	str	r3, [r5, #0]
 801362c:	d032      	beq.n	8013694 <__sflush_r+0x98>
 801362e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	075a      	lsls	r2, r3, #29
 8013634:	d505      	bpl.n	8013642 <__sflush_r+0x46>
 8013636:	6863      	ldr	r3, [r4, #4]
 8013638:	1ac0      	subs	r0, r0, r3
 801363a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801363c:	b10b      	cbz	r3, 8013642 <__sflush_r+0x46>
 801363e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013640:	1ac0      	subs	r0, r0, r3
 8013642:	2300      	movs	r3, #0
 8013644:	4602      	mov	r2, r0
 8013646:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013648:	6a21      	ldr	r1, [r4, #32]
 801364a:	4628      	mov	r0, r5
 801364c:	47b0      	blx	r6
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	89a3      	ldrh	r3, [r4, #12]
 8013652:	d106      	bne.n	8013662 <__sflush_r+0x66>
 8013654:	6829      	ldr	r1, [r5, #0]
 8013656:	291d      	cmp	r1, #29
 8013658:	d82c      	bhi.n	80136b4 <__sflush_r+0xb8>
 801365a:	4a2a      	ldr	r2, [pc, #168]	; (8013704 <__sflush_r+0x108>)
 801365c:	40ca      	lsrs	r2, r1
 801365e:	07d6      	lsls	r6, r2, #31
 8013660:	d528      	bpl.n	80136b4 <__sflush_r+0xb8>
 8013662:	2200      	movs	r2, #0
 8013664:	6062      	str	r2, [r4, #4]
 8013666:	04d9      	lsls	r1, r3, #19
 8013668:	6922      	ldr	r2, [r4, #16]
 801366a:	6022      	str	r2, [r4, #0]
 801366c:	d504      	bpl.n	8013678 <__sflush_r+0x7c>
 801366e:	1c42      	adds	r2, r0, #1
 8013670:	d101      	bne.n	8013676 <__sflush_r+0x7a>
 8013672:	682b      	ldr	r3, [r5, #0]
 8013674:	b903      	cbnz	r3, 8013678 <__sflush_r+0x7c>
 8013676:	6560      	str	r0, [r4, #84]	; 0x54
 8013678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801367a:	602f      	str	r7, [r5, #0]
 801367c:	2900      	cmp	r1, #0
 801367e:	d0ca      	beq.n	8013616 <__sflush_r+0x1a>
 8013680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013684:	4299      	cmp	r1, r3
 8013686:	d002      	beq.n	801368e <__sflush_r+0x92>
 8013688:	4628      	mov	r0, r5
 801368a:	f7ff fb1d 	bl	8012cc8 <_free_r>
 801368e:	2000      	movs	r0, #0
 8013690:	6360      	str	r0, [r4, #52]	; 0x34
 8013692:	e7c1      	b.n	8013618 <__sflush_r+0x1c>
 8013694:	6a21      	ldr	r1, [r4, #32]
 8013696:	2301      	movs	r3, #1
 8013698:	4628      	mov	r0, r5
 801369a:	47b0      	blx	r6
 801369c:	1c41      	adds	r1, r0, #1
 801369e:	d1c7      	bne.n	8013630 <__sflush_r+0x34>
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d0c4      	beq.n	8013630 <__sflush_r+0x34>
 80136a6:	2b1d      	cmp	r3, #29
 80136a8:	d001      	beq.n	80136ae <__sflush_r+0xb2>
 80136aa:	2b16      	cmp	r3, #22
 80136ac:	d101      	bne.n	80136b2 <__sflush_r+0xb6>
 80136ae:	602f      	str	r7, [r5, #0]
 80136b0:	e7b1      	b.n	8013616 <__sflush_r+0x1a>
 80136b2:	89a3      	ldrh	r3, [r4, #12]
 80136b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136b8:	81a3      	strh	r3, [r4, #12]
 80136ba:	e7ad      	b.n	8013618 <__sflush_r+0x1c>
 80136bc:	690f      	ldr	r7, [r1, #16]
 80136be:	2f00      	cmp	r7, #0
 80136c0:	d0a9      	beq.n	8013616 <__sflush_r+0x1a>
 80136c2:	0793      	lsls	r3, r2, #30
 80136c4:	680e      	ldr	r6, [r1, #0]
 80136c6:	bf08      	it	eq
 80136c8:	694b      	ldreq	r3, [r1, #20]
 80136ca:	600f      	str	r7, [r1, #0]
 80136cc:	bf18      	it	ne
 80136ce:	2300      	movne	r3, #0
 80136d0:	eba6 0807 	sub.w	r8, r6, r7
 80136d4:	608b      	str	r3, [r1, #8]
 80136d6:	f1b8 0f00 	cmp.w	r8, #0
 80136da:	dd9c      	ble.n	8013616 <__sflush_r+0x1a>
 80136dc:	6a21      	ldr	r1, [r4, #32]
 80136de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136e0:	4643      	mov	r3, r8
 80136e2:	463a      	mov	r2, r7
 80136e4:	4628      	mov	r0, r5
 80136e6:	47b0      	blx	r6
 80136e8:	2800      	cmp	r0, #0
 80136ea:	dc06      	bgt.n	80136fa <__sflush_r+0xfe>
 80136ec:	89a3      	ldrh	r3, [r4, #12]
 80136ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136f2:	81a3      	strh	r3, [r4, #12]
 80136f4:	f04f 30ff 	mov.w	r0, #4294967295
 80136f8:	e78e      	b.n	8013618 <__sflush_r+0x1c>
 80136fa:	4407      	add	r7, r0
 80136fc:	eba8 0800 	sub.w	r8, r8, r0
 8013700:	e7e9      	b.n	80136d6 <__sflush_r+0xda>
 8013702:	bf00      	nop
 8013704:	20400001 	.word	0x20400001

08013708 <_fflush_r>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	690b      	ldr	r3, [r1, #16]
 801370c:	4605      	mov	r5, r0
 801370e:	460c      	mov	r4, r1
 8013710:	b913      	cbnz	r3, 8013718 <_fflush_r+0x10>
 8013712:	2500      	movs	r5, #0
 8013714:	4628      	mov	r0, r5
 8013716:	bd38      	pop	{r3, r4, r5, pc}
 8013718:	b118      	cbz	r0, 8013722 <_fflush_r+0x1a>
 801371a:	6983      	ldr	r3, [r0, #24]
 801371c:	b90b      	cbnz	r3, 8013722 <_fflush_r+0x1a>
 801371e:	f000 f887 	bl	8013830 <__sinit>
 8013722:	4b14      	ldr	r3, [pc, #80]	; (8013774 <_fflush_r+0x6c>)
 8013724:	429c      	cmp	r4, r3
 8013726:	d11b      	bne.n	8013760 <_fflush_r+0x58>
 8013728:	686c      	ldr	r4, [r5, #4]
 801372a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d0ef      	beq.n	8013712 <_fflush_r+0xa>
 8013732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013734:	07d0      	lsls	r0, r2, #31
 8013736:	d404      	bmi.n	8013742 <_fflush_r+0x3a>
 8013738:	0599      	lsls	r1, r3, #22
 801373a:	d402      	bmi.n	8013742 <_fflush_r+0x3a>
 801373c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801373e:	f000 f915 	bl	801396c <__retarget_lock_acquire_recursive>
 8013742:	4628      	mov	r0, r5
 8013744:	4621      	mov	r1, r4
 8013746:	f7ff ff59 	bl	80135fc <__sflush_r>
 801374a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801374c:	07da      	lsls	r2, r3, #31
 801374e:	4605      	mov	r5, r0
 8013750:	d4e0      	bmi.n	8013714 <_fflush_r+0xc>
 8013752:	89a3      	ldrh	r3, [r4, #12]
 8013754:	059b      	lsls	r3, r3, #22
 8013756:	d4dd      	bmi.n	8013714 <_fflush_r+0xc>
 8013758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801375a:	f000 f908 	bl	801396e <__retarget_lock_release_recursive>
 801375e:	e7d9      	b.n	8013714 <_fflush_r+0xc>
 8013760:	4b05      	ldr	r3, [pc, #20]	; (8013778 <_fflush_r+0x70>)
 8013762:	429c      	cmp	r4, r3
 8013764:	d101      	bne.n	801376a <_fflush_r+0x62>
 8013766:	68ac      	ldr	r4, [r5, #8]
 8013768:	e7df      	b.n	801372a <_fflush_r+0x22>
 801376a:	4b04      	ldr	r3, [pc, #16]	; (801377c <_fflush_r+0x74>)
 801376c:	429c      	cmp	r4, r3
 801376e:	bf08      	it	eq
 8013770:	68ec      	ldreq	r4, [r5, #12]
 8013772:	e7da      	b.n	801372a <_fflush_r+0x22>
 8013774:	08014d90 	.word	0x08014d90
 8013778:	08014db0 	.word	0x08014db0
 801377c:	08014d70 	.word	0x08014d70

08013780 <std>:
 8013780:	2300      	movs	r3, #0
 8013782:	b510      	push	{r4, lr}
 8013784:	4604      	mov	r4, r0
 8013786:	e9c0 3300 	strd	r3, r3, [r0]
 801378a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801378e:	6083      	str	r3, [r0, #8]
 8013790:	8181      	strh	r1, [r0, #12]
 8013792:	6643      	str	r3, [r0, #100]	; 0x64
 8013794:	81c2      	strh	r2, [r0, #14]
 8013796:	6183      	str	r3, [r0, #24]
 8013798:	4619      	mov	r1, r3
 801379a:	2208      	movs	r2, #8
 801379c:	305c      	adds	r0, #92	; 0x5c
 801379e:	f7fb fc13 	bl	800efc8 <memset>
 80137a2:	4b05      	ldr	r3, [pc, #20]	; (80137b8 <std+0x38>)
 80137a4:	6263      	str	r3, [r4, #36]	; 0x24
 80137a6:	4b05      	ldr	r3, [pc, #20]	; (80137bc <std+0x3c>)
 80137a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80137aa:	4b05      	ldr	r3, [pc, #20]	; (80137c0 <std+0x40>)
 80137ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137ae:	4b05      	ldr	r3, [pc, #20]	; (80137c4 <std+0x44>)
 80137b0:	6224      	str	r4, [r4, #32]
 80137b2:	6323      	str	r3, [r4, #48]	; 0x30
 80137b4:	bd10      	pop	{r4, pc}
 80137b6:	bf00      	nop
 80137b8:	08013b71 	.word	0x08013b71
 80137bc:	08013b93 	.word	0x08013b93
 80137c0:	08013bcb 	.word	0x08013bcb
 80137c4:	08013bef 	.word	0x08013bef

080137c8 <_cleanup_r>:
 80137c8:	4901      	ldr	r1, [pc, #4]	; (80137d0 <_cleanup_r+0x8>)
 80137ca:	f000 b8af 	b.w	801392c <_fwalk_reent>
 80137ce:	bf00      	nop
 80137d0:	08013709 	.word	0x08013709

080137d4 <__sfmoreglue>:
 80137d4:	b570      	push	{r4, r5, r6, lr}
 80137d6:	2268      	movs	r2, #104	; 0x68
 80137d8:	1e4d      	subs	r5, r1, #1
 80137da:	4355      	muls	r5, r2
 80137dc:	460e      	mov	r6, r1
 80137de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80137e2:	f7ff fadd 	bl	8012da0 <_malloc_r>
 80137e6:	4604      	mov	r4, r0
 80137e8:	b140      	cbz	r0, 80137fc <__sfmoreglue+0x28>
 80137ea:	2100      	movs	r1, #0
 80137ec:	e9c0 1600 	strd	r1, r6, [r0]
 80137f0:	300c      	adds	r0, #12
 80137f2:	60a0      	str	r0, [r4, #8]
 80137f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80137f8:	f7fb fbe6 	bl	800efc8 <memset>
 80137fc:	4620      	mov	r0, r4
 80137fe:	bd70      	pop	{r4, r5, r6, pc}

08013800 <__sfp_lock_acquire>:
 8013800:	4801      	ldr	r0, [pc, #4]	; (8013808 <__sfp_lock_acquire+0x8>)
 8013802:	f000 b8b3 	b.w	801396c <__retarget_lock_acquire_recursive>
 8013806:	bf00      	nop
 8013808:	20002aa1 	.word	0x20002aa1

0801380c <__sfp_lock_release>:
 801380c:	4801      	ldr	r0, [pc, #4]	; (8013814 <__sfp_lock_release+0x8>)
 801380e:	f000 b8ae 	b.w	801396e <__retarget_lock_release_recursive>
 8013812:	bf00      	nop
 8013814:	20002aa1 	.word	0x20002aa1

08013818 <__sinit_lock_acquire>:
 8013818:	4801      	ldr	r0, [pc, #4]	; (8013820 <__sinit_lock_acquire+0x8>)
 801381a:	f000 b8a7 	b.w	801396c <__retarget_lock_acquire_recursive>
 801381e:	bf00      	nop
 8013820:	20002aa2 	.word	0x20002aa2

08013824 <__sinit_lock_release>:
 8013824:	4801      	ldr	r0, [pc, #4]	; (801382c <__sinit_lock_release+0x8>)
 8013826:	f000 b8a2 	b.w	801396e <__retarget_lock_release_recursive>
 801382a:	bf00      	nop
 801382c:	20002aa2 	.word	0x20002aa2

08013830 <__sinit>:
 8013830:	b510      	push	{r4, lr}
 8013832:	4604      	mov	r4, r0
 8013834:	f7ff fff0 	bl	8013818 <__sinit_lock_acquire>
 8013838:	69a3      	ldr	r3, [r4, #24]
 801383a:	b11b      	cbz	r3, 8013844 <__sinit+0x14>
 801383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013840:	f7ff bff0 	b.w	8013824 <__sinit_lock_release>
 8013844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013848:	6523      	str	r3, [r4, #80]	; 0x50
 801384a:	4b13      	ldr	r3, [pc, #76]	; (8013898 <__sinit+0x68>)
 801384c:	4a13      	ldr	r2, [pc, #76]	; (801389c <__sinit+0x6c>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	62a2      	str	r2, [r4, #40]	; 0x28
 8013852:	42a3      	cmp	r3, r4
 8013854:	bf04      	itt	eq
 8013856:	2301      	moveq	r3, #1
 8013858:	61a3      	streq	r3, [r4, #24]
 801385a:	4620      	mov	r0, r4
 801385c:	f000 f820 	bl	80138a0 <__sfp>
 8013860:	6060      	str	r0, [r4, #4]
 8013862:	4620      	mov	r0, r4
 8013864:	f000 f81c 	bl	80138a0 <__sfp>
 8013868:	60a0      	str	r0, [r4, #8]
 801386a:	4620      	mov	r0, r4
 801386c:	f000 f818 	bl	80138a0 <__sfp>
 8013870:	2200      	movs	r2, #0
 8013872:	60e0      	str	r0, [r4, #12]
 8013874:	2104      	movs	r1, #4
 8013876:	6860      	ldr	r0, [r4, #4]
 8013878:	f7ff ff82 	bl	8013780 <std>
 801387c:	68a0      	ldr	r0, [r4, #8]
 801387e:	2201      	movs	r2, #1
 8013880:	2109      	movs	r1, #9
 8013882:	f7ff ff7d 	bl	8013780 <std>
 8013886:	68e0      	ldr	r0, [r4, #12]
 8013888:	2202      	movs	r2, #2
 801388a:	2112      	movs	r1, #18
 801388c:	f7ff ff78 	bl	8013780 <std>
 8013890:	2301      	movs	r3, #1
 8013892:	61a3      	str	r3, [r4, #24]
 8013894:	e7d2      	b.n	801383c <__sinit+0xc>
 8013896:	bf00      	nop
 8013898:	080148cc 	.word	0x080148cc
 801389c:	080137c9 	.word	0x080137c9

080138a0 <__sfp>:
 80138a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a2:	4607      	mov	r7, r0
 80138a4:	f7ff ffac 	bl	8013800 <__sfp_lock_acquire>
 80138a8:	4b1e      	ldr	r3, [pc, #120]	; (8013924 <__sfp+0x84>)
 80138aa:	681e      	ldr	r6, [r3, #0]
 80138ac:	69b3      	ldr	r3, [r6, #24]
 80138ae:	b913      	cbnz	r3, 80138b6 <__sfp+0x16>
 80138b0:	4630      	mov	r0, r6
 80138b2:	f7ff ffbd 	bl	8013830 <__sinit>
 80138b6:	3648      	adds	r6, #72	; 0x48
 80138b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138bc:	3b01      	subs	r3, #1
 80138be:	d503      	bpl.n	80138c8 <__sfp+0x28>
 80138c0:	6833      	ldr	r3, [r6, #0]
 80138c2:	b30b      	cbz	r3, 8013908 <__sfp+0x68>
 80138c4:	6836      	ldr	r6, [r6, #0]
 80138c6:	e7f7      	b.n	80138b8 <__sfp+0x18>
 80138c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80138cc:	b9d5      	cbnz	r5, 8013904 <__sfp+0x64>
 80138ce:	4b16      	ldr	r3, [pc, #88]	; (8013928 <__sfp+0x88>)
 80138d0:	60e3      	str	r3, [r4, #12]
 80138d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80138d6:	6665      	str	r5, [r4, #100]	; 0x64
 80138d8:	f000 f847 	bl	801396a <__retarget_lock_init_recursive>
 80138dc:	f7ff ff96 	bl	801380c <__sfp_lock_release>
 80138e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80138e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80138e8:	6025      	str	r5, [r4, #0]
 80138ea:	61a5      	str	r5, [r4, #24]
 80138ec:	2208      	movs	r2, #8
 80138ee:	4629      	mov	r1, r5
 80138f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80138f4:	f7fb fb68 	bl	800efc8 <memset>
 80138f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80138fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013900:	4620      	mov	r0, r4
 8013902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013904:	3468      	adds	r4, #104	; 0x68
 8013906:	e7d9      	b.n	80138bc <__sfp+0x1c>
 8013908:	2104      	movs	r1, #4
 801390a:	4638      	mov	r0, r7
 801390c:	f7ff ff62 	bl	80137d4 <__sfmoreglue>
 8013910:	4604      	mov	r4, r0
 8013912:	6030      	str	r0, [r6, #0]
 8013914:	2800      	cmp	r0, #0
 8013916:	d1d5      	bne.n	80138c4 <__sfp+0x24>
 8013918:	f7ff ff78 	bl	801380c <__sfp_lock_release>
 801391c:	230c      	movs	r3, #12
 801391e:	603b      	str	r3, [r7, #0]
 8013920:	e7ee      	b.n	8013900 <__sfp+0x60>
 8013922:	bf00      	nop
 8013924:	080148cc 	.word	0x080148cc
 8013928:	ffff0001 	.word	0xffff0001

0801392c <_fwalk_reent>:
 801392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013930:	4606      	mov	r6, r0
 8013932:	4688      	mov	r8, r1
 8013934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013938:	2700      	movs	r7, #0
 801393a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801393e:	f1b9 0901 	subs.w	r9, r9, #1
 8013942:	d505      	bpl.n	8013950 <_fwalk_reent+0x24>
 8013944:	6824      	ldr	r4, [r4, #0]
 8013946:	2c00      	cmp	r4, #0
 8013948:	d1f7      	bne.n	801393a <_fwalk_reent+0xe>
 801394a:	4638      	mov	r0, r7
 801394c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013950:	89ab      	ldrh	r3, [r5, #12]
 8013952:	2b01      	cmp	r3, #1
 8013954:	d907      	bls.n	8013966 <_fwalk_reent+0x3a>
 8013956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801395a:	3301      	adds	r3, #1
 801395c:	d003      	beq.n	8013966 <_fwalk_reent+0x3a>
 801395e:	4629      	mov	r1, r5
 8013960:	4630      	mov	r0, r6
 8013962:	47c0      	blx	r8
 8013964:	4307      	orrs	r7, r0
 8013966:	3568      	adds	r5, #104	; 0x68
 8013968:	e7e9      	b.n	801393e <_fwalk_reent+0x12>

0801396a <__retarget_lock_init_recursive>:
 801396a:	4770      	bx	lr

0801396c <__retarget_lock_acquire_recursive>:
 801396c:	4770      	bx	lr

0801396e <__retarget_lock_release_recursive>:
 801396e:	4770      	bx	lr

08013970 <__swhatbuf_r>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	460e      	mov	r6, r1
 8013974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013978:	2900      	cmp	r1, #0
 801397a:	b096      	sub	sp, #88	; 0x58
 801397c:	4614      	mov	r4, r2
 801397e:	461d      	mov	r5, r3
 8013980:	da08      	bge.n	8013994 <__swhatbuf_r+0x24>
 8013982:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013986:	2200      	movs	r2, #0
 8013988:	602a      	str	r2, [r5, #0]
 801398a:	061a      	lsls	r2, r3, #24
 801398c:	d410      	bmi.n	80139b0 <__swhatbuf_r+0x40>
 801398e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013992:	e00e      	b.n	80139b2 <__swhatbuf_r+0x42>
 8013994:	466a      	mov	r2, sp
 8013996:	f000 f951 	bl	8013c3c <_fstat_r>
 801399a:	2800      	cmp	r0, #0
 801399c:	dbf1      	blt.n	8013982 <__swhatbuf_r+0x12>
 801399e:	9a01      	ldr	r2, [sp, #4]
 80139a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139a8:	425a      	negs	r2, r3
 80139aa:	415a      	adcs	r2, r3
 80139ac:	602a      	str	r2, [r5, #0]
 80139ae:	e7ee      	b.n	801398e <__swhatbuf_r+0x1e>
 80139b0:	2340      	movs	r3, #64	; 0x40
 80139b2:	2000      	movs	r0, #0
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	b016      	add	sp, #88	; 0x58
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080139bc <__smakebuf_r>:
 80139bc:	898b      	ldrh	r3, [r1, #12]
 80139be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139c0:	079d      	lsls	r5, r3, #30
 80139c2:	4606      	mov	r6, r0
 80139c4:	460c      	mov	r4, r1
 80139c6:	d507      	bpl.n	80139d8 <__smakebuf_r+0x1c>
 80139c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	6123      	str	r3, [r4, #16]
 80139d0:	2301      	movs	r3, #1
 80139d2:	6163      	str	r3, [r4, #20]
 80139d4:	b002      	add	sp, #8
 80139d6:	bd70      	pop	{r4, r5, r6, pc}
 80139d8:	ab01      	add	r3, sp, #4
 80139da:	466a      	mov	r2, sp
 80139dc:	f7ff ffc8 	bl	8013970 <__swhatbuf_r>
 80139e0:	9900      	ldr	r1, [sp, #0]
 80139e2:	4605      	mov	r5, r0
 80139e4:	4630      	mov	r0, r6
 80139e6:	f7ff f9db 	bl	8012da0 <_malloc_r>
 80139ea:	b948      	cbnz	r0, 8013a00 <__smakebuf_r+0x44>
 80139ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139f0:	059a      	lsls	r2, r3, #22
 80139f2:	d4ef      	bmi.n	80139d4 <__smakebuf_r+0x18>
 80139f4:	f023 0303 	bic.w	r3, r3, #3
 80139f8:	f043 0302 	orr.w	r3, r3, #2
 80139fc:	81a3      	strh	r3, [r4, #12]
 80139fe:	e7e3      	b.n	80139c8 <__smakebuf_r+0xc>
 8013a00:	4b0d      	ldr	r3, [pc, #52]	; (8013a38 <__smakebuf_r+0x7c>)
 8013a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a04:	89a3      	ldrh	r3, [r4, #12]
 8013a06:	6020      	str	r0, [r4, #0]
 8013a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a0c:	81a3      	strh	r3, [r4, #12]
 8013a0e:	9b00      	ldr	r3, [sp, #0]
 8013a10:	6163      	str	r3, [r4, #20]
 8013a12:	9b01      	ldr	r3, [sp, #4]
 8013a14:	6120      	str	r0, [r4, #16]
 8013a16:	b15b      	cbz	r3, 8013a30 <__smakebuf_r+0x74>
 8013a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f000 f91f 	bl	8013c60 <_isatty_r>
 8013a22:	b128      	cbz	r0, 8013a30 <__smakebuf_r+0x74>
 8013a24:	89a3      	ldrh	r3, [r4, #12]
 8013a26:	f023 0303 	bic.w	r3, r3, #3
 8013a2a:	f043 0301 	orr.w	r3, r3, #1
 8013a2e:	81a3      	strh	r3, [r4, #12]
 8013a30:	89a0      	ldrh	r0, [r4, #12]
 8013a32:	4305      	orrs	r5, r0
 8013a34:	81a5      	strh	r5, [r4, #12]
 8013a36:	e7cd      	b.n	80139d4 <__smakebuf_r+0x18>
 8013a38:	080137c9 	.word	0x080137c9

08013a3c <memmove>:
 8013a3c:	4288      	cmp	r0, r1
 8013a3e:	b510      	push	{r4, lr}
 8013a40:	eb01 0402 	add.w	r4, r1, r2
 8013a44:	d902      	bls.n	8013a4c <memmove+0x10>
 8013a46:	4284      	cmp	r4, r0
 8013a48:	4623      	mov	r3, r4
 8013a4a:	d807      	bhi.n	8013a5c <memmove+0x20>
 8013a4c:	1e43      	subs	r3, r0, #1
 8013a4e:	42a1      	cmp	r1, r4
 8013a50:	d008      	beq.n	8013a64 <memmove+0x28>
 8013a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a5a:	e7f8      	b.n	8013a4e <memmove+0x12>
 8013a5c:	4402      	add	r2, r0
 8013a5e:	4601      	mov	r1, r0
 8013a60:	428a      	cmp	r2, r1
 8013a62:	d100      	bne.n	8013a66 <memmove+0x2a>
 8013a64:	bd10      	pop	{r4, pc}
 8013a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a6e:	e7f7      	b.n	8013a60 <memmove+0x24>

08013a70 <__malloc_lock>:
 8013a70:	4801      	ldr	r0, [pc, #4]	; (8013a78 <__malloc_lock+0x8>)
 8013a72:	f7ff bf7b 	b.w	801396c <__retarget_lock_acquire_recursive>
 8013a76:	bf00      	nop
 8013a78:	20002aa0 	.word	0x20002aa0

08013a7c <__malloc_unlock>:
 8013a7c:	4801      	ldr	r0, [pc, #4]	; (8013a84 <__malloc_unlock+0x8>)
 8013a7e:	f7ff bf76 	b.w	801396e <__retarget_lock_release_recursive>
 8013a82:	bf00      	nop
 8013a84:	20002aa0 	.word	0x20002aa0

08013a88 <_realloc_r>:
 8013a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a8c:	4680      	mov	r8, r0
 8013a8e:	4614      	mov	r4, r2
 8013a90:	460e      	mov	r6, r1
 8013a92:	b921      	cbnz	r1, 8013a9e <_realloc_r+0x16>
 8013a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a98:	4611      	mov	r1, r2
 8013a9a:	f7ff b981 	b.w	8012da0 <_malloc_r>
 8013a9e:	b92a      	cbnz	r2, 8013aac <_realloc_r+0x24>
 8013aa0:	f7ff f912 	bl	8012cc8 <_free_r>
 8013aa4:	4625      	mov	r5, r4
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aac:	f000 f8fa 	bl	8013ca4 <_malloc_usable_size_r>
 8013ab0:	4284      	cmp	r4, r0
 8013ab2:	4607      	mov	r7, r0
 8013ab4:	d802      	bhi.n	8013abc <_realloc_r+0x34>
 8013ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013aba:	d812      	bhi.n	8013ae2 <_realloc_r+0x5a>
 8013abc:	4621      	mov	r1, r4
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7ff f96e 	bl	8012da0 <_malloc_r>
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d0ed      	beq.n	8013aa6 <_realloc_r+0x1e>
 8013aca:	42bc      	cmp	r4, r7
 8013acc:	4622      	mov	r2, r4
 8013ace:	4631      	mov	r1, r6
 8013ad0:	bf28      	it	cs
 8013ad2:	463a      	movcs	r2, r7
 8013ad4:	f7fe fc12 	bl	80122fc <memcpy>
 8013ad8:	4631      	mov	r1, r6
 8013ada:	4640      	mov	r0, r8
 8013adc:	f7ff f8f4 	bl	8012cc8 <_free_r>
 8013ae0:	e7e1      	b.n	8013aa6 <_realloc_r+0x1e>
 8013ae2:	4635      	mov	r5, r6
 8013ae4:	e7df      	b.n	8013aa6 <_realloc_r+0x1e>

08013ae6 <_raise_r>:
 8013ae6:	291f      	cmp	r1, #31
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4604      	mov	r4, r0
 8013aec:	460d      	mov	r5, r1
 8013aee:	d904      	bls.n	8013afa <_raise_r+0x14>
 8013af0:	2316      	movs	r3, #22
 8013af2:	6003      	str	r3, [r0, #0]
 8013af4:	f04f 30ff 	mov.w	r0, #4294967295
 8013af8:	bd38      	pop	{r3, r4, r5, pc}
 8013afa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013afc:	b112      	cbz	r2, 8013b04 <_raise_r+0x1e>
 8013afe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b02:	b94b      	cbnz	r3, 8013b18 <_raise_r+0x32>
 8013b04:	4620      	mov	r0, r4
 8013b06:	f000 f831 	bl	8013b6c <_getpid_r>
 8013b0a:	462a      	mov	r2, r5
 8013b0c:	4601      	mov	r1, r0
 8013b0e:	4620      	mov	r0, r4
 8013b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b14:	f000 b818 	b.w	8013b48 <_kill_r>
 8013b18:	2b01      	cmp	r3, #1
 8013b1a:	d00a      	beq.n	8013b32 <_raise_r+0x4c>
 8013b1c:	1c59      	adds	r1, r3, #1
 8013b1e:	d103      	bne.n	8013b28 <_raise_r+0x42>
 8013b20:	2316      	movs	r3, #22
 8013b22:	6003      	str	r3, [r0, #0]
 8013b24:	2001      	movs	r0, #1
 8013b26:	e7e7      	b.n	8013af8 <_raise_r+0x12>
 8013b28:	2400      	movs	r4, #0
 8013b2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b2e:	4628      	mov	r0, r5
 8013b30:	4798      	blx	r3
 8013b32:	2000      	movs	r0, #0
 8013b34:	e7e0      	b.n	8013af8 <_raise_r+0x12>
	...

08013b38 <raise>:
 8013b38:	4b02      	ldr	r3, [pc, #8]	; (8013b44 <raise+0xc>)
 8013b3a:	4601      	mov	r1, r0
 8013b3c:	6818      	ldr	r0, [r3, #0]
 8013b3e:	f7ff bfd2 	b.w	8013ae6 <_raise_r>
 8013b42:	bf00      	nop
 8013b44:	20000058 	.word	0x20000058

08013b48 <_kill_r>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4d07      	ldr	r5, [pc, #28]	; (8013b68 <_kill_r+0x20>)
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	4604      	mov	r4, r0
 8013b50:	4608      	mov	r0, r1
 8013b52:	4611      	mov	r1, r2
 8013b54:	602b      	str	r3, [r5, #0]
 8013b56:	f7f1 ff98 	bl	8005a8a <_kill>
 8013b5a:	1c43      	adds	r3, r0, #1
 8013b5c:	d102      	bne.n	8013b64 <_kill_r+0x1c>
 8013b5e:	682b      	ldr	r3, [r5, #0]
 8013b60:	b103      	cbz	r3, 8013b64 <_kill_r+0x1c>
 8013b62:	6023      	str	r3, [r4, #0]
 8013b64:	bd38      	pop	{r3, r4, r5, pc}
 8013b66:	bf00      	nop
 8013b68:	20002aa4 	.word	0x20002aa4

08013b6c <_getpid_r>:
 8013b6c:	f7f1 bf85 	b.w	8005a7a <_getpid>

08013b70 <__sread>:
 8013b70:	b510      	push	{r4, lr}
 8013b72:	460c      	mov	r4, r1
 8013b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b78:	f000 f89c 	bl	8013cb4 <_read_r>
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	bfab      	itete	ge
 8013b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b82:	89a3      	ldrhlt	r3, [r4, #12]
 8013b84:	181b      	addge	r3, r3, r0
 8013b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b8a:	bfac      	ite	ge
 8013b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b8e:	81a3      	strhlt	r3, [r4, #12]
 8013b90:	bd10      	pop	{r4, pc}

08013b92 <__swrite>:
 8013b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b96:	461f      	mov	r7, r3
 8013b98:	898b      	ldrh	r3, [r1, #12]
 8013b9a:	05db      	lsls	r3, r3, #23
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	4616      	mov	r6, r2
 8013ba2:	d505      	bpl.n	8013bb0 <__swrite+0x1e>
 8013ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ba8:	2302      	movs	r3, #2
 8013baa:	2200      	movs	r2, #0
 8013bac:	f000 f868 	bl	8013c80 <_lseek_r>
 8013bb0:	89a3      	ldrh	r3, [r4, #12]
 8013bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bba:	81a3      	strh	r3, [r4, #12]
 8013bbc:	4632      	mov	r2, r6
 8013bbe:	463b      	mov	r3, r7
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc6:	f000 b817 	b.w	8013bf8 <_write_r>

08013bca <__sseek>:
 8013bca:	b510      	push	{r4, lr}
 8013bcc:	460c      	mov	r4, r1
 8013bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bd2:	f000 f855 	bl	8013c80 <_lseek_r>
 8013bd6:	1c43      	adds	r3, r0, #1
 8013bd8:	89a3      	ldrh	r3, [r4, #12]
 8013bda:	bf15      	itete	ne
 8013bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013be6:	81a3      	strheq	r3, [r4, #12]
 8013be8:	bf18      	it	ne
 8013bea:	81a3      	strhne	r3, [r4, #12]
 8013bec:	bd10      	pop	{r4, pc}

08013bee <__sclose>:
 8013bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf2:	f000 b813 	b.w	8013c1c <_close_r>
	...

08013bf8 <_write_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d07      	ldr	r5, [pc, #28]	; (8013c18 <_write_r+0x20>)
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	4608      	mov	r0, r1
 8013c00:	4611      	mov	r1, r2
 8013c02:	2200      	movs	r2, #0
 8013c04:	602a      	str	r2, [r5, #0]
 8013c06:	461a      	mov	r2, r3
 8013c08:	f7f1 ff76 	bl	8005af8 <_write>
 8013c0c:	1c43      	adds	r3, r0, #1
 8013c0e:	d102      	bne.n	8013c16 <_write_r+0x1e>
 8013c10:	682b      	ldr	r3, [r5, #0]
 8013c12:	b103      	cbz	r3, 8013c16 <_write_r+0x1e>
 8013c14:	6023      	str	r3, [r4, #0]
 8013c16:	bd38      	pop	{r3, r4, r5, pc}
 8013c18:	20002aa4 	.word	0x20002aa4

08013c1c <_close_r>:
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4d06      	ldr	r5, [pc, #24]	; (8013c38 <_close_r+0x1c>)
 8013c20:	2300      	movs	r3, #0
 8013c22:	4604      	mov	r4, r0
 8013c24:	4608      	mov	r0, r1
 8013c26:	602b      	str	r3, [r5, #0]
 8013c28:	f7f1 ff82 	bl	8005b30 <_close>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d102      	bne.n	8013c36 <_close_r+0x1a>
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	b103      	cbz	r3, 8013c36 <_close_r+0x1a>
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	bd38      	pop	{r3, r4, r5, pc}
 8013c38:	20002aa4 	.word	0x20002aa4

08013c3c <_fstat_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4d07      	ldr	r5, [pc, #28]	; (8013c5c <_fstat_r+0x20>)
 8013c40:	2300      	movs	r3, #0
 8013c42:	4604      	mov	r4, r0
 8013c44:	4608      	mov	r0, r1
 8013c46:	4611      	mov	r1, r2
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	f7f1 ff7d 	bl	8005b48 <_fstat>
 8013c4e:	1c43      	adds	r3, r0, #1
 8013c50:	d102      	bne.n	8013c58 <_fstat_r+0x1c>
 8013c52:	682b      	ldr	r3, [r5, #0]
 8013c54:	b103      	cbz	r3, 8013c58 <_fstat_r+0x1c>
 8013c56:	6023      	str	r3, [r4, #0]
 8013c58:	bd38      	pop	{r3, r4, r5, pc}
 8013c5a:	bf00      	nop
 8013c5c:	20002aa4 	.word	0x20002aa4

08013c60 <_isatty_r>:
 8013c60:	b538      	push	{r3, r4, r5, lr}
 8013c62:	4d06      	ldr	r5, [pc, #24]	; (8013c7c <_isatty_r+0x1c>)
 8013c64:	2300      	movs	r3, #0
 8013c66:	4604      	mov	r4, r0
 8013c68:	4608      	mov	r0, r1
 8013c6a:	602b      	str	r3, [r5, #0]
 8013c6c:	f7f1 ff7c 	bl	8005b68 <_isatty>
 8013c70:	1c43      	adds	r3, r0, #1
 8013c72:	d102      	bne.n	8013c7a <_isatty_r+0x1a>
 8013c74:	682b      	ldr	r3, [r5, #0]
 8013c76:	b103      	cbz	r3, 8013c7a <_isatty_r+0x1a>
 8013c78:	6023      	str	r3, [r4, #0]
 8013c7a:	bd38      	pop	{r3, r4, r5, pc}
 8013c7c:	20002aa4 	.word	0x20002aa4

08013c80 <_lseek_r>:
 8013c80:	b538      	push	{r3, r4, r5, lr}
 8013c82:	4d07      	ldr	r5, [pc, #28]	; (8013ca0 <_lseek_r+0x20>)
 8013c84:	4604      	mov	r4, r0
 8013c86:	4608      	mov	r0, r1
 8013c88:	4611      	mov	r1, r2
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	602a      	str	r2, [r5, #0]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	f7f1 ff75 	bl	8005b7e <_lseek>
 8013c94:	1c43      	adds	r3, r0, #1
 8013c96:	d102      	bne.n	8013c9e <_lseek_r+0x1e>
 8013c98:	682b      	ldr	r3, [r5, #0]
 8013c9a:	b103      	cbz	r3, 8013c9e <_lseek_r+0x1e>
 8013c9c:	6023      	str	r3, [r4, #0]
 8013c9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ca0:	20002aa4 	.word	0x20002aa4

08013ca4 <_malloc_usable_size_r>:
 8013ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ca8:	1f18      	subs	r0, r3, #4
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	bfbc      	itt	lt
 8013cae:	580b      	ldrlt	r3, [r1, r0]
 8013cb0:	18c0      	addlt	r0, r0, r3
 8013cb2:	4770      	bx	lr

08013cb4 <_read_r>:
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	4d07      	ldr	r5, [pc, #28]	; (8013cd4 <_read_r+0x20>)
 8013cb8:	4604      	mov	r4, r0
 8013cba:	4608      	mov	r0, r1
 8013cbc:	4611      	mov	r1, r2
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	602a      	str	r2, [r5, #0]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	f7f1 fefb 	bl	8005abe <_read>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	d102      	bne.n	8013cd2 <_read_r+0x1e>
 8013ccc:	682b      	ldr	r3, [r5, #0]
 8013cce:	b103      	cbz	r3, 8013cd2 <_read_r+0x1e>
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	20002aa4 	.word	0x20002aa4

08013cd8 <atan>:
 8013cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cdc:	ec55 4b10 	vmov	r4, r5, d0
 8013ce0:	4bc3      	ldr	r3, [pc, #780]	; (8013ff0 <atan+0x318>)
 8013ce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013ce6:	429e      	cmp	r6, r3
 8013ce8:	46ab      	mov	fp, r5
 8013cea:	dd18      	ble.n	8013d1e <atan+0x46>
 8013cec:	4bc1      	ldr	r3, [pc, #772]	; (8013ff4 <atan+0x31c>)
 8013cee:	429e      	cmp	r6, r3
 8013cf0:	dc01      	bgt.n	8013cf6 <atan+0x1e>
 8013cf2:	d109      	bne.n	8013d08 <atan+0x30>
 8013cf4:	b144      	cbz	r4, 8013d08 <atan+0x30>
 8013cf6:	4622      	mov	r2, r4
 8013cf8:	462b      	mov	r3, r5
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	f7ec fae5 	bl	80002cc <__adddf3>
 8013d02:	4604      	mov	r4, r0
 8013d04:	460d      	mov	r5, r1
 8013d06:	e006      	b.n	8013d16 <atan+0x3e>
 8013d08:	f1bb 0f00 	cmp.w	fp, #0
 8013d0c:	f300 8131 	bgt.w	8013f72 <atan+0x29a>
 8013d10:	a59b      	add	r5, pc, #620	; (adr r5, 8013f80 <atan+0x2a8>)
 8013d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013d16:	ec45 4b10 	vmov	d0, r4, r5
 8013d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1e:	4bb6      	ldr	r3, [pc, #728]	; (8013ff8 <atan+0x320>)
 8013d20:	429e      	cmp	r6, r3
 8013d22:	dc14      	bgt.n	8013d4e <atan+0x76>
 8013d24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013d28:	429e      	cmp	r6, r3
 8013d2a:	dc0d      	bgt.n	8013d48 <atan+0x70>
 8013d2c:	a396      	add	r3, pc, #600	; (adr r3, 8013f88 <atan+0x2b0>)
 8013d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d32:	ee10 0a10 	vmov	r0, s0
 8013d36:	4629      	mov	r1, r5
 8013d38:	f7ec fac8 	bl	80002cc <__adddf3>
 8013d3c:	4baf      	ldr	r3, [pc, #700]	; (8013ffc <atan+0x324>)
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f7ec ff0a 	bl	8000b58 <__aeabi_dcmpgt>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d1e6      	bne.n	8013d16 <atan+0x3e>
 8013d48:	f04f 3aff 	mov.w	sl, #4294967295
 8013d4c:	e02b      	b.n	8013da6 <atan+0xce>
 8013d4e:	f000 f963 	bl	8014018 <fabs>
 8013d52:	4bab      	ldr	r3, [pc, #684]	; (8014000 <atan+0x328>)
 8013d54:	429e      	cmp	r6, r3
 8013d56:	ec55 4b10 	vmov	r4, r5, d0
 8013d5a:	f300 80bf 	bgt.w	8013edc <atan+0x204>
 8013d5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013d62:	429e      	cmp	r6, r3
 8013d64:	f300 80a0 	bgt.w	8013ea8 <atan+0x1d0>
 8013d68:	ee10 2a10 	vmov	r2, s0
 8013d6c:	ee10 0a10 	vmov	r0, s0
 8013d70:	462b      	mov	r3, r5
 8013d72:	4629      	mov	r1, r5
 8013d74:	f7ec faaa 	bl	80002cc <__adddf3>
 8013d78:	4ba0      	ldr	r3, [pc, #640]	; (8013ffc <atan+0x324>)
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f7ec faa4 	bl	80002c8 <__aeabi_dsub>
 8013d80:	2200      	movs	r2, #0
 8013d82:	4606      	mov	r6, r0
 8013d84:	460f      	mov	r7, r1
 8013d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	f7ec fa9d 	bl	80002cc <__adddf3>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec fd77 	bl	800088c <__aeabi_ddiv>
 8013d9e:	f04f 0a00 	mov.w	sl, #0
 8013da2:	4604      	mov	r4, r0
 8013da4:	460d      	mov	r5, r1
 8013da6:	4622      	mov	r2, r4
 8013da8:	462b      	mov	r3, r5
 8013daa:	4620      	mov	r0, r4
 8013dac:	4629      	mov	r1, r5
 8013dae:	f7ec fc43 	bl	8000638 <__aeabi_dmul>
 8013db2:	4602      	mov	r2, r0
 8013db4:	460b      	mov	r3, r1
 8013db6:	4680      	mov	r8, r0
 8013db8:	4689      	mov	r9, r1
 8013dba:	f7ec fc3d 	bl	8000638 <__aeabi_dmul>
 8013dbe:	a374      	add	r3, pc, #464	; (adr r3, 8013f90 <atan+0x2b8>)
 8013dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	460f      	mov	r7, r1
 8013dc8:	f7ec fc36 	bl	8000638 <__aeabi_dmul>
 8013dcc:	a372      	add	r3, pc, #456	; (adr r3, 8013f98 <atan+0x2c0>)
 8013dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd2:	f7ec fa7b 	bl	80002cc <__adddf3>
 8013dd6:	4632      	mov	r2, r6
 8013dd8:	463b      	mov	r3, r7
 8013dda:	f7ec fc2d 	bl	8000638 <__aeabi_dmul>
 8013dde:	a370      	add	r3, pc, #448	; (adr r3, 8013fa0 <atan+0x2c8>)
 8013de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de4:	f7ec fa72 	bl	80002cc <__adddf3>
 8013de8:	4632      	mov	r2, r6
 8013dea:	463b      	mov	r3, r7
 8013dec:	f7ec fc24 	bl	8000638 <__aeabi_dmul>
 8013df0:	a36d      	add	r3, pc, #436	; (adr r3, 8013fa8 <atan+0x2d0>)
 8013df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df6:	f7ec fa69 	bl	80002cc <__adddf3>
 8013dfa:	4632      	mov	r2, r6
 8013dfc:	463b      	mov	r3, r7
 8013dfe:	f7ec fc1b 	bl	8000638 <__aeabi_dmul>
 8013e02:	a36b      	add	r3, pc, #428	; (adr r3, 8013fb0 <atan+0x2d8>)
 8013e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e08:	f7ec fa60 	bl	80002cc <__adddf3>
 8013e0c:	4632      	mov	r2, r6
 8013e0e:	463b      	mov	r3, r7
 8013e10:	f7ec fc12 	bl	8000638 <__aeabi_dmul>
 8013e14:	a368      	add	r3, pc, #416	; (adr r3, 8013fb8 <atan+0x2e0>)
 8013e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1a:	f7ec fa57 	bl	80002cc <__adddf3>
 8013e1e:	4642      	mov	r2, r8
 8013e20:	464b      	mov	r3, r9
 8013e22:	f7ec fc09 	bl	8000638 <__aeabi_dmul>
 8013e26:	a366      	add	r3, pc, #408	; (adr r3, 8013fc0 <atan+0x2e8>)
 8013e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2c:	4680      	mov	r8, r0
 8013e2e:	4689      	mov	r9, r1
 8013e30:	4630      	mov	r0, r6
 8013e32:	4639      	mov	r1, r7
 8013e34:	f7ec fc00 	bl	8000638 <__aeabi_dmul>
 8013e38:	a363      	add	r3, pc, #396	; (adr r3, 8013fc8 <atan+0x2f0>)
 8013e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3e:	f7ec fa43 	bl	80002c8 <__aeabi_dsub>
 8013e42:	4632      	mov	r2, r6
 8013e44:	463b      	mov	r3, r7
 8013e46:	f7ec fbf7 	bl	8000638 <__aeabi_dmul>
 8013e4a:	a361      	add	r3, pc, #388	; (adr r3, 8013fd0 <atan+0x2f8>)
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	f7ec fa3a 	bl	80002c8 <__aeabi_dsub>
 8013e54:	4632      	mov	r2, r6
 8013e56:	463b      	mov	r3, r7
 8013e58:	f7ec fbee 	bl	8000638 <__aeabi_dmul>
 8013e5c:	a35e      	add	r3, pc, #376	; (adr r3, 8013fd8 <atan+0x300>)
 8013e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e62:	f7ec fa31 	bl	80002c8 <__aeabi_dsub>
 8013e66:	4632      	mov	r2, r6
 8013e68:	463b      	mov	r3, r7
 8013e6a:	f7ec fbe5 	bl	8000638 <__aeabi_dmul>
 8013e6e:	a35c      	add	r3, pc, #368	; (adr r3, 8013fe0 <atan+0x308>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	f7ec fa28 	bl	80002c8 <__aeabi_dsub>
 8013e78:	4632      	mov	r2, r6
 8013e7a:	463b      	mov	r3, r7
 8013e7c:	f7ec fbdc 	bl	8000638 <__aeabi_dmul>
 8013e80:	4602      	mov	r2, r0
 8013e82:	460b      	mov	r3, r1
 8013e84:	4640      	mov	r0, r8
 8013e86:	4649      	mov	r1, r9
 8013e88:	f7ec fa20 	bl	80002cc <__adddf3>
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	462b      	mov	r3, r5
 8013e90:	f7ec fbd2 	bl	8000638 <__aeabi_dmul>
 8013e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013e98:	4602      	mov	r2, r0
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	d14b      	bne.n	8013f36 <atan+0x25e>
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	f7ec fa11 	bl	80002c8 <__aeabi_dsub>
 8013ea6:	e72c      	b.n	8013d02 <atan+0x2a>
 8013ea8:	ee10 0a10 	vmov	r0, s0
 8013eac:	4b53      	ldr	r3, [pc, #332]	; (8013ffc <atan+0x324>)
 8013eae:	2200      	movs	r2, #0
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	f7ec fa09 	bl	80002c8 <__aeabi_dsub>
 8013eb6:	4b51      	ldr	r3, [pc, #324]	; (8013ffc <atan+0x324>)
 8013eb8:	4606      	mov	r6, r0
 8013eba:	460f      	mov	r7, r1
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	f7ec fa03 	bl	80002cc <__adddf3>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ec fcdd 	bl	800088c <__aeabi_ddiv>
 8013ed2:	f04f 0a01 	mov.w	sl, #1
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	460d      	mov	r5, r1
 8013eda:	e764      	b.n	8013da6 <atan+0xce>
 8013edc:	4b49      	ldr	r3, [pc, #292]	; (8014004 <atan+0x32c>)
 8013ede:	429e      	cmp	r6, r3
 8013ee0:	da1d      	bge.n	8013f1e <atan+0x246>
 8013ee2:	ee10 0a10 	vmov	r0, s0
 8013ee6:	4b48      	ldr	r3, [pc, #288]	; (8014008 <atan+0x330>)
 8013ee8:	2200      	movs	r2, #0
 8013eea:	4629      	mov	r1, r5
 8013eec:	f7ec f9ec 	bl	80002c8 <__aeabi_dsub>
 8013ef0:	4b45      	ldr	r3, [pc, #276]	; (8014008 <atan+0x330>)
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	460f      	mov	r7, r1
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	4620      	mov	r0, r4
 8013efa:	4629      	mov	r1, r5
 8013efc:	f7ec fb9c 	bl	8000638 <__aeabi_dmul>
 8013f00:	4b3e      	ldr	r3, [pc, #248]	; (8013ffc <atan+0x324>)
 8013f02:	2200      	movs	r2, #0
 8013f04:	f7ec f9e2 	bl	80002cc <__adddf3>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	4639      	mov	r1, r7
 8013f10:	f7ec fcbc 	bl	800088c <__aeabi_ddiv>
 8013f14:	f04f 0a02 	mov.w	sl, #2
 8013f18:	4604      	mov	r4, r0
 8013f1a:	460d      	mov	r5, r1
 8013f1c:	e743      	b.n	8013da6 <atan+0xce>
 8013f1e:	462b      	mov	r3, r5
 8013f20:	ee10 2a10 	vmov	r2, s0
 8013f24:	4939      	ldr	r1, [pc, #228]	; (801400c <atan+0x334>)
 8013f26:	2000      	movs	r0, #0
 8013f28:	f7ec fcb0 	bl	800088c <__aeabi_ddiv>
 8013f2c:	f04f 0a03 	mov.w	sl, #3
 8013f30:	4604      	mov	r4, r0
 8013f32:	460d      	mov	r5, r1
 8013f34:	e737      	b.n	8013da6 <atan+0xce>
 8013f36:	4b36      	ldr	r3, [pc, #216]	; (8014010 <atan+0x338>)
 8013f38:	4e36      	ldr	r6, [pc, #216]	; (8014014 <atan+0x33c>)
 8013f3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013f3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013f42:	e9da 2300 	ldrd	r2, r3, [sl]
 8013f46:	f7ec f9bf 	bl	80002c8 <__aeabi_dsub>
 8013f4a:	4622      	mov	r2, r4
 8013f4c:	462b      	mov	r3, r5
 8013f4e:	f7ec f9bb 	bl	80002c8 <__aeabi_dsub>
 8013f52:	4602      	mov	r2, r0
 8013f54:	460b      	mov	r3, r1
 8013f56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013f5a:	f7ec f9b5 	bl	80002c8 <__aeabi_dsub>
 8013f5e:	f1bb 0f00 	cmp.w	fp, #0
 8013f62:	4604      	mov	r4, r0
 8013f64:	460d      	mov	r5, r1
 8013f66:	f6bf aed6 	bge.w	8013d16 <atan+0x3e>
 8013f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f6e:	461d      	mov	r5, r3
 8013f70:	e6d1      	b.n	8013d16 <atan+0x3e>
 8013f72:	a51d      	add	r5, pc, #116	; (adr r5, 8013fe8 <atan+0x310>)
 8013f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013f78:	e6cd      	b.n	8013d16 <atan+0x3e>
 8013f7a:	bf00      	nop
 8013f7c:	f3af 8000 	nop.w
 8013f80:	54442d18 	.word	0x54442d18
 8013f84:	bff921fb 	.word	0xbff921fb
 8013f88:	8800759c 	.word	0x8800759c
 8013f8c:	7e37e43c 	.word	0x7e37e43c
 8013f90:	e322da11 	.word	0xe322da11
 8013f94:	3f90ad3a 	.word	0x3f90ad3a
 8013f98:	24760deb 	.word	0x24760deb
 8013f9c:	3fa97b4b 	.word	0x3fa97b4b
 8013fa0:	a0d03d51 	.word	0xa0d03d51
 8013fa4:	3fb10d66 	.word	0x3fb10d66
 8013fa8:	c54c206e 	.word	0xc54c206e
 8013fac:	3fb745cd 	.word	0x3fb745cd
 8013fb0:	920083ff 	.word	0x920083ff
 8013fb4:	3fc24924 	.word	0x3fc24924
 8013fb8:	5555550d 	.word	0x5555550d
 8013fbc:	3fd55555 	.word	0x3fd55555
 8013fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8013fc4:	bfa2b444 	.word	0xbfa2b444
 8013fc8:	52defd9a 	.word	0x52defd9a
 8013fcc:	3fadde2d 	.word	0x3fadde2d
 8013fd0:	af749a6d 	.word	0xaf749a6d
 8013fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8013fd8:	fe231671 	.word	0xfe231671
 8013fdc:	3fbc71c6 	.word	0x3fbc71c6
 8013fe0:	9998ebc4 	.word	0x9998ebc4
 8013fe4:	3fc99999 	.word	0x3fc99999
 8013fe8:	54442d18 	.word	0x54442d18
 8013fec:	3ff921fb 	.word	0x3ff921fb
 8013ff0:	440fffff 	.word	0x440fffff
 8013ff4:	7ff00000 	.word	0x7ff00000
 8013ff8:	3fdbffff 	.word	0x3fdbffff
 8013ffc:	3ff00000 	.word	0x3ff00000
 8014000:	3ff2ffff 	.word	0x3ff2ffff
 8014004:	40038000 	.word	0x40038000
 8014008:	3ff80000 	.word	0x3ff80000
 801400c:	bff00000 	.word	0xbff00000
 8014010:	08014df0 	.word	0x08014df0
 8014014:	08014dd0 	.word	0x08014dd0

08014018 <fabs>:
 8014018:	ec51 0b10 	vmov	r0, r1, d0
 801401c:	ee10 2a10 	vmov	r2, s0
 8014020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014024:	ec43 2b10 	vmov	d0, r2, r3
 8014028:	4770      	bx	lr
	...

0801402c <_init>:
 801402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801402e:	bf00      	nop
 8014030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014032:	bc08      	pop	{r3}
 8014034:	469e      	mov	lr, r3
 8014036:	4770      	bx	lr

08014038 <_fini>:
 8014038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801403a:	bf00      	nop
 801403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801403e:	bc08      	pop	{r3}
 8014040:	469e      	mov	lr, r3
 8014042:	4770      	bx	lr
