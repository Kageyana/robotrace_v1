
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a8f0  0800a8f0  0001a8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb4  0800adb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adbc  0800adbc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adbc  0800adbc  0001adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800adc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001e0  0800afa4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800afa4  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015811  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d3  00000000  00000000  00035a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  000397c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024da5  00000000  00000000  0003aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c36  00000000  00000000  0005f84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3279  00000000  00000000  00077483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a6fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae8  00000000  00000000  0015a74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8d8 	.word	0x0800a8d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a8d8 	.word	0x0800a8d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001040:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001044:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001050:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001054:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001058:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001060:	e000      	b.n	8001064 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001062:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001064:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f9      	beq.n	8001062 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800106e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 fabe 	bl	800260c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f880 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fccc 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001098:	f000 fcaa 	bl	80019f0 <MX_DMA_Init>
  MX_ADC1_Init();
 800109c:	f000 f8ec 	bl	8001278 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010a0:	f000 f9f4 	bl	800148c <MX_I2C1_Init>
  MX_SPI2_Init();
 80010a4:	f000 fa20 	bl	80014e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010a8:	f000 fa8a 	bl	80015c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ac:	f000 fb40 	bl	8001730 <MX_TIM2_Init>
  MX_UART5_Init();
 80010b0:	f000 fc74 	bl	800199c <MX_UART5_Init>
  MX_TIM3_Init();
 80010b4:	f000 fb94 	bl	80017e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010b8:	f000 fbe6 	bl	8001888 <MX_TIM4_Init>
  MX_SPI3_Init();
 80010bc:	f000 fa4a 	bl	8001554 <MX_SPI3_Init>
  MX_TIM6_Init();
 80010c0:	f000 fc36 	bl	8001930 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 80010c4:	482d      	ldr	r0, [pc, #180]	; (800117c <main+0xf4>)
 80010c6:	f003 fd29 	bl	8004b1c <HAL_TIM_Base_Start_IT>

  // LED
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <main+0xf8>)
 80010d2:	f002 fd3b 	bl	8003b4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	482a      	ldr	r0, [pc, #168]	; (8001184 <main+0xfc>)
 80010dc:	f002 fd36 	bl	8003b4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2120      	movs	r1, #32
 80010e4:	4827      	ldr	r0, [pc, #156]	; (8001184 <main+0xfc>)
 80010e6:	f002 fd31 	bl	8003b4c <HAL_GPIO_WritePin>

  // CS
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4824      	ldr	r0, [pc, #144]	; (8001184 <main+0xfc>)
 80010f2:	f002 fd2b 	bl	8003b4c <HAL_GPIO_WritePin>

  // PWM
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 14) != HAL_OK)	Error_Handler();
 80010f6:	220e      	movs	r2, #14
 80010f8:	4923      	ldr	r1, [pc, #140]	; (8001188 <main+0x100>)
 80010fa:	4824      	ldr	r0, [pc, #144]	; (800118c <main+0x104>)
 80010fc:	f001 fb3c 	bl	8002778 <HAL_ADC_Start_DMA>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <main+0x82>
 8001106:	f000 fe15 	bl	8001d34 <Error_Handler>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 800110a:	2100      	movs	r1, #0
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <main+0x108>)
 800110e:	f003 fdc5 	bl	8004c9c <HAL_TIM_PWM_Start>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <main+0x94>
 8001118:	f000 fe0c 	bl	8001d34 <Error_Handler>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 800111c:	2104      	movs	r1, #4
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <main+0x108>)
 8001120:	f003 fdbc 	bl	8004c9c <HAL_TIM_PWM_Start>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <main+0xa6>
 800112a:	f000 fe03 	bl	8001d34 <Error_Handler>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 800112e:	2108      	movs	r1, #8
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <main+0x108>)
 8001132:	f003 fdb3 	bl	8004c9c <HAL_TIM_PWM_Start>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <main+0xb8>
 800113c:	f000 fdfa 	bl	8001d34 <Error_Handler>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 8001140:	210c      	movs	r1, #12
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <main+0x108>)
 8001144:	f003 fdaa 	bl	8004c9c <HAL_TIM_PWM_Start>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <main+0xca>
 800114e:	f000 fdf1 	bl	8001d34 <Error_Handler>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
*/
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <main+0x108>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <main+0x108>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <main+0x108>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <main+0x108>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001178:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800117a:	e7fe      	b.n	800117a <main+0xf2>
 800117c:	200004c8 	.word	0x200004c8
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	20000558 	.word	0x20000558
 800118c:	200001fc 	.word	0x200001fc
 8001190:	200003a8 	.word	0x200003a8

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 ff1e 	bl	8005fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <SystemClock_Config+0xdc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a2b      	ldr	r2, [pc, #172]	; (8001270 <SystemClock_Config+0xdc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemClock_Config+0xdc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <SystemClock_Config+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <SystemClock_Config+0xe0>)
 80011de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <SystemClock_Config+0xe0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001204:	2306      	movs	r3, #6
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001208:	23b4      	movs	r3, #180	; 0xb4
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4618      	mov	r0, r3
 800121e:	f003 f907 	bl	8004430 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001228:	f000 fd84 	bl	8001d34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800122c:	f002 fdec 	bl	8003e08 <HAL_PWREx_EnableOverDrive>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001236:	f000 fd7d 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001246:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2105      	movs	r1, #5
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fe25 	bl	8003ea8 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001264:	f000 fd66 	bl	8001d34 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3750      	adds	r7, #80	; 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <MX_ADC1_Init+0x208>)
 800128c:	4a7d      	ldr	r2, [pc, #500]	; (8001484 <MX_ADC1_Init+0x20c>)
 800128e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001290:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <MX_ADC1_Init+0x208>)
 8001292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001296:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <MX_ADC1_Init+0x208>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <MX_ADC1_Init+0x208>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <MX_ADC1_Init+0x208>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012aa:	4b75      	ldr	r3, [pc, #468]	; (8001480 <MX_ADC1_Init+0x208>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <MX_ADC1_Init+0x208>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b8:	4b71      	ldr	r3, [pc, #452]	; (8001480 <MX_ADC1_Init+0x208>)
 80012ba:	4a73      	ldr	r2, [pc, #460]	; (8001488 <MX_ADC1_Init+0x210>)
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <MX_ADC1_Init+0x208>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 80012c4:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <MX_ADC1_Init+0x208>)
 80012c6:	220e      	movs	r2, #14
 80012c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <MX_ADC1_Init+0x208>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <MX_ADC1_Init+0x208>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	4869      	ldr	r0, [pc, #420]	; (8001480 <MX_ADC1_Init+0x208>)
 80012da:	f001 fa09 	bl	80026f0 <HAL_ADC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 fd26 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4861      	ldr	r0, [pc, #388]	; (8001480 <MX_ADC1_Init+0x208>)
 80012fa:	f001 fb61 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001304:	f000 fd16 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001308:	2301      	movs	r3, #1
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	485a      	ldr	r0, [pc, #360]	; (8001480 <MX_ADC1_Init+0x208>)
 8001316:	f001 fb53 	bl	80029c0 <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001320:	f000 fd08 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001324:	2302      	movs	r3, #2
 8001326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001328:	2303      	movs	r3, #3
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4853      	ldr	r0, [pc, #332]	; (8001480 <MX_ADC1_Init+0x208>)
 8001332:	f001 fb45 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800133c:	f000 fcfa 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001340:	2303      	movs	r3, #3
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484c      	ldr	r0, [pc, #304]	; (8001480 <MX_ADC1_Init+0x208>)
 800134e:	f001 fb37 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001358:	f000 fcec 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800135c:	2304      	movs	r3, #4
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001360:	2305      	movs	r3, #5
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4845      	ldr	r0, [pc, #276]	; (8001480 <MX_ADC1_Init+0x208>)
 800136a:	f001 fb29 	bl	80029c0 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001374:	f000 fcde 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001378:	2305      	movs	r3, #5
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800137c:	2306      	movs	r3, #6
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	483e      	ldr	r0, [pc, #248]	; (8001480 <MX_ADC1_Init+0x208>)
 8001386:	f001 fb1b 	bl	80029c0 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001390:	f000 fcd0 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001394:	2306      	movs	r3, #6
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4837      	ldr	r0, [pc, #220]	; (8001480 <MX_ADC1_Init+0x208>)
 80013a2:	f001 fb0d 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80013ac:	f000 fcc2 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4830      	ldr	r0, [pc, #192]	; (8001480 <MX_ADC1_Init+0x208>)
 80013be:	f001 faff 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80013c8:	f000 fcb4 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013cc:	230b      	movs	r3, #11
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80013d0:	2309      	movs	r3, #9
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_ADC1_Init+0x208>)
 80013da:	f001 faf1 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e4:	f000 fca6 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013e8:	230c      	movs	r3, #12
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80013ec:	230a      	movs	r3, #10
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <MX_ADC1_Init+0x208>)
 80013f6:	f001 fae3 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001400:	f000 fc98 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001404:	230d      	movs	r3, #13
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001408:	230b      	movs	r3, #11
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <MX_ADC1_Init+0x208>)
 8001412:	f001 fad5 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800141c:	f000 fc8a 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001420:	230e      	movs	r3, #14
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001424:	230c      	movs	r3, #12
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	; (8001480 <MX_ADC1_Init+0x208>)
 800142e:	f001 fac7 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001438:	f000 fc7c 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800143c:	230a      	movs	r3, #10
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001440:	230d      	movs	r3, #13
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001444:	2304      	movs	r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_ADC1_Init+0x208>)
 800144e:	f001 fab7 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 8001458:	f000 fc6c 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800145c:	230f      	movs	r3, #15
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001460:	230e      	movs	r3, #14
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_ADC1_Init+0x208>)
 800146a:	f001 faa9 	bl	80029c0 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8001474:	f000 fc5e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001fc 	.word	0x200001fc
 8001484:	40012000 	.word	0x40012000
 8001488:	0f000001 	.word	0x0f000001

0800148c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <MX_I2C1_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x50>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x58>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_I2C1_Init+0x50>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_I2C1_Init+0x50>)
 80014ca:	f002 fb59 	bl	8003b80 <HAL_I2C_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 fc2e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200002a4 	.word	0x200002a4
 80014e0:	40005400 	.word	0x40005400
 80014e4:	000186a0 	.word	0x000186a0

080014e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_SPI2_Init+0x64>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <MX_SPI2_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_SPI2_Init+0x64>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_SPI2_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_SPI2_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_SPI2_Init+0x64>)
 8001508:	2202      	movs	r2, #2
 800150a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_SPI2_Init+0x64>)
 800150e:	2201      	movs	r2, #1
 8001510:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_SPI2_Init+0x64>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SPI2_Init+0x64>)
 800151c:	2228      	movs	r2, #40	; 0x28
 800151e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_SPI2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SPI2_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_SPI2_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SPI2_Init+0x64>)
 8001534:	220a      	movs	r2, #10
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_SPI2_Init+0x64>)
 800153a:	f003 fa17 	bl	800496c <HAL_SPI_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001544:	f000 fbf6 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002f8 	.word	0x200002f8
 8001550:	40003800 	.word	0x40003800

08001554 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_SPI3_Init+0x64>)
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <MX_SPI3_Init+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001564:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_SPI3_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_SPI3_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001584:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_SPI3_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_SPI3_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_SPI3_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_SPI3_Init+0x64>)
 80015a0:	220a      	movs	r2, #10
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_SPI3_Init+0x64>)
 80015a6:	f003 f9e1 	bl	800496c <HAL_SPI_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80015b0:	f000 fbc0 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000350 	.word	0x20000350
 80015bc:	40003c00 	.word	0x40003c00

080015c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b092      	sub	sp, #72	; 0x48
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2220      	movs	r2, #32
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 fcfa 	bl	8005fe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <MX_TIM1_Init+0x168>)
 80015f2:	4a4e      	ldr	r2, [pc, #312]	; (800172c <MX_TIM1_Init+0x16c>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_TIM1_Init+0x168>)
 80015f8:	220b      	movs	r2, #11
 80015fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <MX_TIM1_Init+0x168>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <MX_TIM1_Init+0x168>)
 8001604:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <MX_TIM1_Init+0x168>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <MX_TIM1_Init+0x168>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b44      	ldr	r3, [pc, #272]	; (8001728 <MX_TIM1_Init+0x168>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <MX_TIM1_Init+0x168>)
 800161e:	f003 faed 	bl	8004bfc <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001628:	f000 fb84 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	4619      	mov	r1, r3
 800163a:	483b      	ldr	r0, [pc, #236]	; (8001728 <MX_TIM1_Init+0x168>)
 800163c:	f004 f904 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001646:	f000 fb75 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	; 0x60
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <MX_TIM1_Init+0x168>)
 8001670:	f003 fd8a 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800167a:	f000 fb5b 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	2204      	movs	r2, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4828      	ldr	r0, [pc, #160]	; (8001728 <MX_TIM1_Init+0x168>)
 8001688:	f003 fd7e 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001692:	f000 fb4f 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	2208      	movs	r2, #8
 800169c:	4619      	mov	r1, r3
 800169e:	4822      	ldr	r0, [pc, #136]	; (8001728 <MX_TIM1_Init+0x168>)
 80016a0:	f003 fd72 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80016aa:	f000 fb43 	bl	8001d34 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM1_Init+0x168>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM1_Init+0x168>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0208 	bic.w	r2, r2, #8
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	220c      	movs	r2, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <MX_TIM1_Init+0x168>)
 80016c8:	f003 fd5e 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80016d2:	f000 fb2f 	bl	8001d34 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_TIM1_Init+0x168>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_TIM1_Init+0x168>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM1_Init+0x168>)
 800170a:	f004 f919 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001714:	f000 fb0e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM1_Init+0x168>)
 800171a:	f000 fd8f 	bl	800223c <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3748      	adds	r7, #72	; 0x48
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200003a8 	.word	0x200003a8
 800172c:	40010000 	.word	0x40010000

08001730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_TIM2_Init+0xac>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM2_Init+0xac>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_TIM2_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM2_Init+0xac>)
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_TIM2_Init+0xac>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_TIM2_Init+0xac>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800177a:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM2_Init+0xac>)
 800177c:	f003 fa3e 	bl	8004bfc <HAL_TIM_PWM_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001786:	f000 fad5 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4619      	mov	r1, r3
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <MX_TIM2_Init+0xac>)
 800179a:	f004 f855 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017a4:	f000 fac6 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a8:	2360      	movs	r3, #96	; 0x60
 80017aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM2_Init+0xac>)
 80017c0:	f003 fce2 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017ca:	f000 fab3 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM2_Init+0xac>)
 80017d0:	f000 fd34 	bl	800223c <HAL_TIM_MspPostInit>

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200003f0 	.word	0x200003f0

080017e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2224      	movs	r2, #36	; 0x24
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 fbf8 	bl	8005fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_TIM3_Init+0xa0>)
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <MX_TIM3_Init+0xa4>)
 8001800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_TIM3_Init+0xa0>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM3_Init+0xa0>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM3_Init+0xa0>)
 8001810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM3_Init+0xa0>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM3_Init+0xa0>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001822:	2301      	movs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM3_Init+0xa0>)
 800184e:	f003 faed 	bl	8004e2c <HAL_TIM_Encoder_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001858:	f000 fa6c 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM3_Init+0xa0>)
 800186a:	f003 ffed 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001874:	f000 fa5e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000438 	.word	0x20000438
 8001884:	40000400 	.word	0x40000400

08001888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2224      	movs	r2, #36	; 0x24
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fba4 	bl	8005fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <MX_TIM4_Init+0xa4>)
 80018a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e2:	2301      	movs	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_TIM4_Init+0xa0>)
 80018f6:	f003 fa99 	bl	8004e2c <HAL_TIM_Encoder_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001900:	f000 fa18 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_TIM4_Init+0xa0>)
 8001912:	f003 ff99 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800191c:	f000 fa0a 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3730      	adds	r7, #48	; 0x30
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000480 	.word	0x20000480
 800192c:	40000800 	.word	0x40000800

08001930 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM6_Init+0x64>)
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <MX_TIM6_Init+0x68>)
 8001942:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_TIM6_Init+0x64>)
 8001946:	220b      	movs	r2, #11
 8001948:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_TIM6_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_TIM6_Init+0x64>)
 8001952:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001956:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_TIM6_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_TIM6_Init+0x64>)
 8001960:	f003 f88d 	bl	8004a7e <HAL_TIM_Base_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800196a:	f000 f9e3 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <MX_TIM6_Init+0x64>)
 800197c:	f003 ff64 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001986:	f000 f9d5 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004c8 	.word	0x200004c8
 8001998:	40001000 	.word	0x40001000

0800199c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_UART5_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_UART5_Init+0x4c>)
 80019d4:	f004 f81a 	bl	8005a0c <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f9a9 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000510 	.word	0x20000510
 80019ec:	40005000 	.word	0x40005000

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_DMA_Init+0x3c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <MX_DMA_Init+0x3c>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_DMA_Init+0x3c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2038      	movs	r0, #56	; 0x38
 8001a18:	f001 fb5d 	bl	80030d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a1c:	2038      	movs	r0, #56	; 0x38
 8001a1e:	f001 fb76 	bl	800310e <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a35      	ldr	r2, [pc, #212]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <MX_GPIO_Init+0x164>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ad8:	482f      	ldr	r0, [pc, #188]	; (8001b98 <MX_GPIO_Init+0x168>)
 8001ada:	f002 f837 	bl	8003b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ae4:	482d      	ldr	r0, [pc, #180]	; (8001b9c <MX_GPIO_Init+0x16c>)
 8001ae6:	f002 f831 	bl	8003b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af0:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <MX_GPIO_Init+0x170>)
 8001af2:	f002 f82b 	bl	8003b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2130      	movs	r1, #48	; 0x30
 8001afa:	4828      	ldr	r0, [pc, #160]	; (8001b9c <MX_GPIO_Init+0x16c>)
 8001afc:	f002 f826 	bl	8003b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sidesensor1_Pin Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin|Input1_Pin|SW_MSD_Pin;
 8001b00:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4820      	ldr	r0, [pc, #128]	; (8001b98 <MX_GPIO_Init+0x168>)
 8001b16:	f001 fe85 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 8001b1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_GPIO_Init+0x168>)
 8001b34:	f001 fe76 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sidesensor2_Pin Input2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin|Input2_Pin;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_GPIO_Init+0x16c>)
 8001b4c:	f001 fe6a 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 8001b50:	f243 0330 	movw	r3, #12336	; 0x3030
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_GPIO_Init+0x16c>)
 8001b6a:	f001 fe5b 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_GPIO_Init+0x170>)
 8001b88:	f001 fe4c 	bl	8003824 <HAL_GPIO_Init>

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

	cnt1++;
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bc8:	6013      	str	r3, [r2, #0]
		ledOut(led);
		led++;
		if (led > 0x7) led = 0;
	}*/

	if (getSWtact() == 0) {
 8001bca:	f000 f84b 	bl	8001c64 <getSWtact>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d114      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x46>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c
 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfc:	e02a      	b.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x9c>
	} else if (getSWtact() == RIGHT) {
 8001bfe:	f000 f831 	bl	8001c64 <getSWtact>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d110      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x72>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2264      	movs	r2, #100	; 0x64
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
 8001c28:	e014      	b.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x9c>
	} else if (getSWtact() == LEFT) {
 8001c2a:	f000 f81b 	bl	8001c64 <getSWtact>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10f      	bne.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x9c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2264      	movs	r2, #100	; 0x64
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2264      	movs	r2, #100	; 0x64
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 600);
	}


}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000554 	.word	0x20000554
 8001c60:	200003a8 	.word	0x200003a8

08001c64 <getSWtact>:
	if ( ad < 1052 && ad > 1036 ) ret = 0xf;

	return ret;
}

uint8_t getSWtact() {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
	uint16_t ad = analog[12];
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <getSWtact+0x94>)
 8001c6c:	8b1b      	ldrh	r3, [r3, #24]
 8001c6e:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) ret = 0x0;
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <getSWtact+0x1e>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71fb      	strb	r3, [r7, #7]
	if ( ad < 10 && ad >= 0 ) 		ret = UP;
 8001c82:	88bb      	ldrh	r3, [r7, #4]
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	d801      	bhi.n	8001c8c <getSWtact+0x28>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	71fb      	strb	r3, [r7, #7]
	if ( ad < 1240 && ad > 1206 ) 	ret = PUSH;
 8001c8c:	88bb      	ldrh	r3, [r7, #4]
 8001c8e:	f5b3 6f9b 	cmp.w	r3, #1240	; 0x4d8
 8001c92:	d206      	bcs.n	8001ca2 <getSWtact+0x3e>
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	f240 42b6 	movw	r2, #1206	; 0x4b6
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <getSWtact+0x3e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	71fb      	strb	r3, [r7, #7]
	if ( ad < 2191 && ad > 2150 ) 	ret = LEFT;
 8001ca2:	88bb      	ldrh	r3, [r7, #4]
 8001ca4:	f640 028e 	movw	r2, #2190	; 0x88e
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d806      	bhi.n	8001cba <getSWtact+0x56>
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	f640 0266 	movw	r2, #2150	; 0x866
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <getSWtact+0x56>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if ( ad < 2838 && ad > 2803 ) 	ret = RIGHT;
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	f640 3215 	movw	r2, #2837	; 0xb15
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d806      	bhi.n	8001cd2 <getSWtact+0x6e>
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	f640 22f3 	movw	r2, #2803	; 0xaf3
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <getSWtact+0x6e>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	71fb      	strb	r3, [r7, #7]
	if ( ad < 3341 && ad > 3316 ) 	ret = DOWN;
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	f640 520c 	movw	r2, #3340	; 0xd0c
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d806      	bhi.n	8001cea <getSWtact+0x86>
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	f640 42f4 	movw	r2, #3316	; 0xcf4
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <getSWtact+0x86>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	71fb      	strb	r3, [r7, #7]


	return ret;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000558 	.word	0x20000558

08001cfc <_write>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);

	return val;
}
int _write(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e009      	b.n	8001d22 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	60ba      	str	r2, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f98e 	bl	8001038 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf1      	blt.n	8001d0e <_write+0x12>
  }
  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d7e:	2007      	movs	r0, #7
 8001d80:	f001 f99e 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <HAL_ADC_MspInit+0x110>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d171      	bne.n	8001e96 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a3a      	ldr	r2, [pc, #232]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a2c      	ldr	r2, [pc, #176]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_ADC_MspInit+0x114>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SW_5xis_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e06:	233f      	movs	r3, #63	; 0x3f
 8001e08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <HAL_ADC_MspInit+0x118>)
 8001e1a:	f001 fd03 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e1e:	23ff      	movs	r3, #255	; 0xff
 8001e20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e22:	2303      	movs	r3, #3
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <HAL_ADC_MspInit+0x11c>)
 8001e32:	f001 fcf7 	bl	8003824 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e38:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_ADC_MspInit+0x124>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e7c:	f001 f962 	bl	8003144 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001e86:	f7ff ff55 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_ADC_MspInit+0x120>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	20000244 	.word	0x20000244
 8001eb4:	40026410 	.word	0x40026410

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_I2C_MspInit+0x84>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12c      	bne.n	8001f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efc:	2312      	movs	r3, #18
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	480c      	ldr	r0, [pc, #48]	; (8001f44 <HAL_I2C_MspInit+0x8c>)
 8001f14:	f001 fc86 	bl	8003824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020400 	.word	0x40020400

08001f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_SPI_MspInit+0x128>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12d      	bne.n	8001fc6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fa2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482e      	ldr	r0, [pc, #184]	; (8002078 <HAL_SPI_MspInit+0x130>)
 8001fc0:	f001 fc30 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fc4:	e04f      	b.n	8002066 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <HAL_SPI_MspInit+0x134>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d14a      	bne.n	8002066 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6313      	str	r3, [r2, #48]	; 0x30
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_SPI_MspInit+0x12c>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002034:	2307      	movs	r3, #7
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <HAL_SPI_MspInit+0x130>)
 8002040:	f001 fbf0 	bl	8003824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002044:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002056:	2306      	movs	r3, #6
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <HAL_SPI_MspInit+0x138>)
 8002062:	f001 fbdf 	bl	8003824 <HAL_GPIO_Init>
}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40003800 	.word	0x40003800
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40003c00 	.word	0x40003c00
 8002080:	40020800 	.word	0x40020800

08002084 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <HAL_TIM_PWM_MspInit+0x64>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020b2:	e012      	b.n	80020da <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d10d      	bne.n	80020da <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_TIM_PWM_MspInit+0x68>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12c      	bne.n	800216c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a30      	ldr	r2, [pc, #192]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800215a:	2302      	movs	r3, #2
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	481e      	ldr	r0, [pc, #120]	; (80021e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002166:	f001 fb5d 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800216a:	e030      	b.n	80021ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d12b      	bne.n	80021ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_TIM_Encoder_MspInit+0xec>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021be:	2302      	movs	r3, #2
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4807      	ldr	r0, [pc, #28]	; (80021e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80021ca:	f001 fb2b 	bl	8003824 <HAL_GPIO_Init>
}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40020400 	.word	0x40020400

080021ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_TIM_Base_MspInit+0x48>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d115      	bne.n	800222a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_TIM_Base_MspInit+0x4c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_TIM_Base_MspInit+0x4c>)
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_TIM_Base_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2036      	movs	r0, #54	; 0x36
 8002220:	f000 ff59 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002224:	2036      	movs	r0, #54	; 0x36
 8002226:	f000 ff72 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40001000 	.word	0x40001000
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <HAL_TIM_MspPostInit+0xb4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d11f      	bne.n	800229e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800227a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4818      	ldr	r0, [pc, #96]	; (80022f8 <HAL_TIM_MspPostInit+0xbc>)
 8002298:	f001 fac4 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800229c:	e023      	b.n	80022e6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d11e      	bne.n	80022e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_TIM_MspPostInit+0xb8>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <HAL_TIM_MspPostInit+0xbc>)
 80022e2:	f001 fa9f 	bl	8003824 <HAL_GPIO_Init>
}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_UART_MspInit+0xc0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d14a      	bne.n	80023b4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002384:	2308      	movs	r3, #8
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <HAL_UART_MspInit+0xc8>)
 8002390:	f001 fa48 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002394:	2304      	movs	r3, #4
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023a4:	2308      	movs	r3, #8
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <HAL_UART_MspInit+0xcc>)
 80023b0:	f001 fa38 	bl	8003824 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40005000 	.word	0x40005000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <MemManage_Handler+0x4>

080023de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002418:	f000 f94a 	bl	80026b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM6_DAC_IRQHandler+0x10>)
 8002426:	f002 fda7 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200004c8 	.word	0x200004c8

08002434 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMA2_Stream0_IRQHandler+0x10>)
 800243a:	f000 ff89 	bl	8003350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000244 	.word	0x20000244

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_kill>:

int _kill(int pid, int sig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002462:	f003 fd95 	bl	8005f90 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2216      	movs	r2, #22
 800246a:	601a      	str	r2, [r3, #0]
	return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_exit>:

void _exit (int status)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_kill>
	while (1) {}		/* Make sure we hang here */
 800248a:	e7fe      	b.n	800248a <_exit+0x12>

0800248c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e00a      	b.n	80024b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800249e:	f3af 8000 	nop.w
 80024a2:	4601      	mov	r1, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	60ba      	str	r2, [r7, #8]
 80024aa:	b2ca      	uxtb	r2, r1
 80024ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbf0      	blt.n	800249e <_read+0x12>
	}

return len;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ee:	605a      	str	r2, [r3, #4]
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_isatty>:

int _isatty(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	return 1;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
	return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f003 fd16 	bl	8005f90 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20020000 	.word	0x20020000
 8002590:	00000400 	.word	0x00000400
 8002594:	20000574 	.word	0x20000574
 8002598:	20000590 	.word	0x20000590

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d8:	4c0a      	ldr	r4, [pc, #40]	; (8002604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffd9 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f003 fcd7 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fd4b 	bl	8001088 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr r0, =_sdata
 80025f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025fc:	0800adc4 	.word	0x0800adc4
  ldr r2, =_sbss
 8002600:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002604:	2000058c 	.word	0x2000058c

08002608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <ADC_IRQHandler>
	...

0800260c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_Init+0x40>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_Init+0x40>)
 8002622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_Init+0x40>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002634:	2003      	movs	r0, #3
 8002636:	f000 fd43 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263a:	2000      	movs	r0, #0
 800263c:	f000 f808 	bl	8002650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002640:	f7ff fb7e 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023c00 	.word	0x40023c00

08002650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_InitTick+0x54>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x58>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002666:	fbb3 f3f1 	udiv	r3, r3, r1
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fd5b 	bl	800312a <HAL_SYSTICK_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e00e      	b.n	800269c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b0f      	cmp	r3, #15
 8002682:	d80a      	bhi.n	800269a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002684:	2200      	movs	r2, #0
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f000 fd23 	bl	80030d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002690:	4a06      	ldr	r2, [pc, #24]	; (80026ac <HAL_InitTick+0x5c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000008 	.word	0x20000008
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_IncTick+0x20>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x24>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_IncTick+0x24>)
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000578 	.word	0x20000578

080026d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return uwTick;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_GetTick+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000578 	.word	0x20000578

080026f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e033      	b.n	800276e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fb3e 	bl	8001d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002736:	f023 0302 	bic.w	r3, r3, #2
 800273a:	f043 0202 	orr.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa6e 	bl	8002c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
 800275e:	e001      	b.n	8002764 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Start_DMA+0x1e>
 8002792:	2302      	movs	r3, #2
 8002794:	e0e9      	b.n	800296a <HAL_ADC_Start_DMA+0x1f2>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d018      	beq.n	80027de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027bc:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_ADC_Start_DMA+0x1fc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6d      	ldr	r2, [pc, #436]	; (8002978 <HAL_ADC_Start_DMA+0x200>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9a      	lsrs	r2, r3, #18
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d107      	bne.n	80027fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	f040 80a1 	bne.w	8002950 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d106      	bne.n	800285c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f023 0206 	bic.w	r2, r3, #6
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
 800285a:	e002      	b.n	8002862 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286a:	4b44      	ldr	r3, [pc, #272]	; (800297c <HAL_ADC_Start_DMA+0x204>)
 800286c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_ADC_Start_DMA+0x208>)
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_ADC_Start_DMA+0x20c>)
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_ADC_Start_DMA+0x210>)
 8002884:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800288e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800289e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	334c      	adds	r3, #76	; 0x4c
 80028ba:	4619      	mov	r1, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f000 fcee 	bl	80032a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d12a      	bne.n	8002926 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	; (800298c <HAL_ADC_Start_DMA+0x214>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d015      	beq.n	8002906 <HAL_ADC_Start_DMA+0x18e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <HAL_ADC_Start_DMA+0x218>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_Start_DMA+0x178>
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_ADC_Start_DMA+0x204>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_ADC_Start_DMA+0x21c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d136      	bne.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_ADC_Start_DMA+0x204>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d130      	bne.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d129      	bne.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e020      	b.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_ADC_Start_DMA+0x214>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d11b      	bne.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d114      	bne.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	e00b      	b.n	8002968 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000
 8002978:	431bde83 	.word	0x431bde83
 800297c:	40012300 	.word	0x40012300
 8002980:	08002e1d 	.word	0x08002e1d
 8002984:	08002ed7 	.word	0x08002ed7
 8002988:	08002ef3 	.word	0x08002ef3
 800298c:	40012000 	.word	0x40012000
 8002990:	40012100 	.word	0x40012100
 8002994:	40012200 	.word	0x40012200

08002998 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1c>
 80029d8:	2302      	movs	r3, #2
 80029da:	e113      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x244>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d925      	bls.n	8002a38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68d9      	ldr	r1, [r3, #12]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	2207      	movs	r2, #7
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	400a      	ands	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68d9      	ldr	r1, [r3, #12]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4403      	add	r3, r0
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	e022      	b.n	8002a7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	400a      	ands	r2, r1
 8002a5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6919      	ldr	r1, [r3, #16]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4403      	add	r3, r0
 8002a74:	409a      	lsls	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d824      	bhi.n	8002ad0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b05      	subs	r3, #5
 8002a98:	221f      	movs	r2, #31
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b05      	subs	r3, #5
 8002ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ace:	e04c      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d824      	bhi.n	8002b22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b23      	subs	r3, #35	; 0x23
 8002aea:	221f      	movs	r2, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43da      	mvns	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	400a      	ands	r2, r1
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b23      	subs	r3, #35	; 0x23
 8002b14:	fa00 f203 	lsl.w	r2, r0, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b20:	e023      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b41      	subs	r3, #65	; 0x41
 8002b34:	221f      	movs	r2, #31
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b41      	subs	r3, #65	; 0x41
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_ADC_ConfigChannel+0x250>)
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <HAL_ADC_ConfigChannel+0x254>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10f      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1d8>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_ADC_ConfigChannel+0x254>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12b      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_ADC_ConfigChannel+0x258>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b11      	cmp	r3, #17
 8002bb2:	d122      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_ADC_ConfigChannel+0x258>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d111      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_ADC_ConfigChannel+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x260>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	0c9a      	lsrs	r2, r3, #18
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40012300 	.word	0x40012300
 8002c14:	40012000 	.word	0x40012000
 8002c18:	10000012 	.word	0x10000012
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <ADC_Init+0x1f0>)
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	021a      	lsls	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <ADC_Init+0x1f4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	e00f      	b.n	8002d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0202 	bic.w	r2, r2, #2
 8002d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7e1b      	ldrb	r3, [r3, #24]
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	035a      	lsls	r2, r3, #13
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	e007      	b.n	8002d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	051a      	lsls	r2, r3, #20
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dda:	025a      	lsls	r2, r3, #9
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	029a      	lsls	r2, r3, #10
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40012300 	.word	0x40012300
 8002e18:	0f000001 	.word	0x0f000001

08002e1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d13c      	bne.n	8002eb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d12b      	bne.n	8002ea8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d127      	bne.n	8002ea8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d119      	bne.n	8002ea8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0220 	bic.w	r2, r2, #32
 8002e82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fe7b 	bl	8001ba4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eae:	e00e      	b.n	8002ece <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fd75 	bl	80029ac <HAL_ADC_ErrorCallback>
}
 8002ec2:	e004      	b.n	8002ece <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fd57 	bl	8002998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff fd4a 	bl	80029ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <__NVIC_SetPriorityGrouping>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	; (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	; (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	; (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <SysTick_Config>:
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f7ff ff8e 	bl	8002fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff29 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e8:	f7ff ff3e 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff8e 	bl	8003014 <NVIC_EncodePriority>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff5d 	bl	8002fc0 <__NVIC_SetPriority>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff31 	bl	8002f84 <__NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ffa2 	bl	800307c <SysTick_Config>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fac2 	bl	80026d8 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e099      	b.n	8003294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003180:	e00f      	b.n	80031a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003182:	f7ff faa9 	bl	80026d8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d908      	bls.n	80031a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e078      	b.n	8003294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e8      	bne.n	8003182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4b38      	ldr	r3, [pc, #224]	; (800329c <HAL_DMA_Init+0x158>)
 80031bc:	4013      	ands	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	4313      	orrs	r3, r2
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b04      	cmp	r3, #4
 8003234:	d117      	bne.n	8003266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa6f 	bl	800372c <DMA_CheckFifoParam>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2240      	movs	r2, #64	; 0x40
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003262:	2301      	movs	r3, #1
 8003264:	e016      	b.n	8003294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa26 	bl	80036c0 <DMA_CalcBaseAndBitshift>
 8003274:	4603      	mov	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	223f      	movs	r2, #63	; 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	f010803f 	.word	0xf010803f

080032a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Start_IT+0x26>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e040      	b.n	8003348 <HAL_DMA_Start_IT+0xa8>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d12f      	bne.n	800333a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f9b8 	bl	8003664 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	223f      	movs	r2, #63	; 0x3f
 80032fa:	409a      	lsls	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0216 	orr.w	r2, r2, #22
 800330e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e005      	b.n	8003346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800335c:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <HAL_DMA_IRQHandler+0x248>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a8e      	ldr	r2, [pc, #568]	; (800359c <HAL_DMA_IRQHandler+0x24c>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2208      	movs	r2, #8
 800337c:	409a      	lsls	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01a      	beq.n	80033bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2208      	movs	r2, #8
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2201      	movs	r2, #1
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2201      	movs	r2, #1
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f043 0202 	orr.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2204      	movs	r2, #4
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2210      	movs	r2, #16
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d043      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03c      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2210      	movs	r2, #16
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d018      	beq.n	8003492 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d024      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
 800347e:	e01f      	b.n	80034c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
 8003490:	e016      	b.n	80034c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0208 	bic.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	2220      	movs	r2, #32
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 808f 	beq.w	80035f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8087 	beq.w	80035f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2220      	movs	r2, #32
 80034e8:	409a      	lsls	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d136      	bne.n	8003568 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0216 	bic.w	r2, r2, #22
 8003508:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003518:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <HAL_DMA_IRQHandler+0x1da>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0208 	bic.w	r2, r2, #8
 8003538:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	223f      	movs	r2, #63	; 0x3f
 8003540:	409a      	lsls	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	2b00      	cmp	r3, #0
 800355c:	d07e      	beq.n	800365c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
        }
        return;
 8003566:	e079      	b.n	800365c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01d      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10d      	bne.n	80035a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	2b00      	cmp	r3, #0
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e02c      	b.n	80035f0 <HAL_DMA_IRQHandler+0x2a0>
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000
 800359c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d023      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
 80035b0:	e01e      	b.n	80035f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0210 	bic.w	r2, r2, #16
 80035ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d032      	beq.n	800365e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d022      	beq.n	800364a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2205      	movs	r2, #5
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3301      	adds	r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	429a      	cmp	r2, r3
 8003626:	d307      	bcc.n	8003638 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f2      	bne.n	800361c <HAL_DMA_IRQHandler+0x2cc>
 8003636:	e000      	b.n	800363a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003638:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
 800365a:	e000      	b.n	800365e <HAL_DMA_IRQHandler+0x30e>
        return;
 800365c:	bf00      	nop
    }
  }
}
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003680:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d108      	bne.n	80036a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036a2:	e007      	b.n	80036b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	3b10      	subs	r3, #16
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <DMA_CalcBaseAndBitshift+0x64>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <DMA_CalcBaseAndBitshift+0x68>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d909      	bls.n	8003702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003700:	e007      	b.n	8003712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	aaaaaaab 	.word	0xaaaaaaab
 8003728:	0800a908 	.word	0x0800a908

0800372c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11f      	bne.n	8003786 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d856      	bhi.n	80037fa <DMA_CheckFifoParam+0xce>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <DMA_CheckFifoParam+0x28>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003765 	.word	0x08003765
 8003758:	08003777 	.word	0x08003777
 800375c:	08003765 	.word	0x08003765
 8003760:	080037fb 	.word	0x080037fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d046      	beq.n	80037fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003774:	e043      	b.n	80037fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800377e:	d140      	bne.n	8003802 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003784:	e03d      	b.n	8003802 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	d121      	bne.n	80037d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d837      	bhi.n	8003806 <DMA_CheckFifoParam+0xda>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <DMA_CheckFifoParam+0x70>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037b3 	.word	0x080037b3
 80037a4:	080037ad 	.word	0x080037ad
 80037a8:	080037c5 	.word	0x080037c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e030      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d025      	beq.n	800380a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e022      	b.n	800380a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037cc:	d11f      	bne.n	800380e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037d2:	e01c      	b.n	800380e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d903      	bls.n	80037e2 <DMA_CheckFifoParam+0xb6>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d003      	beq.n	80037e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e0:	e018      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      break;
 80037e6:	e015      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e00b      	b.n	8003812 <DMA_CheckFifoParam+0xe6>
      break;
 80037fa:	bf00      	nop
 80037fc:	e00a      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e008      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e006      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e004      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;   
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
    }
  } 
  
  return status; 
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop

08003824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	e165      	b.n	8003b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003840:	2201      	movs	r2, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	429a      	cmp	r2, r3
 800385a:	f040 8154 	bne.w	8003b06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d005      	beq.n	8003876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003872:	2b02      	cmp	r3, #2
 8003874:	d130      	bne.n	80038d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0201 	and.w	r2, r3, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d017      	beq.n	8003914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d123      	bne.n	8003968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	08da      	lsrs	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0203 	and.w	r2, r3, #3
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80ae 	beq.w	8003b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_GPIO_Init+0x300>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4a5c      	ldr	r2, [pc, #368]	; (8003b24 <HAL_GPIO_Init+0x300>)
 80039b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ba:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_GPIO_Init+0x300>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c6:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_GPIO_Init+0x304>)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	220f      	movs	r2, #15
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4f      	ldr	r2, [pc, #316]	; (8003b2c <HAL_GPIO_Init+0x308>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d025      	beq.n	8003a3e <HAL_GPIO_Init+0x21a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4e      	ldr	r2, [pc, #312]	; (8003b30 <HAL_GPIO_Init+0x30c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <HAL_GPIO_Init+0x216>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4d      	ldr	r2, [pc, #308]	; (8003b34 <HAL_GPIO_Init+0x310>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_Init+0x212>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <HAL_GPIO_Init+0x314>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_Init+0x20e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4b      	ldr	r2, [pc, #300]	; (8003b3c <HAL_GPIO_Init+0x318>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_Init+0x20a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <HAL_GPIO_Init+0x31c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x206>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a49      	ldr	r2, [pc, #292]	; (8003b44 <HAL_GPIO_Init+0x320>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_Init+0x202>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e00c      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00a      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e008      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e006      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a32:	2303      	movs	r3, #3
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x21c>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f002 0203 	and.w	r2, r2, #3
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a50:	4935      	ldr	r1, [pc, #212]	; (8003b28 <HAL_GPIO_Init+0x304>)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a82:	4a31      	ldr	r2, [pc, #196]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b00:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <HAL_GPIO_Init+0x324>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	f67f ae96 	bls.w	8003840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40013800 	.word	0x40013800
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40020400 	.word	0x40020400
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40021400 	.word	0x40021400
 8003b44:	40021800 	.word	0x40021800
 8003b48:	40013c00 	.word	0x40013c00

08003b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	807b      	strh	r3, [r7, #2]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b5c:	787b      	ldrb	r3, [r7, #1]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b68:	e003      	b.n	8003b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	041a      	lsls	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	619a      	str	r2, [r3, #24]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e12b      	b.n	8003dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe f986 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003be4:	f000 fa52 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8003be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a81      	ldr	r2, [pc, #516]	; (8003df4 <HAL_I2C_Init+0x274>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d807      	bhi.n	8003c04 <HAL_I2C_Init+0x84>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a80      	ldr	r2, [pc, #512]	; (8003df8 <HAL_I2C_Init+0x278>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	bf94      	ite	ls
 8003bfc:	2301      	movls	r3, #1
 8003bfe:	2300      	movhi	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e006      	b.n	8003c12 <HAL_I2C_Init+0x92>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a7d      	ldr	r2, [pc, #500]	; (8003dfc <HAL_I2C_Init+0x27c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0e7      	b.n	8003dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a78      	ldr	r2, [pc, #480]	; (8003e00 <HAL_I2C_Init+0x280>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0c9b      	lsrs	r3, r3, #18
 8003c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <HAL_I2C_Init+0x274>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d802      	bhi.n	8003c54 <HAL_I2C_Init+0xd4>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3301      	adds	r3, #1
 8003c52:	e009      	b.n	8003c68 <HAL_I2C_Init+0xe8>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <HAL_I2C_Init+0x284>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	099b      	lsrs	r3, r3, #6
 8003c66:	3301      	adds	r3, #1
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	495c      	ldr	r1, [pc, #368]	; (8003df4 <HAL_I2C_Init+0x274>)
 8003c84:	428b      	cmp	r3, r1
 8003c86:	d819      	bhi.n	8003cbc <HAL_I2C_Init+0x13c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e59      	subs	r1, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c9c:	400b      	ands	r3, r1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_I2C_Init+0x138>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e59      	subs	r1, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	e051      	b.n	8003d5c <HAL_I2C_Init+0x1dc>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	e04f      	b.n	8003d5c <HAL_I2C_Init+0x1dc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d111      	bne.n	8003ce8 <HAL_I2C_Init+0x168>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e012      	b.n	8003d0e <HAL_I2C_Init+0x18e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	0099      	lsls	r1, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Init+0x196>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e022      	b.n	8003d5c <HAL_I2C_Init+0x1dc>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10e      	bne.n	8003d3c <HAL_I2C_Init+0x1bc>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e58      	subs	r0, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	440b      	add	r3, r1
 8003d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3a:	e00f      	b.n	8003d5c <HAL_I2C_Init+0x1dc>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e58      	subs	r0, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	0099      	lsls	r1, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	6809      	ldr	r1, [r1, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6911      	ldr	r1, [r2, #16]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	4311      	orrs	r1, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	000186a0 	.word	0x000186a0
 8003df8:	001e847f 	.word	0x001e847f
 8003dfc:	003d08ff 	.word	0x003d08ff
 8003e00:	431bde83 	.word	0x431bde83
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x94>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e34:	f7fe fc50 	bl	80026d8 <HAL_GetTick>
 8003e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e3a:	e009      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e3c:	f7fe fc4c 	bl	80026d8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e4a:	d901      	bls.n	8003e50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e01f      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d1ee      	bne.n	8003e3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e64:	f7fe fc38 	bl	80026d8 <HAL_GetTick>
 8003e68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e6a:	e009      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e6c:	f7fe fc34 	bl	80026d8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7a:	d901      	bls.n	8003e80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e007      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d1ee      	bne.n	8003e6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	420e0040 	.word	0x420e0040
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	420e0044 	.word	0x420e0044

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fe fb9e 	bl	80026d8 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe fb9a 	bl	80026d8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f855 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fafe 	bl	8002650 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	0800a8f0 	.word	0x0800a8f0
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004

08004074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_RCC_GetHCLKFreq+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004090:	f7ff fff0 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0a9b      	lsrs	r3, r3, #10
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	0800a900 	.word	0x0800a900

080040b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040b8:	f7ff ffdc 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0b5b      	lsrs	r3, r3, #13
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4903      	ldr	r1, [pc, #12]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	0800a900 	.word	0x0800a900

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b0a6      	sub	sp, #152	; 0x98
 80040e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004102:	4bc8      	ldr	r3, [pc, #800]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b0c      	cmp	r3, #12
 800410c:	f200 817e 	bhi.w	800440c <HAL_RCC_GetSysClockFreq+0x330>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800440d 	.word	0x0800440d
 8004120:	0800440d 	.word	0x0800440d
 8004124:	0800440d 	.word	0x0800440d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800440d 	.word	0x0800440d
 8004130:	0800440d 	.word	0x0800440d
 8004134:	0800440d 	.word	0x0800440d
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800440d 	.word	0x0800440d
 8004140:	0800440d 	.word	0x0800440d
 8004144:	0800440d 	.word	0x0800440d
 8004148:	080042c7 	.word	0x080042c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4bb6      	ldr	r3, [pc, #728]	; (8004428 <HAL_RCC_GetSysClockFreq+0x34c>)
 800414e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004152:	e15f      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004154:	4bb5      	ldr	r3, [pc, #724]	; (800442c <HAL_RCC_GetSysClockFreq+0x350>)
 8004156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800415a:	e15b      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800415c:	4bb1      	ldr	r3, [pc, #708]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004168:	4bae      	ldr	r3, [pc, #696]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d031      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004174:	4bab      	ldr	r3, [pc, #684]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	2200      	movs	r2, #0
 800417c:	66bb      	str	r3, [r7, #104]	; 0x68
 800417e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	663b      	str	r3, [r7, #96]	; 0x60
 8004188:	2300      	movs	r3, #0
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
 800418c:	4ba7      	ldr	r3, [pc, #668]	; (800442c <HAL_RCC_GetSysClockFreq+0x350>)
 800418e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004192:	462a      	mov	r2, r5
 8004194:	fb03 f202 	mul.w	r2, r3, r2
 8004198:	2300      	movs	r3, #0
 800419a:	4621      	mov	r1, r4
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	4aa2      	ldr	r2, [pc, #648]	; (800442c <HAL_RCC_GetSysClockFreq+0x350>)
 80041a4:	4621      	mov	r1, r4
 80041a6:	fba1 1202 	umull	r1, r2, r1, r2
 80041aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041ac:	460a      	mov	r2, r1
 80041ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80041b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041b2:	4413      	add	r3, r2
 80041b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ba:	2200      	movs	r2, #0
 80041bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80041be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80041c8:	f7fc fd7e 	bl	8000cc8 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041d6:	e064      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d8:	4b92      	ldr	r3, [pc, #584]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	2200      	movs	r2, #0
 80041e0:	653b      	str	r3, [r7, #80]	; 0x50
 80041e2:	657a      	str	r2, [r7, #84]	; 0x54
 80041e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ec:	2300      	movs	r3, #0
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80041f4:	4622      	mov	r2, r4
 80041f6:	462b      	mov	r3, r5
 80041f8:	f04f 0000 	mov.w	r0, #0
 80041fc:	f04f 0100 	mov.w	r1, #0
 8004200:	0159      	lsls	r1, r3, #5
 8004202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004206:	0150      	lsls	r0, r2, #5
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4621      	mov	r1, r4
 800420e:	1a51      	subs	r1, r2, r1
 8004210:	6139      	str	r1, [r7, #16]
 8004212:	4629      	mov	r1, r5
 8004214:	eb63 0301 	sbc.w	r3, r3, r1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004226:	4659      	mov	r1, fp
 8004228:	018b      	lsls	r3, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004230:	4651      	mov	r1, sl
 8004232:	018a      	lsls	r2, r1, #6
 8004234:	4651      	mov	r1, sl
 8004236:	ebb2 0801 	subs.w	r8, r2, r1
 800423a:	4659      	mov	r1, fp
 800423c:	eb63 0901 	sbc.w	r9, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004250:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004254:	4690      	mov	r8, r2
 8004256:	4699      	mov	r9, r3
 8004258:	4623      	mov	r3, r4
 800425a:	eb18 0303 	adds.w	r3, r8, r3
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	462b      	mov	r3, r5
 8004262:	eb49 0303 	adc.w	r3, r9, r3
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004274:	4629      	mov	r1, r5
 8004276:	028b      	lsls	r3, r1, #10
 8004278:	4621      	mov	r1, r4
 800427a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427e:	4621      	mov	r1, r4
 8004280:	028a      	lsls	r2, r1, #10
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800428a:	2200      	movs	r2, #0
 800428c:	643b      	str	r3, [r7, #64]	; 0x40
 800428e:	647a      	str	r2, [r7, #68]	; 0x44
 8004290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004294:	f7fc fd18 	bl	8000cc8 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a2:	4b60      	ldr	r3, [pc, #384]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80042b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042c4:	e0a6      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c6:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02a      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042de:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	2200      	movs	r2, #0
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042f0:	2100      	movs	r1, #0
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <HAL_RCC_GetSysClockFreq+0x350>)
 80042f4:	fb03 f201 	mul.w	r2, r3, r1
 80042f8:	2300      	movs	r3, #0
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	4413      	add	r3, r2
 8004300:	4a4a      	ldr	r2, [pc, #296]	; (800442c <HAL_RCC_GetSysClockFreq+0x350>)
 8004302:	fba0 1202 	umull	r1, r2, r0, r2
 8004306:	677a      	str	r2, [r7, #116]	; 0x74
 8004308:	460a      	mov	r2, r1
 800430a:	673a      	str	r2, [r7, #112]	; 0x70
 800430c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800430e:	4413      	add	r3, r2
 8004310:	677b      	str	r3, [r7, #116]	; 0x74
 8004312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004316:	2200      	movs	r2, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
 800431a:	637a      	str	r2, [r7, #52]	; 0x34
 800431c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004320:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004324:	f7fc fcd0 	bl	8000cc8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004332:	e05b      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
 800433e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0159      	lsls	r1, r3, #5
 800435e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004362:	0150      	lsls	r0, r2, #5
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4641      	mov	r1, r8
 800436a:	ebb2 0a01 	subs.w	sl, r2, r1
 800436e:	4649      	mov	r1, r9
 8004370:	eb63 0b01 	sbc.w	fp, r3, r1
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004388:	ebb2 040a 	subs.w	r4, r2, sl
 800438c:	eb63 050b 	sbc.w	r5, r3, fp
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	00eb      	lsls	r3, r5, #3
 800439a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439e:	00e2      	lsls	r2, r4, #3
 80043a0:	4614      	mov	r4, r2
 80043a2:	461d      	mov	r5, r3
 80043a4:	4643      	mov	r3, r8
 80043a6:	18e3      	adds	r3, r4, r3
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	464b      	mov	r3, r9
 80043ac:	eb45 0303 	adc.w	r3, r5, r3
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043be:	4629      	mov	r1, r5
 80043c0:	028b      	lsls	r3, r1, #10
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c8:	4621      	mov	r1, r4
 80043ca:	028a      	lsls	r2, r1, #10
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d4:	2200      	movs	r2, #0
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	61fa      	str	r2, [r7, #28]
 80043da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043de:	f7fc fc73 	bl	8000cc8 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4613      	mov	r3, r2
 80043e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCC_GetSysClockFreq+0x348>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0f1b      	lsrs	r3, r3, #28
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80043fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800440a:	e003      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_GetSysClockFreq+0x34c>)
 800440e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004418:	4618      	mov	r0, r3
 800441a:	3798      	adds	r7, #152	; 0x98
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	00f42400 	.word	0x00f42400
 800442c:	00b71b00 	.word	0x00b71b00

08004430 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e28d      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8083 	beq.w	8004556 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004450:	4b94      	ldr	r3, [pc, #592]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b04      	cmp	r3, #4
 800445a:	d019      	beq.n	8004490 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800445c:	4b91      	ldr	r3, [pc, #580]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004464:	2b08      	cmp	r3, #8
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004468:	4b8e      	ldr	r3, [pc, #568]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004474:	d00c      	beq.n	8004490 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4b8b      	ldr	r3, [pc, #556]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d112      	bne.n	80044a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004482:	4b88      	ldr	r3, [pc, #544]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d10b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	4b84      	ldr	r3, [pc, #528]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05b      	beq.n	8004554 <HAL_RCC_OscConfig+0x124>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d157      	bne.n	8004554 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e25a      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x90>
 80044b2:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7b      	ldr	r2, [pc, #492]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xcc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0xb4>
 80044ca:	4b76      	ldr	r3, [pc, #472]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a75      	ldr	r2, [pc, #468]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a72      	ldr	r2, [pc, #456]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xcc>
 80044e4:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a6e      	ldr	r2, [pc, #440]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b6c      	ldr	r3, [pc, #432]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6b      	ldr	r2, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fe f8e8 	bl	80026d8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe f8e4 	bl	80026d8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e21f      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xdc>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe f8d4 	bl	80026d8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe f8d0 	bl	80026d8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e20b      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x104>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d06f      	beq.n	8004642 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004562:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d017      	beq.n	800459e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800456e:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d105      	bne.n	8004586 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800457a:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d11c      	bne.n	80045cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004592:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x186>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1d3      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4937      	ldr	r1, [pc, #220]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	e03a      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <HAL_RCC_OscConfig+0x278>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fe f87d 	bl	80026d8 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e2:	f7fe f879 	bl	80026d8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e1b4      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004600:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4925      	ldr	r1, [pc, #148]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCC_OscConfig+0x278>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe f85c 	bl	80026d8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004624:	f7fe f858 	bl	80026d8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e193      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004656:	4b15      	ldr	r3, [pc, #84]	; (80046ac <HAL_RCC_OscConfig+0x27c>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe f83c 	bl	80026d8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004664:	f7fe f838 	bl	80026d8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e173      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x234>
 8004682:	e01b      	b.n	80046bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <HAL_RCC_OscConfig+0x27c>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fe f825 	bl	80026d8 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	e00e      	b.n	80046b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004692:	f7fe f821 	bl	80026d8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d907      	bls.n	80046b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e15c      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	42470000 	.word	0x42470000
 80046ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b0:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80046b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ea      	bne.n	8004692 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8097 	beq.w	80047f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b83      	ldr	r3, [pc, #524]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a7e      	ldr	r2, [pc, #504]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b7c      	ldr	r3, [pc, #496]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b79      	ldr	r3, [pc, #484]	; (80048e0 <HAL_RCC_OscConfig+0x4b0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCC_OscConfig+0x4b0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	; (80048e0 <HAL_RCC_OscConfig+0x4b0>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fd ffe1 	bl	80026d8 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fd ffdd 	bl	80026d8 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e118      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCC_OscConfig+0x4b0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x31e>
 8004740:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	; 0x70
 800474c:	e01c      	b.n	8004788 <HAL_RCC_OscConfig+0x358>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x340>
 8004756:	4b61      	ldr	r3, [pc, #388]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	4a60      	ldr	r2, [pc, #384]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	6713      	str	r3, [r2, #112]	; 0x70
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0x358>
 8004770:	4b5a      	ldr	r3, [pc, #360]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	4a59      	ldr	r2, [pc, #356]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	; 0x70
 800477c:	4b57      	ldr	r3, [pc, #348]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4a56      	ldr	r2, [pc, #344]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004782:	f023 0304 	bic.w	r3, r3, #4
 8004786:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd ffa2 	bl	80026d8 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fd ff9e 	bl	80026d8 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0d7      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ee      	beq.n	8004798 <HAL_RCC_OscConfig+0x368>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd ff8c 	bl	80026d8 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd ff88 	bl	80026d8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0c1      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047da:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ee      	bne.n	80047c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80ad 	beq.w	800495c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004802:	4b36      	ldr	r3, [pc, #216]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b08      	cmp	r3, #8
 800480c:	d060      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d145      	bne.n	80048a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCC_OscConfig+0x4b4>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd ff5c 	bl	80026d8 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004824:	f7fd ff58 	bl	80026d8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e093      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	491b      	ldr	r1, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x4b4>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fd ff2d 	bl	80026d8 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fd ff29 	bl	80026d8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e064      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x452>
 80048a0:	e05c      	b.n	800495c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_RCC_OscConfig+0x4b4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd ff16 	bl	80026d8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd ff12 	bl	80026d8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04d      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x4ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x480>
 80048ce:	e045      	b.n	800495c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e040      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e8:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_RCC_OscConfig+0x538>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d030      	beq.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d129      	bne.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d122      	bne.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800491e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	4293      	cmp	r3, r2
 8004922:	d119      	bne.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d10f      	bne.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800

0800496c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e07b      	b.n	8004a76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498e:	d009      	beq.n	80049a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
 8004996:	e005      	b.n	80049a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fd fac2 	bl	8001f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	ea42 0103 	orr.w	r1, r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0104 	and.w	r1, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0210 	and.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e041      	b.n	8004b14 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fd fba1 	bl	80021ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f000 fc4d 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d001      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e04e      	b.n	8004bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d022      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d01d      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d018      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIM_Base_Start_IT+0xd0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d009      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d111      	bne.n	8004bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d010      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	e007      	b.n	8004bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40010400 	.word	0x40010400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40001800 	.word	0x40001800

08004bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e041      	b.n	8004c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd fa2e 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f000 fb8e 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_TIM_PWM_Start+0x24>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e022      	b.n	8004d06 <HAL_TIM_PWM_Start+0x6a>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d109      	bne.n	8004cda <HAL_TIM_PWM_Start+0x3e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	bf14      	ite	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	2300      	moveq	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	e015      	b.n	8004d06 <HAL_TIM_PWM_Start+0x6a>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x58>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e008      	b.n	8004d06 <HAL_TIM_PWM_Start+0x6a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07c      	b.n	8004e08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x82>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1c:	e013      	b.n	8004d46 <HAL_TIM_PWM_Start+0xaa>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x92>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d2c:	e00b      	b.n	8004d46 <HAL_TIM_PWM_Start+0xaa>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	e003      	b.n	8004d46 <HAL_TIM_PWM_Start+0xaa>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fd54 	bl	80057fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <HAL_TIM_PWM_Start+0x174>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_TIM_PWM_Start+0xcc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <HAL_TIM_PWM_Start+0x178>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_PWM_Start+0xd0>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_PWM_Start+0xd2>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <HAL_TIM_PWM_Start+0x174>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d022      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d01d      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_TIM_PWM_Start+0x17c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_TIM_PWM_Start+0x180>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_TIM_PWM_Start+0x184>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_PWM_Start+0x178>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <HAL_TIM_PWM_Start+0x188>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x136>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <HAL_TIM_PWM_Start+0x18c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d010      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e007      	b.n	8004e06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40010400 	.word	0x40010400
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40001800 	.word	0x40001800

08004e2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e097      	b.n	8004f70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd f94b 	bl	80020f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0307 	bic.w	r3, r3, #7
 8004e74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 fa6b 	bl	800535c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ecc:	f023 030c 	bic.w	r3, r3, #12
 8004ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	011a      	lsls	r2, r3, #4
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	031b      	lsls	r3, r3, #12
 8004efc:	4313      	orrs	r3, r2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9b0 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9a2 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f9b3 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f986 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f978 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f989 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f95c 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f94e 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f95f 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f932 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f924 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f935 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fd5e 	bl	8001bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fc68 	bl	80059f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8fa 	bl	8005348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fc32 	bl	80059e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0ae      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	f200 809f 	bhi.w	80052f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051f1 	.word	0x080051f1
 80051c0:	080052f5 	.word	0x080052f5
 80051c4:	080052f5 	.word	0x080052f5
 80051c8:	080052f5 	.word	0x080052f5
 80051cc:	08005231 	.word	0x08005231
 80051d0:	080052f5 	.word	0x080052f5
 80051d4:	080052f5 	.word	0x080052f5
 80051d8:	080052f5 	.word	0x080052f5
 80051dc:	08005273 	.word	0x08005273
 80051e0:	080052f5 	.word	0x080052f5
 80051e4:	080052f5 	.word	0x080052f5
 80051e8:	080052f5 	.word	0x080052f5
 80051ec:	080052b3 	.word	0x080052b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f950 	bl	800549c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
      break;
 800522e:	e064      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f9a0 	bl	800557c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
      break;
 8005270:	e043      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f9f5 	bl	8005668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0208 	orr.w	r2, r2, #8
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0204 	bic.w	r2, r2, #4
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	61da      	str	r2, [r3, #28]
      break;
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fa49 	bl	8005750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]
      break;
 80052f2:	e002      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
      break;
 80052f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a40      	ldr	r2, [pc, #256]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d00f      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3d      	ldr	r2, [pc, #244]	; (8005474 <TIM_Base_SetConfig+0x118>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3b      	ldr	r2, [pc, #236]	; (800547c <TIM_Base_SetConfig+0x120>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3a      	ldr	r2, [pc, #232]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <TIM_Base_SetConfig+0x114>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d027      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0x118>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d023      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01f      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <TIM_Base_SetConfig+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <TIM_Base_SetConfig+0x124>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d017      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <TIM_Base_SetConfig+0x128>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <TIM_Base_SetConfig+0x12c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00f      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a26      	ldr	r2, [pc, #152]	; (800548c <TIM_Base_SetConfig+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a25      	ldr	r2, [pc, #148]	; (8005490 <TIM_Base_SetConfig+0x134>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a24      	ldr	r2, [pc, #144]	; (8005494 <TIM_Base_SetConfig+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <TIM_Base_SetConfig+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40010400 	.word	0x40010400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800
 8005490:	40001800 	.word	0x40001800
 8005494:	40001c00 	.word	0x40001c00
 8005498:	40002000 	.word	0x40002000

0800549c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0201 	bic.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0302 	bic.w	r3, r3, #2
 80054e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a20      	ldr	r2, [pc, #128]	; (8005574 <TIM_OC1_SetConfig+0xd8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x64>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <TIM_OC1_SetConfig+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10c      	bne.n	800551a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0308 	bic.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC1_SetConfig+0xd8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC1_SetConfig+0x8e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <TIM_OC1_SetConfig+0xdc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40010000 	.word	0x40010000
 8005578:	40010400 	.word	0x40010400

0800557c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0210 	bic.w	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0320 	bic.w	r3, r3, #32
 80055c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a22      	ldr	r2, [pc, #136]	; (8005660 <TIM_OC2_SetConfig+0xe4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC2_SetConfig+0x68>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <TIM_OC2_SetConfig+0xe8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10d      	bne.n	8005600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a17      	ldr	r2, [pc, #92]	; (8005660 <TIM_OC2_SetConfig+0xe4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC2_SetConfig+0x94>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a16      	ldr	r2, [pc, #88]	; (8005664 <TIM_OC2_SetConfig+0xe8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d113      	bne.n	8005638 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40010400 	.word	0x40010400

08005668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a21      	ldr	r2, [pc, #132]	; (8005748 <TIM_OC3_SetConfig+0xe0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_OC3_SetConfig+0x66>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a20      	ldr	r2, [pc, #128]	; (800574c <TIM_OC3_SetConfig+0xe4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d10d      	bne.n	80056ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <TIM_OC3_SetConfig+0xe0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_OC3_SetConfig+0x92>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <TIM_OC3_SetConfig+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d113      	bne.n	8005722 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <TIM_OC4_SetConfig+0xa4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC4_SetConfig+0x68>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <TIM_OC4_SetConfig+0xa8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d109      	bne.n	80057cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400

080057fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2201      	movs	r2, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e05a      	b.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a21      	ldr	r2, [pc, #132]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d01d      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1a      	ldr	r2, [pc, #104]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10c      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40001800 	.word	0x40001800

08005940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005958:	2302      	movs	r3, #2
 800595a:	e03d      	b.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e03f      	b.n	8005a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc fc62 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f829 	bl	8005aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aac:	b0c0      	sub	sp, #256	; 0x100
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	68d9      	ldr	r1, [r3, #12]
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	ea40 0301 	orr.w	r3, r0, r1
 8005ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b00:	f021 010c 	bic.w	r1, r1, #12
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	6999      	ldr	r1, [r3, #24]
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	ea40 0301 	orr.w	r3, r0, r1
 8005b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b8f      	ldr	r3, [pc, #572]	; (8005d74 <UART_SetConfig+0x2cc>)
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d005      	beq.n	8005b48 <UART_SetConfig+0xa0>
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <UART_SetConfig+0x2d0>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b48:	f7fe fab4 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b50:	e003      	b.n	8005b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b52:	f7fe fa9b 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8005b56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b64:	f040 810c 	bne.w	8005d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	1891      	adds	r1, r2, r2
 8005b80:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b82:	415b      	adcs	r3, r3
 8005b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	eb12 0801 	adds.w	r8, r2, r1
 8005b90:	4629      	mov	r1, r5
 8005b92:	eb43 0901 	adc.w	r9, r3, r1
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005baa:	4690      	mov	r8, r2
 8005bac:	4699      	mov	r9, r3
 8005bae:	4623      	mov	r3, r4
 8005bb0:	eb18 0303 	adds.w	r3, r8, r3
 8005bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb8:	462b      	mov	r3, r5
 8005bba:	eb49 0303 	adc.w	r3, r9, r3
 8005bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	18db      	adds	r3, r3, r3
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
 8005bdc:	4613      	mov	r3, r2
 8005bde:	eb42 0303 	adc.w	r3, r2, r3
 8005be2:	657b      	str	r3, [r7, #84]	; 0x54
 8005be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bec:	f7fb f86c 	bl	8000cc8 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4b61      	ldr	r3, [pc, #388]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	011c      	lsls	r4, r3, #4
 8005bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	1891      	adds	r1, r2, r2
 8005c16:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c18:	415b      	adcs	r3, r3
 8005c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c20:	4641      	mov	r1, r8
 8005c22:	eb12 0a01 	adds.w	sl, r2, r1
 8005c26:	4649      	mov	r1, r9
 8005c28:	eb43 0b01 	adc.w	fp, r3, r1
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c40:	4692      	mov	sl, r2
 8005c42:	469b      	mov	fp, r3
 8005c44:	4643      	mov	r3, r8
 8005c46:	eb1a 0303 	adds.w	r3, sl, r3
 8005c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	eb4b 0303 	adc.w	r3, fp, r3
 8005c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	18db      	adds	r3, r3, r3
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
 8005c72:	4613      	mov	r3, r2
 8005c74:	eb42 0303 	adc.w	r3, r2, r3
 8005c78:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c82:	f7fb f821 	bl	8000cc8 <__aeabi_uldivmod>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	2264      	movs	r2, #100	; 0x64
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	1acb      	subs	r3, r1, r3
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ca2:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cb0:	441c      	add	r4, r3
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	1891      	adds	r1, r2, r2
 8005cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ccc:	415b      	adcs	r3, r3
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	1851      	adds	r1, r2, r1
 8005cd8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cda:	4649      	mov	r1, r9
 8005cdc:	414b      	adcs	r3, r1
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cec:	4659      	mov	r1, fp
 8005cee:	00cb      	lsls	r3, r1, #3
 8005cf0:	4651      	mov	r1, sl
 8005cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	00ca      	lsls	r2, r1, #3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	4642      	mov	r2, r8
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d08:	464b      	mov	r3, r9
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	eb42 0303 	adc.w	r3, r2, r3
 8005d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d28:	460b      	mov	r3, r1
 8005d2a:	18db      	adds	r3, r3, r3
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2e:	4613      	mov	r3, r2
 8005d30:	eb42 0303 	adc.w	r3, r2, r3
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d3e:	f7fa ffc3 	bl	8000cc8 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005d48:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	2164      	movs	r1, #100	; 0x64
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	3332      	adds	r3, #50	; 0x32
 8005d5a:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <UART_SetConfig+0x2d4>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f003 0207 	and.w	r2, r3, #7
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4422      	add	r2, r4
 8005d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d70:	e105      	b.n	8005f7e <UART_SetConfig+0x4d6>
 8005d72:	bf00      	nop
 8005d74:	40011000 	.word	0x40011000
 8005d78:	40011400 	.word	0x40011400
 8005d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d92:	4642      	mov	r2, r8
 8005d94:	464b      	mov	r3, r9
 8005d96:	1891      	adds	r1, r2, r2
 8005d98:	6239      	str	r1, [r7, #32]
 8005d9a:	415b      	adcs	r3, r3
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005da2:	4641      	mov	r1, r8
 8005da4:	1854      	adds	r4, r2, r1
 8005da6:	4649      	mov	r1, r9
 8005da8:	eb43 0501 	adc.w	r5, r3, r1
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	00eb      	lsls	r3, r5, #3
 8005db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dba:	00e2      	lsls	r2, r4, #3
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	18e3      	adds	r3, r4, r3
 8005dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dc8:	464b      	mov	r3, r9
 8005dca:	eb45 0303 	adc.w	r3, r5, r3
 8005dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dee:	4629      	mov	r1, r5
 8005df0:	008b      	lsls	r3, r1, #2
 8005df2:	4621      	mov	r1, r4
 8005df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df8:	4621      	mov	r1, r4
 8005dfa:	008a      	lsls	r2, r1, #2
 8005dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e00:	f7fa ff62 	bl	8000cc8 <__aeabi_uldivmod>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4b60      	ldr	r3, [pc, #384]	; (8005f8c <UART_SetConfig+0x4e4>)
 8005e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	011c      	lsls	r4, r3, #4
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	61b9      	str	r1, [r7, #24]
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e34:	4641      	mov	r1, r8
 8005e36:	1851      	adds	r1, r2, r1
 8005e38:	6139      	str	r1, [r7, #16]
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	414b      	adcs	r3, r1
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e4c:	4659      	mov	r1, fp
 8005e4e:	00cb      	lsls	r3, r1, #3
 8005e50:	4651      	mov	r1, sl
 8005e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e56:	4651      	mov	r1, sl
 8005e58:	00ca      	lsls	r2, r1, #3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4642      	mov	r2, r8
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e68:	464b      	mov	r3, r9
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	eb42 0303 	adc.w	r3, r2, r3
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	008b      	lsls	r3, r1, #2
 8005e90:	4641      	mov	r1, r8
 8005e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e96:	4641      	mov	r1, r8
 8005e98:	008a      	lsls	r2, r1, #2
 8005e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e9e:	f7fa ff13 	bl	8000cc8 <__aeabi_uldivmod>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4b39      	ldr	r3, [pc, #228]	; (8005f8c <UART_SetConfig+0x4e4>)
 8005ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	2164      	movs	r1, #100	; 0x64
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	3332      	adds	r3, #50	; 0x32
 8005eba:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <UART_SetConfig+0x4e4>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ec6:	441c      	add	r4, r3
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ecc:	2200      	movs	r2, #0
 8005ece:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ed2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	464b      	mov	r3, r9
 8005eda:	1891      	adds	r1, r2, r2
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	415b      	adcs	r3, r3
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	1851      	adds	r1, r2, r1
 8005eea:	6039      	str	r1, [r7, #0]
 8005eec:	4649      	mov	r1, r9
 8005eee:	414b      	adcs	r3, r1
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005efe:	4659      	mov	r1, fp
 8005f00:	00cb      	lsls	r3, r1, #3
 8005f02:	4651      	mov	r1, sl
 8005f04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f08:	4651      	mov	r1, sl
 8005f0a:	00ca      	lsls	r2, r1, #3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	4642      	mov	r2, r8
 8005f14:	189b      	adds	r3, r3, r2
 8005f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f2c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	008b      	lsls	r3, r1, #2
 8005f3e:	4641      	mov	r1, r8
 8005f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f44:	4641      	mov	r1, r8
 8005f46:	008a      	lsls	r2, r1, #2
 8005f48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f4c:	f7fa febc 	bl	8000cc8 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <UART_SetConfig+0x4e4>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <UART_SetConfig+0x4e4>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4422      	add	r2, r4
 8005f7c:	609a      	str	r2, [r3, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	51eb851f 	.word	0x51eb851f

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	; (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	; (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	; (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	; (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f004 fc92 	bl	800a8d8 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	0800adbc 	.word	0x0800adbc
 8005fd8:	0800adbc 	.word	0x0800adbc
 8005fdc:	0800adbc 	.word	0x0800adbc
 8005fe0:	0800adc0 	.word	0x0800adc0

08005fe4 <memset>:
 8005fe4:	4402      	add	r2, r0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d100      	bne.n	8005fee <memset+0xa>
 8005fec:	4770      	bx	lr
 8005fee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff2:	e7f9      	b.n	8005fe8 <memset+0x4>

08005ff4 <__cvt>:
 8005ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	ec55 4b10 	vmov	r4, r5, d0
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	460e      	mov	r6, r1
 8006000:	4619      	mov	r1, r3
 8006002:	462b      	mov	r3, r5
 8006004:	bfbb      	ittet	lt
 8006006:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800600a:	461d      	movlt	r5, r3
 800600c:	2300      	movge	r3, #0
 800600e:	232d      	movlt	r3, #45	; 0x2d
 8006010:	700b      	strb	r3, [r1, #0]
 8006012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006018:	4691      	mov	r9, r2
 800601a:	f023 0820 	bic.w	r8, r3, #32
 800601e:	bfbc      	itt	lt
 8006020:	4622      	movlt	r2, r4
 8006022:	4614      	movlt	r4, r2
 8006024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006028:	d005      	beq.n	8006036 <__cvt+0x42>
 800602a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800602e:	d100      	bne.n	8006032 <__cvt+0x3e>
 8006030:	3601      	adds	r6, #1
 8006032:	2102      	movs	r1, #2
 8006034:	e000      	b.n	8006038 <__cvt+0x44>
 8006036:	2103      	movs	r1, #3
 8006038:	ab03      	add	r3, sp, #12
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	ab02      	add	r3, sp, #8
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	ec45 4b10 	vmov	d0, r4, r5
 8006044:	4653      	mov	r3, sl
 8006046:	4632      	mov	r2, r6
 8006048:	f001 fdae 	bl	8007ba8 <_dtoa_r>
 800604c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006050:	4607      	mov	r7, r0
 8006052:	d102      	bne.n	800605a <__cvt+0x66>
 8006054:	f019 0f01 	tst.w	r9, #1
 8006058:	d022      	beq.n	80060a0 <__cvt+0xac>
 800605a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800605e:	eb07 0906 	add.w	r9, r7, r6
 8006062:	d110      	bne.n	8006086 <__cvt+0x92>
 8006064:	783b      	ldrb	r3, [r7, #0]
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d10a      	bne.n	8006080 <__cvt+0x8c>
 800606a:	2200      	movs	r2, #0
 800606c:	2300      	movs	r3, #0
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fd49 	bl	8000b08 <__aeabi_dcmpeq>
 8006076:	b918      	cbnz	r0, 8006080 <__cvt+0x8c>
 8006078:	f1c6 0601 	rsb	r6, r6, #1
 800607c:	f8ca 6000 	str.w	r6, [sl]
 8006080:	f8da 3000 	ldr.w	r3, [sl]
 8006084:	4499      	add	r9, r3
 8006086:	2200      	movs	r2, #0
 8006088:	2300      	movs	r3, #0
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	f7fa fd3b 	bl	8000b08 <__aeabi_dcmpeq>
 8006092:	b108      	cbz	r0, 8006098 <__cvt+0xa4>
 8006094:	f8cd 900c 	str.w	r9, [sp, #12]
 8006098:	2230      	movs	r2, #48	; 0x30
 800609a:	9b03      	ldr	r3, [sp, #12]
 800609c:	454b      	cmp	r3, r9
 800609e:	d307      	bcc.n	80060b0 <__cvt+0xbc>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a4:	1bdb      	subs	r3, r3, r7
 80060a6:	4638      	mov	r0, r7
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	b004      	add	sp, #16
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	1c59      	adds	r1, r3, #1
 80060b2:	9103      	str	r1, [sp, #12]
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e7f0      	b.n	800609a <__cvt+0xa6>

080060b8 <__exponent>:
 80060b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ba:	4603      	mov	r3, r0
 80060bc:	2900      	cmp	r1, #0
 80060be:	bfb8      	it	lt
 80060c0:	4249      	neglt	r1, r1
 80060c2:	f803 2b02 	strb.w	r2, [r3], #2
 80060c6:	bfb4      	ite	lt
 80060c8:	222d      	movlt	r2, #45	; 0x2d
 80060ca:	222b      	movge	r2, #43	; 0x2b
 80060cc:	2909      	cmp	r1, #9
 80060ce:	7042      	strb	r2, [r0, #1]
 80060d0:	dd2a      	ble.n	8006128 <__exponent+0x70>
 80060d2:	f10d 0407 	add.w	r4, sp, #7
 80060d6:	46a4      	mov	ip, r4
 80060d8:	270a      	movs	r7, #10
 80060da:	46a6      	mov	lr, r4
 80060dc:	460a      	mov	r2, r1
 80060de:	fb91 f6f7 	sdiv	r6, r1, r7
 80060e2:	fb07 1516 	mls	r5, r7, r6, r1
 80060e6:	3530      	adds	r5, #48	; 0x30
 80060e8:	2a63      	cmp	r2, #99	; 0x63
 80060ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80060ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80060f2:	4631      	mov	r1, r6
 80060f4:	dcf1      	bgt.n	80060da <__exponent+0x22>
 80060f6:	3130      	adds	r1, #48	; 0x30
 80060f8:	f1ae 0502 	sub.w	r5, lr, #2
 80060fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006100:	1c44      	adds	r4, r0, #1
 8006102:	4629      	mov	r1, r5
 8006104:	4561      	cmp	r1, ip
 8006106:	d30a      	bcc.n	800611e <__exponent+0x66>
 8006108:	f10d 0209 	add.w	r2, sp, #9
 800610c:	eba2 020e 	sub.w	r2, r2, lr
 8006110:	4565      	cmp	r5, ip
 8006112:	bf88      	it	hi
 8006114:	2200      	movhi	r2, #0
 8006116:	4413      	add	r3, r2
 8006118:	1a18      	subs	r0, r3, r0
 800611a:	b003      	add	sp, #12
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006122:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006126:	e7ed      	b.n	8006104 <__exponent+0x4c>
 8006128:	2330      	movs	r3, #48	; 0x30
 800612a:	3130      	adds	r1, #48	; 0x30
 800612c:	7083      	strb	r3, [r0, #2]
 800612e:	70c1      	strb	r1, [r0, #3]
 8006130:	1d03      	adds	r3, r0, #4
 8006132:	e7f1      	b.n	8006118 <__exponent+0x60>

08006134 <_printf_float>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	ed2d 8b02 	vpush	{d8}
 800613c:	b08d      	sub	sp, #52	; 0x34
 800613e:	460c      	mov	r4, r1
 8006140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006144:	4616      	mov	r6, r2
 8006146:	461f      	mov	r7, r3
 8006148:	4605      	mov	r5, r0
 800614a:	f002 fe8b 	bl	8008e64 <_localeconv_r>
 800614e:	f8d0 a000 	ldr.w	sl, [r0]
 8006152:	4650      	mov	r0, sl
 8006154:	f7fa f85c 	bl	8000210 <strlen>
 8006158:	2300      	movs	r3, #0
 800615a:	930a      	str	r3, [sp, #40]	; 0x28
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	f8d8 3000 	ldr.w	r3, [r8]
 8006164:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006168:	3307      	adds	r3, #7
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	f103 0208 	add.w	r2, r3, #8
 8006172:	f8c8 2000 	str.w	r2, [r8]
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800617e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	f8cd 8018 	str.w	r8, [sp, #24]
 800618c:	ee08 0a10 	vmov	s16, r0
 8006190:	4b9f      	ldr	r3, [pc, #636]	; (8006410 <_printf_float+0x2dc>)
 8006192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	f7fa fce7 	bl	8000b6c <__aeabi_dcmpun>
 800619e:	bb88      	cbnz	r0, 8006204 <_printf_float+0xd0>
 80061a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a4:	4b9a      	ldr	r3, [pc, #616]	; (8006410 <_printf_float+0x2dc>)
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	f7fa fcc1 	bl	8000b30 <__aeabi_dcmple>
 80061ae:	bb48      	cbnz	r0, 8006204 <_printf_float+0xd0>
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f7fa fcb0 	bl	8000b1c <__aeabi_dcmplt>
 80061bc:	b110      	cbz	r0, 80061c4 <_printf_float+0x90>
 80061be:	232d      	movs	r3, #45	; 0x2d
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c4:	4b93      	ldr	r3, [pc, #588]	; (8006414 <_printf_float+0x2e0>)
 80061c6:	4894      	ldr	r0, [pc, #592]	; (8006418 <_printf_float+0x2e4>)
 80061c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061cc:	bf94      	ite	ls
 80061ce:	4698      	movls	r8, r3
 80061d0:	4680      	movhi	r8, r0
 80061d2:	2303      	movs	r3, #3
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	9b05      	ldr	r3, [sp, #20]
 80061d8:	f023 0204 	bic.w	r2, r3, #4
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	f04f 0900 	mov.w	r9, #0
 80061e2:	9700      	str	r7, [sp, #0]
 80061e4:	4633      	mov	r3, r6
 80061e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f9d8 	bl	80065a0 <_printf_common>
 80061f0:	3001      	adds	r0, #1
 80061f2:	f040 8090 	bne.w	8006316 <_printf_float+0x1e2>
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	b00d      	add	sp, #52	; 0x34
 80061fc:	ecbd 8b02 	vpop	{d8}
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa fcae 	bl	8000b6c <__aeabi_dcmpun>
 8006210:	b140      	cbz	r0, 8006224 <_printf_float+0xf0>
 8006212:	464b      	mov	r3, r9
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfbc      	itt	lt
 8006218:	232d      	movlt	r3, #45	; 0x2d
 800621a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800621e:	487f      	ldr	r0, [pc, #508]	; (800641c <_printf_float+0x2e8>)
 8006220:	4b7f      	ldr	r3, [pc, #508]	; (8006420 <_printf_float+0x2ec>)
 8006222:	e7d1      	b.n	80061c8 <_printf_float+0x94>
 8006224:	6863      	ldr	r3, [r4, #4]
 8006226:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800622a:	9206      	str	r2, [sp, #24]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	d13f      	bne.n	80062b0 <_printf_float+0x17c>
 8006230:	2306      	movs	r3, #6
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	9b05      	ldr	r3, [sp, #20]
 8006236:	6861      	ldr	r1, [r4, #4]
 8006238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800623c:	2300      	movs	r3, #0
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	ab0a      	add	r3, sp, #40	; 0x28
 8006242:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006246:	ab09      	add	r3, sp, #36	; 0x24
 8006248:	ec49 8b10 	vmov	d0, r8, r9
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006254:	4628      	mov	r0, r5
 8006256:	f7ff fecd 	bl	8005ff4 <__cvt>
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800625e:	2b47      	cmp	r3, #71	; 0x47
 8006260:	4680      	mov	r8, r0
 8006262:	d108      	bne.n	8006276 <_printf_float+0x142>
 8006264:	1cc8      	adds	r0, r1, #3
 8006266:	db02      	blt.n	800626e <_printf_float+0x13a>
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	4299      	cmp	r1, r3
 800626c:	dd41      	ble.n	80062f2 <_printf_float+0x1be>
 800626e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006272:	fa5f fb8b 	uxtb.w	fp, fp
 8006276:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800627a:	d820      	bhi.n	80062be <_printf_float+0x18a>
 800627c:	3901      	subs	r1, #1
 800627e:	465a      	mov	r2, fp
 8006280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006284:	9109      	str	r1, [sp, #36]	; 0x24
 8006286:	f7ff ff17 	bl	80060b8 <__exponent>
 800628a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800628c:	1813      	adds	r3, r2, r0
 800628e:	2a01      	cmp	r2, #1
 8006290:	4681      	mov	r9, r0
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	dc02      	bgt.n	800629c <_printf_float+0x168>
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	07d2      	lsls	r2, r2, #31
 800629a:	d501      	bpl.n	80062a0 <_printf_float+0x16c>
 800629c:	3301      	adds	r3, #1
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d09c      	beq.n	80061e2 <_printf_float+0xae>
 80062a8:	232d      	movs	r3, #45	; 0x2d
 80062aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ae:	e798      	b.n	80061e2 <_printf_float+0xae>
 80062b0:	9a06      	ldr	r2, [sp, #24]
 80062b2:	2a47      	cmp	r2, #71	; 0x47
 80062b4:	d1be      	bne.n	8006234 <_printf_float+0x100>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1bc      	bne.n	8006234 <_printf_float+0x100>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7b9      	b.n	8006232 <_printf_float+0xfe>
 80062be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062c2:	d118      	bne.n	80062f6 <_printf_float+0x1c2>
 80062c4:	2900      	cmp	r1, #0
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	dd0b      	ble.n	80062e2 <_printf_float+0x1ae>
 80062ca:	6121      	str	r1, [r4, #16]
 80062cc:	b913      	cbnz	r3, 80062d4 <_printf_float+0x1a0>
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	07d0      	lsls	r0, r2, #31
 80062d2:	d502      	bpl.n	80062da <_printf_float+0x1a6>
 80062d4:	3301      	adds	r3, #1
 80062d6:	440b      	add	r3, r1
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	65a1      	str	r1, [r4, #88]	; 0x58
 80062dc:	f04f 0900 	mov.w	r9, #0
 80062e0:	e7de      	b.n	80062a0 <_printf_float+0x16c>
 80062e2:	b913      	cbnz	r3, 80062ea <_printf_float+0x1b6>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	07d2      	lsls	r2, r2, #31
 80062e8:	d501      	bpl.n	80062ee <_printf_float+0x1ba>
 80062ea:	3302      	adds	r3, #2
 80062ec:	e7f4      	b.n	80062d8 <_printf_float+0x1a4>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7f2      	b.n	80062d8 <_printf_float+0x1a4>
 80062f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f8:	4299      	cmp	r1, r3
 80062fa:	db05      	blt.n	8006308 <_printf_float+0x1d4>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	6121      	str	r1, [r4, #16]
 8006300:	07d8      	lsls	r0, r3, #31
 8006302:	d5ea      	bpl.n	80062da <_printf_float+0x1a6>
 8006304:	1c4b      	adds	r3, r1, #1
 8006306:	e7e7      	b.n	80062d8 <_printf_float+0x1a4>
 8006308:	2900      	cmp	r1, #0
 800630a:	bfd4      	ite	le
 800630c:	f1c1 0202 	rsble	r2, r1, #2
 8006310:	2201      	movgt	r2, #1
 8006312:	4413      	add	r3, r2
 8006314:	e7e0      	b.n	80062d8 <_printf_float+0x1a4>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	055a      	lsls	r2, r3, #21
 800631a:	d407      	bmi.n	800632c <_printf_float+0x1f8>
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	4642      	mov	r2, r8
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	d12c      	bne.n	8006384 <_printf_float+0x250>
 800632a:	e764      	b.n	80061f6 <_printf_float+0xc2>
 800632c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006330:	f240 80e0 	bls.w	80064f4 <_printf_float+0x3c0>
 8006334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006338:	2200      	movs	r2, #0
 800633a:	2300      	movs	r3, #0
 800633c:	f7fa fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 8006340:	2800      	cmp	r0, #0
 8006342:	d034      	beq.n	80063ae <_printf_float+0x27a>
 8006344:	4a37      	ldr	r2, [pc, #220]	; (8006424 <_printf_float+0x2f0>)
 8006346:	2301      	movs	r3, #1
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f af51 	beq.w	80061f6 <_printf_float+0xc2>
 8006354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006358:	429a      	cmp	r2, r3
 800635a:	db02      	blt.n	8006362 <_printf_float+0x22e>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07d8      	lsls	r0, r3, #31
 8006360:	d510      	bpl.n	8006384 <_printf_float+0x250>
 8006362:	ee18 3a10 	vmov	r3, s16
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af41 	beq.w	80061f6 <_printf_float+0xc2>
 8006374:	f04f 0800 	mov.w	r8, #0
 8006378:	f104 091a 	add.w	r9, r4, #26
 800637c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637e:	3b01      	subs	r3, #1
 8006380:	4543      	cmp	r3, r8
 8006382:	dc09      	bgt.n	8006398 <_printf_float+0x264>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	079b      	lsls	r3, r3, #30
 8006388:	f100 8105 	bmi.w	8006596 <_printf_float+0x462>
 800638c:	68e0      	ldr	r0, [r4, #12]
 800638e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006390:	4298      	cmp	r0, r3
 8006392:	bfb8      	it	lt
 8006394:	4618      	movlt	r0, r3
 8006396:	e730      	b.n	80061fa <_printf_float+0xc6>
 8006398:	2301      	movs	r3, #1
 800639a:	464a      	mov	r2, r9
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f af27 	beq.w	80061f6 <_printf_float+0xc2>
 80063a8:	f108 0801 	add.w	r8, r8, #1
 80063ac:	e7e6      	b.n	800637c <_printf_float+0x248>
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dc39      	bgt.n	8006428 <_printf_float+0x2f4>
 80063b4:	4a1b      	ldr	r2, [pc, #108]	; (8006424 <_printf_float+0x2f0>)
 80063b6:	2301      	movs	r3, #1
 80063b8:	4631      	mov	r1, r6
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f af19 	beq.w	80061f6 <_printf_float+0xc2>
 80063c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d102      	bne.n	80063d2 <_printf_float+0x29e>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07d9      	lsls	r1, r3, #31
 80063d0:	d5d8      	bpl.n	8006384 <_printf_float+0x250>
 80063d2:	ee18 3a10 	vmov	r3, s16
 80063d6:	4652      	mov	r2, sl
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af09 	beq.w	80061f6 <_printf_float+0xc2>
 80063e4:	f04f 0900 	mov.w	r9, #0
 80063e8:	f104 0a1a 	add.w	sl, r4, #26
 80063ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ee:	425b      	negs	r3, r3
 80063f0:	454b      	cmp	r3, r9
 80063f2:	dc01      	bgt.n	80063f8 <_printf_float+0x2c4>
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	e792      	b.n	800631e <_printf_float+0x1ea>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4652      	mov	r2, sl
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f aef7 	beq.w	80061f6 <_printf_float+0xc2>
 8006408:	f109 0901 	add.w	r9, r9, #1
 800640c:	e7ee      	b.n	80063ec <_printf_float+0x2b8>
 800640e:	bf00      	nop
 8006410:	7fefffff 	.word	0x7fefffff
 8006414:	0800a914 	.word	0x0800a914
 8006418:	0800a918 	.word	0x0800a918
 800641c:	0800a920 	.word	0x0800a920
 8006420:	0800a91c 	.word	0x0800a91c
 8006424:	0800a924 	.word	0x0800a924
 8006428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800642c:	429a      	cmp	r2, r3
 800642e:	bfa8      	it	ge
 8006430:	461a      	movge	r2, r3
 8006432:	2a00      	cmp	r2, #0
 8006434:	4691      	mov	r9, r2
 8006436:	dc37      	bgt.n	80064a8 <_printf_float+0x374>
 8006438:	f04f 0b00 	mov.w	fp, #0
 800643c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006440:	f104 021a 	add.w	r2, r4, #26
 8006444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006446:	9305      	str	r3, [sp, #20]
 8006448:	eba3 0309 	sub.w	r3, r3, r9
 800644c:	455b      	cmp	r3, fp
 800644e:	dc33      	bgt.n	80064b8 <_printf_float+0x384>
 8006450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006454:	429a      	cmp	r2, r3
 8006456:	db3b      	blt.n	80064d0 <_printf_float+0x39c>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	07da      	lsls	r2, r3, #31
 800645c:	d438      	bmi.n	80064d0 <_printf_float+0x39c>
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	9a05      	ldr	r2, [sp, #20]
 8006462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006464:	1a9a      	subs	r2, r3, r2
 8006466:	eba3 0901 	sub.w	r9, r3, r1
 800646a:	4591      	cmp	r9, r2
 800646c:	bfa8      	it	ge
 800646e:	4691      	movge	r9, r2
 8006470:	f1b9 0f00 	cmp.w	r9, #0
 8006474:	dc35      	bgt.n	80064e2 <_printf_float+0x3ae>
 8006476:	f04f 0800 	mov.w	r8, #0
 800647a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800647e:	f104 0a1a 	add.w	sl, r4, #26
 8006482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	eba3 0309 	sub.w	r3, r3, r9
 800648c:	4543      	cmp	r3, r8
 800648e:	f77f af79 	ble.w	8006384 <_printf_float+0x250>
 8006492:	2301      	movs	r3, #1
 8006494:	4652      	mov	r2, sl
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f aeaa 	beq.w	80061f6 <_printf_float+0xc2>
 80064a2:	f108 0801 	add.w	r8, r8, #1
 80064a6:	e7ec      	b.n	8006482 <_printf_float+0x34e>
 80064a8:	4613      	mov	r3, r2
 80064aa:	4631      	mov	r1, r6
 80064ac:	4642      	mov	r2, r8
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	d1c0      	bne.n	8006438 <_printf_float+0x304>
 80064b6:	e69e      	b.n	80061f6 <_printf_float+0xc2>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	9205      	str	r2, [sp, #20]
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f ae97 	beq.w	80061f6 <_printf_float+0xc2>
 80064c8:	9a05      	ldr	r2, [sp, #20]
 80064ca:	f10b 0b01 	add.w	fp, fp, #1
 80064ce:	e7b9      	b.n	8006444 <_printf_float+0x310>
 80064d0:	ee18 3a10 	vmov	r3, s16
 80064d4:	4652      	mov	r2, sl
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	d1be      	bne.n	800645e <_printf_float+0x32a>
 80064e0:	e689      	b.n	80061f6 <_printf_float+0xc2>
 80064e2:	9a05      	ldr	r2, [sp, #20]
 80064e4:	464b      	mov	r3, r9
 80064e6:	4442      	add	r2, r8
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	d1c1      	bne.n	8006476 <_printf_float+0x342>
 80064f2:	e680      	b.n	80061f6 <_printf_float+0xc2>
 80064f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064f6:	2a01      	cmp	r2, #1
 80064f8:	dc01      	bgt.n	80064fe <_printf_float+0x3ca>
 80064fa:	07db      	lsls	r3, r3, #31
 80064fc:	d538      	bpl.n	8006570 <_printf_float+0x43c>
 80064fe:	2301      	movs	r3, #1
 8006500:	4642      	mov	r2, r8
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae74 	beq.w	80061f6 <_printf_float+0xc2>
 800650e:	ee18 3a10 	vmov	r3, s16
 8006512:	4652      	mov	r2, sl
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f ae6b 	beq.w	80061f6 <_printf_float+0xc2>
 8006520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	f7fa faee 	bl	8000b08 <__aeabi_dcmpeq>
 800652c:	b9d8      	cbnz	r0, 8006566 <_printf_float+0x432>
 800652e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006530:	f108 0201 	add.w	r2, r8, #1
 8006534:	3b01      	subs	r3, #1
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	d10e      	bne.n	800655e <_printf_float+0x42a>
 8006540:	e659      	b.n	80061f6 <_printf_float+0xc2>
 8006542:	2301      	movs	r3, #1
 8006544:	4652      	mov	r2, sl
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	f43f ae52 	beq.w	80061f6 <_printf_float+0xc2>
 8006552:	f108 0801 	add.w	r8, r8, #1
 8006556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006558:	3b01      	subs	r3, #1
 800655a:	4543      	cmp	r3, r8
 800655c:	dcf1      	bgt.n	8006542 <_printf_float+0x40e>
 800655e:	464b      	mov	r3, r9
 8006560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006564:	e6dc      	b.n	8006320 <_printf_float+0x1ec>
 8006566:	f04f 0800 	mov.w	r8, #0
 800656a:	f104 0a1a 	add.w	sl, r4, #26
 800656e:	e7f2      	b.n	8006556 <_printf_float+0x422>
 8006570:	2301      	movs	r3, #1
 8006572:	4642      	mov	r2, r8
 8006574:	e7df      	b.n	8006536 <_printf_float+0x402>
 8006576:	2301      	movs	r3, #1
 8006578:	464a      	mov	r2, r9
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	f43f ae38 	beq.w	80061f6 <_printf_float+0xc2>
 8006586:	f108 0801 	add.w	r8, r8, #1
 800658a:	68e3      	ldr	r3, [r4, #12]
 800658c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800658e:	1a5b      	subs	r3, r3, r1
 8006590:	4543      	cmp	r3, r8
 8006592:	dcf0      	bgt.n	8006576 <_printf_float+0x442>
 8006594:	e6fa      	b.n	800638c <_printf_float+0x258>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	f104 0919 	add.w	r9, r4, #25
 800659e:	e7f4      	b.n	800658a <_printf_float+0x456>

080065a0 <_printf_common>:
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	4616      	mov	r6, r2
 80065a6:	4699      	mov	r9, r3
 80065a8:	688a      	ldr	r2, [r1, #8]
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfb8      	it	lt
 80065b4:	4613      	movlt	r3, r2
 80065b6:	6033      	str	r3, [r6, #0]
 80065b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065bc:	4607      	mov	r7, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b10a      	cbz	r2, 80065c6 <_printf_common+0x26>
 80065c2:	3301      	adds	r3, #1
 80065c4:	6033      	str	r3, [r6, #0]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	0699      	lsls	r1, r3, #26
 80065ca:	bf42      	ittt	mi
 80065cc:	6833      	ldrmi	r3, [r6, #0]
 80065ce:	3302      	addmi	r3, #2
 80065d0:	6033      	strmi	r3, [r6, #0]
 80065d2:	6825      	ldr	r5, [r4, #0]
 80065d4:	f015 0506 	ands.w	r5, r5, #6
 80065d8:	d106      	bne.n	80065e8 <_printf_common+0x48>
 80065da:	f104 0a19 	add.w	sl, r4, #25
 80065de:	68e3      	ldr	r3, [r4, #12]
 80065e0:	6832      	ldr	r2, [r6, #0]
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	42ab      	cmp	r3, r5
 80065e6:	dc26      	bgt.n	8006636 <_printf_common+0x96>
 80065e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065ec:	1e13      	subs	r3, r2, #0
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	bf18      	it	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	0692      	lsls	r2, r2, #26
 80065f6:	d42b      	bmi.n	8006650 <_printf_common+0xb0>
 80065f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065fc:	4649      	mov	r1, r9
 80065fe:	4638      	mov	r0, r7
 8006600:	47c0      	blx	r8
 8006602:	3001      	adds	r0, #1
 8006604:	d01e      	beq.n	8006644 <_printf_common+0xa4>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	68e5      	ldr	r5, [r4, #12]
 800660a:	6832      	ldr	r2, [r6, #0]
 800660c:	f003 0306 	and.w	r3, r3, #6
 8006610:	2b04      	cmp	r3, #4
 8006612:	bf08      	it	eq
 8006614:	1aad      	subeq	r5, r5, r2
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	bf0c      	ite	eq
 800661c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006620:	2500      	movne	r5, #0
 8006622:	4293      	cmp	r3, r2
 8006624:	bfc4      	itt	gt
 8006626:	1a9b      	subgt	r3, r3, r2
 8006628:	18ed      	addgt	r5, r5, r3
 800662a:	2600      	movs	r6, #0
 800662c:	341a      	adds	r4, #26
 800662e:	42b5      	cmp	r5, r6
 8006630:	d11a      	bne.n	8006668 <_printf_common+0xc8>
 8006632:	2000      	movs	r0, #0
 8006634:	e008      	b.n	8006648 <_printf_common+0xa8>
 8006636:	2301      	movs	r3, #1
 8006638:	4652      	mov	r2, sl
 800663a:	4649      	mov	r1, r9
 800663c:	4638      	mov	r0, r7
 800663e:	47c0      	blx	r8
 8006640:	3001      	adds	r0, #1
 8006642:	d103      	bne.n	800664c <_printf_common+0xac>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664c:	3501      	adds	r5, #1
 800664e:	e7c6      	b.n	80065de <_printf_common+0x3e>
 8006650:	18e1      	adds	r1, r4, r3
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	2030      	movs	r0, #48	; 0x30
 8006656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800665a:	4422      	add	r2, r4
 800665c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006664:	3302      	adds	r3, #2
 8006666:	e7c7      	b.n	80065f8 <_printf_common+0x58>
 8006668:	2301      	movs	r3, #1
 800666a:	4622      	mov	r2, r4
 800666c:	4649      	mov	r1, r9
 800666e:	4638      	mov	r0, r7
 8006670:	47c0      	blx	r8
 8006672:	3001      	adds	r0, #1
 8006674:	d0e6      	beq.n	8006644 <_printf_common+0xa4>
 8006676:	3601      	adds	r6, #1
 8006678:	e7d9      	b.n	800662e <_printf_common+0x8e>
	...

0800667c <_printf_i>:
 800667c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	7e0f      	ldrb	r7, [r1, #24]
 8006682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006684:	2f78      	cmp	r7, #120	; 0x78
 8006686:	4691      	mov	r9, r2
 8006688:	4680      	mov	r8, r0
 800668a:	460c      	mov	r4, r1
 800668c:	469a      	mov	sl, r3
 800668e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006692:	d807      	bhi.n	80066a4 <_printf_i+0x28>
 8006694:	2f62      	cmp	r7, #98	; 0x62
 8006696:	d80a      	bhi.n	80066ae <_printf_i+0x32>
 8006698:	2f00      	cmp	r7, #0
 800669a:	f000 80d8 	beq.w	800684e <_printf_i+0x1d2>
 800669e:	2f58      	cmp	r7, #88	; 0x58
 80066a0:	f000 80a3 	beq.w	80067ea <_printf_i+0x16e>
 80066a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066ac:	e03a      	b.n	8006724 <_printf_i+0xa8>
 80066ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066b2:	2b15      	cmp	r3, #21
 80066b4:	d8f6      	bhi.n	80066a4 <_printf_i+0x28>
 80066b6:	a101      	add	r1, pc, #4	; (adr r1, 80066bc <_printf_i+0x40>)
 80066b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006729 	.word	0x08006729
 80066c4:	080066a5 	.word	0x080066a5
 80066c8:	080066a5 	.word	0x080066a5
 80066cc:	080066a5 	.word	0x080066a5
 80066d0:	080066a5 	.word	0x080066a5
 80066d4:	08006729 	.word	0x08006729
 80066d8:	080066a5 	.word	0x080066a5
 80066dc:	080066a5 	.word	0x080066a5
 80066e0:	080066a5 	.word	0x080066a5
 80066e4:	080066a5 	.word	0x080066a5
 80066e8:	08006835 	.word	0x08006835
 80066ec:	08006759 	.word	0x08006759
 80066f0:	08006817 	.word	0x08006817
 80066f4:	080066a5 	.word	0x080066a5
 80066f8:	080066a5 	.word	0x080066a5
 80066fc:	08006857 	.word	0x08006857
 8006700:	080066a5 	.word	0x080066a5
 8006704:	08006759 	.word	0x08006759
 8006708:	080066a5 	.word	0x080066a5
 800670c:	080066a5 	.word	0x080066a5
 8006710:	0800681f 	.word	0x0800681f
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	602a      	str	r2, [r5, #0]
 800671c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006724:	2301      	movs	r3, #1
 8006726:	e0a3      	b.n	8006870 <_printf_i+0x1f4>
 8006728:	6820      	ldr	r0, [r4, #0]
 800672a:	6829      	ldr	r1, [r5, #0]
 800672c:	0606      	lsls	r6, r0, #24
 800672e:	f101 0304 	add.w	r3, r1, #4
 8006732:	d50a      	bpl.n	800674a <_printf_i+0xce>
 8006734:	680e      	ldr	r6, [r1, #0]
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	2e00      	cmp	r6, #0
 800673a:	da03      	bge.n	8006744 <_printf_i+0xc8>
 800673c:	232d      	movs	r3, #45	; 0x2d
 800673e:	4276      	negs	r6, r6
 8006740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006744:	485e      	ldr	r0, [pc, #376]	; (80068c0 <_printf_i+0x244>)
 8006746:	230a      	movs	r3, #10
 8006748:	e019      	b.n	800677e <_printf_i+0x102>
 800674a:	680e      	ldr	r6, [r1, #0]
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006752:	bf18      	it	ne
 8006754:	b236      	sxthne	r6, r6
 8006756:	e7ef      	b.n	8006738 <_printf_i+0xbc>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	1d19      	adds	r1, r3, #4
 800675e:	6029      	str	r1, [r5, #0]
 8006760:	0601      	lsls	r1, r0, #24
 8006762:	d501      	bpl.n	8006768 <_printf_i+0xec>
 8006764:	681e      	ldr	r6, [r3, #0]
 8006766:	e002      	b.n	800676e <_printf_i+0xf2>
 8006768:	0646      	lsls	r6, r0, #25
 800676a:	d5fb      	bpl.n	8006764 <_printf_i+0xe8>
 800676c:	881e      	ldrh	r6, [r3, #0]
 800676e:	4854      	ldr	r0, [pc, #336]	; (80068c0 <_printf_i+0x244>)
 8006770:	2f6f      	cmp	r7, #111	; 0x6f
 8006772:	bf0c      	ite	eq
 8006774:	2308      	moveq	r3, #8
 8006776:	230a      	movne	r3, #10
 8006778:	2100      	movs	r1, #0
 800677a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800677e:	6865      	ldr	r5, [r4, #4]
 8006780:	60a5      	str	r5, [r4, #8]
 8006782:	2d00      	cmp	r5, #0
 8006784:	bfa2      	ittt	ge
 8006786:	6821      	ldrge	r1, [r4, #0]
 8006788:	f021 0104 	bicge.w	r1, r1, #4
 800678c:	6021      	strge	r1, [r4, #0]
 800678e:	b90e      	cbnz	r6, 8006794 <_printf_i+0x118>
 8006790:	2d00      	cmp	r5, #0
 8006792:	d04d      	beq.n	8006830 <_printf_i+0x1b4>
 8006794:	4615      	mov	r5, r2
 8006796:	fbb6 f1f3 	udiv	r1, r6, r3
 800679a:	fb03 6711 	mls	r7, r3, r1, r6
 800679e:	5dc7      	ldrb	r7, [r0, r7]
 80067a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067a4:	4637      	mov	r7, r6
 80067a6:	42bb      	cmp	r3, r7
 80067a8:	460e      	mov	r6, r1
 80067aa:	d9f4      	bls.n	8006796 <_printf_i+0x11a>
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d10b      	bne.n	80067c8 <_printf_i+0x14c>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	07de      	lsls	r6, r3, #31
 80067b4:	d508      	bpl.n	80067c8 <_printf_i+0x14c>
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	6861      	ldr	r1, [r4, #4]
 80067ba:	4299      	cmp	r1, r3
 80067bc:	bfde      	ittt	le
 80067be:	2330      	movle	r3, #48	; 0x30
 80067c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067c8:	1b52      	subs	r2, r2, r5
 80067ca:	6122      	str	r2, [r4, #16]
 80067cc:	f8cd a000 	str.w	sl, [sp]
 80067d0:	464b      	mov	r3, r9
 80067d2:	aa03      	add	r2, sp, #12
 80067d4:	4621      	mov	r1, r4
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7ff fee2 	bl	80065a0 <_printf_common>
 80067dc:	3001      	adds	r0, #1
 80067de:	d14c      	bne.n	800687a <_printf_i+0x1fe>
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	b004      	add	sp, #16
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	4835      	ldr	r0, [pc, #212]	; (80068c0 <_printf_i+0x244>)
 80067ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067f0:	6829      	ldr	r1, [r5, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067f8:	6029      	str	r1, [r5, #0]
 80067fa:	061d      	lsls	r5, r3, #24
 80067fc:	d514      	bpl.n	8006828 <_printf_i+0x1ac>
 80067fe:	07df      	lsls	r7, r3, #31
 8006800:	bf44      	itt	mi
 8006802:	f043 0320 	orrmi.w	r3, r3, #32
 8006806:	6023      	strmi	r3, [r4, #0]
 8006808:	b91e      	cbnz	r6, 8006812 <_printf_i+0x196>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f023 0320 	bic.w	r3, r3, #32
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	2310      	movs	r3, #16
 8006814:	e7b0      	b.n	8006778 <_printf_i+0xfc>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f043 0320 	orr.w	r3, r3, #32
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	2378      	movs	r3, #120	; 0x78
 8006820:	4828      	ldr	r0, [pc, #160]	; (80068c4 <_printf_i+0x248>)
 8006822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006826:	e7e3      	b.n	80067f0 <_printf_i+0x174>
 8006828:	0659      	lsls	r1, r3, #25
 800682a:	bf48      	it	mi
 800682c:	b2b6      	uxthmi	r6, r6
 800682e:	e7e6      	b.n	80067fe <_printf_i+0x182>
 8006830:	4615      	mov	r5, r2
 8006832:	e7bb      	b.n	80067ac <_printf_i+0x130>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	6826      	ldr	r6, [r4, #0]
 8006838:	6961      	ldr	r1, [r4, #20]
 800683a:	1d18      	adds	r0, r3, #4
 800683c:	6028      	str	r0, [r5, #0]
 800683e:	0635      	lsls	r5, r6, #24
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	d501      	bpl.n	8006848 <_printf_i+0x1cc>
 8006844:	6019      	str	r1, [r3, #0]
 8006846:	e002      	b.n	800684e <_printf_i+0x1d2>
 8006848:	0670      	lsls	r0, r6, #25
 800684a:	d5fb      	bpl.n	8006844 <_printf_i+0x1c8>
 800684c:	8019      	strh	r1, [r3, #0]
 800684e:	2300      	movs	r3, #0
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	4615      	mov	r5, r2
 8006854:	e7ba      	b.n	80067cc <_printf_i+0x150>
 8006856:	682b      	ldr	r3, [r5, #0]
 8006858:	1d1a      	adds	r2, r3, #4
 800685a:	602a      	str	r2, [r5, #0]
 800685c:	681d      	ldr	r5, [r3, #0]
 800685e:	6862      	ldr	r2, [r4, #4]
 8006860:	2100      	movs	r1, #0
 8006862:	4628      	mov	r0, r5
 8006864:	f7f9 fcdc 	bl	8000220 <memchr>
 8006868:	b108      	cbz	r0, 800686e <_printf_i+0x1f2>
 800686a:	1b40      	subs	r0, r0, r5
 800686c:	6060      	str	r0, [r4, #4]
 800686e:	6863      	ldr	r3, [r4, #4]
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	2300      	movs	r3, #0
 8006874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006878:	e7a8      	b.n	80067cc <_printf_i+0x150>
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	462a      	mov	r2, r5
 800687e:	4649      	mov	r1, r9
 8006880:	4640      	mov	r0, r8
 8006882:	47d0      	blx	sl
 8006884:	3001      	adds	r0, #1
 8006886:	d0ab      	beq.n	80067e0 <_printf_i+0x164>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	079b      	lsls	r3, r3, #30
 800688c:	d413      	bmi.n	80068b6 <_printf_i+0x23a>
 800688e:	68e0      	ldr	r0, [r4, #12]
 8006890:	9b03      	ldr	r3, [sp, #12]
 8006892:	4298      	cmp	r0, r3
 8006894:	bfb8      	it	lt
 8006896:	4618      	movlt	r0, r3
 8006898:	e7a4      	b.n	80067e4 <_printf_i+0x168>
 800689a:	2301      	movs	r3, #1
 800689c:	4632      	mov	r2, r6
 800689e:	4649      	mov	r1, r9
 80068a0:	4640      	mov	r0, r8
 80068a2:	47d0      	blx	sl
 80068a4:	3001      	adds	r0, #1
 80068a6:	d09b      	beq.n	80067e0 <_printf_i+0x164>
 80068a8:	3501      	adds	r5, #1
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	9903      	ldr	r1, [sp, #12]
 80068ae:	1a5b      	subs	r3, r3, r1
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dcf2      	bgt.n	800689a <_printf_i+0x21e>
 80068b4:	e7eb      	b.n	800688e <_printf_i+0x212>
 80068b6:	2500      	movs	r5, #0
 80068b8:	f104 0619 	add.w	r6, r4, #25
 80068bc:	e7f5      	b.n	80068aa <_printf_i+0x22e>
 80068be:	bf00      	nop
 80068c0:	0800a926 	.word	0x0800a926
 80068c4:	0800a937 	.word	0x0800a937

080068c8 <_scanf_float>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b087      	sub	sp, #28
 80068ce:	4617      	mov	r7, r2
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	688b      	ldr	r3, [r1, #8]
 80068d4:	1e5a      	subs	r2, r3, #1
 80068d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068da:	bf83      	ittte	hi
 80068dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068e0:	195b      	addhi	r3, r3, r5
 80068e2:	9302      	strhi	r3, [sp, #8]
 80068e4:	2300      	movls	r3, #0
 80068e6:	bf86      	itte	hi
 80068e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068ec:	608b      	strhi	r3, [r1, #8]
 80068ee:	9302      	strls	r3, [sp, #8]
 80068f0:	680b      	ldr	r3, [r1, #0]
 80068f2:	468b      	mov	fp, r1
 80068f4:	2500      	movs	r5, #0
 80068f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80068fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006902:	4680      	mov	r8, r0
 8006904:	460c      	mov	r4, r1
 8006906:	465e      	mov	r6, fp
 8006908:	46aa      	mov	sl, r5
 800690a:	46a9      	mov	r9, r5
 800690c:	9501      	str	r5, [sp, #4]
 800690e:	68a2      	ldr	r2, [r4, #8]
 8006910:	b152      	cbz	r2, 8006928 <_scanf_float+0x60>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b4e      	cmp	r3, #78	; 0x4e
 8006918:	d864      	bhi.n	80069e4 <_scanf_float+0x11c>
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d83c      	bhi.n	8006998 <_scanf_float+0xd0>
 800691e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006922:	b2c8      	uxtb	r0, r1
 8006924:	280e      	cmp	r0, #14
 8006926:	d93a      	bls.n	800699e <_scanf_float+0xd6>
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	d003      	beq.n	8006936 <_scanf_float+0x6e>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800693a:	f1ba 0f01 	cmp.w	sl, #1
 800693e:	f200 8113 	bhi.w	8006b68 <_scanf_float+0x2a0>
 8006942:	455e      	cmp	r6, fp
 8006944:	f200 8105 	bhi.w	8006b52 <_scanf_float+0x28a>
 8006948:	2501      	movs	r5, #1
 800694a:	4628      	mov	r0, r5
 800694c:	b007      	add	sp, #28
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006956:	2a0d      	cmp	r2, #13
 8006958:	d8e6      	bhi.n	8006928 <_scanf_float+0x60>
 800695a:	a101      	add	r1, pc, #4	; (adr r1, 8006960 <_scanf_float+0x98>)
 800695c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006960:	08006a9f 	.word	0x08006a9f
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006929 	.word	0x08006929
 8006970:	08006aff 	.word	0x08006aff
 8006974:	08006ad7 	.word	0x08006ad7
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006aad 	.word	0x08006aad
 8006984:	08006929 	.word	0x08006929
 8006988:	08006929 	.word	0x08006929
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006a65 	.word	0x08006a65
 8006998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800699c:	e7db      	b.n	8006956 <_scanf_float+0x8e>
 800699e:	290e      	cmp	r1, #14
 80069a0:	d8c2      	bhi.n	8006928 <_scanf_float+0x60>
 80069a2:	a001      	add	r0, pc, #4	; (adr r0, 80069a8 <_scanf_float+0xe0>)
 80069a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069a8:	08006a57 	.word	0x08006a57
 80069ac:	08006929 	.word	0x08006929
 80069b0:	08006a57 	.word	0x08006a57
 80069b4:	08006aeb 	.word	0x08006aeb
 80069b8:	08006929 	.word	0x08006929
 80069bc:	08006a05 	.word	0x08006a05
 80069c0:	08006a41 	.word	0x08006a41
 80069c4:	08006a41 	.word	0x08006a41
 80069c8:	08006a41 	.word	0x08006a41
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a41 	.word	0x08006a41
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006a41 	.word	0x08006a41
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	2b6e      	cmp	r3, #110	; 0x6e
 80069e6:	d809      	bhi.n	80069fc <_scanf_float+0x134>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d8b2      	bhi.n	8006952 <_scanf_float+0x8a>
 80069ec:	2b54      	cmp	r3, #84	; 0x54
 80069ee:	d077      	beq.n	8006ae0 <_scanf_float+0x218>
 80069f0:	2b59      	cmp	r3, #89	; 0x59
 80069f2:	d199      	bne.n	8006928 <_scanf_float+0x60>
 80069f4:	2d07      	cmp	r5, #7
 80069f6:	d197      	bne.n	8006928 <_scanf_float+0x60>
 80069f8:	2508      	movs	r5, #8
 80069fa:	e029      	b.n	8006a50 <_scanf_float+0x188>
 80069fc:	2b74      	cmp	r3, #116	; 0x74
 80069fe:	d06f      	beq.n	8006ae0 <_scanf_float+0x218>
 8006a00:	2b79      	cmp	r3, #121	; 0x79
 8006a02:	e7f6      	b.n	80069f2 <_scanf_float+0x12a>
 8006a04:	6821      	ldr	r1, [r4, #0]
 8006a06:	05c8      	lsls	r0, r1, #23
 8006a08:	d51a      	bpl.n	8006a40 <_scanf_float+0x178>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a10:	6021      	str	r1, [r4, #0]
 8006a12:	f109 0901 	add.w	r9, r9, #1
 8006a16:	b11b      	cbz	r3, 8006a20 <_scanf_float+0x158>
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	9302      	str	r3, [sp, #8]
 8006a1e:	60a2      	str	r2, [r4, #8]
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	f340 8084 	ble.w	8006b40 <_scanf_float+0x278>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	e766      	b.n	800690e <_scanf_float+0x46>
 8006a40:	eb1a 0f05 	cmn.w	sl, r5
 8006a44:	f47f af70 	bne.w	8006928 <_scanf_float+0x60>
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	f806 3b01 	strb.w	r3, [r6], #1
 8006a54:	e7e4      	b.n	8006a20 <_scanf_float+0x158>
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	0610      	lsls	r0, r2, #24
 8006a5a:	f57f af65 	bpl.w	8006928 <_scanf_float+0x60>
 8006a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a62:	e7f4      	b.n	8006a4e <_scanf_float+0x186>
 8006a64:	f1ba 0f00 	cmp.w	sl, #0
 8006a68:	d10e      	bne.n	8006a88 <_scanf_float+0x1c0>
 8006a6a:	f1b9 0f00 	cmp.w	r9, #0
 8006a6e:	d10e      	bne.n	8006a8e <_scanf_float+0x1c6>
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a7a:	d108      	bne.n	8006a8e <_scanf_float+0x1c6>
 8006a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	f04f 0a01 	mov.w	sl, #1
 8006a86:	e7e3      	b.n	8006a50 <_scanf_float+0x188>
 8006a88:	f1ba 0f02 	cmp.w	sl, #2
 8006a8c:	d055      	beq.n	8006b3a <_scanf_float+0x272>
 8006a8e:	2d01      	cmp	r5, #1
 8006a90:	d002      	beq.n	8006a98 <_scanf_float+0x1d0>
 8006a92:	2d04      	cmp	r5, #4
 8006a94:	f47f af48 	bne.w	8006928 <_scanf_float+0x60>
 8006a98:	3501      	adds	r5, #1
 8006a9a:	b2ed      	uxtb	r5, r5
 8006a9c:	e7d8      	b.n	8006a50 <_scanf_float+0x188>
 8006a9e:	f1ba 0f01 	cmp.w	sl, #1
 8006aa2:	f47f af41 	bne.w	8006928 <_scanf_float+0x60>
 8006aa6:	f04f 0a02 	mov.w	sl, #2
 8006aaa:	e7d1      	b.n	8006a50 <_scanf_float+0x188>
 8006aac:	b97d      	cbnz	r5, 8006ace <_scanf_float+0x206>
 8006aae:	f1b9 0f00 	cmp.w	r9, #0
 8006ab2:	f47f af3c 	bne.w	800692e <_scanf_float+0x66>
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006abc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ac0:	f47f af39 	bne.w	8006936 <_scanf_float+0x6e>
 8006ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ac8:	6022      	str	r2, [r4, #0]
 8006aca:	2501      	movs	r5, #1
 8006acc:	e7c0      	b.n	8006a50 <_scanf_float+0x188>
 8006ace:	2d03      	cmp	r5, #3
 8006ad0:	d0e2      	beq.n	8006a98 <_scanf_float+0x1d0>
 8006ad2:	2d05      	cmp	r5, #5
 8006ad4:	e7de      	b.n	8006a94 <_scanf_float+0x1cc>
 8006ad6:	2d02      	cmp	r5, #2
 8006ad8:	f47f af26 	bne.w	8006928 <_scanf_float+0x60>
 8006adc:	2503      	movs	r5, #3
 8006ade:	e7b7      	b.n	8006a50 <_scanf_float+0x188>
 8006ae0:	2d06      	cmp	r5, #6
 8006ae2:	f47f af21 	bne.w	8006928 <_scanf_float+0x60>
 8006ae6:	2507      	movs	r5, #7
 8006ae8:	e7b2      	b.n	8006a50 <_scanf_float+0x188>
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	0591      	lsls	r1, r2, #22
 8006aee:	f57f af1b 	bpl.w	8006928 <_scanf_float+0x60>
 8006af2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006afc:	e7a8      	b.n	8006a50 <_scanf_float+0x188>
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b08:	d006      	beq.n	8006b18 <_scanf_float+0x250>
 8006b0a:	0550      	lsls	r0, r2, #21
 8006b0c:	f57f af0c 	bpl.w	8006928 <_scanf_float+0x60>
 8006b10:	f1b9 0f00 	cmp.w	r9, #0
 8006b14:	f43f af0f 	beq.w	8006936 <_scanf_float+0x6e>
 8006b18:	0591      	lsls	r1, r2, #22
 8006b1a:	bf58      	it	pl
 8006b1c:	9901      	ldrpl	r1, [sp, #4]
 8006b1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b22:	bf58      	it	pl
 8006b24:	eba9 0101 	subpl.w	r1, r9, r1
 8006b28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b2c:	bf58      	it	pl
 8006b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	f04f 0900 	mov.w	r9, #0
 8006b38:	e78a      	b.n	8006a50 <_scanf_float+0x188>
 8006b3a:	f04f 0a03 	mov.w	sl, #3
 8006b3e:	e787      	b.n	8006a50 <_scanf_float+0x188>
 8006b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b44:	4639      	mov	r1, r7
 8006b46:	4640      	mov	r0, r8
 8006b48:	4798      	blx	r3
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f43f aedf 	beq.w	800690e <_scanf_float+0x46>
 8006b50:	e6ea      	b.n	8006928 <_scanf_float+0x60>
 8006b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4798      	blx	r3
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	e6ec      	b.n	8006942 <_scanf_float+0x7a>
 8006b68:	1e6b      	subs	r3, r5, #1
 8006b6a:	2b06      	cmp	r3, #6
 8006b6c:	d825      	bhi.n	8006bba <_scanf_float+0x2f2>
 8006b6e:	2d02      	cmp	r5, #2
 8006b70:	d836      	bhi.n	8006be0 <_scanf_float+0x318>
 8006b72:	455e      	cmp	r6, fp
 8006b74:	f67f aee8 	bls.w	8006948 <_scanf_float+0x80>
 8006b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b80:	463a      	mov	r2, r7
 8006b82:	4640      	mov	r0, r8
 8006b84:	4798      	blx	r3
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	e7f1      	b.n	8006b72 <_scanf_float+0x2aa>
 8006b8e:	9802      	ldr	r0, [sp, #8]
 8006b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b98:	9002      	str	r0, [sp, #8]
 8006b9a:	463a      	mov	r2, r7
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4798      	blx	r3
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006baa:	fa5f fa8a 	uxtb.w	sl, sl
 8006bae:	f1ba 0f02 	cmp.w	sl, #2
 8006bb2:	d1ec      	bne.n	8006b8e <_scanf_float+0x2c6>
 8006bb4:	3d03      	subs	r5, #3
 8006bb6:	b2ed      	uxtb	r5, r5
 8006bb8:	1b76      	subs	r6, r6, r5
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	05da      	lsls	r2, r3, #23
 8006bbe:	d52f      	bpl.n	8006c20 <_scanf_float+0x358>
 8006bc0:	055b      	lsls	r3, r3, #21
 8006bc2:	d510      	bpl.n	8006be6 <_scanf_float+0x31e>
 8006bc4:	455e      	cmp	r6, fp
 8006bc6:	f67f aebf 	bls.w	8006948 <_scanf_float+0x80>
 8006bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bd2:	463a      	mov	r2, r7
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4798      	blx	r3
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	e7f1      	b.n	8006bc4 <_scanf_float+0x2fc>
 8006be0:	46aa      	mov	sl, r5
 8006be2:	9602      	str	r6, [sp, #8]
 8006be4:	e7df      	b.n	8006ba6 <_scanf_float+0x2de>
 8006be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	2965      	cmp	r1, #101	; 0x65
 8006bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	d00c      	beq.n	8006c14 <_scanf_float+0x34c>
 8006bfa:	2945      	cmp	r1, #69	; 0x45
 8006bfc:	d00a      	beq.n	8006c14 <_scanf_float+0x34c>
 8006bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c02:	463a      	mov	r2, r7
 8006c04:	4640      	mov	r0, r8
 8006c06:	4798      	blx	r3
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	1eb5      	subs	r5, r6, #2
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	4798      	blx	r3
 8006c1e:	462e      	mov	r6, r5
 8006c20:	6825      	ldr	r5, [r4, #0]
 8006c22:	f015 0510 	ands.w	r5, r5, #16
 8006c26:	d159      	bne.n	8006cdc <_scanf_float+0x414>
 8006c28:	7035      	strb	r5, [r6, #0]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c34:	d11b      	bne.n	8006c6e <_scanf_float+0x3a6>
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	454b      	cmp	r3, r9
 8006c3a:	eba3 0209 	sub.w	r2, r3, r9
 8006c3e:	d123      	bne.n	8006c88 <_scanf_float+0x3c0>
 8006c40:	2200      	movs	r2, #0
 8006c42:	4659      	mov	r1, fp
 8006c44:	4640      	mov	r0, r8
 8006c46:	f000 fe99 	bl	800797c <_strtod_r>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	f012 0f02 	tst.w	r2, #2
 8006c52:	ec57 6b10 	vmov	r6, r7, d0
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	d021      	beq.n	8006c9e <_scanf_float+0x3d6>
 8006c5a:	9903      	ldr	r1, [sp, #12]
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	600a      	str	r2, [r1, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	e9c3 6700 	strd	r6, r7, [r3]
 8006c66:	68e3      	ldr	r3, [r4, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60e3      	str	r3, [r4, #12]
 8006c6c:	e66d      	b.n	800694a <_scanf_float+0x82>
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0e5      	beq.n	8006c40 <_scanf_float+0x378>
 8006c74:	9905      	ldr	r1, [sp, #20]
 8006c76:	230a      	movs	r3, #10
 8006c78:	462a      	mov	r2, r5
 8006c7a:	3101      	adds	r1, #1
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	f000 ff05 	bl	8007a8c <_strtol_r>
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	9e05      	ldr	r6, [sp, #20]
 8006c86:	1ac2      	subs	r2, r0, r3
 8006c88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c8c:	429e      	cmp	r6, r3
 8006c8e:	bf28      	it	cs
 8006c90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c94:	4912      	ldr	r1, [pc, #72]	; (8006ce0 <_scanf_float+0x418>)
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f82c 	bl	8006cf4 <siprintf>
 8006c9c:	e7d0      	b.n	8006c40 <_scanf_float+0x378>
 8006c9e:	9903      	ldr	r1, [sp, #12]
 8006ca0:	f012 0f04 	tst.w	r2, #4
 8006ca4:	f103 0204 	add.w	r2, r3, #4
 8006ca8:	600a      	str	r2, [r1, #0]
 8006caa:	d1d9      	bne.n	8006c60 <_scanf_float+0x398>
 8006cac:	f8d3 8000 	ldr.w	r8, [r3]
 8006cb0:	ee10 2a10 	vmov	r2, s0
 8006cb4:	ee10 0a10 	vmov	r0, s0
 8006cb8:	463b      	mov	r3, r7
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7f9 ff56 	bl	8000b6c <__aeabi_dcmpun>
 8006cc0:	b128      	cbz	r0, 8006cce <_scanf_float+0x406>
 8006cc2:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <_scanf_float+0x41c>)
 8006cc4:	f000 f810 	bl	8006ce8 <nanf>
 8006cc8:	ed88 0a00 	vstr	s0, [r8]
 8006ccc:	e7cb      	b.n	8006c66 <_scanf_float+0x39e>
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 ffa9 	bl	8000c28 <__aeabi_d2f>
 8006cd6:	f8c8 0000 	str.w	r0, [r8]
 8006cda:	e7c4      	b.n	8006c66 <_scanf_float+0x39e>
 8006cdc:	2500      	movs	r5, #0
 8006cde:	e634      	b.n	800694a <_scanf_float+0x82>
 8006ce0:	0800a948 	.word	0x0800a948
 8006ce4:	0800ad50 	.word	0x0800ad50

08006ce8 <nanf>:
 8006ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006cf0 <nanf+0x8>
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	7fc00000 	.word	0x7fc00000

08006cf4 <siprintf>:
 8006cf4:	b40e      	push	{r1, r2, r3}
 8006cf6:	b500      	push	{lr}
 8006cf8:	b09c      	sub	sp, #112	; 0x70
 8006cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8006cfc:	9002      	str	r0, [sp, #8]
 8006cfe:	9006      	str	r0, [sp, #24]
 8006d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <siprintf+0x38>)
 8006d06:	9107      	str	r1, [sp, #28]
 8006d08:	9104      	str	r1, [sp, #16]
 8006d0a:	4909      	ldr	r1, [pc, #36]	; (8006d30 <siprintf+0x3c>)
 8006d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d10:	9105      	str	r1, [sp, #20]
 8006d12:	6800      	ldr	r0, [r0, #0]
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	a902      	add	r1, sp, #8
 8006d18:	f002 fee4 	bl	8009ae4 <_svfiprintf_r>
 8006d1c:	9b02      	ldr	r3, [sp, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	b01c      	add	sp, #112	; 0x70
 8006d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d28:	b003      	add	sp, #12
 8006d2a:	4770      	bx	lr
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	ffff0208 	.word	0xffff0208

08006d34 <sulp>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	ec45 4b10 	vmov	d0, r4, r5
 8006d3e:	4616      	mov	r6, r2
 8006d40:	f002 fc2e 	bl	80095a0 <__ulp>
 8006d44:	ec51 0b10 	vmov	r0, r1, d0
 8006d48:	b17e      	cbz	r6, 8006d6a <sulp+0x36>
 8006d4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd09      	ble.n	8006d6a <sulp+0x36>
 8006d56:	051b      	lsls	r3, r3, #20
 8006d58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d5c:	2400      	movs	r4, #0
 8006d5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	f7f9 fc67 	bl	8000638 <__aeabi_dmul>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	0000      	movs	r0, r0
	...

08006d70 <_strtod_l>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	ed2d 8b02 	vpush	{d8}
 8006d78:	b09d      	sub	sp, #116	; 0x74
 8006d7a:	461f      	mov	r7, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9318      	str	r3, [sp, #96]	; 0x60
 8006d80:	4ba2      	ldr	r3, [pc, #648]	; (800700c <_strtod_l+0x29c>)
 8006d82:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	9305      	str	r3, [sp, #20]
 8006d88:	4604      	mov	r4, r0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	4688      	mov	r8, r1
 8006d8e:	f7f9 fa3f 	bl	8000210 <strlen>
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	4605      	mov	r5, r0
 8006d98:	f04f 0b00 	mov.w	fp, #0
 8006d9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006da2:	781a      	ldrb	r2, [r3, #0]
 8006da4:	2a2b      	cmp	r2, #43	; 0x2b
 8006da6:	d04e      	beq.n	8006e46 <_strtod_l+0xd6>
 8006da8:	d83b      	bhi.n	8006e22 <_strtod_l+0xb2>
 8006daa:	2a0d      	cmp	r2, #13
 8006dac:	d834      	bhi.n	8006e18 <_strtod_l+0xa8>
 8006dae:	2a08      	cmp	r2, #8
 8006db0:	d834      	bhi.n	8006e1c <_strtod_l+0xac>
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	d03e      	beq.n	8006e34 <_strtod_l+0xc4>
 8006db6:	2300      	movs	r3, #0
 8006db8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006dbc:	7833      	ldrb	r3, [r6, #0]
 8006dbe:	2b30      	cmp	r3, #48	; 0x30
 8006dc0:	f040 80b0 	bne.w	8006f24 <_strtod_l+0x1b4>
 8006dc4:	7873      	ldrb	r3, [r6, #1]
 8006dc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dca:	2b58      	cmp	r3, #88	; 0x58
 8006dcc:	d168      	bne.n	8006ea0 <_strtod_l+0x130>
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	ab18      	add	r3, sp, #96	; 0x60
 8006dd4:	9702      	str	r7, [sp, #8]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4a8d      	ldr	r2, [pc, #564]	; (8007010 <_strtod_l+0x2a0>)
 8006dda:	ab19      	add	r3, sp, #100	; 0x64
 8006ddc:	a917      	add	r1, sp, #92	; 0x5c
 8006dde:	4620      	mov	r0, r4
 8006de0:	f001 fd38 	bl	8008854 <__gethex>
 8006de4:	f010 0707 	ands.w	r7, r0, #7
 8006de8:	4605      	mov	r5, r0
 8006dea:	d005      	beq.n	8006df8 <_strtod_l+0x88>
 8006dec:	2f06      	cmp	r7, #6
 8006dee:	d12c      	bne.n	8006e4a <_strtod_l+0xda>
 8006df0:	3601      	adds	r6, #1
 8006df2:	2300      	movs	r3, #0
 8006df4:	9617      	str	r6, [sp, #92]	; 0x5c
 8006df6:	930a      	str	r3, [sp, #40]	; 0x28
 8006df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 8590 	bne.w	8007920 <_strtod_l+0xbb0>
 8006e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e02:	b1eb      	cbz	r3, 8006e40 <_strtod_l+0xd0>
 8006e04:	4652      	mov	r2, sl
 8006e06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e0a:	ec43 2b10 	vmov	d0, r2, r3
 8006e0e:	b01d      	add	sp, #116	; 0x74
 8006e10:	ecbd 8b02 	vpop	{d8}
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e18:	2a20      	cmp	r2, #32
 8006e1a:	d1cc      	bne.n	8006db6 <_strtod_l+0x46>
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e20:	e7be      	b.n	8006da0 <_strtod_l+0x30>
 8006e22:	2a2d      	cmp	r2, #45	; 0x2d
 8006e24:	d1c7      	bne.n	8006db6 <_strtod_l+0x46>
 8006e26:	2201      	movs	r2, #1
 8006e28:	920a      	str	r2, [sp, #40]	; 0x28
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1c2      	bne.n	8006dba <_strtod_l+0x4a>
 8006e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 856e 	bne.w	800791c <_strtod_l+0xbac>
 8006e40:	4652      	mov	r2, sl
 8006e42:	465b      	mov	r3, fp
 8006e44:	e7e1      	b.n	8006e0a <_strtod_l+0x9a>
 8006e46:	2200      	movs	r2, #0
 8006e48:	e7ee      	b.n	8006e28 <_strtod_l+0xb8>
 8006e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e4c:	b13a      	cbz	r2, 8006e5e <_strtod_l+0xee>
 8006e4e:	2135      	movs	r1, #53	; 0x35
 8006e50:	a81a      	add	r0, sp, #104	; 0x68
 8006e52:	f002 fcb0 	bl	80097b6 <__copybits>
 8006e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f002 f86f 	bl	8008f3c <_Bfree>
 8006e5e:	3f01      	subs	r7, #1
 8006e60:	2f04      	cmp	r7, #4
 8006e62:	d806      	bhi.n	8006e72 <_strtod_l+0x102>
 8006e64:	e8df f007 	tbb	[pc, r7]
 8006e68:	1714030a 	.word	0x1714030a
 8006e6c:	0a          	.byte	0x0a
 8006e6d:	00          	.byte	0x00
 8006e6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006e72:	0728      	lsls	r0, r5, #28
 8006e74:	d5c0      	bpl.n	8006df8 <_strtod_l+0x88>
 8006e76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e7a:	e7bd      	b.n	8006df8 <_strtod_l+0x88>
 8006e7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e8e:	e7f0      	b.n	8006e72 <_strtod_l+0x102>
 8006e90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007014 <_strtod_l+0x2a4>
 8006e94:	e7ed      	b.n	8006e72 <_strtod_l+0x102>
 8006e96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e9a:	f04f 3aff 	mov.w	sl, #4294967295
 8006e9e:	e7e8      	b.n	8006e72 <_strtod_l+0x102>
 8006ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d0f9      	beq.n	8006ea0 <_strtod_l+0x130>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0a3      	beq.n	8006df8 <_strtod_l+0x88>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eba:	9308      	str	r3, [sp, #32]
 8006ebc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ec0:	464f      	mov	r7, r9
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ec6:	7806      	ldrb	r6, [r0, #0]
 8006ec8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ecc:	b2d9      	uxtb	r1, r3
 8006ece:	2909      	cmp	r1, #9
 8006ed0:	d92a      	bls.n	8006f28 <_strtod_l+0x1b8>
 8006ed2:	9905      	ldr	r1, [sp, #20]
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	f002 ff1f 	bl	8009d18 <strncmp>
 8006eda:	b398      	cbz	r0, 8006f44 <_strtod_l+0x1d4>
 8006edc:	2000      	movs	r0, #0
 8006ede:	4632      	mov	r2, r6
 8006ee0:	463d      	mov	r5, r7
 8006ee2:	9005      	str	r0, [sp, #20]
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2a65      	cmp	r2, #101	; 0x65
 8006ee8:	d001      	beq.n	8006eee <_strtod_l+0x17e>
 8006eea:	2a45      	cmp	r2, #69	; 0x45
 8006eec:	d118      	bne.n	8006f20 <_strtod_l+0x1b0>
 8006eee:	b91d      	cbnz	r5, 8006ef8 <_strtod_l+0x188>
 8006ef0:	9a04      	ldr	r2, [sp, #16]
 8006ef2:	4302      	orrs	r2, r0
 8006ef4:	d09e      	beq.n	8006e34 <_strtod_l+0xc4>
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006efc:	f108 0201 	add.w	r2, r8, #1
 8006f00:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006f06:	2a2b      	cmp	r2, #43	; 0x2b
 8006f08:	d075      	beq.n	8006ff6 <_strtod_l+0x286>
 8006f0a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f0c:	d07b      	beq.n	8007006 <_strtod_l+0x296>
 8006f0e:	f04f 0c00 	mov.w	ip, #0
 8006f12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f16:	2909      	cmp	r1, #9
 8006f18:	f240 8082 	bls.w	8007020 <_strtod_l+0x2b0>
 8006f1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f20:	2600      	movs	r6, #0
 8006f22:	e09d      	b.n	8007060 <_strtod_l+0x2f0>
 8006f24:	2300      	movs	r3, #0
 8006f26:	e7c4      	b.n	8006eb2 <_strtod_l+0x142>
 8006f28:	2f08      	cmp	r7, #8
 8006f2a:	bfd8      	it	le
 8006f2c:	9907      	ldrle	r1, [sp, #28]
 8006f2e:	f100 0001 	add.w	r0, r0, #1
 8006f32:	bfda      	itte	le
 8006f34:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f38:	9307      	strle	r3, [sp, #28]
 8006f3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006f3e:	3701      	adds	r7, #1
 8006f40:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f42:	e7bf      	b.n	8006ec4 <_strtod_l+0x154>
 8006f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f46:	195a      	adds	r2, r3, r5
 8006f48:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f4a:	5d5a      	ldrb	r2, [r3, r5]
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	d037      	beq.n	8006fc0 <_strtod_l+0x250>
 8006f50:	9005      	str	r0, [sp, #20]
 8006f52:	463d      	mov	r5, r7
 8006f54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d912      	bls.n	8006f82 <_strtod_l+0x212>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e7c2      	b.n	8006ee6 <_strtod_l+0x176>
 8006f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f66:	785a      	ldrb	r2, [r3, #1]
 8006f68:	3001      	adds	r0, #1
 8006f6a:	2a30      	cmp	r2, #48	; 0x30
 8006f6c:	d0f8      	beq.n	8006f60 <_strtod_l+0x1f0>
 8006f6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	f200 84d9 	bhi.w	800792a <_strtod_l+0xbba>
 8006f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f7a:	9005      	str	r0, [sp, #20]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	4605      	mov	r5, r0
 8006f82:	3a30      	subs	r2, #48	; 0x30
 8006f84:	f100 0301 	add.w	r3, r0, #1
 8006f88:	d014      	beq.n	8006fb4 <_strtod_l+0x244>
 8006f8a:	9905      	ldr	r1, [sp, #20]
 8006f8c:	4419      	add	r1, r3
 8006f8e:	9105      	str	r1, [sp, #20]
 8006f90:	462b      	mov	r3, r5
 8006f92:	eb00 0e05 	add.w	lr, r0, r5
 8006f96:	210a      	movs	r1, #10
 8006f98:	4573      	cmp	r3, lr
 8006f9a:	d113      	bne.n	8006fc4 <_strtod_l+0x254>
 8006f9c:	182b      	adds	r3, r5, r0
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	f105 0501 	add.w	r5, r5, #1
 8006fa4:	4405      	add	r5, r0
 8006fa6:	dc1c      	bgt.n	8006fe2 <_strtod_l+0x272>
 8006fa8:	9907      	ldr	r1, [sp, #28]
 8006faa:	230a      	movs	r3, #10
 8006fac:	fb03 2301 	mla	r3, r3, r1, r2
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fb6:	1c51      	adds	r1, r2, #1
 8006fb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fba:	7852      	ldrb	r2, [r2, #1]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	e7c9      	b.n	8006f54 <_strtod_l+0x1e4>
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	e7d2      	b.n	8006f6a <_strtod_l+0x1fa>
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	dc04      	bgt.n	8006fd2 <_strtod_l+0x262>
 8006fc8:	9e07      	ldr	r6, [sp, #28]
 8006fca:	434e      	muls	r6, r1
 8006fcc:	9607      	str	r6, [sp, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	e7e2      	b.n	8006f98 <_strtod_l+0x228>
 8006fd2:	f103 0c01 	add.w	ip, r3, #1
 8006fd6:	f1bc 0f10 	cmp.w	ip, #16
 8006fda:	bfd8      	it	le
 8006fdc:	fb01 f909 	mulle.w	r9, r1, r9
 8006fe0:	e7f5      	b.n	8006fce <_strtod_l+0x25e>
 8006fe2:	2d10      	cmp	r5, #16
 8006fe4:	bfdc      	itt	le
 8006fe6:	230a      	movle	r3, #10
 8006fe8:	fb03 2909 	mlale	r9, r3, r9, r2
 8006fec:	e7e1      	b.n	8006fb2 <_strtod_l+0x242>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	9305      	str	r3, [sp, #20]
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e77c      	b.n	8006ef0 <_strtod_l+0x180>
 8006ff6:	f04f 0c00 	mov.w	ip, #0
 8006ffa:	f108 0202 	add.w	r2, r8, #2
 8006ffe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007000:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007004:	e785      	b.n	8006f12 <_strtod_l+0x1a2>
 8007006:	f04f 0c01 	mov.w	ip, #1
 800700a:	e7f6      	b.n	8006ffa <_strtod_l+0x28a>
 800700c:	0800ab98 	.word	0x0800ab98
 8007010:	0800a950 	.word	0x0800a950
 8007014:	7ff00000 	.word	0x7ff00000
 8007018:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800701a:	1c51      	adds	r1, r2, #1
 800701c:	9117      	str	r1, [sp, #92]	; 0x5c
 800701e:	7852      	ldrb	r2, [r2, #1]
 8007020:	2a30      	cmp	r2, #48	; 0x30
 8007022:	d0f9      	beq.n	8007018 <_strtod_l+0x2a8>
 8007024:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007028:	2908      	cmp	r1, #8
 800702a:	f63f af79 	bhi.w	8006f20 <_strtod_l+0x1b0>
 800702e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007032:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007034:	9206      	str	r2, [sp, #24]
 8007036:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007038:	1c51      	adds	r1, r2, #1
 800703a:	9117      	str	r1, [sp, #92]	; 0x5c
 800703c:	7852      	ldrb	r2, [r2, #1]
 800703e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007042:	2e09      	cmp	r6, #9
 8007044:	d937      	bls.n	80070b6 <_strtod_l+0x346>
 8007046:	9e06      	ldr	r6, [sp, #24]
 8007048:	1b89      	subs	r1, r1, r6
 800704a:	2908      	cmp	r1, #8
 800704c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007050:	dc02      	bgt.n	8007058 <_strtod_l+0x2e8>
 8007052:	4576      	cmp	r6, lr
 8007054:	bfa8      	it	ge
 8007056:	4676      	movge	r6, lr
 8007058:	f1bc 0f00 	cmp.w	ip, #0
 800705c:	d000      	beq.n	8007060 <_strtod_l+0x2f0>
 800705e:	4276      	negs	r6, r6
 8007060:	2d00      	cmp	r5, #0
 8007062:	d14d      	bne.n	8007100 <_strtod_l+0x390>
 8007064:	9904      	ldr	r1, [sp, #16]
 8007066:	4301      	orrs	r1, r0
 8007068:	f47f aec6 	bne.w	8006df8 <_strtod_l+0x88>
 800706c:	2b00      	cmp	r3, #0
 800706e:	f47f aee1 	bne.w	8006e34 <_strtod_l+0xc4>
 8007072:	2a69      	cmp	r2, #105	; 0x69
 8007074:	d027      	beq.n	80070c6 <_strtod_l+0x356>
 8007076:	dc24      	bgt.n	80070c2 <_strtod_l+0x352>
 8007078:	2a49      	cmp	r2, #73	; 0x49
 800707a:	d024      	beq.n	80070c6 <_strtod_l+0x356>
 800707c:	2a4e      	cmp	r2, #78	; 0x4e
 800707e:	f47f aed9 	bne.w	8006e34 <_strtod_l+0xc4>
 8007082:	499f      	ldr	r1, [pc, #636]	; (8007300 <_strtod_l+0x590>)
 8007084:	a817      	add	r0, sp, #92	; 0x5c
 8007086:	f001 fe3d 	bl	8008d04 <__match>
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f aed2 	beq.w	8006e34 <_strtod_l+0xc4>
 8007090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b28      	cmp	r3, #40	; 0x28
 8007096:	d12d      	bne.n	80070f4 <_strtod_l+0x384>
 8007098:	499a      	ldr	r1, [pc, #616]	; (8007304 <_strtod_l+0x594>)
 800709a:	aa1a      	add	r2, sp, #104	; 0x68
 800709c:	a817      	add	r0, sp, #92	; 0x5c
 800709e:	f001 fe45 	bl	8008d2c <__hexnan>
 80070a2:	2805      	cmp	r0, #5
 80070a4:	d126      	bne.n	80070f4 <_strtod_l+0x384>
 80070a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80070ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80070b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80070b4:	e6a0      	b.n	8006df8 <_strtod_l+0x88>
 80070b6:	210a      	movs	r1, #10
 80070b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80070bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80070c0:	e7b9      	b.n	8007036 <_strtod_l+0x2c6>
 80070c2:	2a6e      	cmp	r2, #110	; 0x6e
 80070c4:	e7db      	b.n	800707e <_strtod_l+0x30e>
 80070c6:	4990      	ldr	r1, [pc, #576]	; (8007308 <_strtod_l+0x598>)
 80070c8:	a817      	add	r0, sp, #92	; 0x5c
 80070ca:	f001 fe1b 	bl	8008d04 <__match>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f aeb0 	beq.w	8006e34 <_strtod_l+0xc4>
 80070d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070d6:	498d      	ldr	r1, [pc, #564]	; (800730c <_strtod_l+0x59c>)
 80070d8:	3b01      	subs	r3, #1
 80070da:	a817      	add	r0, sp, #92	; 0x5c
 80070dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80070de:	f001 fe11 	bl	8008d04 <__match>
 80070e2:	b910      	cbnz	r0, 80070ea <_strtod_l+0x37a>
 80070e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070e6:	3301      	adds	r3, #1
 80070e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80070ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800731c <_strtod_l+0x5ac>
 80070ee:	f04f 0a00 	mov.w	sl, #0
 80070f2:	e681      	b.n	8006df8 <_strtod_l+0x88>
 80070f4:	4886      	ldr	r0, [pc, #536]	; (8007310 <_strtod_l+0x5a0>)
 80070f6:	f002 fdf7 	bl	8009ce8 <nan>
 80070fa:	ec5b ab10 	vmov	sl, fp, d0
 80070fe:	e67b      	b.n	8006df8 <_strtod_l+0x88>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	9807      	ldr	r0, [sp, #28]
 8007104:	1af3      	subs	r3, r6, r3
 8007106:	2f00      	cmp	r7, #0
 8007108:	bf08      	it	eq
 800710a:	462f      	moveq	r7, r5
 800710c:	2d10      	cmp	r5, #16
 800710e:	9306      	str	r3, [sp, #24]
 8007110:	46a8      	mov	r8, r5
 8007112:	bfa8      	it	ge
 8007114:	f04f 0810 	movge.w	r8, #16
 8007118:	f7f9 fa14 	bl	8000544 <__aeabi_ui2d>
 800711c:	2d09      	cmp	r5, #9
 800711e:	4682      	mov	sl, r0
 8007120:	468b      	mov	fp, r1
 8007122:	dd13      	ble.n	800714c <_strtod_l+0x3dc>
 8007124:	4b7b      	ldr	r3, [pc, #492]	; (8007314 <_strtod_l+0x5a4>)
 8007126:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800712a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800712e:	f7f9 fa83 	bl	8000638 <__aeabi_dmul>
 8007132:	4682      	mov	sl, r0
 8007134:	4648      	mov	r0, r9
 8007136:	468b      	mov	fp, r1
 8007138:	f7f9 fa04 	bl	8000544 <__aeabi_ui2d>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	f7f9 f8c2 	bl	80002cc <__adddf3>
 8007148:	4682      	mov	sl, r0
 800714a:	468b      	mov	fp, r1
 800714c:	2d0f      	cmp	r5, #15
 800714e:	dc38      	bgt.n	80071c2 <_strtod_l+0x452>
 8007150:	9b06      	ldr	r3, [sp, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f43f ae50 	beq.w	8006df8 <_strtod_l+0x88>
 8007158:	dd24      	ble.n	80071a4 <_strtod_l+0x434>
 800715a:	2b16      	cmp	r3, #22
 800715c:	dc0b      	bgt.n	8007176 <_strtod_l+0x406>
 800715e:	496d      	ldr	r1, [pc, #436]	; (8007314 <_strtod_l+0x5a4>)
 8007160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007168:	4652      	mov	r2, sl
 800716a:	465b      	mov	r3, fp
 800716c:	f7f9 fa64 	bl	8000638 <__aeabi_dmul>
 8007170:	4682      	mov	sl, r0
 8007172:	468b      	mov	fp, r1
 8007174:	e640      	b.n	8006df8 <_strtod_l+0x88>
 8007176:	9a06      	ldr	r2, [sp, #24]
 8007178:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800717c:	4293      	cmp	r3, r2
 800717e:	db20      	blt.n	80071c2 <_strtod_l+0x452>
 8007180:	4c64      	ldr	r4, [pc, #400]	; (8007314 <_strtod_l+0x5a4>)
 8007182:	f1c5 050f 	rsb	r5, r5, #15
 8007186:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800718a:	4652      	mov	r2, sl
 800718c:	465b      	mov	r3, fp
 800718e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007192:	f7f9 fa51 	bl	8000638 <__aeabi_dmul>
 8007196:	9b06      	ldr	r3, [sp, #24]
 8007198:	1b5d      	subs	r5, r3, r5
 800719a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800719e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071a2:	e7e3      	b.n	800716c <_strtod_l+0x3fc>
 80071a4:	9b06      	ldr	r3, [sp, #24]
 80071a6:	3316      	adds	r3, #22
 80071a8:	db0b      	blt.n	80071c2 <_strtod_l+0x452>
 80071aa:	9b05      	ldr	r3, [sp, #20]
 80071ac:	1b9e      	subs	r6, r3, r6
 80071ae:	4b59      	ldr	r3, [pc, #356]	; (8007314 <_strtod_l+0x5a4>)
 80071b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80071b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071b8:	4650      	mov	r0, sl
 80071ba:	4659      	mov	r1, fp
 80071bc:	f7f9 fb66 	bl	800088c <__aeabi_ddiv>
 80071c0:	e7d6      	b.n	8007170 <_strtod_l+0x400>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	eba5 0808 	sub.w	r8, r5, r8
 80071c8:	4498      	add	r8, r3
 80071ca:	f1b8 0f00 	cmp.w	r8, #0
 80071ce:	dd74      	ble.n	80072ba <_strtod_l+0x54a>
 80071d0:	f018 030f 	ands.w	r3, r8, #15
 80071d4:	d00a      	beq.n	80071ec <_strtod_l+0x47c>
 80071d6:	494f      	ldr	r1, [pc, #316]	; (8007314 <_strtod_l+0x5a4>)
 80071d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071dc:	4652      	mov	r2, sl
 80071de:	465b      	mov	r3, fp
 80071e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071e4:	f7f9 fa28 	bl	8000638 <__aeabi_dmul>
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	f038 080f 	bics.w	r8, r8, #15
 80071f0:	d04f      	beq.n	8007292 <_strtod_l+0x522>
 80071f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80071f6:	dd22      	ble.n	800723e <_strtod_l+0x4ce>
 80071f8:	2500      	movs	r5, #0
 80071fa:	462e      	mov	r6, r5
 80071fc:	9507      	str	r5, [sp, #28]
 80071fe:	9505      	str	r5, [sp, #20]
 8007200:	2322      	movs	r3, #34	; 0x22
 8007202:	f8df b118 	ldr.w	fp, [pc, #280]	; 800731c <_strtod_l+0x5ac>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	f04f 0a00 	mov.w	sl, #0
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f43f adf2 	beq.w	8006df8 <_strtod_l+0x88>
 8007214:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007216:	4620      	mov	r0, r4
 8007218:	f001 fe90 	bl	8008f3c <_Bfree>
 800721c:	9905      	ldr	r1, [sp, #20]
 800721e:	4620      	mov	r0, r4
 8007220:	f001 fe8c 	bl	8008f3c <_Bfree>
 8007224:	4631      	mov	r1, r6
 8007226:	4620      	mov	r0, r4
 8007228:	f001 fe88 	bl	8008f3c <_Bfree>
 800722c:	9907      	ldr	r1, [sp, #28]
 800722e:	4620      	mov	r0, r4
 8007230:	f001 fe84 	bl	8008f3c <_Bfree>
 8007234:	4629      	mov	r1, r5
 8007236:	4620      	mov	r0, r4
 8007238:	f001 fe80 	bl	8008f3c <_Bfree>
 800723c:	e5dc      	b.n	8006df8 <_strtod_l+0x88>
 800723e:	4b36      	ldr	r3, [pc, #216]	; (8007318 <_strtod_l+0x5a8>)
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	2300      	movs	r3, #0
 8007244:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	4699      	mov	r9, r3
 800724e:	f1b8 0f01 	cmp.w	r8, #1
 8007252:	dc21      	bgt.n	8007298 <_strtod_l+0x528>
 8007254:	b10b      	cbz	r3, 800725a <_strtod_l+0x4ea>
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <_strtod_l+0x5a8>)
 800725c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007260:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007264:	4652      	mov	r2, sl
 8007266:	465b      	mov	r3, fp
 8007268:	e9d9 0100 	ldrd	r0, r1, [r9]
 800726c:	f7f9 f9e4 	bl	8000638 <__aeabi_dmul>
 8007270:	4b2a      	ldr	r3, [pc, #168]	; (800731c <_strtod_l+0x5ac>)
 8007272:	460a      	mov	r2, r1
 8007274:	400b      	ands	r3, r1
 8007276:	492a      	ldr	r1, [pc, #168]	; (8007320 <_strtod_l+0x5b0>)
 8007278:	428b      	cmp	r3, r1
 800727a:	4682      	mov	sl, r0
 800727c:	d8bc      	bhi.n	80071f8 <_strtod_l+0x488>
 800727e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007282:	428b      	cmp	r3, r1
 8007284:	bf86      	itte	hi
 8007286:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007324 <_strtod_l+0x5b4>
 800728a:	f04f 3aff 	movhi.w	sl, #4294967295
 800728e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007292:	2300      	movs	r3, #0
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	e084      	b.n	80073a2 <_strtod_l+0x632>
 8007298:	f018 0f01 	tst.w	r8, #1
 800729c:	d005      	beq.n	80072aa <_strtod_l+0x53a>
 800729e:	9b04      	ldr	r3, [sp, #16]
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f9 f9c8 	bl	8000638 <__aeabi_dmul>
 80072a8:	2301      	movs	r3, #1
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	3208      	adds	r2, #8
 80072ae:	f109 0901 	add.w	r9, r9, #1
 80072b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80072b6:	9204      	str	r2, [sp, #16]
 80072b8:	e7c9      	b.n	800724e <_strtod_l+0x4de>
 80072ba:	d0ea      	beq.n	8007292 <_strtod_l+0x522>
 80072bc:	f1c8 0800 	rsb	r8, r8, #0
 80072c0:	f018 020f 	ands.w	r2, r8, #15
 80072c4:	d00a      	beq.n	80072dc <_strtod_l+0x56c>
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <_strtod_l+0x5a4>)
 80072c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072cc:	4650      	mov	r0, sl
 80072ce:	4659      	mov	r1, fp
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 fada 	bl	800088c <__aeabi_ddiv>
 80072d8:	4682      	mov	sl, r0
 80072da:	468b      	mov	fp, r1
 80072dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80072e0:	d0d7      	beq.n	8007292 <_strtod_l+0x522>
 80072e2:	f1b8 0f1f 	cmp.w	r8, #31
 80072e6:	dd1f      	ble.n	8007328 <_strtod_l+0x5b8>
 80072e8:	2500      	movs	r5, #0
 80072ea:	462e      	mov	r6, r5
 80072ec:	9507      	str	r5, [sp, #28]
 80072ee:	9505      	str	r5, [sp, #20]
 80072f0:	2322      	movs	r3, #34	; 0x22
 80072f2:	f04f 0a00 	mov.w	sl, #0
 80072f6:	f04f 0b00 	mov.w	fp, #0
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	e786      	b.n	800720c <_strtod_l+0x49c>
 80072fe:	bf00      	nop
 8007300:	0800a921 	.word	0x0800a921
 8007304:	0800a964 	.word	0x0800a964
 8007308:	0800a919 	.word	0x0800a919
 800730c:	0800aaa4 	.word	0x0800aaa4
 8007310:	0800ad50 	.word	0x0800ad50
 8007314:	0800ac30 	.word	0x0800ac30
 8007318:	0800ac08 	.word	0x0800ac08
 800731c:	7ff00000 	.word	0x7ff00000
 8007320:	7ca00000 	.word	0x7ca00000
 8007324:	7fefffff 	.word	0x7fefffff
 8007328:	f018 0310 	ands.w	r3, r8, #16
 800732c:	bf18      	it	ne
 800732e:	236a      	movne	r3, #106	; 0x6a
 8007330:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80076e0 <_strtod_l+0x970>
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	4650      	mov	r0, sl
 8007338:	4659      	mov	r1, fp
 800733a:	2300      	movs	r3, #0
 800733c:	f018 0f01 	tst.w	r8, #1
 8007340:	d004      	beq.n	800734c <_strtod_l+0x5dc>
 8007342:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007346:	f7f9 f977 	bl	8000638 <__aeabi_dmul>
 800734a:	2301      	movs	r3, #1
 800734c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007350:	f109 0908 	add.w	r9, r9, #8
 8007354:	d1f2      	bne.n	800733c <_strtod_l+0x5cc>
 8007356:	b10b      	cbz	r3, 800735c <_strtod_l+0x5ec>
 8007358:	4682      	mov	sl, r0
 800735a:	468b      	mov	fp, r1
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	b1c3      	cbz	r3, 8007392 <_strtod_l+0x622>
 8007360:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007364:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007368:	2b00      	cmp	r3, #0
 800736a:	4659      	mov	r1, fp
 800736c:	dd11      	ble.n	8007392 <_strtod_l+0x622>
 800736e:	2b1f      	cmp	r3, #31
 8007370:	f340 8124 	ble.w	80075bc <_strtod_l+0x84c>
 8007374:	2b34      	cmp	r3, #52	; 0x34
 8007376:	bfde      	ittt	le
 8007378:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800737c:	f04f 33ff 	movle.w	r3, #4294967295
 8007380:	fa03 f202 	lslle.w	r2, r3, r2
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	bfcc      	ite	gt
 800738a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800738e:	ea02 0b01 	andle.w	fp, r2, r1
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4650      	mov	r0, sl
 8007398:	4659      	mov	r1, fp
 800739a:	f7f9 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d1a2      	bne.n	80072e8 <_strtod_l+0x578>
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	9908      	ldr	r1, [sp, #32]
 80073a8:	462b      	mov	r3, r5
 80073aa:	463a      	mov	r2, r7
 80073ac:	4620      	mov	r0, r4
 80073ae:	f001 fe2d 	bl	800900c <__s2b>
 80073b2:	9007      	str	r0, [sp, #28]
 80073b4:	2800      	cmp	r0, #0
 80073b6:	f43f af1f 	beq.w	80071f8 <_strtod_l+0x488>
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	1b9e      	subs	r6, r3, r6
 80073be:	9b06      	ldr	r3, [sp, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bfb4      	ite	lt
 80073c4:	4633      	movlt	r3, r6
 80073c6:	2300      	movge	r3, #0
 80073c8:	930c      	str	r3, [sp, #48]	; 0x30
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	2500      	movs	r5, #0
 80073ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073d2:	9312      	str	r3, [sp, #72]	; 0x48
 80073d4:	462e      	mov	r6, r5
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	4620      	mov	r0, r4
 80073da:	6859      	ldr	r1, [r3, #4]
 80073dc:	f001 fd6e 	bl	8008ebc <_Balloc>
 80073e0:	9005      	str	r0, [sp, #20]
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f43f af0c 	beq.w	8007200 <_strtod_l+0x490>
 80073e8:	9b07      	ldr	r3, [sp, #28]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	3202      	adds	r2, #2
 80073ee:	f103 010c 	add.w	r1, r3, #12
 80073f2:	0092      	lsls	r2, r2, #2
 80073f4:	300c      	adds	r0, #12
 80073f6:	f001 fd53 	bl	8008ea0 <memcpy>
 80073fa:	ec4b ab10 	vmov	d0, sl, fp
 80073fe:	aa1a      	add	r2, sp, #104	; 0x68
 8007400:	a919      	add	r1, sp, #100	; 0x64
 8007402:	4620      	mov	r0, r4
 8007404:	f002 f948 	bl	8009698 <__d2b>
 8007408:	ec4b ab18 	vmov	d8, sl, fp
 800740c:	9018      	str	r0, [sp, #96]	; 0x60
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f aef6 	beq.w	8007200 <_strtod_l+0x490>
 8007414:	2101      	movs	r1, #1
 8007416:	4620      	mov	r0, r4
 8007418:	f001 fe92 	bl	8009140 <__i2b>
 800741c:	4606      	mov	r6, r0
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aeee 	beq.w	8007200 <_strtod_l+0x490>
 8007424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007426:	9904      	ldr	r1, [sp, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfab      	itete	ge
 800742c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800742e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007430:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007432:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007436:	bfac      	ite	ge
 8007438:	eb03 0902 	addge.w	r9, r3, r2
 800743c:	1ad7      	sublt	r7, r2, r3
 800743e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007440:	eba3 0801 	sub.w	r8, r3, r1
 8007444:	4490      	add	r8, r2
 8007446:	4ba1      	ldr	r3, [pc, #644]	; (80076cc <_strtod_l+0x95c>)
 8007448:	f108 38ff 	add.w	r8, r8, #4294967295
 800744c:	4598      	cmp	r8, r3
 800744e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007452:	f280 80c7 	bge.w	80075e4 <_strtod_l+0x874>
 8007456:	eba3 0308 	sub.w	r3, r3, r8
 800745a:	2b1f      	cmp	r3, #31
 800745c:	eba2 0203 	sub.w	r2, r2, r3
 8007460:	f04f 0101 	mov.w	r1, #1
 8007464:	f300 80b1 	bgt.w	80075ca <_strtod_l+0x85a>
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	930d      	str	r3, [sp, #52]	; 0x34
 800746e:	2300      	movs	r3, #0
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	eb09 0802 	add.w	r8, r9, r2
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	45c1      	cmp	r9, r8
 800747a:	4417      	add	r7, r2
 800747c:	441f      	add	r7, r3
 800747e:	464b      	mov	r3, r9
 8007480:	bfa8      	it	ge
 8007482:	4643      	movge	r3, r8
 8007484:	42bb      	cmp	r3, r7
 8007486:	bfa8      	it	ge
 8007488:	463b      	movge	r3, r7
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfc2      	ittt	gt
 800748e:	eba8 0803 	subgt.w	r8, r8, r3
 8007492:	1aff      	subgt	r7, r7, r3
 8007494:	eba9 0903 	subgt.w	r9, r9, r3
 8007498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800749a:	2b00      	cmp	r3, #0
 800749c:	dd17      	ble.n	80074ce <_strtod_l+0x75e>
 800749e:	4631      	mov	r1, r6
 80074a0:	461a      	mov	r2, r3
 80074a2:	4620      	mov	r0, r4
 80074a4:	f001 ff0c 	bl	80092c0 <__pow5mult>
 80074a8:	4606      	mov	r6, r0
 80074aa:	2800      	cmp	r0, #0
 80074ac:	f43f aea8 	beq.w	8007200 <_strtod_l+0x490>
 80074b0:	4601      	mov	r1, r0
 80074b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fe59 	bl	800916c <__multiply>
 80074ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f ae9f 	beq.w	8007200 <_strtod_l+0x490>
 80074c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074c4:	4620      	mov	r0, r4
 80074c6:	f001 fd39 	bl	8008f3c <_Bfree>
 80074ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074cc:	9318      	str	r3, [sp, #96]	; 0x60
 80074ce:	f1b8 0f00 	cmp.w	r8, #0
 80074d2:	f300 808c 	bgt.w	80075ee <_strtod_l+0x87e>
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dd08      	ble.n	80074ee <_strtod_l+0x77e>
 80074dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074de:	9905      	ldr	r1, [sp, #20]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f001 feed 	bl	80092c0 <__pow5mult>
 80074e6:	9005      	str	r0, [sp, #20]
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f43f ae89 	beq.w	8007200 <_strtod_l+0x490>
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	dd08      	ble.n	8007504 <_strtod_l+0x794>
 80074f2:	9905      	ldr	r1, [sp, #20]
 80074f4:	463a      	mov	r2, r7
 80074f6:	4620      	mov	r0, r4
 80074f8:	f001 ff3c 	bl	8009374 <__lshift>
 80074fc:	9005      	str	r0, [sp, #20]
 80074fe:	2800      	cmp	r0, #0
 8007500:	f43f ae7e 	beq.w	8007200 <_strtod_l+0x490>
 8007504:	f1b9 0f00 	cmp.w	r9, #0
 8007508:	dd08      	ble.n	800751c <_strtod_l+0x7ac>
 800750a:	4631      	mov	r1, r6
 800750c:	464a      	mov	r2, r9
 800750e:	4620      	mov	r0, r4
 8007510:	f001 ff30 	bl	8009374 <__lshift>
 8007514:	4606      	mov	r6, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f ae72 	beq.w	8007200 <_strtod_l+0x490>
 800751c:	9a05      	ldr	r2, [sp, #20]
 800751e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007520:	4620      	mov	r0, r4
 8007522:	f001 ffb3 	bl	800948c <__mdiff>
 8007526:	4605      	mov	r5, r0
 8007528:	2800      	cmp	r0, #0
 800752a:	f43f ae69 	beq.w	8007200 <_strtod_l+0x490>
 800752e:	68c3      	ldr	r3, [r0, #12]
 8007530:	930b      	str	r3, [sp, #44]	; 0x2c
 8007532:	2300      	movs	r3, #0
 8007534:	60c3      	str	r3, [r0, #12]
 8007536:	4631      	mov	r1, r6
 8007538:	f001 ff8c 	bl	8009454 <__mcmp>
 800753c:	2800      	cmp	r0, #0
 800753e:	da60      	bge.n	8007602 <_strtod_l+0x892>
 8007540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007542:	ea53 030a 	orrs.w	r3, r3, sl
 8007546:	f040 8082 	bne.w	800764e <_strtod_l+0x8de>
 800754a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800754e:	2b00      	cmp	r3, #0
 8007550:	d17d      	bne.n	800764e <_strtod_l+0x8de>
 8007552:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007556:	0d1b      	lsrs	r3, r3, #20
 8007558:	051b      	lsls	r3, r3, #20
 800755a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800755e:	d976      	bls.n	800764e <_strtod_l+0x8de>
 8007560:	696b      	ldr	r3, [r5, #20]
 8007562:	b913      	cbnz	r3, 800756a <_strtod_l+0x7fa>
 8007564:	692b      	ldr	r3, [r5, #16]
 8007566:	2b01      	cmp	r3, #1
 8007568:	dd71      	ble.n	800764e <_strtod_l+0x8de>
 800756a:	4629      	mov	r1, r5
 800756c:	2201      	movs	r2, #1
 800756e:	4620      	mov	r0, r4
 8007570:	f001 ff00 	bl	8009374 <__lshift>
 8007574:	4631      	mov	r1, r6
 8007576:	4605      	mov	r5, r0
 8007578:	f001 ff6c 	bl	8009454 <__mcmp>
 800757c:	2800      	cmp	r0, #0
 800757e:	dd66      	ble.n	800764e <_strtod_l+0x8de>
 8007580:	9904      	ldr	r1, [sp, #16]
 8007582:	4a53      	ldr	r2, [pc, #332]	; (80076d0 <_strtod_l+0x960>)
 8007584:	465b      	mov	r3, fp
 8007586:	2900      	cmp	r1, #0
 8007588:	f000 8081 	beq.w	800768e <_strtod_l+0x91e>
 800758c:	ea02 010b 	and.w	r1, r2, fp
 8007590:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007594:	dc7b      	bgt.n	800768e <_strtod_l+0x91e>
 8007596:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800759a:	f77f aea9 	ble.w	80072f0 <_strtod_l+0x580>
 800759e:	4b4d      	ldr	r3, [pc, #308]	; (80076d4 <_strtod_l+0x964>)
 80075a0:	4650      	mov	r0, sl
 80075a2:	4659      	mov	r1, fp
 80075a4:	2200      	movs	r2, #0
 80075a6:	f7f9 f847 	bl	8000638 <__aeabi_dmul>
 80075aa:	460b      	mov	r3, r1
 80075ac:	4303      	orrs	r3, r0
 80075ae:	bf08      	it	eq
 80075b0:	2322      	moveq	r3, #34	; 0x22
 80075b2:	4682      	mov	sl, r0
 80075b4:	468b      	mov	fp, r1
 80075b6:	bf08      	it	eq
 80075b8:	6023      	streq	r3, [r4, #0]
 80075ba:	e62b      	b.n	8007214 <_strtod_l+0x4a4>
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	ea03 0a0a 	and.w	sl, r3, sl
 80075c8:	e6e3      	b.n	8007392 <_strtod_l+0x622>
 80075ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80075ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80075d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80075d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80075da:	fa01 f308 	lsl.w	r3, r1, r8
 80075de:	9308      	str	r3, [sp, #32]
 80075e0:	910d      	str	r1, [sp, #52]	; 0x34
 80075e2:	e746      	b.n	8007472 <_strtod_l+0x702>
 80075e4:	2300      	movs	r3, #0
 80075e6:	9308      	str	r3, [sp, #32]
 80075e8:	2301      	movs	r3, #1
 80075ea:	930d      	str	r3, [sp, #52]	; 0x34
 80075ec:	e741      	b.n	8007472 <_strtod_l+0x702>
 80075ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075f0:	4642      	mov	r2, r8
 80075f2:	4620      	mov	r0, r4
 80075f4:	f001 febe 	bl	8009374 <__lshift>
 80075f8:	9018      	str	r0, [sp, #96]	; 0x60
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f47f af6b 	bne.w	80074d6 <_strtod_l+0x766>
 8007600:	e5fe      	b.n	8007200 <_strtod_l+0x490>
 8007602:	465f      	mov	r7, fp
 8007604:	d16e      	bne.n	80076e4 <_strtod_l+0x974>
 8007606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800760c:	b342      	cbz	r2, 8007660 <_strtod_l+0x8f0>
 800760e:	4a32      	ldr	r2, [pc, #200]	; (80076d8 <_strtod_l+0x968>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d128      	bne.n	8007666 <_strtod_l+0x8f6>
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	4651      	mov	r1, sl
 8007618:	b1eb      	cbz	r3, 8007656 <_strtod_l+0x8e6>
 800761a:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <_strtod_l+0x960>)
 800761c:	403b      	ands	r3, r7
 800761e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	d819      	bhi.n	800765c <_strtod_l+0x8ec>
 8007628:	0d1b      	lsrs	r3, r3, #20
 800762a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	4299      	cmp	r1, r3
 8007634:	d117      	bne.n	8007666 <_strtod_l+0x8f6>
 8007636:	4b29      	ldr	r3, [pc, #164]	; (80076dc <_strtod_l+0x96c>)
 8007638:	429f      	cmp	r7, r3
 800763a:	d102      	bne.n	8007642 <_strtod_l+0x8d2>
 800763c:	3101      	adds	r1, #1
 800763e:	f43f addf 	beq.w	8007200 <_strtod_l+0x490>
 8007642:	4b23      	ldr	r3, [pc, #140]	; (80076d0 <_strtod_l+0x960>)
 8007644:	403b      	ands	r3, r7
 8007646:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800764a:	f04f 0a00 	mov.w	sl, #0
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1a4      	bne.n	800759e <_strtod_l+0x82e>
 8007654:	e5de      	b.n	8007214 <_strtod_l+0x4a4>
 8007656:	f04f 33ff 	mov.w	r3, #4294967295
 800765a:	e7ea      	b.n	8007632 <_strtod_l+0x8c2>
 800765c:	4613      	mov	r3, r2
 800765e:	e7e8      	b.n	8007632 <_strtod_l+0x8c2>
 8007660:	ea53 030a 	orrs.w	r3, r3, sl
 8007664:	d08c      	beq.n	8007580 <_strtod_l+0x810>
 8007666:	9b08      	ldr	r3, [sp, #32]
 8007668:	b1db      	cbz	r3, 80076a2 <_strtod_l+0x932>
 800766a:	423b      	tst	r3, r7
 800766c:	d0ef      	beq.n	800764e <_strtod_l+0x8de>
 800766e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007670:	9a04      	ldr	r2, [sp, #16]
 8007672:	4650      	mov	r0, sl
 8007674:	4659      	mov	r1, fp
 8007676:	b1c3      	cbz	r3, 80076aa <_strtod_l+0x93a>
 8007678:	f7ff fb5c 	bl	8006d34 <sulp>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	ec51 0b18 	vmov	r0, r1, d8
 8007684:	f7f8 fe22 	bl	80002cc <__adddf3>
 8007688:	4682      	mov	sl, r0
 800768a:	468b      	mov	fp, r1
 800768c:	e7df      	b.n	800764e <_strtod_l+0x8de>
 800768e:	4013      	ands	r3, r2
 8007690:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007694:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007698:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800769c:	f04f 3aff 	mov.w	sl, #4294967295
 80076a0:	e7d5      	b.n	800764e <_strtod_l+0x8de>
 80076a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a4:	ea13 0f0a 	tst.w	r3, sl
 80076a8:	e7e0      	b.n	800766c <_strtod_l+0x8fc>
 80076aa:	f7ff fb43 	bl	8006d34 <sulp>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	ec51 0b18 	vmov	r0, r1, d8
 80076b6:	f7f8 fe07 	bl	80002c8 <__aeabi_dsub>
 80076ba:	2200      	movs	r2, #0
 80076bc:	2300      	movs	r3, #0
 80076be:	4682      	mov	sl, r0
 80076c0:	468b      	mov	fp, r1
 80076c2:	f7f9 fa21 	bl	8000b08 <__aeabi_dcmpeq>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0c1      	beq.n	800764e <_strtod_l+0x8de>
 80076ca:	e611      	b.n	80072f0 <_strtod_l+0x580>
 80076cc:	fffffc02 	.word	0xfffffc02
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	39500000 	.word	0x39500000
 80076d8:	000fffff 	.word	0x000fffff
 80076dc:	7fefffff 	.word	0x7fefffff
 80076e0:	0800a978 	.word	0x0800a978
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	f002 f832 	bl	8009750 <__ratio>
 80076ec:	ec59 8b10 	vmov	r8, r9, d0
 80076f0:	ee10 0a10 	vmov	r0, s0
 80076f4:	2200      	movs	r2, #0
 80076f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f9 fa18 	bl	8000b30 <__aeabi_dcmple>
 8007700:	2800      	cmp	r0, #0
 8007702:	d07a      	beq.n	80077fa <_strtod_l+0xa8a>
 8007704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d04a      	beq.n	80077a0 <_strtod_l+0xa30>
 800770a:	4b95      	ldr	r3, [pc, #596]	; (8007960 <_strtod_l+0xbf0>)
 800770c:	2200      	movs	r2, #0
 800770e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007712:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007960 <_strtod_l+0xbf0>
 8007716:	f04f 0800 	mov.w	r8, #0
 800771a:	4b92      	ldr	r3, [pc, #584]	; (8007964 <_strtod_l+0xbf4>)
 800771c:	403b      	ands	r3, r7
 800771e:	930d      	str	r3, [sp, #52]	; 0x34
 8007720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007722:	4b91      	ldr	r3, [pc, #580]	; (8007968 <_strtod_l+0xbf8>)
 8007724:	429a      	cmp	r2, r3
 8007726:	f040 80b0 	bne.w	800788a <_strtod_l+0xb1a>
 800772a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800772e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007732:	ec4b ab10 	vmov	d0, sl, fp
 8007736:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800773a:	f001 ff31 	bl	80095a0 <__ulp>
 800773e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007742:	ec53 2b10 	vmov	r2, r3, d0
 8007746:	f7f8 ff77 	bl	8000638 <__aeabi_dmul>
 800774a:	4652      	mov	r2, sl
 800774c:	465b      	mov	r3, fp
 800774e:	f7f8 fdbd 	bl	80002cc <__adddf3>
 8007752:	460b      	mov	r3, r1
 8007754:	4983      	ldr	r1, [pc, #524]	; (8007964 <_strtod_l+0xbf4>)
 8007756:	4a85      	ldr	r2, [pc, #532]	; (800796c <_strtod_l+0xbfc>)
 8007758:	4019      	ands	r1, r3
 800775a:	4291      	cmp	r1, r2
 800775c:	4682      	mov	sl, r0
 800775e:	d960      	bls.n	8007822 <_strtod_l+0xab2>
 8007760:	ee18 3a90 	vmov	r3, s17
 8007764:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007768:	4293      	cmp	r3, r2
 800776a:	d104      	bne.n	8007776 <_strtod_l+0xa06>
 800776c:	ee18 3a10 	vmov	r3, s16
 8007770:	3301      	adds	r3, #1
 8007772:	f43f ad45 	beq.w	8007200 <_strtod_l+0x490>
 8007776:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007978 <_strtod_l+0xc08>
 800777a:	f04f 3aff 	mov.w	sl, #4294967295
 800777e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007780:	4620      	mov	r0, r4
 8007782:	f001 fbdb 	bl	8008f3c <_Bfree>
 8007786:	9905      	ldr	r1, [sp, #20]
 8007788:	4620      	mov	r0, r4
 800778a:	f001 fbd7 	bl	8008f3c <_Bfree>
 800778e:	4631      	mov	r1, r6
 8007790:	4620      	mov	r0, r4
 8007792:	f001 fbd3 	bl	8008f3c <_Bfree>
 8007796:	4629      	mov	r1, r5
 8007798:	4620      	mov	r0, r4
 800779a:	f001 fbcf 	bl	8008f3c <_Bfree>
 800779e:	e61a      	b.n	80073d6 <_strtod_l+0x666>
 80077a0:	f1ba 0f00 	cmp.w	sl, #0
 80077a4:	d11b      	bne.n	80077de <_strtod_l+0xa6e>
 80077a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077aa:	b9f3      	cbnz	r3, 80077ea <_strtod_l+0xa7a>
 80077ac:	4b6c      	ldr	r3, [pc, #432]	; (8007960 <_strtod_l+0xbf0>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	f7f9 f9b2 	bl	8000b1c <__aeabi_dcmplt>
 80077b8:	b9d0      	cbnz	r0, 80077f0 <_strtod_l+0xa80>
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	4b6c      	ldr	r3, [pc, #432]	; (8007970 <_strtod_l+0xc00>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff39 	bl	8000638 <__aeabi_dmul>
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80077d2:	9315      	str	r3, [sp, #84]	; 0x54
 80077d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077dc:	e79d      	b.n	800771a <_strtod_l+0x9aa>
 80077de:	f1ba 0f01 	cmp.w	sl, #1
 80077e2:	d102      	bne.n	80077ea <_strtod_l+0xa7a>
 80077e4:	2f00      	cmp	r7, #0
 80077e6:	f43f ad83 	beq.w	80072f0 <_strtod_l+0x580>
 80077ea:	4b62      	ldr	r3, [pc, #392]	; (8007974 <_strtod_l+0xc04>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	e78e      	b.n	800770e <_strtod_l+0x99e>
 80077f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007970 <_strtod_l+0xc00>
 80077f4:	f04f 0800 	mov.w	r8, #0
 80077f8:	e7e7      	b.n	80077ca <_strtod_l+0xa5a>
 80077fa:	4b5d      	ldr	r3, [pc, #372]	; (8007970 <_strtod_l+0xc00>)
 80077fc:	4640      	mov	r0, r8
 80077fe:	4649      	mov	r1, r9
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007808:	4680      	mov	r8, r0
 800780a:	4689      	mov	r9, r1
 800780c:	b933      	cbnz	r3, 800781c <_strtod_l+0xaac>
 800780e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007812:	900e      	str	r0, [sp, #56]	; 0x38
 8007814:	930f      	str	r3, [sp, #60]	; 0x3c
 8007816:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800781a:	e7dd      	b.n	80077d8 <_strtod_l+0xa68>
 800781c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007820:	e7f9      	b.n	8007816 <_strtod_l+0xaa6>
 8007822:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1a8      	bne.n	800777e <_strtod_l+0xa0e>
 800782c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007832:	0d1b      	lsrs	r3, r3, #20
 8007834:	051b      	lsls	r3, r3, #20
 8007836:	429a      	cmp	r2, r3
 8007838:	d1a1      	bne.n	800777e <_strtod_l+0xa0e>
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f9 fa5b 	bl	8000cf8 <__aeabi_d2lz>
 8007842:	f7f8 fecb 	bl	80005dc <__aeabi_l2d>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fd3b 	bl	80002c8 <__aeabi_dsub>
 8007852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007858:	ea43 030a 	orr.w	r3, r3, sl
 800785c:	4313      	orrs	r3, r2
 800785e:	4680      	mov	r8, r0
 8007860:	4689      	mov	r9, r1
 8007862:	d055      	beq.n	8007910 <_strtod_l+0xba0>
 8007864:	a336      	add	r3, pc, #216	; (adr r3, 8007940 <_strtod_l+0xbd0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f9 f957 	bl	8000b1c <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	f47f acd0 	bne.w	8007214 <_strtod_l+0x4a4>
 8007874:	a334      	add	r3, pc, #208	; (adr r3, 8007948 <_strtod_l+0xbd8>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	f7f9 f96b 	bl	8000b58 <__aeabi_dcmpgt>
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f af7b 	beq.w	800777e <_strtod_l+0xa0e>
 8007888:	e4c4      	b.n	8007214 <_strtod_l+0x4a4>
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	b333      	cbz	r3, 80078dc <_strtod_l+0xb6c>
 800788e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007890:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007894:	d822      	bhi.n	80078dc <_strtod_l+0xb6c>
 8007896:	a32e      	add	r3, pc, #184	; (adr r3, 8007950 <_strtod_l+0xbe0>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f9 f946 	bl	8000b30 <__aeabi_dcmple>
 80078a4:	b1a0      	cbz	r0, 80078d0 <_strtod_l+0xb60>
 80078a6:	4649      	mov	r1, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	f7f9 f99d 	bl	8000be8 <__aeabi_d2uiz>
 80078ae:	2801      	cmp	r0, #1
 80078b0:	bf38      	it	cc
 80078b2:	2001      	movcc	r0, #1
 80078b4:	f7f8 fe46 	bl	8000544 <__aeabi_ui2d>
 80078b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ba:	4680      	mov	r8, r0
 80078bc:	4689      	mov	r9, r1
 80078be:	bb23      	cbnz	r3, 800790a <_strtod_l+0xb9a>
 80078c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078c4:	9010      	str	r0, [sp, #64]	; 0x40
 80078c6:	9311      	str	r3, [sp, #68]	; 0x44
 80078c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078e0:	eeb0 0a48 	vmov.f32	s0, s16
 80078e4:	eef0 0a68 	vmov.f32	s1, s17
 80078e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078ec:	f001 fe58 	bl	80095a0 <__ulp>
 80078f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078f4:	ec53 2b10 	vmov	r2, r3, d0
 80078f8:	f7f8 fe9e 	bl	8000638 <__aeabi_dmul>
 80078fc:	ec53 2b18 	vmov	r2, r3, d8
 8007900:	f7f8 fce4 	bl	80002cc <__adddf3>
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	e78d      	b.n	8007826 <_strtod_l+0xab6>
 800790a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800790e:	e7db      	b.n	80078c8 <_strtod_l+0xb58>
 8007910:	a311      	add	r3, pc, #68	; (adr r3, 8007958 <_strtod_l+0xbe8>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f9 f901 	bl	8000b1c <__aeabi_dcmplt>
 800791a:	e7b2      	b.n	8007882 <_strtod_l+0xb12>
 800791c:	2300      	movs	r3, #0
 800791e:	930a      	str	r3, [sp, #40]	; 0x28
 8007920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	f7ff ba6b 	b.w	8006e00 <_strtod_l+0x90>
 800792a:	2a65      	cmp	r2, #101	; 0x65
 800792c:	f43f ab5f 	beq.w	8006fee <_strtod_l+0x27e>
 8007930:	2a45      	cmp	r2, #69	; 0x45
 8007932:	f43f ab5c 	beq.w	8006fee <_strtod_l+0x27e>
 8007936:	2301      	movs	r3, #1
 8007938:	f7ff bb94 	b.w	8007064 <_strtod_l+0x2f4>
 800793c:	f3af 8000 	nop.w
 8007940:	94a03595 	.word	0x94a03595
 8007944:	3fdfffff 	.word	0x3fdfffff
 8007948:	35afe535 	.word	0x35afe535
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	ffc00000 	.word	0xffc00000
 8007954:	41dfffff 	.word	0x41dfffff
 8007958:	94a03595 	.word	0x94a03595
 800795c:	3fcfffff 	.word	0x3fcfffff
 8007960:	3ff00000 	.word	0x3ff00000
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	7fe00000 	.word	0x7fe00000
 800796c:	7c9fffff 	.word	0x7c9fffff
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	bff00000 	.word	0xbff00000
 8007978:	7fefffff 	.word	0x7fefffff

0800797c <_strtod_r>:
 800797c:	4b01      	ldr	r3, [pc, #4]	; (8007984 <_strtod_r+0x8>)
 800797e:	f7ff b9f7 	b.w	8006d70 <_strtod_l>
 8007982:	bf00      	nop
 8007984:	20000074 	.word	0x20000074

08007988 <_strtol_l.constprop.0>:
 8007988:	2b01      	cmp	r3, #1
 800798a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798e:	d001      	beq.n	8007994 <_strtol_l.constprop.0+0xc>
 8007990:	2b24      	cmp	r3, #36	; 0x24
 8007992:	d906      	bls.n	80079a2 <_strtol_l.constprop.0+0x1a>
 8007994:	f7fe fafc 	bl	8005f90 <__errno>
 8007998:	2316      	movs	r3, #22
 800799a:	6003      	str	r3, [r0, #0]
 800799c:	2000      	movs	r0, #0
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a88 <_strtol_l.constprop.0+0x100>
 80079a6:	460d      	mov	r5, r1
 80079a8:	462e      	mov	r6, r5
 80079aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80079b2:	f017 0708 	ands.w	r7, r7, #8
 80079b6:	d1f7      	bne.n	80079a8 <_strtol_l.constprop.0+0x20>
 80079b8:	2c2d      	cmp	r4, #45	; 0x2d
 80079ba:	d132      	bne.n	8007a22 <_strtol_l.constprop.0+0x9a>
 80079bc:	782c      	ldrb	r4, [r5, #0]
 80079be:	2701      	movs	r7, #1
 80079c0:	1cb5      	adds	r5, r6, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d05b      	beq.n	8007a7e <_strtol_l.constprop.0+0xf6>
 80079c6:	2b10      	cmp	r3, #16
 80079c8:	d109      	bne.n	80079de <_strtol_l.constprop.0+0x56>
 80079ca:	2c30      	cmp	r4, #48	; 0x30
 80079cc:	d107      	bne.n	80079de <_strtol_l.constprop.0+0x56>
 80079ce:	782c      	ldrb	r4, [r5, #0]
 80079d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079d4:	2c58      	cmp	r4, #88	; 0x58
 80079d6:	d14d      	bne.n	8007a74 <_strtol_l.constprop.0+0xec>
 80079d8:	786c      	ldrb	r4, [r5, #1]
 80079da:	2310      	movs	r3, #16
 80079dc:	3502      	adds	r5, #2
 80079de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80079e6:	f04f 0c00 	mov.w	ip, #0
 80079ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80079ee:	4666      	mov	r6, ip
 80079f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80079f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80079f8:	f1be 0f09 	cmp.w	lr, #9
 80079fc:	d816      	bhi.n	8007a2c <_strtol_l.constprop.0+0xa4>
 80079fe:	4674      	mov	r4, lr
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	dd24      	ble.n	8007a4e <_strtol_l.constprop.0+0xc6>
 8007a04:	f1bc 0f00 	cmp.w	ip, #0
 8007a08:	db1e      	blt.n	8007a48 <_strtol_l.constprop.0+0xc0>
 8007a0a:	45b1      	cmp	r9, r6
 8007a0c:	d31c      	bcc.n	8007a48 <_strtol_l.constprop.0+0xc0>
 8007a0e:	d101      	bne.n	8007a14 <_strtol_l.constprop.0+0x8c>
 8007a10:	45a2      	cmp	sl, r4
 8007a12:	db19      	blt.n	8007a48 <_strtol_l.constprop.0+0xc0>
 8007a14:	fb06 4603 	mla	r6, r6, r3, r4
 8007a18:	f04f 0c01 	mov.w	ip, #1
 8007a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a20:	e7e8      	b.n	80079f4 <_strtol_l.constprop.0+0x6c>
 8007a22:	2c2b      	cmp	r4, #43	; 0x2b
 8007a24:	bf04      	itt	eq
 8007a26:	782c      	ldrbeq	r4, [r5, #0]
 8007a28:	1cb5      	addeq	r5, r6, #2
 8007a2a:	e7ca      	b.n	80079c2 <_strtol_l.constprop.0+0x3a>
 8007a2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007a30:	f1be 0f19 	cmp.w	lr, #25
 8007a34:	d801      	bhi.n	8007a3a <_strtol_l.constprop.0+0xb2>
 8007a36:	3c37      	subs	r4, #55	; 0x37
 8007a38:	e7e2      	b.n	8007a00 <_strtol_l.constprop.0+0x78>
 8007a3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007a3e:	f1be 0f19 	cmp.w	lr, #25
 8007a42:	d804      	bhi.n	8007a4e <_strtol_l.constprop.0+0xc6>
 8007a44:	3c57      	subs	r4, #87	; 0x57
 8007a46:	e7db      	b.n	8007a00 <_strtol_l.constprop.0+0x78>
 8007a48:	f04f 3cff 	mov.w	ip, #4294967295
 8007a4c:	e7e6      	b.n	8007a1c <_strtol_l.constprop.0+0x94>
 8007a4e:	f1bc 0f00 	cmp.w	ip, #0
 8007a52:	da05      	bge.n	8007a60 <_strtol_l.constprop.0+0xd8>
 8007a54:	2322      	movs	r3, #34	; 0x22
 8007a56:	6003      	str	r3, [r0, #0]
 8007a58:	4646      	mov	r6, r8
 8007a5a:	b942      	cbnz	r2, 8007a6e <_strtol_l.constprop.0+0xe6>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	e79e      	b.n	800799e <_strtol_l.constprop.0+0x16>
 8007a60:	b107      	cbz	r7, 8007a64 <_strtol_l.constprop.0+0xdc>
 8007a62:	4276      	negs	r6, r6
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	d0f9      	beq.n	8007a5c <_strtol_l.constprop.0+0xd4>
 8007a68:	f1bc 0f00 	cmp.w	ip, #0
 8007a6c:	d000      	beq.n	8007a70 <_strtol_l.constprop.0+0xe8>
 8007a6e:	1e69      	subs	r1, r5, #1
 8007a70:	6011      	str	r1, [r2, #0]
 8007a72:	e7f3      	b.n	8007a5c <_strtol_l.constprop.0+0xd4>
 8007a74:	2430      	movs	r4, #48	; 0x30
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1b1      	bne.n	80079de <_strtol_l.constprop.0+0x56>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	e7af      	b.n	80079de <_strtol_l.constprop.0+0x56>
 8007a7e:	2c30      	cmp	r4, #48	; 0x30
 8007a80:	d0a5      	beq.n	80079ce <_strtol_l.constprop.0+0x46>
 8007a82:	230a      	movs	r3, #10
 8007a84:	e7ab      	b.n	80079de <_strtol_l.constprop.0+0x56>
 8007a86:	bf00      	nop
 8007a88:	0800a9a1 	.word	0x0800a9a1

08007a8c <_strtol_r>:
 8007a8c:	f7ff bf7c 	b.w	8007988 <_strtol_l.constprop.0>

08007a90 <quorem>:
 8007a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	6903      	ldr	r3, [r0, #16]
 8007a96:	690c      	ldr	r4, [r1, #16]
 8007a98:	42a3      	cmp	r3, r4
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	f2c0 8081 	blt.w	8007ba2 <quorem+0x112>
 8007aa0:	3c01      	subs	r4, #1
 8007aa2:	f101 0814 	add.w	r8, r1, #20
 8007aa6:	f100 0514 	add.w	r5, r0, #20
 8007aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	429a      	cmp	r2, r3
 8007abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ac8:	d331      	bcc.n	8007b2e <quorem+0x9e>
 8007aca:	f04f 0e00 	mov.w	lr, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	46ac      	mov	ip, r5
 8007ad2:	46f2      	mov	sl, lr
 8007ad4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ad8:	b293      	uxth	r3, r2
 8007ada:	fb06 e303 	mla	r3, r6, r3, lr
 8007ade:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ae8:	f8dc a000 	ldr.w	sl, [ip]
 8007aec:	0c12      	lsrs	r2, r2, #16
 8007aee:	fa13 f38a 	uxtah	r3, r3, sl
 8007af2:	fb06 e202 	mla	r2, r6, r2, lr
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007afe:	b292      	uxth	r2, r2
 8007b00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b08:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b0c:	4581      	cmp	r9, r0
 8007b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b12:	f84c 3b04 	str.w	r3, [ip], #4
 8007b16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b1a:	d2db      	bcs.n	8007ad4 <quorem+0x44>
 8007b1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b20:	b92b      	cbnz	r3, 8007b2e <quorem+0x9e>
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	429d      	cmp	r5, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	d32e      	bcc.n	8007b8a <quorem+0xfa>
 8007b2c:	613c      	str	r4, [r7, #16]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f001 fc90 	bl	8009454 <__mcmp>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	db24      	blt.n	8007b82 <quorem+0xf2>
 8007b38:	3601      	adds	r6, #1
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f04f 0c00 	mov.w	ip, #0
 8007b40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b44:	f8d0 e000 	ldr.w	lr, [r0]
 8007b48:	b293      	uxth	r3, r2
 8007b4a:	ebac 0303 	sub.w	r3, ip, r3
 8007b4e:	0c12      	lsrs	r2, r2, #16
 8007b50:	fa13 f38e 	uxtah	r3, r3, lr
 8007b54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b62:	45c1      	cmp	r9, r8
 8007b64:	f840 3b04 	str.w	r3, [r0], #4
 8007b68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b6c:	d2e8      	bcs.n	8007b40 <quorem+0xb0>
 8007b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b76:	b922      	cbnz	r2, 8007b82 <quorem+0xf2>
 8007b78:	3b04      	subs	r3, #4
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	d30a      	bcc.n	8007b96 <quorem+0x106>
 8007b80:	613c      	str	r4, [r7, #16]
 8007b82:	4630      	mov	r0, r6
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8a:	6812      	ldr	r2, [r2, #0]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	d1cc      	bne.n	8007b2c <quorem+0x9c>
 8007b92:	3c01      	subs	r4, #1
 8007b94:	e7c7      	b.n	8007b26 <quorem+0x96>
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d1f0      	bne.n	8007b80 <quorem+0xf0>
 8007b9e:	3c01      	subs	r4, #1
 8007ba0:	e7eb      	b.n	8007b7a <quorem+0xea>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e7ee      	b.n	8007b84 <quorem+0xf4>
	...

08007ba8 <_dtoa_r>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	ed2d 8b04 	vpush	{d8-d9}
 8007bb0:	ec57 6b10 	vmov	r6, r7, d0
 8007bb4:	b093      	sub	sp, #76	; 0x4c
 8007bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bbc:	9106      	str	r1, [sp, #24]
 8007bbe:	ee10 aa10 	vmov	sl, s0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bc8:	46bb      	mov	fp, r7
 8007bca:	b975      	cbnz	r5, 8007bea <_dtoa_r+0x42>
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f001 f94d 	bl	8008e6c <malloc>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007bd6:	b920      	cbnz	r0, 8007be2 <_dtoa_r+0x3a>
 8007bd8:	4ba7      	ldr	r3, [pc, #668]	; (8007e78 <_dtoa_r+0x2d0>)
 8007bda:	21ea      	movs	r1, #234	; 0xea
 8007bdc:	48a7      	ldr	r0, [pc, #668]	; (8007e7c <_dtoa_r+0x2d4>)
 8007bde:	f002 f8bd 	bl	8009d5c <__assert_func>
 8007be2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007be6:	6005      	str	r5, [r0, #0]
 8007be8:	60c5      	str	r5, [r0, #12]
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	b151      	cbz	r1, 8007c06 <_dtoa_r+0x5e>
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	604a      	str	r2, [r1, #4]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4093      	lsls	r3, r2
 8007bf8:	608b      	str	r3, [r1, #8]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f001 f99e 	bl	8008f3c <_Bfree>
 8007c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	1e3b      	subs	r3, r7, #0
 8007c08:	bfaa      	itet	ge
 8007c0a:	2300      	movge	r3, #0
 8007c0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c10:	f8c8 3000 	strge.w	r3, [r8]
 8007c14:	4b9a      	ldr	r3, [pc, #616]	; (8007e80 <_dtoa_r+0x2d8>)
 8007c16:	bfbc      	itt	lt
 8007c18:	2201      	movlt	r2, #1
 8007c1a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c1e:	ea33 030b 	bics.w	r3, r3, fp
 8007c22:	d11b      	bne.n	8007c5c <_dtoa_r+0xb4>
 8007c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c30:	4333      	orrs	r3, r6
 8007c32:	f000 8592 	beq.w	800875a <_dtoa_r+0xbb2>
 8007c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c38:	b963      	cbnz	r3, 8007c54 <_dtoa_r+0xac>
 8007c3a:	4b92      	ldr	r3, [pc, #584]	; (8007e84 <_dtoa_r+0x2dc>)
 8007c3c:	e022      	b.n	8007c84 <_dtoa_r+0xdc>
 8007c3e:	4b92      	ldr	r3, [pc, #584]	; (8007e88 <_dtoa_r+0x2e0>)
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	3308      	adds	r3, #8
 8007c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	9801      	ldr	r0, [sp, #4]
 8007c4a:	b013      	add	sp, #76	; 0x4c
 8007c4c:	ecbd 8b04 	vpop	{d8-d9}
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	4b8b      	ldr	r3, [pc, #556]	; (8007e84 <_dtoa_r+0x2dc>)
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	3303      	adds	r3, #3
 8007c5a:	e7f3      	b.n	8007c44 <_dtoa_r+0x9c>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	f7f8 ff50 	bl	8000b08 <__aeabi_dcmpeq>
 8007c68:	ec4b ab19 	vmov	d9, sl, fp
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	b158      	cbz	r0, 8007c88 <_dtoa_r+0xe0>
 8007c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c72:	2301      	movs	r3, #1
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 856b 	beq.w	8008754 <_dtoa_r+0xbac>
 8007c7e:	4883      	ldr	r0, [pc, #524]	; (8007e8c <_dtoa_r+0x2e4>)
 8007c80:	6018      	str	r0, [r3, #0]
 8007c82:	1e43      	subs	r3, r0, #1
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	e7df      	b.n	8007c48 <_dtoa_r+0xa0>
 8007c88:	ec4b ab10 	vmov	d0, sl, fp
 8007c8c:	aa10      	add	r2, sp, #64	; 0x40
 8007c8e:	a911      	add	r1, sp, #68	; 0x44
 8007c90:	4620      	mov	r0, r4
 8007c92:	f001 fd01 	bl	8009698 <__d2b>
 8007c96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c9a:	ee08 0a10 	vmov	s16, r0
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	f000 8084 	beq.w	8007dac <_dtoa_r+0x204>
 8007ca4:	ee19 3a90 	vmov	r3, s19
 8007ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cb0:	4656      	mov	r6, sl
 8007cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cbe:	4b74      	ldr	r3, [pc, #464]	; (8007e90 <_dtoa_r+0x2e8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 faff 	bl	80002c8 <__aeabi_dsub>
 8007cca:	a365      	add	r3, pc, #404	; (adr r3, 8007e60 <_dtoa_r+0x2b8>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fcb2 	bl	8000638 <__aeabi_dmul>
 8007cd4:	a364      	add	r3, pc, #400	; (adr r3, 8007e68 <_dtoa_r+0x2c0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 faf7 	bl	80002cc <__adddf3>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	460f      	mov	r7, r1
 8007ce4:	f7f8 fc3e 	bl	8000564 <__aeabi_i2d>
 8007ce8:	a361      	add	r3, pc, #388	; (adr r3, 8007e70 <_dtoa_r+0x2c8>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fca3 	bl	8000638 <__aeabi_dmul>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fae7 	bl	80002cc <__adddf3>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	f7f8 ff49 	bl	8000b98 <__aeabi_d2iz>
 8007d06:	2200      	movs	r2, #0
 8007d08:	9000      	str	r0, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 ff04 	bl	8000b1c <__aeabi_dcmplt>
 8007d14:	b150      	cbz	r0, 8007d2c <_dtoa_r+0x184>
 8007d16:	9800      	ldr	r0, [sp, #0]
 8007d18:	f7f8 fc24 	bl	8000564 <__aeabi_i2d>
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	463b      	mov	r3, r7
 8007d20:	f7f8 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 8007d24:	b910      	cbnz	r0, 8007d2c <_dtoa_r+0x184>
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	2b16      	cmp	r3, #22
 8007d30:	d85a      	bhi.n	8007de8 <_dtoa_r+0x240>
 8007d32:	9a00      	ldr	r2, [sp, #0]
 8007d34:	4b57      	ldr	r3, [pc, #348]	; (8007e94 <_dtoa_r+0x2ec>)
 8007d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	ec51 0b19 	vmov	r0, r1, d9
 8007d42:	f7f8 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d050      	beq.n	8007dec <_dtoa_r+0x244>
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	2300      	movs	r3, #0
 8007d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d56:	1b5d      	subs	r5, r3, r5
 8007d58:	1e6b      	subs	r3, r5, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	bf45      	ittet	mi
 8007d5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d62:	9304      	strmi	r3, [sp, #16]
 8007d64:	2300      	movpl	r3, #0
 8007d66:	2300      	movmi	r3, #0
 8007d68:	bf4c      	ite	mi
 8007d6a:	9305      	strmi	r3, [sp, #20]
 8007d6c:	9304      	strpl	r3, [sp, #16]
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db3d      	blt.n	8007df0 <_dtoa_r+0x248>
 8007d74:	9b05      	ldr	r3, [sp, #20]
 8007d76:	9a00      	ldr	r2, [sp, #0]
 8007d78:	920a      	str	r2, [sp, #40]	; 0x28
 8007d7a:	4413      	add	r3, r2
 8007d7c:	9305      	str	r3, [sp, #20]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	9b06      	ldr	r3, [sp, #24]
 8007d84:	2b09      	cmp	r3, #9
 8007d86:	f200 8089 	bhi.w	8007e9c <_dtoa_r+0x2f4>
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	bfc4      	itt	gt
 8007d8e:	3b04      	subgt	r3, #4
 8007d90:	9306      	strgt	r3, [sp, #24]
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	f1a3 0302 	sub.w	r3, r3, #2
 8007d98:	bfcc      	ite	gt
 8007d9a:	2500      	movgt	r5, #0
 8007d9c:	2501      	movle	r5, #1
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	f200 8087 	bhi.w	8007eb2 <_dtoa_r+0x30a>
 8007da4:	e8df f003 	tbb	[pc, r3]
 8007da8:	59383a2d 	.word	0x59383a2d
 8007dac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007db0:	441d      	add	r5, r3
 8007db2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	bfc1      	itttt	gt
 8007dba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dca:	bfda      	itte	le
 8007dcc:	f1c3 0320 	rsble	r3, r3, #32
 8007dd0:	fa06 f003 	lslle.w	r0, r6, r3
 8007dd4:	4318      	orrgt	r0, r3
 8007dd6:	f7f8 fbb5 	bl	8000544 <__aeabi_ui2d>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4606      	mov	r6, r0
 8007dde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007de2:	3d01      	subs	r5, #1
 8007de4:	930e      	str	r3, [sp, #56]	; 0x38
 8007de6:	e76a      	b.n	8007cbe <_dtoa_r+0x116>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e7b2      	b.n	8007d52 <_dtoa_r+0x1aa>
 8007dec:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dee:	e7b1      	b.n	8007d54 <_dtoa_r+0x1ac>
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	9a00      	ldr	r2, [sp, #0]
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	4253      	negs	r3, r2
 8007dfa:	9307      	str	r3, [sp, #28]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007e00:	e7bf      	b.n	8007d82 <_dtoa_r+0x1da>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc55      	bgt.n	8007eb8 <_dtoa_r+0x310>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e12:	461a      	mov	r2, r3
 8007e14:	9209      	str	r2, [sp, #36]	; 0x24
 8007e16:	e00c      	b.n	8007e32 <_dtoa_r+0x28a>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e7f3      	b.n	8007e04 <_dtoa_r+0x25c>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e20:	9308      	str	r3, [sp, #32]
 8007e22:	9b00      	ldr	r3, [sp, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	9302      	str	r3, [sp, #8]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	bfb8      	it	lt
 8007e30:	2301      	movlt	r3, #1
 8007e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e34:	2200      	movs	r2, #0
 8007e36:	6042      	str	r2, [r0, #4]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	f102 0614 	add.w	r6, r2, #20
 8007e3e:	429e      	cmp	r6, r3
 8007e40:	6841      	ldr	r1, [r0, #4]
 8007e42:	d93d      	bls.n	8007ec0 <_dtoa_r+0x318>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f001 f839 	bl	8008ebc <_Balloc>
 8007e4a:	9001      	str	r0, [sp, #4]
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d13b      	bne.n	8007ec8 <_dtoa_r+0x320>
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <_dtoa_r+0x2f0>)
 8007e52:	4602      	mov	r2, r0
 8007e54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e58:	e6c0      	b.n	8007bdc <_dtoa_r+0x34>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e7df      	b.n	8007e1e <_dtoa_r+0x276>
 8007e5e:	bf00      	nop
 8007e60:	636f4361 	.word	0x636f4361
 8007e64:	3fd287a7 	.word	0x3fd287a7
 8007e68:	8b60c8b3 	.word	0x8b60c8b3
 8007e6c:	3fc68a28 	.word	0x3fc68a28
 8007e70:	509f79fb 	.word	0x509f79fb
 8007e74:	3fd34413 	.word	0x3fd34413
 8007e78:	0800aaae 	.word	0x0800aaae
 8007e7c:	0800aac5 	.word	0x0800aac5
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	0800aaaa 	.word	0x0800aaaa
 8007e88:	0800aaa1 	.word	0x0800aaa1
 8007e8c:	0800a925 	.word	0x0800a925
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	0800ac30 	.word	0x0800ac30
 8007e98:	0800ab20 	.word	0x0800ab20
 8007e9c:	2501      	movs	r5, #1
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9306      	str	r3, [sp, #24]
 8007ea2:	9508      	str	r5, [sp, #32]
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	2312      	movs	r3, #18
 8007eb0:	e7b0      	b.n	8007e14 <_dtoa_r+0x26c>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	9308      	str	r3, [sp, #32]
 8007eb6:	e7f5      	b.n	8007ea4 <_dtoa_r+0x2fc>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ebe:	e7b8      	b.n	8007e32 <_dtoa_r+0x28a>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	6041      	str	r1, [r0, #4]
 8007ec4:	0052      	lsls	r2, r2, #1
 8007ec6:	e7b8      	b.n	8007e3a <_dtoa_r+0x292>
 8007ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eca:	9a01      	ldr	r2, [sp, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	2b0e      	cmp	r3, #14
 8007ed2:	f200 809d 	bhi.w	8008010 <_dtoa_r+0x468>
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	f000 809a 	beq.w	8008010 <_dtoa_r+0x468>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd32      	ble.n	8007f48 <_dtoa_r+0x3a0>
 8007ee2:	4ab7      	ldr	r2, [pc, #732]	; (80081c0 <_dtoa_r+0x618>)
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	05d8      	lsls	r0, r3, #23
 8007ef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ef8:	d516      	bpl.n	8007f28 <_dtoa_r+0x380>
 8007efa:	4bb2      	ldr	r3, [pc, #712]	; (80081c4 <_dtoa_r+0x61c>)
 8007efc:	ec51 0b19 	vmov	r0, r1, d9
 8007f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f04:	f7f8 fcc2 	bl	800088c <__aeabi_ddiv>
 8007f08:	f007 070f 	and.w	r7, r7, #15
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	468b      	mov	fp, r1
 8007f10:	2503      	movs	r5, #3
 8007f12:	4eac      	ldr	r6, [pc, #688]	; (80081c4 <_dtoa_r+0x61c>)
 8007f14:	b957      	cbnz	r7, 8007f2c <_dtoa_r+0x384>
 8007f16:	4642      	mov	r2, r8
 8007f18:	464b      	mov	r3, r9
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 fcb5 	bl	800088c <__aeabi_ddiv>
 8007f22:	4682      	mov	sl, r0
 8007f24:	468b      	mov	fp, r1
 8007f26:	e028      	b.n	8007f7a <_dtoa_r+0x3d2>
 8007f28:	2502      	movs	r5, #2
 8007f2a:	e7f2      	b.n	8007f12 <_dtoa_r+0x36a>
 8007f2c:	07f9      	lsls	r1, r7, #31
 8007f2e:	d508      	bpl.n	8007f42 <_dtoa_r+0x39a>
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f38:	f7f8 fb7e 	bl	8000638 <__aeabi_dmul>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	4680      	mov	r8, r0
 8007f40:	4689      	mov	r9, r1
 8007f42:	107f      	asrs	r7, r7, #1
 8007f44:	3608      	adds	r6, #8
 8007f46:	e7e5      	b.n	8007f14 <_dtoa_r+0x36c>
 8007f48:	f000 809b 	beq.w	8008082 <_dtoa_r+0x4da>
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	4f9d      	ldr	r7, [pc, #628]	; (80081c4 <_dtoa_r+0x61c>)
 8007f50:	425e      	negs	r6, r3
 8007f52:	4b9b      	ldr	r3, [pc, #620]	; (80081c0 <_dtoa_r+0x618>)
 8007f54:	f006 020f 	and.w	r2, r6, #15
 8007f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	ec51 0b19 	vmov	r0, r1, d9
 8007f64:	f7f8 fb68 	bl	8000638 <__aeabi_dmul>
 8007f68:	1136      	asrs	r6, r6, #4
 8007f6a:	4682      	mov	sl, r0
 8007f6c:	468b      	mov	fp, r1
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2502      	movs	r5, #2
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d17a      	bne.n	800806c <_dtoa_r+0x4c4>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1d3      	bne.n	8007f22 <_dtoa_r+0x37a>
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8082 	beq.w	8008086 <_dtoa_r+0x4de>
 8007f82:	4b91      	ldr	r3, [pc, #580]	; (80081c8 <_dtoa_r+0x620>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	4650      	mov	r0, sl
 8007f88:	4659      	mov	r1, fp
 8007f8a:	f7f8 fdc7 	bl	8000b1c <__aeabi_dcmplt>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d079      	beq.n	8008086 <_dtoa_r+0x4de>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d076      	beq.n	8008086 <_dtoa_r+0x4de>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd36      	ble.n	800800c <_dtoa_r+0x464>
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	1e5f      	subs	r7, r3, #1
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4b88      	ldr	r3, [pc, #544]	; (80081cc <_dtoa_r+0x624>)
 8007faa:	f7f8 fb45 	bl	8000638 <__aeabi_dmul>
 8007fae:	9e02      	ldr	r6, [sp, #8]
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	468b      	mov	fp, r1
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 fad4 	bl	8000564 <__aeabi_i2d>
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	465b      	mov	r3, fp
 8007fc0:	f7f8 fb3a 	bl	8000638 <__aeabi_dmul>
 8007fc4:	4b82      	ldr	r3, [pc, #520]	; (80081d0 <_dtoa_r+0x628>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f7f8 f980 	bl	80002cc <__adddf3>
 8007fcc:	46d0      	mov	r8, sl
 8007fce:	46d9      	mov	r9, fp
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d158      	bne.n	800808c <_dtoa_r+0x4e4>
 8007fda:	4b7e      	ldr	r3, [pc, #504]	; (80081d4 <_dtoa_r+0x62c>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 f971 	bl	80002c8 <__aeabi_dsub>
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	465b      	mov	r3, fp
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	f7f8 fdb3 	bl	8000b58 <__aeabi_dcmpgt>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f040 8295 	bne.w	8008522 <_dtoa_r+0x97a>
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fd8b 	bl	8000b1c <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	f040 8289 	bne.w	800851e <_dtoa_r+0x976>
 800800c:	ec5b ab19 	vmov	sl, fp, d9
 8008010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008012:	2b00      	cmp	r3, #0
 8008014:	f2c0 8148 	blt.w	80082a8 <_dtoa_r+0x700>
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	2a0e      	cmp	r2, #14
 800801c:	f300 8144 	bgt.w	80082a8 <_dtoa_r+0x700>
 8008020:	4b67      	ldr	r3, [pc, #412]	; (80081c0 <_dtoa_r+0x618>)
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800802a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	f280 80d5 	bge.w	80081dc <_dtoa_r+0x634>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f300 80d1 	bgt.w	80081dc <_dtoa_r+0x634>
 800803a:	f040 826f 	bne.w	800851c <_dtoa_r+0x974>
 800803e:	4b65      	ldr	r3, [pc, #404]	; (80081d4 <_dtoa_r+0x62c>)
 8008040:	2200      	movs	r2, #0
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 faf7 	bl	8000638 <__aeabi_dmul>
 800804a:	4652      	mov	r2, sl
 800804c:	465b      	mov	r3, fp
 800804e:	f7f8 fd79 	bl	8000b44 <__aeabi_dcmpge>
 8008052:	9e03      	ldr	r6, [sp, #12]
 8008054:	4637      	mov	r7, r6
 8008056:	2800      	cmp	r0, #0
 8008058:	f040 8245 	bne.w	80084e6 <_dtoa_r+0x93e>
 800805c:	9d01      	ldr	r5, [sp, #4]
 800805e:	2331      	movs	r3, #49	; 0x31
 8008060:	f805 3b01 	strb.w	r3, [r5], #1
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	3301      	adds	r3, #1
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	e240      	b.n	80084ee <_dtoa_r+0x946>
 800806c:	07f2      	lsls	r2, r6, #31
 800806e:	d505      	bpl.n	800807c <_dtoa_r+0x4d4>
 8008070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	3501      	adds	r5, #1
 800807a:	2301      	movs	r3, #1
 800807c:	1076      	asrs	r6, r6, #1
 800807e:	3708      	adds	r7, #8
 8008080:	e777      	b.n	8007f72 <_dtoa_r+0x3ca>
 8008082:	2502      	movs	r5, #2
 8008084:	e779      	b.n	8007f7a <_dtoa_r+0x3d2>
 8008086:	9f00      	ldr	r7, [sp, #0]
 8008088:	9e03      	ldr	r6, [sp, #12]
 800808a:	e794      	b.n	8007fb6 <_dtoa_r+0x40e>
 800808c:	9901      	ldr	r1, [sp, #4]
 800808e:	4b4c      	ldr	r3, [pc, #304]	; (80081c0 <_dtoa_r+0x618>)
 8008090:	4431      	add	r1, r6
 8008092:	910d      	str	r1, [sp, #52]	; 0x34
 8008094:	9908      	ldr	r1, [sp, #32]
 8008096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800809a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800809e:	2900      	cmp	r1, #0
 80080a0:	d043      	beq.n	800812a <_dtoa_r+0x582>
 80080a2:	494d      	ldr	r1, [pc, #308]	; (80081d8 <_dtoa_r+0x630>)
 80080a4:	2000      	movs	r0, #0
 80080a6:	f7f8 fbf1 	bl	800088c <__aeabi_ddiv>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 f90b 	bl	80002c8 <__aeabi_dsub>
 80080b2:	9d01      	ldr	r5, [sp, #4]
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	4649      	mov	r1, r9
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7f8 fd6c 	bl	8000b98 <__aeabi_d2iz>
 80080c0:	4606      	mov	r6, r0
 80080c2:	f7f8 fa4f 	bl	8000564 <__aeabi_i2d>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 f8fb 	bl	80002c8 <__aeabi_dsub>
 80080d2:	3630      	adds	r6, #48	; 0x30
 80080d4:	f805 6b01 	strb.w	r6, [r5], #1
 80080d8:	4652      	mov	r2, sl
 80080da:	465b      	mov	r3, fp
 80080dc:	4680      	mov	r8, r0
 80080de:	4689      	mov	r9, r1
 80080e0:	f7f8 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d163      	bne.n	80081b0 <_dtoa_r+0x608>
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	4936      	ldr	r1, [pc, #216]	; (80081c8 <_dtoa_r+0x620>)
 80080ee:	2000      	movs	r0, #0
 80080f0:	f7f8 f8ea 	bl	80002c8 <__aeabi_dsub>
 80080f4:	4652      	mov	r2, sl
 80080f6:	465b      	mov	r3, fp
 80080f8:	f7f8 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f040 80b5 	bne.w	800826c <_dtoa_r+0x6c4>
 8008102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008104:	429d      	cmp	r5, r3
 8008106:	d081      	beq.n	800800c <_dtoa_r+0x464>
 8008108:	4b30      	ldr	r3, [pc, #192]	; (80081cc <_dtoa_r+0x624>)
 800810a:	2200      	movs	r2, #0
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	f7f8 fa92 	bl	8000638 <__aeabi_dmul>
 8008114:	4b2d      	ldr	r3, [pc, #180]	; (80081cc <_dtoa_r+0x624>)
 8008116:	4682      	mov	sl, r0
 8008118:	468b      	mov	fp, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	2200      	movs	r2, #0
 8008120:	f7f8 fa8a 	bl	8000638 <__aeabi_dmul>
 8008124:	4680      	mov	r8, r0
 8008126:	4689      	mov	r9, r1
 8008128:	e7c6      	b.n	80080b8 <_dtoa_r+0x510>
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 fa83 	bl	8000638 <__aeabi_dmul>
 8008132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008134:	9d01      	ldr	r5, [sp, #4]
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	4649      	mov	r1, r9
 800813e:	4640      	mov	r0, r8
 8008140:	f7f8 fd2a 	bl	8000b98 <__aeabi_d2iz>
 8008144:	4606      	mov	r6, r0
 8008146:	f7f8 fa0d 	bl	8000564 <__aeabi_i2d>
 800814a:	3630      	adds	r6, #48	; 0x30
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 f8b8 	bl	80002c8 <__aeabi_dsub>
 8008158:	f805 6b01 	strb.w	r6, [r5], #1
 800815c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800815e:	429d      	cmp	r5, r3
 8008160:	4680      	mov	r8, r0
 8008162:	4689      	mov	r9, r1
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	d124      	bne.n	80081b4 <_dtoa_r+0x60c>
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <_dtoa_r+0x630>)
 800816c:	4650      	mov	r0, sl
 800816e:	4659      	mov	r1, fp
 8008170:	f7f8 f8ac 	bl	80002cc <__adddf3>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4640      	mov	r0, r8
 800817a:	4649      	mov	r1, r9
 800817c:	f7f8 fcec 	bl	8000b58 <__aeabi_dcmpgt>
 8008180:	2800      	cmp	r0, #0
 8008182:	d173      	bne.n	800826c <_dtoa_r+0x6c4>
 8008184:	4652      	mov	r2, sl
 8008186:	465b      	mov	r3, fp
 8008188:	4913      	ldr	r1, [pc, #76]	; (80081d8 <_dtoa_r+0x630>)
 800818a:	2000      	movs	r0, #0
 800818c:	f7f8 f89c 	bl	80002c8 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f af35 	beq.w	800800c <_dtoa_r+0x464>
 80081a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081a4:	1e6b      	subs	r3, r5, #1
 80081a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081ac:	2b30      	cmp	r3, #48	; 0x30
 80081ae:	d0f8      	beq.n	80081a2 <_dtoa_r+0x5fa>
 80081b0:	9700      	str	r7, [sp, #0]
 80081b2:	e049      	b.n	8008248 <_dtoa_r+0x6a0>
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_dtoa_r+0x624>)
 80081b6:	f7f8 fa3f 	bl	8000638 <__aeabi_dmul>
 80081ba:	4680      	mov	r8, r0
 80081bc:	4689      	mov	r9, r1
 80081be:	e7bd      	b.n	800813c <_dtoa_r+0x594>
 80081c0:	0800ac30 	.word	0x0800ac30
 80081c4:	0800ac08 	.word	0x0800ac08
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	40240000 	.word	0x40240000
 80081d0:	401c0000 	.word	0x401c0000
 80081d4:	40140000 	.word	0x40140000
 80081d8:	3fe00000 	.word	0x3fe00000
 80081dc:	9d01      	ldr	r5, [sp, #4]
 80081de:	4656      	mov	r6, sl
 80081e0:	465f      	mov	r7, fp
 80081e2:	4642      	mov	r2, r8
 80081e4:	464b      	mov	r3, r9
 80081e6:	4630      	mov	r0, r6
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7f8 fb4f 	bl	800088c <__aeabi_ddiv>
 80081ee:	f7f8 fcd3 	bl	8000b98 <__aeabi_d2iz>
 80081f2:	4682      	mov	sl, r0
 80081f4:	f7f8 f9b6 	bl	8000564 <__aeabi_i2d>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	f7f8 fa1c 	bl	8000638 <__aeabi_dmul>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800820c:	f7f8 f85c 	bl	80002c8 <__aeabi_dsub>
 8008210:	f805 6b01 	strb.w	r6, [r5], #1
 8008214:	9e01      	ldr	r6, [sp, #4]
 8008216:	9f03      	ldr	r7, [sp, #12]
 8008218:	1bae      	subs	r6, r5, r6
 800821a:	42b7      	cmp	r7, r6
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	d135      	bne.n	800828e <_dtoa_r+0x6e6>
 8008222:	f7f8 f853 	bl	80002cc <__adddf3>
 8008226:	4642      	mov	r2, r8
 8008228:	464b      	mov	r3, r9
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f7f8 fc93 	bl	8000b58 <__aeabi_dcmpgt>
 8008232:	b9d0      	cbnz	r0, 800826a <_dtoa_r+0x6c2>
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8008240:	b110      	cbz	r0, 8008248 <_dtoa_r+0x6a0>
 8008242:	f01a 0f01 	tst.w	sl, #1
 8008246:	d110      	bne.n	800826a <_dtoa_r+0x6c2>
 8008248:	4620      	mov	r0, r4
 800824a:	ee18 1a10 	vmov	r1, s16
 800824e:	f000 fe75 	bl	8008f3c <_Bfree>
 8008252:	2300      	movs	r3, #0
 8008254:	9800      	ldr	r0, [sp, #0]
 8008256:	702b      	strb	r3, [r5, #0]
 8008258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825a:	3001      	adds	r0, #1
 800825c:	6018      	str	r0, [r3, #0]
 800825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008260:	2b00      	cmp	r3, #0
 8008262:	f43f acf1 	beq.w	8007c48 <_dtoa_r+0xa0>
 8008266:	601d      	str	r5, [r3, #0]
 8008268:	e4ee      	b.n	8007c48 <_dtoa_r+0xa0>
 800826a:	9f00      	ldr	r7, [sp, #0]
 800826c:	462b      	mov	r3, r5
 800826e:	461d      	mov	r5, r3
 8008270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008274:	2a39      	cmp	r2, #57	; 0x39
 8008276:	d106      	bne.n	8008286 <_dtoa_r+0x6de>
 8008278:	9a01      	ldr	r2, [sp, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d1f7      	bne.n	800826e <_dtoa_r+0x6c6>
 800827e:	9901      	ldr	r1, [sp, #4]
 8008280:	2230      	movs	r2, #48	; 0x30
 8008282:	3701      	adds	r7, #1
 8008284:	700a      	strb	r2, [r1, #0]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	3201      	adds	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e790      	b.n	80081b0 <_dtoa_r+0x608>
 800828e:	4ba6      	ldr	r3, [pc, #664]	; (8008528 <_dtoa_r+0x980>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9d1 	bl	8000638 <__aeabi_dmul>
 8008296:	2200      	movs	r2, #0
 8008298:	2300      	movs	r3, #0
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 fc33 	bl	8000b08 <__aeabi_dcmpeq>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d09d      	beq.n	80081e2 <_dtoa_r+0x63a>
 80082a6:	e7cf      	b.n	8008248 <_dtoa_r+0x6a0>
 80082a8:	9a08      	ldr	r2, [sp, #32]
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	f000 80d7 	beq.w	800845e <_dtoa_r+0x8b6>
 80082b0:	9a06      	ldr	r2, [sp, #24]
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	f300 80ba 	bgt.w	800842c <_dtoa_r+0x884>
 80082b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	f000 80b2 	beq.w	8008424 <_dtoa_r+0x87c>
 80082c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082c4:	9e07      	ldr	r6, [sp, #28]
 80082c6:	9d04      	ldr	r5, [sp, #16]
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	441a      	add	r2, r3
 80082cc:	9204      	str	r2, [sp, #16]
 80082ce:	9a05      	ldr	r2, [sp, #20]
 80082d0:	2101      	movs	r1, #1
 80082d2:	441a      	add	r2, r3
 80082d4:	4620      	mov	r0, r4
 80082d6:	9205      	str	r2, [sp, #20]
 80082d8:	f000 ff32 	bl	8009140 <__i2b>
 80082dc:	4607      	mov	r7, r0
 80082de:	2d00      	cmp	r5, #0
 80082e0:	dd0c      	ble.n	80082fc <_dtoa_r+0x754>
 80082e2:	9b05      	ldr	r3, [sp, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dd09      	ble.n	80082fc <_dtoa_r+0x754>
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	9a04      	ldr	r2, [sp, #16]
 80082ec:	bfa8      	it	ge
 80082ee:	462b      	movge	r3, r5
 80082f0:	1ad2      	subs	r2, r2, r3
 80082f2:	9204      	str	r2, [sp, #16]
 80082f4:	9a05      	ldr	r2, [sp, #20]
 80082f6:	1aed      	subs	r5, r5, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	b31b      	cbz	r3, 8008348 <_dtoa_r+0x7a0>
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80af 	beq.w	8008466 <_dtoa_r+0x8be>
 8008308:	2e00      	cmp	r6, #0
 800830a:	dd13      	ble.n	8008334 <_dtoa_r+0x78c>
 800830c:	4639      	mov	r1, r7
 800830e:	4632      	mov	r2, r6
 8008310:	4620      	mov	r0, r4
 8008312:	f000 ffd5 	bl	80092c0 <__pow5mult>
 8008316:	ee18 2a10 	vmov	r2, s16
 800831a:	4601      	mov	r1, r0
 800831c:	4607      	mov	r7, r0
 800831e:	4620      	mov	r0, r4
 8008320:	f000 ff24 	bl	800916c <__multiply>
 8008324:	ee18 1a10 	vmov	r1, s16
 8008328:	4680      	mov	r8, r0
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fe06 	bl	8008f3c <_Bfree>
 8008330:	ee08 8a10 	vmov	s16, r8
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	1b9a      	subs	r2, r3, r6
 8008338:	d006      	beq.n	8008348 <_dtoa_r+0x7a0>
 800833a:	ee18 1a10 	vmov	r1, s16
 800833e:	4620      	mov	r0, r4
 8008340:	f000 ffbe 	bl	80092c0 <__pow5mult>
 8008344:	ee08 0a10 	vmov	s16, r0
 8008348:	2101      	movs	r1, #1
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fef8 	bl	8009140 <__i2b>
 8008350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	4606      	mov	r6, r0
 8008356:	f340 8088 	ble.w	800846a <_dtoa_r+0x8c2>
 800835a:	461a      	mov	r2, r3
 800835c:	4601      	mov	r1, r0
 800835e:	4620      	mov	r0, r4
 8008360:	f000 ffae 	bl	80092c0 <__pow5mult>
 8008364:	9b06      	ldr	r3, [sp, #24]
 8008366:	2b01      	cmp	r3, #1
 8008368:	4606      	mov	r6, r0
 800836a:	f340 8081 	ble.w	8008470 <_dtoa_r+0x8c8>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	6933      	ldr	r3, [r6, #16]
 8008374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008378:	6918      	ldr	r0, [r3, #16]
 800837a:	f000 fe91 	bl	80090a0 <__hi0bits>
 800837e:	f1c0 0020 	rsb	r0, r0, #32
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	4418      	add	r0, r3
 8008386:	f010 001f 	ands.w	r0, r0, #31
 800838a:	f000 8092 	beq.w	80084b2 <_dtoa_r+0x90a>
 800838e:	f1c0 0320 	rsb	r3, r0, #32
 8008392:	2b04      	cmp	r3, #4
 8008394:	f340 808a 	ble.w	80084ac <_dtoa_r+0x904>
 8008398:	f1c0 001c 	rsb	r0, r0, #28
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	4403      	add	r3, r0
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	4403      	add	r3, r0
 80083a6:	4405      	add	r5, r0
 80083a8:	9305      	str	r3, [sp, #20]
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd07      	ble.n	80083c0 <_dtoa_r+0x818>
 80083b0:	ee18 1a10 	vmov	r1, s16
 80083b4:	461a      	mov	r2, r3
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 ffdc 	bl	8009374 <__lshift>
 80083bc:	ee08 0a10 	vmov	s16, r0
 80083c0:	9b05      	ldr	r3, [sp, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dd05      	ble.n	80083d2 <_dtoa_r+0x82a>
 80083c6:	4631      	mov	r1, r6
 80083c8:	461a      	mov	r2, r3
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 ffd2 	bl	8009374 <__lshift>
 80083d0:	4606      	mov	r6, r0
 80083d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d06e      	beq.n	80084b6 <_dtoa_r+0x90e>
 80083d8:	ee18 0a10 	vmov	r0, s16
 80083dc:	4631      	mov	r1, r6
 80083de:	f001 f839 	bl	8009454 <__mcmp>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	da67      	bge.n	80084b6 <_dtoa_r+0x90e>
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	ee18 1a10 	vmov	r1, s16
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	220a      	movs	r2, #10
 80083f2:	2300      	movs	r3, #0
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fdc3 	bl	8008f80 <__multadd>
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	ee08 0a10 	vmov	s16, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 81b1 	beq.w	8008768 <_dtoa_r+0xbc0>
 8008406:	2300      	movs	r3, #0
 8008408:	4639      	mov	r1, r7
 800840a:	220a      	movs	r2, #10
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fdb7 	bl	8008f80 <__multadd>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	4607      	mov	r7, r0
 8008418:	f300 808e 	bgt.w	8008538 <_dtoa_r+0x990>
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	2b02      	cmp	r3, #2
 8008420:	dc51      	bgt.n	80084c6 <_dtoa_r+0x91e>
 8008422:	e089      	b.n	8008538 <_dtoa_r+0x990>
 8008424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800842a:	e74b      	b.n	80082c4 <_dtoa_r+0x71c>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1e5e      	subs	r6, r3, #1
 8008430:	9b07      	ldr	r3, [sp, #28]
 8008432:	42b3      	cmp	r3, r6
 8008434:	bfbf      	itttt	lt
 8008436:	9b07      	ldrlt	r3, [sp, #28]
 8008438:	9607      	strlt	r6, [sp, #28]
 800843a:	1af2      	sublt	r2, r6, r3
 800843c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800843e:	bfb6      	itet	lt
 8008440:	189b      	addlt	r3, r3, r2
 8008442:	1b9e      	subge	r6, r3, r6
 8008444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	bfb8      	it	lt
 800844a:	2600      	movlt	r6, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfb7      	itett	lt
 8008450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008458:	1a9d      	sublt	r5, r3, r2
 800845a:	2300      	movlt	r3, #0
 800845c:	e734      	b.n	80082c8 <_dtoa_r+0x720>
 800845e:	9e07      	ldr	r6, [sp, #28]
 8008460:	9d04      	ldr	r5, [sp, #16]
 8008462:	9f08      	ldr	r7, [sp, #32]
 8008464:	e73b      	b.n	80082de <_dtoa_r+0x736>
 8008466:	9a07      	ldr	r2, [sp, #28]
 8008468:	e767      	b.n	800833a <_dtoa_r+0x792>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	2b01      	cmp	r3, #1
 800846e:	dc18      	bgt.n	80084a2 <_dtoa_r+0x8fa>
 8008470:	f1ba 0f00 	cmp.w	sl, #0
 8008474:	d115      	bne.n	80084a2 <_dtoa_r+0x8fa>
 8008476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800847a:	b993      	cbnz	r3, 80084a2 <_dtoa_r+0x8fa>
 800847c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008480:	0d1b      	lsrs	r3, r3, #20
 8008482:	051b      	lsls	r3, r3, #20
 8008484:	b183      	cbz	r3, 80084a8 <_dtoa_r+0x900>
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	3301      	adds	r3, #1
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	9b05      	ldr	r3, [sp, #20]
 800848e:	3301      	adds	r3, #1
 8008490:	9305      	str	r3, [sp, #20]
 8008492:	f04f 0801 	mov.w	r8, #1
 8008496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f af6a 	bne.w	8008372 <_dtoa_r+0x7ca>
 800849e:	2001      	movs	r0, #1
 80084a0:	e76f      	b.n	8008382 <_dtoa_r+0x7da>
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	e7f6      	b.n	8008496 <_dtoa_r+0x8ee>
 80084a8:	4698      	mov	r8, r3
 80084aa:	e7f4      	b.n	8008496 <_dtoa_r+0x8ee>
 80084ac:	f43f af7d 	beq.w	80083aa <_dtoa_r+0x802>
 80084b0:	4618      	mov	r0, r3
 80084b2:	301c      	adds	r0, #28
 80084b4:	e772      	b.n	800839c <_dtoa_r+0x7f4>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc37      	bgt.n	800852c <_dtoa_r+0x984>
 80084bc:	9b06      	ldr	r3, [sp, #24]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	dd34      	ble.n	800852c <_dtoa_r+0x984>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	9b02      	ldr	r3, [sp, #8]
 80084c8:	b96b      	cbnz	r3, 80084e6 <_dtoa_r+0x93e>
 80084ca:	4631      	mov	r1, r6
 80084cc:	2205      	movs	r2, #5
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fd56 	bl	8008f80 <__multadd>
 80084d4:	4601      	mov	r1, r0
 80084d6:	4606      	mov	r6, r0
 80084d8:	ee18 0a10 	vmov	r0, s16
 80084dc:	f000 ffba 	bl	8009454 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f73f adbb 	bgt.w	800805c <_dtoa_r+0x4b4>
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	9d01      	ldr	r5, [sp, #4]
 80084ea:	43db      	mvns	r3, r3
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	4631      	mov	r1, r6
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fd21 	bl	8008f3c <_Bfree>
 80084fa:	2f00      	cmp	r7, #0
 80084fc:	f43f aea4 	beq.w	8008248 <_dtoa_r+0x6a0>
 8008500:	f1b8 0f00 	cmp.w	r8, #0
 8008504:	d005      	beq.n	8008512 <_dtoa_r+0x96a>
 8008506:	45b8      	cmp	r8, r7
 8008508:	d003      	beq.n	8008512 <_dtoa_r+0x96a>
 800850a:	4641      	mov	r1, r8
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fd15 	bl	8008f3c <_Bfree>
 8008512:	4639      	mov	r1, r7
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fd11 	bl	8008f3c <_Bfree>
 800851a:	e695      	b.n	8008248 <_dtoa_r+0x6a0>
 800851c:	2600      	movs	r6, #0
 800851e:	4637      	mov	r7, r6
 8008520:	e7e1      	b.n	80084e6 <_dtoa_r+0x93e>
 8008522:	9700      	str	r7, [sp, #0]
 8008524:	4637      	mov	r7, r6
 8008526:	e599      	b.n	800805c <_dtoa_r+0x4b4>
 8008528:	40240000 	.word	0x40240000
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80ca 	beq.w	80086c8 <_dtoa_r+0xb20>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	2d00      	cmp	r5, #0
 800853a:	dd05      	ble.n	8008548 <_dtoa_r+0x9a0>
 800853c:	4639      	mov	r1, r7
 800853e:	462a      	mov	r2, r5
 8008540:	4620      	mov	r0, r4
 8008542:	f000 ff17 	bl	8009374 <__lshift>
 8008546:	4607      	mov	r7, r0
 8008548:	f1b8 0f00 	cmp.w	r8, #0
 800854c:	d05b      	beq.n	8008606 <_dtoa_r+0xa5e>
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fcb3 	bl	8008ebc <_Balloc>
 8008556:	4605      	mov	r5, r0
 8008558:	b928      	cbnz	r0, 8008566 <_dtoa_r+0x9be>
 800855a:	4b87      	ldr	r3, [pc, #540]	; (8008778 <_dtoa_r+0xbd0>)
 800855c:	4602      	mov	r2, r0
 800855e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008562:	f7ff bb3b 	b.w	8007bdc <_dtoa_r+0x34>
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	3202      	adds	r2, #2
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	f107 010c 	add.w	r1, r7, #12
 8008570:	300c      	adds	r0, #12
 8008572:	f000 fc95 	bl	8008ea0 <memcpy>
 8008576:	2201      	movs	r2, #1
 8008578:	4629      	mov	r1, r5
 800857a:	4620      	mov	r0, r4
 800857c:	f000 fefa 	bl	8009374 <__lshift>
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	f103 0901 	add.w	r9, r3, #1
 8008586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800858a:	4413      	add	r3, r2
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	f00a 0301 	and.w	r3, sl, #1
 8008592:	46b8      	mov	r8, r7
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	4607      	mov	r7, r0
 8008598:	4631      	mov	r1, r6
 800859a:	ee18 0a10 	vmov	r0, s16
 800859e:	f7ff fa77 	bl	8007a90 <quorem>
 80085a2:	4641      	mov	r1, r8
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085aa:	ee18 0a10 	vmov	r0, s16
 80085ae:	f000 ff51 	bl	8009454 <__mcmp>
 80085b2:	463a      	mov	r2, r7
 80085b4:	9003      	str	r0, [sp, #12]
 80085b6:	4631      	mov	r1, r6
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 ff67 	bl	800948c <__mdiff>
 80085be:	68c2      	ldr	r2, [r0, #12]
 80085c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085c4:	4605      	mov	r5, r0
 80085c6:	bb02      	cbnz	r2, 800860a <_dtoa_r+0xa62>
 80085c8:	4601      	mov	r1, r0
 80085ca:	ee18 0a10 	vmov	r0, s16
 80085ce:	f000 ff41 	bl	8009454 <__mcmp>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4629      	mov	r1, r5
 80085d6:	4620      	mov	r0, r4
 80085d8:	9207      	str	r2, [sp, #28]
 80085da:	f000 fcaf 	bl	8008f3c <_Bfree>
 80085de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085e2:	ea43 0102 	orr.w	r1, r3, r2
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	430b      	orrs	r3, r1
 80085ea:	464d      	mov	r5, r9
 80085ec:	d10f      	bne.n	800860e <_dtoa_r+0xa66>
 80085ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085f2:	d02a      	beq.n	800864a <_dtoa_r+0xaa2>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd02      	ble.n	8008600 <_dtoa_r+0xa58>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008600:	f88b a000 	strb.w	sl, [fp]
 8008604:	e775      	b.n	80084f2 <_dtoa_r+0x94a>
 8008606:	4638      	mov	r0, r7
 8008608:	e7ba      	b.n	8008580 <_dtoa_r+0x9d8>
 800860a:	2201      	movs	r2, #1
 800860c:	e7e2      	b.n	80085d4 <_dtoa_r+0xa2c>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db04      	blt.n	800861e <_dtoa_r+0xa76>
 8008614:	9906      	ldr	r1, [sp, #24]
 8008616:	430b      	orrs	r3, r1
 8008618:	9904      	ldr	r1, [sp, #16]
 800861a:	430b      	orrs	r3, r1
 800861c:	d122      	bne.n	8008664 <_dtoa_r+0xabc>
 800861e:	2a00      	cmp	r2, #0
 8008620:	ddee      	ble.n	8008600 <_dtoa_r+0xa58>
 8008622:	ee18 1a10 	vmov	r1, s16
 8008626:	2201      	movs	r2, #1
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fea3 	bl	8009374 <__lshift>
 800862e:	4631      	mov	r1, r6
 8008630:	ee08 0a10 	vmov	s16, r0
 8008634:	f000 ff0e 	bl	8009454 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dc03      	bgt.n	8008644 <_dtoa_r+0xa9c>
 800863c:	d1e0      	bne.n	8008600 <_dtoa_r+0xa58>
 800863e:	f01a 0f01 	tst.w	sl, #1
 8008642:	d0dd      	beq.n	8008600 <_dtoa_r+0xa58>
 8008644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008648:	d1d7      	bne.n	80085fa <_dtoa_r+0xa52>
 800864a:	2339      	movs	r3, #57	; 0x39
 800864c:	f88b 3000 	strb.w	r3, [fp]
 8008650:	462b      	mov	r3, r5
 8008652:	461d      	mov	r5, r3
 8008654:	3b01      	subs	r3, #1
 8008656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800865a:	2a39      	cmp	r2, #57	; 0x39
 800865c:	d071      	beq.n	8008742 <_dtoa_r+0xb9a>
 800865e:	3201      	adds	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e746      	b.n	80084f2 <_dtoa_r+0x94a>
 8008664:	2a00      	cmp	r2, #0
 8008666:	dd07      	ble.n	8008678 <_dtoa_r+0xad0>
 8008668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800866c:	d0ed      	beq.n	800864a <_dtoa_r+0xaa2>
 800866e:	f10a 0301 	add.w	r3, sl, #1
 8008672:	f88b 3000 	strb.w	r3, [fp]
 8008676:	e73c      	b.n	80084f2 <_dtoa_r+0x94a>
 8008678:	9b05      	ldr	r3, [sp, #20]
 800867a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800867e:	4599      	cmp	r9, r3
 8008680:	d047      	beq.n	8008712 <_dtoa_r+0xb6a>
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	2300      	movs	r3, #0
 8008688:	220a      	movs	r2, #10
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fc78 	bl	8008f80 <__multadd>
 8008690:	45b8      	cmp	r8, r7
 8008692:	ee08 0a10 	vmov	s16, r0
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	f04f 020a 	mov.w	r2, #10
 800869e:	4641      	mov	r1, r8
 80086a0:	4620      	mov	r0, r4
 80086a2:	d106      	bne.n	80086b2 <_dtoa_r+0xb0a>
 80086a4:	f000 fc6c 	bl	8008f80 <__multadd>
 80086a8:	4680      	mov	r8, r0
 80086aa:	4607      	mov	r7, r0
 80086ac:	f109 0901 	add.w	r9, r9, #1
 80086b0:	e772      	b.n	8008598 <_dtoa_r+0x9f0>
 80086b2:	f000 fc65 	bl	8008f80 <__multadd>
 80086b6:	4639      	mov	r1, r7
 80086b8:	4680      	mov	r8, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	220a      	movs	r2, #10
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 fc5e 	bl	8008f80 <__multadd>
 80086c4:	4607      	mov	r7, r0
 80086c6:	e7f1      	b.n	80086ac <_dtoa_r+0xb04>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	9d01      	ldr	r5, [sp, #4]
 80086ce:	ee18 0a10 	vmov	r0, s16
 80086d2:	4631      	mov	r1, r6
 80086d4:	f7ff f9dc 	bl	8007a90 <quorem>
 80086d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	f805 ab01 	strb.w	sl, [r5], #1
 80086e2:	1aea      	subs	r2, r5, r3
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	4293      	cmp	r3, r2
 80086e8:	dd09      	ble.n	80086fe <_dtoa_r+0xb56>
 80086ea:	ee18 1a10 	vmov	r1, s16
 80086ee:	2300      	movs	r3, #0
 80086f0:	220a      	movs	r2, #10
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fc44 	bl	8008f80 <__multadd>
 80086f8:	ee08 0a10 	vmov	s16, r0
 80086fc:	e7e7      	b.n	80086ce <_dtoa_r+0xb26>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfc8      	it	gt
 8008704:	461d      	movgt	r5, r3
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	bfd8      	it	le
 800870a:	2501      	movle	r5, #1
 800870c:	441d      	add	r5, r3
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	ee18 1a10 	vmov	r1, s16
 8008716:	2201      	movs	r2, #1
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fe2b 	bl	8009374 <__lshift>
 800871e:	4631      	mov	r1, r6
 8008720:	ee08 0a10 	vmov	s16, r0
 8008724:	f000 fe96 	bl	8009454 <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	dc91      	bgt.n	8008650 <_dtoa_r+0xaa8>
 800872c:	d102      	bne.n	8008734 <_dtoa_r+0xb8c>
 800872e:	f01a 0f01 	tst.w	sl, #1
 8008732:	d18d      	bne.n	8008650 <_dtoa_r+0xaa8>
 8008734:	462b      	mov	r3, r5
 8008736:	461d      	mov	r5, r3
 8008738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800873c:	2a30      	cmp	r2, #48	; 0x30
 800873e:	d0fa      	beq.n	8008736 <_dtoa_r+0xb8e>
 8008740:	e6d7      	b.n	80084f2 <_dtoa_r+0x94a>
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d184      	bne.n	8008652 <_dtoa_r+0xaaa>
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	2331      	movs	r3, #49	; 0x31
 8008750:	7013      	strb	r3, [r2, #0]
 8008752:	e6ce      	b.n	80084f2 <_dtoa_r+0x94a>
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <_dtoa_r+0xbd4>)
 8008756:	f7ff ba95 	b.w	8007c84 <_dtoa_r+0xdc>
 800875a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f aa6e 	bne.w	8007c3e <_dtoa_r+0x96>
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <_dtoa_r+0xbd8>)
 8008764:	f7ff ba8e 	b.w	8007c84 <_dtoa_r+0xdc>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dcae      	bgt.n	80086cc <_dtoa_r+0xb24>
 800876e:	9b06      	ldr	r3, [sp, #24]
 8008770:	2b02      	cmp	r3, #2
 8008772:	f73f aea8 	bgt.w	80084c6 <_dtoa_r+0x91e>
 8008776:	e7a9      	b.n	80086cc <_dtoa_r+0xb24>
 8008778:	0800ab20 	.word	0x0800ab20
 800877c:	0800a924 	.word	0x0800a924
 8008780:	0800aaa1 	.word	0x0800aaa1

08008784 <rshift>:
 8008784:	6903      	ldr	r3, [r0, #16]
 8008786:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800878a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800878e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008792:	f100 0414 	add.w	r4, r0, #20
 8008796:	dd45      	ble.n	8008824 <rshift+0xa0>
 8008798:	f011 011f 	ands.w	r1, r1, #31
 800879c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087a4:	d10c      	bne.n	80087c0 <rshift+0x3c>
 80087a6:	f100 0710 	add.w	r7, r0, #16
 80087aa:	4629      	mov	r1, r5
 80087ac:	42b1      	cmp	r1, r6
 80087ae:	d334      	bcc.n	800881a <rshift+0x96>
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	1eea      	subs	r2, r5, #3
 80087b6:	4296      	cmp	r6, r2
 80087b8:	bf38      	it	cc
 80087ba:	2300      	movcc	r3, #0
 80087bc:	4423      	add	r3, r4
 80087be:	e015      	b.n	80087ec <rshift+0x68>
 80087c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087c4:	f1c1 0820 	rsb	r8, r1, #32
 80087c8:	40cf      	lsrs	r7, r1
 80087ca:	f105 0e04 	add.w	lr, r5, #4
 80087ce:	46a1      	mov	r9, r4
 80087d0:	4576      	cmp	r6, lr
 80087d2:	46f4      	mov	ip, lr
 80087d4:	d815      	bhi.n	8008802 <rshift+0x7e>
 80087d6:	1a9a      	subs	r2, r3, r2
 80087d8:	0092      	lsls	r2, r2, #2
 80087da:	3a04      	subs	r2, #4
 80087dc:	3501      	adds	r5, #1
 80087de:	42ae      	cmp	r6, r5
 80087e0:	bf38      	it	cc
 80087e2:	2200      	movcc	r2, #0
 80087e4:	18a3      	adds	r3, r4, r2
 80087e6:	50a7      	str	r7, [r4, r2]
 80087e8:	b107      	cbz	r7, 80087ec <rshift+0x68>
 80087ea:	3304      	adds	r3, #4
 80087ec:	1b1a      	subs	r2, r3, r4
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087f4:	bf08      	it	eq
 80087f6:	2300      	moveq	r3, #0
 80087f8:	6102      	str	r2, [r0, #16]
 80087fa:	bf08      	it	eq
 80087fc:	6143      	streq	r3, [r0, #20]
 80087fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008802:	f8dc c000 	ldr.w	ip, [ip]
 8008806:	fa0c fc08 	lsl.w	ip, ip, r8
 800880a:	ea4c 0707 	orr.w	r7, ip, r7
 800880e:	f849 7b04 	str.w	r7, [r9], #4
 8008812:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008816:	40cf      	lsrs	r7, r1
 8008818:	e7da      	b.n	80087d0 <rshift+0x4c>
 800881a:	f851 cb04 	ldr.w	ip, [r1], #4
 800881e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008822:	e7c3      	b.n	80087ac <rshift+0x28>
 8008824:	4623      	mov	r3, r4
 8008826:	e7e1      	b.n	80087ec <rshift+0x68>

08008828 <__hexdig_fun>:
 8008828:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800882c:	2b09      	cmp	r3, #9
 800882e:	d802      	bhi.n	8008836 <__hexdig_fun+0xe>
 8008830:	3820      	subs	r0, #32
 8008832:	b2c0      	uxtb	r0, r0
 8008834:	4770      	bx	lr
 8008836:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800883a:	2b05      	cmp	r3, #5
 800883c:	d801      	bhi.n	8008842 <__hexdig_fun+0x1a>
 800883e:	3847      	subs	r0, #71	; 0x47
 8008840:	e7f7      	b.n	8008832 <__hexdig_fun+0xa>
 8008842:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008846:	2b05      	cmp	r3, #5
 8008848:	d801      	bhi.n	800884e <__hexdig_fun+0x26>
 800884a:	3827      	subs	r0, #39	; 0x27
 800884c:	e7f1      	b.n	8008832 <__hexdig_fun+0xa>
 800884e:	2000      	movs	r0, #0
 8008850:	4770      	bx	lr
	...

08008854 <__gethex>:
 8008854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	ed2d 8b02 	vpush	{d8}
 800885c:	b089      	sub	sp, #36	; 0x24
 800885e:	ee08 0a10 	vmov	s16, r0
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	4bb4      	ldr	r3, [pc, #720]	; (8008b38 <__gethex+0x2e4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	468b      	mov	fp, r1
 800886e:	4690      	mov	r8, r2
 8008870:	f7f7 fcce 	bl	8000210 <strlen>
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	f8db 2000 	ldr.w	r2, [fp]
 800887a:	4403      	add	r3, r0
 800887c:	4682      	mov	sl, r0
 800887e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	1c93      	adds	r3, r2, #2
 8008886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800888a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800888e:	32fe      	adds	r2, #254	; 0xfe
 8008890:	18d1      	adds	r1, r2, r3
 8008892:	461f      	mov	r7, r3
 8008894:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008898:	9100      	str	r1, [sp, #0]
 800889a:	2830      	cmp	r0, #48	; 0x30
 800889c:	d0f8      	beq.n	8008890 <__gethex+0x3c>
 800889e:	f7ff ffc3 	bl	8008828 <__hexdig_fun>
 80088a2:	4604      	mov	r4, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d13a      	bne.n	800891e <__gethex+0xca>
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	4652      	mov	r2, sl
 80088ac:	4638      	mov	r0, r7
 80088ae:	f001 fa33 	bl	8009d18 <strncmp>
 80088b2:	4605      	mov	r5, r0
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d168      	bne.n	800898a <__gethex+0x136>
 80088b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80088bc:	eb07 060a 	add.w	r6, r7, sl
 80088c0:	f7ff ffb2 	bl	8008828 <__hexdig_fun>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d062      	beq.n	800898e <__gethex+0x13a>
 80088c8:	4633      	mov	r3, r6
 80088ca:	7818      	ldrb	r0, [r3, #0]
 80088cc:	2830      	cmp	r0, #48	; 0x30
 80088ce:	461f      	mov	r7, r3
 80088d0:	f103 0301 	add.w	r3, r3, #1
 80088d4:	d0f9      	beq.n	80088ca <__gethex+0x76>
 80088d6:	f7ff ffa7 	bl	8008828 <__hexdig_fun>
 80088da:	2301      	movs	r3, #1
 80088dc:	fab0 f480 	clz	r4, r0
 80088e0:	0964      	lsrs	r4, r4, #5
 80088e2:	4635      	mov	r5, r6
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	463a      	mov	r2, r7
 80088e8:	4616      	mov	r6, r2
 80088ea:	3201      	adds	r2, #1
 80088ec:	7830      	ldrb	r0, [r6, #0]
 80088ee:	f7ff ff9b 	bl	8008828 <__hexdig_fun>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1f8      	bne.n	80088e8 <__gethex+0x94>
 80088f6:	9901      	ldr	r1, [sp, #4]
 80088f8:	4652      	mov	r2, sl
 80088fa:	4630      	mov	r0, r6
 80088fc:	f001 fa0c 	bl	8009d18 <strncmp>
 8008900:	b980      	cbnz	r0, 8008924 <__gethex+0xd0>
 8008902:	b94d      	cbnz	r5, 8008918 <__gethex+0xc4>
 8008904:	eb06 050a 	add.w	r5, r6, sl
 8008908:	462a      	mov	r2, r5
 800890a:	4616      	mov	r6, r2
 800890c:	3201      	adds	r2, #1
 800890e:	7830      	ldrb	r0, [r6, #0]
 8008910:	f7ff ff8a 	bl	8008828 <__hexdig_fun>
 8008914:	2800      	cmp	r0, #0
 8008916:	d1f8      	bne.n	800890a <__gethex+0xb6>
 8008918:	1bad      	subs	r5, r5, r6
 800891a:	00ad      	lsls	r5, r5, #2
 800891c:	e004      	b.n	8008928 <__gethex+0xd4>
 800891e:	2400      	movs	r4, #0
 8008920:	4625      	mov	r5, r4
 8008922:	e7e0      	b.n	80088e6 <__gethex+0x92>
 8008924:	2d00      	cmp	r5, #0
 8008926:	d1f7      	bne.n	8008918 <__gethex+0xc4>
 8008928:	7833      	ldrb	r3, [r6, #0]
 800892a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800892e:	2b50      	cmp	r3, #80	; 0x50
 8008930:	d13b      	bne.n	80089aa <__gethex+0x156>
 8008932:	7873      	ldrb	r3, [r6, #1]
 8008934:	2b2b      	cmp	r3, #43	; 0x2b
 8008936:	d02c      	beq.n	8008992 <__gethex+0x13e>
 8008938:	2b2d      	cmp	r3, #45	; 0x2d
 800893a:	d02e      	beq.n	800899a <__gethex+0x146>
 800893c:	1c71      	adds	r1, r6, #1
 800893e:	f04f 0900 	mov.w	r9, #0
 8008942:	7808      	ldrb	r0, [r1, #0]
 8008944:	f7ff ff70 	bl	8008828 <__hexdig_fun>
 8008948:	1e43      	subs	r3, r0, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b18      	cmp	r3, #24
 800894e:	d82c      	bhi.n	80089aa <__gethex+0x156>
 8008950:	f1a0 0210 	sub.w	r2, r0, #16
 8008954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008958:	f7ff ff66 	bl	8008828 <__hexdig_fun>
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b18      	cmp	r3, #24
 8008962:	d91d      	bls.n	80089a0 <__gethex+0x14c>
 8008964:	f1b9 0f00 	cmp.w	r9, #0
 8008968:	d000      	beq.n	800896c <__gethex+0x118>
 800896a:	4252      	negs	r2, r2
 800896c:	4415      	add	r5, r2
 800896e:	f8cb 1000 	str.w	r1, [fp]
 8008972:	b1e4      	cbz	r4, 80089ae <__gethex+0x15a>
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bf14      	ite	ne
 800897a:	2700      	movne	r7, #0
 800897c:	2706      	moveq	r7, #6
 800897e:	4638      	mov	r0, r7
 8008980:	b009      	add	sp, #36	; 0x24
 8008982:	ecbd 8b02 	vpop	{d8}
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	463e      	mov	r6, r7
 800898c:	4625      	mov	r5, r4
 800898e:	2401      	movs	r4, #1
 8008990:	e7ca      	b.n	8008928 <__gethex+0xd4>
 8008992:	f04f 0900 	mov.w	r9, #0
 8008996:	1cb1      	adds	r1, r6, #2
 8008998:	e7d3      	b.n	8008942 <__gethex+0xee>
 800899a:	f04f 0901 	mov.w	r9, #1
 800899e:	e7fa      	b.n	8008996 <__gethex+0x142>
 80089a0:	230a      	movs	r3, #10
 80089a2:	fb03 0202 	mla	r2, r3, r2, r0
 80089a6:	3a10      	subs	r2, #16
 80089a8:	e7d4      	b.n	8008954 <__gethex+0x100>
 80089aa:	4631      	mov	r1, r6
 80089ac:	e7df      	b.n	800896e <__gethex+0x11a>
 80089ae:	1bf3      	subs	r3, r6, r7
 80089b0:	3b01      	subs	r3, #1
 80089b2:	4621      	mov	r1, r4
 80089b4:	2b07      	cmp	r3, #7
 80089b6:	dc0b      	bgt.n	80089d0 <__gethex+0x17c>
 80089b8:	ee18 0a10 	vmov	r0, s16
 80089bc:	f000 fa7e 	bl	8008ebc <_Balloc>
 80089c0:	4604      	mov	r4, r0
 80089c2:	b940      	cbnz	r0, 80089d6 <__gethex+0x182>
 80089c4:	4b5d      	ldr	r3, [pc, #372]	; (8008b3c <__gethex+0x2e8>)
 80089c6:	4602      	mov	r2, r0
 80089c8:	21de      	movs	r1, #222	; 0xde
 80089ca:	485d      	ldr	r0, [pc, #372]	; (8008b40 <__gethex+0x2ec>)
 80089cc:	f001 f9c6 	bl	8009d5c <__assert_func>
 80089d0:	3101      	adds	r1, #1
 80089d2:	105b      	asrs	r3, r3, #1
 80089d4:	e7ee      	b.n	80089b4 <__gethex+0x160>
 80089d6:	f100 0914 	add.w	r9, r0, #20
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	f1ca 0301 	rsb	r3, sl, #1
 80089e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80089e6:	f8cd b000 	str.w	fp, [sp]
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	42b7      	cmp	r7, r6
 80089ee:	d340      	bcc.n	8008a72 <__gethex+0x21e>
 80089f0:	9802      	ldr	r0, [sp, #8]
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	f840 3b04 	str.w	r3, [r0], #4
 80089f8:	eba0 0009 	sub.w	r0, r0, r9
 80089fc:	1080      	asrs	r0, r0, #2
 80089fe:	0146      	lsls	r6, r0, #5
 8008a00:	6120      	str	r0, [r4, #16]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fb4c 	bl	80090a0 <__hi0bits>
 8008a08:	1a30      	subs	r0, r6, r0
 8008a0a:	f8d8 6000 	ldr.w	r6, [r8]
 8008a0e:	42b0      	cmp	r0, r6
 8008a10:	dd63      	ble.n	8008ada <__gethex+0x286>
 8008a12:	1b87      	subs	r7, r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fef0 	bl	80097fc <__any_on>
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	b1a8      	cbz	r0, 8008a4c <__gethex+0x1f8>
 8008a20:	1e7b      	subs	r3, r7, #1
 8008a22:	1159      	asrs	r1, r3, #5
 8008a24:	f003 021f 	and.w	r2, r3, #31
 8008a28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a2c:	f04f 0a01 	mov.w	sl, #1
 8008a30:	fa0a f202 	lsl.w	r2, sl, r2
 8008a34:	420a      	tst	r2, r1
 8008a36:	d009      	beq.n	8008a4c <__gethex+0x1f8>
 8008a38:	4553      	cmp	r3, sl
 8008a3a:	dd05      	ble.n	8008a48 <__gethex+0x1f4>
 8008a3c:	1eb9      	subs	r1, r7, #2
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 fedc 	bl	80097fc <__any_on>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d145      	bne.n	8008ad4 <__gethex+0x280>
 8008a48:	f04f 0a02 	mov.w	sl, #2
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff fe98 	bl	8008784 <rshift>
 8008a54:	443d      	add	r5, r7
 8008a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a5a:	42ab      	cmp	r3, r5
 8008a5c:	da4c      	bge.n	8008af8 <__gethex+0x2a4>
 8008a5e:	ee18 0a10 	vmov	r0, s16
 8008a62:	4621      	mov	r1, r4
 8008a64:	f000 fa6a 	bl	8008f3c <_Bfree>
 8008a68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	27a3      	movs	r7, #163	; 0xa3
 8008a70:	e785      	b.n	800897e <__gethex+0x12a>
 8008a72:	1e73      	subs	r3, r6, #1
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d019      	beq.n	8008ab4 <__gethex+0x260>
 8008a80:	f1bb 0f20 	cmp.w	fp, #32
 8008a84:	d107      	bne.n	8008a96 <__gethex+0x242>
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	9a00      	ldr	r2, [sp, #0]
 8008a8a:	f843 2b04 	str.w	r2, [r3], #4
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	469b      	mov	fp, r3
 8008a96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a9a:	f7ff fec5 	bl	8008828 <__hexdig_fun>
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	f000 000f 	and.w	r0, r0, #15
 8008aa4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008aa8:	4303      	orrs	r3, r0
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	f10b 0b04 	add.w	fp, fp, #4
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	e00d      	b.n	8008ad0 <__gethex+0x27c>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	4413      	add	r3, r2
 8008aba:	42bb      	cmp	r3, r7
 8008abc:	d3e0      	bcc.n	8008a80 <__gethex+0x22c>
 8008abe:	4618      	mov	r0, r3
 8008ac0:	9901      	ldr	r1, [sp, #4]
 8008ac2:	9307      	str	r3, [sp, #28]
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	f001 f927 	bl	8009d18 <strncmp>
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1d7      	bne.n	8008a80 <__gethex+0x22c>
 8008ad0:	461e      	mov	r6, r3
 8008ad2:	e78b      	b.n	80089ec <__gethex+0x198>
 8008ad4:	f04f 0a03 	mov.w	sl, #3
 8008ad8:	e7b8      	b.n	8008a4c <__gethex+0x1f8>
 8008ada:	da0a      	bge.n	8008af2 <__gethex+0x29e>
 8008adc:	1a37      	subs	r7, r6, r0
 8008ade:	4621      	mov	r1, r4
 8008ae0:	ee18 0a10 	vmov	r0, s16
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	f000 fc45 	bl	8009374 <__lshift>
 8008aea:	1bed      	subs	r5, r5, r7
 8008aec:	4604      	mov	r4, r0
 8008aee:	f100 0914 	add.w	r9, r0, #20
 8008af2:	f04f 0a00 	mov.w	sl, #0
 8008af6:	e7ae      	b.n	8008a56 <__gethex+0x202>
 8008af8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008afc:	42a8      	cmp	r0, r5
 8008afe:	dd72      	ble.n	8008be6 <__gethex+0x392>
 8008b00:	1b45      	subs	r5, r0, r5
 8008b02:	42ae      	cmp	r6, r5
 8008b04:	dc36      	bgt.n	8008b74 <__gethex+0x320>
 8008b06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d02a      	beq.n	8008b64 <__gethex+0x310>
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d02c      	beq.n	8008b6c <__gethex+0x318>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d11c      	bne.n	8008b50 <__gethex+0x2fc>
 8008b16:	42ae      	cmp	r6, r5
 8008b18:	d11a      	bne.n	8008b50 <__gethex+0x2fc>
 8008b1a:	2e01      	cmp	r6, #1
 8008b1c:	d112      	bne.n	8008b44 <__gethex+0x2f0>
 8008b1e:	9a04      	ldr	r2, [sp, #16]
 8008b20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	2301      	movs	r3, #1
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	f8c9 3000 	str.w	r3, [r9]
 8008b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b30:	2762      	movs	r7, #98	; 0x62
 8008b32:	601c      	str	r4, [r3, #0]
 8008b34:	e723      	b.n	800897e <__gethex+0x12a>
 8008b36:	bf00      	nop
 8008b38:	0800ab98 	.word	0x0800ab98
 8008b3c:	0800ab20 	.word	0x0800ab20
 8008b40:	0800ab31 	.word	0x0800ab31
 8008b44:	1e71      	subs	r1, r6, #1
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fe58 	bl	80097fc <__any_on>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d1e6      	bne.n	8008b1e <__gethex+0x2ca>
 8008b50:	ee18 0a10 	vmov	r0, s16
 8008b54:	4621      	mov	r1, r4
 8008b56:	f000 f9f1 	bl	8008f3c <_Bfree>
 8008b5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	2750      	movs	r7, #80	; 0x50
 8008b62:	e70c      	b.n	800897e <__gethex+0x12a>
 8008b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f2      	bne.n	8008b50 <__gethex+0x2fc>
 8008b6a:	e7d8      	b.n	8008b1e <__gethex+0x2ca>
 8008b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1d5      	bne.n	8008b1e <__gethex+0x2ca>
 8008b72:	e7ed      	b.n	8008b50 <__gethex+0x2fc>
 8008b74:	1e6f      	subs	r7, r5, #1
 8008b76:	f1ba 0f00 	cmp.w	sl, #0
 8008b7a:	d131      	bne.n	8008be0 <__gethex+0x38c>
 8008b7c:	b127      	cbz	r7, 8008b88 <__gethex+0x334>
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fe3b 	bl	80097fc <__any_on>
 8008b86:	4682      	mov	sl, r0
 8008b88:	117b      	asrs	r3, r7, #5
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b90:	f007 071f 	and.w	r7, r7, #31
 8008b94:	fa01 f707 	lsl.w	r7, r1, r7
 8008b98:	421f      	tst	r7, r3
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	bf18      	it	ne
 8008ba0:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ba4:	1b76      	subs	r6, r6, r5
 8008ba6:	f7ff fded 	bl	8008784 <rshift>
 8008baa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bae:	2702      	movs	r7, #2
 8008bb0:	f1ba 0f00 	cmp.w	sl, #0
 8008bb4:	d048      	beq.n	8008c48 <__gethex+0x3f4>
 8008bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d015      	beq.n	8008bea <__gethex+0x396>
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d017      	beq.n	8008bf2 <__gethex+0x39e>
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d109      	bne.n	8008bda <__gethex+0x386>
 8008bc6:	f01a 0f02 	tst.w	sl, #2
 8008bca:	d006      	beq.n	8008bda <__gethex+0x386>
 8008bcc:	f8d9 0000 	ldr.w	r0, [r9]
 8008bd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bd4:	f01a 0f01 	tst.w	sl, #1
 8008bd8:	d10e      	bne.n	8008bf8 <__gethex+0x3a4>
 8008bda:	f047 0710 	orr.w	r7, r7, #16
 8008bde:	e033      	b.n	8008c48 <__gethex+0x3f4>
 8008be0:	f04f 0a01 	mov.w	sl, #1
 8008be4:	e7d0      	b.n	8008b88 <__gethex+0x334>
 8008be6:	2701      	movs	r7, #1
 8008be8:	e7e2      	b.n	8008bb0 <__gethex+0x35c>
 8008bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bec:	f1c3 0301 	rsb	r3, r3, #1
 8008bf0:	9315      	str	r3, [sp, #84]	; 0x54
 8008bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <__gethex+0x386>
 8008bf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008bfc:	f104 0314 	add.w	r3, r4, #20
 8008c00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c08:	f04f 0c00 	mov.w	ip, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c16:	d01c      	beq.n	8008c52 <__gethex+0x3fe>
 8008c18:	3201      	adds	r2, #1
 8008c1a:	6002      	str	r2, [r0, #0]
 8008c1c:	2f02      	cmp	r7, #2
 8008c1e:	f104 0314 	add.w	r3, r4, #20
 8008c22:	d13f      	bne.n	8008ca4 <__gethex+0x450>
 8008c24:	f8d8 2000 	ldr.w	r2, [r8]
 8008c28:	3a01      	subs	r2, #1
 8008c2a:	42b2      	cmp	r2, r6
 8008c2c:	d10a      	bne.n	8008c44 <__gethex+0x3f0>
 8008c2e:	1171      	asrs	r1, r6, #5
 8008c30:	2201      	movs	r2, #1
 8008c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c36:	f006 061f 	and.w	r6, r6, #31
 8008c3a:	fa02 f606 	lsl.w	r6, r2, r6
 8008c3e:	421e      	tst	r6, r3
 8008c40:	bf18      	it	ne
 8008c42:	4617      	movne	r7, r2
 8008c44:	f047 0720 	orr.w	r7, r7, #32
 8008c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c4a:	601c      	str	r4, [r3, #0]
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	601d      	str	r5, [r3, #0]
 8008c50:	e695      	b.n	800897e <__gethex+0x12a>
 8008c52:	4299      	cmp	r1, r3
 8008c54:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c58:	d8d8      	bhi.n	8008c0c <__gethex+0x3b8>
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	459b      	cmp	fp, r3
 8008c5e:	db19      	blt.n	8008c94 <__gethex+0x440>
 8008c60:	6861      	ldr	r1, [r4, #4]
 8008c62:	ee18 0a10 	vmov	r0, s16
 8008c66:	3101      	adds	r1, #1
 8008c68:	f000 f928 	bl	8008ebc <_Balloc>
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	b918      	cbnz	r0, 8008c78 <__gethex+0x424>
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <__gethex+0x488>)
 8008c72:	4602      	mov	r2, r0
 8008c74:	2184      	movs	r1, #132	; 0x84
 8008c76:	e6a8      	b.n	80089ca <__gethex+0x176>
 8008c78:	6922      	ldr	r2, [r4, #16]
 8008c7a:	3202      	adds	r2, #2
 8008c7c:	f104 010c 	add.w	r1, r4, #12
 8008c80:	0092      	lsls	r2, r2, #2
 8008c82:	300c      	adds	r0, #12
 8008c84:	f000 f90c 	bl	8008ea0 <memcpy>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	ee18 0a10 	vmov	r0, s16
 8008c8e:	f000 f955 	bl	8008f3c <_Bfree>
 8008c92:	464c      	mov	r4, r9
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c9c:	6122      	str	r2, [r4, #16]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	615a      	str	r2, [r3, #20]
 8008ca2:	e7bb      	b.n	8008c1c <__gethex+0x3c8>
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	455a      	cmp	r2, fp
 8008ca8:	dd0b      	ble.n	8008cc2 <__gethex+0x46e>
 8008caa:	2101      	movs	r1, #1
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7ff fd69 	bl	8008784 <rshift>
 8008cb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cb6:	3501      	adds	r5, #1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	f6ff aed0 	blt.w	8008a5e <__gethex+0x20a>
 8008cbe:	2701      	movs	r7, #1
 8008cc0:	e7c0      	b.n	8008c44 <__gethex+0x3f0>
 8008cc2:	f016 061f 	ands.w	r6, r6, #31
 8008cc6:	d0fa      	beq.n	8008cbe <__gethex+0x46a>
 8008cc8:	4453      	add	r3, sl
 8008cca:	f1c6 0620 	rsb	r6, r6, #32
 8008cce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008cd2:	f000 f9e5 	bl	80090a0 <__hi0bits>
 8008cd6:	42b0      	cmp	r0, r6
 8008cd8:	dbe7      	blt.n	8008caa <__gethex+0x456>
 8008cda:	e7f0      	b.n	8008cbe <__gethex+0x46a>
 8008cdc:	0800ab20 	.word	0x0800ab20

08008ce0 <L_shift>:
 8008ce0:	f1c2 0208 	rsb	r2, r2, #8
 8008ce4:	0092      	lsls	r2, r2, #2
 8008ce6:	b570      	push	{r4, r5, r6, lr}
 8008ce8:	f1c2 0620 	rsb	r6, r2, #32
 8008cec:	6843      	ldr	r3, [r0, #4]
 8008cee:	6804      	ldr	r4, [r0, #0]
 8008cf0:	fa03 f506 	lsl.w	r5, r3, r6
 8008cf4:	432c      	orrs	r4, r5
 8008cf6:	40d3      	lsrs	r3, r2
 8008cf8:	6004      	str	r4, [r0, #0]
 8008cfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cfe:	4288      	cmp	r0, r1
 8008d00:	d3f4      	bcc.n	8008cec <L_shift+0xc>
 8008d02:	bd70      	pop	{r4, r5, r6, pc}

08008d04 <__match>:
 8008d04:	b530      	push	{r4, r5, lr}
 8008d06:	6803      	ldr	r3, [r0, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0e:	b914      	cbnz	r4, 8008d16 <__match+0x12>
 8008d10:	6003      	str	r3, [r0, #0]
 8008d12:	2001      	movs	r0, #1
 8008d14:	bd30      	pop	{r4, r5, pc}
 8008d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d1e:	2d19      	cmp	r5, #25
 8008d20:	bf98      	it	ls
 8008d22:	3220      	addls	r2, #32
 8008d24:	42a2      	cmp	r2, r4
 8008d26:	d0f0      	beq.n	8008d0a <__match+0x6>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7f3      	b.n	8008d14 <__match+0x10>

08008d2c <__hexnan>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	115e      	asrs	r6, r3, #5
 8008d34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d38:	f013 031f 	ands.w	r3, r3, #31
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	bf18      	it	ne
 8008d40:	3604      	addne	r6, #4
 8008d42:	2500      	movs	r5, #0
 8008d44:	1f37      	subs	r7, r6, #4
 8008d46:	4690      	mov	r8, r2
 8008d48:	6802      	ldr	r2, [r0, #0]
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d52:	46b9      	mov	r9, r7
 8008d54:	463c      	mov	r4, r7
 8008d56:	9502      	str	r5, [sp, #8]
 8008d58:	46ab      	mov	fp, r5
 8008d5a:	7851      	ldrb	r1, [r2, #1]
 8008d5c:	1c53      	adds	r3, r2, #1
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	b341      	cbz	r1, 8008db4 <__hexnan+0x88>
 8008d62:	4608      	mov	r0, r1
 8008d64:	9205      	str	r2, [sp, #20]
 8008d66:	9104      	str	r1, [sp, #16]
 8008d68:	f7ff fd5e 	bl	8008828 <__hexdig_fun>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d14f      	bne.n	8008e10 <__hexnan+0xe4>
 8008d70:	9904      	ldr	r1, [sp, #16]
 8008d72:	9a05      	ldr	r2, [sp, #20]
 8008d74:	2920      	cmp	r1, #32
 8008d76:	d818      	bhi.n	8008daa <__hexnan+0x7e>
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	459b      	cmp	fp, r3
 8008d7c:	dd13      	ble.n	8008da6 <__hexnan+0x7a>
 8008d7e:	454c      	cmp	r4, r9
 8008d80:	d206      	bcs.n	8008d90 <__hexnan+0x64>
 8008d82:	2d07      	cmp	r5, #7
 8008d84:	dc04      	bgt.n	8008d90 <__hexnan+0x64>
 8008d86:	462a      	mov	r2, r5
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff ffa8 	bl	8008ce0 <L_shift>
 8008d90:	4544      	cmp	r4, r8
 8008d92:	d950      	bls.n	8008e36 <__hexnan+0x10a>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f1a4 0904 	sub.w	r9, r4, #4
 8008d9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d9e:	f8cd b008 	str.w	fp, [sp, #8]
 8008da2:	464c      	mov	r4, r9
 8008da4:	461d      	mov	r5, r3
 8008da6:	9a03      	ldr	r2, [sp, #12]
 8008da8:	e7d7      	b.n	8008d5a <__hexnan+0x2e>
 8008daa:	2929      	cmp	r1, #41	; 0x29
 8008dac:	d156      	bne.n	8008e5c <__hexnan+0x130>
 8008dae:	3202      	adds	r2, #2
 8008db0:	f8ca 2000 	str.w	r2, [sl]
 8008db4:	f1bb 0f00 	cmp.w	fp, #0
 8008db8:	d050      	beq.n	8008e5c <__hexnan+0x130>
 8008dba:	454c      	cmp	r4, r9
 8008dbc:	d206      	bcs.n	8008dcc <__hexnan+0xa0>
 8008dbe:	2d07      	cmp	r5, #7
 8008dc0:	dc04      	bgt.n	8008dcc <__hexnan+0xa0>
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7ff ff8a 	bl	8008ce0 <L_shift>
 8008dcc:	4544      	cmp	r4, r8
 8008dce:	d934      	bls.n	8008e3a <__hexnan+0x10e>
 8008dd0:	f1a8 0204 	sub.w	r2, r8, #4
 8008dd4:	4623      	mov	r3, r4
 8008dd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008dda:	f842 1f04 	str.w	r1, [r2, #4]!
 8008dde:	429f      	cmp	r7, r3
 8008de0:	d2f9      	bcs.n	8008dd6 <__hexnan+0xaa>
 8008de2:	1b3b      	subs	r3, r7, r4
 8008de4:	f023 0303 	bic.w	r3, r3, #3
 8008de8:	3304      	adds	r3, #4
 8008dea:	3401      	adds	r4, #1
 8008dec:	3e03      	subs	r6, #3
 8008dee:	42b4      	cmp	r4, r6
 8008df0:	bf88      	it	hi
 8008df2:	2304      	movhi	r3, #4
 8008df4:	4443      	add	r3, r8
 8008df6:	2200      	movs	r2, #0
 8008df8:	f843 2b04 	str.w	r2, [r3], #4
 8008dfc:	429f      	cmp	r7, r3
 8008dfe:	d2fb      	bcs.n	8008df8 <__hexnan+0xcc>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	b91b      	cbnz	r3, 8008e0c <__hexnan+0xe0>
 8008e04:	4547      	cmp	r7, r8
 8008e06:	d127      	bne.n	8008e58 <__hexnan+0x12c>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	2005      	movs	r0, #5
 8008e0e:	e026      	b.n	8008e5e <__hexnan+0x132>
 8008e10:	3501      	adds	r5, #1
 8008e12:	2d08      	cmp	r5, #8
 8008e14:	f10b 0b01 	add.w	fp, fp, #1
 8008e18:	dd06      	ble.n	8008e28 <__hexnan+0xfc>
 8008e1a:	4544      	cmp	r4, r8
 8008e1c:	d9c3      	bls.n	8008da6 <__hexnan+0x7a>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e24:	2501      	movs	r5, #1
 8008e26:	3c04      	subs	r4, #4
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	f000 000f 	and.w	r0, r0, #15
 8008e2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	e7b7      	b.n	8008da6 <__hexnan+0x7a>
 8008e36:	2508      	movs	r5, #8
 8008e38:	e7b5      	b.n	8008da6 <__hexnan+0x7a>
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0df      	beq.n	8008e00 <__hexnan+0xd4>
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	f1c3 0320 	rsb	r3, r3, #32
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e50:	401a      	ands	r2, r3
 8008e52:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e56:	e7d3      	b.n	8008e00 <__hexnan+0xd4>
 8008e58:	3f04      	subs	r7, #4
 8008e5a:	e7d1      	b.n	8008e00 <__hexnan+0xd4>
 8008e5c:	2004      	movs	r0, #4
 8008e5e:	b007      	add	sp, #28
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e64 <_localeconv_r>:
 8008e64:	4800      	ldr	r0, [pc, #0]	; (8008e68 <_localeconv_r+0x4>)
 8008e66:	4770      	bx	lr
 8008e68:	20000164 	.word	0x20000164

08008e6c <malloc>:
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <malloc+0xc>)
 8008e6e:	4601      	mov	r1, r0
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f000 bd67 	b.w	8009944 <_malloc_r>
 8008e76:	bf00      	nop
 8008e78:	2000000c 	.word	0x2000000c

08008e7c <__ascii_mbtowc>:
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	b901      	cbnz	r1, 8008e82 <__ascii_mbtowc+0x6>
 8008e80:	a901      	add	r1, sp, #4
 8008e82:	b142      	cbz	r2, 8008e96 <__ascii_mbtowc+0x1a>
 8008e84:	b14b      	cbz	r3, 8008e9a <__ascii_mbtowc+0x1e>
 8008e86:	7813      	ldrb	r3, [r2, #0]
 8008e88:	600b      	str	r3, [r1, #0]
 8008e8a:	7812      	ldrb	r2, [r2, #0]
 8008e8c:	1e10      	subs	r0, r2, #0
 8008e8e:	bf18      	it	ne
 8008e90:	2001      	movne	r0, #1
 8008e92:	b002      	add	sp, #8
 8008e94:	4770      	bx	lr
 8008e96:	4610      	mov	r0, r2
 8008e98:	e7fb      	b.n	8008e92 <__ascii_mbtowc+0x16>
 8008e9a:	f06f 0001 	mvn.w	r0, #1
 8008e9e:	e7f8      	b.n	8008e92 <__ascii_mbtowc+0x16>

08008ea0 <memcpy>:
 8008ea0:	440a      	add	r2, r1
 8008ea2:	4291      	cmp	r1, r2
 8008ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea8:	d100      	bne.n	8008eac <memcpy+0xc>
 8008eaa:	4770      	bx	lr
 8008eac:	b510      	push	{r4, lr}
 8008eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	d1f9      	bne.n	8008eae <memcpy+0xe>
 8008eba:	bd10      	pop	{r4, pc}

08008ebc <_Balloc>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	b976      	cbnz	r6, 8008ee4 <_Balloc+0x28>
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	f7ff ffd0 	bl	8008e6c <malloc>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6260      	str	r0, [r4, #36]	; 0x24
 8008ed0:	b920      	cbnz	r0, 8008edc <_Balloc+0x20>
 8008ed2:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <_Balloc+0x78>)
 8008ed4:	4818      	ldr	r0, [pc, #96]	; (8008f38 <_Balloc+0x7c>)
 8008ed6:	2166      	movs	r1, #102	; 0x66
 8008ed8:	f000 ff40 	bl	8009d5c <__assert_func>
 8008edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee0:	6006      	str	r6, [r0, #0]
 8008ee2:	60c6      	str	r6, [r0, #12]
 8008ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ee6:	68f3      	ldr	r3, [r6, #12]
 8008ee8:	b183      	cbz	r3, 8008f0c <_Balloc+0x50>
 8008eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ef2:	b9b8      	cbnz	r0, 8008f24 <_Balloc+0x68>
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8008efa:	1d72      	adds	r2, r6, #5
 8008efc:	0092      	lsls	r2, r2, #2
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fc9d 	bl	800983e <_calloc_r>
 8008f04:	b160      	cbz	r0, 8008f20 <_Balloc+0x64>
 8008f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f0a:	e00e      	b.n	8008f2a <_Balloc+0x6e>
 8008f0c:	2221      	movs	r2, #33	; 0x21
 8008f0e:	2104      	movs	r1, #4
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fc94 	bl	800983e <_calloc_r>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	60f0      	str	r0, [r6, #12]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e4      	bne.n	8008eea <_Balloc+0x2e>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	6802      	ldr	r2, [r0, #0]
 8008f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f30:	e7f7      	b.n	8008f22 <_Balloc+0x66>
 8008f32:	bf00      	nop
 8008f34:	0800aaae 	.word	0x0800aaae
 8008f38:	0800abac 	.word	0x0800abac

08008f3c <_Bfree>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b976      	cbnz	r6, 8008f64 <_Bfree+0x28>
 8008f46:	2010      	movs	r0, #16
 8008f48:	f7ff ff90 	bl	8008e6c <malloc>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8008f50:	b920      	cbnz	r0, 8008f5c <_Bfree+0x20>
 8008f52:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <_Bfree+0x3c>)
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <_Bfree+0x40>)
 8008f56:	218a      	movs	r1, #138	; 0x8a
 8008f58:	f000 ff00 	bl	8009d5c <__assert_func>
 8008f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f60:	6006      	str	r6, [r0, #0]
 8008f62:	60c6      	str	r6, [r0, #12]
 8008f64:	b13c      	cbz	r4, 8008f76 <_Bfree+0x3a>
 8008f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f68:	6862      	ldr	r2, [r4, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f70:	6021      	str	r1, [r4, #0]
 8008f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	0800aaae 	.word	0x0800aaae
 8008f7c:	0800abac 	.word	0x0800abac

08008f80 <__multadd>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	690d      	ldr	r5, [r1, #16]
 8008f86:	4607      	mov	r7, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	461e      	mov	r6, r3
 8008f8c:	f101 0c14 	add.w	ip, r1, #20
 8008f90:	2000      	movs	r0, #0
 8008f92:	f8dc 3000 	ldr.w	r3, [ip]
 8008f96:	b299      	uxth	r1, r3
 8008f98:	fb02 6101 	mla	r1, r2, r1, r6
 8008f9c:	0c1e      	lsrs	r6, r3, #16
 8008f9e:	0c0b      	lsrs	r3, r1, #16
 8008fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8008fa4:	b289      	uxth	r1, r1
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fac:	4285      	cmp	r5, r0
 8008fae:	f84c 1b04 	str.w	r1, [ip], #4
 8008fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fb6:	dcec      	bgt.n	8008f92 <__multadd+0x12>
 8008fb8:	b30e      	cbz	r6, 8008ffe <__multadd+0x7e>
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dc19      	bgt.n	8008ff4 <__multadd+0x74>
 8008fc0:	6861      	ldr	r1, [r4, #4]
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	3101      	adds	r1, #1
 8008fc6:	f7ff ff79 	bl	8008ebc <_Balloc>
 8008fca:	4680      	mov	r8, r0
 8008fcc:	b928      	cbnz	r0, 8008fda <__multadd+0x5a>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <__multadd+0x84>)
 8008fd2:	480d      	ldr	r0, [pc, #52]	; (8009008 <__multadd+0x88>)
 8008fd4:	21b5      	movs	r1, #181	; 0xb5
 8008fd6:	f000 fec1 	bl	8009d5c <__assert_func>
 8008fda:	6922      	ldr	r2, [r4, #16]
 8008fdc:	3202      	adds	r2, #2
 8008fde:	f104 010c 	add.w	r1, r4, #12
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	300c      	adds	r0, #12
 8008fe6:	f7ff ff5b 	bl	8008ea0 <memcpy>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ffa5 	bl	8008f3c <_Bfree>
 8008ff2:	4644      	mov	r4, r8
 8008ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	615e      	str	r6, [r3, #20]
 8008ffc:	6125      	str	r5, [r4, #16]
 8008ffe:	4620      	mov	r0, r4
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	0800ab20 	.word	0x0800ab20
 8009008:	0800abac 	.word	0x0800abac

0800900c <__s2b>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	4615      	mov	r5, r2
 8009014:	461f      	mov	r7, r3
 8009016:	2209      	movs	r2, #9
 8009018:	3308      	adds	r3, #8
 800901a:	4606      	mov	r6, r0
 800901c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009020:	2100      	movs	r1, #0
 8009022:	2201      	movs	r2, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	db09      	blt.n	800903c <__s2b+0x30>
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff ff47 	bl	8008ebc <_Balloc>
 800902e:	b940      	cbnz	r0, 8009042 <__s2b+0x36>
 8009030:	4602      	mov	r2, r0
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <__s2b+0x8c>)
 8009034:	4819      	ldr	r0, [pc, #100]	; (800909c <__s2b+0x90>)
 8009036:	21ce      	movs	r1, #206	; 0xce
 8009038:	f000 fe90 	bl	8009d5c <__assert_func>
 800903c:	0052      	lsls	r2, r2, #1
 800903e:	3101      	adds	r1, #1
 8009040:	e7f0      	b.n	8009024 <__s2b+0x18>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	6143      	str	r3, [r0, #20]
 8009046:	2d09      	cmp	r5, #9
 8009048:	f04f 0301 	mov.w	r3, #1
 800904c:	6103      	str	r3, [r0, #16]
 800904e:	dd16      	ble.n	800907e <__s2b+0x72>
 8009050:	f104 0909 	add.w	r9, r4, #9
 8009054:	46c8      	mov	r8, r9
 8009056:	442c      	add	r4, r5
 8009058:	f818 3b01 	ldrb.w	r3, [r8], #1
 800905c:	4601      	mov	r1, r0
 800905e:	3b30      	subs	r3, #48	; 0x30
 8009060:	220a      	movs	r2, #10
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff8c 	bl	8008f80 <__multadd>
 8009068:	45a0      	cmp	r8, r4
 800906a:	d1f5      	bne.n	8009058 <__s2b+0x4c>
 800906c:	f1a5 0408 	sub.w	r4, r5, #8
 8009070:	444c      	add	r4, r9
 8009072:	1b2d      	subs	r5, r5, r4
 8009074:	1963      	adds	r3, r4, r5
 8009076:	42bb      	cmp	r3, r7
 8009078:	db04      	blt.n	8009084 <__s2b+0x78>
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800907e:	340a      	adds	r4, #10
 8009080:	2509      	movs	r5, #9
 8009082:	e7f6      	b.n	8009072 <__s2b+0x66>
 8009084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009088:	4601      	mov	r1, r0
 800908a:	3b30      	subs	r3, #48	; 0x30
 800908c:	220a      	movs	r2, #10
 800908e:	4630      	mov	r0, r6
 8009090:	f7ff ff76 	bl	8008f80 <__multadd>
 8009094:	e7ee      	b.n	8009074 <__s2b+0x68>
 8009096:	bf00      	nop
 8009098:	0800ab20 	.word	0x0800ab20
 800909c:	0800abac 	.word	0x0800abac

080090a0 <__hi0bits>:
 80090a0:	0c03      	lsrs	r3, r0, #16
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	b9d3      	cbnz	r3, 80090dc <__hi0bits+0x3c>
 80090a6:	0400      	lsls	r0, r0, #16
 80090a8:	2310      	movs	r3, #16
 80090aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090ae:	bf04      	itt	eq
 80090b0:	0200      	lsleq	r0, r0, #8
 80090b2:	3308      	addeq	r3, #8
 80090b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090b8:	bf04      	itt	eq
 80090ba:	0100      	lsleq	r0, r0, #4
 80090bc:	3304      	addeq	r3, #4
 80090be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090c2:	bf04      	itt	eq
 80090c4:	0080      	lsleq	r0, r0, #2
 80090c6:	3302      	addeq	r3, #2
 80090c8:	2800      	cmp	r0, #0
 80090ca:	db05      	blt.n	80090d8 <__hi0bits+0x38>
 80090cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090d0:	f103 0301 	add.w	r3, r3, #1
 80090d4:	bf08      	it	eq
 80090d6:	2320      	moveq	r3, #32
 80090d8:	4618      	mov	r0, r3
 80090da:	4770      	bx	lr
 80090dc:	2300      	movs	r3, #0
 80090de:	e7e4      	b.n	80090aa <__hi0bits+0xa>

080090e0 <__lo0bits>:
 80090e0:	6803      	ldr	r3, [r0, #0]
 80090e2:	f013 0207 	ands.w	r2, r3, #7
 80090e6:	4601      	mov	r1, r0
 80090e8:	d00b      	beq.n	8009102 <__lo0bits+0x22>
 80090ea:	07da      	lsls	r2, r3, #31
 80090ec:	d423      	bmi.n	8009136 <__lo0bits+0x56>
 80090ee:	0798      	lsls	r0, r3, #30
 80090f0:	bf49      	itett	mi
 80090f2:	085b      	lsrmi	r3, r3, #1
 80090f4:	089b      	lsrpl	r3, r3, #2
 80090f6:	2001      	movmi	r0, #1
 80090f8:	600b      	strmi	r3, [r1, #0]
 80090fa:	bf5c      	itt	pl
 80090fc:	600b      	strpl	r3, [r1, #0]
 80090fe:	2002      	movpl	r0, #2
 8009100:	4770      	bx	lr
 8009102:	b298      	uxth	r0, r3
 8009104:	b9a8      	cbnz	r0, 8009132 <__lo0bits+0x52>
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	2010      	movs	r0, #16
 800910a:	b2da      	uxtb	r2, r3
 800910c:	b90a      	cbnz	r2, 8009112 <__lo0bits+0x32>
 800910e:	3008      	adds	r0, #8
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	071a      	lsls	r2, r3, #28
 8009114:	bf04      	itt	eq
 8009116:	091b      	lsreq	r3, r3, #4
 8009118:	3004      	addeq	r0, #4
 800911a:	079a      	lsls	r2, r3, #30
 800911c:	bf04      	itt	eq
 800911e:	089b      	lsreq	r3, r3, #2
 8009120:	3002      	addeq	r0, #2
 8009122:	07da      	lsls	r2, r3, #31
 8009124:	d403      	bmi.n	800912e <__lo0bits+0x4e>
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	f100 0001 	add.w	r0, r0, #1
 800912c:	d005      	beq.n	800913a <__lo0bits+0x5a>
 800912e:	600b      	str	r3, [r1, #0]
 8009130:	4770      	bx	lr
 8009132:	4610      	mov	r0, r2
 8009134:	e7e9      	b.n	800910a <__lo0bits+0x2a>
 8009136:	2000      	movs	r0, #0
 8009138:	4770      	bx	lr
 800913a:	2020      	movs	r0, #32
 800913c:	4770      	bx	lr
	...

08009140 <__i2b>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	2101      	movs	r1, #1
 8009146:	f7ff feb9 	bl	8008ebc <_Balloc>
 800914a:	4602      	mov	r2, r0
 800914c:	b928      	cbnz	r0, 800915a <__i2b+0x1a>
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <__i2b+0x24>)
 8009150:	4805      	ldr	r0, [pc, #20]	; (8009168 <__i2b+0x28>)
 8009152:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009156:	f000 fe01 	bl	8009d5c <__assert_func>
 800915a:	2301      	movs	r3, #1
 800915c:	6144      	str	r4, [r0, #20]
 800915e:	6103      	str	r3, [r0, #16]
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	0800ab20 	.word	0x0800ab20
 8009168:	0800abac 	.word	0x0800abac

0800916c <__multiply>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	4691      	mov	r9, r2
 8009172:	690a      	ldr	r2, [r1, #16]
 8009174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009178:	429a      	cmp	r2, r3
 800917a:	bfb8      	it	lt
 800917c:	460b      	movlt	r3, r1
 800917e:	460c      	mov	r4, r1
 8009180:	bfbc      	itt	lt
 8009182:	464c      	movlt	r4, r9
 8009184:	4699      	movlt	r9, r3
 8009186:	6927      	ldr	r7, [r4, #16]
 8009188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800918c:	68a3      	ldr	r3, [r4, #8]
 800918e:	6861      	ldr	r1, [r4, #4]
 8009190:	eb07 060a 	add.w	r6, r7, sl
 8009194:	42b3      	cmp	r3, r6
 8009196:	b085      	sub	sp, #20
 8009198:	bfb8      	it	lt
 800919a:	3101      	addlt	r1, #1
 800919c:	f7ff fe8e 	bl	8008ebc <_Balloc>
 80091a0:	b930      	cbnz	r0, 80091b0 <__multiply+0x44>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b44      	ldr	r3, [pc, #272]	; (80092b8 <__multiply+0x14c>)
 80091a6:	4845      	ldr	r0, [pc, #276]	; (80092bc <__multiply+0x150>)
 80091a8:	f240 115d 	movw	r1, #349	; 0x15d
 80091ac:	f000 fdd6 	bl	8009d5c <__assert_func>
 80091b0:	f100 0514 	add.w	r5, r0, #20
 80091b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091b8:	462b      	mov	r3, r5
 80091ba:	2200      	movs	r2, #0
 80091bc:	4543      	cmp	r3, r8
 80091be:	d321      	bcc.n	8009204 <__multiply+0x98>
 80091c0:	f104 0314 	add.w	r3, r4, #20
 80091c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091c8:	f109 0314 	add.w	r3, r9, #20
 80091cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091d0:	9202      	str	r2, [sp, #8]
 80091d2:	1b3a      	subs	r2, r7, r4
 80091d4:	3a15      	subs	r2, #21
 80091d6:	f022 0203 	bic.w	r2, r2, #3
 80091da:	3204      	adds	r2, #4
 80091dc:	f104 0115 	add.w	r1, r4, #21
 80091e0:	428f      	cmp	r7, r1
 80091e2:	bf38      	it	cc
 80091e4:	2204      	movcc	r2, #4
 80091e6:	9201      	str	r2, [sp, #4]
 80091e8:	9a02      	ldr	r2, [sp, #8]
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d80c      	bhi.n	800920a <__multiply+0x9e>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	dd03      	ble.n	80091fc <__multiply+0x90>
 80091f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d05a      	beq.n	80092b2 <__multiply+0x146>
 80091fc:	6106      	str	r6, [r0, #16]
 80091fe:	b005      	add	sp, #20
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	f843 2b04 	str.w	r2, [r3], #4
 8009208:	e7d8      	b.n	80091bc <__multiply+0x50>
 800920a:	f8b3 a000 	ldrh.w	sl, [r3]
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	d024      	beq.n	800925e <__multiply+0xf2>
 8009214:	f104 0e14 	add.w	lr, r4, #20
 8009218:	46a9      	mov	r9, r5
 800921a:	f04f 0c00 	mov.w	ip, #0
 800921e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009222:	f8d9 1000 	ldr.w	r1, [r9]
 8009226:	fa1f fb82 	uxth.w	fp, r2
 800922a:	b289      	uxth	r1, r1
 800922c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009234:	f8d9 2000 	ldr.w	r2, [r9]
 8009238:	4461      	add	r1, ip
 800923a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800923e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009246:	b289      	uxth	r1, r1
 8009248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800924c:	4577      	cmp	r7, lr
 800924e:	f849 1b04 	str.w	r1, [r9], #4
 8009252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009256:	d8e2      	bhi.n	800921e <__multiply+0xb2>
 8009258:	9a01      	ldr	r2, [sp, #4]
 800925a:	f845 c002 	str.w	ip, [r5, r2]
 800925e:	9a03      	ldr	r2, [sp, #12]
 8009260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009264:	3304      	adds	r3, #4
 8009266:	f1b9 0f00 	cmp.w	r9, #0
 800926a:	d020      	beq.n	80092ae <__multiply+0x142>
 800926c:	6829      	ldr	r1, [r5, #0]
 800926e:	f104 0c14 	add.w	ip, r4, #20
 8009272:	46ae      	mov	lr, r5
 8009274:	f04f 0a00 	mov.w	sl, #0
 8009278:	f8bc b000 	ldrh.w	fp, [ip]
 800927c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009280:	fb09 220b 	mla	r2, r9, fp, r2
 8009284:	4492      	add	sl, r2
 8009286:	b289      	uxth	r1, r1
 8009288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800928c:	f84e 1b04 	str.w	r1, [lr], #4
 8009290:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009294:	f8be 1000 	ldrh.w	r1, [lr]
 8009298:	0c12      	lsrs	r2, r2, #16
 800929a:	fb09 1102 	mla	r1, r9, r2, r1
 800929e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092a2:	4567      	cmp	r7, ip
 80092a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092a8:	d8e6      	bhi.n	8009278 <__multiply+0x10c>
 80092aa:	9a01      	ldr	r2, [sp, #4]
 80092ac:	50a9      	str	r1, [r5, r2]
 80092ae:	3504      	adds	r5, #4
 80092b0:	e79a      	b.n	80091e8 <__multiply+0x7c>
 80092b2:	3e01      	subs	r6, #1
 80092b4:	e79c      	b.n	80091f0 <__multiply+0x84>
 80092b6:	bf00      	nop
 80092b8:	0800ab20 	.word	0x0800ab20
 80092bc:	0800abac 	.word	0x0800abac

080092c0 <__pow5mult>:
 80092c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c4:	4615      	mov	r5, r2
 80092c6:	f012 0203 	ands.w	r2, r2, #3
 80092ca:	4606      	mov	r6, r0
 80092cc:	460f      	mov	r7, r1
 80092ce:	d007      	beq.n	80092e0 <__pow5mult+0x20>
 80092d0:	4c25      	ldr	r4, [pc, #148]	; (8009368 <__pow5mult+0xa8>)
 80092d2:	3a01      	subs	r2, #1
 80092d4:	2300      	movs	r3, #0
 80092d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092da:	f7ff fe51 	bl	8008f80 <__multadd>
 80092de:	4607      	mov	r7, r0
 80092e0:	10ad      	asrs	r5, r5, #2
 80092e2:	d03d      	beq.n	8009360 <__pow5mult+0xa0>
 80092e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092e6:	b97c      	cbnz	r4, 8009308 <__pow5mult+0x48>
 80092e8:	2010      	movs	r0, #16
 80092ea:	f7ff fdbf 	bl	8008e6c <malloc>
 80092ee:	4602      	mov	r2, r0
 80092f0:	6270      	str	r0, [r6, #36]	; 0x24
 80092f2:	b928      	cbnz	r0, 8009300 <__pow5mult+0x40>
 80092f4:	4b1d      	ldr	r3, [pc, #116]	; (800936c <__pow5mult+0xac>)
 80092f6:	481e      	ldr	r0, [pc, #120]	; (8009370 <__pow5mult+0xb0>)
 80092f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092fc:	f000 fd2e 	bl	8009d5c <__assert_func>
 8009300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009304:	6004      	str	r4, [r0, #0]
 8009306:	60c4      	str	r4, [r0, #12]
 8009308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800930c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009310:	b94c      	cbnz	r4, 8009326 <__pow5mult+0x66>
 8009312:	f240 2171 	movw	r1, #625	; 0x271
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff ff12 	bl	8009140 <__i2b>
 800931c:	2300      	movs	r3, #0
 800931e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009322:	4604      	mov	r4, r0
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	f04f 0900 	mov.w	r9, #0
 800932a:	07eb      	lsls	r3, r5, #31
 800932c:	d50a      	bpl.n	8009344 <__pow5mult+0x84>
 800932e:	4639      	mov	r1, r7
 8009330:	4622      	mov	r2, r4
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ff1a 	bl	800916c <__multiply>
 8009338:	4639      	mov	r1, r7
 800933a:	4680      	mov	r8, r0
 800933c:	4630      	mov	r0, r6
 800933e:	f7ff fdfd 	bl	8008f3c <_Bfree>
 8009342:	4647      	mov	r7, r8
 8009344:	106d      	asrs	r5, r5, #1
 8009346:	d00b      	beq.n	8009360 <__pow5mult+0xa0>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	b938      	cbnz	r0, 800935c <__pow5mult+0x9c>
 800934c:	4622      	mov	r2, r4
 800934e:	4621      	mov	r1, r4
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff ff0b 	bl	800916c <__multiply>
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	f8c0 9000 	str.w	r9, [r0]
 800935c:	4604      	mov	r4, r0
 800935e:	e7e4      	b.n	800932a <__pow5mult+0x6a>
 8009360:	4638      	mov	r0, r7
 8009362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009366:	bf00      	nop
 8009368:	0800acf8 	.word	0x0800acf8
 800936c:	0800aaae 	.word	0x0800aaae
 8009370:	0800abac 	.word	0x0800abac

08009374 <__lshift>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	6849      	ldr	r1, [r1, #4]
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	4607      	mov	r7, r0
 8009386:	4691      	mov	r9, r2
 8009388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800938c:	f108 0601 	add.w	r6, r8, #1
 8009390:	42b3      	cmp	r3, r6
 8009392:	db0b      	blt.n	80093ac <__lshift+0x38>
 8009394:	4638      	mov	r0, r7
 8009396:	f7ff fd91 	bl	8008ebc <_Balloc>
 800939a:	4605      	mov	r5, r0
 800939c:	b948      	cbnz	r0, 80093b2 <__lshift+0x3e>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b2a      	ldr	r3, [pc, #168]	; (800944c <__lshift+0xd8>)
 80093a2:	482b      	ldr	r0, [pc, #172]	; (8009450 <__lshift+0xdc>)
 80093a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093a8:	f000 fcd8 	bl	8009d5c <__assert_func>
 80093ac:	3101      	adds	r1, #1
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	e7ee      	b.n	8009390 <__lshift+0x1c>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f100 0114 	add.w	r1, r0, #20
 80093b8:	f100 0210 	add.w	r2, r0, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	4553      	cmp	r3, sl
 80093c0:	db37      	blt.n	8009432 <__lshift+0xbe>
 80093c2:	6920      	ldr	r0, [r4, #16]
 80093c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c8:	f104 0314 	add.w	r3, r4, #20
 80093cc:	f019 091f 	ands.w	r9, r9, #31
 80093d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093d8:	d02f      	beq.n	800943a <__lshift+0xc6>
 80093da:	f1c9 0e20 	rsb	lr, r9, #32
 80093de:	468a      	mov	sl, r1
 80093e0:	f04f 0c00 	mov.w	ip, #0
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	fa02 f209 	lsl.w	r2, r2, r9
 80093ea:	ea42 020c 	orr.w	r2, r2, ip
 80093ee:	f84a 2b04 	str.w	r2, [sl], #4
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	4298      	cmp	r0, r3
 80093f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093fc:	d8f2      	bhi.n	80093e4 <__lshift+0x70>
 80093fe:	1b03      	subs	r3, r0, r4
 8009400:	3b15      	subs	r3, #21
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	3304      	adds	r3, #4
 8009408:	f104 0215 	add.w	r2, r4, #21
 800940c:	4290      	cmp	r0, r2
 800940e:	bf38      	it	cc
 8009410:	2304      	movcc	r3, #4
 8009412:	f841 c003 	str.w	ip, [r1, r3]
 8009416:	f1bc 0f00 	cmp.w	ip, #0
 800941a:	d001      	beq.n	8009420 <__lshift+0xac>
 800941c:	f108 0602 	add.w	r6, r8, #2
 8009420:	3e01      	subs	r6, #1
 8009422:	4638      	mov	r0, r7
 8009424:	612e      	str	r6, [r5, #16]
 8009426:	4621      	mov	r1, r4
 8009428:	f7ff fd88 	bl	8008f3c <_Bfree>
 800942c:	4628      	mov	r0, r5
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f842 0f04 	str.w	r0, [r2, #4]!
 8009436:	3301      	adds	r3, #1
 8009438:	e7c1      	b.n	80093be <__lshift+0x4a>
 800943a:	3904      	subs	r1, #4
 800943c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009440:	f841 2f04 	str.w	r2, [r1, #4]!
 8009444:	4298      	cmp	r0, r3
 8009446:	d8f9      	bhi.n	800943c <__lshift+0xc8>
 8009448:	e7ea      	b.n	8009420 <__lshift+0xac>
 800944a:	bf00      	nop
 800944c:	0800ab20 	.word	0x0800ab20
 8009450:	0800abac 	.word	0x0800abac

08009454 <__mcmp>:
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	6902      	ldr	r2, [r0, #16]
 8009458:	690c      	ldr	r4, [r1, #16]
 800945a:	1b12      	subs	r2, r2, r4
 800945c:	d10e      	bne.n	800947c <__mcmp+0x28>
 800945e:	f100 0314 	add.w	r3, r0, #20
 8009462:	3114      	adds	r1, #20
 8009464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800946c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009474:	42a5      	cmp	r5, r4
 8009476:	d003      	beq.n	8009480 <__mcmp+0x2c>
 8009478:	d305      	bcc.n	8009486 <__mcmp+0x32>
 800947a:	2201      	movs	r2, #1
 800947c:	4610      	mov	r0, r2
 800947e:	bd30      	pop	{r4, r5, pc}
 8009480:	4283      	cmp	r3, r0
 8009482:	d3f3      	bcc.n	800946c <__mcmp+0x18>
 8009484:	e7fa      	b.n	800947c <__mcmp+0x28>
 8009486:	f04f 32ff 	mov.w	r2, #4294967295
 800948a:	e7f7      	b.n	800947c <__mcmp+0x28>

0800948c <__mdiff>:
 800948c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	460c      	mov	r4, r1
 8009492:	4606      	mov	r6, r0
 8009494:	4611      	mov	r1, r2
 8009496:	4620      	mov	r0, r4
 8009498:	4690      	mov	r8, r2
 800949a:	f7ff ffdb 	bl	8009454 <__mcmp>
 800949e:	1e05      	subs	r5, r0, #0
 80094a0:	d110      	bne.n	80094c4 <__mdiff+0x38>
 80094a2:	4629      	mov	r1, r5
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fd09 	bl	8008ebc <_Balloc>
 80094aa:	b930      	cbnz	r0, 80094ba <__mdiff+0x2e>
 80094ac:	4b3a      	ldr	r3, [pc, #232]	; (8009598 <__mdiff+0x10c>)
 80094ae:	4602      	mov	r2, r0
 80094b0:	f240 2132 	movw	r1, #562	; 0x232
 80094b4:	4839      	ldr	r0, [pc, #228]	; (800959c <__mdiff+0x110>)
 80094b6:	f000 fc51 	bl	8009d5c <__assert_func>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	bfa4      	itt	ge
 80094c6:	4643      	movge	r3, r8
 80094c8:	46a0      	movge	r8, r4
 80094ca:	4630      	mov	r0, r6
 80094cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094d0:	bfa6      	itte	ge
 80094d2:	461c      	movge	r4, r3
 80094d4:	2500      	movge	r5, #0
 80094d6:	2501      	movlt	r5, #1
 80094d8:	f7ff fcf0 	bl	8008ebc <_Balloc>
 80094dc:	b920      	cbnz	r0, 80094e8 <__mdiff+0x5c>
 80094de:	4b2e      	ldr	r3, [pc, #184]	; (8009598 <__mdiff+0x10c>)
 80094e0:	4602      	mov	r2, r0
 80094e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094e6:	e7e5      	b.n	80094b4 <__mdiff+0x28>
 80094e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094ec:	6926      	ldr	r6, [r4, #16]
 80094ee:	60c5      	str	r5, [r0, #12]
 80094f0:	f104 0914 	add.w	r9, r4, #20
 80094f4:	f108 0514 	add.w	r5, r8, #20
 80094f8:	f100 0e14 	add.w	lr, r0, #20
 80094fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009504:	f108 0210 	add.w	r2, r8, #16
 8009508:	46f2      	mov	sl, lr
 800950a:	2100      	movs	r1, #0
 800950c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009514:	fa1f f883 	uxth.w	r8, r3
 8009518:	fa11 f18b 	uxtah	r1, r1, fp
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	eba1 0808 	sub.w	r8, r1, r8
 8009522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009526:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800952a:	fa1f f888 	uxth.w	r8, r8
 800952e:	1419      	asrs	r1, r3, #16
 8009530:	454e      	cmp	r6, r9
 8009532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009536:	f84a 3b04 	str.w	r3, [sl], #4
 800953a:	d8e7      	bhi.n	800950c <__mdiff+0x80>
 800953c:	1b33      	subs	r3, r6, r4
 800953e:	3b15      	subs	r3, #21
 8009540:	f023 0303 	bic.w	r3, r3, #3
 8009544:	3304      	adds	r3, #4
 8009546:	3415      	adds	r4, #21
 8009548:	42a6      	cmp	r6, r4
 800954a:	bf38      	it	cc
 800954c:	2304      	movcc	r3, #4
 800954e:	441d      	add	r5, r3
 8009550:	4473      	add	r3, lr
 8009552:	469e      	mov	lr, r3
 8009554:	462e      	mov	r6, r5
 8009556:	4566      	cmp	r6, ip
 8009558:	d30e      	bcc.n	8009578 <__mdiff+0xec>
 800955a:	f10c 0203 	add.w	r2, ip, #3
 800955e:	1b52      	subs	r2, r2, r5
 8009560:	f022 0203 	bic.w	r2, r2, #3
 8009564:	3d03      	subs	r5, #3
 8009566:	45ac      	cmp	ip, r5
 8009568:	bf38      	it	cc
 800956a:	2200      	movcc	r2, #0
 800956c:	441a      	add	r2, r3
 800956e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009572:	b17b      	cbz	r3, 8009594 <__mdiff+0x108>
 8009574:	6107      	str	r7, [r0, #16]
 8009576:	e7a3      	b.n	80094c0 <__mdiff+0x34>
 8009578:	f856 8b04 	ldr.w	r8, [r6], #4
 800957c:	fa11 f288 	uxtah	r2, r1, r8
 8009580:	1414      	asrs	r4, r2, #16
 8009582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009586:	b292      	uxth	r2, r2
 8009588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800958c:	f84e 2b04 	str.w	r2, [lr], #4
 8009590:	1421      	asrs	r1, r4, #16
 8009592:	e7e0      	b.n	8009556 <__mdiff+0xca>
 8009594:	3f01      	subs	r7, #1
 8009596:	e7ea      	b.n	800956e <__mdiff+0xe2>
 8009598:	0800ab20 	.word	0x0800ab20
 800959c:	0800abac 	.word	0x0800abac

080095a0 <__ulp>:
 80095a0:	b082      	sub	sp, #8
 80095a2:	ed8d 0b00 	vstr	d0, [sp]
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	4912      	ldr	r1, [pc, #72]	; (80095f4 <__ulp+0x54>)
 80095aa:	4019      	ands	r1, r3
 80095ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80095b0:	2900      	cmp	r1, #0
 80095b2:	dd05      	ble.n	80095c0 <__ulp+0x20>
 80095b4:	2200      	movs	r2, #0
 80095b6:	460b      	mov	r3, r1
 80095b8:	ec43 2b10 	vmov	d0, r2, r3
 80095bc:	b002      	add	sp, #8
 80095be:	4770      	bx	lr
 80095c0:	4249      	negs	r1, r1
 80095c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80095c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	f04f 0300 	mov.w	r3, #0
 80095d2:	da04      	bge.n	80095de <__ulp+0x3e>
 80095d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80095d8:	fa41 f300 	asr.w	r3, r1, r0
 80095dc:	e7ec      	b.n	80095b8 <__ulp+0x18>
 80095de:	f1a0 0114 	sub.w	r1, r0, #20
 80095e2:	291e      	cmp	r1, #30
 80095e4:	bfda      	itte	le
 80095e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80095ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80095ee:	2101      	movgt	r1, #1
 80095f0:	460a      	mov	r2, r1
 80095f2:	e7e1      	b.n	80095b8 <__ulp+0x18>
 80095f4:	7ff00000 	.word	0x7ff00000

080095f8 <__b2d>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	6905      	ldr	r5, [r0, #16]
 80095fc:	f100 0714 	add.w	r7, r0, #20
 8009600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009604:	1f2e      	subs	r6, r5, #4
 8009606:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800960a:	4620      	mov	r0, r4
 800960c:	f7ff fd48 	bl	80090a0 <__hi0bits>
 8009610:	f1c0 0320 	rsb	r3, r0, #32
 8009614:	280a      	cmp	r0, #10
 8009616:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009694 <__b2d+0x9c>
 800961a:	600b      	str	r3, [r1, #0]
 800961c:	dc14      	bgt.n	8009648 <__b2d+0x50>
 800961e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009622:	fa24 f10e 	lsr.w	r1, r4, lr
 8009626:	42b7      	cmp	r7, r6
 8009628:	ea41 030c 	orr.w	r3, r1, ip
 800962c:	bf34      	ite	cc
 800962e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009632:	2100      	movcs	r1, #0
 8009634:	3015      	adds	r0, #21
 8009636:	fa04 f000 	lsl.w	r0, r4, r0
 800963a:	fa21 f10e 	lsr.w	r1, r1, lr
 800963e:	ea40 0201 	orr.w	r2, r0, r1
 8009642:	ec43 2b10 	vmov	d0, r2, r3
 8009646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009648:	42b7      	cmp	r7, r6
 800964a:	bf3a      	itte	cc
 800964c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009650:	f1a5 0608 	subcc.w	r6, r5, #8
 8009654:	2100      	movcs	r1, #0
 8009656:	380b      	subs	r0, #11
 8009658:	d017      	beq.n	800968a <__b2d+0x92>
 800965a:	f1c0 0c20 	rsb	ip, r0, #32
 800965e:	fa04 f500 	lsl.w	r5, r4, r0
 8009662:	42be      	cmp	r6, r7
 8009664:	fa21 f40c 	lsr.w	r4, r1, ip
 8009668:	ea45 0504 	orr.w	r5, r5, r4
 800966c:	bf8c      	ite	hi
 800966e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009672:	2400      	movls	r4, #0
 8009674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009678:	fa01 f000 	lsl.w	r0, r1, r0
 800967c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009684:	ea40 0204 	orr.w	r2, r0, r4
 8009688:	e7db      	b.n	8009642 <__b2d+0x4a>
 800968a:	ea44 030c 	orr.w	r3, r4, ip
 800968e:	460a      	mov	r2, r1
 8009690:	e7d7      	b.n	8009642 <__b2d+0x4a>
 8009692:	bf00      	nop
 8009694:	3ff00000 	.word	0x3ff00000

08009698 <__d2b>:
 8009698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800969c:	4689      	mov	r9, r1
 800969e:	2101      	movs	r1, #1
 80096a0:	ec57 6b10 	vmov	r6, r7, d0
 80096a4:	4690      	mov	r8, r2
 80096a6:	f7ff fc09 	bl	8008ebc <_Balloc>
 80096aa:	4604      	mov	r4, r0
 80096ac:	b930      	cbnz	r0, 80096bc <__d2b+0x24>
 80096ae:	4602      	mov	r2, r0
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <__d2b+0xb0>)
 80096b2:	4826      	ldr	r0, [pc, #152]	; (800974c <__d2b+0xb4>)
 80096b4:	f240 310a 	movw	r1, #778	; 0x30a
 80096b8:	f000 fb50 	bl	8009d5c <__assert_func>
 80096bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096c4:	bb35      	cbnz	r5, 8009714 <__d2b+0x7c>
 80096c6:	2e00      	cmp	r6, #0
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	d028      	beq.n	800971e <__d2b+0x86>
 80096cc:	4668      	mov	r0, sp
 80096ce:	9600      	str	r6, [sp, #0]
 80096d0:	f7ff fd06 	bl	80090e0 <__lo0bits>
 80096d4:	9900      	ldr	r1, [sp, #0]
 80096d6:	b300      	cbz	r0, 800971a <__d2b+0x82>
 80096d8:	9a01      	ldr	r2, [sp, #4]
 80096da:	f1c0 0320 	rsb	r3, r0, #32
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	430b      	orrs	r3, r1
 80096e4:	40c2      	lsrs	r2, r0
 80096e6:	6163      	str	r3, [r4, #20]
 80096e8:	9201      	str	r2, [sp, #4]
 80096ea:	9b01      	ldr	r3, [sp, #4]
 80096ec:	61a3      	str	r3, [r4, #24]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bf14      	ite	ne
 80096f2:	2202      	movne	r2, #2
 80096f4:	2201      	moveq	r2, #1
 80096f6:	6122      	str	r2, [r4, #16]
 80096f8:	b1d5      	cbz	r5, 8009730 <__d2b+0x98>
 80096fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096fe:	4405      	add	r5, r0
 8009700:	f8c9 5000 	str.w	r5, [r9]
 8009704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009708:	f8c8 0000 	str.w	r0, [r8]
 800970c:	4620      	mov	r0, r4
 800970e:	b003      	add	sp, #12
 8009710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009718:	e7d5      	b.n	80096c6 <__d2b+0x2e>
 800971a:	6161      	str	r1, [r4, #20]
 800971c:	e7e5      	b.n	80096ea <__d2b+0x52>
 800971e:	a801      	add	r0, sp, #4
 8009720:	f7ff fcde 	bl	80090e0 <__lo0bits>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	2201      	movs	r2, #1
 800972a:	6122      	str	r2, [r4, #16]
 800972c:	3020      	adds	r0, #32
 800972e:	e7e3      	b.n	80096f8 <__d2b+0x60>
 8009730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009738:	f8c9 0000 	str.w	r0, [r9]
 800973c:	6918      	ldr	r0, [r3, #16]
 800973e:	f7ff fcaf 	bl	80090a0 <__hi0bits>
 8009742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009746:	e7df      	b.n	8009708 <__d2b+0x70>
 8009748:	0800ab20 	.word	0x0800ab20
 800974c:	0800abac 	.word	0x0800abac

08009750 <__ratio>:
 8009750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	4688      	mov	r8, r1
 8009756:	4669      	mov	r1, sp
 8009758:	4681      	mov	r9, r0
 800975a:	f7ff ff4d 	bl	80095f8 <__b2d>
 800975e:	a901      	add	r1, sp, #4
 8009760:	4640      	mov	r0, r8
 8009762:	ec55 4b10 	vmov	r4, r5, d0
 8009766:	f7ff ff47 	bl	80095f8 <__b2d>
 800976a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800976e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009772:	eba3 0c02 	sub.w	ip, r3, r2
 8009776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009780:	ec51 0b10 	vmov	r0, r1, d0
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfd6      	itet	le
 8009788:	460a      	movle	r2, r1
 800978a:	462a      	movgt	r2, r5
 800978c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009790:	468b      	mov	fp, r1
 8009792:	462f      	mov	r7, r5
 8009794:	bfd4      	ite	le
 8009796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800979a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800979e:	4620      	mov	r0, r4
 80097a0:	ee10 2a10 	vmov	r2, s0
 80097a4:	465b      	mov	r3, fp
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f7 f870 	bl	800088c <__aeabi_ddiv>
 80097ac:	ec41 0b10 	vmov	d0, r0, r1
 80097b0:	b003      	add	sp, #12
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097b6 <__copybits>:
 80097b6:	3901      	subs	r1, #1
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	1149      	asrs	r1, r1, #5
 80097bc:	6914      	ldr	r4, [r2, #16]
 80097be:	3101      	adds	r1, #1
 80097c0:	f102 0314 	add.w	r3, r2, #20
 80097c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097cc:	1f05      	subs	r5, r0, #4
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	d30c      	bcc.n	80097ec <__copybits+0x36>
 80097d2:	1aa3      	subs	r3, r4, r2
 80097d4:	3b11      	subs	r3, #17
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	3211      	adds	r2, #17
 80097dc:	42a2      	cmp	r2, r4
 80097de:	bf88      	it	hi
 80097e0:	2300      	movhi	r3, #0
 80097e2:	4418      	add	r0, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	4288      	cmp	r0, r1
 80097e8:	d305      	bcc.n	80097f6 <__copybits+0x40>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80097f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80097f4:	e7eb      	b.n	80097ce <__copybits+0x18>
 80097f6:	f840 3b04 	str.w	r3, [r0], #4
 80097fa:	e7f4      	b.n	80097e6 <__copybits+0x30>

080097fc <__any_on>:
 80097fc:	f100 0214 	add.w	r2, r0, #20
 8009800:	6900      	ldr	r0, [r0, #16]
 8009802:	114b      	asrs	r3, r1, #5
 8009804:	4298      	cmp	r0, r3
 8009806:	b510      	push	{r4, lr}
 8009808:	db11      	blt.n	800982e <__any_on+0x32>
 800980a:	dd0a      	ble.n	8009822 <__any_on+0x26>
 800980c:	f011 011f 	ands.w	r1, r1, #31
 8009810:	d007      	beq.n	8009822 <__any_on+0x26>
 8009812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009816:	fa24 f001 	lsr.w	r0, r4, r1
 800981a:	fa00 f101 	lsl.w	r1, r0, r1
 800981e:	428c      	cmp	r4, r1
 8009820:	d10b      	bne.n	800983a <__any_on+0x3e>
 8009822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009826:	4293      	cmp	r3, r2
 8009828:	d803      	bhi.n	8009832 <__any_on+0x36>
 800982a:	2000      	movs	r0, #0
 800982c:	bd10      	pop	{r4, pc}
 800982e:	4603      	mov	r3, r0
 8009830:	e7f7      	b.n	8009822 <__any_on+0x26>
 8009832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009836:	2900      	cmp	r1, #0
 8009838:	d0f5      	beq.n	8009826 <__any_on+0x2a>
 800983a:	2001      	movs	r0, #1
 800983c:	e7f6      	b.n	800982c <__any_on+0x30>

0800983e <_calloc_r>:
 800983e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009840:	fba1 2402 	umull	r2, r4, r1, r2
 8009844:	b94c      	cbnz	r4, 800985a <_calloc_r+0x1c>
 8009846:	4611      	mov	r1, r2
 8009848:	9201      	str	r2, [sp, #4]
 800984a:	f000 f87b 	bl	8009944 <_malloc_r>
 800984e:	9a01      	ldr	r2, [sp, #4]
 8009850:	4605      	mov	r5, r0
 8009852:	b930      	cbnz	r0, 8009862 <_calloc_r+0x24>
 8009854:	4628      	mov	r0, r5
 8009856:	b003      	add	sp, #12
 8009858:	bd30      	pop	{r4, r5, pc}
 800985a:	220c      	movs	r2, #12
 800985c:	6002      	str	r2, [r0, #0]
 800985e:	2500      	movs	r5, #0
 8009860:	e7f8      	b.n	8009854 <_calloc_r+0x16>
 8009862:	4621      	mov	r1, r4
 8009864:	f7fc fbbe 	bl	8005fe4 <memset>
 8009868:	e7f4      	b.n	8009854 <_calloc_r+0x16>
	...

0800986c <_free_r>:
 800986c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800986e:	2900      	cmp	r1, #0
 8009870:	d044      	beq.n	80098fc <_free_r+0x90>
 8009872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009876:	9001      	str	r0, [sp, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f1a1 0404 	sub.w	r4, r1, #4
 800987e:	bfb8      	it	lt
 8009880:	18e4      	addlt	r4, r4, r3
 8009882:	f000 fab5 	bl	8009df0 <__malloc_lock>
 8009886:	4a1e      	ldr	r2, [pc, #120]	; (8009900 <_free_r+0x94>)
 8009888:	9801      	ldr	r0, [sp, #4]
 800988a:	6813      	ldr	r3, [r2, #0]
 800988c:	b933      	cbnz	r3, 800989c <_free_r+0x30>
 800988e:	6063      	str	r3, [r4, #4]
 8009890:	6014      	str	r4, [r2, #0]
 8009892:	b003      	add	sp, #12
 8009894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009898:	f000 bab0 	b.w	8009dfc <__malloc_unlock>
 800989c:	42a3      	cmp	r3, r4
 800989e:	d908      	bls.n	80098b2 <_free_r+0x46>
 80098a0:	6825      	ldr	r5, [r4, #0]
 80098a2:	1961      	adds	r1, r4, r5
 80098a4:	428b      	cmp	r3, r1
 80098a6:	bf01      	itttt	eq
 80098a8:	6819      	ldreq	r1, [r3, #0]
 80098aa:	685b      	ldreq	r3, [r3, #4]
 80098ac:	1949      	addeq	r1, r1, r5
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	e7ed      	b.n	800988e <_free_r+0x22>
 80098b2:	461a      	mov	r2, r3
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	b10b      	cbz	r3, 80098bc <_free_r+0x50>
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d9fa      	bls.n	80098b2 <_free_r+0x46>
 80098bc:	6811      	ldr	r1, [r2, #0]
 80098be:	1855      	adds	r5, r2, r1
 80098c0:	42a5      	cmp	r5, r4
 80098c2:	d10b      	bne.n	80098dc <_free_r+0x70>
 80098c4:	6824      	ldr	r4, [r4, #0]
 80098c6:	4421      	add	r1, r4
 80098c8:	1854      	adds	r4, r2, r1
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	d1e0      	bne.n	8009892 <_free_r+0x26>
 80098d0:	681c      	ldr	r4, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	6053      	str	r3, [r2, #4]
 80098d6:	4421      	add	r1, r4
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	e7da      	b.n	8009892 <_free_r+0x26>
 80098dc:	d902      	bls.n	80098e4 <_free_r+0x78>
 80098de:	230c      	movs	r3, #12
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	e7d6      	b.n	8009892 <_free_r+0x26>
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf04      	itt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	bf04      	itt	eq
 80098f4:	1949      	addeq	r1, r1, r5
 80098f6:	6021      	streq	r1, [r4, #0]
 80098f8:	6054      	str	r4, [r2, #4]
 80098fa:	e7ca      	b.n	8009892 <_free_r+0x26>
 80098fc:	b003      	add	sp, #12
 80098fe:	bd30      	pop	{r4, r5, pc}
 8009900:	2000057c 	.word	0x2000057c

08009904 <sbrk_aligned>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4e0e      	ldr	r6, [pc, #56]	; (8009940 <sbrk_aligned+0x3c>)
 8009908:	460c      	mov	r4, r1
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	4605      	mov	r5, r0
 800990e:	b911      	cbnz	r1, 8009916 <sbrk_aligned+0x12>
 8009910:	f000 f9f2 	bl	8009cf8 <_sbrk_r>
 8009914:	6030      	str	r0, [r6, #0]
 8009916:	4621      	mov	r1, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f000 f9ed 	bl	8009cf8 <_sbrk_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d00a      	beq.n	8009938 <sbrk_aligned+0x34>
 8009922:	1cc4      	adds	r4, r0, #3
 8009924:	f024 0403 	bic.w	r4, r4, #3
 8009928:	42a0      	cmp	r0, r4
 800992a:	d007      	beq.n	800993c <sbrk_aligned+0x38>
 800992c:	1a21      	subs	r1, r4, r0
 800992e:	4628      	mov	r0, r5
 8009930:	f000 f9e2 	bl	8009cf8 <_sbrk_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d101      	bne.n	800993c <sbrk_aligned+0x38>
 8009938:	f04f 34ff 	mov.w	r4, #4294967295
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	20000580 	.word	0x20000580

08009944 <_malloc_r>:
 8009944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009948:	1ccd      	adds	r5, r1, #3
 800994a:	f025 0503 	bic.w	r5, r5, #3
 800994e:	3508      	adds	r5, #8
 8009950:	2d0c      	cmp	r5, #12
 8009952:	bf38      	it	cc
 8009954:	250c      	movcc	r5, #12
 8009956:	2d00      	cmp	r5, #0
 8009958:	4607      	mov	r7, r0
 800995a:	db01      	blt.n	8009960 <_malloc_r+0x1c>
 800995c:	42a9      	cmp	r1, r5
 800995e:	d905      	bls.n	800996c <_malloc_r+0x28>
 8009960:	230c      	movs	r3, #12
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	2600      	movs	r6, #0
 8009966:	4630      	mov	r0, r6
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	4e2e      	ldr	r6, [pc, #184]	; (8009a28 <_malloc_r+0xe4>)
 800996e:	f000 fa3f 	bl	8009df0 <__malloc_lock>
 8009972:	6833      	ldr	r3, [r6, #0]
 8009974:	461c      	mov	r4, r3
 8009976:	bb34      	cbnz	r4, 80099c6 <_malloc_r+0x82>
 8009978:	4629      	mov	r1, r5
 800997a:	4638      	mov	r0, r7
 800997c:	f7ff ffc2 	bl	8009904 <sbrk_aligned>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	4604      	mov	r4, r0
 8009984:	d14d      	bne.n	8009a22 <_malloc_r+0xde>
 8009986:	6834      	ldr	r4, [r6, #0]
 8009988:	4626      	mov	r6, r4
 800998a:	2e00      	cmp	r6, #0
 800998c:	d140      	bne.n	8009a10 <_malloc_r+0xcc>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	4631      	mov	r1, r6
 8009992:	4638      	mov	r0, r7
 8009994:	eb04 0803 	add.w	r8, r4, r3
 8009998:	f000 f9ae 	bl	8009cf8 <_sbrk_r>
 800999c:	4580      	cmp	r8, r0
 800999e:	d13a      	bne.n	8009a16 <_malloc_r+0xd2>
 80099a0:	6821      	ldr	r1, [r4, #0]
 80099a2:	3503      	adds	r5, #3
 80099a4:	1a6d      	subs	r5, r5, r1
 80099a6:	f025 0503 	bic.w	r5, r5, #3
 80099aa:	3508      	adds	r5, #8
 80099ac:	2d0c      	cmp	r5, #12
 80099ae:	bf38      	it	cc
 80099b0:	250c      	movcc	r5, #12
 80099b2:	4629      	mov	r1, r5
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff ffa5 	bl	8009904 <sbrk_aligned>
 80099ba:	3001      	adds	r0, #1
 80099bc:	d02b      	beq.n	8009a16 <_malloc_r+0xd2>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	442b      	add	r3, r5
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	e00e      	b.n	80099e4 <_malloc_r+0xa0>
 80099c6:	6822      	ldr	r2, [r4, #0]
 80099c8:	1b52      	subs	r2, r2, r5
 80099ca:	d41e      	bmi.n	8009a0a <_malloc_r+0xc6>
 80099cc:	2a0b      	cmp	r2, #11
 80099ce:	d916      	bls.n	80099fe <_malloc_r+0xba>
 80099d0:	1961      	adds	r1, r4, r5
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	6025      	str	r5, [r4, #0]
 80099d6:	bf18      	it	ne
 80099d8:	6059      	strne	r1, [r3, #4]
 80099da:	6863      	ldr	r3, [r4, #4]
 80099dc:	bf08      	it	eq
 80099de:	6031      	streq	r1, [r6, #0]
 80099e0:	5162      	str	r2, [r4, r5]
 80099e2:	604b      	str	r3, [r1, #4]
 80099e4:	4638      	mov	r0, r7
 80099e6:	f104 060b 	add.w	r6, r4, #11
 80099ea:	f000 fa07 	bl	8009dfc <__malloc_unlock>
 80099ee:	f026 0607 	bic.w	r6, r6, #7
 80099f2:	1d23      	adds	r3, r4, #4
 80099f4:	1af2      	subs	r2, r6, r3
 80099f6:	d0b6      	beq.n	8009966 <_malloc_r+0x22>
 80099f8:	1b9b      	subs	r3, r3, r6
 80099fa:	50a3      	str	r3, [r4, r2]
 80099fc:	e7b3      	b.n	8009966 <_malloc_r+0x22>
 80099fe:	6862      	ldr	r2, [r4, #4]
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	bf0c      	ite	eq
 8009a04:	6032      	streq	r2, [r6, #0]
 8009a06:	605a      	strne	r2, [r3, #4]
 8009a08:	e7ec      	b.n	80099e4 <_malloc_r+0xa0>
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	6864      	ldr	r4, [r4, #4]
 8009a0e:	e7b2      	b.n	8009976 <_malloc_r+0x32>
 8009a10:	4634      	mov	r4, r6
 8009a12:	6876      	ldr	r6, [r6, #4]
 8009a14:	e7b9      	b.n	800998a <_malloc_r+0x46>
 8009a16:	230c      	movs	r3, #12
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f000 f9ee 	bl	8009dfc <__malloc_unlock>
 8009a20:	e7a1      	b.n	8009966 <_malloc_r+0x22>
 8009a22:	6025      	str	r5, [r4, #0]
 8009a24:	e7de      	b.n	80099e4 <_malloc_r+0xa0>
 8009a26:	bf00      	nop
 8009a28:	2000057c 	.word	0x2000057c

08009a2c <__ssputs_r>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	429e      	cmp	r6, r3
 8009a34:	4682      	mov	sl, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4690      	mov	r8, r2
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	d838      	bhi.n	8009ab0 <__ssputs_r+0x84>
 8009a3e:	898a      	ldrh	r2, [r1, #12]
 8009a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a44:	d032      	beq.n	8009aac <__ssputs_r+0x80>
 8009a46:	6825      	ldr	r5, [r4, #0]
 8009a48:	6909      	ldr	r1, [r1, #16]
 8009a4a:	eba5 0901 	sub.w	r9, r5, r1
 8009a4e:	6965      	ldr	r5, [r4, #20]
 8009a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a58:	3301      	adds	r3, #1
 8009a5a:	444b      	add	r3, r9
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d531      	bpl.n	8009acc <__ssputs_r+0xa0>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff ff6b 	bl	8009944 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b950      	cbnz	r0, 8009a88 <__ssputs_r+0x5c>
 8009a72:	230c      	movs	r3, #12
 8009a74:	f8ca 3000 	str.w	r3, [sl]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	6921      	ldr	r1, [r4, #16]
 8009a8a:	464a      	mov	r2, r9
 8009a8c:	f7ff fa08 	bl	8008ea0 <memcpy>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	6126      	str	r6, [r4, #16]
 8009a9e:	6165      	str	r5, [r4, #20]
 8009aa0:	444e      	add	r6, r9
 8009aa2:	eba5 0509 	sub.w	r5, r5, r9
 8009aa6:	6026      	str	r6, [r4, #0]
 8009aa8:	60a5      	str	r5, [r4, #8]
 8009aaa:	463e      	mov	r6, r7
 8009aac:	42be      	cmp	r6, r7
 8009aae:	d900      	bls.n	8009ab2 <__ssputs_r+0x86>
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	6820      	ldr	r0, [r4, #0]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	f000 f980 	bl	8009dbc <memmove>
 8009abc:	68a3      	ldr	r3, [r4, #8]
 8009abe:	1b9b      	subs	r3, r3, r6
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	4433      	add	r3, r6
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e7db      	b.n	8009a84 <__ssputs_r+0x58>
 8009acc:	462a      	mov	r2, r5
 8009ace:	f000 f99b 	bl	8009e08 <_realloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1e1      	bne.n	8009a9c <__ssputs_r+0x70>
 8009ad8:	6921      	ldr	r1, [r4, #16]
 8009ada:	4650      	mov	r0, sl
 8009adc:	f7ff fec6 	bl	800986c <_free_r>
 8009ae0:	e7c7      	b.n	8009a72 <__ssputs_r+0x46>
	...

08009ae4 <_svfiprintf_r>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4698      	mov	r8, r3
 8009aea:	898b      	ldrh	r3, [r1, #12]
 8009aec:	061b      	lsls	r3, r3, #24
 8009aee:	b09d      	sub	sp, #116	; 0x74
 8009af0:	4607      	mov	r7, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	d50e      	bpl.n	8009b16 <_svfiprintf_r+0x32>
 8009af8:	690b      	ldr	r3, [r1, #16]
 8009afa:	b963      	cbnz	r3, 8009b16 <_svfiprintf_r+0x32>
 8009afc:	2140      	movs	r1, #64	; 0x40
 8009afe:	f7ff ff21 	bl	8009944 <_malloc_r>
 8009b02:	6028      	str	r0, [r5, #0]
 8009b04:	6128      	str	r0, [r5, #16]
 8009b06:	b920      	cbnz	r0, 8009b12 <_svfiprintf_r+0x2e>
 8009b08:	230c      	movs	r3, #12
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e0d1      	b.n	8009cb6 <_svfiprintf_r+0x1d2>
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	616b      	str	r3, [r5, #20]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b24:	2330      	movs	r3, #48	; 0x30
 8009b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cd0 <_svfiprintf_r+0x1ec>
 8009b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2e:	f04f 0901 	mov.w	r9, #1
 8009b32:	4623      	mov	r3, r4
 8009b34:	469a      	mov	sl, r3
 8009b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3a:	b10a      	cbz	r2, 8009b40 <_svfiprintf_r+0x5c>
 8009b3c:	2a25      	cmp	r2, #37	; 0x25
 8009b3e:	d1f9      	bne.n	8009b34 <_svfiprintf_r+0x50>
 8009b40:	ebba 0b04 	subs.w	fp, sl, r4
 8009b44:	d00b      	beq.n	8009b5e <_svfiprintf_r+0x7a>
 8009b46:	465b      	mov	r3, fp
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ff6d 	bl	8009a2c <__ssputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80aa 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5a:	445a      	add	r2, fp
 8009b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80a2 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	f10a 0a01 	add.w	sl, sl, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b80:	4654      	mov	r4, sl
 8009b82:	2205      	movs	r2, #5
 8009b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b88:	4851      	ldr	r0, [pc, #324]	; (8009cd0 <_svfiprintf_r+0x1ec>)
 8009b8a:	f7f6 fb49 	bl	8000220 <memchr>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	b9d8      	cbnz	r0, 8009bca <_svfiprintf_r+0xe6>
 8009b92:	06d0      	lsls	r0, r2, #27
 8009b94:	bf44      	itt	mi
 8009b96:	2320      	movmi	r3, #32
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9c:	0711      	lsls	r1, r2, #28
 8009b9e:	bf44      	itt	mi
 8009ba0:	232b      	movmi	r3, #43	; 0x2b
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bac:	d015      	beq.n	8009bda <_svfiprintf_r+0xf6>
 8009bae:	9a07      	ldr	r2, [sp, #28]
 8009bb0:	4654      	mov	r4, sl
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f04f 0c0a 	mov.w	ip, #10
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bbe:	3b30      	subs	r3, #48	; 0x30
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d94e      	bls.n	8009c62 <_svfiprintf_r+0x17e>
 8009bc4:	b1b0      	cbz	r0, 8009bf4 <_svfiprintf_r+0x110>
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	e014      	b.n	8009bf4 <_svfiprintf_r+0x110>
 8009bca:	eba0 0308 	sub.w	r3, r0, r8
 8009bce:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	46a2      	mov	sl, r4
 8009bd8:	e7d2      	b.n	8009b80 <_svfiprintf_r+0x9c>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d19      	adds	r1, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfbb      	ittet	lt
 8009be6:	425b      	neglt	r3, r3
 8009be8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bec:	9307      	strge	r3, [sp, #28]
 8009bee:	9307      	strlt	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	9204      	strlt	r2, [sp, #16]
 8009bf4:	7823      	ldrb	r3, [r4, #0]
 8009bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf8:	d10c      	bne.n	8009c14 <_svfiprintf_r+0x130>
 8009bfa:	7863      	ldrb	r3, [r4, #1]
 8009bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfe:	d135      	bne.n	8009c6c <_svfiprintf_r+0x188>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	1d1a      	adds	r2, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	9203      	str	r2, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c10:	3402      	adds	r4, #2
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ce0 <_svfiprintf_r+0x1fc>
 8009c18:	7821      	ldrb	r1, [r4, #0]
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	f7f6 faff 	bl	8000220 <memchr>
 8009c22:	b140      	cbz	r0, 8009c36 <_svfiprintf_r+0x152>
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	eba0 000a 	sub.w	r0, r0, sl
 8009c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	4303      	orrs	r3, r0
 8009c32:	3401      	adds	r4, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4826      	ldr	r0, [pc, #152]	; (8009cd4 <_svfiprintf_r+0x1f0>)
 8009c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c40:	2206      	movs	r2, #6
 8009c42:	f7f6 faed 	bl	8000220 <memchr>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d038      	beq.n	8009cbc <_svfiprintf_r+0x1d8>
 8009c4a:	4b23      	ldr	r3, [pc, #140]	; (8009cd8 <_svfiprintf_r+0x1f4>)
 8009c4c:	bb1b      	cbnz	r3, 8009c96 <_svfiprintf_r+0x1b2>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3307      	adds	r3, #7
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	3308      	adds	r3, #8
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5c:	4433      	add	r3, r6
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	e767      	b.n	8009b32 <_svfiprintf_r+0x4e>
 8009c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c66:	460c      	mov	r4, r1
 8009c68:	2001      	movs	r0, #1
 8009c6a:	e7a5      	b.n	8009bb8 <_svfiprintf_r+0xd4>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	3401      	adds	r4, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7e:	3a30      	subs	r2, #48	; 0x30
 8009c80:	2a09      	cmp	r2, #9
 8009c82:	d903      	bls.n	8009c8c <_svfiprintf_r+0x1a8>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c5      	beq.n	8009c14 <_svfiprintf_r+0x130>
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	e7c3      	b.n	8009c14 <_svfiprintf_r+0x130>
 8009c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c90:	4604      	mov	r4, r0
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f0      	b.n	8009c78 <_svfiprintf_r+0x194>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7fc fa47 	bl	8006134 <_printf_float>
 8009ca6:	1c42      	adds	r2, r0, #1
 8009ca8:	4606      	mov	r6, r0
 8009caa:	d1d6      	bne.n	8009c5a <_svfiprintf_r+0x176>
 8009cac:	89ab      	ldrh	r3, [r5, #12]
 8009cae:	065b      	lsls	r3, r3, #25
 8009cb0:	f53f af2c 	bmi.w	8009b0c <_svfiprintf_r+0x28>
 8009cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb6:	b01d      	add	sp, #116	; 0x74
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7fc fcd8 	bl	800667c <_printf_i>
 8009ccc:	e7eb      	b.n	8009ca6 <_svfiprintf_r+0x1c2>
 8009cce:	bf00      	nop
 8009cd0:	0800ad04 	.word	0x0800ad04
 8009cd4:	0800ad0e 	.word	0x0800ad0e
 8009cd8:	08006135 	.word	0x08006135
 8009cdc:	08009a2d 	.word	0x08009a2d
 8009ce0:	0800ad0a 	.word	0x0800ad0a
 8009ce4:	00000000 	.word	0x00000000

08009ce8 <nan>:
 8009ce8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009cf0 <nan+0x8>
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	7ff80000 	.word	0x7ff80000

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	; (8009d14 <_sbrk_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f8 fc14 	bl	8002530 <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000584 	.word	0x20000584

08009d18 <strncmp>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	b17a      	cbz	r2, 8009d3c <strncmp+0x24>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	3901      	subs	r1, #1
 8009d20:	1884      	adds	r4, r0, r2
 8009d22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d2a:	4290      	cmp	r0, r2
 8009d2c:	d101      	bne.n	8009d32 <strncmp+0x1a>
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	d101      	bne.n	8009d36 <strncmp+0x1e>
 8009d32:	1a80      	subs	r0, r0, r2
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1f3      	bne.n	8009d22 <strncmp+0xa>
 8009d3a:	e7fa      	b.n	8009d32 <strncmp+0x1a>
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	e7f9      	b.n	8009d34 <strncmp+0x1c>

08009d40 <__ascii_wctomb>:
 8009d40:	b149      	cbz	r1, 8009d56 <__ascii_wctomb+0x16>
 8009d42:	2aff      	cmp	r2, #255	; 0xff
 8009d44:	bf85      	ittet	hi
 8009d46:	238a      	movhi	r3, #138	; 0x8a
 8009d48:	6003      	strhi	r3, [r0, #0]
 8009d4a:	700a      	strbls	r2, [r1, #0]
 8009d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d50:	bf98      	it	ls
 8009d52:	2001      	movls	r0, #1
 8009d54:	4770      	bx	lr
 8009d56:	4608      	mov	r0, r1
 8009d58:	4770      	bx	lr
	...

08009d5c <__assert_func>:
 8009d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d5e:	4614      	mov	r4, r2
 8009d60:	461a      	mov	r2, r3
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <__assert_func+0x2c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4605      	mov	r5, r0
 8009d68:	68d8      	ldr	r0, [r3, #12]
 8009d6a:	b14c      	cbz	r4, 8009d80 <__assert_func+0x24>
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <__assert_func+0x30>)
 8009d6e:	9100      	str	r1, [sp, #0]
 8009d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d74:	4906      	ldr	r1, [pc, #24]	; (8009d90 <__assert_func+0x34>)
 8009d76:	462b      	mov	r3, r5
 8009d78:	f000 f80e 	bl	8009d98 <fiprintf>
 8009d7c:	f000 fa8c 	bl	800a298 <abort>
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <__assert_func+0x38>)
 8009d82:	461c      	mov	r4, r3
 8009d84:	e7f3      	b.n	8009d6e <__assert_func+0x12>
 8009d86:	bf00      	nop
 8009d88:	2000000c 	.word	0x2000000c
 8009d8c:	0800ad15 	.word	0x0800ad15
 8009d90:	0800ad22 	.word	0x0800ad22
 8009d94:	0800ad50 	.word	0x0800ad50

08009d98 <fiprintf>:
 8009d98:	b40e      	push	{r1, r2, r3}
 8009d9a:	b503      	push	{r0, r1, lr}
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	ab03      	add	r3, sp, #12
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <fiprintf+0x20>)
 8009da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da6:	6800      	ldr	r0, [r0, #0]
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	f000 f885 	bl	8009eb8 <_vfiprintf_r>
 8009dae:	b002      	add	sp, #8
 8009db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db4:	b003      	add	sp, #12
 8009db6:	4770      	bx	lr
 8009db8:	2000000c 	.word	0x2000000c

08009dbc <memmove>:
 8009dbc:	4288      	cmp	r0, r1
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	eb01 0402 	add.w	r4, r1, r2
 8009dc4:	d902      	bls.n	8009dcc <memmove+0x10>
 8009dc6:	4284      	cmp	r4, r0
 8009dc8:	4623      	mov	r3, r4
 8009dca:	d807      	bhi.n	8009ddc <memmove+0x20>
 8009dcc:	1e43      	subs	r3, r0, #1
 8009dce:	42a1      	cmp	r1, r4
 8009dd0:	d008      	beq.n	8009de4 <memmove+0x28>
 8009dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dda:	e7f8      	b.n	8009dce <memmove+0x12>
 8009ddc:	4402      	add	r2, r0
 8009dde:	4601      	mov	r1, r0
 8009de0:	428a      	cmp	r2, r1
 8009de2:	d100      	bne.n	8009de6 <memmove+0x2a>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dee:	e7f7      	b.n	8009de0 <memmove+0x24>

08009df0 <__malloc_lock>:
 8009df0:	4801      	ldr	r0, [pc, #4]	; (8009df8 <__malloc_lock+0x8>)
 8009df2:	f000 bc11 	b.w	800a618 <__retarget_lock_acquire_recursive>
 8009df6:	bf00      	nop
 8009df8:	20000588 	.word	0x20000588

08009dfc <__malloc_unlock>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__malloc_unlock+0x8>)
 8009dfe:	f000 bc0c 	b.w	800a61a <__retarget_lock_release_recursive>
 8009e02:	bf00      	nop
 8009e04:	20000588 	.word	0x20000588

08009e08 <_realloc_r>:
 8009e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4614      	mov	r4, r2
 8009e10:	460e      	mov	r6, r1
 8009e12:	b921      	cbnz	r1, 8009e1e <_realloc_r+0x16>
 8009e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e18:	4611      	mov	r1, r2
 8009e1a:	f7ff bd93 	b.w	8009944 <_malloc_r>
 8009e1e:	b92a      	cbnz	r2, 8009e2c <_realloc_r+0x24>
 8009e20:	f7ff fd24 	bl	800986c <_free_r>
 8009e24:	4625      	mov	r5, r4
 8009e26:	4628      	mov	r0, r5
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2c:	f000 fc5c 	bl	800a6e8 <_malloc_usable_size_r>
 8009e30:	4284      	cmp	r4, r0
 8009e32:	4607      	mov	r7, r0
 8009e34:	d802      	bhi.n	8009e3c <_realloc_r+0x34>
 8009e36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e3a:	d812      	bhi.n	8009e62 <_realloc_r+0x5a>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4640      	mov	r0, r8
 8009e40:	f7ff fd80 	bl	8009944 <_malloc_r>
 8009e44:	4605      	mov	r5, r0
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0ed      	beq.n	8009e26 <_realloc_r+0x1e>
 8009e4a:	42bc      	cmp	r4, r7
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4631      	mov	r1, r6
 8009e50:	bf28      	it	cs
 8009e52:	463a      	movcs	r2, r7
 8009e54:	f7ff f824 	bl	8008ea0 <memcpy>
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	f7ff fd06 	bl	800986c <_free_r>
 8009e60:	e7e1      	b.n	8009e26 <_realloc_r+0x1e>
 8009e62:	4635      	mov	r5, r6
 8009e64:	e7df      	b.n	8009e26 <_realloc_r+0x1e>

08009e66 <__sfputc_r>:
 8009e66:	6893      	ldr	r3, [r2, #8]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	b410      	push	{r4}
 8009e6e:	6093      	str	r3, [r2, #8]
 8009e70:	da08      	bge.n	8009e84 <__sfputc_r+0x1e>
 8009e72:	6994      	ldr	r4, [r2, #24]
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	db01      	blt.n	8009e7c <__sfputc_r+0x16>
 8009e78:	290a      	cmp	r1, #10
 8009e7a:	d103      	bne.n	8009e84 <__sfputc_r+0x1e>
 8009e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e80:	f000 b94a 	b.w	800a118 <__swbuf_r>
 8009e84:	6813      	ldr	r3, [r2, #0]
 8009e86:	1c58      	adds	r0, r3, #1
 8009e88:	6010      	str	r0, [r2, #0]
 8009e8a:	7019      	strb	r1, [r3, #0]
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <__sfputs_r>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	4606      	mov	r6, r0
 8009e98:	460f      	mov	r7, r1
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	18d5      	adds	r5, r2, r3
 8009e9e:	42ac      	cmp	r4, r5
 8009ea0:	d101      	bne.n	8009ea6 <__sfputs_r+0x12>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	e007      	b.n	8009eb6 <__sfputs_r+0x22>
 8009ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eaa:	463a      	mov	r2, r7
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff ffda 	bl	8009e66 <__sfputc_r>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d1f3      	bne.n	8009e9e <__sfputs_r+0xa>
 8009eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eb8 <_vfiprintf_r>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	460d      	mov	r5, r1
 8009ebe:	b09d      	sub	sp, #116	; 0x74
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	4698      	mov	r8, r3
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	b118      	cbz	r0, 8009ed0 <_vfiprintf_r+0x18>
 8009ec8:	6983      	ldr	r3, [r0, #24]
 8009eca:	b90b      	cbnz	r3, 8009ed0 <_vfiprintf_r+0x18>
 8009ecc:	f000 fb06 	bl	800a4dc <__sinit>
 8009ed0:	4b89      	ldr	r3, [pc, #548]	; (800a0f8 <_vfiprintf_r+0x240>)
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	d11b      	bne.n	8009f0e <_vfiprintf_r+0x56>
 8009ed6:	6875      	ldr	r5, [r6, #4]
 8009ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eda:	07d9      	lsls	r1, r3, #31
 8009edc:	d405      	bmi.n	8009eea <_vfiprintf_r+0x32>
 8009ede:	89ab      	ldrh	r3, [r5, #12]
 8009ee0:	059a      	lsls	r2, r3, #22
 8009ee2:	d402      	bmi.n	8009eea <_vfiprintf_r+0x32>
 8009ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee6:	f000 fb97 	bl	800a618 <__retarget_lock_acquire_recursive>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	071b      	lsls	r3, r3, #28
 8009eee:	d501      	bpl.n	8009ef4 <_vfiprintf_r+0x3c>
 8009ef0:	692b      	ldr	r3, [r5, #16]
 8009ef2:	b9eb      	cbnz	r3, 8009f30 <_vfiprintf_r+0x78>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f000 f960 	bl	800a1bc <__swsetup_r>
 8009efc:	b1c0      	cbz	r0, 8009f30 <_vfiprintf_r+0x78>
 8009efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f00:	07dc      	lsls	r4, r3, #31
 8009f02:	d50e      	bpl.n	8009f22 <_vfiprintf_r+0x6a>
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	b01d      	add	sp, #116	; 0x74
 8009f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	4b7b      	ldr	r3, [pc, #492]	; (800a0fc <_vfiprintf_r+0x244>)
 8009f10:	429d      	cmp	r5, r3
 8009f12:	d101      	bne.n	8009f18 <_vfiprintf_r+0x60>
 8009f14:	68b5      	ldr	r5, [r6, #8]
 8009f16:	e7df      	b.n	8009ed8 <_vfiprintf_r+0x20>
 8009f18:	4b79      	ldr	r3, [pc, #484]	; (800a100 <_vfiprintf_r+0x248>)
 8009f1a:	429d      	cmp	r5, r3
 8009f1c:	bf08      	it	eq
 8009f1e:	68f5      	ldreq	r5, [r6, #12]
 8009f20:	e7da      	b.n	8009ed8 <_vfiprintf_r+0x20>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	0598      	lsls	r0, r3, #22
 8009f26:	d4ed      	bmi.n	8009f04 <_vfiprintf_r+0x4c>
 8009f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f2a:	f000 fb76 	bl	800a61a <__retarget_lock_release_recursive>
 8009f2e:	e7e9      	b.n	8009f04 <_vfiprintf_r+0x4c>
 8009f30:	2300      	movs	r3, #0
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	2320      	movs	r3, #32
 8009f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f3e:	2330      	movs	r3, #48	; 0x30
 8009f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a104 <_vfiprintf_r+0x24c>
 8009f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f48:	f04f 0901 	mov.w	r9, #1
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	469a      	mov	sl, r3
 8009f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f54:	b10a      	cbz	r2, 8009f5a <_vfiprintf_r+0xa2>
 8009f56:	2a25      	cmp	r2, #37	; 0x25
 8009f58:	d1f9      	bne.n	8009f4e <_vfiprintf_r+0x96>
 8009f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f5e:	d00b      	beq.n	8009f78 <_vfiprintf_r+0xc0>
 8009f60:	465b      	mov	r3, fp
 8009f62:	4622      	mov	r2, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff94 	bl	8009e94 <__sfputs_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	f000 80aa 	beq.w	800a0c6 <_vfiprintf_r+0x20e>
 8009f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f74:	445a      	add	r2, fp
 8009f76:	9209      	str	r2, [sp, #36]	; 0x24
 8009f78:	f89a 3000 	ldrb.w	r3, [sl]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 80a2 	beq.w	800a0c6 <_vfiprintf_r+0x20e>
 8009f82:	2300      	movs	r3, #0
 8009f84:	f04f 32ff 	mov.w	r2, #4294967295
 8009f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f8c:	f10a 0a01 	add.w	sl, sl, #1
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	9307      	str	r3, [sp, #28]
 8009f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f98:	931a      	str	r3, [sp, #104]	; 0x68
 8009f9a:	4654      	mov	r4, sl
 8009f9c:	2205      	movs	r2, #5
 8009f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa2:	4858      	ldr	r0, [pc, #352]	; (800a104 <_vfiprintf_r+0x24c>)
 8009fa4:	f7f6 f93c 	bl	8000220 <memchr>
 8009fa8:	9a04      	ldr	r2, [sp, #16]
 8009faa:	b9d8      	cbnz	r0, 8009fe4 <_vfiprintf_r+0x12c>
 8009fac:	06d1      	lsls	r1, r2, #27
 8009fae:	bf44      	itt	mi
 8009fb0:	2320      	movmi	r3, #32
 8009fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb6:	0713      	lsls	r3, r2, #28
 8009fb8:	bf44      	itt	mi
 8009fba:	232b      	movmi	r3, #43	; 0x2b
 8009fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc6:	d015      	beq.n	8009ff4 <_vfiprintf_r+0x13c>
 8009fc8:	9a07      	ldr	r2, [sp, #28]
 8009fca:	4654      	mov	r4, sl
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f04f 0c0a 	mov.w	ip, #10
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd8:	3b30      	subs	r3, #48	; 0x30
 8009fda:	2b09      	cmp	r3, #9
 8009fdc:	d94e      	bls.n	800a07c <_vfiprintf_r+0x1c4>
 8009fde:	b1b0      	cbz	r0, 800a00e <_vfiprintf_r+0x156>
 8009fe0:	9207      	str	r2, [sp, #28]
 8009fe2:	e014      	b.n	800a00e <_vfiprintf_r+0x156>
 8009fe4:	eba0 0308 	sub.w	r3, r0, r8
 8009fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fec:	4313      	orrs	r3, r2
 8009fee:	9304      	str	r3, [sp, #16]
 8009ff0:	46a2      	mov	sl, r4
 8009ff2:	e7d2      	b.n	8009f9a <_vfiprintf_r+0xe2>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	1d19      	adds	r1, r3, #4
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	9103      	str	r1, [sp, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfbb      	ittet	lt
 800a000:	425b      	neglt	r3, r3
 800a002:	f042 0202 	orrlt.w	r2, r2, #2
 800a006:	9307      	strge	r3, [sp, #28]
 800a008:	9307      	strlt	r3, [sp, #28]
 800a00a:	bfb8      	it	lt
 800a00c:	9204      	strlt	r2, [sp, #16]
 800a00e:	7823      	ldrb	r3, [r4, #0]
 800a010:	2b2e      	cmp	r3, #46	; 0x2e
 800a012:	d10c      	bne.n	800a02e <_vfiprintf_r+0x176>
 800a014:	7863      	ldrb	r3, [r4, #1]
 800a016:	2b2a      	cmp	r3, #42	; 0x2a
 800a018:	d135      	bne.n	800a086 <_vfiprintf_r+0x1ce>
 800a01a:	9b03      	ldr	r3, [sp, #12]
 800a01c:	1d1a      	adds	r2, r3, #4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	9203      	str	r2, [sp, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	bfb8      	it	lt
 800a026:	f04f 33ff 	movlt.w	r3, #4294967295
 800a02a:	3402      	adds	r4, #2
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a114 <_vfiprintf_r+0x25c>
 800a032:	7821      	ldrb	r1, [r4, #0]
 800a034:	2203      	movs	r2, #3
 800a036:	4650      	mov	r0, sl
 800a038:	f7f6 f8f2 	bl	8000220 <memchr>
 800a03c:	b140      	cbz	r0, 800a050 <_vfiprintf_r+0x198>
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	eba0 000a 	sub.w	r0, r0, sl
 800a044:	fa03 f000 	lsl.w	r0, r3, r0
 800a048:	9b04      	ldr	r3, [sp, #16]
 800a04a:	4303      	orrs	r3, r0
 800a04c:	3401      	adds	r4, #1
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a054:	482c      	ldr	r0, [pc, #176]	; (800a108 <_vfiprintf_r+0x250>)
 800a056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a05a:	2206      	movs	r2, #6
 800a05c:	f7f6 f8e0 	bl	8000220 <memchr>
 800a060:	2800      	cmp	r0, #0
 800a062:	d03f      	beq.n	800a0e4 <_vfiprintf_r+0x22c>
 800a064:	4b29      	ldr	r3, [pc, #164]	; (800a10c <_vfiprintf_r+0x254>)
 800a066:	bb1b      	cbnz	r3, 800a0b0 <_vfiprintf_r+0x1f8>
 800a068:	9b03      	ldr	r3, [sp, #12]
 800a06a:	3307      	adds	r3, #7
 800a06c:	f023 0307 	bic.w	r3, r3, #7
 800a070:	3308      	adds	r3, #8
 800a072:	9303      	str	r3, [sp, #12]
 800a074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a076:	443b      	add	r3, r7
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	e767      	b.n	8009f4c <_vfiprintf_r+0x94>
 800a07c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a080:	460c      	mov	r4, r1
 800a082:	2001      	movs	r0, #1
 800a084:	e7a5      	b.n	8009fd2 <_vfiprintf_r+0x11a>
 800a086:	2300      	movs	r3, #0
 800a088:	3401      	adds	r4, #1
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	4619      	mov	r1, r3
 800a08e:	f04f 0c0a 	mov.w	ip, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a098:	3a30      	subs	r2, #48	; 0x30
 800a09a:	2a09      	cmp	r2, #9
 800a09c:	d903      	bls.n	800a0a6 <_vfiprintf_r+0x1ee>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0c5      	beq.n	800a02e <_vfiprintf_r+0x176>
 800a0a2:	9105      	str	r1, [sp, #20]
 800a0a4:	e7c3      	b.n	800a02e <_vfiprintf_r+0x176>
 800a0a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e7f0      	b.n	800a092 <_vfiprintf_r+0x1da>
 800a0b0:	ab03      	add	r3, sp, #12
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4b16      	ldr	r3, [pc, #88]	; (800a110 <_vfiprintf_r+0x258>)
 800a0b8:	a904      	add	r1, sp, #16
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7fc f83a 	bl	8006134 <_printf_float>
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	1c78      	adds	r0, r7, #1
 800a0c4:	d1d6      	bne.n	800a074 <_vfiprintf_r+0x1bc>
 800a0c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c8:	07d9      	lsls	r1, r3, #31
 800a0ca:	d405      	bmi.n	800a0d8 <_vfiprintf_r+0x220>
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	059a      	lsls	r2, r3, #22
 800a0d0:	d402      	bmi.n	800a0d8 <_vfiprintf_r+0x220>
 800a0d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d4:	f000 faa1 	bl	800a61a <__retarget_lock_release_recursive>
 800a0d8:	89ab      	ldrh	r3, [r5, #12]
 800a0da:	065b      	lsls	r3, r3, #25
 800a0dc:	f53f af12 	bmi.w	8009f04 <_vfiprintf_r+0x4c>
 800a0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e2:	e711      	b.n	8009f08 <_vfiprintf_r+0x50>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <_vfiprintf_r+0x258>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7fc fac4 	bl	800667c <_printf_i>
 800a0f4:	e7e4      	b.n	800a0c0 <_vfiprintf_r+0x208>
 800a0f6:	bf00      	nop
 800a0f8:	0800ad74 	.word	0x0800ad74
 800a0fc:	0800ad94 	.word	0x0800ad94
 800a100:	0800ad54 	.word	0x0800ad54
 800a104:	0800ad04 	.word	0x0800ad04
 800a108:	0800ad0e 	.word	0x0800ad0e
 800a10c:	08006135 	.word	0x08006135
 800a110:	08009e95 	.word	0x08009e95
 800a114:	0800ad0a 	.word	0x0800ad0a

0800a118 <__swbuf_r>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	460e      	mov	r6, r1
 800a11c:	4614      	mov	r4, r2
 800a11e:	4605      	mov	r5, r0
 800a120:	b118      	cbz	r0, 800a12a <__swbuf_r+0x12>
 800a122:	6983      	ldr	r3, [r0, #24]
 800a124:	b90b      	cbnz	r3, 800a12a <__swbuf_r+0x12>
 800a126:	f000 f9d9 	bl	800a4dc <__sinit>
 800a12a:	4b21      	ldr	r3, [pc, #132]	; (800a1b0 <__swbuf_r+0x98>)
 800a12c:	429c      	cmp	r4, r3
 800a12e:	d12b      	bne.n	800a188 <__swbuf_r+0x70>
 800a130:	686c      	ldr	r4, [r5, #4]
 800a132:	69a3      	ldr	r3, [r4, #24]
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	071a      	lsls	r2, r3, #28
 800a13a:	d52f      	bpl.n	800a19c <__swbuf_r+0x84>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	b36b      	cbz	r3, 800a19c <__swbuf_r+0x84>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	6820      	ldr	r0, [r4, #0]
 800a144:	1ac0      	subs	r0, r0, r3
 800a146:	6963      	ldr	r3, [r4, #20]
 800a148:	b2f6      	uxtb	r6, r6
 800a14a:	4283      	cmp	r3, r0
 800a14c:	4637      	mov	r7, r6
 800a14e:	dc04      	bgt.n	800a15a <__swbuf_r+0x42>
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f92e 	bl	800a3b4 <_fflush_r>
 800a158:	bb30      	cbnz	r0, 800a1a8 <__swbuf_r+0x90>
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	60a3      	str	r3, [r4, #8]
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	6022      	str	r2, [r4, #0]
 800a166:	701e      	strb	r6, [r3, #0]
 800a168:	6963      	ldr	r3, [r4, #20]
 800a16a:	3001      	adds	r0, #1
 800a16c:	4283      	cmp	r3, r0
 800a16e:	d004      	beq.n	800a17a <__swbuf_r+0x62>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	07db      	lsls	r3, r3, #31
 800a174:	d506      	bpl.n	800a184 <__swbuf_r+0x6c>
 800a176:	2e0a      	cmp	r6, #10
 800a178:	d104      	bne.n	800a184 <__swbuf_r+0x6c>
 800a17a:	4621      	mov	r1, r4
 800a17c:	4628      	mov	r0, r5
 800a17e:	f000 f919 	bl	800a3b4 <_fflush_r>
 800a182:	b988      	cbnz	r0, 800a1a8 <__swbuf_r+0x90>
 800a184:	4638      	mov	r0, r7
 800a186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <__swbuf_r+0x9c>)
 800a18a:	429c      	cmp	r4, r3
 800a18c:	d101      	bne.n	800a192 <__swbuf_r+0x7a>
 800a18e:	68ac      	ldr	r4, [r5, #8]
 800a190:	e7cf      	b.n	800a132 <__swbuf_r+0x1a>
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <__swbuf_r+0xa0>)
 800a194:	429c      	cmp	r4, r3
 800a196:	bf08      	it	eq
 800a198:	68ec      	ldreq	r4, [r5, #12]
 800a19a:	e7ca      	b.n	800a132 <__swbuf_r+0x1a>
 800a19c:	4621      	mov	r1, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 f80c 	bl	800a1bc <__swsetup_r>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d0cb      	beq.n	800a140 <__swbuf_r+0x28>
 800a1a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ac:	e7ea      	b.n	800a184 <__swbuf_r+0x6c>
 800a1ae:	bf00      	nop
 800a1b0:	0800ad74 	.word	0x0800ad74
 800a1b4:	0800ad94 	.word	0x0800ad94
 800a1b8:	0800ad54 	.word	0x0800ad54

0800a1bc <__swsetup_r>:
 800a1bc:	4b32      	ldr	r3, [pc, #200]	; (800a288 <__swsetup_r+0xcc>)
 800a1be:	b570      	push	{r4, r5, r6, lr}
 800a1c0:	681d      	ldr	r5, [r3, #0]
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	b125      	cbz	r5, 800a1d2 <__swsetup_r+0x16>
 800a1c8:	69ab      	ldr	r3, [r5, #24]
 800a1ca:	b913      	cbnz	r3, 800a1d2 <__swsetup_r+0x16>
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f000 f985 	bl	800a4dc <__sinit>
 800a1d2:	4b2e      	ldr	r3, [pc, #184]	; (800a28c <__swsetup_r+0xd0>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	d10f      	bne.n	800a1f8 <__swsetup_r+0x3c>
 800a1d8:	686c      	ldr	r4, [r5, #4]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1e0:	0719      	lsls	r1, r3, #28
 800a1e2:	d42c      	bmi.n	800a23e <__swsetup_r+0x82>
 800a1e4:	06dd      	lsls	r5, r3, #27
 800a1e6:	d411      	bmi.n	800a20c <__swsetup_r+0x50>
 800a1e8:	2309      	movs	r3, #9
 800a1ea:	6033      	str	r3, [r6, #0]
 800a1ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	e03e      	b.n	800a276 <__swsetup_r+0xba>
 800a1f8:	4b25      	ldr	r3, [pc, #148]	; (800a290 <__swsetup_r+0xd4>)
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d101      	bne.n	800a202 <__swsetup_r+0x46>
 800a1fe:	68ac      	ldr	r4, [r5, #8]
 800a200:	e7eb      	b.n	800a1da <__swsetup_r+0x1e>
 800a202:	4b24      	ldr	r3, [pc, #144]	; (800a294 <__swsetup_r+0xd8>)
 800a204:	429c      	cmp	r4, r3
 800a206:	bf08      	it	eq
 800a208:	68ec      	ldreq	r4, [r5, #12]
 800a20a:	e7e6      	b.n	800a1da <__swsetup_r+0x1e>
 800a20c:	0758      	lsls	r0, r3, #29
 800a20e:	d512      	bpl.n	800a236 <__swsetup_r+0x7a>
 800a210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a212:	b141      	cbz	r1, 800a226 <__swsetup_r+0x6a>
 800a214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a218:	4299      	cmp	r1, r3
 800a21a:	d002      	beq.n	800a222 <__swsetup_r+0x66>
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff fb25 	bl	800986c <_free_r>
 800a222:	2300      	movs	r3, #0
 800a224:	6363      	str	r3, [r4, #52]	; 0x34
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	2300      	movs	r3, #0
 800a230:	6063      	str	r3, [r4, #4]
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f043 0308 	orr.w	r3, r3, #8
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	b94b      	cbnz	r3, 800a256 <__swsetup_r+0x9a>
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24c:	d003      	beq.n	800a256 <__swsetup_r+0x9a>
 800a24e:	4621      	mov	r1, r4
 800a250:	4630      	mov	r0, r6
 800a252:	f000 fa09 	bl	800a668 <__smakebuf_r>
 800a256:	89a0      	ldrh	r0, [r4, #12]
 800a258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a25c:	f010 0301 	ands.w	r3, r0, #1
 800a260:	d00a      	beq.n	800a278 <__swsetup_r+0xbc>
 800a262:	2300      	movs	r3, #0
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	6963      	ldr	r3, [r4, #20]
 800a268:	425b      	negs	r3, r3
 800a26a:	61a3      	str	r3, [r4, #24]
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	b943      	cbnz	r3, 800a282 <__swsetup_r+0xc6>
 800a270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a274:	d1ba      	bne.n	800a1ec <__swsetup_r+0x30>
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	0781      	lsls	r1, r0, #30
 800a27a:	bf58      	it	pl
 800a27c:	6963      	ldrpl	r3, [r4, #20]
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	e7f4      	b.n	800a26c <__swsetup_r+0xb0>
 800a282:	2000      	movs	r0, #0
 800a284:	e7f7      	b.n	800a276 <__swsetup_r+0xba>
 800a286:	bf00      	nop
 800a288:	2000000c 	.word	0x2000000c
 800a28c:	0800ad74 	.word	0x0800ad74
 800a290:	0800ad94 	.word	0x0800ad94
 800a294:	0800ad54 	.word	0x0800ad54

0800a298 <abort>:
 800a298:	b508      	push	{r3, lr}
 800a29a:	2006      	movs	r0, #6
 800a29c:	f000 fa54 	bl	800a748 <raise>
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	f7f8 f8e9 	bl	8002478 <_exit>
	...

0800a2a8 <__sflush_r>:
 800a2a8:	898a      	ldrh	r2, [r1, #12]
 800a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	0710      	lsls	r0, r2, #28
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	d458      	bmi.n	800a368 <__sflush_r+0xc0>
 800a2b6:	684b      	ldr	r3, [r1, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dc05      	bgt.n	800a2c8 <__sflush_r+0x20>
 800a2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc02      	bgt.n	800a2c8 <__sflush_r+0x20>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d0f9      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2d4:	682f      	ldr	r7, [r5, #0]
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	d032      	beq.n	800a340 <__sflush_r+0x98>
 800a2da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	075a      	lsls	r2, r3, #29
 800a2e0:	d505      	bpl.n	800a2ee <__sflush_r+0x46>
 800a2e2:	6863      	ldr	r3, [r4, #4]
 800a2e4:	1ac0      	subs	r0, r0, r3
 800a2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2e8:	b10b      	cbz	r3, 800a2ee <__sflush_r+0x46>
 800a2ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ec:	1ac0      	subs	r0, r0, r3
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2f4:	6a21      	ldr	r1, [r4, #32]
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b0      	blx	r6
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	d106      	bne.n	800a30e <__sflush_r+0x66>
 800a300:	6829      	ldr	r1, [r5, #0]
 800a302:	291d      	cmp	r1, #29
 800a304:	d82c      	bhi.n	800a360 <__sflush_r+0xb8>
 800a306:	4a2a      	ldr	r2, [pc, #168]	; (800a3b0 <__sflush_r+0x108>)
 800a308:	40ca      	lsrs	r2, r1
 800a30a:	07d6      	lsls	r6, r2, #31
 800a30c:	d528      	bpl.n	800a360 <__sflush_r+0xb8>
 800a30e:	2200      	movs	r2, #0
 800a310:	6062      	str	r2, [r4, #4]
 800a312:	04d9      	lsls	r1, r3, #19
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	6022      	str	r2, [r4, #0]
 800a318:	d504      	bpl.n	800a324 <__sflush_r+0x7c>
 800a31a:	1c42      	adds	r2, r0, #1
 800a31c:	d101      	bne.n	800a322 <__sflush_r+0x7a>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	b903      	cbnz	r3, 800a324 <__sflush_r+0x7c>
 800a322:	6560      	str	r0, [r4, #84]	; 0x54
 800a324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	2900      	cmp	r1, #0
 800a32a:	d0ca      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <__sflush_r+0x92>
 800a334:	4628      	mov	r0, r5
 800a336:	f7ff fa99 	bl	800986c <_free_r>
 800a33a:	2000      	movs	r0, #0
 800a33c:	6360      	str	r0, [r4, #52]	; 0x34
 800a33e:	e7c1      	b.n	800a2c4 <__sflush_r+0x1c>
 800a340:	6a21      	ldr	r1, [r4, #32]
 800a342:	2301      	movs	r3, #1
 800a344:	4628      	mov	r0, r5
 800a346:	47b0      	blx	r6
 800a348:	1c41      	adds	r1, r0, #1
 800a34a:	d1c7      	bne.n	800a2dc <__sflush_r+0x34>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0c4      	beq.n	800a2dc <__sflush_r+0x34>
 800a352:	2b1d      	cmp	r3, #29
 800a354:	d001      	beq.n	800a35a <__sflush_r+0xb2>
 800a356:	2b16      	cmp	r3, #22
 800a358:	d101      	bne.n	800a35e <__sflush_r+0xb6>
 800a35a:	602f      	str	r7, [r5, #0]
 800a35c:	e7b1      	b.n	800a2c2 <__sflush_r+0x1a>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a364:	81a3      	strh	r3, [r4, #12]
 800a366:	e7ad      	b.n	800a2c4 <__sflush_r+0x1c>
 800a368:	690f      	ldr	r7, [r1, #16]
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	d0a9      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a36e:	0793      	lsls	r3, r2, #30
 800a370:	680e      	ldr	r6, [r1, #0]
 800a372:	bf08      	it	eq
 800a374:	694b      	ldreq	r3, [r1, #20]
 800a376:	600f      	str	r7, [r1, #0]
 800a378:	bf18      	it	ne
 800a37a:	2300      	movne	r3, #0
 800a37c:	eba6 0807 	sub.w	r8, r6, r7
 800a380:	608b      	str	r3, [r1, #8]
 800a382:	f1b8 0f00 	cmp.w	r8, #0
 800a386:	dd9c      	ble.n	800a2c2 <__sflush_r+0x1a>
 800a388:	6a21      	ldr	r1, [r4, #32]
 800a38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a38c:	4643      	mov	r3, r8
 800a38e:	463a      	mov	r2, r7
 800a390:	4628      	mov	r0, r5
 800a392:	47b0      	blx	r6
 800a394:	2800      	cmp	r0, #0
 800a396:	dc06      	bgt.n	800a3a6 <__sflush_r+0xfe>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	e78e      	b.n	800a2c4 <__sflush_r+0x1c>
 800a3a6:	4407      	add	r7, r0
 800a3a8:	eba8 0800 	sub.w	r8, r8, r0
 800a3ac:	e7e9      	b.n	800a382 <__sflush_r+0xda>
 800a3ae:	bf00      	nop
 800a3b0:	20400001 	.word	0x20400001

0800a3b4 <_fflush_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	690b      	ldr	r3, [r1, #16]
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	b913      	cbnz	r3, 800a3c4 <_fflush_r+0x10>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	b118      	cbz	r0, 800a3ce <_fflush_r+0x1a>
 800a3c6:	6983      	ldr	r3, [r0, #24]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <_fflush_r+0x1a>
 800a3ca:	f000 f887 	bl	800a4dc <__sinit>
 800a3ce:	4b14      	ldr	r3, [pc, #80]	; (800a420 <_fflush_r+0x6c>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	d11b      	bne.n	800a40c <_fflush_r+0x58>
 800a3d4:	686c      	ldr	r4, [r5, #4]
 800a3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0ef      	beq.n	800a3be <_fflush_r+0xa>
 800a3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3e0:	07d0      	lsls	r0, r2, #31
 800a3e2:	d404      	bmi.n	800a3ee <_fflush_r+0x3a>
 800a3e4:	0599      	lsls	r1, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_fflush_r+0x3a>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ea:	f000 f915 	bl	800a618 <__retarget_lock_acquire_recursive>
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f7ff ff59 	bl	800a2a8 <__sflush_r>
 800a3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3f8:	07da      	lsls	r2, r3, #31
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	d4e0      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	059b      	lsls	r3, r3, #22
 800a402:	d4dd      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a406:	f000 f908 	bl	800a61a <__retarget_lock_release_recursive>
 800a40a:	e7d9      	b.n	800a3c0 <_fflush_r+0xc>
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <_fflush_r+0x70>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	d101      	bne.n	800a416 <_fflush_r+0x62>
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	e7df      	b.n	800a3d6 <_fflush_r+0x22>
 800a416:	4b04      	ldr	r3, [pc, #16]	; (800a428 <_fflush_r+0x74>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	bf08      	it	eq
 800a41c:	68ec      	ldreq	r4, [r5, #12]
 800a41e:	e7da      	b.n	800a3d6 <_fflush_r+0x22>
 800a420:	0800ad74 	.word	0x0800ad74
 800a424:	0800ad94 	.word	0x0800ad94
 800a428:	0800ad54 	.word	0x0800ad54

0800a42c <std>:
 800a42c:	2300      	movs	r3, #0
 800a42e:	b510      	push	{r4, lr}
 800a430:	4604      	mov	r4, r0
 800a432:	e9c0 3300 	strd	r3, r3, [r0]
 800a436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a43a:	6083      	str	r3, [r0, #8]
 800a43c:	8181      	strh	r1, [r0, #12]
 800a43e:	6643      	str	r3, [r0, #100]	; 0x64
 800a440:	81c2      	strh	r2, [r0, #14]
 800a442:	6183      	str	r3, [r0, #24]
 800a444:	4619      	mov	r1, r3
 800a446:	2208      	movs	r2, #8
 800a448:	305c      	adds	r0, #92	; 0x5c
 800a44a:	f7fb fdcb 	bl	8005fe4 <memset>
 800a44e:	4b05      	ldr	r3, [pc, #20]	; (800a464 <std+0x38>)
 800a450:	6263      	str	r3, [r4, #36]	; 0x24
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <std+0x3c>)
 800a454:	62a3      	str	r3, [r4, #40]	; 0x28
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <std+0x40>)
 800a458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <std+0x44>)
 800a45c:	6224      	str	r4, [r4, #32]
 800a45e:	6323      	str	r3, [r4, #48]	; 0x30
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	0800a781 	.word	0x0800a781
 800a468:	0800a7a3 	.word	0x0800a7a3
 800a46c:	0800a7db 	.word	0x0800a7db
 800a470:	0800a7ff 	.word	0x0800a7ff

0800a474 <_cleanup_r>:
 800a474:	4901      	ldr	r1, [pc, #4]	; (800a47c <_cleanup_r+0x8>)
 800a476:	f000 b8af 	b.w	800a5d8 <_fwalk_reent>
 800a47a:	bf00      	nop
 800a47c:	0800a3b5 	.word	0x0800a3b5

0800a480 <__sfmoreglue>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	2268      	movs	r2, #104	; 0x68
 800a484:	1e4d      	subs	r5, r1, #1
 800a486:	4355      	muls	r5, r2
 800a488:	460e      	mov	r6, r1
 800a48a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a48e:	f7ff fa59 	bl	8009944 <_malloc_r>
 800a492:	4604      	mov	r4, r0
 800a494:	b140      	cbz	r0, 800a4a8 <__sfmoreglue+0x28>
 800a496:	2100      	movs	r1, #0
 800a498:	e9c0 1600 	strd	r1, r6, [r0]
 800a49c:	300c      	adds	r0, #12
 800a49e:	60a0      	str	r0, [r4, #8]
 800a4a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4a4:	f7fb fd9e 	bl	8005fe4 <memset>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}

0800a4ac <__sfp_lock_acquire>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	; (800a4b4 <__sfp_lock_acquire+0x8>)
 800a4ae:	f000 b8b3 	b.w	800a618 <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	20000589 	.word	0x20000589

0800a4b8 <__sfp_lock_release>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	; (800a4c0 <__sfp_lock_release+0x8>)
 800a4ba:	f000 b8ae 	b.w	800a61a <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	20000589 	.word	0x20000589

0800a4c4 <__sinit_lock_acquire>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	; (800a4cc <__sinit_lock_acquire+0x8>)
 800a4c6:	f000 b8a7 	b.w	800a618 <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	2000058a 	.word	0x2000058a

0800a4d0 <__sinit_lock_release>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__sinit_lock_release+0x8>)
 800a4d2:	f000 b8a2 	b.w	800a61a <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	2000058a 	.word	0x2000058a

0800a4dc <__sinit>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	f7ff fff0 	bl	800a4c4 <__sinit_lock_acquire>
 800a4e4:	69a3      	ldr	r3, [r4, #24]
 800a4e6:	b11b      	cbz	r3, 800a4f0 <__sinit+0x14>
 800a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ec:	f7ff bff0 	b.w	800a4d0 <__sinit_lock_release>
 800a4f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a4f6:	4b13      	ldr	r3, [pc, #76]	; (800a544 <__sinit+0x68>)
 800a4f8:	4a13      	ldr	r2, [pc, #76]	; (800a548 <__sinit+0x6c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	bf04      	itt	eq
 800a502:	2301      	moveq	r3, #1
 800a504:	61a3      	streq	r3, [r4, #24]
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f820 	bl	800a54c <__sfp>
 800a50c:	6060      	str	r0, [r4, #4]
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f81c 	bl	800a54c <__sfp>
 800a514:	60a0      	str	r0, [r4, #8]
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f818 	bl	800a54c <__sfp>
 800a51c:	2200      	movs	r2, #0
 800a51e:	60e0      	str	r0, [r4, #12]
 800a520:	2104      	movs	r1, #4
 800a522:	6860      	ldr	r0, [r4, #4]
 800a524:	f7ff ff82 	bl	800a42c <std>
 800a528:	68a0      	ldr	r0, [r4, #8]
 800a52a:	2201      	movs	r2, #1
 800a52c:	2109      	movs	r1, #9
 800a52e:	f7ff ff7d 	bl	800a42c <std>
 800a532:	68e0      	ldr	r0, [r4, #12]
 800a534:	2202      	movs	r2, #2
 800a536:	2112      	movs	r1, #18
 800a538:	f7ff ff78 	bl	800a42c <std>
 800a53c:	2301      	movs	r3, #1
 800a53e:	61a3      	str	r3, [r4, #24]
 800a540:	e7d2      	b.n	800a4e8 <__sinit+0xc>
 800a542:	bf00      	nop
 800a544:	0800a910 	.word	0x0800a910
 800a548:	0800a475 	.word	0x0800a475

0800a54c <__sfp>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	4607      	mov	r7, r0
 800a550:	f7ff ffac 	bl	800a4ac <__sfp_lock_acquire>
 800a554:	4b1e      	ldr	r3, [pc, #120]	; (800a5d0 <__sfp+0x84>)
 800a556:	681e      	ldr	r6, [r3, #0]
 800a558:	69b3      	ldr	r3, [r6, #24]
 800a55a:	b913      	cbnz	r3, 800a562 <__sfp+0x16>
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff ffbd 	bl	800a4dc <__sinit>
 800a562:	3648      	adds	r6, #72	; 0x48
 800a564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a568:	3b01      	subs	r3, #1
 800a56a:	d503      	bpl.n	800a574 <__sfp+0x28>
 800a56c:	6833      	ldr	r3, [r6, #0]
 800a56e:	b30b      	cbz	r3, 800a5b4 <__sfp+0x68>
 800a570:	6836      	ldr	r6, [r6, #0]
 800a572:	e7f7      	b.n	800a564 <__sfp+0x18>
 800a574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a578:	b9d5      	cbnz	r5, 800a5b0 <__sfp+0x64>
 800a57a:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <__sfp+0x88>)
 800a57c:	60e3      	str	r3, [r4, #12]
 800a57e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a582:	6665      	str	r5, [r4, #100]	; 0x64
 800a584:	f000 f847 	bl	800a616 <__retarget_lock_init_recursive>
 800a588:	f7ff ff96 	bl	800a4b8 <__sfp_lock_release>
 800a58c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a594:	6025      	str	r5, [r4, #0]
 800a596:	61a5      	str	r5, [r4, #24]
 800a598:	2208      	movs	r2, #8
 800a59a:	4629      	mov	r1, r5
 800a59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5a0:	f7fb fd20 	bl	8005fe4 <memset>
 800a5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b0:	3468      	adds	r4, #104	; 0x68
 800a5b2:	e7d9      	b.n	800a568 <__sfp+0x1c>
 800a5b4:	2104      	movs	r1, #4
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7ff ff62 	bl	800a480 <__sfmoreglue>
 800a5bc:	4604      	mov	r4, r0
 800a5be:	6030      	str	r0, [r6, #0]
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1d5      	bne.n	800a570 <__sfp+0x24>
 800a5c4:	f7ff ff78 	bl	800a4b8 <__sfp_lock_release>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	e7ee      	b.n	800a5ac <__sfp+0x60>
 800a5ce:	bf00      	nop
 800a5d0:	0800a910 	.word	0x0800a910
 800a5d4:	ffff0001 	.word	0xffff0001

0800a5d8 <_fwalk_reent>:
 800a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	4606      	mov	r6, r0
 800a5de:	4688      	mov	r8, r1
 800a5e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5e4:	2700      	movs	r7, #0
 800a5e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ee:	d505      	bpl.n	800a5fc <_fwalk_reent+0x24>
 800a5f0:	6824      	ldr	r4, [r4, #0]
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	d1f7      	bne.n	800a5e6 <_fwalk_reent+0xe>
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fc:	89ab      	ldrh	r3, [r5, #12]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d907      	bls.n	800a612 <_fwalk_reent+0x3a>
 800a602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a606:	3301      	adds	r3, #1
 800a608:	d003      	beq.n	800a612 <_fwalk_reent+0x3a>
 800a60a:	4629      	mov	r1, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	47c0      	blx	r8
 800a610:	4307      	orrs	r7, r0
 800a612:	3568      	adds	r5, #104	; 0x68
 800a614:	e7e9      	b.n	800a5ea <_fwalk_reent+0x12>

0800a616 <__retarget_lock_init_recursive>:
 800a616:	4770      	bx	lr

0800a618 <__retarget_lock_acquire_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_release_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <__swhatbuf_r>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a624:	2900      	cmp	r1, #0
 800a626:	b096      	sub	sp, #88	; 0x58
 800a628:	4614      	mov	r4, r2
 800a62a:	461d      	mov	r5, r3
 800a62c:	da08      	bge.n	800a640 <__swhatbuf_r+0x24>
 800a62e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	061a      	lsls	r2, r3, #24
 800a638:	d410      	bmi.n	800a65c <__swhatbuf_r+0x40>
 800a63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63e:	e00e      	b.n	800a65e <__swhatbuf_r+0x42>
 800a640:	466a      	mov	r2, sp
 800a642:	f000 f903 	bl	800a84c <_fstat_r>
 800a646:	2800      	cmp	r0, #0
 800a648:	dbf1      	blt.n	800a62e <__swhatbuf_r+0x12>
 800a64a:	9a01      	ldr	r2, [sp, #4]
 800a64c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a654:	425a      	negs	r2, r3
 800a656:	415a      	adcs	r2, r3
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	e7ee      	b.n	800a63a <__swhatbuf_r+0x1e>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	2000      	movs	r0, #0
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	b016      	add	sp, #88	; 0x58
 800a664:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a668 <__smakebuf_r>:
 800a668:	898b      	ldrh	r3, [r1, #12]
 800a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a66c:	079d      	lsls	r5, r3, #30
 800a66e:	4606      	mov	r6, r0
 800a670:	460c      	mov	r4, r1
 800a672:	d507      	bpl.n	800a684 <__smakebuf_r+0x1c>
 800a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2301      	movs	r3, #1
 800a67e:	6163      	str	r3, [r4, #20]
 800a680:	b002      	add	sp, #8
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	ab01      	add	r3, sp, #4
 800a686:	466a      	mov	r2, sp
 800a688:	f7ff ffc8 	bl	800a61c <__swhatbuf_r>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	4605      	mov	r5, r0
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff f957 	bl	8009944 <_malloc_r>
 800a696:	b948      	cbnz	r0, 800a6ac <__smakebuf_r+0x44>
 800a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d4ef      	bmi.n	800a680 <__smakebuf_r+0x18>
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	e7e3      	b.n	800a674 <__smakebuf_r+0xc>
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <__smakebuf_r+0x7c>)
 800a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	6163      	str	r3, [r4, #20]
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	6120      	str	r0, [r4, #16]
 800a6c2:	b15b      	cbz	r3, 800a6dc <__smakebuf_r+0x74>
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f8d1 	bl	800a870 <_isatty_r>
 800a6ce:	b128      	cbz	r0, 800a6dc <__smakebuf_r+0x74>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	89a0      	ldrh	r0, [r4, #12]
 800a6de:	4305      	orrs	r5, r0
 800a6e0:	81a5      	strh	r5, [r4, #12]
 800a6e2:	e7cd      	b.n	800a680 <__smakebuf_r+0x18>
 800a6e4:	0800a475 	.word	0x0800a475

0800a6e8 <_malloc_usable_size_r>:
 800a6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ec:	1f18      	subs	r0, r3, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfbc      	itt	lt
 800a6f2:	580b      	ldrlt	r3, [r1, r0]
 800a6f4:	18c0      	addlt	r0, r0, r3
 800a6f6:	4770      	bx	lr

0800a6f8 <_raise_r>:
 800a6f8:	291f      	cmp	r1, #31
 800a6fa:	b538      	push	{r3, r4, r5, lr}
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	d904      	bls.n	800a70c <_raise_r+0x14>
 800a702:	2316      	movs	r3, #22
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	f04f 30ff 	mov.w	r0, #4294967295
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a70e:	b112      	cbz	r2, 800a716 <_raise_r+0x1e>
 800a710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a714:	b94b      	cbnz	r3, 800a72a <_raise_r+0x32>
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f830 	bl	800a77c <_getpid_r>
 800a71c:	462a      	mov	r2, r5
 800a71e:	4601      	mov	r1, r0
 800a720:	4620      	mov	r0, r4
 800a722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a726:	f000 b817 	b.w	800a758 <_kill_r>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d00a      	beq.n	800a744 <_raise_r+0x4c>
 800a72e:	1c59      	adds	r1, r3, #1
 800a730:	d103      	bne.n	800a73a <_raise_r+0x42>
 800a732:	2316      	movs	r3, #22
 800a734:	6003      	str	r3, [r0, #0]
 800a736:	2001      	movs	r0, #1
 800a738:	e7e7      	b.n	800a70a <_raise_r+0x12>
 800a73a:	2400      	movs	r4, #0
 800a73c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a740:	4628      	mov	r0, r5
 800a742:	4798      	blx	r3
 800a744:	2000      	movs	r0, #0
 800a746:	e7e0      	b.n	800a70a <_raise_r+0x12>

0800a748 <raise>:
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <raise+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f7ff bfd3 	b.w	800a6f8 <_raise_r>
 800a752:	bf00      	nop
 800a754:	2000000c 	.word	0x2000000c

0800a758 <_kill_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	; (800a778 <_kill_r+0x20>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	4611      	mov	r1, r2
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f7f7 fe77 	bl	8002458 <_kill>
 800a76a:	1c43      	adds	r3, r0, #1
 800a76c:	d102      	bne.n	800a774 <_kill_r+0x1c>
 800a76e:	682b      	ldr	r3, [r5, #0]
 800a770:	b103      	cbz	r3, 800a774 <_kill_r+0x1c>
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	bd38      	pop	{r3, r4, r5, pc}
 800a776:	bf00      	nop
 800a778:	20000584 	.word	0x20000584

0800a77c <_getpid_r>:
 800a77c:	f7f7 be64 	b.w	8002448 <_getpid>

0800a780 <__sread>:
 800a780:	b510      	push	{r4, lr}
 800a782:	460c      	mov	r4, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	f000 f894 	bl	800a8b4 <_read_r>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	bfab      	itete	ge
 800a790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a792:	89a3      	ldrhlt	r3, [r4, #12]
 800a794:	181b      	addge	r3, r3, r0
 800a796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a79a:	bfac      	ite	ge
 800a79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a79e:	81a3      	strhlt	r3, [r4, #12]
 800a7a0:	bd10      	pop	{r4, pc}

0800a7a2 <__swrite>:
 800a7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	461f      	mov	r7, r3
 800a7a8:	898b      	ldrh	r3, [r1, #12]
 800a7aa:	05db      	lsls	r3, r3, #23
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4616      	mov	r6, r2
 800a7b2:	d505      	bpl.n	800a7c0 <__swrite+0x1e>
 800a7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f000 f868 	bl	800a890 <_lseek_r>
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d6:	f000 b817 	b.w	800a808 <_write_r>

0800a7da <__sseek>:
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	460c      	mov	r4, r1
 800a7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e2:	f000 f855 	bl	800a890 <_lseek_r>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	bf15      	itete	ne
 800a7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7f6:	81a3      	strheq	r3, [r4, #12]
 800a7f8:	bf18      	it	ne
 800a7fa:	81a3      	strhne	r3, [r4, #12]
 800a7fc:	bd10      	pop	{r4, pc}

0800a7fe <__sclose>:
 800a7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a802:	f000 b813 	b.w	800a82c <_close_r>
	...

0800a808 <_write_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_write_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f7 fa70 	bl	8001cfc <_write>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_write_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_write_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20000584 	.word	0x20000584

0800a82c <_close_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d06      	ldr	r5, [pc, #24]	; (800a848 <_close_r+0x1c>)
 800a830:	2300      	movs	r3, #0
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	f7f7 fe45 	bl	80024c6 <_close>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_close_r+0x1a>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_close_r+0x1a>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20000584 	.word	0x20000584

0800a84c <_fstat_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	; (800a86c <_fstat_r+0x20>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 fe40 	bl	80024de <_fstat>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_fstat_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_fstat_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	20000584 	.word	0x20000584

0800a870 <_isatty_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_isatty_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f7 fe3f 	bl	80024fe <_isatty>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_isatty_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_isatty_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000584 	.word	0x20000584

0800a890 <_lseek_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d07      	ldr	r5, [pc, #28]	; (800a8b0 <_lseek_r+0x20>)
 800a894:	4604      	mov	r4, r0
 800a896:	4608      	mov	r0, r1
 800a898:	4611      	mov	r1, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	602a      	str	r2, [r5, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f7f7 fe38 	bl	8002514 <_lseek>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_lseek_r+0x1e>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_lseek_r+0x1e>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000584 	.word	0x20000584

0800a8b4 <_read_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d07      	ldr	r5, [pc, #28]	; (800a8d4 <_read_r+0x20>)
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	4608      	mov	r0, r1
 800a8bc:	4611      	mov	r1, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f7f7 fde2 	bl	800248c <_read>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d102      	bne.n	800a8d2 <_read_r+0x1e>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	b103      	cbz	r3, 800a8d2 <_read_r+0x1e>
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	20000584 	.word	0x20000584

0800a8d8 <_init>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	bf00      	nop
 800a8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8de:	bc08      	pop	{r3}
 800a8e0:	469e      	mov	lr, r3
 800a8e2:	4770      	bx	lr

0800a8e4 <_fini>:
 800a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e6:	bf00      	nop
 800a8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ea:	bc08      	pop	{r3}
 800a8ec:	469e      	mov	lr, r3
 800a8ee:	4770      	bx	lr
