
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800cf68  0800cf68  0001cf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a4  0800d5a4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5ac  0800d5ac  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5ac  0800d5ac  0001d5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001f0  0800d7a0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  0800d7a0  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ed1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c23  00000000  00000000  0003a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cb0  00000000  00000000  000406f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a32  00000000  00000000  000693a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e447d  00000000  00000000  00089dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e24f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb8  00000000  00000000  0016e2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf50 	.word	0x0800cf50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800cf50 	.word	0x0800cf50

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f004 fb14 	bl	8005684 <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000034c 	.word	0x2000034c

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f004 fafc 	bl	8005684 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000034c 	.word	0x2000034c

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f002 ff29 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f002 ff23 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f002 ff1d 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f002 ff17 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f002 ff11 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f002 ff0b 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f002 ff05 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f002 feff 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f002 fef9 	bl	8003ef4 <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f002 fef3 	bl	8003ef4 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	2000022a 	.word	0x2000022a
 800125c:	20000228 	.word	0x20000228
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	2000020c 	.word	0x2000020c

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000226 	.word	0x20000226

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f008 ff01 	bl	800a0f4 <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	20000214 	.word	0x20000214
 8001358:	20000226 	.word	0x20000226
 800135c:	2000020c 	.word	0x2000020c
 8001360:	2000022a 	.word	0x2000022a

08001364 <initBNO055>:
// モジュール名 initBNO055
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
uint8_t initBNO055(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
    uint8_t Rx_buf[1], Tx_buf[1] = {0x00};
 800136a:	2300      	movs	r3, #0
 800136c:	703b      	strb	r3, [r7, #0]

    HAL_I2C_Master_Transmit(&hi2c1,BNO055_SLAVEADDRESS,Tx_buf,1,1000);
 800136e:	463a      	mov	r2, r7
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	2128      	movs	r1, #40	; 0x28
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <initBNO055+0x38>)
 800137c:	f004 f982 	bl	8005684 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1,BNO055_SLAVEADDRESS|0x01,Rx_buf,1,1000);
 8001380:	1d3a      	adds	r2, r7, #4
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	2129      	movs	r1, #41	; 0x29
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <initBNO055+0x38>)
 800138e:	f004 fa77 	bl	8005880 <HAL_I2C_Master_Receive>

    return Rx_buf[0];
 8001392:	793b      	ldrb	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000034c 	.word	0x2000034c

080013a0 <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	// Encoder count
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80013a4:	213c      	movs	r1, #60	; 0x3c
 80013a6:	4838      	ldr	r0, [pc, #224]	; (8001488 <systemInit+0xe8>)
 80013a8:	f006 f876 	bl	8007498 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80013ac:	213c      	movs	r1, #60	; 0x3c
 80013ae:	4837      	ldr	r0, [pc, #220]	; (800148c <systemInit+0xec>)
 80013b0:	f006 f872 	bl	8007498 <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *) analogVal, 14) != HAL_OK)	Error_Handler();
 80013b4:	220e      	movs	r2, #14
 80013b6:	4936      	ldr	r1, [pc, #216]	; (8001490 <systemInit+0xf0>)
 80013b8:	4836      	ldr	r0, [pc, #216]	; (8001494 <systemInit+0xf4>)
 80013ba:	f002 fe03 	bl	8003fc4 <HAL_ADC_Start_DMA>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <systemInit+0x28>
 80013c4:	f001 f8f6 	bl	80025b4 <Error_Handler>
	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 80013c8:	2100      	movs	r1, #0
 80013ca:	4833      	ldr	r0, [pc, #204]	; (8001498 <systemInit+0xf8>)
 80013cc:	f005 fef6 	bl	80071bc <HAL_TIM_PWM_Start>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <systemInit+0x3a>
 80013d6:	f001 f8ed 	bl	80025b4 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 80013da:	2104      	movs	r1, #4
 80013dc:	482e      	ldr	r0, [pc, #184]	; (8001498 <systemInit+0xf8>)
 80013de:	f005 feed 	bl	80071bc <HAL_TIM_PWM_Start>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <systemInit+0x4c>
 80013e8:	f001 f8e4 	bl	80025b4 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 80013ec:	2108      	movs	r1, #8
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <systemInit+0xf8>)
 80013f0:	f005 fee4 	bl	80071bc <HAL_TIM_PWM_Start>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <systemInit+0x5e>
 80013fa:	f001 f8db 	bl	80025b4 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 80013fe:	210c      	movs	r1, #12
 8001400:	4825      	ldr	r0, [pc, #148]	; (8001498 <systemInit+0xf8>)
 8001402:	f005 fedb 	bl	80071bc <HAL_TIM_PWM_Start>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <systemInit+0x70>
 800140c:	f001 f8d2 	bl	80025b4 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 8001410:	2100      	movs	r1, #0
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <systemInit+0xfc>)
 8001414:	f005 fed2 	bl	80071bc <HAL_TIM_PWM_Start>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <systemInit+0x82>
 800141e:	f001 f8c9 	bl	80025b4 <Error_Handler>

	// MAX22201 sleepmode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <systemInit+0xf8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800142a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <systemInit+0xf8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <systemInit+0xf8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <systemInit+0xf8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <systemInit+0xfc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 8001452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001456:	f002 fd4d 	bl	8003ef4 <HAL_Delay>

	intiLcd();  	// LCD initialize
 800145a:	f7ff fe1d 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <systemInit+0x100>)
 8001460:	f005 fdec 	bl	800703c <HAL_TIM_Base_Start_IT>
	// while(1) {
	//   lcdRowPrintf(UPROW, "5ax %4d",analogVal[12]);
	//   lcdRowPrintf(LOWROW, "dip %4d",analogVal[13]);
	// }

	lcdRowPrintf(UPROW, "who am i");
 8001464:	490f      	ldr	r1, [pc, #60]	; (80014a4 <systemInit+0x104>)
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff ff24 	bl	80012b4 <lcdRowPrintf>
	lcdRowPrintf(LOWROW, "    %#x",initBNO055());
 800146c:	f7ff ff7a 	bl	8001364 <initBNO055>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <systemInit+0x108>)
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff1c 	bl	80012b4 <lcdRowPrintf>
	HAL_Delay(700);
 800147c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001480:	f002 fd38 	bl	8003ef4 <HAL_Delay>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200004e0 	.word	0x200004e0
 800148c:	20000528 	.word	0x20000528
 8001490:	200005fc 	.word	0x200005fc
 8001494:	200002a4 	.word	0x200002a4
 8001498:	20000450 	.word	0x20000450
 800149c:	20000498 	.word	0x20000498
 80014a0:	20000570 	.word	0x20000570
 80014a4:	0800cf68 	.word	0x0800cf68
 80014a8:	0800cf74 	.word	0x0800cf74
 80014ac:	00000000 	.word	0x00000000

080014b0 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint32_t    i = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]

	switch (pattern) {
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <systemLoop+0x1f0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	f200 80d8 	bhi.w	8001674 <systemLoop+0x1c4>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <systemLoop+0x1c>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	0800151f 	.word	0x0800151f
 80014d4:	080015ed 	.word	0x080015ed
 80014d8:	08001629 	.word	0x08001629
      	case 0:
			setup();
 80014dc:	f001 f970 	bl	80027c0 <setup>

			if (start) {
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <systemLoop+0x1f4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80c7 	beq.w	8001678 <systemLoop+0x1c8>
				lcdRowPrintf(UPROW, "ready   ");
 80014ea:	496f      	ldr	r1, [pc, #444]	; (80016a8 <systemLoop+0x1f8>)
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fee1 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 80014f2:	496e      	ldr	r1, [pc, #440]	; (80016ac <systemLoop+0x1fc>)
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fedd 	bl	80012b4 <lcdRowPrintf>

				HAL_Delay(2000);
 80014fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014fe:	f002 fcf9 	bl	8003ef4 <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 8001502:	496b      	ldr	r1, [pc, #428]	; (80016b0 <systemLoop+0x200>)
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fed5 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 800150a:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <systemLoop+0x204>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
				cnt1 = 0;
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <systemLoop+0x208>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
				pattern = 1;
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <systemLoop+0x1f0>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800151c:	e0ac      	b.n	8001678 <systemLoop+0x1c8>

      	case 1:
			if (!modeCurve) {
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <systemLoop+0x20c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <systemLoop+0x84>
				targetSpeed = 1.0*PALSE_MILLIMETER;
 8001526:	4966      	ldr	r1, [pc, #408]	; (80016c0 <systemLoop+0x210>)
 8001528:	a359      	add	r3, pc, #356	; (adr r3, 8001690 <systemLoop+0x1e0>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	e9c1 2300 	strd	r2, r3, [r1]
 8001532:	e005      	b.n	8001540 <systemLoop+0x90>
			} else {
				targetSpeed = 0.4*PALSE_MILLIMETER;
 8001534:	4962      	ldr	r1, [pc, #392]	; (80016c0 <systemLoop+0x210>)
 8001536:	a358      	add	r3, pc, #352	; (adr r3, 8001698 <systemLoop+0x1e8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			
			motorPwmOutSynth( tracePwm, speedPwm );
 8001540:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <systemLoop+0x214>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	461a      	mov	r2, r3
 8001548:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <systemLoop+0x218>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f001 f8f3 	bl	800273c <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <systemLoop+0x21c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
			// lcdRowPrintf(UPROW, "    %4d", encCurrentN);
			// lcdRowPrintf(LOWROW, "    %4d", SGmarker);

			// マーカー処理
			if (checkmarker() == RIGHTMARKER) {
 8001560:	f001 f85a 	bl	8002618 <checkmarker>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d118      	bne.n	800159c <systemLoop+0xec>
				// ゴールマーカー処理
				if (SGmarker == 0) {
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <systemLoop+0x220>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <systemLoop+0xca>
					SGmarker = STARTMARKER;
 8001572:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <systemLoop+0x220>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e01b      	b.n	80015b2 <systemLoop+0x102>
				} else if (SGmarker == STARTMARKER && encTotalN > encMM(1000)) {
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <systemLoop+0x220>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d117      	bne.n	80015b2 <systemLoop+0x102>
 8001582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001586:	f000 f91b 	bl	80017c0 <encMM>
 800158a:	4602      	mov	r2, r0
 800158c:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <systemLoop+0x204>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	da0e      	bge.n	80015b2 <systemLoop+0x102>
					SGmarker = GOALMARKER;
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <systemLoop+0x220>)
 8001596:	2202      	movs	r2, #2
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e00a      	b.n	80015b2 <systemLoop+0x102>
				}
			} else if (checkmarker() == LEFTMARKER) {
 800159c:	f001 f83c 	bl	8002618 <checkmarker>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d105      	bne.n	80015b2 <systemLoop+0x102>
				// カーブマーカー処理
				enc1 = 0;
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <systemLoop+0x224>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
				modeCurve = 1;
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <systemLoop+0x20c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
			}

			if (modeCurve == 1 && enc1 >= encMM(60)) modeCurve = 0;
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <systemLoop+0x20c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10a      	bne.n	80015d0 <systemLoop+0x120>
 80015ba:	203c      	movs	r0, #60	; 0x3c
 80015bc:	f000 f900 	bl	80017c0 <encMM>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <systemLoop+0x224>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dc02      	bgt.n	80015d0 <systemLoop+0x120>
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <systemLoop+0x20c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

			// ゴール
			if (SGmarker == GOALMARKER) {
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <systemLoop+0x220>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d151      	bne.n	800167c <systemLoop+0x1cc>
				i = cnt1;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <systemLoop+0x208>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	607b      	str	r3, [r7, #4]
				enc1 = 0;
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <systemLoop+0x224>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
				pattern = 2;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <systemLoop+0x1f0>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80015ea:	e047      	b.n	800167c <systemLoop+0x1cc>

      	case 2:
			targetSpeed = 0.4*PALSE_MILLIMETER;
 80015ec:	4934      	ldr	r1, [pc, #208]	; (80016c0 <systemLoop+0x210>)
 80015ee:	a32a      	add	r3, pc, #168	; (adr r3, 8001698 <systemLoop+0x1e8>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <systemLoop+0x214>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <systemLoop+0x218>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f001 f897 	bl	800273c <motorPwmOutSynth>

			if (enc1 >= encMM(500)) {
 800160e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001612:	f000 f8d5 	bl	80017c0 <encMM>
 8001616:	4602      	mov	r2, r0
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <systemLoop+0x224>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	dc2f      	bgt.n	8001680 <systemLoop+0x1d0>
				pattern = 3;
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <systemLoop+0x1f0>)
 8001622:	2203      	movs	r2, #3
 8001624:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001626:	e02b      	b.n	8001680 <systemLoop+0x1d0>

      	case 3:
			targetSpeed = 0;
 8001628:	4925      	ldr	r1, [pc, #148]	; (80016c0 <systemLoop+0x210>)
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <systemLoop+0x228>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <systemLoop+0x19a>
 8001640:	2100      	movs	r1, #0
 8001642:	2000      	movs	r0, #0
 8001644:	f001 f87a 	bl	800273c <motorPwmOutSynth>
 8001648:	e006      	b.n	8001658 <systemLoop+0x1a8>
			else                  motorPwmOutSynth( 0, speedPwm );
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <systemLoop+0x218>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4619      	mov	r1, r3
 8001652:	2000      	movs	r0, #0
 8001654:	f001 f872 	bl	800273c <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <systemLoop+0x21c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

			lcdRowPrintf(UPROW, "   %5d",i);
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	491e      	ldr	r1, [pc, #120]	; (80016dc <systemLoop+0x22c>)
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fe25 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "     End");
 800166a:	491d      	ldr	r1, [pc, #116]	; (80016e0 <systemLoop+0x230>)
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fe21 	bl	80012b4 <lcdRowPrintf>
			break;
 8001672:	e006      	b.n	8001682 <systemLoop+0x1d2>
    
      	default:
        	break;
 8001674:	bf00      	nop
 8001676:	e004      	b.n	8001682 <systemLoop+0x1d2>
			break;
 8001678:	bf00      	nop
 800167a:	e002      	b.n	8001682 <systemLoop+0x1d2>
			break;
 800167c:	bf00      	nop
 800167e:	e000      	b.n	8001682 <systemLoop+0x1d2>
			break;
 8001680:	bf00      	nop
    } // switch case
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	c0000000 	.word	0xc0000000
 8001694:	404e08f5 	.word	0x404e08f5
 8001698:	00000000 	.word	0x00000000
 800169c:	4038072b 	.word	0x4038072b
 80016a0:	2000022c 	.word	0x2000022c
 80016a4:	20000620 	.word	0x20000620
 80016a8:	0800cf7c 	.word	0x0800cf7c
 80016ac:	0800cf88 	.word	0x0800cf88
 80016b0:	0800cf94 	.word	0x0800cf94
 80016b4:	20000240 	.word	0x20000240
 80016b8:	2000063c 	.word	0x2000063c
 80016bc:	2000022d 	.word	0x2000022d
 80016c0:	20000648 	.word	0x20000648
 80016c4:	20000292 	.word	0x20000292
 80016c8:	20000640 	.word	0x20000640
 80016cc:	20000498 	.word	0x20000498
 80016d0:	20000618 	.word	0x20000618
 80016d4:	20000244 	.word	0x20000244
 80016d8:	20000236 	.word	0x20000236
 80016dc:	0800cfa0 	.word	0x0800cfa0
 80016e0:	0800cfa8 	.word	0x0800cfa8

080016e4 <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <getEncoder+0xb0>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <getEncoder+0xb4>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <getEncoder+0xb8>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <getEncoder+0xbc>)
 8001704:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <getEncoder+0xc0>)
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <getEncoder+0xc4>)
 8001714:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <getEncoder+0xbc>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	461a      	mov	r2, r3
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <getEncoder+0xc4>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	4413      	add	r3, r2
 8001726:	0fda      	lsrs	r2, r3, #31
 8001728:	4413      	add	r3, r2
 800172a:	105b      	asrs	r3, r3, #1
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <getEncoder+0xc8>)
 8001730:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <getEncoder+0xbc>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	461a      	mov	r2, r3
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <getEncoder+0xcc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <getEncoder+0xcc>)
 8001742:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <getEncoder+0xc4>)
 8001746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174a:	461a      	mov	r2, r3
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <getEncoder+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4413      	add	r3, r2
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <getEncoder+0xd0>)
 8001754:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <getEncoder+0xc8>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	461a      	mov	r2, r3
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <getEncoder+0xd4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <getEncoder+0xd4>)
 8001766:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <getEncoder+0xc8>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	461a      	mov	r2, r3
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <getEncoder+0xd8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4413      	add	r3, r2
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <getEncoder+0xd8>)
 8001778:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <getEncoder+0xb8>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 8001780:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <getEncoder+0xc0>)
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	8013      	strh	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40000800 	.word	0x40000800
 8001798:	40000400 	.word	0x40000400
 800179c:	2000022e 	.word	0x2000022e
 80017a0:	20000232 	.word	0x20000232
 80017a4:	20000230 	.word	0x20000230
 80017a8:	20000234 	.word	0x20000234
 80017ac:	20000236 	.word	0x20000236
 80017b0:	20000238 	.word	0x20000238
 80017b4:	2000023c 	.word	0x2000023c
 80017b8:	20000240 	.word	0x20000240
 80017bc:	20000244 	.word	0x20000244

080017c0 <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bfb8      	it	lt
 80017d2:	425b      	neglt	r3, r3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80017fc <encMM+0x3c>
 80017e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ea:	ee17 3a90 	vmov	r3, s15
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	427047ae 	.word	0x427047ae

08001800 <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <ledOut+0x22>
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <ledOut+0x78>)
 800181c:	f003 fdd4 	bl	80053c8 <HAL_GPIO_WritePin>
 8001820:	e005      	b.n	800182e <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <ledOut+0x78>)
 800182a:	f003 fdcd 	bl	80053c8 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <ledOut+0x44>
 8001838:	2200      	movs	r2, #0
 800183a:	2110      	movs	r1, #16
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <ledOut+0x7c>)
 800183e:	f003 fdc3 	bl	80053c8 <HAL_GPIO_WritePin>
 8001842:	e004      	b.n	800184e <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2110      	movs	r1, #16
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <ledOut+0x7c>)
 800184a:	f003 fdbd 	bl	80053c8 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <ledOut+0x64>
 8001858:	2200      	movs	r2, #0
 800185a:	2120      	movs	r1, #32
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <ledOut+0x7c>)
 800185e:	f003 fdb3 	bl	80053c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001862:	e004      	b.n	800186e <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2120      	movs	r1, #32
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <ledOut+0x7c>)
 800186a:	f003 fdad 	bl	80053c8 <HAL_GPIO_WritePin>
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400

08001880 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	uint8_t i;
	cntls++;
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <getLineSensor+0x90>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <getLineSensor+0x90>)
 8001890:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<=11;i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e010      	b.n	80018ba <getLineSensor+0x3a>
		lsensorInt[i] += analogVal[i];
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <getLineSensor+0x94>)
 800189c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	491d      	ldr	r1, [pc, #116]	; (8001918 <getLineSensor+0x98>)
 80018a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018a8:	4619      	mov	r1, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	440a      	add	r2, r1
 80018ae:	4919      	ldr	r1, [pc, #100]	; (8001914 <getLineSensor+0x94>)
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for ( i=0;i<=11;i++) {
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	3301      	adds	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b0b      	cmp	r3, #11
 80018be:	d9eb      	bls.n	8001898 <getLineSensor+0x18>
	}

	if (cntls > 10) {
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <getLineSensor+0x90>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d91d      	bls.n	8001904 <getLineSensor+0x84>
		for ( i=0;i<=11;i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	e014      	b.n	80018f8 <getLineSensor+0x78>
			lsensor[i] = lsensorInt[i]/10;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <getLineSensor+0x94>)
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	4a11      	ldr	r2, [pc, #68]	; (800191c <getLineSensor+0x9c>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	b291      	uxth	r1, r2
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <getLineSensor+0xa0>)
 80018e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lsensorInt[i] = 0;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <getLineSensor+0x94>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for ( i=0;i<=11;i++) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	3301      	adds	r3, #1
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b0b      	cmp	r3, #11
 80018fc:	d9e7      	bls.n	80018ce <getLineSensor+0x4e>
		}
		cntls = 0;
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <getLineSensor+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
	}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000290 	.word	0x20000290
 8001914:	20000248 	.word	0x20000248
 8001918:	200005fc 	.word	0x200005fc
 800191c:	cccccccd 	.word	0xcccccccd
 8001920:	20000278 	.word	0x20000278
 8001924:	00000000 	.word	0x00000000

08001928 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
	int32_t iP, iD, iI, iRet;
	int32_t Dev, Dif;
	
	//サーボモータ用PWM値計算
	// Dev = (lsensor[4]+lsensor[5]) - (lsensor[6]+lsensor[7]);
	Dev = (lsensor[5]) - (lsensor[6]);
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <motorControlTrace+0x148>)
 8001930:	895b      	ldrh	r3, [r3, #10]
 8001932:	461a      	mov	r2, r3
 8001934:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <motorControlTrace+0x148>)
 8001936:	899b      	ldrh	r3, [r3, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	613b      	str	r3, [r7, #16]
	// I成分積算
	Int += (double)Dev * 0.001;
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7fe fe11 	bl	8000564 <__aeabi_i2d>
 8001942:	a345      	add	r3, pc, #276	; (adr r3, 8001a58 <motorControlTrace+0x130>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe76 	bl	8000638 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <motorControlTrace+0x14c>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fcb7 	bl	80002cc <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4944      	ldr	r1, [pc, #272]	; (8001a74 <motorControlTrace+0x14c>)
 8001964:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <motorControlTrace+0x14c>)
 800196a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196e:	a33c      	add	r3, pc, #240	; (adr r3, 8001a60 <motorControlTrace+0x138>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7ff f8f0 	bl	8000b58 <__aeabi_dcmpgt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <motorControlTrace+0x64>
 800197e:	493d      	ldr	r1, [pc, #244]	; (8001a74 <motorControlTrace+0x14c>)
 8001980:	a337      	add	r3, pc, #220	; (adr r3, 8001a60 <motorControlTrace+0x138>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	e9c1 2300 	strd	r2, r3, [r1]
 800198a:	e010      	b.n	80019ae <motorControlTrace+0x86>
	else if ( Int < -10000 ) Int = -10000;
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <motorControlTrace+0x14c>)
 800198e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001992:	a335      	add	r3, pc, #212	; (adr r3, 8001a68 <motorControlTrace+0x140>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7ff f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <motorControlTrace+0x86>
 80019a2:	4934      	ldr	r1, [pc, #208]	; (8001a74 <motorControlTrace+0x14c>)
 80019a4:	a330      	add	r3, pc, #192	; (adr r3, 8001a68 <motorControlTrace+0x140>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <motorControlTrace+0x150>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	461a      	mov	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

	iP = (int32_t)kp1_buff * Dev;		// 比例
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <motorControlTrace+0x154>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	60bb      	str	r3, [r7, #8]
	iI = (double)ki1_buff * Int;	// 積分
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <motorControlTrace+0x158>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdb8 	bl	8000544 <__aeabi_ui2d>
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <motorControlTrace+0x14c>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fe2d 	bl	8000638 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8d7 	bl	8000b98 <__aeabi_d2iz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	607b      	str	r3, [r7, #4]
	iD = (int32_t)kd1_buff * Dif;		// 微分
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <motorControlTrace+0x15c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	603b      	str	r3, [r7, #0]
	iRet = iP + iI + iD;
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	119b      	asrs	r3, r3, #6
 8001a0c:	617b      	str	r3, [r7, #20]

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a14:	dd02      	ble.n	8001a1c <motorControlTrace+0xf4>
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	617b      	str	r3, [r7, #20]
	if ( iRet <  -1000 ) iRet = -1000;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001a22:	da01      	bge.n	8001a28 <motorControlTrace+0x100>
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <motorControlTrace+0x160>)
 8001a26:	617b      	str	r3, [r7, #20]
	
	if ( Dev >= 0 )	devBefore = 0;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db03      	blt.n	8001a36 <motorControlTrace+0x10e>
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <motorControlTrace+0x164>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <motorControlTrace+0x114>
	else			devBefore = 1;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <motorControlTrace+0x164>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	801a      	strh	r2, [r3, #0]
	tracePwm = iRet;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <motorControlTrace+0x168>)
 8001a42:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <motorControlTrace+0x150>)
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a5c:	3f50624d 	.word	0x3f50624d
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40c38800 	.word	0x40c38800
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	c0c38800 	.word	0xc0c38800
 8001a70:	20000278 	.word	0x20000278
 8001a74:	20000298 	.word	0x20000298
 8001a78:	20000294 	.word	0x20000294
 8001a7c:	20000002 	.word	0x20000002
 8001a80:	200002a0 	.word	0x200002a0
 8001a84:	20000003 	.word	0x20000003
 8001a88:	fffffc18 	.word	0xfffffc18
 8001a8c:	20000296 	.word	0x20000296
 8001a90:	20000292 	.word	0x20000292

08001a94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aa0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001aac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ab0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ab4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001abc:	e000      	b.n	8001ac0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001abe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ac0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f9      	beq.n	8001abe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001aca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae6:	f002 f993 	bl	8003e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aea:	f000 f81d 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aee:	f000 fc6d 	bl	80023cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001af2:	f000 fc4b 	bl	800238c <MX_DMA_Init>
  MX_ADC1_Init();
 8001af6:	f000 f889 	bl	8001c0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001afa:	f000 f995 	bl	8001e28 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001afe:	f000 f9c1 	bl	8001e84 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b02:	f000 fa2b 	bl	8001f5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b06:	f000 fae1 	bl	80020cc <MX_TIM2_Init>
  MX_UART5_Init();
 8001b0a:	f000 fc15 	bl	8002338 <MX_UART5_Init>
  MX_TIM3_Init();
 8001b0e:	f000 fb35 	bl	800217c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b12:	f000 fb87 	bl	8002224 <MX_TIM4_Init>
  MX_SPI3_Init();
 8001b16:	f000 f9eb 	bl	8001ef0 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001b1a:	f000 fbd7 	bl	80022cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8001b1e:	f7ff fc3f 	bl	80013a0 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8001b22:	f7ff fcc5 	bl	80014b0 <systemLoop>
 8001b26:	e7fc      	b.n	8001b22 <main+0x40>

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	; 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	2234      	movs	r2, #52	; 0x34
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fd72 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <SystemClock_Config+0xdc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a2b      	ldr	r2, [pc, #172]	; (8001c04 <SystemClock_Config+0xdc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <SystemClock_Config+0xdc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <SystemClock_Config+0xe0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <SystemClock_Config+0xe0>)
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <SystemClock_Config+0xe0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001b98:	2306      	movs	r3, #6
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b9c:	23b4      	movs	r3, #180	; 0xb4
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fecd 	bl	8006950 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bbc:	f000 fcfa 	bl	80025b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bc0:	f004 fbb2 	bl	8006328 <HAL_PWREx_EnableOverDrive>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bca:	f000 fcf3 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	230f      	movs	r3, #15
 8001bd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2105      	movs	r1, #5
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fbeb 	bl	80063c8 <HAL_RCC_ClockConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bf8:	f000 fcdc 	bl	80025b4 <Error_Handler>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c12:	463b      	mov	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <MX_ADC1_Init+0x214>)
 8001c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c24:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c32:	4b7a      	ldr	r3, [pc, #488]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c38:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c3e:	4b77      	ldr	r3, [pc, #476]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c46:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c4c:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <MX_ADC1_Init+0x218>)
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c52:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c5a:	220e      	movs	r2, #14
 8001c5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c6c:	486b      	ldr	r0, [pc, #428]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c6e:	f002 f965 	bl	8003f3c <HAL_ADC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c78:	f000 fc9c 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001c84:	2304      	movs	r3, #4
 8001c86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4863      	ldr	r0, [pc, #396]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001c8e:	f002 fabd 	bl	800420c <HAL_ADC_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c98:	f000 fc8c 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	485c      	ldr	r0, [pc, #368]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001caa:	f002 faaf 	bl	800420c <HAL_ADC_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001cb4:	f000 fc7e 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001cb8:	230d      	movs	r3, #13
 8001cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4855      	ldr	r0, [pc, #340]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001cc6:	f002 faa1 	bl	800420c <HAL_ADC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001cd0:	f000 fc70 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	484e      	ldr	r0, [pc, #312]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001ce2:	f002 fa93 	bl	800420c <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001cec:	f000 fc62 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4847      	ldr	r0, [pc, #284]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001cfe:	f002 fa85 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001d08:	f000 fc54 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001d10:	2306      	movs	r3, #6
 8001d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	4619      	mov	r1, r3
 8001d18:	4840      	ldr	r0, [pc, #256]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001d1a:	f002 fa77 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001d24:	f000 fc46 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	4619      	mov	r1, r3
 8001d34:	4839      	ldr	r0, [pc, #228]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001d36:	f002 fa69 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001d40:	f000 fc38 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4831      	ldr	r0, [pc, #196]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001d56:	f002 fa59 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001d60:	f000 fc28 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d64:	2305      	movs	r3, #5
 8001d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001d68:	2309      	movs	r3, #9
 8001d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4619      	mov	r1, r3
 8001d74:	4829      	ldr	r0, [pc, #164]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001d76:	f002 fa49 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8001d80:	f000 fc18 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d84:	2306      	movs	r3, #6
 8001d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4822      	ldr	r0, [pc, #136]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001d92:	f002 fa3b 	bl	800420c <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8001d9c:	f000 fc0a 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001da0:	2307      	movs	r3, #7
 8001da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001da4:	230b      	movs	r3, #11
 8001da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	481b      	ldr	r0, [pc, #108]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001dae:	f002 fa2d 	bl	800420c <HAL_ADC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8001db8:	f000 fbfc 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001dbc:	230e      	movs	r3, #14
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001dce:	f002 fa1d 	bl	800420c <HAL_ADC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x1d0>
  {
    Error_Handler();
 8001dd8:	f000 fbec 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ddc:	230a      	movs	r3, #10
 8001dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001de0:	230d      	movs	r3, #13
 8001de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001dea:	f002 fa0f 	bl	800420c <HAL_ADC_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8001df4:	f000 fbde 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001dfc:	230e      	movs	r3, #14
 8001dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_ADC1_Init+0x210>)
 8001e06:	f002 fa01 	bl	800420c <HAL_ADC_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_ADC1_Init+0x208>
  {
    Error_Handler();
 8001e10:	f000 fbd0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200002a4 	.word	0x200002a4
 8001e20:	40012000 	.word	0x40012000
 8001e24:	0f000001 	.word	0x0f000001

08001e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <MX_I2C1_Init+0x54>)
 8001e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_I2C1_Init+0x58>)
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e66:	f003 fac9 	bl	80053fc <HAL_I2C_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e70:	f000 fba0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000034c 	.word	0x2000034c
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	00061a80 	.word	0x00061a80

08001e84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI2_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eb8:	2220      	movs	r2, #32
 8001eba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ed6:	f004 ffd9 	bl	8006e8c <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fb68 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200003a0 	.word	0x200003a0
 8001eec:	40003800 	.word	0x40003800

08001ef0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <MX_SPI3_Init+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_SPI3_Init+0x64>)
 8001f42:	f004 ffa3 	bl	8006e8c <HAL_SPI_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001f4c:	f000 fb32 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003f8 	.word	0x200003f8
 8001f58:	40003c00 	.word	0x40003c00

08001f5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	; 0x48
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2220      	movs	r2, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 fb4a 	bl	8008620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001f8e:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <MX_TIM1_Init+0x16c>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001f94:	220b      	movs	r2, #11
 8001f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fa0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb8:	4842      	ldr	r0, [pc, #264]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fba:	f005 f8af 	bl	800711c <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001fc4:	f000 faf6 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	483b      	ldr	r0, [pc, #236]	; (80020c4 <MX_TIM1_Init+0x168>)
 8001fd8:	f005 ff54 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001fe2:	f000 fae7 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe6:	2360      	movs	r3, #96	; 0x60
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	482e      	ldr	r0, [pc, #184]	; (80020c4 <MX_TIM1_Init+0x168>)
 800200c:	f005 fbda 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002016:	f000 facd 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	2204      	movs	r2, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4828      	ldr	r0, [pc, #160]	; (80020c4 <MX_TIM1_Init+0x168>)
 8002024:	f005 fbce 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800202e:	f000 fac1 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_TIM1_Init+0x168>)
 800203c:	f005 fbc2 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002046:	f000 fab5 	bl	80025b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_TIM1_Init+0x168>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_TIM1_Init+0x168>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0208 	bic.w	r2, r2, #8
 8002058:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	220c      	movs	r2, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <MX_TIM1_Init+0x168>)
 8002064:	f005 fbae 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800206e:	f000 faa1 	bl	80025b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_TIM1_Init+0x168>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_TIM1_Init+0x168>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM1_Init+0x168>)
 80020a6:	f005 ff69 	bl	8007f7c <HAL_TIMEx_ConfigBreakDeadTime>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80020b0:	f000 fa80 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM1_Init+0x168>)
 80020b6:	f001 fa91 	bl	80035dc <HAL_TIM_MspPostInit>

}
 80020ba:	bf00      	nop
 80020bc:	3748      	adds	r7, #72	; 0x48
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000450 	.word	0x20000450
 80020c8:	40010000 	.word	0x40010000

080020cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	615a      	str	r2, [r3, #20]
 80020ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_TIM2_Init+0xac>)
 80020f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <MX_TIM2_Init+0xac>)
 80020f8:	220b      	movs	r2, #11
 80020fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MX_TIM2_Init+0xac>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <MX_TIM2_Init+0xac>)
 8002104:	f240 52db 	movw	r2, #1499	; 0x5db
 8002108:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <MX_TIM2_Init+0xac>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MX_TIM2_Init+0xac>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002116:	4818      	ldr	r0, [pc, #96]	; (8002178 <MX_TIM2_Init+0xac>)
 8002118:	f005 f800 	bl	800711c <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002122:	f000 fa47 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	4619      	mov	r1, r3
 8002134:	4810      	ldr	r0, [pc, #64]	; (8002178 <MX_TIM2_Init+0xac>)
 8002136:	f005 fea5 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002140:	f000 fa38 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002144:	2360      	movs	r3, #96	; 0x60
 8002146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_TIM2_Init+0xac>)
 800215c:	f005 fb32 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002166:	f000 fa25 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <MX_TIM2_Init+0xac>)
 800216c:	f001 fa36 	bl	80035dc <HAL_TIM_MspPostInit>

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000498 	.word	0x20000498

0800217c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f006 fa48 	bl	8008620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <MX_TIM3_Init+0xa0>)
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <MX_TIM3_Init+0xa4>)
 800219c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <MX_TIM3_Init+0xa0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_TIM3_Init+0xa0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <MX_TIM3_Init+0xa0>)
 80021ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_TIM3_Init+0xa0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <MX_TIM3_Init+0xa0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021be:	2303      	movs	r3, #3
 80021c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021c6:	2301      	movs	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4619      	mov	r1, r3
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <MX_TIM3_Init+0xa0>)
 80021ea:	f005 f8af 	bl	800734c <HAL_TIM_Encoder_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021f4:	f000 f9de 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_TIM3_Init+0xa0>)
 8002206:	f005 fe3d 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002210:	f000 f9d0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	3730      	adds	r7, #48	; 0x30
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200004e0 	.word	0x200004e0
 8002220:	40000400 	.word	0x40000400

08002224 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f006 f9f4 	bl	8008620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <MX_TIM4_Init+0xa0>)
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <MX_TIM4_Init+0xa4>)
 8002244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_TIM4_Init+0xa0>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM4_Init+0xa0>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <MX_TIM4_Init+0xa0>)
 8002254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_TIM4_Init+0xa0>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_TIM4_Init+0xa0>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002266:	2303      	movs	r3, #3
 8002268:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800227e:	2301      	movs	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM4_Init+0xa0>)
 8002292:	f005 f85b 	bl	800734c <HAL_TIM_Encoder_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800229c:	f000 f98a 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_TIM4_Init+0xa0>)
 80022ae:	f005 fde9 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80022b8:	f000 f97c 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	3730      	adds	r7, #48	; 0x30
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000528 	.word	0x20000528
 80022c8:	40000800 	.word	0x40000800

080022cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d2:	463b      	mov	r3, r7
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM6_Init+0x64>)
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <MX_TIM6_Init+0x68>)
 80022de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <MX_TIM6_Init+0x64>)
 80022e2:	220b      	movs	r2, #11
 80022e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <MX_TIM6_Init+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_TIM6_Init+0x64>)
 80022ee:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80022f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_TIM6_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM6_Init+0x64>)
 80022fc:	f004 fe4f 	bl	8006f9e <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002306:	f000 f955 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_TIM6_Init+0x64>)
 8002318:	f005 fdb4 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002322:	f000 f947 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000570 	.word	0x20000570
 8002334:	40001000 	.word	0x40001000

08002338 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_UART5_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_UART5_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_UART5_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_UART5_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_UART5_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_UART5_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_UART5_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_UART5_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_UART5_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_UART5_Init+0x4c>)
 8002370:	f005 fe6a 	bl	8008048 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 f91b 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200005b8 	.word	0x200005b8
 8002388:	40005000 	.word	0x40005000

0800238c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_DMA_Init+0x3c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <MX_DMA_Init+0x3c>)
 800239c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_DMA_Init+0x3c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2038      	movs	r0, #56	; 0x38
 80023b4:	f002 fab5 	bl	8004922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023b8:	2038      	movs	r0, #56	; 0x38
 80023ba:	f002 face 	bl	800495a <HAL_NVIC_EnableIRQ>

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <MX_GPIO_Init+0x18c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <MX_GPIO_Init+0x18c>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <MX_GPIO_Init+0x18c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b55      	ldr	r3, [pc, #340]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a54      	ldr	r2, [pc, #336]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b52      	ldr	r3, [pc, #328]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <MX_GPIO_Init+0x18c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <MX_GPIO_Init+0x18c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a46      	ldr	r2, [pc, #280]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b40      	ldr	r3, [pc, #256]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <MX_GPIO_Init+0x18c>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <MX_GPIO_Init+0x18c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002474:	4839      	ldr	r0, [pc, #228]	; (800255c <MX_GPIO_Init+0x190>)
 8002476:	f002 ffa7 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	f243 0130 	movw	r1, #12336	; 0x3030
 8002480:	4837      	ldr	r0, [pc, #220]	; (8002560 <MX_GPIO_Init+0x194>)
 8002482:	f002 ffa1 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248c:	4835      	ldr	r0, [pc, #212]	; (8002564 <MX_GPIO_Init+0x198>)
 800248e:	f002 ff9b 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 8002492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249c:	2301      	movs	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	482d      	ldr	r0, [pc, #180]	; (800255c <MX_GPIO_Init+0x190>)
 80024a8:	f002 fde2 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 80024ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	4825      	ldr	r0, [pc, #148]	; (800255c <MX_GPIO_Init+0x190>)
 80024c6:	f002 fdd3 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80024ca:	2302      	movs	r3, #2
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	4820      	ldr	r0, [pc, #128]	; (8002560 <MX_GPIO_Init+0x194>)
 80024de:	f002 fdc7 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 80024e2:	2304      	movs	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	481a      	ldr	r0, [pc, #104]	; (8002560 <MX_GPIO_Init+0x194>)
 80024f6:	f002 fdbb 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 80024fa:	f243 0330 	movw	r3, #12336	; 0x3030
 80024fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	4813      	ldr	r0, [pc, #76]	; (8002560 <MX_GPIO_Init+0x194>)
 8002514:	f002 fdac 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 8002518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	480b      	ldr	r0, [pc, #44]	; (800255c <MX_GPIO_Init+0x190>)
 800252e:	f002 fd9f 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <MX_GPIO_Init+0x198>)
 800254c:	f002 fd90 	bl	8005070 <HAL_GPIO_Init>

}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800
 8002560:	40020400 	.word	0x40020400
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  getLineSensor();
 8002570:	f7ff f986 	bl	8001880 <getLineSensor>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_write>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);

	return val;
}
int _write(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e009      	b.n	80025a2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	60ba      	str	r2, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa7c 	bl	8001a94 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbf1      	blt.n	800258e <_write+0x12>
  }
  return len;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <getMarkersensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkersensor ( void ) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	uint8_t r = 1, l = 1, ret = 0;
 80025c6:	2301      	movs	r3, #1
 80025c8:	71bb      	strb	r3, [r7, #6]
 80025ca:	2301      	movs	r3, #1
 80025cc:	717b      	strb	r3, [r7, #5]
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 80025d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <getMarkersensor+0x50>)
 80025d8:	f002 fede 	bl	8005398 <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 80025e0:	2102      	movs	r1, #2
 80025e2:	480c      	ldr	r0, [pc, #48]	; (8002614 <getMarkersensor+0x54>)
 80025e4:	f002 fed8 	bl	8005398 <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += 0x01;
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <getMarkersensor+0x38>
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	3301      	adds	r3, #1
 80025f6:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += 0x02;
 80025f8:	797b      	ldrb	r3, [r7, #5]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <getMarkersensor+0x44>
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	3302      	adds	r3, #2
 8002602:	71fb      	strb	r3, [r7, #7]

	return ret;
 8002604:	79fb      	ldrb	r3, [r7, #7]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40020800 	.word	0x40020800
 8002614:	40020400 	.word	0x40020400

08002618 <checkmarker>:
// モジュール名 checkmarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkmarker( void ) {
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	71fb      	strb	r3, [r7, #7]

	if ( getMarkersensor() ) {
 8002622:	f7ff ffcd 	bl	80025c0 <getMarkersensor>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01a      	beq.n	8002662 <checkmarker+0x4a>
		if (!encMarker) {
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <checkmarker+0x54>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <checkmarker+0x26>
			encMarker = encTotalN;
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <checkmarker+0x58>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <checkmarker+0x54>)
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e011      	b.n	8002662 <checkmarker+0x4a>
		} else if (encTotalN - encMarker >= encMM(14)) {
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <checkmarker+0x58>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <checkmarker+0x54>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1ad4      	subs	r4, r2, r3
 8002648:	200e      	movs	r0, #14
 800264a:	f7ff f8b9 	bl	80017c0 <encMM>
 800264e:	4603      	mov	r3, r0
 8002650:	429c      	cmp	r4, r3
 8002652:	db06      	blt.n	8002662 <checkmarker+0x4a>
			encMarker = 0;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <checkmarker+0x54>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
			ret = getMarkersensor();
 800265a:	f7ff ffb1 	bl	80025c0 <getMarkersensor>
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}
 800266c:	2000061c 	.word	0x2000061c
 8002670:	20000240 	.word	0x20000240

08002674 <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	460a      	mov	r2, r1
 800267e:	80fb      	strh	r3, [r7, #6]
 8002680:	4613      	mov	r3, r2
 8002682:	80bb      	strh	r3, [r7, #4]

    if (pwmL > 0) {
 8002684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	dd09      	ble.n	80026a0 <motorPwmOut+0x2c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <motorPwmOut+0xc4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <motorPwmOut+0xc4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
 800269e:	e01b      	b.n	80026d8 <motorPwmOut+0x64>
    } else if (pwmL == 0) {
 80026a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <motorPwmOut+0x4a>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <motorPwmOut+0xc4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <motorPwmOut+0xc4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
 80026bc:	e00c      	b.n	80026d8 <motorPwmOut+0x64>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 80026be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bfb8      	it	lt
 80026c6:	425b      	neglt	r3, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <motorPwmOut+0xc4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <motorPwmOut+0xc4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (pwmR > 0) {
 80026d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dd09      	ble.n	80026f4 <motorPwmOut+0x80>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <motorPwmOut+0xc4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmR);
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <motorPwmOut+0xc4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
    }

}
 80026f2:	e01b      	b.n	800272c <motorPwmOut+0xb8>
    } else if (pwmR == 0) {
 80026f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <motorPwmOut+0x9e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <motorPwmOut+0xc4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <motorPwmOut+0xc4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002710:	e00c      	b.n	800272c <motorPwmOut+0xb8>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
 8002712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	bfb8      	it	lt
 800271a:	425b      	neglt	r3, r3
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <motorPwmOut+0xc4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <motorPwmOut+0xc4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000450 	.word	0x20000450

0800273c <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	460a      	mov	r2, r1
 8002746:	80fb      	strh	r3, [r7, #6]
 8002748:	4613      	mov	r3, r2
 800274a:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 800274c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dd14      	ble.n	800277e <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 8002754:	88ba      	ldrh	r2, [r7, #4]
 8002756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275a:	2b00      	cmp	r3, #0
 800275c:	bfb8      	it	lt
 800275e:	425b      	neglt	r3, r3
 8002760:	b29b      	uxth	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 8002768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	bfb8      	it	lt
 8002770:	425b      	neglt	r3, r3
 8002772:	b29a      	uxth	r2, r3
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	81bb      	strh	r3, [r7, #12]
 800277c:	e013      	b.n	80027a6 <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 800277e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfb8      	it	lt
 8002786:	425b      	neglt	r3, r3
 8002788:	b29a      	uxth	r2, r3
 800278a:	88bb      	ldrh	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8002792:	88ba      	ldrh	r2, [r7, #4]
 8002794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	bfb8      	it	lt
 800279c:	425b      	neglt	r3, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 80027a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5f 	bl	8002674 <motorPwmOut>
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af02      	add	r7, sp, #8
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	// if ( cntSW >= 100 ) {
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	switch ( swValRotary ) {
 80027c6:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <setup+0x26c>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	f200 831c 	bhi.w	8002e08 <setup+0x648>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <setup+0x18>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	08002801 	.word	0x08002801
 80027dc:	08002e09 	.word	0x08002e09
 80027e0:	08002e09 	.word	0x08002e09
 80027e4:	08002e09 	.word	0x08002e09
 80027e8:	08002e09 	.word	0x08002e09
 80027ec:	0800281b 	.word	0x0800281b
 80027f0:	08002993 	.word	0x08002993
 80027f4:	08002e09 	.word	0x08002e09
 80027f8:	08002e09 	.word	0x08002e09
 80027fc:	08002b23 	.word	0x08002b23
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8002800:	2102      	movs	r1, #2
 8002802:	488b      	ldr	r0, [pc, #556]	; (8002a30 <setup+0x270>)
 8002804:	f000 fb2e 	bl	8002e64 <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8002808:	498a      	ldr	r1, [pc, #552]	; (8002a34 <setup+0x274>)
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe fd52 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8002810:	4989      	ldr	r1, [pc, #548]	; (8002a38 <setup+0x278>)
 8002812:	2001      	movs	r0, #1
 8002814:	f7fe fd4e 	bl	80012b4 <lcdRowPrintf>
			break;
 8002818:	e308      	b.n	8002e2c <setup+0x66c>
		// 	break;
		//------------------------------------------------------------------
		// ゲイン調整(トレース)
		//------------------------------------------------------------------
		case 0x5:
			lcdRowPrintf(UPROW, "kp ki kd");
 800281a:	4988      	ldr	r1, [pc, #544]	; (8002a3c <setup+0x27c>)
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fd49 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002822:	2102      	movs	r1, #2
 8002824:	4886      	ldr	r0, [pc, #536]	; (8002a40 <setup+0x280>)
 8002826:	f000 fb1d 	bl	8002e64 <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <setup+0x280>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10c      	bne.n	800284c <setup+0x8c>
				motorPwmOutSynth( tracePwm, 0 );
 8002832:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <setup+0x284>)
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff7e 	bl	800273c <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <setup+0x288>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e007      	b.n	800285c <setup+0x9c>
			} else {
				motorPwmOutSynth( 0, 0 );
 800284c:	2100      	movs	r1, #0
 800284e:	2000      	movs	r0, #0
 8002850:	f7ff ff74 	bl	800273c <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002854:	4b7c      	ldr	r3, [pc, #496]	; (8002a48 <setup+0x288>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			data_tuningLR( &pattern_gain, 1 );
 800285c:	2101      	movs	r1, #1
 800285e:	487b      	ldr	r0, [pc, #492]	; (8002a4c <setup+0x28c>)
 8002860:	f000 fbba 	bl	8002fd8 <data_tuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <setup+0x28c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d103      	bne.n	8002874 <setup+0xb4>
 800286c:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <setup+0x28c>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e006      	b.n	8002882 <setup+0xc2>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002874:	4b75      	ldr	r3, [pc, #468]	; (8002a4c <setup+0x28c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <setup+0xc2>
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <setup+0x28c>)
 800287e:	2203      	movs	r2, #3
 8002880:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <setup+0x28c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d059      	beq.n	800293e <setup+0x17e>
 800288a:	2b03      	cmp	r3, #3
 800288c:	f300 82c9 	bgt.w	8002e22 <setup+0x662>
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <setup+0xda>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d029      	beq.n	80028ec <setup+0x12c>
					}
					
					data_tuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 8002898:	e2c3      	b.n	8002e22 <setup+0x662>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800289a:	4b6d      	ldr	r3, [pc, #436]	; (8002a50 <setup+0x290>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028a2:	d302      	bcc.n	80028aa <setup+0xea>
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <setup+0x290>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80028aa:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <setup+0x290>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2bf9      	cmp	r3, #249	; 0xf9
 80028b0:	d809      	bhi.n	80028c6 <setup+0x106>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 80028b2:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <setup+0x294>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <setup+0x298>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4967      	ldr	r1, [pc, #412]	; (8002a5c <setup+0x29c>)
 80028be:	2001      	movs	r0, #1
 80028c0:	f7fe fcf8 	bl	80012b4 <lcdRowPrintf>
 80028c4:	e00d      	b.n	80028e2 <setup+0x122>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <setup+0x2a0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <setup+0x294>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <setup+0x298>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	460b      	mov	r3, r1
 80028da:	4962      	ldr	r1, [pc, #392]	; (8002a64 <setup+0x2a4>)
 80028dc:	2001      	movs	r0, #1
 80028de:	f7fe fce9 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &kp1_buff, 1 );
 80028e2:	2101      	movs	r1, #1
 80028e4:	485e      	ldr	r0, [pc, #376]	; (8002a60 <setup+0x2a0>)
 80028e6:	f000 faf3 	bl	8002ed0 <data_tuningUD>
					break;
 80028ea:	e051      	b.n	8002990 <setup+0x1d0>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <setup+0x290>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028f4:	d302      	bcc.n	80028fc <setup+0x13c>
 80028f6:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <setup+0x290>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80028fc:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <setup+0x290>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	2bf9      	cmp	r3, #249	; 0xf9
 8002902:	d809      	bhi.n	8002918 <setup+0x158>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 8002904:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <setup+0x2a0>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <setup+0x298>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4956      	ldr	r1, [pc, #344]	; (8002a68 <setup+0x2a8>)
 8002910:	2001      	movs	r0, #1
 8002912:	f7fe fccf 	bl	80012b4 <lcdRowPrintf>
 8002916:	e00d      	b.n	8002934 <setup+0x174>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002918:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <setup+0x2a0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <setup+0x294>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <setup+0x298>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	460b      	mov	r3, r1
 800292c:	494d      	ldr	r1, [pc, #308]	; (8002a64 <setup+0x2a4>)
 800292e:	2001      	movs	r0, #1
 8002930:	f7fe fcc0 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &ki1_buff, 1 );
 8002934:	2101      	movs	r1, #1
 8002936:	4847      	ldr	r0, [pc, #284]	; (8002a54 <setup+0x294>)
 8002938:	f000 faca 	bl	8002ed0 <data_tuningUD>
					break;
 800293c:	e028      	b.n	8002990 <setup+0x1d0>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <setup+0x290>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002946:	d302      	bcc.n	800294e <setup+0x18e>
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <setup+0x290>)
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <setup+0x290>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	2bf9      	cmp	r3, #249	; 0xf9
 8002954:	d809      	bhi.n	800296a <setup+0x1aa>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <setup+0x2a0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <setup+0x294>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4942      	ldr	r1, [pc, #264]	; (8002a6c <setup+0x2ac>)
 8002962:	2001      	movs	r0, #1
 8002964:	f7fe fca6 	bl	80012b4 <lcdRowPrintf>
 8002968:	e00d      	b.n	8002986 <setup+0x1c6>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <setup+0x2a0>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <setup+0x294>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <setup+0x298>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	4939      	ldr	r1, [pc, #228]	; (8002a64 <setup+0x2a4>)
 8002980:	2001      	movs	r0, #1
 8002982:	f7fe fc97 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &kd1_buff, 1 );
 8002986:	2101      	movs	r1, #1
 8002988:	4833      	ldr	r0, [pc, #204]	; (8002a58 <setup+0x298>)
 800298a:	f000 faa1 	bl	8002ed0 <data_tuningUD>
					break;
 800298e:	bf00      	nop
			break;
 8002990:	e247      	b.n	8002e22 <setup+0x662>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x6:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002992:	492a      	ldr	r1, [pc, #168]	; (8002a3c <setup+0x27c>)
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe fc8d 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			data_tuningLR( &pattern_gain, 1 );
 800299a:	2101      	movs	r1, #1
 800299c:	482b      	ldr	r0, [pc, #172]	; (8002a4c <setup+0x28c>)
 800299e:	f000 fb1b 	bl	8002fd8 <data_tuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <setup+0x28c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d103      	bne.n	80029b2 <setup+0x1f2>
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <setup+0x28c>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e006      	b.n	80029c0 <setup+0x200>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <setup+0x28c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <setup+0x200>
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <setup+0x28c>)
 80029bc:	2203      	movs	r2, #3
 80029be:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <setup+0x28c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	f000 8082 	beq.w	8002ace <setup+0x30e>
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	f300 822b 	bgt.w	8002e26 <setup+0x666>
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d002      	beq.n	80029da <setup+0x21a>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d051      	beq.n	8002a7c <setup+0x2bc>
					}
					
					data_tuningUD ( &kd2_buff, 1 );
					break;
			}
			break;
 80029d8:	e225      	b.n	8002e26 <setup+0x666>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <setup+0x290>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029e2:	d302      	bcc.n	80029ea <setup+0x22a>
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <setup+0x290>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <setup+0x290>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2bf9      	cmp	r3, #249	; 0xf9
 80029f0:	d809      	bhi.n	8002a06 <setup+0x246>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <setup+0x2b0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <setup+0x2b4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4917      	ldr	r1, [pc, #92]	; (8002a5c <setup+0x29c>)
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fe fc58 	bl	80012b4 <lcdRowPrintf>
 8002a04:	e00d      	b.n	8002a22 <setup+0x262>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <setup+0x2b8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <setup+0x2b0>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <setup+0x2b4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4912      	ldr	r1, [pc, #72]	; (8002a64 <setup+0x2a4>)
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7fe fc49 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &kp2_buff, 1 );
 8002a22:	2101      	movs	r1, #1
 8002a24:	4814      	ldr	r0, [pc, #80]	; (8002a78 <setup+0x2b8>)
 8002a26:	f000 fa53 	bl	8002ed0 <data_tuningUD>
					break;
 8002a2a:	e079      	b.n	8002b20 <setup+0x360>
 8002a2c:	20000632 	.word	0x20000632
 8002a30:	20000620 	.word	0x20000620
 8002a34:	0800cfb4 	.word	0x0800cfb4
 8002a38:	0800cfc0 	.word	0x0800cfc0
 8002a3c:	0800cfcc 	.word	0x0800cfcc
 8002a40:	20000630 	.word	0x20000630
 8002a44:	20000292 	.word	0x20000292
 8002a48:	20000498 	.word	0x20000498
 8002a4c:	20000005 	.word	0x20000005
 8002a50:	20000622 	.word	0x20000622
 8002a54:	200002a0 	.word	0x200002a0
 8002a58:	20000003 	.word	0x20000003
 8002a5c:	0800cfd8 	.word	0x0800cfd8
 8002a60:	20000002 	.word	0x20000002
 8002a64:	0800cfe4 	.word	0x0800cfe4
 8002a68:	0800cff0 	.word	0x0800cff0
 8002a6c:	0800cffc 	.word	0x0800cffc
 8002a70:	2000000d 	.word	0x2000000d
 8002a74:	20000669 	.word	0x20000669
 8002a78:	2000000c 	.word	0x2000000c
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002a7c:	4ba8      	ldr	r3, [pc, #672]	; (8002d20 <setup+0x560>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a84:	d302      	bcc.n	8002a8c <setup+0x2cc>
 8002a86:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <setup+0x560>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002a8c:	4ba4      	ldr	r3, [pc, #656]	; (8002d20 <setup+0x560>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2bf9      	cmp	r3, #249	; 0xf9
 8002a92:	d809      	bhi.n	8002aa8 <setup+0x2e8>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <setup+0x564>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4ba3      	ldr	r3, [pc, #652]	; (8002d28 <setup+0x568>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	49a3      	ldr	r1, [pc, #652]	; (8002d2c <setup+0x56c>)
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe fc07 	bl	80012b4 <lcdRowPrintf>
 8002aa6:	e00d      	b.n	8002ac4 <setup+0x304>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8002aa8:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <setup+0x564>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <setup+0x570>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <setup+0x568>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	460b      	mov	r3, r1
 8002abc:	499d      	ldr	r1, [pc, #628]	; (8002d34 <setup+0x574>)
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7fe fbf8 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &ki2_buff, 1 );
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	489a      	ldr	r0, [pc, #616]	; (8002d30 <setup+0x570>)
 8002ac8:	f000 fa02 	bl	8002ed0 <data_tuningUD>
					break;
 8002acc:	e028      	b.n	8002b20 <setup+0x360>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <setup+0x560>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ad6:	d302      	bcc.n	8002ade <setup+0x31e>
 8002ad8:	4b91      	ldr	r3, [pc, #580]	; (8002d20 <setup+0x560>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002ade:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <setup+0x560>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	2bf9      	cmp	r3, #249	; 0xf9
 8002ae4:	d809      	bhi.n	8002afa <setup+0x33a>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <setup+0x564>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b90      	ldr	r3, [pc, #576]	; (8002d30 <setup+0x570>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4991      	ldr	r1, [pc, #580]	; (8002d38 <setup+0x578>)
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7fe fbde 	bl	80012b4 <lcdRowPrintf>
 8002af8:	e00d      	b.n	8002b16 <setup+0x356>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8002afa:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <setup+0x564>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <setup+0x570>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <setup+0x568>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4989      	ldr	r1, [pc, #548]	; (8002d34 <setup+0x574>)
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7fe fbcf 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &kd2_buff, 1 );
 8002b16:	2101      	movs	r1, #1
 8002b18:	4883      	ldr	r0, [pc, #524]	; (8002d28 <setup+0x568>)
 8002b1a:	f000 f9d9 	bl	8002ed0 <data_tuningUD>
					break;
 8002b1e:	bf00      	nop
			break;
 8002b20:	e181      	b.n	8002e26 <setup+0x666>
		// 	break;
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x9:
			data_tuningLR( &pattern_sensor, 1 );
 8002b22:	2101      	movs	r1, #1
 8002b24:	4885      	ldr	r0, [pc, #532]	; (8002d3c <setup+0x57c>)
 8002b26:	f000 fa57 	bl	8002fd8 <data_tuningLR>
			
			if ( pattern_sensor == 12 ) pattern_sensor = 1;
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <setup+0x57c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d103      	bne.n	8002b3a <setup+0x37a>
 8002b32:	4b82      	ldr	r3, [pc, #520]	; (8002d3c <setup+0x57c>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e006      	b.n	8002b48 <setup+0x388>
			else if ( pattern_sensor == 0 ) pattern_sensor = 11;
 8002b3a:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <setup+0x57c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <setup+0x388>
 8002b42:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <setup+0x57c>)
 8002b44:	220b      	movs	r2, #11
 8002b46:	701a      	strb	r2, [r3, #0]

			switch( pattern_sensor ) {
 8002b48:	4b7c      	ldr	r3, [pc, #496]	; (8002d3c <setup+0x57c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	2b0a      	cmp	r3, #10
 8002b50:	f200 816b 	bhi.w	8002e2a <setup+0x66a>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <setup+0x39c>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002bd1 	.word	0x08002bd1
 8002b64:	08002bef 	.word	0x08002bef
 8002b68:	08002c3f 	.word	0x08002c3f
 8002b6c:	08002c59 	.word	0x08002c59
 8002b70:	08002c81 	.word	0x08002c81
 8002b74:	08002ca9 	.word	0x08002ca9
 8002b78:	08002cd1 	.word	0x08002cd1
 8002b7c:	08002cf9 	.word	0x08002cf9
 8002b80:	08002da5 	.word	0x08002da5
 8002b84:	08002dcd 	.word	0x08002dcd
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 8002b88:	496d      	ldr	r1, [pc, #436]	; (8002d40 <setup+0x580>)
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fe fb92 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 8002b90:	496c      	ldr	r1, [pc, #432]	; (8002d44 <setup+0x584>)
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7fe fb8e 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <setup+0x588>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	f040 812f 	bne.w	8002e04 <setup+0x644>
						cnt_led = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 8002baa:	e00a      	b.n	8002bc2 <setup+0x402>
							ledOut( cnt_led );
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fe26 	bl	8001800 <ledOut>
							cnt_led++;
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 8002bba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002bbe:	f001 f999 	bl	8003ef4 <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b07      	cmp	r3, #7
 8002bc6:	d9f1      	bls.n	8002bac <setup+0x3ec>
						}
						ledOut( 0 );
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fe fe19 	bl	8001800 <ledOut>
					}
					break;
 8002bce:	e119      	b.n	8002e04 <setup+0x644>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <setup+0x58c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	495e      	ldr	r1, [pc, #376]	; (8002d50 <setup+0x590>)
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe fb6b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <setup+0x594>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	495c      	ldr	r1, [pc, #368]	; (8002d58 <setup+0x598>)
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fe fb64 	bl	80012b4 <lcdRowPrintf>
					break;
 8002bec:	e10b      	b.n	8002e06 <setup+0x646>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 8002bee:	495b      	ldr	r1, [pc, #364]	; (8002d5c <setup+0x59c>)
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fe fb5f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 8002bf6:	4b5a      	ldr	r3, [pc, #360]	; (8002d60 <setup+0x5a0>)
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4959      	ldr	r1, [pc, #356]	; (8002d64 <setup+0x5a4>)
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fe fb57 	bl	80012b4 <lcdRowPrintf>
					data_tuningUD ( &motorTestPwm, 100 );
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	4855      	ldr	r0, [pc, #340]	; (8002d60 <setup+0x5a0>)
 8002c0a:	f000 f961 	bl	8002ed0 <data_tuningUD>
					if ( motor_test == 1 ) {
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <setup+0x5a8>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10a      	bne.n	8002c2c <setup+0x46c>
						motorPwmOut(motorTestPwm,motorTestPwm);
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <setup+0x5a0>)
 8002c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <setup+0x5a0>)
 8002c1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fd25 	bl	8002674 <motorPwmOut>
 8002c2a:	e003      	b.n	8002c34 <setup+0x474>
					} else {
						motorPwmOut(0, 0);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7ff fd20 	bl	8002674 <motorPwmOut>
					}
					
					data_select( &motor_test, SW_PUSH );
 8002c34:	2102      	movs	r1, #2
 8002c36:	484c      	ldr	r0, [pc, #304]	; (8002d68 <setup+0x5a8>)
 8002c38:	f000 f914 	bl	8002e64 <data_select>
					break;
 8002c3c:	e0e3      	b.n	8002e06 <setup+0x646>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 8002c3e:	494b      	ldr	r1, [pc, #300]	; (8002d6c <setup+0x5ac>)
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fe fb37 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkersensor());
 8002c46:	f7ff fcbb 	bl	80025c0 <getMarkersensor>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4948      	ldr	r1, [pc, #288]	; (8002d70 <setup+0x5b0>)
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fe fb2f 	bl	80012b4 <lcdRowPrintf>
					break;
 8002c56:	e0d6      	b.n	8002e06 <setup+0x646>

				case 5:
					lcdRowPrintf(UPROW, "L1  %4d",lsensor[0]);
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <setup+0x5b4>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4946      	ldr	r1, [pc, #280]	; (8002d78 <setup+0x5b8>)
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fe fb27 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L2  %4d",lsensor[1]);
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <setup+0x5b4>)
 8002c68:	885b      	ldrh	r3, [r3, #2]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4943      	ldr	r1, [pc, #268]	; (8002d7c <setup+0x5bc>)
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fe fb20 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <setup+0x5c0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002c7e:	e0c2      	b.n	8002e06 <setup+0x646>

				case 6:
					lcdRowPrintf(UPROW, "L3  %4d",lsensor[2]);
 8002c80:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <setup+0x5b4>)
 8002c82:	889b      	ldrh	r3, [r3, #4]
 8002c84:	461a      	mov	r2, r3
 8002c86:	493f      	ldr	r1, [pc, #252]	; (8002d84 <setup+0x5c4>)
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe fb13 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L4  %4d",lsensor[3]);
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <setup+0x5b4>)
 8002c90:	88db      	ldrh	r3, [r3, #6]
 8002c92:	461a      	mov	r2, r3
 8002c94:	493c      	ldr	r1, [pc, #240]	; (8002d88 <setup+0x5c8>)
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fe fb0c 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002c9c:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <setup+0x5c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002ca6:	e0ae      	b.n	8002e06 <setup+0x646>

				case 7:
					lcdRowPrintf(UPROW, "L5  %4d",lsensor[4]);
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <setup+0x5b4>)
 8002caa:	891b      	ldrh	r3, [r3, #8]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4937      	ldr	r1, [pc, #220]	; (8002d8c <setup+0x5cc>)
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe faff 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L6  %4d",lsensor[5]);
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <setup+0x5b4>)
 8002cb8:	895b      	ldrh	r3, [r3, #10]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4934      	ldr	r1, [pc, #208]	; (8002d90 <setup+0x5d0>)
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7fe faf8 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <setup+0x5c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002cce:	e09a      	b.n	8002e06 <setup+0x646>
				
				case 8:
					lcdRowPrintf(UPROW, "R1  %4d",lsensor[11]);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <setup+0x5b4>)
 8002cd2:	8adb      	ldrh	r3, [r3, #22]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	492f      	ldr	r1, [pc, #188]	; (8002d94 <setup+0x5d4>)
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe faeb 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R2  %4d",lsensor[10]);
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <setup+0x5b4>)
 8002ce0:	8a9b      	ldrh	r3, [r3, #20]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	492c      	ldr	r1, [pc, #176]	; (8002d98 <setup+0x5d8>)
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7fe fae4 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <setup+0x5c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002cf6:	e086      	b.n	8002e06 <setup+0x646>

				case 9:
					lcdRowPrintf(UPROW, "R3  %4d",lsensor[9]);
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <setup+0x5b4>)
 8002cfa:	8a5b      	ldrh	r3, [r3, #18]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <setup+0x5dc>)
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fe fad7 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R4  %4d",lsensor[8]);
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <setup+0x5b4>)
 8002d08:	8a1b      	ldrh	r3, [r3, #16]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4924      	ldr	r1, [pc, #144]	; (8002da0 <setup+0x5e0>)
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7fe fad0 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <setup+0x5c0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002d1e:	e072      	b.n	8002e06 <setup+0x646>
 8002d20:	20000622 	.word	0x20000622
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	20000669 	.word	0x20000669
 8002d2c:	0800cff0 	.word	0x0800cff0
 8002d30:	2000000d 	.word	0x2000000d
 8002d34:	0800cfe4 	.word	0x0800cfe4
 8002d38:	0800cffc 	.word	0x0800cffc
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	0800d008 	.word	0x0800d008
 8002d44:	0800cfc0 	.word	0x0800cfc0
 8002d48:	20000631 	.word	0x20000631
 8002d4c:	20000238 	.word	0x20000238
 8002d50:	0800d014 	.word	0x0800d014
 8002d54:	20000240 	.word	0x20000240
 8002d58:	0800d01c 	.word	0x0800d01c
 8002d5c:	0800d024 	.word	0x0800d024
 8002d60:	20000006 	.word	0x20000006
 8002d64:	0800d030 	.word	0x0800d030
 8002d68:	2000062f 	.word	0x2000062f
 8002d6c:	0800d03c 	.word	0x0800d03c
 8002d70:	0800d048 	.word	0x0800d048
 8002d74:	20000278 	.word	0x20000278
 8002d78:	0800d054 	.word	0x0800d054
 8002d7c:	0800d05c 	.word	0x0800d05c
 8002d80:	20000498 	.word	0x20000498
 8002d84:	0800d064 	.word	0x0800d064
 8002d88:	0800d06c 	.word	0x0800d06c
 8002d8c:	0800d074 	.word	0x0800d074
 8002d90:	0800d07c 	.word	0x0800d07c
 8002d94:	0800d084 	.word	0x0800d084
 8002d98:	0800d08c 	.word	0x0800d08c
 8002d9c:	0800d094 	.word	0x0800d094
 8002da0:	0800d09c 	.word	0x0800d09c

				case 10:
					lcdRowPrintf(UPROW, "R5  %4d",lsensor[7]);
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <setup+0x674>)
 8002da6:	89db      	ldrh	r3, [r3, #14]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4923      	ldr	r1, [pc, #140]	; (8002e38 <setup+0x678>)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fa81 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R6  %4d",lsensor[6]);
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <setup+0x674>)
 8002db4:	899b      	ldrh	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4920      	ldr	r1, [pc, #128]	; (8002e3c <setup+0x67c>)
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7fe fa7a 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <setup+0x680>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002dca:	e01c      	b.n	8002e06 <setup+0x646>
				
				case 11:
					targetSpeed = 120;
 8002dcc:	491d      	ldr	r1, [pc, #116]	; (8002e44 <setup+0x684>)
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <setup+0x688>)
 8002dd4:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <setup+0x68c>)
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	461a      	mov	r2, r3
 8002de0:	491b      	ldr	r1, [pc, #108]	; (8002e50 <setup+0x690>)
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fe fa66 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",speedPwm);
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <setup+0x694>)
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4919      	ldr	r1, [pc, #100]	; (8002e58 <setup+0x698>)
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7fe fa5e 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <setup+0x680>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8002e02:	e000      	b.n	8002e06 <setup+0x646>
					break;
 8002e04:	bf00      	nop
			} // switch
			break;
 8002e06:	e010      	b.n	8002e2a <setup+0x66a>
		// case 0xd:
			
		// 	break;

	default:
		lcdRowPrintf(UPROW, "%#x     ", getSWrotary());
 8002e08:	f000 fcee 	bl	80037e8 <getSWrotary>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4912      	ldr	r1, [pc, #72]	; (8002e5c <setup+0x69c>)
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe fa4e 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 8002e18:	4911      	ldr	r1, [pc, #68]	; (8002e60 <setup+0x6a0>)
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7fe fa4a 	bl	80012b4 <lcdRowPrintf>
		break;
 8002e20:	e004      	b.n	8002e2c <setup+0x66c>
			break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <setup+0x66c>
			break;
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <setup+0x66c>
			break;
 8002e2a:	bf00      	nop
	} // switch
	// } // cntSW
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000278 	.word	0x20000278
 8002e38:	0800d0a4 	.word	0x0800d0a4
 8002e3c:	0800d0ac 	.word	0x0800d0ac
 8002e40:	20000498 	.word	0x20000498
 8002e44:	20000648 	.word	0x20000648
 8002e48:	405e0000 	.word	0x405e0000
 8002e4c:	20000292 	.word	0x20000292
 8002e50:	0800d0b4 	.word	0x0800d0b4
 8002e54:	20000640 	.word	0x20000640
 8002e58:	0800d0bc 	.word	0x0800d0bc
 8002e5c:	0800d0c4 	.word	0x0800d0c4
 8002e60:	0800d0d0 	.word	0x0800d0d0

08002e64 <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <data_select+0x64>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11d      	bne.n	8002eb6 <data_select+0x52>
		if ( *data == 1 && push == 0) {
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10a      	bne.n	8002e98 <data_select+0x34>
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <data_select+0x68>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <data_select+0x34>
			push = 1;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <data_select+0x68>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
			*data = 0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 8002e96:	e011      	b.n	8002ebc <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <data_select+0x58>
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <data_select+0x68>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <data_select+0x58>
			push = 1;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <data_select+0x68>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
			*data = 1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
}
 8002eb4:	e002      	b.n	8002ebc <data_select+0x58>
		push = 0;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <data_select+0x68>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000631 	.word	0x20000631
 8002ecc:	2000062e 	.word	0x2000062e

08002ed0 <data_tuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_tuningUD ( void *data, uint8_t add )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <data_tuningUD+0xf8>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	2b31      	cmp	r3, #49	; 0x31
 8002ee6:	d968      	bls.n	8002fba <data_tuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <data_tuningUD+0xfc>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d003      	beq.n	8002ef8 <data_tuningUD+0x28>
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <data_tuningUD+0xfc>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d155      	bne.n	8002fa4 <data_tuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <data_tuningUD+0x100>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <data_tuningUD+0x100>)
 8002f02:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <data_tuningUD+0xfc>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <data_tuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <data_tuningUD+0x100>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	2b13      	cmp	r3, #19
 8002f12:	d90b      	bls.n	8002f2c <data_tuningUD+0x5c>
					*data2 += add;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8002f2a:	e042      	b.n	8002fb2 <data_tuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <data_tuningUD+0x104>)
 8002f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <data_tuningUD+0xe2>
					pushUD = 1;
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <data_tuningUD+0x104>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b21a      	sxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8002f52:	e02e      	b.n	8002fb2 <data_tuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <data_tuningUD+0xfc>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d12a      	bne.n	8002fb2 <data_tuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <data_tuningUD+0x100>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2b13      	cmp	r3, #19
 8002f62:	d90b      	bls.n	8002f7c <data_tuningUD+0xac>
					*data2 -= add;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b21a      	sxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8002f7a:	e01a      	b.n	8002fb2 <data_tuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <data_tuningUD+0x104>)
 8002f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <data_tuningUD+0xe2>
					pushUD = 1;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <data_tuningUD+0x104>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8002fa2:	e006      	b.n	8002fb2 <data_tuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <data_tuningUD+0x104>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <data_tuningUD+0x100>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e000      	b.n	8002fb4 <data_tuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 8002fb2:	bf00      	nop
		}
		cntSetup2 = 0;
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <data_tuningUD+0xf8>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	801a      	strh	r2, [r3, #0]
	}
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000624 	.word	0x20000624
 8002fcc:	20000631 	.word	0x20000631
 8002fd0:	20000628 	.word	0x20000628
 8002fd4:	2000062d 	.word	0x2000062d

08002fd8 <data_tuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_tuningLR ( void *data, uint8_t add )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <data_tuningLR+0xf8>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b31      	cmp	r3, #49	; 0x31
 8002fee:	d968      	bls.n	80030c2 <data_tuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <data_tuningLR+0xfc>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d003      	beq.n	8003000 <data_tuningLR+0x28>
 8002ff8:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <data_tuningLR+0xfc>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d155      	bne.n	80030ac <data_tuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <data_tuningLR+0x100>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <data_tuningLR+0x100>)
 800300a:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <data_tuningLR+0xfc>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d123      	bne.n	800305c <data_tuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <data_tuningLR+0x100>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	2b13      	cmp	r3, #19
 800301a:	d90b      	bls.n	8003034 <data_tuningLR+0x5c>
					*data2 += add;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003022:	b29a      	uxth	r2, r3
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4413      	add	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	b21a      	sxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003032:	e042      	b.n	80030ba <data_tuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <data_tuningLR+0x104>)
 8003036:	f993 3000 	ldrsb.w	r3, [r3]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d13d      	bne.n	80030ba <data_tuningLR+0xe2>
					pushLR = 1;
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <data_tuningLR+0x104>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304a:	b29a      	uxth	r2, r3
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	b29b      	uxth	r3, r3
 8003050:	4413      	add	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	b21a      	sxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800305a:	e02e      	b.n	80030ba <data_tuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <data_tuningLR+0xfc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d12a      	bne.n	80030ba <data_tuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <data_tuningLR+0x100>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	2b13      	cmp	r3, #19
 800306a:	d90b      	bls.n	8003084 <data_tuningLR+0xac>
					*data2 -= add;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003072:	b29a      	uxth	r2, r3
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b29b      	uxth	r3, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	b21a      	sxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003082:	e01a      	b.n	80030ba <data_tuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <data_tuningLR+0x104>)
 8003086:	f993 3000 	ldrsb.w	r3, [r3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d115      	bne.n	80030ba <data_tuningLR+0xe2>
					pushLR = 1;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <data_tuningLR+0x104>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309a:	b29a      	uxth	r2, r3
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b21a      	sxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80030aa:	e006      	b.n	80030ba <data_tuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <data_tuningLR+0x104>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <data_tuningLR+0x100>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e000      	b.n	80030bc <data_tuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 80030ba:	bf00      	nop
		}
		cntSetup3 = 0;
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <data_tuningLR+0xf8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]
	}
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000626 	.word	0x20000626
 80030d4:	20000631 	.word	0x20000631
 80030d8:	2000062a 	.word	0x2000062a
 80030dc:	2000062c 	.word	0x2000062c

080030e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_MspInit+0x4c>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_MspInit+0x4c>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_MspInit+0x4c>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_MspInit+0x4c>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_MspInit+0x4c>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_MspInit+0x4c>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800311e:	2007      	movs	r0, #7
 8003120:	f001 fbf4 	bl	800490c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <HAL_ADC_MspInit+0x110>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d171      	bne.n	8003236 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <HAL_ADC_MspInit+0x114>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6453      	str	r3, [r2, #68]	; 0x44
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a33      	ldr	r2, [pc, #204]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_ADC_MspInit+0x114>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_ADC_MspInit+0x114>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SW_5xis_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80031a6:	233f      	movs	r3, #63	; 0x3f
 80031a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031aa:	2303      	movs	r3, #3
 80031ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4823      	ldr	r0, [pc, #140]	; (8003248 <HAL_ADC_MspInit+0x118>)
 80031ba:	f001 ff59 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80031be:	23ff      	movs	r3, #255	; 0xff
 80031c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	481e      	ldr	r0, [pc, #120]	; (800324c <HAL_ADC_MspInit+0x11c>)
 80031d2:	f001 ff4d 	bl	8005070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_ADC_MspInit+0x124>)
 80031da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_ADC_MspInit+0x120>)
 80031f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_ADC_MspInit+0x120>)
 8003200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003204:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_ADC_MspInit+0x120>)
 8003208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_ADC_MspInit+0x120>)
 8003210:	2200      	movs	r2, #0
 8003212:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_ADC_MspInit+0x120>)
 8003216:	2200      	movs	r2, #0
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <HAL_ADC_MspInit+0x120>)
 800321c:	f001 fbb8 	bl	8004990 <HAL_DMA_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003226:	f7ff f9c5 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <HAL_ADC_MspInit+0x120>)
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
 8003230:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_ADC_MspInit+0x120>)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003236:	bf00      	nop
 8003238:	3728      	adds	r7, #40	; 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40012000 	.word	0x40012000
 8003244:	40023800 	.word	0x40023800
 8003248:	40020800 	.word	0x40020800
 800324c:	40020000 	.word	0x40020000
 8003250:	200002ec 	.word	0x200002ec
 8003254:	40026410 	.word	0x40026410

08003258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_I2C_MspInit+0x84>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d12c      	bne.n	80032d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800329a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329c:	2312      	movs	r3, #18
 800329e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032a8:	2304      	movs	r3, #4
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4619      	mov	r1, r3
 80032b2:	480c      	ldr	r0, [pc, #48]	; (80032e4 <HAL_I2C_MspInit+0x8c>)
 80032b4:	f001 fedc 	bl	8005070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 80032c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032c6:	6413      	str	r3, [r2, #64]	; 0x40
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_I2C_MspInit+0x88>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032d4:	bf00      	nop
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40005400 	.word	0x40005400
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a42      	ldr	r2, [pc, #264]	; (8003410 <HAL_SPI_MspInit+0x128>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12d      	bne.n	8003366 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003342:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003354:	2305      	movs	r3, #5
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	482e      	ldr	r0, [pc, #184]	; (8003418 <HAL_SPI_MspInit+0x130>)
 8003360:	f001 fe86 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003364:	e04f      	b.n	8003406 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2c      	ldr	r2, [pc, #176]	; (800341c <HAL_SPI_MspInit+0x134>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d14a      	bne.n	8003406 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6313      	str	r3, [r2, #48]	; 0x30
 800339c:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6313      	str	r3, [r2, #48]	; 0x30
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_SPI_MspInit+0x12c>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c4:	2301      	movs	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80033d4:	2307      	movs	r3, #7
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d8:	f107 031c 	add.w	r3, r7, #28
 80033dc:	4619      	mov	r1, r3
 80033de:	480e      	ldr	r0, [pc, #56]	; (8003418 <HAL_SPI_MspInit+0x130>)
 80033e0:	f001 fe46 	bl	8005070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f2:	2303      	movs	r3, #3
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033f6:	2306      	movs	r3, #6
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	4619      	mov	r1, r3
 8003400:	4807      	ldr	r0, [pc, #28]	; (8003420 <HAL_SPI_MspInit+0x138>)
 8003402:	f001 fe35 	bl	8005070 <HAL_GPIO_Init>
}
 8003406:	bf00      	nop
 8003408:	3730      	adds	r7, #48	; 0x30
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40003800 	.word	0x40003800
 8003414:	40023800 	.word	0x40023800
 8003418:	40020400 	.word	0x40020400
 800341c:	40003c00 	.word	0x40003c00
 8003420:	40020800 	.word	0x40020800

08003424 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_TIM_PWM_MspInit+0x64>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003452:	e012      	b.n	800347a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d10d      	bne.n	800347a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_TIM_PWM_MspInit+0x68>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_TIM_Encoder_MspInit+0xe8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d12c      	bne.n	800350c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ea:	23c0      	movs	r3, #192	; 0xc0
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034fa:	2302      	movs	r3, #2
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fe:	f107 031c 	add.w	r3, r7, #28
 8003502:	4619      	mov	r1, r3
 8003504:	481e      	ldr	r0, [pc, #120]	; (8003580 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003506:	f001 fdb3 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800350a:	e030      	b.n	800356e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d12b      	bne.n	800356e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_TIM_Encoder_MspInit+0xec>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800355e:	2302      	movs	r3, #2
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003562:	f107 031c 	add.w	r3, r7, #28
 8003566:	4619      	mov	r1, r3
 8003568:	4807      	ldr	r0, [pc, #28]	; (8003588 <HAL_TIM_Encoder_MspInit+0xf8>)
 800356a:	f001 fd81 	bl	8005070 <HAL_GPIO_Init>
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40000400 	.word	0x40000400
 800357c:	40023800 	.word	0x40023800
 8003580:	40020800 	.word	0x40020800
 8003584:	40000800 	.word	0x40000800
 8003588:	40020400 	.word	0x40020400

0800358c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_TIM_Base_MspInit+0x48>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d115      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035a8:	f043 0310 	orr.w	r3, r3, #16
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	2036      	movs	r0, #54	; 0x36
 80035c0:	f001 f9af 	bl	8004922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035c4:	2036      	movs	r0, #54	; 0x36
 80035c6:	f001 f9c8 	bl	800495a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40001000 	.word	0x40001000
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_TIM_MspPostInit+0xb4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d11f      	bne.n	800363e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800361a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4818      	ldr	r0, [pc, #96]	; (8003698 <HAL_TIM_MspPostInit+0xbc>)
 8003638:	f001 fd1a 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800363c:	e023      	b.n	8003686 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003646:	d11e      	bne.n	8003686 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6313      	str	r3, [r2, #48]	; 0x30
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_TIM_MspPostInit+0xb8>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003676:	2301      	movs	r3, #1
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4619      	mov	r1, r3
 8003680:	4805      	ldr	r0, [pc, #20]	; (8003698 <HAL_TIM_MspPostInit+0xbc>)
 8003682:	f001 fcf5 	bl	8005070 <HAL_GPIO_Init>
}
 8003686:	bf00      	nop
 8003688:	3728      	adds	r7, #40	; 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	40023800 	.word	0x40023800
 8003698:	40020000 	.word	0x40020000

0800369c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_UART_MspInit+0xc0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d14a      	bne.n	8003754 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a26      	ldr	r2, [pc, #152]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_UART_MspInit+0xc4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_UART_MspInit+0xc4>)
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_UART_MspInit+0xc4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	2303      	movs	r3, #3
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003724:	2308      	movs	r3, #8
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4619      	mov	r1, r3
 800372e:	480d      	ldr	r0, [pc, #52]	; (8003764 <HAL_UART_MspInit+0xc8>)
 8003730:	f001 fc9e 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003734:	2304      	movs	r3, #4
 8003736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003740:	2303      	movs	r3, #3
 8003742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003744:	2308      	movs	r3, #8
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4619      	mov	r1, r3
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <HAL_UART_MspInit+0xcc>)
 8003750:	f001 fc8e 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40005000 	.word	0x40005000
 8003760:	40023800 	.word	0x40023800
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <NMI_Handler+0x4>

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <MemManage_Handler+0x4>

0800377e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <UsageFault_Handler+0x4>

0800378a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b8:	f000 fb7c 	bl	8003eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}

080037c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <TIM6_DAC_IRQHandler+0x10>)
 80037c6:	f003 fef5 	bl	80075b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000570 	.word	0x20000570

080037d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <DMA2_Stream0_IRQHandler+0x10>)
 80037da:	f001 f9df 	bl	8004b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200002ec 	.word	0x200002ec

080037e8 <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary() {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[13];
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <getSWrotary+0x19c>)
 80037f0:	8b5b      	ldrh	r3, [r3, #26]
 80037f2:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 80037f8:	88bb      	ldrh	r3, [r7, #4]
 80037fa:	f640 723c 	movw	r2, #3900	; 0xf3c
 80037fe:	4293      	cmp	r3, r2
 8003800:	d902      	bls.n	8003808 <getSWrotary+0x20>
 8003802:	2300      	movs	r3, #0
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	e0b6      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 8003808:	88bb      	ldrh	r3, [r7, #4]
 800380a:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 800380e:	d807      	bhi.n	8003820 <getSWrotary+0x38>
 8003810:	88bb      	ldrh	r3, [r7, #4]
 8003812:	f640 6245 	movw	r2, #3653	; 0xe45
 8003816:	4293      	cmp	r3, r2
 8003818:	d902      	bls.n	8003820 <getSWrotary+0x38>
 800381a:	2301      	movs	r3, #1
 800381c:	71fb      	strb	r3, [r7, #7]
 800381e:	e0aa      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 8003820:	88bb      	ldrh	r3, [r7, #4]
 8003822:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8003826:	d207      	bcs.n	8003838 <getSWrotary+0x50>
 8003828:	88bb      	ldrh	r3, [r7, #4]
 800382a:	f640 22ba 	movw	r2, #2746	; 0xaba
 800382e:	4293      	cmp	r3, r2
 8003830:	d902      	bls.n	8003838 <getSWrotary+0x50>
 8003832:	2302      	movs	r3, #2
 8003834:	71fb      	strb	r3, [r7, #7]
 8003836:	e09e      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 8003838:	88bb      	ldrh	r3, [r7, #4]
 800383a:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800383e:	d206      	bcs.n	800384e <getSWrotary+0x66>
 8003840:	88bb      	ldrh	r3, [r7, #4]
 8003842:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8003846:	d302      	bcc.n	800384e <getSWrotary+0x66>
 8003848:	2303      	movs	r3, #3
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	e093      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 800384e:	88bb      	ldrh	r3, [r7, #4]
 8003850:	f640 1237 	movw	r2, #2359	; 0x937
 8003854:	4293      	cmp	r3, r2
 8003856:	d807      	bhi.n	8003868 <getSWrotary+0x80>
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	f640 1206 	movw	r2, #2310	; 0x906
 800385e:	4293      	cmp	r3, r2
 8003860:	d902      	bls.n	8003868 <getSWrotary+0x80>
 8003862:	2304      	movs	r3, #4
 8003864:	71fb      	strb	r3, [r7, #7]
 8003866:	e086      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 8003868:	88bb      	ldrh	r3, [r7, #4]
 800386a:	f640 02a6 	movw	r2, #2214	; 0x8a6
 800386e:	4293      	cmp	r3, r2
 8003870:	d807      	bhi.n	8003882 <getSWrotary+0x9a>
 8003872:	88bb      	ldrh	r3, [r7, #4]
 8003874:	f640 0274 	movw	r2, #2164	; 0x874
 8003878:	4293      	cmp	r3, r2
 800387a:	d902      	bls.n	8003882 <getSWrotary+0x9a>
 800387c:	2305      	movs	r3, #5
 800387e:	71fb      	strb	r3, [r7, #7]
 8003880:	e079      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 8003882:	88bb      	ldrh	r3, [r7, #4]
 8003884:	f240 7242 	movw	r2, #1858	; 0x742
 8003888:	4293      	cmp	r3, r2
 800388a:	d807      	bhi.n	800389c <getSWrotary+0xb4>
 800388c:	88bb      	ldrh	r3, [r7, #4]
 800388e:	f240 7211 	movw	r2, #1809	; 0x711
 8003892:	4293      	cmp	r3, r2
 8003894:	d902      	bls.n	800389c <getSWrotary+0xb4>
 8003896:	2306      	movs	r3, #6
 8003898:	71fb      	strb	r3, [r7, #7]
 800389a:	e06c      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 800389c:	88bb      	ldrh	r3, [r7, #4]
 800389e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80038a2:	d207      	bcs.n	80038b4 <getSWrotary+0xcc>
 80038a4:	88bb      	ldrh	r3, [r7, #4]
 80038a6:	f240 62b6 	movw	r2, #1718	; 0x6b6
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d902      	bls.n	80038b4 <getSWrotary+0xcc>
 80038ae:	2307      	movs	r3, #7
 80038b0:	71fb      	strb	r3, [r7, #7]
 80038b2:	e060      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 80038b4:	88bb      	ldrh	r3, [r7, #4]
 80038b6:	f240 6259 	movw	r2, #1625	; 0x659
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d806      	bhi.n	80038cc <getSWrotary+0xe4>
 80038be:	88bb      	ldrh	r3, [r7, #4]
 80038c0:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 80038c4:	d902      	bls.n	80038cc <getSWrotary+0xe4>
 80038c6:	2308      	movs	r3, #8
 80038c8:	71fb      	strb	r3, [r7, #7]
 80038ca:	e054      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 80038cc:	88bb      	ldrh	r3, [r7, #4]
 80038ce:	f240 6213 	movw	r2, #1555	; 0x613
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d806      	bhi.n	80038e4 <getSWrotary+0xfc>
 80038d6:	88bb      	ldrh	r3, [r7, #4]
 80038d8:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80038dc:	d302      	bcc.n	80038e4 <getSWrotary+0xfc>
 80038de:	2309      	movs	r3, #9
 80038e0:	71fb      	strb	r3, [r7, #7]
 80038e2:	e048      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 80038e4:	88bb      	ldrh	r3, [r7, #4]
 80038e6:	f240 525c 	movw	r2, #1372	; 0x55c
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d807      	bhi.n	80038fe <getSWrotary+0x116>
 80038ee:	88bb      	ldrh	r3, [r7, #4]
 80038f0:	f240 522d 	movw	r2, #1325	; 0x52d
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d902      	bls.n	80038fe <getSWrotary+0x116>
 80038f8:	230a      	movs	r3, #10
 80038fa:	71fb      	strb	r3, [r7, #7]
 80038fc:	e03b      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	f240 522a 	movw	r2, #1322	; 0x52a
 8003904:	4293      	cmp	r3, r2
 8003906:	d807      	bhi.n	8003918 <getSWrotary+0x130>
 8003908:	88bb      	ldrh	r3, [r7, #4]
 800390a:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800390e:	4293      	cmp	r3, r2
 8003910:	d902      	bls.n	8003918 <getSWrotary+0x130>
 8003912:	230b      	movs	r3, #11
 8003914:	71fb      	strb	r3, [r7, #7]
 8003916:	e02e      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	f240 42ec 	movw	r2, #1260	; 0x4ec
 800391e:	4293      	cmp	r3, r2
 8003920:	d807      	bhi.n	8003932 <getSWrotary+0x14a>
 8003922:	88bb      	ldrh	r3, [r7, #4]
 8003924:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8003928:	4293      	cmp	r3, r2
 800392a:	d902      	bls.n	8003932 <getSWrotary+0x14a>
 800392c:	230c      	movs	r3, #12
 800392e:	71fb      	strb	r3, [r7, #7]
 8003930:	e021      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 8003932:	88bb      	ldrh	r3, [r7, #4]
 8003934:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 8003938:	d807      	bhi.n	800394a <getSWrotary+0x162>
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	f240 428a 	movw	r2, #1162	; 0x48a
 8003940:	4293      	cmp	r3, r2
 8003942:	d902      	bls.n	800394a <getSWrotary+0x162>
 8003944:	230d      	movs	r3, #13
 8003946:	71fb      	strb	r3, [r7, #7]
 8003948:	e015      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 800394a:	88bb      	ldrh	r3, [r7, #4]
 800394c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003950:	d207      	bcs.n	8003962 <getSWrotary+0x17a>
 8003952:	88bb      	ldrh	r3, [r7, #4]
 8003954:	f240 4222 	movw	r2, #1058	; 0x422
 8003958:	4293      	cmp	r3, r2
 800395a:	d902      	bls.n	8003962 <getSWrotary+0x17a>
 800395c:	230e      	movs	r3, #14
 800395e:	71fb      	strb	r3, [r7, #7]
 8003960:	e009      	b.n	8003976 <getSWrotary+0x18e>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8003968:	d805      	bhi.n	8003976 <getSWrotary+0x18e>
 800396a:	88bb      	ldrh	r3, [r7, #4]
 800396c:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8003970:	d901      	bls.n	8003976 <getSWrotary+0x18e>
 8003972:	230f      	movs	r3, #15
 8003974:	71fb      	strb	r3, [r7, #7]

	return ret;
 8003976:	79fb      	ldrb	r3, [r7, #7]
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	200005fc 	.word	0x200005fc

08003988 <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact() {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[12];
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <getSWtact+0xa0>)
 8003990:	8b1b      	ldrh	r3, [r3, #24]
 8003992:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = SW_NONE;
 8003994:	2300      	movs	r3, #0
 8003996:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	f640 723c 	movw	r2, #3900	; 0xf3c
 800399e:	4293      	cmp	r3, r2
 80039a0:	d902      	bls.n	80039a8 <getSWtact+0x20>
 80039a2:	2300      	movs	r3, #0
 80039a4:	71fb      	strb	r3, [r7, #7]
 80039a6:	e037      	b.n	8003a18 <getSWtact+0x90>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 80039a8:	88bb      	ldrh	r3, [r7, #4]
 80039aa:	f640 52d4 	movw	r2, #3540	; 0xdd4
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d807      	bhi.n	80039c2 <getSWtact+0x3a>
 80039b2:	88bb      	ldrh	r3, [r7, #4]
 80039b4:	f640 422c 	movw	r2, #3116	; 0xc2c
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d902      	bls.n	80039c2 <getSWtact+0x3a>
 80039bc:	2305      	movs	r3, #5
 80039be:	71fb      	strb	r3, [r7, #7]
 80039c0:	e02a      	b.n	8003a18 <getSWtact+0x90>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 80039c2:	88bb      	ldrh	r3, [r7, #4]
 80039c4:	f640 32dd 	movw	r2, #3037	; 0xbdd
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d807      	bhi.n	80039dc <getSWtact+0x54>
 80039cc:	88bb      	ldrh	r3, [r7, #4]
 80039ce:	f640 222b 	movw	r2, #2603	; 0xa2b
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d902      	bls.n	80039dc <getSWtact+0x54>
 80039d6:	2304      	movs	r3, #4
 80039d8:	71fb      	strb	r3, [r7, #7]
 80039da:	e01d      	b.n	8003a18 <getSWtact+0x90>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 80039dc:	88bb      	ldrh	r3, [r7, #4]
 80039de:	f640 1256 	movw	r2, #2390	; 0x956
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d807      	bhi.n	80039f6 <getSWtact+0x6e>
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	f240 729e 	movw	r2, #1950	; 0x79e
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d902      	bls.n	80039f6 <getSWtact+0x6e>
 80039f0:	2303      	movs	r3, #3
 80039f2:	71fb      	strb	r3, [r7, #7]
 80039f4:	e010      	b.n	8003a18 <getSWtact+0x90>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 80039f6:	88bb      	ldrh	r3, [r7, #4]
 80039f8:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80039fc:	d207      	bcs.n	8003a0e <getSWtact+0x86>
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d902      	bls.n	8003a0e <getSWtact+0x86>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	71fb      	strb	r3, [r7, #7]
 8003a0c:	e004      	b.n	8003a18 <getSWtact+0x90>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 8003a0e:	88bb      	ldrh	r3, [r7, #4]
 8003a10:	2b95      	cmp	r3, #149	; 0x95
 8003a12:	d801      	bhi.n	8003a18 <getSWtact+0x90>
 8003a14:	2301      	movs	r3, #1
 8003a16:	71fb      	strb	r3, [r7, #7]

	return ret;
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	200005fc 	.word	0x200005fc

08003a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
	return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_kill>:

int _kill(int pid, int sig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a46:	f004 fdc1 	bl	80085cc <__errno>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_exit>:

void _exit (int status)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ffe7 	bl	8003a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a6e:	e7fe      	b.n	8003a6e <_exit+0x12>

08003a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a82:	f3af 8000 	nop.w
 8003a86:	4601      	mov	r1, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbf0      	blt.n	8003a82 <_read+0x12>
	}

return len;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_close>:
	}
	return len;
}

int _close(int file)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_isatty>:

int _isatty(int file)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8003aea:	2301      	movs	r3, #1
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	return 0;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <_sbrk+0x5c>)
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <_sbrk+0x60>)
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <_sbrk+0x64>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <_sbrk+0x64>)
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <_sbrk+0x68>)
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <_sbrk+0x64>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d207      	bcs.n	8003b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b44:	f004 fd42 	bl	80085cc <__errno>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	220c      	movs	r2, #12
 8003b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	e009      	b.n	8003b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <_sbrk+0x64>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <_sbrk+0x64>)
 8003b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b66:	68fb      	ldr	r3, [r7, #12]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20020000 	.word	0x20020000
 8003b74:	00000400 	.word	0x00000400
 8003b78:	20000638 	.word	0x20000638
 8003b7c:	20000680 	.word	0x20000680

08003b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <SystemInit+0x20>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <SystemInit+0x20>)
 8003b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	cnt1++;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bb4:	6013      	str	r3, [r2, #0]
    cntSW++;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003bc0:	801a      	strh	r2, [r3, #0]
    cntSetup1++;
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003bcc:	801a      	strh	r2, [r3, #0]
    cntSetup2++;
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003bd8:	801a      	strh	r2, [r3, #0]
    cntSetup3++;
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003be4:	801a      	strh	r2, [r3, #0]

    // スイッチの入力を取得
    if (cntSW >= 100) {
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	2b63      	cmp	r3, #99	; 0x63
 8003bec:	d90e      	bls.n	8003c0c <HAL_TIM_PeriodElapsedCallback+0x68>
        swValTact = getSWtact();
 8003bee:	f7ff fecb 	bl	8003988 <getSWtact>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003bf8:	701a      	strb	r2, [r3, #0]
        swValRotary = getSWrotary();
 8003bfa:	f7ff fdf5 	bl	80037e8 <getSWrotary>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003c04:	701a      	strb	r2, [r3, #0]
        cntSW = 0;
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	801a      	strh	r2, [r3, #0]
    }

    // LCD
    lcdShowProcess();
 8003c0c:	f7fd fab6 	bl	800117c <lcdShowProcess>
    // Encoder
    getEncoder();
 8003c10:	f7fd fd68 	bl	80016e4 <getEncoder>
    // PWM
    motorControlTrace();
 8003c14:	f7fd fe88 	bl	8001928 <motorControlTrace>
    motorControlSpeed();
 8003c18:	f000 f812 	bl	8003c40 <motorControlSpeed>

 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	2000063c 	.word	0x2000063c
 8003c28:	20000634 	.word	0x20000634
 8003c2c:	20000622 	.word	0x20000622
 8003c30:	20000624 	.word	0x20000624
 8003c34:	20000626 	.word	0x20000626
 8003c38:	20000631 	.word	0x20000631
 8003c3c:	20000632 	.word	0x20000632

08003c40 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 8003c46:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <motorControlSpeed+0x158>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f7fc ffa2 	bl	8000b98 <__aeabi_d2iz>
 8003c54:	4603      	mov	r3, r0
 8003c56:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <motorControlSpeed+0x15c>)
 8003c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c5e:	61bb      	str	r3, [r7, #24]
									// 現在位置も10倍する

	// デモモードのときゲイン変更
	if ( demo ) {
 8003c60:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <motorControlSpeed+0x160>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00c      	beq.n	8003c82 <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 8003c68:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <motorControlSpeed+0x164>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <motorControlSpeed+0x168>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <motorControlSpeed+0x16c>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003c80:	e00b      	b.n	8003c9a <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 8003c82:	4b48      	ldr	r3, [pc, #288]	; (8003da4 <motorControlSpeed+0x164>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <motorControlSpeed+0x168>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8003c92:	4b46      	ldr	r3, [pc, #280]	; (8003dac <motorControlSpeed+0x16c>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 8003ca2:	69f8      	ldr	r0, [r7, #28]
 8003ca4:	f7fc fc5e 	bl	8000564 <__aeabi_i2d>
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <motorControlSpeed+0x170>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc ff2b 	bl	8000b08 <__aeabi_dcmpeq>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <motorControlSpeed+0x86>
 8003cb8:	493e      	ldr	r1, [pc, #248]	; (8003db4 <motorControlSpeed+0x174>)
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7fc fc4c 	bl	8000564 <__aeabi_i2d>
 8003ccc:	a330      	add	r3, pc, #192	; (adr r3, 8003d90 <motorControlSpeed+0x150>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fcb1 	bl	8000638 <__aeabi_dmul>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <motorControlSpeed+0x174>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f7fc faf2 	bl	80002cc <__adddf3>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4931      	ldr	r1, [pc, #196]	; (8003db4 <motorControlSpeed+0x174>)
 8003cee:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <motorControlSpeed+0x178>)
 8003cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;			// 比例
 8003d00:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 8003d0c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fc27 	bl	8000564 <__aeabi_i2d>
 8003d16:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <motorControlSpeed+0x174>)
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f7fc fc8c 	bl	8000638 <__aeabi_dmul>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc ff36 	bl	8000b98 <__aeabi_d2iz>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;			// 微分
 8003d30:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4413      	add	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	105b      	asrs	r3, r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d54:	dd02      	ble.n	8003d5c <motorControlSpeed+0x11c>
 8003d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003d62:	da01      	bge.n	8003d68 <motorControlSpeed+0x128>
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <motorControlSpeed+0x17c>)
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <motorControlSpeed+0x180>)
 8003d6e:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <motorControlSpeed+0x178>)
 8003d76:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 8003d78:	69f8      	ldr	r0, [r7, #28]
 8003d7a:	f7fc fbf3 	bl	8000564 <__aeabi_i2d>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	490b      	ldr	r1, [pc, #44]	; (8003db0 <motorControlSpeed+0x170>)
 8003d84:	e9c1 2300 	strd	r2, r3, [r1]
 8003d88:	bf00      	nop
 8003d8a:	3728      	adds	r7, #40	; 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d94:	3f50624d 	.word	0x3f50624d
 8003d98:	20000648 	.word	0x20000648
 8003d9c:	20000236 	.word	0x20000236
 8003da0:	20000668 	.word	0x20000668
 8003da4:	2000000c 	.word	0x2000000c
 8003da8:	2000000d 	.word	0x2000000d
 8003dac:	20000669 	.word	0x20000669
 8003db0:	20000658 	.word	0x20000658
 8003db4:	20000660 	.word	0x20000660
 8003db8:	20000650 	.word	0x20000650
 8003dbc:	fffffc18 	.word	0xfffffc18
 8003dc0:	20000640 	.word	0x20000640

08003dc4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dc4:	480c      	ldr	r0, [pc, #48]	; (8003df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dc6:	490d      	ldr	r1, [pc, #52]	; (8003dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dcc:	e002      	b.n	8003dd4 <LoopCopyDataInit>

08003dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dd2:	3304      	adds	r3, #4

08003dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dd8:	d3f9      	bcc.n	8003dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ddc:	4c0a      	ldr	r4, [pc, #40]	; (8003e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003de0:	e001      	b.n	8003de6 <LoopFillZerobss>

08003de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003de4:	3204      	adds	r2, #4

08003de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003de8:	d3fb      	bcc.n	8003de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dea:	f7ff fec9 	bl	8003b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dee:	f004 fbf3 	bl	80085d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003df2:	f7fd fe76 	bl	8001ae2 <main>
  bx  lr    
 8003df6:	4770      	bx	lr
  ldr r0, =_sdata
 8003df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dfc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003e00:	0800d5b4 	.word	0x0800d5b4
  ldr r2, =_sbss
 8003e04:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003e08:	20000680 	.word	0x20000680

08003e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e0c:	e7fe      	b.n	8003e0c <ADC_IRQHandler>
	...

08003e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_Init+0x40>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <HAL_Init+0x40>)
 8003e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_Init+0x40>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_Init+0x40>)
 8003e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_Init+0x40>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_Init+0x40>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e38:	2003      	movs	r0, #3
 8003e3a:	f000 fd67 	bl	800490c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f000 f808 	bl	8003e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e44:	f7ff f94c 	bl	80030e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00

08003e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_InitTick+0x54>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_InitTick+0x58>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd7f 	bl	8004976 <HAL_SYSTICK_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00e      	b.n	8003ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d80a      	bhi.n	8003e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	f000 fd47 	bl	8004922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e94:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <HAL_InitTick+0x5c>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000008 	.word	0x20000008
 8003eac:	20000014 	.word	0x20000014
 8003eb0:	20000010 	.word	0x20000010

08003eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_IncTick+0x20>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_IncTick+0x24>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <HAL_IncTick+0x24>)
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000014 	.word	0x20000014
 8003ed8:	2000066c 	.word	0x2000066c

08003edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return uwTick;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_GetTick+0x14>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000066c 	.word	0x2000066c

08003ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff ffee 	bl	8003edc <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d005      	beq.n	8003f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_Delay+0x44>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f1a:	bf00      	nop
 8003f1c:	f7ff ffde 	bl	8003edc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d8f7      	bhi.n	8003f1c <HAL_Delay+0x28>
  {
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000014 	.word	0x20000014

08003f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e033      	b.n	8003fba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff f8e8 	bl	8003130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d118      	bne.n	8003fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f82:	f023 0302 	bic.w	r3, r3, #2
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa6e 	bl	8004470 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8003faa:	e001      	b.n	8003fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_ADC_Start_DMA+0x1e>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e0e9      	b.n	80041b6 <HAL_ADC_Start_DMA+0x1f2>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d018      	beq.n	800402a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004008:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_ADC_Start_DMA+0x1fc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6d      	ldr	r2, [pc, #436]	; (80041c4 <HAL_ADC_Start_DMA+0x200>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0c9a      	lsrs	r2, r3, #18
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800401c:	e002      	b.n	8004024 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3b01      	subs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f9      	bne.n	800401e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d107      	bne.n	800404a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004048:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	f040 80a1 	bne.w	800419c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004084:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d106      	bne.n	80040a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f023 0206 	bic.w	r2, r3, #6
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
 80040a6:	e002      	b.n	80040ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040b6:	4b44      	ldr	r3, [pc, #272]	; (80041c8 <HAL_ADC_Start_DMA+0x204>)
 80040b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_ADC_Start_DMA+0x208>)
 80040c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_ADC_Start_DMA+0x20c>)
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_ADC_Start_DMA+0x210>)
 80040d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	334c      	adds	r3, #76	; 0x4c
 8004106:	4619      	mov	r1, r3
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f000 fcee 	bl	8004aec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2b00      	cmp	r3, #0
 800411a:	d12a      	bne.n	8004172 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2d      	ldr	r2, [pc, #180]	; (80041d8 <HAL_ADC_Start_DMA+0x214>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d015      	beq.n	8004152 <HAL_ADC_Start_DMA+0x18e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_ADC_Start_DMA+0x218>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d105      	bne.n	800413c <HAL_ADC_Start_DMA+0x178>
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_ADC_Start_DMA+0x204>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <HAL_ADC_Start_DMA+0x21c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d136      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_ADC_Start_DMA+0x204>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b00      	cmp	r3, #0
 8004150:	d130      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d129      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	e020      	b.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_ADC_Start_DMA+0x214>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d11b      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d114      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004198:	609a      	str	r2, [r3, #8]
 800419a:	e00b      	b.n	80041b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f043 0210 	orr.w	r2, r3, #16
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000008 	.word	0x20000008
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	40012300 	.word	0x40012300
 80041cc:	08004669 	.word	0x08004669
 80041d0:	08004723 	.word	0x08004723
 80041d4:	0800473f 	.word	0x0800473f
 80041d8:	40012000 	.word	0x40012000
 80041dc:	40012100 	.word	0x40012100
 80041e0:	40012200 	.word	0x40012200

080041e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x1c>
 8004224:	2302      	movs	r3, #2
 8004226:	e113      	b.n	8004450 <HAL_ADC_ConfigChannel+0x244>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b09      	cmp	r3, #9
 8004236:	d925      	bls.n	8004284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68d9      	ldr	r1, [r3, #12]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	3b1e      	subs	r3, #30
 800424e:	2207      	movs	r2, #7
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43da      	mvns	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	400a      	ands	r2, r1
 800425c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	4603      	mov	r3, r0
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4403      	add	r3, r0
 8004276:	3b1e      	subs	r3, #30
 8004278:	409a      	lsls	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e022      	b.n	80042ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6919      	ldr	r1, [r3, #16]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	2207      	movs	r2, #7
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	400a      	ands	r2, r1
 80042a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6919      	ldr	r1, [r3, #16]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4618      	mov	r0, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4403      	add	r3, r0
 80042c0:	409a      	lsls	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d824      	bhi.n	800431c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	3b05      	subs	r3, #5
 80042e4:	221f      	movs	r2, #31
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43da      	mvns	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	400a      	ands	r2, r1
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4618      	mov	r0, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	3b05      	subs	r3, #5
 800430e:	fa00 f203 	lsl.w	r2, r0, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
 800431a:	e04c      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b0c      	cmp	r3, #12
 8004322:	d824      	bhi.n	800436e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	3b23      	subs	r3, #35	; 0x23
 8004336:	221f      	movs	r2, #31
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43da      	mvns	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	400a      	ands	r2, r1
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	4618      	mov	r0, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	3b23      	subs	r3, #35	; 0x23
 8004360:	fa00 f203 	lsl.w	r2, r0, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
 800436c:	e023      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	3b41      	subs	r3, #65	; 0x41
 8004380:	221f      	movs	r2, #31
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	400a      	ands	r2, r1
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	4618      	mov	r0, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	3b41      	subs	r3, #65	; 0x41
 80043aa:	fa00 f203 	lsl.w	r2, r0, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_ADC_ConfigChannel+0x250>)
 80043b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_ADC_ConfigChannel+0x254>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10f      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x1d8>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d10b      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_ADC_ConfigChannel+0x254>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d12b      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x23a>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_ADC_ConfigChannel+0x1f4>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b11      	cmp	r3, #17
 80043fe:	d122      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a11      	ldr	r2, [pc, #68]	; (8004464 <HAL_ADC_ConfigChannel+0x258>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d111      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_ADC_ConfigChannel+0x25c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a11      	ldr	r2, [pc, #68]	; (800446c <HAL_ADC_ConfigChannel+0x260>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	0c9a      	lsrs	r2, r3, #18
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004438:	e002      	b.n	8004440 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	3b01      	subs	r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f9      	bne.n	800443a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012300 	.word	0x40012300
 8004460:	40012000 	.word	0x40012000
 8004464:	10000012 	.word	0x10000012
 8004468:	20000008 	.word	0x20000008
 800446c:	431bde83 	.word	0x431bde83

08004470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004478:	4b79      	ldr	r3, [pc, #484]	; (8004660 <ADC_Init+0x1f0>)
 800447a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	021a      	lsls	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	4a58      	ldr	r2, [pc, #352]	; (8004664 <ADC_Init+0x1f4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e00f      	b.n	800456e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800455c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800456c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0202 	bic.w	r2, r2, #2
 800457c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e1b      	ldrb	r3, [r3, #24]
 8004588:	005a      	lsls	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	3b01      	subs	r3, #1
 80045c8:	035a      	lsls	r2, r3, #13
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e007      	b.n	80045e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	3b01      	subs	r3, #1
 8004600:	051a      	lsls	r2, r3, #20
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004626:	025a      	lsls	r2, r3, #9
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	029a      	lsls	r2, r3, #10
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012300 	.word	0x40012300
 8004664:	0f000001 	.word	0x0f000001

08004668 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d13c      	bne.n	80046fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d12b      	bne.n	80046f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d127      	bne.n	80046f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d119      	bne.n	80046f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0220 	bic.w	r2, r2, #32
 80046ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0201 	orr.w	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7fd ff37 	bl	8002568 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046fa:	e00e      	b.n	800471a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fd75 	bl	80041f8 <HAL_ADC_ErrorCallback>
}
 800470e:	e004      	b.n	800471a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fd57 	bl	80041e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fd4a 	bl	80041f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <__NVIC_SetPriorityGrouping>:
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004788:	4013      	ands	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	60d3      	str	r3, [r2, #12]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_GetPriorityGrouping>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <__NVIC_GetPriorityGrouping+0x18>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 0307 	and.w	r3, r3, #7
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_EnableIRQ>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db0b      	blt.n	80047fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	4907      	ldr	r1, [pc, #28]	; (8004808 <__NVIC_EnableIRQ+0x38>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2001      	movs	r0, #1
 80047f2:	fa00 f202 	lsl.w	r2, r0, r2
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e100 	.word	0xe000e100

0800480c <__NVIC_SetPriority>:
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <NVIC_EncodePriority>:
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0307 	rsb	r3, r3, #7
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf28      	it	cs
 800487e:	2304      	movcs	r3, #4
 8004880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3304      	adds	r3, #4
 8004886:	2b06      	cmp	r3, #6
 8004888:	d902      	bls.n	8004890 <NVIC_EncodePriority+0x30>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3b03      	subs	r3, #3
 800488e:	e000      	b.n	8004892 <NVIC_EncodePriority+0x32>
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	401a      	ands	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a8:	f04f 31ff 	mov.w	r1, #4294967295
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	4313      	orrs	r3, r2
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <SysTick_Config>:
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d8:	d301      	bcc.n	80048de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048da:	2301      	movs	r3, #1
 80048dc:	e00f      	b.n	80048fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <SysTick_Config+0x40>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e6:	210f      	movs	r1, #15
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	f7ff ff8e 	bl	800480c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <SysTick_Config+0x40>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <SysTick_Config+0x40>)
 80048f8:	2207      	movs	r2, #7
 80048fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000e010 	.word	0xe000e010

0800490c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff29 	bl	800476c <__NVIC_SetPriorityGrouping>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004934:	f7ff ff3e 	bl	80047b4 <__NVIC_GetPriorityGrouping>
 8004938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f7ff ff8e 	bl	8004860 <NVIC_EncodePriority>
 8004944:	4602      	mov	r2, r0
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff5d 	bl	800480c <__NVIC_SetPriority>
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff31 	bl	80047d0 <__NVIC_EnableIRQ>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ffa2 	bl	80048c8 <SysTick_Config>
 8004984:	4603      	mov	r3, r0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800499c:	f7ff fa9e 	bl	8003edc <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e099      	b.n	8004ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049cc:	e00f      	b.n	80049ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ce:	f7ff fa85 	bl	8003edc <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d908      	bls.n	80049ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e078      	b.n	8004ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e8      	bne.n	80049ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <HAL_DMA_Init+0x158>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d107      	bne.n	8004a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	4313      	orrs	r3, r2
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d117      	bne.n	8004ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa6f 	bl	8004f78 <DMA_CheckFifoParam>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e016      	b.n	8004ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa26 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	223f      	movs	r2, #63	; 0x3f
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	f010803f 	.word	0xf010803f

08004aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_DMA_Start_IT+0x26>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e040      	b.n	8004b94 <HAL_DMA_Start_IT+0xa8>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d12f      	bne.n	8004b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f9b8 	bl	8004eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	223f      	movs	r2, #63	; 0x3f
 8004b46:	409a      	lsls	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0216 	orr.w	r2, r2, #22
 8004b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e005      	b.n	8004b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba8:	4b8e      	ldr	r3, [pc, #568]	; (8004de4 <HAL_DMA_IRQHandler+0x248>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a8e      	ldr	r2, [pc, #568]	; (8004de8 <HAL_DMA_IRQHandler+0x24c>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01a      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d012      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f043 0202 	orr.w	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2204      	movs	r2, #4
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2204      	movs	r2, #4
 8004c62:	409a      	lsls	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	2210      	movs	r2, #16
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d043      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d03c      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	2210      	movs	r2, #16
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d024      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
 8004cca:	e01f      	b.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e016      	b.n	8004d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d107      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0208 	bic.w	r2, r2, #8
 8004cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	2220      	movs	r2, #32
 8004d12:	409a      	lsls	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 808f 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8087 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	2220      	movs	r2, #32
 8004d34:	409a      	lsls	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d136      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0216 	bic.w	r2, r2, #22
 8004d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x1da>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0208 	bic.w	r2, r2, #8
 8004d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	223f      	movs	r2, #63	; 0x3f
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d07e      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
        }
        return;
 8004db2:	e079      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10d      	bne.n	8004dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	e02c      	b.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
 8004de2:	bf00      	nop
 8004de4:	20000008 	.word	0x20000008
 8004de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e01e      	b.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d032      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2205      	movs	r2, #5
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d307      	bcc.n	8004e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x2cc>
 8004e82:	e000      	b.n	8004e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
 8004ea6:	e000      	b.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ea8:	bf00      	nop
    }
  }
}
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d108      	bne.n	8004ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eee:	e007      	b.n	8004f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	3b10      	subs	r3, #16
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <DMA_CalcBaseAndBitshift+0x64>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <DMA_CalcBaseAndBitshift+0x68>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d909      	bls.n	8004f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f4c:	e007      	b.n	8004f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	aaaaaaab 	.word	0xaaaaaaab
 8004f74:	0800d0f4 	.word	0x0800d0f4

08004f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11f      	bne.n	8004fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d856      	bhi.n	8005046 <DMA_CheckFifoParam+0xce>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <DMA_CheckFifoParam+0x28>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fc3 	.word	0x08004fc3
 8004fa8:	08004fb1 	.word	0x08004fb1
 8004fac:	08005047 	.word	0x08005047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d046      	beq.n	800504a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc0:	e043      	b.n	800504a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fca:	d140      	bne.n	800504e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd0:	e03d      	b.n	800504e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fda:	d121      	bne.n	8005020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d837      	bhi.n	8005052 <DMA_CheckFifoParam+0xda>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <DMA_CheckFifoParam+0x70>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08004fff 	.word	0x08004fff
 8004ff0:	08004ff9 	.word	0x08004ff9
 8004ff4:	08005011 	.word	0x08005011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e030      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d025      	beq.n	8005056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e022      	b.n	8005056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005018:	d11f      	bne.n	800505a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800501e:	e01c      	b.n	800505a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d903      	bls.n	800502e <DMA_CheckFifoParam+0xb6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d003      	beq.n	8005034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800502c:	e018      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e015      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e00b      	b.n	800505e <DMA_CheckFifoParam+0xe6>
      break;
 8005046:	bf00      	nop
 8005048:	e00a      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e008      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e006      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005052:	bf00      	nop
 8005054:	e004      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;   
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800505e:	bf00      	nop
    }
  } 
  
  return status; 
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e165      	b.n	8005358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800508c:	2201      	movs	r2, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f040 8154 	bne.w	8005352 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d005      	beq.n	80050c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d130      	bne.n	8005124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2203      	movs	r2, #3
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0201 	and.w	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b03      	cmp	r3, #3
 800512e:	d017      	beq.n	8005160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d123      	bne.n	80051b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	220f      	movs	r2, #15
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	08da      	lsrs	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3208      	adds	r2, #8
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0203 	and.w	r2, r3, #3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80ae 	beq.w	8005352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b5d      	ldr	r3, [pc, #372]	; (8005370 <HAL_GPIO_Init+0x300>)
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	4a5c      	ldr	r2, [pc, #368]	; (8005370 <HAL_GPIO_Init+0x300>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005204:	6453      	str	r3, [r2, #68]	; 0x44
 8005206:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <HAL_GPIO_Init+0x300>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005212:	4a58      	ldr	r2, [pc, #352]	; (8005374 <HAL_GPIO_Init+0x304>)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a4f      	ldr	r2, [pc, #316]	; (8005378 <HAL_GPIO_Init+0x308>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d025      	beq.n	800528a <HAL_GPIO_Init+0x21a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4e      	ldr	r2, [pc, #312]	; (800537c <HAL_GPIO_Init+0x30c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01f      	beq.n	8005286 <HAL_GPIO_Init+0x216>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a4d      	ldr	r2, [pc, #308]	; (8005380 <HAL_GPIO_Init+0x310>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d019      	beq.n	8005282 <HAL_GPIO_Init+0x212>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a4c      	ldr	r2, [pc, #304]	; (8005384 <HAL_GPIO_Init+0x314>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_GPIO_Init+0x20e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <HAL_GPIO_Init+0x318>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00d      	beq.n	800527a <HAL_GPIO_Init+0x20a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_GPIO_Init+0x31c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <HAL_GPIO_Init+0x206>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_GPIO_Init+0x320>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_GPIO_Init+0x202>
 800526e:	2306      	movs	r3, #6
 8005270:	e00c      	b.n	800528c <HAL_GPIO_Init+0x21c>
 8005272:	2307      	movs	r3, #7
 8005274:	e00a      	b.n	800528c <HAL_GPIO_Init+0x21c>
 8005276:	2305      	movs	r3, #5
 8005278:	e008      	b.n	800528c <HAL_GPIO_Init+0x21c>
 800527a:	2304      	movs	r3, #4
 800527c:	e006      	b.n	800528c <HAL_GPIO_Init+0x21c>
 800527e:	2303      	movs	r3, #3
 8005280:	e004      	b.n	800528c <HAL_GPIO_Init+0x21c>
 8005282:	2302      	movs	r3, #2
 8005284:	e002      	b.n	800528c <HAL_GPIO_Init+0x21c>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_GPIO_Init+0x21c>
 800528a:	2300      	movs	r3, #0
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	f002 0203 	and.w	r2, r2, #3
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	4093      	lsls	r3, r2
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800529c:	4935      	ldr	r1, [pc, #212]	; (8005374 <HAL_GPIO_Init+0x304>)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	3302      	adds	r3, #2
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052aa:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <HAL_GPIO_Init+0x324>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ce:	4a31      	ldr	r2, [pc, #196]	; (8005394 <HAL_GPIO_Init+0x324>)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <HAL_GPIO_Init+0x324>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052f8:	4a26      	ldr	r2, [pc, #152]	; (8005394 <HAL_GPIO_Init+0x324>)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052fe:	4b25      	ldr	r3, [pc, #148]	; (8005394 <HAL_GPIO_Init+0x324>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <HAL_GPIO_Init+0x324>)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <HAL_GPIO_Init+0x324>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800534c:	4a11      	ldr	r2, [pc, #68]	; (8005394 <HAL_GPIO_Init+0x324>)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3301      	adds	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b0f      	cmp	r3, #15
 800535c:	f67f ae96 	bls.w	800508c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800
 8005374:	40013800 	.word	0x40013800
 8005378:	40020000 	.word	0x40020000
 800537c:	40020400 	.word	0x40020400
 8005380:	40020800 	.word	0x40020800
 8005384:	40020c00 	.word	0x40020c00
 8005388:	40021000 	.word	0x40021000
 800538c:	40021400 	.word	0x40021400
 8005390:	40021800 	.word	0x40021800
 8005394:	40013c00 	.word	0x40013c00

08005398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	887b      	ldrh	r3, [r7, #2]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e001      	b.n	80053ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
 80053d4:	4613      	mov	r3, r2
 80053d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d8:	787b      	ldrb	r3, [r7, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053e4:	e003      	b.n	80053ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	041a      	lsls	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e12b      	b.n	8005666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fd ff18 	bl	8003258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005460:	f001 f8a4 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 8005464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4a81      	ldr	r2, [pc, #516]	; (8005670 <HAL_I2C_Init+0x274>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d807      	bhi.n	8005480 <HAL_I2C_Init+0x84>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a80      	ldr	r2, [pc, #512]	; (8005674 <HAL_I2C_Init+0x278>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e006      	b.n	800548e <HAL_I2C_Init+0x92>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a7d      	ldr	r2, [pc, #500]	; (8005678 <HAL_I2C_Init+0x27c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	bf94      	ite	ls
 8005488:	2301      	movls	r3, #1
 800548a:	2300      	movhi	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0e7      	b.n	8005666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a78      	ldr	r2, [pc, #480]	; (800567c <HAL_I2C_Init+0x280>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0c9b      	lsrs	r3, r3, #18
 80054a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a6a      	ldr	r2, [pc, #424]	; (8005670 <HAL_I2C_Init+0x274>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d802      	bhi.n	80054d0 <HAL_I2C_Init+0xd4>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3301      	adds	r3, #1
 80054ce:	e009      	b.n	80054e4 <HAL_I2C_Init+0xe8>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a69      	ldr	r2, [pc, #420]	; (8005680 <HAL_I2C_Init+0x284>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	3301      	adds	r3, #1
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	495c      	ldr	r1, [pc, #368]	; (8005670 <HAL_I2C_Init+0x274>)
 8005500:	428b      	cmp	r3, r1
 8005502:	d819      	bhi.n	8005538 <HAL_I2C_Init+0x13c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1e59      	subs	r1, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005518:	400b      	ands	r3, r1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_I2C_Init+0x138>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e59      	subs	r1, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fbb1 f3f3 	udiv	r3, r1, r3
 800552c:	3301      	adds	r3, #1
 800552e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005532:	e051      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005534:	2304      	movs	r3, #4
 8005536:	e04f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d111      	bne.n	8005564 <HAL_I2C_Init+0x168>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e012      	b.n	800558a <HAL_I2C_Init+0x18e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	0099      	lsls	r1, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x196>
 800558e:	2301      	movs	r3, #1
 8005590:	e022      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10e      	bne.n	80055b8 <HAL_I2C_Init+0x1bc>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e58      	subs	r0, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	440b      	add	r3, r1
 80055a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b6:	e00f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1e58      	subs	r0, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	0099      	lsls	r1, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	6809      	ldr	r1, [r1, #0]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6911      	ldr	r1, [r2, #16]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68d2      	ldr	r2, [r2, #12]
 8005612:	4311      	orrs	r1, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	430b      	orrs	r3, r1
 800561a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	000186a0 	.word	0x000186a0
 8005674:	001e847f 	.word	0x001e847f
 8005678:	003d08ff 	.word	0x003d08ff
 800567c:	431bde83 	.word	0x431bde83
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	817b      	strh	r3, [r7, #10]
 8005694:	4613      	mov	r3, r2
 8005696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7fe fc20 	bl	8003edc <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f040 80e0 	bne.w	800586c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	2201      	movs	r2, #1
 80056b4:	4970      	ldr	r1, [pc, #448]	; (8005878 <HAL_I2C_Master_Transmit+0x1f4>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fc58 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0d3      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_I2C_Master_Transmit+0x50>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0cc      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d007      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2210      	movs	r2, #16
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	893a      	ldrh	r2, [r7, #8]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_I2C_Master_Transmit+0x1f8>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fac2 	bl	8005ccc <I2C_MasterRequestWrite>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e08d      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005768:	e066      	b.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fcd2 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e06b      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_I2C_Master_Transmit+0x188>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	6a39      	ldr	r1, [r7, #32]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fcc2 	bl	800619a <I2C_WaitOnBTFFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01a      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d194      	bne.n	800576a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	00100002 	.word	0x00100002
 800587c:	ffff0000 	.word	0xffff0000

08005880 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	461a      	mov	r2, r3
 800588c:	460b      	mov	r3, r1
 800588e:	817b      	strh	r3, [r7, #10]
 8005890:	4613      	mov	r3, r2
 8005892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005894:	f7fe fb22 	bl	8003edc <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	f040 820b 	bne.w	8005cbe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2319      	movs	r3, #25
 80058ae:	2201      	movs	r2, #1
 80058b0:	497c      	ldr	r1, [pc, #496]	; (8005aa4 <HAL_I2C_Master_Receive+0x224>)
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fb5a 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	e1fe      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_I2C_Master_Receive+0x50>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e1f7      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d007      	beq.n	80058f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2222      	movs	r2, #34	; 0x22
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2210      	movs	r2, #16
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	893a      	ldrh	r2, [r7, #8]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a5c      	ldr	r2, [pc, #368]	; (8005aa8 <HAL_I2C_Master_Receive+0x228>)
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005938:	8979      	ldrh	r1, [r7, #10]
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fa46 	bl	8005dd0 <I2C_MasterRequestRead>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e1b8      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e18c      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	2b01      	cmp	r3, #1
 8005984:	d11b      	bne.n	80059be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e16c      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d11b      	bne.n	80059fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	e14c      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a24:	e138      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	f200 80f1 	bhi.w	8005c12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d123      	bne.n	8005a80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fbed 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e139      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a7e:	e10b      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d14e      	bne.n	8005b26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4906      	ldr	r1, [pc, #24]	; (8005aac <HAL_I2C_Master_Receive+0x22c>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fa6a 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e10e      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
 8005aa2:	bf00      	nop
 8005aa4:	00100002 	.word	0x00100002
 8005aa8:	ffff0000 	.word	0xffff0000
 8005aac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b24:	e0b8      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4966      	ldr	r1, [pc, #408]	; (8005cc8 <HAL_I2C_Master_Receive+0x448>)
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fa1b 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0bf      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	2200      	movs	r2, #0
 8005b8a:	494f      	ldr	r1, [pc, #316]	; (8005cc8 <HAL_I2C_Master_Receive+0x448>)
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f9ed 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e091      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c10:	e042      	b.n	8005c98 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fb00 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e04c      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d118      	bne.n	8005c98 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f aec2 	bne.w	8005a26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
  }
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3728      	adds	r7, #40	; 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	00010004 	.word	0x00010004

08005ccc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d006      	beq.n	8005cf6 <I2C_MasterRequestWrite+0x2a>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d003      	beq.n	8005cf6 <I2C_MasterRequestWrite+0x2a>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf4:	d108      	bne.n	8005d08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e00b      	b.n	8005d20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	2b12      	cmp	r3, #18
 8005d0e:	d107      	bne.n	8005d20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f91d 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00d      	beq.n	8005d54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d46:	d103      	bne.n	8005d50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e035      	b.n	8005dc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5c:	d108      	bne.n	8005d70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d5e:	897b      	ldrh	r3, [r7, #10]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	e01b      	b.n	8005da8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d70:	897b      	ldrh	r3, [r7, #10]
 8005d72:	11db      	asrs	r3, r3, #7
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f063 030f 	orn	r3, r3, #15
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	490e      	ldr	r1, [pc, #56]	; (8005dc8 <I2C_MasterRequestWrite+0xfc>)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f943 	bl	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e010      	b.n	8005dc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4907      	ldr	r1, [pc, #28]	; (8005dcc <I2C_MasterRequestWrite+0x100>)
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f933 	bl	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	00010008 	.word	0x00010008
 8005dcc:	00010002 	.word	0x00010002

08005dd0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005df4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d006      	beq.n	8005e0a <I2C_MasterRequestRead+0x3a>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d003      	beq.n	8005e0a <I2C_MasterRequestRead+0x3a>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e08:	d108      	bne.n	8005e1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e00b      	b.n	8005e34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	2b11      	cmp	r3, #17
 8005e22:	d107      	bne.n	8005e34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f893 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d103      	bne.n	8005e64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e079      	b.n	8005f5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e70:	d108      	bne.n	8005e84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]
 8005e82:	e05f      	b.n	8005f44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e84:	897b      	ldrh	r3, [r7, #10]
 8005e86:	11db      	asrs	r3, r3, #7
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f063 030f 	orn	r3, r3, #15
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4930      	ldr	r1, [pc, #192]	; (8005f64 <I2C_MasterRequestRead+0x194>)
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f8b9 	bl	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e054      	b.n	8005f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eb2:	897b      	ldrh	r3, [r7, #10]
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4929      	ldr	r1, [pc, #164]	; (8005f68 <I2C_MasterRequestRead+0x198>)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f8a9 	bl	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e044      	b.n	8005f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f831 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1e:	d103      	bne.n	8005f28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e017      	b.n	8005f5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f2c:	897b      	ldrh	r3, [r7, #10]
 8005f2e:	11db      	asrs	r3, r3, #7
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 0306 	and.w	r3, r3, #6
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f063 030e 	orn	r3, r3, #14
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4907      	ldr	r1, [pc, #28]	; (8005f68 <I2C_MasterRequestRead+0x198>)
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f865 	bl	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	00010008 	.word	0x00010008
 8005f68:	00010002 	.word	0x00010002

08005f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f7c:	e025      	b.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d021      	beq.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fd ffa9 	bl	8003edc <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d116      	bne.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e023      	b.n	8006012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d10d      	bne.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	e00c      	b.n	800600a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf0c      	ite	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	2300      	movne	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	429a      	cmp	r2, r3
 800600e:	d0b6      	beq.n	8005f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006028:	e051      	b.n	80060ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006038:	d123      	bne.n	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f043 0204 	orr.w	r2, r3, #4
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e046      	b.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d021      	beq.n	80060ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608a:	f7fd ff27 	bl	8003edc <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d116      	bne.n	80060ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e020      	b.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10c      	bne.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	43da      	mvns	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4013      	ands	r3, r2
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e00b      	b.n	800610a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	43da      	mvns	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4013      	ands	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d18d      	bne.n	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006124:	e02d      	b.n	8006182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f8ce 	bl	80062c8 <I2C_IsAcknowledgeFailed>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e02d      	b.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d021      	beq.n	8006182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fd fecd 	bl	8003edc <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d116      	bne.n	8006182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e007      	b.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d1ca      	bne.n	8006126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061a6:	e02d      	b.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f88d 	bl	80062c8 <I2C_IsAcknowledgeFailed>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e02d      	b.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d021      	beq.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c0:	f7fd fe8c 	bl	8003edc <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d302      	bcc.n	80061d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d116      	bne.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e007      	b.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d1ca      	bne.n	80061a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006228:	e042      	b.n	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b10      	cmp	r3, #16
 8006236:	d119      	bne.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0210 	mvn.w	r2, #16
 8006240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e029      	b.n	80062c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626c:	f7fd fe36 	bl	8003edc <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d116      	bne.n	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e007      	b.n	80062c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d1b5      	bne.n	800622a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062de:	d11b      	bne.n	8006318 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	f043 0204 	orr.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006332:	2300      	movs	r3, #0
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	6413      	str	r3, [r2, #64]	; 0x40
 8006342:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_PWREx_EnableOverDrive+0x94>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006354:	f7fd fdc2 	bl	8003edc <HAL_GetTick>
 8006358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800635a:	e009      	b.n	8006370 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800635c:	f7fd fdbe 	bl	8003edc <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800636a:	d901      	bls.n	8006370 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e01f      	b.n	80063b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006370:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637c:	d1ee      	bne.n	800635c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006384:	f7fd fdaa 	bl	8003edc <HAL_GetTick>
 8006388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800638a:	e009      	b.n	80063a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800638c:	f7fd fda6 	bl	8003edc <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800639a:	d901      	bls.n	80063a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e007      	b.n	80063b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ac:	d1ee      	bne.n	800638c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40023800 	.word	0x40023800
 80063bc:	420e0040 	.word	0x420e0040
 80063c0:	40007000 	.word	0x40007000
 80063c4:	420e0044 	.word	0x420e0044

080063c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0cc      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063dc:	4b68      	ldr	r3, [pc, #416]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d90c      	bls.n	8006404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b65      	ldr	r3, [pc, #404]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b63      	ldr	r3, [pc, #396]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0b8      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800641c:	4b59      	ldr	r3, [pc, #356]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4a58      	ldr	r2, [pc, #352]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006434:	4b53      	ldr	r3, [pc, #332]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a52      	ldr	r2, [pc, #328]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800643e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006440:	4b50      	ldr	r3, [pc, #320]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	494d      	ldr	r1, [pc, #308]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d044      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d119      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e07f      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d003      	beq.n	8006486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006482:	2b03      	cmp	r3, #3
 8006484:	d107      	bne.n	8006496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006486:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e06f      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006496:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e067      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064a6:	4b37      	ldr	r3, [pc, #220]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f023 0203 	bic.w	r2, r3, #3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4934      	ldr	r1, [pc, #208]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064b8:	f7fd fd10 	bl	8003edc <HAL_GetTick>
 80064bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064be:	e00a      	b.n	80064d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c0:	f7fd fd0c 	bl	8003edc <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e04f      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 020c 	and.w	r2, r3, #12
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d1eb      	bne.n	80064c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064e8:	4b25      	ldr	r3, [pc, #148]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d20c      	bcs.n	8006510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f6:	4b22      	ldr	r3, [pc, #136]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fe:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_RCC_ClockConfig+0x1b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e032      	b.n	8006576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800651c:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4916      	ldr	r1, [pc, #88]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	490e      	ldr	r1, [pc, #56]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800654e:	f000 f855 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8006552:	4602      	mov	r2, r0
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	490a      	ldr	r1, [pc, #40]	; (8006588 <HAL_RCC_ClockConfig+0x1c0>)
 8006560:	5ccb      	ldrb	r3, [r1, r3]
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_RCC_ClockConfig+0x1c8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fd fc70 	bl	8003e54 <HAL_InitTick>

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40023c00 	.word	0x40023c00
 8006584:	40023800 	.word	0x40023800
 8006588:	0800d0dc 	.word	0x0800d0dc
 800658c:	20000008 	.word	0x20000008
 8006590:	20000010 	.word	0x20000010

08006594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800659a:	681b      	ldr	r3, [r3, #0]
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000008 	.word	0x20000008

080065ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065b0:	f7ff fff0 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	0a9b      	lsrs	r3, r3, #10
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4903      	ldr	r1, [pc, #12]	; (80065d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	0800d0ec 	.word	0x0800d0ec

080065d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065d8:	f7ff ffdc 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0b5b      	lsrs	r3, r3, #13
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4903      	ldr	r1, [pc, #12]	; (80065f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40023800 	.word	0x40023800
 80065f8:	0800d0ec 	.word	0x0800d0ec

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b0a6      	sub	sp, #152	; 0x98
 8006602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006622:	4bc8      	ldr	r3, [pc, #800]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	2b0c      	cmp	r3, #12
 800662c:	f200 817e 	bhi.w	800692c <HAL_RCC_GetSysClockFreq+0x330>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800666d 	.word	0x0800666d
 800663c:	0800692d 	.word	0x0800692d
 8006640:	0800692d 	.word	0x0800692d
 8006644:	0800692d 	.word	0x0800692d
 8006648:	08006675 	.word	0x08006675
 800664c:	0800692d 	.word	0x0800692d
 8006650:	0800692d 	.word	0x0800692d
 8006654:	0800692d 	.word	0x0800692d
 8006658:	0800667d 	.word	0x0800667d
 800665c:	0800692d 	.word	0x0800692d
 8006660:	0800692d 	.word	0x0800692d
 8006664:	0800692d 	.word	0x0800692d
 8006668:	080067e7 	.word	0x080067e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4bb6      	ldr	r3, [pc, #728]	; (8006948 <HAL_RCC_GetSysClockFreq+0x34c>)
 800666e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006672:	e15f      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006674:	4bb5      	ldr	r3, [pc, #724]	; (800694c <HAL_RCC_GetSysClockFreq+0x350>)
 8006676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800667a:	e15b      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800667c:	4bb1      	ldr	r3, [pc, #708]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006688:	4bae      	ldr	r3, [pc, #696]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d031      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006694:	4bab      	ldr	r3, [pc, #684]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	2200      	movs	r2, #0
 800669c:	66bb      	str	r3, [r7, #104]	; 0x68
 800669e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a6:	663b      	str	r3, [r7, #96]	; 0x60
 80066a8:	2300      	movs	r3, #0
 80066aa:	667b      	str	r3, [r7, #100]	; 0x64
 80066ac:	4ba7      	ldr	r3, [pc, #668]	; (800694c <HAL_RCC_GetSysClockFreq+0x350>)
 80066ae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80066b2:	462a      	mov	r2, r5
 80066b4:	fb03 f202 	mul.w	r2, r3, r2
 80066b8:	2300      	movs	r3, #0
 80066ba:	4621      	mov	r1, r4
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	4aa2      	ldr	r2, [pc, #648]	; (800694c <HAL_RCC_GetSysClockFreq+0x350>)
 80066c4:	4621      	mov	r1, r4
 80066c6:	fba1 1202 	umull	r1, r2, r1, r2
 80066ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066cc:	460a      	mov	r2, r1
 80066ce:	67ba      	str	r2, [r7, #120]	; 0x78
 80066d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066d2:	4413      	add	r3, r2
 80066d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066da:	2200      	movs	r2, #0
 80066dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80066de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80066e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066e8:	f7fa faee 	bl	8000cc8 <__aeabi_uldivmod>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4613      	mov	r3, r2
 80066f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066f6:	e064      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f8:	4b92      	ldr	r3, [pc, #584]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	099b      	lsrs	r3, r3, #6
 80066fe:	2200      	movs	r2, #0
 8006700:	653b      	str	r3, [r7, #80]	; 0x50
 8006702:	657a      	str	r2, [r7, #84]	; 0x54
 8006704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670a:	64bb      	str	r3, [r7, #72]	; 0x48
 800670c:	2300      	movs	r3, #0
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006714:	4622      	mov	r2, r4
 8006716:	462b      	mov	r3, r5
 8006718:	f04f 0000 	mov.w	r0, #0
 800671c:	f04f 0100 	mov.w	r1, #0
 8006720:	0159      	lsls	r1, r3, #5
 8006722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006726:	0150      	lsls	r0, r2, #5
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4621      	mov	r1, r4
 800672e:	1a51      	subs	r1, r2, r1
 8006730:	6139      	str	r1, [r7, #16]
 8006732:	4629      	mov	r1, r5
 8006734:	eb63 0301 	sbc.w	r3, r3, r1
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006746:	4659      	mov	r1, fp
 8006748:	018b      	lsls	r3, r1, #6
 800674a:	4651      	mov	r1, sl
 800674c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006750:	4651      	mov	r1, sl
 8006752:	018a      	lsls	r2, r1, #6
 8006754:	4651      	mov	r1, sl
 8006756:	ebb2 0801 	subs.w	r8, r2, r1
 800675a:	4659      	mov	r1, fp
 800675c:	eb63 0901 	sbc.w	r9, r3, r1
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006770:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006774:	4690      	mov	r8, r2
 8006776:	4699      	mov	r9, r3
 8006778:	4623      	mov	r3, r4
 800677a:	eb18 0303 	adds.w	r3, r8, r3
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	462b      	mov	r3, r5
 8006782:	eb49 0303 	adc.w	r3, r9, r3
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006794:	4629      	mov	r1, r5
 8006796:	028b      	lsls	r3, r1, #10
 8006798:	4621      	mov	r1, r4
 800679a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800679e:	4621      	mov	r1, r4
 80067a0:	028a      	lsls	r2, r1, #10
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067aa:	2200      	movs	r2, #0
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	647a      	str	r2, [r7, #68]	; 0x44
 80067b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067b4:	f7fa fa88 	bl	8000cc8 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4613      	mov	r3, r2
 80067be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067c2:	4b60      	ldr	r3, [pc, #384]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	3301      	adds	r3, #1
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80067d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80067e4:	e0a6      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e6:	4b57      	ldr	r3, [pc, #348]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067f2:	4b54      	ldr	r3, [pc, #336]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02a      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fe:	4b51      	ldr	r3, [pc, #324]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	099b      	lsrs	r3, r3, #6
 8006804:	2200      	movs	r2, #0
 8006806:	63bb      	str	r3, [r7, #56]	; 0x38
 8006808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006810:	2100      	movs	r1, #0
 8006812:	4b4e      	ldr	r3, [pc, #312]	; (800694c <HAL_RCC_GetSysClockFreq+0x350>)
 8006814:	fb03 f201 	mul.w	r2, r3, r1
 8006818:	2300      	movs	r3, #0
 800681a:	fb00 f303 	mul.w	r3, r0, r3
 800681e:	4413      	add	r3, r2
 8006820:	4a4a      	ldr	r2, [pc, #296]	; (800694c <HAL_RCC_GetSysClockFreq+0x350>)
 8006822:	fba0 1202 	umull	r1, r2, r0, r2
 8006826:	677a      	str	r2, [r7, #116]	; 0x74
 8006828:	460a      	mov	r2, r1
 800682a:	673a      	str	r2, [r7, #112]	; 0x70
 800682c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800682e:	4413      	add	r3, r2
 8006830:	677b      	str	r3, [r7, #116]	; 0x74
 8006832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006836:	2200      	movs	r2, #0
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
 800683a:	637a      	str	r2, [r7, #52]	; 0x34
 800683c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006840:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006844:	f7fa fa40 	bl	8000cc8 <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4613      	mov	r3, r2
 800684e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006852:	e05b      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006854:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	099b      	lsrs	r3, r3, #6
 800685a:	2200      	movs	r2, #0
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
 800685e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	623b      	str	r3, [r7, #32]
 8006868:	2300      	movs	r3, #0
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
 800686c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f04f 0100 	mov.w	r1, #0
 800687c:	0159      	lsls	r1, r3, #5
 800687e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006882:	0150      	lsls	r0, r2, #5
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4641      	mov	r1, r8
 800688a:	ebb2 0a01 	subs.w	sl, r2, r1
 800688e:	4649      	mov	r1, r9
 8006890:	eb63 0b01 	sbc.w	fp, r3, r1
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068a8:	ebb2 040a 	subs.w	r4, r2, sl
 80068ac:	eb63 050b 	sbc.w	r5, r3, fp
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	00eb      	lsls	r3, r5, #3
 80068ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068be:	00e2      	lsls	r2, r4, #3
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	4643      	mov	r3, r8
 80068c6:	18e3      	adds	r3, r4, r3
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	464b      	mov	r3, r9
 80068cc:	eb45 0303 	adc.w	r3, r5, r3
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068de:	4629      	mov	r1, r5
 80068e0:	028b      	lsls	r3, r1, #10
 80068e2:	4621      	mov	r1, r4
 80068e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068e8:	4621      	mov	r1, r4
 80068ea:	028a      	lsls	r2, r1, #10
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f4:	2200      	movs	r2, #0
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068fe:	f7fa f9e3 	bl	8000cc8 <__aeabi_uldivmod>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4613      	mov	r3, r2
 8006908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_RCC_GetSysClockFreq+0x348>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	0f1b      	lsrs	r3, r3, #28
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800691a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800691e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800692a:	e003      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_RCC_GetSysClockFreq+0x34c>)
 800692e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006938:	4618      	mov	r0, r3
 800693a:	3798      	adds	r7, #152	; 0x98
 800693c:	46bd      	mov	sp, r7
 800693e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800
 8006948:	00f42400 	.word	0x00f42400
 800694c:	00b71b00 	.word	0x00b71b00

08006950 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e28d      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8083 	beq.w	8006a76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006970:	4b94      	ldr	r3, [pc, #592]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 030c 	and.w	r3, r3, #12
 8006978:	2b04      	cmp	r3, #4
 800697a:	d019      	beq.n	80069b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800697c:	4b91      	ldr	r3, [pc, #580]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006984:	2b08      	cmp	r3, #8
 8006986:	d106      	bne.n	8006996 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006988:	4b8e      	ldr	r3, [pc, #568]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006994:	d00c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006996:	4b8b      	ldr	r3, [pc, #556]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d112      	bne.n	80069c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a2:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4b84      	ldr	r3, [pc, #528]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05b      	beq.n	8006a74 <HAL_RCC_OscConfig+0x124>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d157      	bne.n	8006a74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e25a      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d106      	bne.n	80069e0 <HAL_RCC_OscConfig+0x90>
 80069d2:	4b7c      	ldr	r3, [pc, #496]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7b      	ldr	r2, [pc, #492]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e01d      	b.n	8006a1c <HAL_RCC_OscConfig+0xcc>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCC_OscConfig+0xb4>
 80069ea:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a75      	ldr	r2, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b73      	ldr	r3, [pc, #460]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a72      	ldr	r2, [pc, #456]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 80069fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e00b      	b.n	8006a1c <HAL_RCC_OscConfig+0xcc>
 8006a04:	4b6f      	ldr	r3, [pc, #444]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a6e      	ldr	r2, [pc, #440]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4b6c      	ldr	r3, [pc, #432]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6b      	ldr	r2, [pc, #428]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fd fa5a 	bl	8003edc <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a2c:	f7fd fa56 	bl	8003edc <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e21f      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b61      	ldr	r3, [pc, #388]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0xdc>
 8006a4a:	e014      	b.n	8006a76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fd fa46 	bl	8003edc <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fd fa42 	bl	8003edc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e20b      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a66:	4b57      	ldr	r3, [pc, #348]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x104>
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06f      	beq.n	8006b62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a82:	4b50      	ldr	r3, [pc, #320]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d017      	beq.n	8006abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a8e:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d105      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa6:	4b47      	ldr	r3, [pc, #284]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006aae:	2b0c      	cmp	r3, #12
 8006ab0:	d11c      	bne.n	8006aec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab2:	4b44      	ldr	r3, [pc, #272]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d116      	bne.n	8006aec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x186>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e1d3      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4937      	ldr	r1, [pc, #220]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	e03a      	b.n	8006b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af4:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <HAL_RCC_OscConfig+0x278>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fd f9ef 	bl	8003edc <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b02:	f7fd f9eb 	bl	8003edc <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e1b4      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4925      	ldr	r1, [pc, #148]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
 8006b34:	e015      	b.n	8006b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b36:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <HAL_RCC_OscConfig+0x278>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fd f9ce 	bl	8003edc <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fd f9ca 	bl	8003edc <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e193      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d036      	beq.n	8006bdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fd f9ae 	bl	8003edc <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fd f9aa 	bl	8003edc <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e173      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCC_OscConfig+0x274>)
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x234>
 8006ba2:	e01b      	b.n	8006bdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006baa:	f7fd f997 	bl	8003edc <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb0:	e00e      	b.n	8006bd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb2:	f7fd f993 	bl	8003edc <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d907      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e15c      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	42470000 	.word	0x42470000
 8006bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	4b8a      	ldr	r3, [pc, #552]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8097 	beq.w	8006d18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b83      	ldr	r3, [pc, #524]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	4b7f      	ldr	r3, [pc, #508]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a7e      	ldr	r2, [pc, #504]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0a:	4b7c      	ldr	r3, [pc, #496]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c12:	60bb      	str	r3, [r7, #8]
 8006c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	4b79      	ldr	r3, [pc, #484]	; (8006e00 <HAL_RCC_OscConfig+0x4b0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d118      	bne.n	8006c58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c26:	4b76      	ldr	r3, [pc, #472]	; (8006e00 <HAL_RCC_OscConfig+0x4b0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a75      	ldr	r2, [pc, #468]	; (8006e00 <HAL_RCC_OscConfig+0x4b0>)
 8006c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c32:	f7fd f953 	bl	8003edc <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3a:	f7fd f94f 	bl	8003edc <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e118      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	4b6c      	ldr	r3, [pc, #432]	; (8006e00 <HAL_RCC_OscConfig+0x4b0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x31e>
 8006c60:	4b66      	ldr	r3, [pc, #408]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a65      	ldr	r2, [pc, #404]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x358>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x340>
 8006c76:	4b61      	ldr	r3, [pc, #388]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a60      	ldr	r2, [pc, #384]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
 8006c82:	4b5e      	ldr	r3, [pc, #376]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a5d      	ldr	r2, [pc, #372]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x358>
 8006c90:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	4a59      	ldr	r2, [pc, #356]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9c:	4b57      	ldr	r3, [pc, #348]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	4a56      	ldr	r2, [pc, #344]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fd f914 	bl	8003edc <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb8:	f7fd f910 	bl	8003edc <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0d7      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cce:	4b4b      	ldr	r3, [pc, #300]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ee      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x368>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fd f8fe 	bl	8003edc <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fd f8fa 	bl	8003edc <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0c1      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfa:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ee      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d105      	bne.n	8006d18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	4a3a      	ldr	r2, [pc, #232]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80ad 	beq.w	8006e7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d22:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d060      	beq.n	8006df0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d145      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d36:	4b33      	ldr	r3, [pc, #204]	; (8006e04 <HAL_RCC_OscConfig+0x4b4>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fd f8ce 	bl	8003edc <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d44:	f7fd f8ca 	bl	8003edc <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e093      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	019b      	lsls	r3, r3, #6
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	061b      	lsls	r3, r3, #24
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	491b      	ldr	r1, [pc, #108]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d94:	4b1b      	ldr	r3, [pc, #108]	; (8006e04 <HAL_RCC_OscConfig+0x4b4>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fd f89f 	bl	8003edc <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006da2:	f7fd f89b 	bl	8003edc <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e064      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x452>
 8006dc0:	e05c      	b.n	8006e7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCC_OscConfig+0x4b4>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fd f888 	bl	8003edc <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fd f884 	bl	8003edc <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04d      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <HAL_RCC_OscConfig+0x4ac>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x480>
 8006dee:	e045      	b.n	8006e7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d107      	bne.n	8006e08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e040      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40007000 	.word	0x40007000
 8006e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e08:	4b1f      	ldr	r3, [pc, #124]	; (8006e88 <HAL_RCC_OscConfig+0x538>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d030      	beq.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d129      	bne.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d122      	bne.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d119      	bne.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	3b01      	subs	r3, #1
 8006e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d10f      	bne.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d001      	beq.n	8006e7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800

08006e8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e07b      	b.n	8006f96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d108      	bne.n	8006eb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eae:	d009      	beq.n	8006ec4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	61da      	str	r2, [r3, #28]
 8006eb6:	e005      	b.n	8006ec4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fc fa02 	bl	80032e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	ea42 0103 	orr.w	r1, r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	f003 0104 	and.w	r1, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	f003 0210 	and.w	r2, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e041      	b.n	8007034 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fc fae1 	bl	800358c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f000 fcdb 	bl	8007998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	d001      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e04e      	b.n	80070f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a23      	ldr	r2, [pc, #140]	; (8007100 <HAL_TIM_Base_Start_IT+0xc4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d022      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d01d      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <HAL_TIM_Base_Start_IT+0xc8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <HAL_TIM_Base_Start_IT+0xcc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <HAL_TIM_Base_Start_IT+0xd0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <HAL_TIM_Base_Start_IT+0xd4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0x80>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_TIM_Base_Start_IT+0xdc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d111      	bne.n	80070e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b06      	cmp	r3, #6
 80070cc:	d010      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0201 	orr.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070de:	e007      	b.n	80070f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	40010400 	.word	0x40010400
 8007114:	40014000 	.word	0x40014000
 8007118:	40001800 	.word	0x40001800

0800711c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e041      	b.n	80071b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fc f96e 	bl	8003424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f000 fc1c 	bl	8007998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_TIM_PWM_Start+0x24>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e022      	b.n	8007226 <HAL_TIM_PWM_Start+0x6a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d109      	bne.n	80071fa <HAL_TIM_PWM_Start+0x3e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	bf14      	ite	ne
 80071f2:	2301      	movne	r3, #1
 80071f4:	2300      	moveq	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	e015      	b.n	8007226 <HAL_TIM_PWM_Start+0x6a>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d109      	bne.n	8007214 <HAL_TIM_PWM_Start+0x58>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e008      	b.n	8007226 <HAL_TIM_PWM_Start+0x6a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	bf14      	ite	ne
 8007220:	2301      	movne	r3, #1
 8007222:	2300      	moveq	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e07c      	b.n	8007328 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <HAL_TIM_PWM_Start+0x82>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800723c:	e013      	b.n	8007266 <HAL_TIM_PWM_Start+0xaa>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b04      	cmp	r3, #4
 8007242:	d104      	bne.n	800724e <HAL_TIM_PWM_Start+0x92>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800724c:	e00b      	b.n	8007266 <HAL_TIM_PWM_Start+0xaa>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d104      	bne.n	800725e <HAL_TIM_PWM_Start+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800725c:	e003      	b.n	8007266 <HAL_TIM_PWM_Start+0xaa>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fde2 	bl	8007e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2d      	ldr	r2, [pc, #180]	; (8007330 <HAL_TIM_PWM_Start+0x174>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIM_PWM_Start+0xcc>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <HAL_TIM_PWM_Start+0x178>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d101      	bne.n	800728c <HAL_TIM_PWM_Start+0xd0>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_TIM_PWM_Start+0xd2>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <HAL_TIM_PWM_Start+0x174>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d022      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <HAL_TIM_PWM_Start+0x17c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d018      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1d      	ldr	r2, [pc, #116]	; (800733c <HAL_TIM_PWM_Start+0x180>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <HAL_TIM_PWM_Start+0x184>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <HAL_TIM_PWM_Start+0x178>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a18      	ldr	r2, [pc, #96]	; (8007344 <HAL_TIM_PWM_Start+0x188>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x136>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a16      	ldr	r2, [pc, #88]	; (8007348 <HAL_TIM_PWM_Start+0x18c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d111      	bne.n	8007316 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b06      	cmp	r3, #6
 8007302:	d010      	beq.n	8007326 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007314:	e007      	b.n	8007326 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0201 	orr.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00
 8007344:	40014000 	.word	0x40014000
 8007348:	40001800 	.word	0x40001800

0800734c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e097      	b.n	8007490 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fc f88b 	bl	8003490 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007390:	f023 0307 	bic.w	r3, r3, #7
 8007394:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f000 faf9 	bl	8007998 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	4313      	orrs	r3, r2
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073ec:	f023 030c 	bic.w	r3, r3, #12
 80073f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	4313      	orrs	r3, r2
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	011a      	lsls	r2, r3, #4
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	031b      	lsls	r3, r3, #12
 800741c:	4313      	orrs	r3, r2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800742a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	4313      	orrs	r3, r2
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d110      	bne.n	80074ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d102      	bne.n	80074d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ce:	7b7b      	ldrb	r3, [r7, #13]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d001      	beq.n	80074d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e069      	b.n	80075ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e8:	e031      	b.n	800754e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d110      	bne.n	8007512 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d102      	bne.n	80074fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074f6:	7b3b      	ldrb	r3, [r7, #12]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e055      	b.n	80075ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007510:	e01d      	b.n	800754e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d108      	bne.n	800752a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d105      	bne.n	800752a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800751e:	7b7b      	ldrb	r3, [r7, #13]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d102      	bne.n	800752a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007524:	7b3b      	ldrb	r3, [r7, #12]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e03e      	b.n	80075ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_TIM_Encoder_Start+0xc4>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b04      	cmp	r3, #4
 8007558:	d008      	beq.n	800756c <HAL_TIM_Encoder_Start+0xd4>
 800755a:	e00f      	b.n	800757c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2201      	movs	r2, #1
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fc67 	bl	8007e38 <TIM_CCxChannelCmd>
      break;
 800756a:	e016      	b.n	800759a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2201      	movs	r2, #1
 8007572:	2104      	movs	r1, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fc5f 	bl	8007e38 <TIM_CCxChannelCmd>
      break;
 800757a:	e00e      	b.n	800759a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2201      	movs	r2, #1
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fc57 	bl	8007e38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2201      	movs	r2, #1
 8007590:	2104      	movs	r1, #4
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fc50 	bl	8007e38 <TIM_CCxChannelCmd>
      break;
 8007598:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d122      	bne.n	8007610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d11b      	bne.n	8007610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0202 	mvn.w	r2, #2
 80075e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9b0 	bl	800795c <HAL_TIM_IC_CaptureCallback>
 80075fc:	e005      	b.n	800760a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9a2 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f9b3 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b04      	cmp	r3, #4
 800761c:	d122      	bne.n	8007664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b04      	cmp	r3, #4
 800762a:	d11b      	bne.n	8007664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0204 	mvn.w	r2, #4
 8007634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f986 	bl	800795c <HAL_TIM_IC_CaptureCallback>
 8007650:	e005      	b.n	800765e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f978 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f989 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b08      	cmp	r3, #8
 8007670:	d122      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b08      	cmp	r3, #8
 800767e:	d11b      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0208 	mvn.w	r2, #8
 8007688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2204      	movs	r2, #4
 800768e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f95c 	bl	800795c <HAL_TIM_IC_CaptureCallback>
 80076a4:	e005      	b.n	80076b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f94e 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f95f 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d122      	bne.n	800770c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d11b      	bne.n	800770c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0210 	mvn.w	r2, #16
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2208      	movs	r2, #8
 80076e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f932 	bl	800795c <HAL_TIM_IC_CaptureCallback>
 80076f8:	e005      	b.n	8007706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f924 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f935 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10e      	bne.n	8007738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b01      	cmp	r3, #1
 8007726:	d107      	bne.n	8007738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0201 	mvn.w	r2, #1
 8007730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fc fa36 	bl	8003ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007750:	2b80      	cmp	r3, #128	; 0x80
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc68 	bl	8008034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8fa 	bl	8007984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b20      	cmp	r3, #32
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0220 	mvn.w	r2, #32
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fc32 	bl	8008020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077de:	2302      	movs	r3, #2
 80077e0:	e0ae      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	f200 809f 	bhi.w	8007930 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800782d 	.word	0x0800782d
 80077fc:	08007931 	.word	0x08007931
 8007800:	08007931 	.word	0x08007931
 8007804:	08007931 	.word	0x08007931
 8007808:	0800786d 	.word	0x0800786d
 800780c:	08007931 	.word	0x08007931
 8007810:	08007931 	.word	0x08007931
 8007814:	08007931 	.word	0x08007931
 8007818:	080078af 	.word	0x080078af
 800781c:	08007931 	.word	0x08007931
 8007820:	08007931 	.word	0x08007931
 8007824:	08007931 	.word	0x08007931
 8007828:	080078ef 	.word	0x080078ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f950 	bl	8007ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0208 	orr.w	r2, r2, #8
 8007846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0204 	bic.w	r2, r2, #4
 8007856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6999      	ldr	r1, [r3, #24]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	619a      	str	r2, [r3, #24]
      break;
 800786a:	e064      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 f9a0 	bl	8007bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6999      	ldr	r1, [r3, #24]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	021a      	lsls	r2, r3, #8
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	619a      	str	r2, [r3, #24]
      break;
 80078ac:	e043      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f9f5 	bl	8007ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0208 	orr.w	r2, r2, #8
 80078c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0204 	bic.w	r2, r2, #4
 80078d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69d9      	ldr	r1, [r3, #28]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	61da      	str	r2, [r3, #28]
      break;
 80078ec:	e023      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fa49 	bl	8007d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69d9      	ldr	r1, [r3, #28]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	021a      	lsls	r2, r3, #8
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	61da      	str	r2, [r3, #28]
      break;
 800792e:	e002      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a40      	ldr	r2, [pc, #256]	; (8007aac <TIM_Base_SetConfig+0x114>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d00f      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a3d      	ldr	r2, [pc, #244]	; (8007ab0 <TIM_Base_SetConfig+0x118>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00b      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a3c      	ldr	r2, [pc, #240]	; (8007ab4 <TIM_Base_SetConfig+0x11c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d007      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a3b      	ldr	r2, [pc, #236]	; (8007ab8 <TIM_Base_SetConfig+0x120>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a3a      	ldr	r2, [pc, #232]	; (8007abc <TIM_Base_SetConfig+0x124>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d108      	bne.n	80079ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2f      	ldr	r2, [pc, #188]	; (8007aac <TIM_Base_SetConfig+0x114>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d02b      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f8:	d027      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a2c      	ldr	r2, [pc, #176]	; (8007ab0 <TIM_Base_SetConfig+0x118>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d023      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a2b      	ldr	r2, [pc, #172]	; (8007ab4 <TIM_Base_SetConfig+0x11c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01f      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a2a      	ldr	r2, [pc, #168]	; (8007ab8 <TIM_Base_SetConfig+0x120>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01b      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a29      	ldr	r2, [pc, #164]	; (8007abc <TIM_Base_SetConfig+0x124>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d017      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a28      	ldr	r2, [pc, #160]	; (8007ac0 <TIM_Base_SetConfig+0x128>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a27      	ldr	r2, [pc, #156]	; (8007ac4 <TIM_Base_SetConfig+0x12c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a26      	ldr	r2, [pc, #152]	; (8007ac8 <TIM_Base_SetConfig+0x130>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a25      	ldr	r2, [pc, #148]	; (8007acc <TIM_Base_SetConfig+0x134>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <TIM_Base_SetConfig+0x138>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <TIM_Base_SetConfig+0x13c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <TIM_Base_SetConfig+0x114>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_Base_SetConfig+0xf8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a0c      	ldr	r2, [pc, #48]	; (8007abc <TIM_Base_SetConfig+0x124>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d103      	bne.n	8007a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	615a      	str	r2, [r3, #20]
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40010400 	.word	0x40010400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800
 8007acc:	40001800 	.word	0x40001800
 8007ad0:	40001c00 	.word	0x40001c00
 8007ad4:	40002000 	.word	0x40002000

08007ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f023 0302 	bic.w	r3, r3, #2
 8007b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a20      	ldr	r2, [pc, #128]	; (8007bb0 <TIM_OC1_SetConfig+0xd8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC1_SetConfig+0x64>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <TIM_OC1_SetConfig+0xdc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d10c      	bne.n	8007b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0308 	bic.w	r3, r3, #8
 8007b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f023 0304 	bic.w	r3, r3, #4
 8007b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <TIM_OC1_SetConfig+0xd8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC1_SetConfig+0x8e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <TIM_OC1_SetConfig+0xdc>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d111      	bne.n	8007b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	621a      	str	r2, [r3, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40010400 	.word	0x40010400

08007bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f023 0210 	bic.w	r2, r3, #16
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f023 0320 	bic.w	r3, r3, #32
 8007c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a22      	ldr	r2, [pc, #136]	; (8007c9c <TIM_OC2_SetConfig+0xe4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC2_SetConfig+0x68>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a21      	ldr	r2, [pc, #132]	; (8007ca0 <TIM_OC2_SetConfig+0xe8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10d      	bne.n	8007c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <TIM_OC2_SetConfig+0xe4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d003      	beq.n	8007c4c <TIM_OC2_SetConfig+0x94>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a16      	ldr	r2, [pc, #88]	; (8007ca0 <TIM_OC2_SetConfig+0xe8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d113      	bne.n	8007c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40010400 	.word	0x40010400

08007ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a21      	ldr	r2, [pc, #132]	; (8007d84 <TIM_OC3_SetConfig+0xe0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d003      	beq.n	8007d0a <TIM_OC3_SetConfig+0x66>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a20      	ldr	r2, [pc, #128]	; (8007d88 <TIM_OC3_SetConfig+0xe4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d10d      	bne.n	8007d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <TIM_OC3_SetConfig+0xe0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <TIM_OC3_SetConfig+0x92>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <TIM_OC3_SetConfig+0xe4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d113      	bne.n	8007d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	621a      	str	r2, [r3, #32]
}
 8007d78:	bf00      	nop
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40010400 	.word	0x40010400

08007d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	031b      	lsls	r3, r3, #12
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <TIM_OC4_SetConfig+0xa4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d003      	beq.n	8007df4 <TIM_OC4_SetConfig+0x68>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <TIM_OC4_SetConfig+0xa8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d109      	bne.n	8007e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	019b      	lsls	r3, r3, #6
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40010400 	.word	0x40010400

08007e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e05a      	b.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a21      	ldr	r2, [pc, #132]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee8:	d01d      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1d      	ldr	r2, [pc, #116]	; (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1a      	ldr	r2, [pc, #104]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10c      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40000400 	.word	0x40000400
 8007f68:	40000800 	.word	0x40000800
 8007f6c:	40000c00 	.word	0x40000c00
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40001800 	.word	0x40001800

08007f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e03d      	b.n	8008014 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e03f      	b.n	80080da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fb fb14 	bl	800369c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	; 0x24
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800808a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f829 	bl	80080e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695a      	ldr	r2, [r3, #20]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e8:	b0c0      	sub	sp, #256	; 0x100
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	68d9      	ldr	r1, [r3, #12]
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	ea40 0301 	orr.w	r3, r0, r1
 800810c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800810e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	431a      	orrs	r2, r3
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800813c:	f021 010c 	bic.w	r1, r1, #12
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800814a:	430b      	orrs	r3, r1
 800814c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800814e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	6999      	ldr	r1, [r3, #24]
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	ea40 0301 	orr.w	r3, r0, r1
 800816a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b8f      	ldr	r3, [pc, #572]	; (80083b0 <UART_SetConfig+0x2cc>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d005      	beq.n	8008184 <UART_SetConfig+0xa0>
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b8d      	ldr	r3, [pc, #564]	; (80083b4 <UART_SetConfig+0x2d0>)
 8008180:	429a      	cmp	r2, r3
 8008182:	d104      	bne.n	800818e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fe fa26 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 8008188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800818c:	e003      	b.n	8008196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800818e:	f7fe fa0d 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 8008192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a0:	f040 810c 	bne.w	80083bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	1891      	adds	r1, r2, r2
 80081bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80081be:	415b      	adcs	r3, r3
 80081c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081c6:	4621      	mov	r1, r4
 80081c8:	eb12 0801 	adds.w	r8, r2, r1
 80081cc:	4629      	mov	r1, r5
 80081ce:	eb43 0901 	adc.w	r9, r3, r1
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081e6:	4690      	mov	r8, r2
 80081e8:	4699      	mov	r9, r3
 80081ea:	4623      	mov	r3, r4
 80081ec:	eb18 0303 	adds.w	r3, r8, r3
 80081f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081f4:	462b      	mov	r3, r5
 80081f6:	eb49 0303 	adc.w	r3, r9, r3
 80081fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800820a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800820e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008212:	460b      	mov	r3, r1
 8008214:	18db      	adds	r3, r3, r3
 8008216:	653b      	str	r3, [r7, #80]	; 0x50
 8008218:	4613      	mov	r3, r2
 800821a:	eb42 0303 	adc.w	r3, r2, r3
 800821e:	657b      	str	r3, [r7, #84]	; 0x54
 8008220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008228:	f7f8 fd4e 	bl	8000cc8 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4b61      	ldr	r3, [pc, #388]	; (80083b8 <UART_SetConfig+0x2d4>)
 8008232:	fba3 2302 	umull	r2, r3, r3, r2
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	011c      	lsls	r4, r3, #4
 800823a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800823e:	2200      	movs	r2, #0
 8008240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800824c:	4642      	mov	r2, r8
 800824e:	464b      	mov	r3, r9
 8008250:	1891      	adds	r1, r2, r2
 8008252:	64b9      	str	r1, [r7, #72]	; 0x48
 8008254:	415b      	adcs	r3, r3
 8008256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800825c:	4641      	mov	r1, r8
 800825e:	eb12 0a01 	adds.w	sl, r2, r1
 8008262:	4649      	mov	r1, r9
 8008264:	eb43 0b01 	adc.w	fp, r3, r1
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800827c:	4692      	mov	sl, r2
 800827e:	469b      	mov	fp, r3
 8008280:	4643      	mov	r3, r8
 8008282:	eb1a 0303 	adds.w	r3, sl, r3
 8008286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800828a:	464b      	mov	r3, r9
 800828c:	eb4b 0303 	adc.w	r3, fp, r3
 8008290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082a8:	460b      	mov	r3, r1
 80082aa:	18db      	adds	r3, r3, r3
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
 80082ae:	4613      	mov	r3, r2
 80082b0:	eb42 0303 	adc.w	r3, r2, r3
 80082b4:	647b      	str	r3, [r7, #68]	; 0x44
 80082b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082be:	f7f8 fd03 	bl	8000cc8 <__aeabi_uldivmod>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <UART_SetConfig+0x2d4>)
 80082ca:	fba3 2301 	umull	r2, r3, r3, r1
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	2264      	movs	r2, #100	; 0x64
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
 80082d6:	1acb      	subs	r3, r1, r3
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082de:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <UART_SetConfig+0x2d4>)
 80082e0:	fba3 2302 	umull	r2, r3, r3, r2
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082ec:	441c      	add	r4, r3
 80082ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	1891      	adds	r1, r2, r2
 8008306:	63b9      	str	r1, [r7, #56]	; 0x38
 8008308:	415b      	adcs	r3, r3
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008310:	4641      	mov	r1, r8
 8008312:	1851      	adds	r1, r2, r1
 8008314:	6339      	str	r1, [r7, #48]	; 0x30
 8008316:	4649      	mov	r1, r9
 8008318:	414b      	adcs	r3, r1
 800831a:	637b      	str	r3, [r7, #52]	; 0x34
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008328:	4659      	mov	r1, fp
 800832a:	00cb      	lsls	r3, r1, #3
 800832c:	4651      	mov	r1, sl
 800832e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008332:	4651      	mov	r1, sl
 8008334:	00ca      	lsls	r2, r1, #3
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	4603      	mov	r3, r0
 800833c:	4642      	mov	r2, r8
 800833e:	189b      	adds	r3, r3, r2
 8008340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008344:	464b      	mov	r3, r9
 8008346:	460a      	mov	r2, r1
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800835c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008364:	460b      	mov	r3, r1
 8008366:	18db      	adds	r3, r3, r3
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
 800836a:	4613      	mov	r3, r2
 800836c:	eb42 0303 	adc.w	r3, r2, r3
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800837a:	f7f8 fca5 	bl	8000cc8 <__aeabi_uldivmod>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <UART_SetConfig+0x2d4>)
 8008384:	fba3 1302 	umull	r1, r3, r3, r2
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	2164      	movs	r1, #100	; 0x64
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	3332      	adds	r3, #50	; 0x32
 8008396:	4a08      	ldr	r2, [pc, #32]	; (80083b8 <UART_SetConfig+0x2d4>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	f003 0207 	and.w	r2, r3, #7
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4422      	add	r2, r4
 80083aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083ac:	e105      	b.n	80085ba <UART_SetConfig+0x4d6>
 80083ae:	bf00      	nop
 80083b0:	40011000 	.word	0x40011000
 80083b4:	40011400 	.word	0x40011400
 80083b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083ce:	4642      	mov	r2, r8
 80083d0:	464b      	mov	r3, r9
 80083d2:	1891      	adds	r1, r2, r2
 80083d4:	6239      	str	r1, [r7, #32]
 80083d6:	415b      	adcs	r3, r3
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
 80083da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083de:	4641      	mov	r1, r8
 80083e0:	1854      	adds	r4, r2, r1
 80083e2:	4649      	mov	r1, r9
 80083e4:	eb43 0501 	adc.w	r5, r3, r1
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	00eb      	lsls	r3, r5, #3
 80083f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083f6:	00e2      	lsls	r2, r4, #3
 80083f8:	4614      	mov	r4, r2
 80083fa:	461d      	mov	r5, r3
 80083fc:	4643      	mov	r3, r8
 80083fe:	18e3      	adds	r3, r4, r3
 8008400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008404:	464b      	mov	r3, r9
 8008406:	eb45 0303 	adc.w	r3, r5, r3
 800840a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800840e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800841a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	f04f 0300 	mov.w	r3, #0
 8008426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800842a:	4629      	mov	r1, r5
 800842c:	008b      	lsls	r3, r1, #2
 800842e:	4621      	mov	r1, r4
 8008430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008434:	4621      	mov	r1, r4
 8008436:	008a      	lsls	r2, r1, #2
 8008438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800843c:	f7f8 fc44 	bl	8000cc8 <__aeabi_uldivmod>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4b60      	ldr	r3, [pc, #384]	; (80085c8 <UART_SetConfig+0x4e4>)
 8008446:	fba3 2302 	umull	r2, r3, r3, r2
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	011c      	lsls	r4, r3, #4
 800844e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008452:	2200      	movs	r2, #0
 8008454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800845c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	1891      	adds	r1, r2, r2
 8008466:	61b9      	str	r1, [r7, #24]
 8008468:	415b      	adcs	r3, r3
 800846a:	61fb      	str	r3, [r7, #28]
 800846c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008470:	4641      	mov	r1, r8
 8008472:	1851      	adds	r1, r2, r1
 8008474:	6139      	str	r1, [r7, #16]
 8008476:	4649      	mov	r1, r9
 8008478:	414b      	adcs	r3, r1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008488:	4659      	mov	r1, fp
 800848a:	00cb      	lsls	r3, r1, #3
 800848c:	4651      	mov	r1, sl
 800848e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008492:	4651      	mov	r1, sl
 8008494:	00ca      	lsls	r2, r1, #3
 8008496:	4610      	mov	r0, r2
 8008498:	4619      	mov	r1, r3
 800849a:	4603      	mov	r3, r0
 800849c:	4642      	mov	r2, r8
 800849e:	189b      	adds	r3, r3, r2
 80084a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084a4:	464b      	mov	r3, r9
 80084a6:	460a      	mov	r2, r1
 80084a8:	eb42 0303 	adc.w	r3, r2, r3
 80084ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80084ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084c8:	4649      	mov	r1, r9
 80084ca:	008b      	lsls	r3, r1, #2
 80084cc:	4641      	mov	r1, r8
 80084ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d2:	4641      	mov	r1, r8
 80084d4:	008a      	lsls	r2, r1, #2
 80084d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084da:	f7f8 fbf5 	bl	8000cc8 <__aeabi_uldivmod>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <UART_SetConfig+0x4e4>)
 80084e4:	fba3 1302 	umull	r1, r3, r3, r2
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	2164      	movs	r1, #100	; 0x64
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	3332      	adds	r3, #50	; 0x32
 80084f6:	4a34      	ldr	r2, [pc, #208]	; (80085c8 <UART_SetConfig+0x4e4>)
 80084f8:	fba2 2303 	umull	r2, r3, r2, r3
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008502:	441c      	add	r4, r3
 8008504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008508:	2200      	movs	r2, #0
 800850a:	673b      	str	r3, [r7, #112]	; 0x70
 800850c:	677a      	str	r2, [r7, #116]	; 0x74
 800850e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008512:	4642      	mov	r2, r8
 8008514:	464b      	mov	r3, r9
 8008516:	1891      	adds	r1, r2, r2
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	415b      	adcs	r3, r3
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008522:	4641      	mov	r1, r8
 8008524:	1851      	adds	r1, r2, r1
 8008526:	6039      	str	r1, [r7, #0]
 8008528:	4649      	mov	r1, r9
 800852a:	414b      	adcs	r3, r1
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800853a:	4659      	mov	r1, fp
 800853c:	00cb      	lsls	r3, r1, #3
 800853e:	4651      	mov	r1, sl
 8008540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008544:	4651      	mov	r1, sl
 8008546:	00ca      	lsls	r2, r1, #3
 8008548:	4610      	mov	r0, r2
 800854a:	4619      	mov	r1, r3
 800854c:	4603      	mov	r3, r0
 800854e:	4642      	mov	r2, r8
 8008550:	189b      	adds	r3, r3, r2
 8008552:	66bb      	str	r3, [r7, #104]	; 0x68
 8008554:	464b      	mov	r3, r9
 8008556:	460a      	mov	r2, r1
 8008558:	eb42 0303 	adc.w	r3, r2, r3
 800855c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	663b      	str	r3, [r7, #96]	; 0x60
 8008568:	667a      	str	r2, [r7, #100]	; 0x64
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008576:	4649      	mov	r1, r9
 8008578:	008b      	lsls	r3, r1, #2
 800857a:	4641      	mov	r1, r8
 800857c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008580:	4641      	mov	r1, r8
 8008582:	008a      	lsls	r2, r1, #2
 8008584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008588:	f7f8 fb9e 	bl	8000cc8 <__aeabi_uldivmod>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <UART_SetConfig+0x4e4>)
 8008592:	fba3 1302 	umull	r1, r3, r3, r2
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	2164      	movs	r1, #100	; 0x64
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	3332      	adds	r3, #50	; 0x32
 80085a4:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <UART_SetConfig+0x4e4>)
 80085a6:	fba2 2303 	umull	r2, r3, r2, r3
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4422      	add	r2, r4
 80085b8:	609a      	str	r2, [r3, #8]
}
 80085ba:	bf00      	nop
 80085bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085c0:	46bd      	mov	sp, r7
 80085c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085c6:	bf00      	nop
 80085c8:	51eb851f 	.word	0x51eb851f

080085cc <__errno>:
 80085cc:	4b01      	ldr	r3, [pc, #4]	; (80085d4 <__errno+0x8>)
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000018 	.word	0x20000018

080085d8 <__libc_init_array>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4d0d      	ldr	r5, [pc, #52]	; (8008610 <__libc_init_array+0x38>)
 80085dc:	4c0d      	ldr	r4, [pc, #52]	; (8008614 <__libc_init_array+0x3c>)
 80085de:	1b64      	subs	r4, r4, r5
 80085e0:	10a4      	asrs	r4, r4, #2
 80085e2:	2600      	movs	r6, #0
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	d109      	bne.n	80085fc <__libc_init_array+0x24>
 80085e8:	4d0b      	ldr	r5, [pc, #44]	; (8008618 <__libc_init_array+0x40>)
 80085ea:	4c0c      	ldr	r4, [pc, #48]	; (800861c <__libc_init_array+0x44>)
 80085ec:	f004 fcb0 	bl	800cf50 <_init>
 80085f0:	1b64      	subs	r4, r4, r5
 80085f2:	10a4      	asrs	r4, r4, #2
 80085f4:	2600      	movs	r6, #0
 80085f6:	42a6      	cmp	r6, r4
 80085f8:	d105      	bne.n	8008606 <__libc_init_array+0x2e>
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008600:	4798      	blx	r3
 8008602:	3601      	adds	r6, #1
 8008604:	e7ee      	b.n	80085e4 <__libc_init_array+0xc>
 8008606:	f855 3b04 	ldr.w	r3, [r5], #4
 800860a:	4798      	blx	r3
 800860c:	3601      	adds	r6, #1
 800860e:	e7f2      	b.n	80085f6 <__libc_init_array+0x1e>
 8008610:	0800d5ac 	.word	0x0800d5ac
 8008614:	0800d5ac 	.word	0x0800d5ac
 8008618:	0800d5ac 	.word	0x0800d5ac
 800861c:	0800d5b0 	.word	0x0800d5b0

08008620 <memset>:
 8008620:	4402      	add	r2, r0
 8008622:	4603      	mov	r3, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	f803 1b01 	strb.w	r1, [r3], #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <__cvt>:
 8008630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	ec55 4b10 	vmov	r4, r5, d0
 8008638:	2d00      	cmp	r5, #0
 800863a:	460e      	mov	r6, r1
 800863c:	4619      	mov	r1, r3
 800863e:	462b      	mov	r3, r5
 8008640:	bfbb      	ittet	lt
 8008642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008646:	461d      	movlt	r5, r3
 8008648:	2300      	movge	r3, #0
 800864a:	232d      	movlt	r3, #45	; 0x2d
 800864c:	700b      	strb	r3, [r1, #0]
 800864e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008654:	4691      	mov	r9, r2
 8008656:	f023 0820 	bic.w	r8, r3, #32
 800865a:	bfbc      	itt	lt
 800865c:	4622      	movlt	r2, r4
 800865e:	4614      	movlt	r4, r2
 8008660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008664:	d005      	beq.n	8008672 <__cvt+0x42>
 8008666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800866a:	d100      	bne.n	800866e <__cvt+0x3e>
 800866c:	3601      	adds	r6, #1
 800866e:	2102      	movs	r1, #2
 8008670:	e000      	b.n	8008674 <__cvt+0x44>
 8008672:	2103      	movs	r1, #3
 8008674:	ab03      	add	r3, sp, #12
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	ab02      	add	r3, sp, #8
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	ec45 4b10 	vmov	d0, r4, r5
 8008680:	4653      	mov	r3, sl
 8008682:	4632      	mov	r2, r6
 8008684:	f001 fdcc 	bl	800a220 <_dtoa_r>
 8008688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800868c:	4607      	mov	r7, r0
 800868e:	d102      	bne.n	8008696 <__cvt+0x66>
 8008690:	f019 0f01 	tst.w	r9, #1
 8008694:	d022      	beq.n	80086dc <__cvt+0xac>
 8008696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800869a:	eb07 0906 	add.w	r9, r7, r6
 800869e:	d110      	bne.n	80086c2 <__cvt+0x92>
 80086a0:	783b      	ldrb	r3, [r7, #0]
 80086a2:	2b30      	cmp	r3, #48	; 0x30
 80086a4:	d10a      	bne.n	80086bc <__cvt+0x8c>
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f8 fa2b 	bl	8000b08 <__aeabi_dcmpeq>
 80086b2:	b918      	cbnz	r0, 80086bc <__cvt+0x8c>
 80086b4:	f1c6 0601 	rsb	r6, r6, #1
 80086b8:	f8ca 6000 	str.w	r6, [sl]
 80086bc:	f8da 3000 	ldr.w	r3, [sl]
 80086c0:	4499      	add	r9, r3
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80086ce:	b108      	cbz	r0, 80086d4 <__cvt+0xa4>
 80086d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d4:	2230      	movs	r2, #48	; 0x30
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	454b      	cmp	r3, r9
 80086da:	d307      	bcc.n	80086ec <__cvt+0xbc>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e0:	1bdb      	subs	r3, r3, r7
 80086e2:	4638      	mov	r0, r7
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	b004      	add	sp, #16
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	1c59      	adds	r1, r3, #1
 80086ee:	9103      	str	r1, [sp, #12]
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e7f0      	b.n	80086d6 <__cvt+0xa6>

080086f4 <__exponent>:
 80086f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f6:	4603      	mov	r3, r0
 80086f8:	2900      	cmp	r1, #0
 80086fa:	bfb8      	it	lt
 80086fc:	4249      	neglt	r1, r1
 80086fe:	f803 2b02 	strb.w	r2, [r3], #2
 8008702:	bfb4      	ite	lt
 8008704:	222d      	movlt	r2, #45	; 0x2d
 8008706:	222b      	movge	r2, #43	; 0x2b
 8008708:	2909      	cmp	r1, #9
 800870a:	7042      	strb	r2, [r0, #1]
 800870c:	dd2a      	ble.n	8008764 <__exponent+0x70>
 800870e:	f10d 0407 	add.w	r4, sp, #7
 8008712:	46a4      	mov	ip, r4
 8008714:	270a      	movs	r7, #10
 8008716:	46a6      	mov	lr, r4
 8008718:	460a      	mov	r2, r1
 800871a:	fb91 f6f7 	sdiv	r6, r1, r7
 800871e:	fb07 1516 	mls	r5, r7, r6, r1
 8008722:	3530      	adds	r5, #48	; 0x30
 8008724:	2a63      	cmp	r2, #99	; 0x63
 8008726:	f104 34ff 	add.w	r4, r4, #4294967295
 800872a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800872e:	4631      	mov	r1, r6
 8008730:	dcf1      	bgt.n	8008716 <__exponent+0x22>
 8008732:	3130      	adds	r1, #48	; 0x30
 8008734:	f1ae 0502 	sub.w	r5, lr, #2
 8008738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800873c:	1c44      	adds	r4, r0, #1
 800873e:	4629      	mov	r1, r5
 8008740:	4561      	cmp	r1, ip
 8008742:	d30a      	bcc.n	800875a <__exponent+0x66>
 8008744:	f10d 0209 	add.w	r2, sp, #9
 8008748:	eba2 020e 	sub.w	r2, r2, lr
 800874c:	4565      	cmp	r5, ip
 800874e:	bf88      	it	hi
 8008750:	2200      	movhi	r2, #0
 8008752:	4413      	add	r3, r2
 8008754:	1a18      	subs	r0, r3, r0
 8008756:	b003      	add	sp, #12
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008762:	e7ed      	b.n	8008740 <__exponent+0x4c>
 8008764:	2330      	movs	r3, #48	; 0x30
 8008766:	3130      	adds	r1, #48	; 0x30
 8008768:	7083      	strb	r3, [r0, #2]
 800876a:	70c1      	strb	r1, [r0, #3]
 800876c:	1d03      	adds	r3, r0, #4
 800876e:	e7f1      	b.n	8008754 <__exponent+0x60>

08008770 <_printf_float>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	ed2d 8b02 	vpush	{d8}
 8008778:	b08d      	sub	sp, #52	; 0x34
 800877a:	460c      	mov	r4, r1
 800877c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008780:	4616      	mov	r6, r2
 8008782:	461f      	mov	r7, r3
 8008784:	4605      	mov	r5, r0
 8008786:	f002 fea9 	bl	800b4dc <_localeconv_r>
 800878a:	f8d0 a000 	ldr.w	sl, [r0]
 800878e:	4650      	mov	r0, sl
 8008790:	f7f7 fd3e 	bl	8000210 <strlen>
 8008794:	2300      	movs	r3, #0
 8008796:	930a      	str	r3, [sp, #40]	; 0x28
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	9305      	str	r3, [sp, #20]
 800879c:	f8d8 3000 	ldr.w	r3, [r8]
 80087a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a4:	3307      	adds	r3, #7
 80087a6:	f023 0307 	bic.w	r3, r3, #7
 80087aa:	f103 0208 	add.w	r2, r3, #8
 80087ae:	f8c8 2000 	str.w	r2, [r8]
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c8:	ee08 0a10 	vmov	s16, r0
 80087cc:	4b9f      	ldr	r3, [pc, #636]	; (8008a4c <_printf_float+0x2dc>)
 80087ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	f7f8 f9c9 	bl	8000b6c <__aeabi_dcmpun>
 80087da:	bb88      	cbnz	r0, 8008840 <_printf_float+0xd0>
 80087dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e0:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <_printf_float+0x2dc>)
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	f7f8 f9a3 	bl	8000b30 <__aeabi_dcmple>
 80087ea:	bb48      	cbnz	r0, 8008840 <_printf_float+0xd0>
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4640      	mov	r0, r8
 80087f2:	4649      	mov	r1, r9
 80087f4:	f7f8 f992 	bl	8000b1c <__aeabi_dcmplt>
 80087f8:	b110      	cbz	r0, 8008800 <_printf_float+0x90>
 80087fa:	232d      	movs	r3, #45	; 0x2d
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	4b93      	ldr	r3, [pc, #588]	; (8008a50 <_printf_float+0x2e0>)
 8008802:	4894      	ldr	r0, [pc, #592]	; (8008a54 <_printf_float+0x2e4>)
 8008804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008808:	bf94      	ite	ls
 800880a:	4698      	movls	r8, r3
 800880c:	4680      	movhi	r8, r0
 800880e:	2303      	movs	r3, #3
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	9b05      	ldr	r3, [sp, #20]
 8008814:	f023 0204 	bic.w	r2, r3, #4
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	9700      	str	r7, [sp, #0]
 8008820:	4633      	mov	r3, r6
 8008822:	aa0b      	add	r2, sp, #44	; 0x2c
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f9d8 	bl	8008bdc <_printf_common>
 800882c:	3001      	adds	r0, #1
 800882e:	f040 8090 	bne.w	8008952 <_printf_float+0x1e2>
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	b00d      	add	sp, #52	; 0x34
 8008838:	ecbd 8b02 	vpop	{d8}
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f990 	bl	8000b6c <__aeabi_dcmpun>
 800884c:	b140      	cbz	r0, 8008860 <_printf_float+0xf0>
 800884e:	464b      	mov	r3, r9
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbc      	itt	lt
 8008854:	232d      	movlt	r3, #45	; 0x2d
 8008856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800885a:	487f      	ldr	r0, [pc, #508]	; (8008a58 <_printf_float+0x2e8>)
 800885c:	4b7f      	ldr	r3, [pc, #508]	; (8008a5c <_printf_float+0x2ec>)
 800885e:	e7d1      	b.n	8008804 <_printf_float+0x94>
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008866:	9206      	str	r2, [sp, #24]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	d13f      	bne.n	80088ec <_printf_float+0x17c>
 800886c:	2306      	movs	r3, #6
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	6861      	ldr	r1, [r4, #4]
 8008874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008878:	2300      	movs	r3, #0
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	ab0a      	add	r3, sp, #40	; 0x28
 800887e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008882:	ab09      	add	r3, sp, #36	; 0x24
 8008884:	ec49 8b10 	vmov	d0, r8, r9
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008890:	4628      	mov	r0, r5
 8008892:	f7ff fecd 	bl	8008630 <__cvt>
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889a:	2b47      	cmp	r3, #71	; 0x47
 800889c:	4680      	mov	r8, r0
 800889e:	d108      	bne.n	80088b2 <_printf_float+0x142>
 80088a0:	1cc8      	adds	r0, r1, #3
 80088a2:	db02      	blt.n	80088aa <_printf_float+0x13a>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	4299      	cmp	r1, r3
 80088a8:	dd41      	ble.n	800892e <_printf_float+0x1be>
 80088aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ae:	fa5f fb8b 	uxtb.w	fp, fp
 80088b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b6:	d820      	bhi.n	80088fa <_printf_float+0x18a>
 80088b8:	3901      	subs	r1, #1
 80088ba:	465a      	mov	r2, fp
 80088bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088c0:	9109      	str	r1, [sp, #36]	; 0x24
 80088c2:	f7ff ff17 	bl	80086f4 <__exponent>
 80088c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c8:	1813      	adds	r3, r2, r0
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	4681      	mov	r9, r0
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	dc02      	bgt.n	80088d8 <_printf_float+0x168>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	07d2      	lsls	r2, r2, #31
 80088d6:	d501      	bpl.n	80088dc <_printf_float+0x16c>
 80088d8:	3301      	adds	r3, #1
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d09c      	beq.n	800881e <_printf_float+0xae>
 80088e4:	232d      	movs	r3, #45	; 0x2d
 80088e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ea:	e798      	b.n	800881e <_printf_float+0xae>
 80088ec:	9a06      	ldr	r2, [sp, #24]
 80088ee:	2a47      	cmp	r2, #71	; 0x47
 80088f0:	d1be      	bne.n	8008870 <_printf_float+0x100>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1bc      	bne.n	8008870 <_printf_float+0x100>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7b9      	b.n	800886e <_printf_float+0xfe>
 80088fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088fe:	d118      	bne.n	8008932 <_printf_float+0x1c2>
 8008900:	2900      	cmp	r1, #0
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	dd0b      	ble.n	800891e <_printf_float+0x1ae>
 8008906:	6121      	str	r1, [r4, #16]
 8008908:	b913      	cbnz	r3, 8008910 <_printf_float+0x1a0>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d502      	bpl.n	8008916 <_printf_float+0x1a6>
 8008910:	3301      	adds	r3, #1
 8008912:	440b      	add	r3, r1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	65a1      	str	r1, [r4, #88]	; 0x58
 8008918:	f04f 0900 	mov.w	r9, #0
 800891c:	e7de      	b.n	80088dc <_printf_float+0x16c>
 800891e:	b913      	cbnz	r3, 8008926 <_printf_float+0x1b6>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	07d2      	lsls	r2, r2, #31
 8008924:	d501      	bpl.n	800892a <_printf_float+0x1ba>
 8008926:	3302      	adds	r3, #2
 8008928:	e7f4      	b.n	8008914 <_printf_float+0x1a4>
 800892a:	2301      	movs	r3, #1
 800892c:	e7f2      	b.n	8008914 <_printf_float+0x1a4>
 800892e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	4299      	cmp	r1, r3
 8008936:	db05      	blt.n	8008944 <_printf_float+0x1d4>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	6121      	str	r1, [r4, #16]
 800893c:	07d8      	lsls	r0, r3, #31
 800893e:	d5ea      	bpl.n	8008916 <_printf_float+0x1a6>
 8008940:	1c4b      	adds	r3, r1, #1
 8008942:	e7e7      	b.n	8008914 <_printf_float+0x1a4>
 8008944:	2900      	cmp	r1, #0
 8008946:	bfd4      	ite	le
 8008948:	f1c1 0202 	rsble	r2, r1, #2
 800894c:	2201      	movgt	r2, #1
 800894e:	4413      	add	r3, r2
 8008950:	e7e0      	b.n	8008914 <_printf_float+0x1a4>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	055a      	lsls	r2, r3, #21
 8008956:	d407      	bmi.n	8008968 <_printf_float+0x1f8>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	4642      	mov	r2, r8
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	d12c      	bne.n	80089c0 <_printf_float+0x250>
 8008966:	e764      	b.n	8008832 <_printf_float+0xc2>
 8008968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800896c:	f240 80e0 	bls.w	8008b30 <_printf_float+0x3c0>
 8008970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	f7f8 f8c6 	bl	8000b08 <__aeabi_dcmpeq>
 800897c:	2800      	cmp	r0, #0
 800897e:	d034      	beq.n	80089ea <_printf_float+0x27a>
 8008980:	4a37      	ldr	r2, [pc, #220]	; (8008a60 <_printf_float+0x2f0>)
 8008982:	2301      	movs	r3, #1
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af51 	beq.w	8008832 <_printf_float+0xc2>
 8008990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	db02      	blt.n	800899e <_printf_float+0x22e>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07d8      	lsls	r0, r3, #31
 800899c:	d510      	bpl.n	80089c0 <_printf_float+0x250>
 800899e:	ee18 3a10 	vmov	r3, s16
 80089a2:	4652      	mov	r2, sl
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af41 	beq.w	8008832 <_printf_float+0xc2>
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	f104 091a 	add.w	r9, r4, #26
 80089b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dc09      	bgt.n	80089d4 <_printf_float+0x264>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	f100 8105 	bmi.w	8008bd2 <_printf_float+0x462>
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089cc:	4298      	cmp	r0, r3
 80089ce:	bfb8      	it	lt
 80089d0:	4618      	movlt	r0, r3
 80089d2:	e730      	b.n	8008836 <_printf_float+0xc6>
 80089d4:	2301      	movs	r3, #1
 80089d6:	464a      	mov	r2, r9
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f af27 	beq.w	8008832 <_printf_float+0xc2>
 80089e4:	f108 0801 	add.w	r8, r8, #1
 80089e8:	e7e6      	b.n	80089b8 <_printf_float+0x248>
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dc39      	bgt.n	8008a64 <_printf_float+0x2f4>
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <_printf_float+0x2f0>)
 80089f2:	2301      	movs	r3, #1
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af19 	beq.w	8008832 <_printf_float+0xc2>
 8008a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a04:	4313      	orrs	r3, r2
 8008a06:	d102      	bne.n	8008a0e <_printf_float+0x29e>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	07d9      	lsls	r1, r3, #31
 8008a0c:	d5d8      	bpl.n	80089c0 <_printf_float+0x250>
 8008a0e:	ee18 3a10 	vmov	r3, s16
 8008a12:	4652      	mov	r2, sl
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f af09 	beq.w	8008832 <_printf_float+0xc2>
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	f104 0a1a 	add.w	sl, r4, #26
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	425b      	negs	r3, r3
 8008a2c:	454b      	cmp	r3, r9
 8008a2e:	dc01      	bgt.n	8008a34 <_printf_float+0x2c4>
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	e792      	b.n	800895a <_printf_float+0x1ea>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4652      	mov	r2, sl
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f aef7 	beq.w	8008832 <_printf_float+0xc2>
 8008a44:	f109 0901 	add.w	r9, r9, #1
 8008a48:	e7ee      	b.n	8008a28 <_printf_float+0x2b8>
 8008a4a:	bf00      	nop
 8008a4c:	7fefffff 	.word	0x7fefffff
 8008a50:	0800d100 	.word	0x0800d100
 8008a54:	0800d104 	.word	0x0800d104
 8008a58:	0800d10c 	.word	0x0800d10c
 8008a5c:	0800d108 	.word	0x0800d108
 8008a60:	0800d110 	.word	0x0800d110
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bfa8      	it	ge
 8008a6c:	461a      	movge	r2, r3
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	4691      	mov	r9, r2
 8008a72:	dc37      	bgt.n	8008ae4 <_printf_float+0x374>
 8008a74:	f04f 0b00 	mov.w	fp, #0
 8008a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a7c:	f104 021a 	add.w	r2, r4, #26
 8008a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	eba3 0309 	sub.w	r3, r3, r9
 8008a88:	455b      	cmp	r3, fp
 8008a8a:	dc33      	bgt.n	8008af4 <_printf_float+0x384>
 8008a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a90:	429a      	cmp	r2, r3
 8008a92:	db3b      	blt.n	8008b0c <_printf_float+0x39c>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	07da      	lsls	r2, r3, #31
 8008a98:	d438      	bmi.n	8008b0c <_printf_float+0x39c>
 8008a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa0:	1a9a      	subs	r2, r3, r2
 8008aa2:	eba3 0901 	sub.w	r9, r3, r1
 8008aa6:	4591      	cmp	r9, r2
 8008aa8:	bfa8      	it	ge
 8008aaa:	4691      	movge	r9, r2
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	dc35      	bgt.n	8008b1e <_printf_float+0x3ae>
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aba:	f104 0a1a 	add.w	sl, r4, #26
 8008abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	eba3 0309 	sub.w	r3, r3, r9
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	f77f af79 	ble.w	80089c0 <_printf_float+0x250>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f aeaa 	beq.w	8008832 <_printf_float+0xc2>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	e7ec      	b.n	8008abe <_printf_float+0x34e>
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	d1c0      	bne.n	8008a74 <_printf_float+0x304>
 8008af2:	e69e      	b.n	8008832 <_printf_float+0xc2>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	9205      	str	r2, [sp, #20]
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f ae97 	beq.w	8008832 <_printf_float+0xc2>
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	f10b 0b01 	add.w	fp, fp, #1
 8008b0a:	e7b9      	b.n	8008a80 <_printf_float+0x310>
 8008b0c:	ee18 3a10 	vmov	r3, s16
 8008b10:	4652      	mov	r2, sl
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d1be      	bne.n	8008a9a <_printf_float+0x32a>
 8008b1c:	e689      	b.n	8008832 <_printf_float+0xc2>
 8008b1e:	9a05      	ldr	r2, [sp, #20]
 8008b20:	464b      	mov	r3, r9
 8008b22:	4442      	add	r2, r8
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d1c1      	bne.n	8008ab2 <_printf_float+0x342>
 8008b2e:	e680      	b.n	8008832 <_printf_float+0xc2>
 8008b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b32:	2a01      	cmp	r2, #1
 8008b34:	dc01      	bgt.n	8008b3a <_printf_float+0x3ca>
 8008b36:	07db      	lsls	r3, r3, #31
 8008b38:	d538      	bpl.n	8008bac <_printf_float+0x43c>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae74 	beq.w	8008832 <_printf_float+0xc2>
 8008b4a:	ee18 3a10 	vmov	r3, s16
 8008b4e:	4652      	mov	r2, sl
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f ae6b 	beq.w	8008832 <_printf_float+0xc2>
 8008b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	f7f7 ffd0 	bl	8000b08 <__aeabi_dcmpeq>
 8008b68:	b9d8      	cbnz	r0, 8008ba2 <_printf_float+0x432>
 8008b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6c:	f108 0201 	add.w	r2, r8, #1
 8008b70:	3b01      	subs	r3, #1
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d10e      	bne.n	8008b9a <_printf_float+0x42a>
 8008b7c:	e659      	b.n	8008832 <_printf_float+0xc2>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4652      	mov	r2, sl
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae52 	beq.w	8008832 <_printf_float+0xc2>
 8008b8e:	f108 0801 	add.w	r8, r8, #1
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	3b01      	subs	r3, #1
 8008b96:	4543      	cmp	r3, r8
 8008b98:	dcf1      	bgt.n	8008b7e <_printf_float+0x40e>
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ba0:	e6dc      	b.n	800895c <_printf_float+0x1ec>
 8008ba2:	f04f 0800 	mov.w	r8, #0
 8008ba6:	f104 0a1a 	add.w	sl, r4, #26
 8008baa:	e7f2      	b.n	8008b92 <_printf_float+0x422>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4642      	mov	r2, r8
 8008bb0:	e7df      	b.n	8008b72 <_printf_float+0x402>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	464a      	mov	r2, r9
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f ae38 	beq.w	8008832 <_printf_float+0xc2>
 8008bc2:	f108 0801 	add.w	r8, r8, #1
 8008bc6:	68e3      	ldr	r3, [r4, #12]
 8008bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bca:	1a5b      	subs	r3, r3, r1
 8008bcc:	4543      	cmp	r3, r8
 8008bce:	dcf0      	bgt.n	8008bb2 <_printf_float+0x442>
 8008bd0:	e6fa      	b.n	80089c8 <_printf_float+0x258>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	f104 0919 	add.w	r9, r4, #25
 8008bda:	e7f4      	b.n	8008bc6 <_printf_float+0x456>

08008bdc <_printf_common>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	4616      	mov	r6, r2
 8008be2:	4699      	mov	r9, r3
 8008be4:	688a      	ldr	r2, [r1, #8]
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bfb8      	it	lt
 8008bf0:	4613      	movlt	r3, r2
 8008bf2:	6033      	str	r3, [r6, #0]
 8008bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b10a      	cbz	r2, 8008c02 <_printf_common+0x26>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	6033      	str	r3, [r6, #0]
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	0699      	lsls	r1, r3, #26
 8008c06:	bf42      	ittt	mi
 8008c08:	6833      	ldrmi	r3, [r6, #0]
 8008c0a:	3302      	addmi	r3, #2
 8008c0c:	6033      	strmi	r3, [r6, #0]
 8008c0e:	6825      	ldr	r5, [r4, #0]
 8008c10:	f015 0506 	ands.w	r5, r5, #6
 8008c14:	d106      	bne.n	8008c24 <_printf_common+0x48>
 8008c16:	f104 0a19 	add.w	sl, r4, #25
 8008c1a:	68e3      	ldr	r3, [r4, #12]
 8008c1c:	6832      	ldr	r2, [r6, #0]
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dc26      	bgt.n	8008c72 <_printf_common+0x96>
 8008c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c28:	1e13      	subs	r3, r2, #0
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	0692      	lsls	r2, r2, #26
 8008c32:	d42b      	bmi.n	8008c8c <_printf_common+0xb0>
 8008c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d01e      	beq.n	8008c80 <_printf_common+0xa4>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	68e5      	ldr	r5, [r4, #12]
 8008c46:	6832      	ldr	r2, [r6, #0]
 8008c48:	f003 0306 	and.w	r3, r3, #6
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	bf08      	it	eq
 8008c50:	1aad      	subeq	r5, r5, r2
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	6922      	ldr	r2, [r4, #16]
 8008c56:	bf0c      	ite	eq
 8008c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c5c:	2500      	movne	r5, #0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	bfc4      	itt	gt
 8008c62:	1a9b      	subgt	r3, r3, r2
 8008c64:	18ed      	addgt	r5, r5, r3
 8008c66:	2600      	movs	r6, #0
 8008c68:	341a      	adds	r4, #26
 8008c6a:	42b5      	cmp	r5, r6
 8008c6c:	d11a      	bne.n	8008ca4 <_printf_common+0xc8>
 8008c6e:	2000      	movs	r0, #0
 8008c70:	e008      	b.n	8008c84 <_printf_common+0xa8>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4652      	mov	r2, sl
 8008c76:	4649      	mov	r1, r9
 8008c78:	4638      	mov	r0, r7
 8008c7a:	47c0      	blx	r8
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d103      	bne.n	8008c88 <_printf_common+0xac>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	3501      	adds	r5, #1
 8008c8a:	e7c6      	b.n	8008c1a <_printf_common+0x3e>
 8008c8c:	18e1      	adds	r1, r4, r3
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	2030      	movs	r0, #48	; 0x30
 8008c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c96:	4422      	add	r2, r4
 8008c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	e7c7      	b.n	8008c34 <_printf_common+0x58>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4638      	mov	r0, r7
 8008cac:	47c0      	blx	r8
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d0e6      	beq.n	8008c80 <_printf_common+0xa4>
 8008cb2:	3601      	adds	r6, #1
 8008cb4:	e7d9      	b.n	8008c6a <_printf_common+0x8e>
	...

08008cb8 <_printf_i>:
 8008cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	7e0f      	ldrb	r7, [r1, #24]
 8008cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cc0:	2f78      	cmp	r7, #120	; 0x78
 8008cc2:	4691      	mov	r9, r2
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	469a      	mov	sl, r3
 8008cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cce:	d807      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cd0:	2f62      	cmp	r7, #98	; 0x62
 8008cd2:	d80a      	bhi.n	8008cea <_printf_i+0x32>
 8008cd4:	2f00      	cmp	r7, #0
 8008cd6:	f000 80d8 	beq.w	8008e8a <_printf_i+0x1d2>
 8008cda:	2f58      	cmp	r7, #88	; 0x58
 8008cdc:	f000 80a3 	beq.w	8008e26 <_printf_i+0x16e>
 8008ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce8:	e03a      	b.n	8008d60 <_printf_i+0xa8>
 8008cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cee:	2b15      	cmp	r3, #21
 8008cf0:	d8f6      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cf2:	a101      	add	r1, pc, #4	; (adr r1, 8008cf8 <_printf_i+0x40>)
 8008cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cf8:	08008d51 	.word	0x08008d51
 8008cfc:	08008d65 	.word	0x08008d65
 8008d00:	08008ce1 	.word	0x08008ce1
 8008d04:	08008ce1 	.word	0x08008ce1
 8008d08:	08008ce1 	.word	0x08008ce1
 8008d0c:	08008ce1 	.word	0x08008ce1
 8008d10:	08008d65 	.word	0x08008d65
 8008d14:	08008ce1 	.word	0x08008ce1
 8008d18:	08008ce1 	.word	0x08008ce1
 8008d1c:	08008ce1 	.word	0x08008ce1
 8008d20:	08008ce1 	.word	0x08008ce1
 8008d24:	08008e71 	.word	0x08008e71
 8008d28:	08008d95 	.word	0x08008d95
 8008d2c:	08008e53 	.word	0x08008e53
 8008d30:	08008ce1 	.word	0x08008ce1
 8008d34:	08008ce1 	.word	0x08008ce1
 8008d38:	08008e93 	.word	0x08008e93
 8008d3c:	08008ce1 	.word	0x08008ce1
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008ce1 	.word	0x08008ce1
 8008d48:	08008ce1 	.word	0x08008ce1
 8008d4c:	08008e5b 	.word	0x08008e5b
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	602a      	str	r2, [r5, #0]
 8008d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0a3      	b.n	8008eac <_printf_i+0x1f4>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	6829      	ldr	r1, [r5, #0]
 8008d68:	0606      	lsls	r6, r0, #24
 8008d6a:	f101 0304 	add.w	r3, r1, #4
 8008d6e:	d50a      	bpl.n	8008d86 <_printf_i+0xce>
 8008d70:	680e      	ldr	r6, [r1, #0]
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	da03      	bge.n	8008d80 <_printf_i+0xc8>
 8008d78:	232d      	movs	r3, #45	; 0x2d
 8008d7a:	4276      	negs	r6, r6
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d80:	485e      	ldr	r0, [pc, #376]	; (8008efc <_printf_i+0x244>)
 8008d82:	230a      	movs	r3, #10
 8008d84:	e019      	b.n	8008dba <_printf_i+0x102>
 8008d86:	680e      	ldr	r6, [r1, #0]
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d8e:	bf18      	it	ne
 8008d90:	b236      	sxthne	r6, r6
 8008d92:	e7ef      	b.n	8008d74 <_printf_i+0xbc>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6029      	str	r1, [r5, #0]
 8008d9c:	0601      	lsls	r1, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xec>
 8008da0:	681e      	ldr	r6, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xf2>
 8008da4:	0646      	lsls	r6, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe8>
 8008da8:	881e      	ldrh	r6, [r3, #0]
 8008daa:	4854      	ldr	r0, [pc, #336]	; (8008efc <_printf_i+0x244>)
 8008dac:	2f6f      	cmp	r7, #111	; 0x6f
 8008dae:	bf0c      	ite	eq
 8008db0:	2308      	moveq	r3, #8
 8008db2:	230a      	movne	r3, #10
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6865      	ldr	r5, [r4, #4]
 8008dbc:	60a5      	str	r5, [r4, #8]
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	bfa2      	ittt	ge
 8008dc2:	6821      	ldrge	r1, [r4, #0]
 8008dc4:	f021 0104 	bicge.w	r1, r1, #4
 8008dc8:	6021      	strge	r1, [r4, #0]
 8008dca:	b90e      	cbnz	r6, 8008dd0 <_printf_i+0x118>
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d04d      	beq.n	8008e6c <_printf_i+0x1b4>
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dda:	5dc7      	ldrb	r7, [r0, r7]
 8008ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de0:	4637      	mov	r7, r6
 8008de2:	42bb      	cmp	r3, r7
 8008de4:	460e      	mov	r6, r1
 8008de6:	d9f4      	bls.n	8008dd2 <_printf_i+0x11a>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10b      	bne.n	8008e04 <_printf_i+0x14c>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	07de      	lsls	r6, r3, #31
 8008df0:	d508      	bpl.n	8008e04 <_printf_i+0x14c>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	bfde      	ittt	le
 8008dfa:	2330      	movle	r3, #48	; 0x30
 8008dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e04:	1b52      	subs	r2, r2, r5
 8008e06:	6122      	str	r2, [r4, #16]
 8008e08:	f8cd a000 	str.w	sl, [sp]
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	aa03      	add	r2, sp, #12
 8008e10:	4621      	mov	r1, r4
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fee2 	bl	8008bdc <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d14c      	bne.n	8008eb6 <_printf_i+0x1fe>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	b004      	add	sp, #16
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	4835      	ldr	r0, [pc, #212]	; (8008efc <_printf_i+0x244>)
 8008e28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e2c:	6829      	ldr	r1, [r5, #0]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e34:	6029      	str	r1, [r5, #0]
 8008e36:	061d      	lsls	r5, r3, #24
 8008e38:	d514      	bpl.n	8008e64 <_printf_i+0x1ac>
 8008e3a:	07df      	lsls	r7, r3, #31
 8008e3c:	bf44      	itt	mi
 8008e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e42:	6023      	strmi	r3, [r4, #0]
 8008e44:	b91e      	cbnz	r6, 8008e4e <_printf_i+0x196>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f023 0320 	bic.w	r3, r3, #32
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	2310      	movs	r3, #16
 8008e50:	e7b0      	b.n	8008db4 <_printf_i+0xfc>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f043 0320 	orr.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2378      	movs	r3, #120	; 0x78
 8008e5c:	4828      	ldr	r0, [pc, #160]	; (8008f00 <_printf_i+0x248>)
 8008e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e62:	e7e3      	b.n	8008e2c <_printf_i+0x174>
 8008e64:	0659      	lsls	r1, r3, #25
 8008e66:	bf48      	it	mi
 8008e68:	b2b6      	uxthmi	r6, r6
 8008e6a:	e7e6      	b.n	8008e3a <_printf_i+0x182>
 8008e6c:	4615      	mov	r5, r2
 8008e6e:	e7bb      	b.n	8008de8 <_printf_i+0x130>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	6826      	ldr	r6, [r4, #0]
 8008e74:	6961      	ldr	r1, [r4, #20]
 8008e76:	1d18      	adds	r0, r3, #4
 8008e78:	6028      	str	r0, [r5, #0]
 8008e7a:	0635      	lsls	r5, r6, #24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0x1cc>
 8008e80:	6019      	str	r1, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0x1d2>
 8008e84:	0670      	lsls	r0, r6, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0x1c8>
 8008e88:	8019      	strh	r1, [r3, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	4615      	mov	r5, r2
 8008e90:	e7ba      	b.n	8008e08 <_printf_i+0x150>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	602a      	str	r2, [r5, #0]
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f7f7 f9be 	bl	8000220 <memchr>
 8008ea4:	b108      	cbz	r0, 8008eaa <_printf_i+0x1f2>
 8008ea6:	1b40      	subs	r0, r0, r5
 8008ea8:	6060      	str	r0, [r4, #4]
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb4:	e7a8      	b.n	8008e08 <_printf_i+0x150>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	462a      	mov	r2, r5
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d0ab      	beq.n	8008e1c <_printf_i+0x164>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	079b      	lsls	r3, r3, #30
 8008ec8:	d413      	bmi.n	8008ef2 <_printf_i+0x23a>
 8008eca:	68e0      	ldr	r0, [r4, #12]
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	bfb8      	it	lt
 8008ed2:	4618      	movlt	r0, r3
 8008ed4:	e7a4      	b.n	8008e20 <_printf_i+0x168>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4649      	mov	r1, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	47d0      	blx	sl
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d09b      	beq.n	8008e1c <_printf_i+0x164>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	9903      	ldr	r1, [sp, #12]
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dcf2      	bgt.n	8008ed6 <_printf_i+0x21e>
 8008ef0:	e7eb      	b.n	8008eca <_printf_i+0x212>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	f104 0619 	add.w	r6, r4, #25
 8008ef8:	e7f5      	b.n	8008ee6 <_printf_i+0x22e>
 8008efa:	bf00      	nop
 8008efc:	0800d112 	.word	0x0800d112
 8008f00:	0800d123 	.word	0x0800d123

08008f04 <_scanf_float>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	b087      	sub	sp, #28
 8008f0a:	4617      	mov	r7, r2
 8008f0c:	9303      	str	r3, [sp, #12]
 8008f0e:	688b      	ldr	r3, [r1, #8]
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f16:	bf83      	ittte	hi
 8008f18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f1c:	195b      	addhi	r3, r3, r5
 8008f1e:	9302      	strhi	r3, [sp, #8]
 8008f20:	2300      	movls	r3, #0
 8008f22:	bf86      	itte	hi
 8008f24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f28:	608b      	strhi	r3, [r1, #8]
 8008f2a:	9302      	strls	r3, [sp, #8]
 8008f2c:	680b      	ldr	r3, [r1, #0]
 8008f2e:	468b      	mov	fp, r1
 8008f30:	2500      	movs	r5, #0
 8008f32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f36:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f3e:	4680      	mov	r8, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	465e      	mov	r6, fp
 8008f44:	46aa      	mov	sl, r5
 8008f46:	46a9      	mov	r9, r5
 8008f48:	9501      	str	r5, [sp, #4]
 8008f4a:	68a2      	ldr	r2, [r4, #8]
 8008f4c:	b152      	cbz	r2, 8008f64 <_scanf_float+0x60>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b4e      	cmp	r3, #78	; 0x4e
 8008f54:	d864      	bhi.n	8009020 <_scanf_float+0x11c>
 8008f56:	2b40      	cmp	r3, #64	; 0x40
 8008f58:	d83c      	bhi.n	8008fd4 <_scanf_float+0xd0>
 8008f5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f5e:	b2c8      	uxtb	r0, r1
 8008f60:	280e      	cmp	r0, #14
 8008f62:	d93a      	bls.n	8008fda <_scanf_float+0xd6>
 8008f64:	f1b9 0f00 	cmp.w	r9, #0
 8008f68:	d003      	beq.n	8008f72 <_scanf_float+0x6e>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f76:	f1ba 0f01 	cmp.w	sl, #1
 8008f7a:	f200 8113 	bhi.w	80091a4 <_scanf_float+0x2a0>
 8008f7e:	455e      	cmp	r6, fp
 8008f80:	f200 8105 	bhi.w	800918e <_scanf_float+0x28a>
 8008f84:	2501      	movs	r5, #1
 8008f86:	4628      	mov	r0, r5
 8008f88:	b007      	add	sp, #28
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f92:	2a0d      	cmp	r2, #13
 8008f94:	d8e6      	bhi.n	8008f64 <_scanf_float+0x60>
 8008f96:	a101      	add	r1, pc, #4	; (adr r1, 8008f9c <_scanf_float+0x98>)
 8008f98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f9c:	080090db 	.word	0x080090db
 8008fa0:	08008f65 	.word	0x08008f65
 8008fa4:	08008f65 	.word	0x08008f65
 8008fa8:	08008f65 	.word	0x08008f65
 8008fac:	0800913b 	.word	0x0800913b
 8008fb0:	08009113 	.word	0x08009113
 8008fb4:	08008f65 	.word	0x08008f65
 8008fb8:	08008f65 	.word	0x08008f65
 8008fbc:	080090e9 	.word	0x080090e9
 8008fc0:	08008f65 	.word	0x08008f65
 8008fc4:	08008f65 	.word	0x08008f65
 8008fc8:	08008f65 	.word	0x08008f65
 8008fcc:	08008f65 	.word	0x08008f65
 8008fd0:	080090a1 	.word	0x080090a1
 8008fd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008fd8:	e7db      	b.n	8008f92 <_scanf_float+0x8e>
 8008fda:	290e      	cmp	r1, #14
 8008fdc:	d8c2      	bhi.n	8008f64 <_scanf_float+0x60>
 8008fde:	a001      	add	r0, pc, #4	; (adr r0, 8008fe4 <_scanf_float+0xe0>)
 8008fe0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008fe4:	08009093 	.word	0x08009093
 8008fe8:	08008f65 	.word	0x08008f65
 8008fec:	08009093 	.word	0x08009093
 8008ff0:	08009127 	.word	0x08009127
 8008ff4:	08008f65 	.word	0x08008f65
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	0800907d 	.word	0x0800907d
 8009000:	0800907d 	.word	0x0800907d
 8009004:	0800907d 	.word	0x0800907d
 8009008:	0800907d 	.word	0x0800907d
 800900c:	0800907d 	.word	0x0800907d
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800907d 	.word	0x0800907d
 8009018:	0800907d 	.word	0x0800907d
 800901c:	0800907d 	.word	0x0800907d
 8009020:	2b6e      	cmp	r3, #110	; 0x6e
 8009022:	d809      	bhi.n	8009038 <_scanf_float+0x134>
 8009024:	2b60      	cmp	r3, #96	; 0x60
 8009026:	d8b2      	bhi.n	8008f8e <_scanf_float+0x8a>
 8009028:	2b54      	cmp	r3, #84	; 0x54
 800902a:	d077      	beq.n	800911c <_scanf_float+0x218>
 800902c:	2b59      	cmp	r3, #89	; 0x59
 800902e:	d199      	bne.n	8008f64 <_scanf_float+0x60>
 8009030:	2d07      	cmp	r5, #7
 8009032:	d197      	bne.n	8008f64 <_scanf_float+0x60>
 8009034:	2508      	movs	r5, #8
 8009036:	e029      	b.n	800908c <_scanf_float+0x188>
 8009038:	2b74      	cmp	r3, #116	; 0x74
 800903a:	d06f      	beq.n	800911c <_scanf_float+0x218>
 800903c:	2b79      	cmp	r3, #121	; 0x79
 800903e:	e7f6      	b.n	800902e <_scanf_float+0x12a>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	05c8      	lsls	r0, r1, #23
 8009044:	d51a      	bpl.n	800907c <_scanf_float+0x178>
 8009046:	9b02      	ldr	r3, [sp, #8]
 8009048:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800904c:	6021      	str	r1, [r4, #0]
 800904e:	f109 0901 	add.w	r9, r9, #1
 8009052:	b11b      	cbz	r3, 800905c <_scanf_float+0x158>
 8009054:	3b01      	subs	r3, #1
 8009056:	3201      	adds	r2, #1
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	60a2      	str	r2, [r4, #8]
 800905c:	68a3      	ldr	r3, [r4, #8]
 800905e:	3b01      	subs	r3, #1
 8009060:	60a3      	str	r3, [r4, #8]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	3301      	adds	r3, #1
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3b01      	subs	r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	607b      	str	r3, [r7, #4]
 8009070:	f340 8084 	ble.w	800917c <_scanf_float+0x278>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	e766      	b.n	8008f4a <_scanf_float+0x46>
 800907c:	eb1a 0f05 	cmn.w	sl, r5
 8009080:	f47f af70 	bne.w	8008f64 <_scanf_float+0x60>
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800908a:	6022      	str	r2, [r4, #0]
 800908c:	f806 3b01 	strb.w	r3, [r6], #1
 8009090:	e7e4      	b.n	800905c <_scanf_float+0x158>
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	0610      	lsls	r0, r2, #24
 8009096:	f57f af65 	bpl.w	8008f64 <_scanf_float+0x60>
 800909a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800909e:	e7f4      	b.n	800908a <_scanf_float+0x186>
 80090a0:	f1ba 0f00 	cmp.w	sl, #0
 80090a4:	d10e      	bne.n	80090c4 <_scanf_float+0x1c0>
 80090a6:	f1b9 0f00 	cmp.w	r9, #0
 80090aa:	d10e      	bne.n	80090ca <_scanf_float+0x1c6>
 80090ac:	6822      	ldr	r2, [r4, #0]
 80090ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090b6:	d108      	bne.n	80090ca <_scanf_float+0x1c6>
 80090b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	f04f 0a01 	mov.w	sl, #1
 80090c2:	e7e3      	b.n	800908c <_scanf_float+0x188>
 80090c4:	f1ba 0f02 	cmp.w	sl, #2
 80090c8:	d055      	beq.n	8009176 <_scanf_float+0x272>
 80090ca:	2d01      	cmp	r5, #1
 80090cc:	d002      	beq.n	80090d4 <_scanf_float+0x1d0>
 80090ce:	2d04      	cmp	r5, #4
 80090d0:	f47f af48 	bne.w	8008f64 <_scanf_float+0x60>
 80090d4:	3501      	adds	r5, #1
 80090d6:	b2ed      	uxtb	r5, r5
 80090d8:	e7d8      	b.n	800908c <_scanf_float+0x188>
 80090da:	f1ba 0f01 	cmp.w	sl, #1
 80090de:	f47f af41 	bne.w	8008f64 <_scanf_float+0x60>
 80090e2:	f04f 0a02 	mov.w	sl, #2
 80090e6:	e7d1      	b.n	800908c <_scanf_float+0x188>
 80090e8:	b97d      	cbnz	r5, 800910a <_scanf_float+0x206>
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	f47f af3c 	bne.w	8008f6a <_scanf_float+0x66>
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090fc:	f47f af39 	bne.w	8008f72 <_scanf_float+0x6e>
 8009100:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	2501      	movs	r5, #1
 8009108:	e7c0      	b.n	800908c <_scanf_float+0x188>
 800910a:	2d03      	cmp	r5, #3
 800910c:	d0e2      	beq.n	80090d4 <_scanf_float+0x1d0>
 800910e:	2d05      	cmp	r5, #5
 8009110:	e7de      	b.n	80090d0 <_scanf_float+0x1cc>
 8009112:	2d02      	cmp	r5, #2
 8009114:	f47f af26 	bne.w	8008f64 <_scanf_float+0x60>
 8009118:	2503      	movs	r5, #3
 800911a:	e7b7      	b.n	800908c <_scanf_float+0x188>
 800911c:	2d06      	cmp	r5, #6
 800911e:	f47f af21 	bne.w	8008f64 <_scanf_float+0x60>
 8009122:	2507      	movs	r5, #7
 8009124:	e7b2      	b.n	800908c <_scanf_float+0x188>
 8009126:	6822      	ldr	r2, [r4, #0]
 8009128:	0591      	lsls	r1, r2, #22
 800912a:	f57f af1b 	bpl.w	8008f64 <_scanf_float+0x60>
 800912e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009132:	6022      	str	r2, [r4, #0]
 8009134:	f8cd 9004 	str.w	r9, [sp, #4]
 8009138:	e7a8      	b.n	800908c <_scanf_float+0x188>
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009140:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009144:	d006      	beq.n	8009154 <_scanf_float+0x250>
 8009146:	0550      	lsls	r0, r2, #21
 8009148:	f57f af0c 	bpl.w	8008f64 <_scanf_float+0x60>
 800914c:	f1b9 0f00 	cmp.w	r9, #0
 8009150:	f43f af0f 	beq.w	8008f72 <_scanf_float+0x6e>
 8009154:	0591      	lsls	r1, r2, #22
 8009156:	bf58      	it	pl
 8009158:	9901      	ldrpl	r1, [sp, #4]
 800915a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800915e:	bf58      	it	pl
 8009160:	eba9 0101 	subpl.w	r1, r9, r1
 8009164:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009168:	bf58      	it	pl
 800916a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800916e:	6022      	str	r2, [r4, #0]
 8009170:	f04f 0900 	mov.w	r9, #0
 8009174:	e78a      	b.n	800908c <_scanf_float+0x188>
 8009176:	f04f 0a03 	mov.w	sl, #3
 800917a:	e787      	b.n	800908c <_scanf_float+0x188>
 800917c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009180:	4639      	mov	r1, r7
 8009182:	4640      	mov	r0, r8
 8009184:	4798      	blx	r3
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f aedf 	beq.w	8008f4a <_scanf_float+0x46>
 800918c:	e6ea      	b.n	8008f64 <_scanf_float+0x60>
 800918e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009196:	463a      	mov	r2, r7
 8009198:	4640      	mov	r0, r8
 800919a:	4798      	blx	r3
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	3b01      	subs	r3, #1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	e6ec      	b.n	8008f7e <_scanf_float+0x7a>
 80091a4:	1e6b      	subs	r3, r5, #1
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d825      	bhi.n	80091f6 <_scanf_float+0x2f2>
 80091aa:	2d02      	cmp	r5, #2
 80091ac:	d836      	bhi.n	800921c <_scanf_float+0x318>
 80091ae:	455e      	cmp	r6, fp
 80091b0:	f67f aee8 	bls.w	8008f84 <_scanf_float+0x80>
 80091b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091bc:	463a      	mov	r2, r7
 80091be:	4640      	mov	r0, r8
 80091c0:	4798      	blx	r3
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	e7f1      	b.n	80091ae <_scanf_float+0x2aa>
 80091ca:	9802      	ldr	r0, [sp, #8]
 80091cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091d4:	9002      	str	r0, [sp, #8]
 80091d6:	463a      	mov	r2, r7
 80091d8:	4640      	mov	r0, r8
 80091da:	4798      	blx	r3
 80091dc:	6923      	ldr	r3, [r4, #16]
 80091de:	3b01      	subs	r3, #1
 80091e0:	6123      	str	r3, [r4, #16]
 80091e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e6:	fa5f fa8a 	uxtb.w	sl, sl
 80091ea:	f1ba 0f02 	cmp.w	sl, #2
 80091ee:	d1ec      	bne.n	80091ca <_scanf_float+0x2c6>
 80091f0:	3d03      	subs	r5, #3
 80091f2:	b2ed      	uxtb	r5, r5
 80091f4:	1b76      	subs	r6, r6, r5
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	05da      	lsls	r2, r3, #23
 80091fa:	d52f      	bpl.n	800925c <_scanf_float+0x358>
 80091fc:	055b      	lsls	r3, r3, #21
 80091fe:	d510      	bpl.n	8009222 <_scanf_float+0x31e>
 8009200:	455e      	cmp	r6, fp
 8009202:	f67f aebf 	bls.w	8008f84 <_scanf_float+0x80>
 8009206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800920a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800920e:	463a      	mov	r2, r7
 8009210:	4640      	mov	r0, r8
 8009212:	4798      	blx	r3
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	3b01      	subs	r3, #1
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	e7f1      	b.n	8009200 <_scanf_float+0x2fc>
 800921c:	46aa      	mov	sl, r5
 800921e:	9602      	str	r6, [sp, #8]
 8009220:	e7df      	b.n	80091e2 <_scanf_float+0x2de>
 8009222:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	2965      	cmp	r1, #101	; 0x65
 800922a:	f103 33ff 	add.w	r3, r3, #4294967295
 800922e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	d00c      	beq.n	8009250 <_scanf_float+0x34c>
 8009236:	2945      	cmp	r1, #69	; 0x45
 8009238:	d00a      	beq.n	8009250 <_scanf_float+0x34c>
 800923a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800923e:	463a      	mov	r2, r7
 8009240:	4640      	mov	r0, r8
 8009242:	4798      	blx	r3
 8009244:	6923      	ldr	r3, [r4, #16]
 8009246:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800924a:	3b01      	subs	r3, #1
 800924c:	1eb5      	subs	r5, r6, #2
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009254:	463a      	mov	r2, r7
 8009256:	4640      	mov	r0, r8
 8009258:	4798      	blx	r3
 800925a:	462e      	mov	r6, r5
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	f015 0510 	ands.w	r5, r5, #16
 8009262:	d159      	bne.n	8009318 <_scanf_float+0x414>
 8009264:	7035      	strb	r5, [r6, #0]
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800926c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009270:	d11b      	bne.n	80092aa <_scanf_float+0x3a6>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	454b      	cmp	r3, r9
 8009276:	eba3 0209 	sub.w	r2, r3, r9
 800927a:	d123      	bne.n	80092c4 <_scanf_float+0x3c0>
 800927c:	2200      	movs	r2, #0
 800927e:	4659      	mov	r1, fp
 8009280:	4640      	mov	r0, r8
 8009282:	f000 fe97 	bl	8009fb4 <_strtod_r>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	f012 0f02 	tst.w	r2, #2
 800928e:	ec57 6b10 	vmov	r6, r7, d0
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	d021      	beq.n	80092da <_scanf_float+0x3d6>
 8009296:	9903      	ldr	r1, [sp, #12]
 8009298:	1d1a      	adds	r2, r3, #4
 800929a:	600a      	str	r2, [r1, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	e9c3 6700 	strd	r6, r7, [r3]
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	3301      	adds	r3, #1
 80092a6:	60e3      	str	r3, [r4, #12]
 80092a8:	e66d      	b.n	8008f86 <_scanf_float+0x82>
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0e5      	beq.n	800927c <_scanf_float+0x378>
 80092b0:	9905      	ldr	r1, [sp, #20]
 80092b2:	230a      	movs	r3, #10
 80092b4:	462a      	mov	r2, r5
 80092b6:	3101      	adds	r1, #1
 80092b8:	4640      	mov	r0, r8
 80092ba:	f000 ff03 	bl	800a0c4 <_strtol_r>
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	9e05      	ldr	r6, [sp, #20]
 80092c2:	1ac2      	subs	r2, r0, r3
 80092c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092c8:	429e      	cmp	r6, r3
 80092ca:	bf28      	it	cs
 80092cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092d0:	4912      	ldr	r1, [pc, #72]	; (800931c <_scanf_float+0x418>)
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 f82c 	bl	8009330 <siprintf>
 80092d8:	e7d0      	b.n	800927c <_scanf_float+0x378>
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	f012 0f04 	tst.w	r2, #4
 80092e0:	f103 0204 	add.w	r2, r3, #4
 80092e4:	600a      	str	r2, [r1, #0]
 80092e6:	d1d9      	bne.n	800929c <_scanf_float+0x398>
 80092e8:	f8d3 8000 	ldr.w	r8, [r3]
 80092ec:	ee10 2a10 	vmov	r2, s0
 80092f0:	ee10 0a10 	vmov	r0, s0
 80092f4:	463b      	mov	r3, r7
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f7 fc38 	bl	8000b6c <__aeabi_dcmpun>
 80092fc:	b128      	cbz	r0, 800930a <_scanf_float+0x406>
 80092fe:	4808      	ldr	r0, [pc, #32]	; (8009320 <_scanf_float+0x41c>)
 8009300:	f000 f810 	bl	8009324 <nanf>
 8009304:	ed88 0a00 	vstr	s0, [r8]
 8009308:	e7cb      	b.n	80092a2 <_scanf_float+0x39e>
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f7 fc8b 	bl	8000c28 <__aeabi_d2f>
 8009312:	f8c8 0000 	str.w	r0, [r8]
 8009316:	e7c4      	b.n	80092a2 <_scanf_float+0x39e>
 8009318:	2500      	movs	r5, #0
 800931a:	e634      	b.n	8008f86 <_scanf_float+0x82>
 800931c:	0800d134 	.word	0x0800d134
 8009320:	0800d540 	.word	0x0800d540

08009324 <nanf>:
 8009324:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800932c <nanf+0x8>
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	7fc00000 	.word	0x7fc00000

08009330 <siprintf>:
 8009330:	b40e      	push	{r1, r2, r3}
 8009332:	b500      	push	{lr}
 8009334:	b09c      	sub	sp, #112	; 0x70
 8009336:	ab1d      	add	r3, sp, #116	; 0x74
 8009338:	9002      	str	r0, [sp, #8]
 800933a:	9006      	str	r0, [sp, #24]
 800933c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009340:	4809      	ldr	r0, [pc, #36]	; (8009368 <siprintf+0x38>)
 8009342:	9107      	str	r1, [sp, #28]
 8009344:	9104      	str	r1, [sp, #16]
 8009346:	4909      	ldr	r1, [pc, #36]	; (800936c <siprintf+0x3c>)
 8009348:	f853 2b04 	ldr.w	r2, [r3], #4
 800934c:	9105      	str	r1, [sp, #20]
 800934e:	6800      	ldr	r0, [r0, #0]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	a902      	add	r1, sp, #8
 8009354:	f002 ff02 	bl	800c15c <_svfiprintf_r>
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	b01c      	add	sp, #112	; 0x70
 8009360:	f85d eb04 	ldr.w	lr, [sp], #4
 8009364:	b003      	add	sp, #12
 8009366:	4770      	bx	lr
 8009368:	20000018 	.word	0x20000018
 800936c:	ffff0208 	.word	0xffff0208

08009370 <sulp>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	4604      	mov	r4, r0
 8009374:	460d      	mov	r5, r1
 8009376:	ec45 4b10 	vmov	d0, r4, r5
 800937a:	4616      	mov	r6, r2
 800937c:	f002 fc4c 	bl	800bc18 <__ulp>
 8009380:	ec51 0b10 	vmov	r0, r1, d0
 8009384:	b17e      	cbz	r6, 80093a6 <sulp+0x36>
 8009386:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800938a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd09      	ble.n	80093a6 <sulp+0x36>
 8009392:	051b      	lsls	r3, r3, #20
 8009394:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009398:	2400      	movs	r4, #0
 800939a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800939e:	4622      	mov	r2, r4
 80093a0:	462b      	mov	r3, r5
 80093a2:	f7f7 f949 	bl	8000638 <__aeabi_dmul>
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <_strtod_l>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	ed2d 8b02 	vpush	{d8}
 80093b0:	b09d      	sub	sp, #116	; 0x74
 80093b2:	461f      	mov	r7, r3
 80093b4:	2300      	movs	r3, #0
 80093b6:	9318      	str	r3, [sp, #96]	; 0x60
 80093b8:	4ba2      	ldr	r3, [pc, #648]	; (8009644 <_strtod_l+0x29c>)
 80093ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9305      	str	r3, [sp, #20]
 80093c0:	4604      	mov	r4, r0
 80093c2:	4618      	mov	r0, r3
 80093c4:	4688      	mov	r8, r1
 80093c6:	f7f6 ff23 	bl	8000210 <strlen>
 80093ca:	f04f 0a00 	mov.w	sl, #0
 80093ce:	4605      	mov	r5, r0
 80093d0:	f04f 0b00 	mov.w	fp, #0
 80093d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	2a2b      	cmp	r2, #43	; 0x2b
 80093de:	d04e      	beq.n	800947e <_strtod_l+0xd6>
 80093e0:	d83b      	bhi.n	800945a <_strtod_l+0xb2>
 80093e2:	2a0d      	cmp	r2, #13
 80093e4:	d834      	bhi.n	8009450 <_strtod_l+0xa8>
 80093e6:	2a08      	cmp	r2, #8
 80093e8:	d834      	bhi.n	8009454 <_strtod_l+0xac>
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	d03e      	beq.n	800946c <_strtod_l+0xc4>
 80093ee:	2300      	movs	r3, #0
 80093f0:	930a      	str	r3, [sp, #40]	; 0x28
 80093f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80093f4:	7833      	ldrb	r3, [r6, #0]
 80093f6:	2b30      	cmp	r3, #48	; 0x30
 80093f8:	f040 80b0 	bne.w	800955c <_strtod_l+0x1b4>
 80093fc:	7873      	ldrb	r3, [r6, #1]
 80093fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009402:	2b58      	cmp	r3, #88	; 0x58
 8009404:	d168      	bne.n	80094d8 <_strtod_l+0x130>
 8009406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	ab18      	add	r3, sp, #96	; 0x60
 800940c:	9702      	str	r7, [sp, #8]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	4a8d      	ldr	r2, [pc, #564]	; (8009648 <_strtod_l+0x2a0>)
 8009412:	ab19      	add	r3, sp, #100	; 0x64
 8009414:	a917      	add	r1, sp, #92	; 0x5c
 8009416:	4620      	mov	r0, r4
 8009418:	f001 fd58 	bl	800aecc <__gethex>
 800941c:	f010 0707 	ands.w	r7, r0, #7
 8009420:	4605      	mov	r5, r0
 8009422:	d005      	beq.n	8009430 <_strtod_l+0x88>
 8009424:	2f06      	cmp	r7, #6
 8009426:	d12c      	bne.n	8009482 <_strtod_l+0xda>
 8009428:	3601      	adds	r6, #1
 800942a:	2300      	movs	r3, #0
 800942c:	9617      	str	r6, [sp, #92]	; 0x5c
 800942e:	930a      	str	r3, [sp, #40]	; 0x28
 8009430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 8590 	bne.w	8009f58 <_strtod_l+0xbb0>
 8009438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943a:	b1eb      	cbz	r3, 8009478 <_strtod_l+0xd0>
 800943c:	4652      	mov	r2, sl
 800943e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009442:	ec43 2b10 	vmov	d0, r2, r3
 8009446:	b01d      	add	sp, #116	; 0x74
 8009448:	ecbd 8b02 	vpop	{d8}
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	2a20      	cmp	r2, #32
 8009452:	d1cc      	bne.n	80093ee <_strtod_l+0x46>
 8009454:	3301      	adds	r3, #1
 8009456:	9317      	str	r3, [sp, #92]	; 0x5c
 8009458:	e7be      	b.n	80093d8 <_strtod_l+0x30>
 800945a:	2a2d      	cmp	r2, #45	; 0x2d
 800945c:	d1c7      	bne.n	80093ee <_strtod_l+0x46>
 800945e:	2201      	movs	r2, #1
 8009460:	920a      	str	r2, [sp, #40]	; 0x28
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	9217      	str	r2, [sp, #92]	; 0x5c
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1c2      	bne.n	80093f2 <_strtod_l+0x4a>
 800946c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800946e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 856e 	bne.w	8009f54 <_strtod_l+0xbac>
 8009478:	4652      	mov	r2, sl
 800947a:	465b      	mov	r3, fp
 800947c:	e7e1      	b.n	8009442 <_strtod_l+0x9a>
 800947e:	2200      	movs	r2, #0
 8009480:	e7ee      	b.n	8009460 <_strtod_l+0xb8>
 8009482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009484:	b13a      	cbz	r2, 8009496 <_strtod_l+0xee>
 8009486:	2135      	movs	r1, #53	; 0x35
 8009488:	a81a      	add	r0, sp, #104	; 0x68
 800948a:	f002 fcd0 	bl	800be2e <__copybits>
 800948e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009490:	4620      	mov	r0, r4
 8009492:	f002 f88f 	bl	800b5b4 <_Bfree>
 8009496:	3f01      	subs	r7, #1
 8009498:	2f04      	cmp	r7, #4
 800949a:	d806      	bhi.n	80094aa <_strtod_l+0x102>
 800949c:	e8df f007 	tbb	[pc, r7]
 80094a0:	1714030a 	.word	0x1714030a
 80094a4:	0a          	.byte	0x0a
 80094a5:	00          	.byte	0x00
 80094a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80094aa:	0728      	lsls	r0, r5, #28
 80094ac:	d5c0      	bpl.n	8009430 <_strtod_l+0x88>
 80094ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80094b2:	e7bd      	b.n	8009430 <_strtod_l+0x88>
 80094b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80094b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094c6:	e7f0      	b.n	80094aa <_strtod_l+0x102>
 80094c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800964c <_strtod_l+0x2a4>
 80094cc:	e7ed      	b.n	80094aa <_strtod_l+0x102>
 80094ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80094d2:	f04f 3aff 	mov.w	sl, #4294967295
 80094d6:	e7e8      	b.n	80094aa <_strtod_l+0x102>
 80094d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	d0f9      	beq.n	80094d8 <_strtod_l+0x130>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0a3      	beq.n	8009430 <_strtod_l+0x88>
 80094e8:	2301      	movs	r3, #1
 80094ea:	f04f 0900 	mov.w	r9, #0
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f2:	9308      	str	r3, [sp, #32]
 80094f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80094f8:	464f      	mov	r7, r9
 80094fa:	220a      	movs	r2, #10
 80094fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80094fe:	7806      	ldrb	r6, [r0, #0]
 8009500:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009504:	b2d9      	uxtb	r1, r3
 8009506:	2909      	cmp	r1, #9
 8009508:	d92a      	bls.n	8009560 <_strtod_l+0x1b8>
 800950a:	9905      	ldr	r1, [sp, #20]
 800950c:	462a      	mov	r2, r5
 800950e:	f002 ff3f 	bl	800c390 <strncmp>
 8009512:	b398      	cbz	r0, 800957c <_strtod_l+0x1d4>
 8009514:	2000      	movs	r0, #0
 8009516:	4632      	mov	r2, r6
 8009518:	463d      	mov	r5, r7
 800951a:	9005      	str	r0, [sp, #20]
 800951c:	4603      	mov	r3, r0
 800951e:	2a65      	cmp	r2, #101	; 0x65
 8009520:	d001      	beq.n	8009526 <_strtod_l+0x17e>
 8009522:	2a45      	cmp	r2, #69	; 0x45
 8009524:	d118      	bne.n	8009558 <_strtod_l+0x1b0>
 8009526:	b91d      	cbnz	r5, 8009530 <_strtod_l+0x188>
 8009528:	9a04      	ldr	r2, [sp, #16]
 800952a:	4302      	orrs	r2, r0
 800952c:	d09e      	beq.n	800946c <_strtod_l+0xc4>
 800952e:	2500      	movs	r5, #0
 8009530:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009534:	f108 0201 	add.w	r2, r8, #1
 8009538:	9217      	str	r2, [sp, #92]	; 0x5c
 800953a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800953e:	2a2b      	cmp	r2, #43	; 0x2b
 8009540:	d075      	beq.n	800962e <_strtod_l+0x286>
 8009542:	2a2d      	cmp	r2, #45	; 0x2d
 8009544:	d07b      	beq.n	800963e <_strtod_l+0x296>
 8009546:	f04f 0c00 	mov.w	ip, #0
 800954a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800954e:	2909      	cmp	r1, #9
 8009550:	f240 8082 	bls.w	8009658 <_strtod_l+0x2b0>
 8009554:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009558:	2600      	movs	r6, #0
 800955a:	e09d      	b.n	8009698 <_strtod_l+0x2f0>
 800955c:	2300      	movs	r3, #0
 800955e:	e7c4      	b.n	80094ea <_strtod_l+0x142>
 8009560:	2f08      	cmp	r7, #8
 8009562:	bfd8      	it	le
 8009564:	9907      	ldrle	r1, [sp, #28]
 8009566:	f100 0001 	add.w	r0, r0, #1
 800956a:	bfda      	itte	le
 800956c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009570:	9307      	strle	r3, [sp, #28]
 8009572:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009576:	3701      	adds	r7, #1
 8009578:	9017      	str	r0, [sp, #92]	; 0x5c
 800957a:	e7bf      	b.n	80094fc <_strtod_l+0x154>
 800957c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800957e:	195a      	adds	r2, r3, r5
 8009580:	9217      	str	r2, [sp, #92]	; 0x5c
 8009582:	5d5a      	ldrb	r2, [r3, r5]
 8009584:	2f00      	cmp	r7, #0
 8009586:	d037      	beq.n	80095f8 <_strtod_l+0x250>
 8009588:	9005      	str	r0, [sp, #20]
 800958a:	463d      	mov	r5, r7
 800958c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009590:	2b09      	cmp	r3, #9
 8009592:	d912      	bls.n	80095ba <_strtod_l+0x212>
 8009594:	2301      	movs	r3, #1
 8009596:	e7c2      	b.n	800951e <_strtod_l+0x176>
 8009598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	9217      	str	r2, [sp, #92]	; 0x5c
 800959e:	785a      	ldrb	r2, [r3, #1]
 80095a0:	3001      	adds	r0, #1
 80095a2:	2a30      	cmp	r2, #48	; 0x30
 80095a4:	d0f8      	beq.n	8009598 <_strtod_l+0x1f0>
 80095a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	f200 84d9 	bhi.w	8009f62 <_strtod_l+0xbba>
 80095b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095b2:	9005      	str	r0, [sp, #20]
 80095b4:	2000      	movs	r0, #0
 80095b6:	9308      	str	r3, [sp, #32]
 80095b8:	4605      	mov	r5, r0
 80095ba:	3a30      	subs	r2, #48	; 0x30
 80095bc:	f100 0301 	add.w	r3, r0, #1
 80095c0:	d014      	beq.n	80095ec <_strtod_l+0x244>
 80095c2:	9905      	ldr	r1, [sp, #20]
 80095c4:	4419      	add	r1, r3
 80095c6:	9105      	str	r1, [sp, #20]
 80095c8:	462b      	mov	r3, r5
 80095ca:	eb00 0e05 	add.w	lr, r0, r5
 80095ce:	210a      	movs	r1, #10
 80095d0:	4573      	cmp	r3, lr
 80095d2:	d113      	bne.n	80095fc <_strtod_l+0x254>
 80095d4:	182b      	adds	r3, r5, r0
 80095d6:	2b08      	cmp	r3, #8
 80095d8:	f105 0501 	add.w	r5, r5, #1
 80095dc:	4405      	add	r5, r0
 80095de:	dc1c      	bgt.n	800961a <_strtod_l+0x272>
 80095e0:	9907      	ldr	r1, [sp, #28]
 80095e2:	230a      	movs	r3, #10
 80095e4:	fb03 2301 	mla	r3, r3, r1, r2
 80095e8:	9307      	str	r3, [sp, #28]
 80095ea:	2300      	movs	r3, #0
 80095ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095ee:	1c51      	adds	r1, r2, #1
 80095f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80095f2:	7852      	ldrb	r2, [r2, #1]
 80095f4:	4618      	mov	r0, r3
 80095f6:	e7c9      	b.n	800958c <_strtod_l+0x1e4>
 80095f8:	4638      	mov	r0, r7
 80095fa:	e7d2      	b.n	80095a2 <_strtod_l+0x1fa>
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	dc04      	bgt.n	800960a <_strtod_l+0x262>
 8009600:	9e07      	ldr	r6, [sp, #28]
 8009602:	434e      	muls	r6, r1
 8009604:	9607      	str	r6, [sp, #28]
 8009606:	3301      	adds	r3, #1
 8009608:	e7e2      	b.n	80095d0 <_strtod_l+0x228>
 800960a:	f103 0c01 	add.w	ip, r3, #1
 800960e:	f1bc 0f10 	cmp.w	ip, #16
 8009612:	bfd8      	it	le
 8009614:	fb01 f909 	mulle.w	r9, r1, r9
 8009618:	e7f5      	b.n	8009606 <_strtod_l+0x25e>
 800961a:	2d10      	cmp	r5, #16
 800961c:	bfdc      	itt	le
 800961e:	230a      	movle	r3, #10
 8009620:	fb03 2909 	mlale	r9, r3, r9, r2
 8009624:	e7e1      	b.n	80095ea <_strtod_l+0x242>
 8009626:	2300      	movs	r3, #0
 8009628:	9305      	str	r3, [sp, #20]
 800962a:	2301      	movs	r3, #1
 800962c:	e77c      	b.n	8009528 <_strtod_l+0x180>
 800962e:	f04f 0c00 	mov.w	ip, #0
 8009632:	f108 0202 	add.w	r2, r8, #2
 8009636:	9217      	str	r2, [sp, #92]	; 0x5c
 8009638:	f898 2002 	ldrb.w	r2, [r8, #2]
 800963c:	e785      	b.n	800954a <_strtod_l+0x1a2>
 800963e:	f04f 0c01 	mov.w	ip, #1
 8009642:	e7f6      	b.n	8009632 <_strtod_l+0x28a>
 8009644:	0800d388 	.word	0x0800d388
 8009648:	0800d13c 	.word	0x0800d13c
 800964c:	7ff00000 	.word	0x7ff00000
 8009650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009652:	1c51      	adds	r1, r2, #1
 8009654:	9117      	str	r1, [sp, #92]	; 0x5c
 8009656:	7852      	ldrb	r2, [r2, #1]
 8009658:	2a30      	cmp	r2, #48	; 0x30
 800965a:	d0f9      	beq.n	8009650 <_strtod_l+0x2a8>
 800965c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009660:	2908      	cmp	r1, #8
 8009662:	f63f af79 	bhi.w	8009558 <_strtod_l+0x1b0>
 8009666:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800966a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800966c:	9206      	str	r2, [sp, #24]
 800966e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009670:	1c51      	adds	r1, r2, #1
 8009672:	9117      	str	r1, [sp, #92]	; 0x5c
 8009674:	7852      	ldrb	r2, [r2, #1]
 8009676:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800967a:	2e09      	cmp	r6, #9
 800967c:	d937      	bls.n	80096ee <_strtod_l+0x346>
 800967e:	9e06      	ldr	r6, [sp, #24]
 8009680:	1b89      	subs	r1, r1, r6
 8009682:	2908      	cmp	r1, #8
 8009684:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009688:	dc02      	bgt.n	8009690 <_strtod_l+0x2e8>
 800968a:	4576      	cmp	r6, lr
 800968c:	bfa8      	it	ge
 800968e:	4676      	movge	r6, lr
 8009690:	f1bc 0f00 	cmp.w	ip, #0
 8009694:	d000      	beq.n	8009698 <_strtod_l+0x2f0>
 8009696:	4276      	negs	r6, r6
 8009698:	2d00      	cmp	r5, #0
 800969a:	d14d      	bne.n	8009738 <_strtod_l+0x390>
 800969c:	9904      	ldr	r1, [sp, #16]
 800969e:	4301      	orrs	r1, r0
 80096a0:	f47f aec6 	bne.w	8009430 <_strtod_l+0x88>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f47f aee1 	bne.w	800946c <_strtod_l+0xc4>
 80096aa:	2a69      	cmp	r2, #105	; 0x69
 80096ac:	d027      	beq.n	80096fe <_strtod_l+0x356>
 80096ae:	dc24      	bgt.n	80096fa <_strtod_l+0x352>
 80096b0:	2a49      	cmp	r2, #73	; 0x49
 80096b2:	d024      	beq.n	80096fe <_strtod_l+0x356>
 80096b4:	2a4e      	cmp	r2, #78	; 0x4e
 80096b6:	f47f aed9 	bne.w	800946c <_strtod_l+0xc4>
 80096ba:	499f      	ldr	r1, [pc, #636]	; (8009938 <_strtod_l+0x590>)
 80096bc:	a817      	add	r0, sp, #92	; 0x5c
 80096be:	f001 fe5d 	bl	800b37c <__match>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f43f aed2 	beq.w	800946c <_strtod_l+0xc4>
 80096c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b28      	cmp	r3, #40	; 0x28
 80096ce:	d12d      	bne.n	800972c <_strtod_l+0x384>
 80096d0:	499a      	ldr	r1, [pc, #616]	; (800993c <_strtod_l+0x594>)
 80096d2:	aa1a      	add	r2, sp, #104	; 0x68
 80096d4:	a817      	add	r0, sp, #92	; 0x5c
 80096d6:	f001 fe65 	bl	800b3a4 <__hexnan>
 80096da:	2805      	cmp	r0, #5
 80096dc:	d126      	bne.n	800972c <_strtod_l+0x384>
 80096de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80096e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096ec:	e6a0      	b.n	8009430 <_strtod_l+0x88>
 80096ee:	210a      	movs	r1, #10
 80096f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80096f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096f8:	e7b9      	b.n	800966e <_strtod_l+0x2c6>
 80096fa:	2a6e      	cmp	r2, #110	; 0x6e
 80096fc:	e7db      	b.n	80096b6 <_strtod_l+0x30e>
 80096fe:	4990      	ldr	r1, [pc, #576]	; (8009940 <_strtod_l+0x598>)
 8009700:	a817      	add	r0, sp, #92	; 0x5c
 8009702:	f001 fe3b 	bl	800b37c <__match>
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f aeb0 	beq.w	800946c <_strtod_l+0xc4>
 800970c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800970e:	498d      	ldr	r1, [pc, #564]	; (8009944 <_strtod_l+0x59c>)
 8009710:	3b01      	subs	r3, #1
 8009712:	a817      	add	r0, sp, #92	; 0x5c
 8009714:	9317      	str	r3, [sp, #92]	; 0x5c
 8009716:	f001 fe31 	bl	800b37c <__match>
 800971a:	b910      	cbnz	r0, 8009722 <_strtod_l+0x37a>
 800971c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800971e:	3301      	adds	r3, #1
 8009720:	9317      	str	r3, [sp, #92]	; 0x5c
 8009722:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009954 <_strtod_l+0x5ac>
 8009726:	f04f 0a00 	mov.w	sl, #0
 800972a:	e681      	b.n	8009430 <_strtod_l+0x88>
 800972c:	4886      	ldr	r0, [pc, #536]	; (8009948 <_strtod_l+0x5a0>)
 800972e:	f002 fe17 	bl	800c360 <nan>
 8009732:	ec5b ab10 	vmov	sl, fp, d0
 8009736:	e67b      	b.n	8009430 <_strtod_l+0x88>
 8009738:	9b05      	ldr	r3, [sp, #20]
 800973a:	9807      	ldr	r0, [sp, #28]
 800973c:	1af3      	subs	r3, r6, r3
 800973e:	2f00      	cmp	r7, #0
 8009740:	bf08      	it	eq
 8009742:	462f      	moveq	r7, r5
 8009744:	2d10      	cmp	r5, #16
 8009746:	9306      	str	r3, [sp, #24]
 8009748:	46a8      	mov	r8, r5
 800974a:	bfa8      	it	ge
 800974c:	f04f 0810 	movge.w	r8, #16
 8009750:	f7f6 fef8 	bl	8000544 <__aeabi_ui2d>
 8009754:	2d09      	cmp	r5, #9
 8009756:	4682      	mov	sl, r0
 8009758:	468b      	mov	fp, r1
 800975a:	dd13      	ble.n	8009784 <_strtod_l+0x3dc>
 800975c:	4b7b      	ldr	r3, [pc, #492]	; (800994c <_strtod_l+0x5a4>)
 800975e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009766:	f7f6 ff67 	bl	8000638 <__aeabi_dmul>
 800976a:	4682      	mov	sl, r0
 800976c:	4648      	mov	r0, r9
 800976e:	468b      	mov	fp, r1
 8009770:	f7f6 fee8 	bl	8000544 <__aeabi_ui2d>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	f7f6 fda6 	bl	80002cc <__adddf3>
 8009780:	4682      	mov	sl, r0
 8009782:	468b      	mov	fp, r1
 8009784:	2d0f      	cmp	r5, #15
 8009786:	dc38      	bgt.n	80097fa <_strtod_l+0x452>
 8009788:	9b06      	ldr	r3, [sp, #24]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f43f ae50 	beq.w	8009430 <_strtod_l+0x88>
 8009790:	dd24      	ble.n	80097dc <_strtod_l+0x434>
 8009792:	2b16      	cmp	r3, #22
 8009794:	dc0b      	bgt.n	80097ae <_strtod_l+0x406>
 8009796:	496d      	ldr	r1, [pc, #436]	; (800994c <_strtod_l+0x5a4>)
 8009798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800979c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	f7f6 ff48 	bl	8000638 <__aeabi_dmul>
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	e640      	b.n	8009430 <_strtod_l+0x88>
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80097b4:	4293      	cmp	r3, r2
 80097b6:	db20      	blt.n	80097fa <_strtod_l+0x452>
 80097b8:	4c64      	ldr	r4, [pc, #400]	; (800994c <_strtod_l+0x5a4>)
 80097ba:	f1c5 050f 	rsb	r5, r5, #15
 80097be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80097c2:	4652      	mov	r2, sl
 80097c4:	465b      	mov	r3, fp
 80097c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ca:	f7f6 ff35 	bl	8000638 <__aeabi_dmul>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	1b5d      	subs	r5, r3, r5
 80097d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80097da:	e7e3      	b.n	80097a4 <_strtod_l+0x3fc>
 80097dc:	9b06      	ldr	r3, [sp, #24]
 80097de:	3316      	adds	r3, #22
 80097e0:	db0b      	blt.n	80097fa <_strtod_l+0x452>
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	1b9e      	subs	r6, r3, r6
 80097e6:	4b59      	ldr	r3, [pc, #356]	; (800994c <_strtod_l+0x5a4>)
 80097e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80097ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097f0:	4650      	mov	r0, sl
 80097f2:	4659      	mov	r1, fp
 80097f4:	f7f7 f84a 	bl	800088c <__aeabi_ddiv>
 80097f8:	e7d6      	b.n	80097a8 <_strtod_l+0x400>
 80097fa:	9b06      	ldr	r3, [sp, #24]
 80097fc:	eba5 0808 	sub.w	r8, r5, r8
 8009800:	4498      	add	r8, r3
 8009802:	f1b8 0f00 	cmp.w	r8, #0
 8009806:	dd74      	ble.n	80098f2 <_strtod_l+0x54a>
 8009808:	f018 030f 	ands.w	r3, r8, #15
 800980c:	d00a      	beq.n	8009824 <_strtod_l+0x47c>
 800980e:	494f      	ldr	r1, [pc, #316]	; (800994c <_strtod_l+0x5a4>)
 8009810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009814:	4652      	mov	r2, sl
 8009816:	465b      	mov	r3, fp
 8009818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800981c:	f7f6 ff0c 	bl	8000638 <__aeabi_dmul>
 8009820:	4682      	mov	sl, r0
 8009822:	468b      	mov	fp, r1
 8009824:	f038 080f 	bics.w	r8, r8, #15
 8009828:	d04f      	beq.n	80098ca <_strtod_l+0x522>
 800982a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800982e:	dd22      	ble.n	8009876 <_strtod_l+0x4ce>
 8009830:	2500      	movs	r5, #0
 8009832:	462e      	mov	r6, r5
 8009834:	9507      	str	r5, [sp, #28]
 8009836:	9505      	str	r5, [sp, #20]
 8009838:	2322      	movs	r3, #34	; 0x22
 800983a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009954 <_strtod_l+0x5ac>
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	f04f 0a00 	mov.w	sl, #0
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f43f adf2 	beq.w	8009430 <_strtod_l+0x88>
 800984c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800984e:	4620      	mov	r0, r4
 8009850:	f001 feb0 	bl	800b5b4 <_Bfree>
 8009854:	9905      	ldr	r1, [sp, #20]
 8009856:	4620      	mov	r0, r4
 8009858:	f001 feac 	bl	800b5b4 <_Bfree>
 800985c:	4631      	mov	r1, r6
 800985e:	4620      	mov	r0, r4
 8009860:	f001 fea8 	bl	800b5b4 <_Bfree>
 8009864:	9907      	ldr	r1, [sp, #28]
 8009866:	4620      	mov	r0, r4
 8009868:	f001 fea4 	bl	800b5b4 <_Bfree>
 800986c:	4629      	mov	r1, r5
 800986e:	4620      	mov	r0, r4
 8009870:	f001 fea0 	bl	800b5b4 <_Bfree>
 8009874:	e5dc      	b.n	8009430 <_strtod_l+0x88>
 8009876:	4b36      	ldr	r3, [pc, #216]	; (8009950 <_strtod_l+0x5a8>)
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	2300      	movs	r3, #0
 800987c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009880:	4650      	mov	r0, sl
 8009882:	4659      	mov	r1, fp
 8009884:	4699      	mov	r9, r3
 8009886:	f1b8 0f01 	cmp.w	r8, #1
 800988a:	dc21      	bgt.n	80098d0 <_strtod_l+0x528>
 800988c:	b10b      	cbz	r3, 8009892 <_strtod_l+0x4ea>
 800988e:	4682      	mov	sl, r0
 8009890:	468b      	mov	fp, r1
 8009892:	4b2f      	ldr	r3, [pc, #188]	; (8009950 <_strtod_l+0x5a8>)
 8009894:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009898:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800989c:	4652      	mov	r2, sl
 800989e:	465b      	mov	r3, fp
 80098a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80098a4:	f7f6 fec8 	bl	8000638 <__aeabi_dmul>
 80098a8:	4b2a      	ldr	r3, [pc, #168]	; (8009954 <_strtod_l+0x5ac>)
 80098aa:	460a      	mov	r2, r1
 80098ac:	400b      	ands	r3, r1
 80098ae:	492a      	ldr	r1, [pc, #168]	; (8009958 <_strtod_l+0x5b0>)
 80098b0:	428b      	cmp	r3, r1
 80098b2:	4682      	mov	sl, r0
 80098b4:	d8bc      	bhi.n	8009830 <_strtod_l+0x488>
 80098b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80098ba:	428b      	cmp	r3, r1
 80098bc:	bf86      	itte	hi
 80098be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800995c <_strtod_l+0x5b4>
 80098c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80098c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80098ca:	2300      	movs	r3, #0
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	e084      	b.n	80099da <_strtod_l+0x632>
 80098d0:	f018 0f01 	tst.w	r8, #1
 80098d4:	d005      	beq.n	80098e2 <_strtod_l+0x53a>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 feac 	bl	8000638 <__aeabi_dmul>
 80098e0:	2301      	movs	r3, #1
 80098e2:	9a04      	ldr	r2, [sp, #16]
 80098e4:	3208      	adds	r2, #8
 80098e6:	f109 0901 	add.w	r9, r9, #1
 80098ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098ee:	9204      	str	r2, [sp, #16]
 80098f0:	e7c9      	b.n	8009886 <_strtod_l+0x4de>
 80098f2:	d0ea      	beq.n	80098ca <_strtod_l+0x522>
 80098f4:	f1c8 0800 	rsb	r8, r8, #0
 80098f8:	f018 020f 	ands.w	r2, r8, #15
 80098fc:	d00a      	beq.n	8009914 <_strtod_l+0x56c>
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <_strtod_l+0x5a4>)
 8009900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009904:	4650      	mov	r0, sl
 8009906:	4659      	mov	r1, fp
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 ffbe 	bl	800088c <__aeabi_ddiv>
 8009910:	4682      	mov	sl, r0
 8009912:	468b      	mov	fp, r1
 8009914:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009918:	d0d7      	beq.n	80098ca <_strtod_l+0x522>
 800991a:	f1b8 0f1f 	cmp.w	r8, #31
 800991e:	dd1f      	ble.n	8009960 <_strtod_l+0x5b8>
 8009920:	2500      	movs	r5, #0
 8009922:	462e      	mov	r6, r5
 8009924:	9507      	str	r5, [sp, #28]
 8009926:	9505      	str	r5, [sp, #20]
 8009928:	2322      	movs	r3, #34	; 0x22
 800992a:	f04f 0a00 	mov.w	sl, #0
 800992e:	f04f 0b00 	mov.w	fp, #0
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	e786      	b.n	8009844 <_strtod_l+0x49c>
 8009936:	bf00      	nop
 8009938:	0800d10d 	.word	0x0800d10d
 800993c:	0800d150 	.word	0x0800d150
 8009940:	0800d105 	.word	0x0800d105
 8009944:	0800d294 	.word	0x0800d294
 8009948:	0800d540 	.word	0x0800d540
 800994c:	0800d420 	.word	0x0800d420
 8009950:	0800d3f8 	.word	0x0800d3f8
 8009954:	7ff00000 	.word	0x7ff00000
 8009958:	7ca00000 	.word	0x7ca00000
 800995c:	7fefffff 	.word	0x7fefffff
 8009960:	f018 0310 	ands.w	r3, r8, #16
 8009964:	bf18      	it	ne
 8009966:	236a      	movne	r3, #106	; 0x6a
 8009968:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009d18 <_strtod_l+0x970>
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	4650      	mov	r0, sl
 8009970:	4659      	mov	r1, fp
 8009972:	2300      	movs	r3, #0
 8009974:	f018 0f01 	tst.w	r8, #1
 8009978:	d004      	beq.n	8009984 <_strtod_l+0x5dc>
 800997a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800997e:	f7f6 fe5b 	bl	8000638 <__aeabi_dmul>
 8009982:	2301      	movs	r3, #1
 8009984:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009988:	f109 0908 	add.w	r9, r9, #8
 800998c:	d1f2      	bne.n	8009974 <_strtod_l+0x5cc>
 800998e:	b10b      	cbz	r3, 8009994 <_strtod_l+0x5ec>
 8009990:	4682      	mov	sl, r0
 8009992:	468b      	mov	fp, r1
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	b1c3      	cbz	r3, 80099ca <_strtod_l+0x622>
 8009998:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800999c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	4659      	mov	r1, fp
 80099a4:	dd11      	ble.n	80099ca <_strtod_l+0x622>
 80099a6:	2b1f      	cmp	r3, #31
 80099a8:	f340 8124 	ble.w	8009bf4 <_strtod_l+0x84c>
 80099ac:	2b34      	cmp	r3, #52	; 0x34
 80099ae:	bfde      	ittt	le
 80099b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80099b4:	f04f 33ff 	movle.w	r3, #4294967295
 80099b8:	fa03 f202 	lslle.w	r2, r3, r2
 80099bc:	f04f 0a00 	mov.w	sl, #0
 80099c0:	bfcc      	ite	gt
 80099c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80099c6:	ea02 0b01 	andle.w	fp, r2, r1
 80099ca:	2200      	movs	r2, #0
 80099cc:	2300      	movs	r3, #0
 80099ce:	4650      	mov	r0, sl
 80099d0:	4659      	mov	r1, fp
 80099d2:	f7f7 f899 	bl	8000b08 <__aeabi_dcmpeq>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d1a2      	bne.n	8009920 <_strtod_l+0x578>
 80099da:	9b07      	ldr	r3, [sp, #28]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	9908      	ldr	r1, [sp, #32]
 80099e0:	462b      	mov	r3, r5
 80099e2:	463a      	mov	r2, r7
 80099e4:	4620      	mov	r0, r4
 80099e6:	f001 fe4d 	bl	800b684 <__s2b>
 80099ea:	9007      	str	r0, [sp, #28]
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f43f af1f 	beq.w	8009830 <_strtod_l+0x488>
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	1b9e      	subs	r6, r3, r6
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfb4      	ite	lt
 80099fc:	4633      	movlt	r3, r6
 80099fe:	2300      	movge	r3, #0
 8009a00:	930c      	str	r3, [sp, #48]	; 0x30
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	2500      	movs	r5, #0
 8009a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a0a:	9312      	str	r3, [sp, #72]	; 0x48
 8009a0c:	462e      	mov	r6, r5
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	4620      	mov	r0, r4
 8009a12:	6859      	ldr	r1, [r3, #4]
 8009a14:	f001 fd8e 	bl	800b534 <_Balloc>
 8009a18:	9005      	str	r0, [sp, #20]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f43f af0c 	beq.w	8009838 <_strtod_l+0x490>
 8009a20:	9b07      	ldr	r3, [sp, #28]
 8009a22:	691a      	ldr	r2, [r3, #16]
 8009a24:	3202      	adds	r2, #2
 8009a26:	f103 010c 	add.w	r1, r3, #12
 8009a2a:	0092      	lsls	r2, r2, #2
 8009a2c:	300c      	adds	r0, #12
 8009a2e:	f001 fd73 	bl	800b518 <memcpy>
 8009a32:	ec4b ab10 	vmov	d0, sl, fp
 8009a36:	aa1a      	add	r2, sp, #104	; 0x68
 8009a38:	a919      	add	r1, sp, #100	; 0x64
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f002 f968 	bl	800bd10 <__d2b>
 8009a40:	ec4b ab18 	vmov	d8, sl, fp
 8009a44:	9018      	str	r0, [sp, #96]	; 0x60
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f43f aef6 	beq.w	8009838 <_strtod_l+0x490>
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f001 feb2 	bl	800b7b8 <__i2b>
 8009a54:	4606      	mov	r6, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f43f aeee 	beq.w	8009838 <_strtod_l+0x490>
 8009a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a5e:	9904      	ldr	r1, [sp, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bfab      	itete	ge
 8009a64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009a66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009a68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009a6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009a6e:	bfac      	ite	ge
 8009a70:	eb03 0902 	addge.w	r9, r3, r2
 8009a74:	1ad7      	sublt	r7, r2, r3
 8009a76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a78:	eba3 0801 	sub.w	r8, r3, r1
 8009a7c:	4490      	add	r8, r2
 8009a7e:	4ba1      	ldr	r3, [pc, #644]	; (8009d04 <_strtod_l+0x95c>)
 8009a80:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a84:	4598      	cmp	r8, r3
 8009a86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a8a:	f280 80c7 	bge.w	8009c1c <_strtod_l+0x874>
 8009a8e:	eba3 0308 	sub.w	r3, r3, r8
 8009a92:	2b1f      	cmp	r3, #31
 8009a94:	eba2 0203 	sub.w	r2, r2, r3
 8009a98:	f04f 0101 	mov.w	r1, #1
 8009a9c:	f300 80b1 	bgt.w	8009c02 <_strtod_l+0x85a>
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	930d      	str	r3, [sp, #52]	; 0x34
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	eb09 0802 	add.w	r8, r9, r2
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	45c1      	cmp	r9, r8
 8009ab2:	4417      	add	r7, r2
 8009ab4:	441f      	add	r7, r3
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	bfa8      	it	ge
 8009aba:	4643      	movge	r3, r8
 8009abc:	42bb      	cmp	r3, r7
 8009abe:	bfa8      	it	ge
 8009ac0:	463b      	movge	r3, r7
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfc2      	ittt	gt
 8009ac6:	eba8 0803 	subgt.w	r8, r8, r3
 8009aca:	1aff      	subgt	r7, r7, r3
 8009acc:	eba9 0903 	subgt.w	r9, r9, r3
 8009ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dd17      	ble.n	8009b06 <_strtod_l+0x75e>
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4620      	mov	r0, r4
 8009adc:	f001 ff2c 	bl	800b938 <__pow5mult>
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f43f aea8 	beq.w	8009838 <_strtod_l+0x490>
 8009ae8:	4601      	mov	r1, r0
 8009aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009aec:	4620      	mov	r0, r4
 8009aee:	f001 fe79 	bl	800b7e4 <__multiply>
 8009af2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f43f ae9f 	beq.w	8009838 <_strtod_l+0x490>
 8009afa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009afc:	4620      	mov	r0, r4
 8009afe:	f001 fd59 	bl	800b5b4 <_Bfree>
 8009b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b04:	9318      	str	r3, [sp, #96]	; 0x60
 8009b06:	f1b8 0f00 	cmp.w	r8, #0
 8009b0a:	f300 808c 	bgt.w	8009c26 <_strtod_l+0x87e>
 8009b0e:	9b06      	ldr	r3, [sp, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dd08      	ble.n	8009b26 <_strtod_l+0x77e>
 8009b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b16:	9905      	ldr	r1, [sp, #20]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f001 ff0d 	bl	800b938 <__pow5mult>
 8009b1e:	9005      	str	r0, [sp, #20]
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f43f ae89 	beq.w	8009838 <_strtod_l+0x490>
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	dd08      	ble.n	8009b3c <_strtod_l+0x794>
 8009b2a:	9905      	ldr	r1, [sp, #20]
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f001 ff5c 	bl	800b9ec <__lshift>
 8009b34:	9005      	str	r0, [sp, #20]
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f43f ae7e 	beq.w	8009838 <_strtod_l+0x490>
 8009b3c:	f1b9 0f00 	cmp.w	r9, #0
 8009b40:	dd08      	ble.n	8009b54 <_strtod_l+0x7ac>
 8009b42:	4631      	mov	r1, r6
 8009b44:	464a      	mov	r2, r9
 8009b46:	4620      	mov	r0, r4
 8009b48:	f001 ff50 	bl	800b9ec <__lshift>
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f43f ae72 	beq.w	8009838 <_strtod_l+0x490>
 8009b54:	9a05      	ldr	r2, [sp, #20]
 8009b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f001 ffd3 	bl	800bb04 <__mdiff>
 8009b5e:	4605      	mov	r5, r0
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f43f ae69 	beq.w	8009838 <_strtod_l+0x490>
 8009b66:	68c3      	ldr	r3, [r0, #12]
 8009b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60c3      	str	r3, [r0, #12]
 8009b6e:	4631      	mov	r1, r6
 8009b70:	f001 ffac 	bl	800bacc <__mcmp>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	da60      	bge.n	8009c3a <_strtod_l+0x892>
 8009b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b7e:	f040 8082 	bne.w	8009c86 <_strtod_l+0x8de>
 8009b82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d17d      	bne.n	8009c86 <_strtod_l+0x8de>
 8009b8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b8e:	0d1b      	lsrs	r3, r3, #20
 8009b90:	051b      	lsls	r3, r3, #20
 8009b92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b96:	d976      	bls.n	8009c86 <_strtod_l+0x8de>
 8009b98:	696b      	ldr	r3, [r5, #20]
 8009b9a:	b913      	cbnz	r3, 8009ba2 <_strtod_l+0x7fa>
 8009b9c:	692b      	ldr	r3, [r5, #16]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	dd71      	ble.n	8009c86 <_strtod_l+0x8de>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f001 ff20 	bl	800b9ec <__lshift>
 8009bac:	4631      	mov	r1, r6
 8009bae:	4605      	mov	r5, r0
 8009bb0:	f001 ff8c 	bl	800bacc <__mcmp>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	dd66      	ble.n	8009c86 <_strtod_l+0x8de>
 8009bb8:	9904      	ldr	r1, [sp, #16]
 8009bba:	4a53      	ldr	r2, [pc, #332]	; (8009d08 <_strtod_l+0x960>)
 8009bbc:	465b      	mov	r3, fp
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	f000 8081 	beq.w	8009cc6 <_strtod_l+0x91e>
 8009bc4:	ea02 010b 	and.w	r1, r2, fp
 8009bc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009bcc:	dc7b      	bgt.n	8009cc6 <_strtod_l+0x91e>
 8009bce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009bd2:	f77f aea9 	ble.w	8009928 <_strtod_l+0x580>
 8009bd6:	4b4d      	ldr	r3, [pc, #308]	; (8009d0c <_strtod_l+0x964>)
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f7f6 fd2b 	bl	8000638 <__aeabi_dmul>
 8009be2:	460b      	mov	r3, r1
 8009be4:	4303      	orrs	r3, r0
 8009be6:	bf08      	it	eq
 8009be8:	2322      	moveq	r3, #34	; 0x22
 8009bea:	4682      	mov	sl, r0
 8009bec:	468b      	mov	fp, r1
 8009bee:	bf08      	it	eq
 8009bf0:	6023      	streq	r3, [r4, #0]
 8009bf2:	e62b      	b.n	800984c <_strtod_l+0x4a4>
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfc:	ea03 0a0a 	and.w	sl, r3, sl
 8009c00:	e6e3      	b.n	80099ca <_strtod_l+0x622>
 8009c02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009c06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c12:	fa01 f308 	lsl.w	r3, r1, r8
 8009c16:	9308      	str	r3, [sp, #32]
 8009c18:	910d      	str	r1, [sp, #52]	; 0x34
 8009c1a:	e746      	b.n	8009aaa <_strtod_l+0x702>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	9308      	str	r3, [sp, #32]
 8009c20:	2301      	movs	r3, #1
 8009c22:	930d      	str	r3, [sp, #52]	; 0x34
 8009c24:	e741      	b.n	8009aaa <_strtod_l+0x702>
 8009c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c28:	4642      	mov	r2, r8
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f001 fede 	bl	800b9ec <__lshift>
 8009c30:	9018      	str	r0, [sp, #96]	; 0x60
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f47f af6b 	bne.w	8009b0e <_strtod_l+0x766>
 8009c38:	e5fe      	b.n	8009838 <_strtod_l+0x490>
 8009c3a:	465f      	mov	r7, fp
 8009c3c:	d16e      	bne.n	8009d1c <_strtod_l+0x974>
 8009c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c44:	b342      	cbz	r2, 8009c98 <_strtod_l+0x8f0>
 8009c46:	4a32      	ldr	r2, [pc, #200]	; (8009d10 <_strtod_l+0x968>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d128      	bne.n	8009c9e <_strtod_l+0x8f6>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	4651      	mov	r1, sl
 8009c50:	b1eb      	cbz	r3, 8009c8e <_strtod_l+0x8e6>
 8009c52:	4b2d      	ldr	r3, [pc, #180]	; (8009d08 <_strtod_l+0x960>)
 8009c54:	403b      	ands	r3, r7
 8009c56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5e:	d819      	bhi.n	8009c94 <_strtod_l+0x8ec>
 8009c60:	0d1b      	lsrs	r3, r3, #20
 8009c62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c66:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d117      	bne.n	8009c9e <_strtod_l+0x8f6>
 8009c6e:	4b29      	ldr	r3, [pc, #164]	; (8009d14 <_strtod_l+0x96c>)
 8009c70:	429f      	cmp	r7, r3
 8009c72:	d102      	bne.n	8009c7a <_strtod_l+0x8d2>
 8009c74:	3101      	adds	r1, #1
 8009c76:	f43f addf 	beq.w	8009838 <_strtod_l+0x490>
 8009c7a:	4b23      	ldr	r3, [pc, #140]	; (8009d08 <_strtod_l+0x960>)
 8009c7c:	403b      	ands	r3, r7
 8009c7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c82:	f04f 0a00 	mov.w	sl, #0
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1a4      	bne.n	8009bd6 <_strtod_l+0x82e>
 8009c8c:	e5de      	b.n	800984c <_strtod_l+0x4a4>
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	e7ea      	b.n	8009c6a <_strtod_l+0x8c2>
 8009c94:	4613      	mov	r3, r2
 8009c96:	e7e8      	b.n	8009c6a <_strtod_l+0x8c2>
 8009c98:	ea53 030a 	orrs.w	r3, r3, sl
 8009c9c:	d08c      	beq.n	8009bb8 <_strtod_l+0x810>
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	b1db      	cbz	r3, 8009cda <_strtod_l+0x932>
 8009ca2:	423b      	tst	r3, r7
 8009ca4:	d0ef      	beq.n	8009c86 <_strtod_l+0x8de>
 8009ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca8:	9a04      	ldr	r2, [sp, #16]
 8009caa:	4650      	mov	r0, sl
 8009cac:	4659      	mov	r1, fp
 8009cae:	b1c3      	cbz	r3, 8009ce2 <_strtod_l+0x93a>
 8009cb0:	f7ff fb5e 	bl	8009370 <sulp>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	ec51 0b18 	vmov	r0, r1, d8
 8009cbc:	f7f6 fb06 	bl	80002cc <__adddf3>
 8009cc0:	4682      	mov	sl, r0
 8009cc2:	468b      	mov	fp, r1
 8009cc4:	e7df      	b.n	8009c86 <_strtod_l+0x8de>
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cd4:	f04f 3aff 	mov.w	sl, #4294967295
 8009cd8:	e7d5      	b.n	8009c86 <_strtod_l+0x8de>
 8009cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cdc:	ea13 0f0a 	tst.w	r3, sl
 8009ce0:	e7e0      	b.n	8009ca4 <_strtod_l+0x8fc>
 8009ce2:	f7ff fb45 	bl	8009370 <sulp>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	ec51 0b18 	vmov	r0, r1, d8
 8009cee:	f7f6 faeb 	bl	80002c8 <__aeabi_dsub>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	468b      	mov	fp, r1
 8009cfa:	f7f6 ff05 	bl	8000b08 <__aeabi_dcmpeq>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d0c1      	beq.n	8009c86 <_strtod_l+0x8de>
 8009d02:	e611      	b.n	8009928 <_strtod_l+0x580>
 8009d04:	fffffc02 	.word	0xfffffc02
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	39500000 	.word	0x39500000
 8009d10:	000fffff 	.word	0x000fffff
 8009d14:	7fefffff 	.word	0x7fefffff
 8009d18:	0800d168 	.word	0x0800d168
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f002 f852 	bl	800bdc8 <__ratio>
 8009d24:	ec59 8b10 	vmov	r8, r9, d0
 8009d28:	ee10 0a10 	vmov	r0, s0
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d32:	4649      	mov	r1, r9
 8009d34:	f7f6 fefc 	bl	8000b30 <__aeabi_dcmple>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d07a      	beq.n	8009e32 <_strtod_l+0xa8a>
 8009d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d04a      	beq.n	8009dd8 <_strtod_l+0xa30>
 8009d42:	4b95      	ldr	r3, [pc, #596]	; (8009f98 <_strtod_l+0xbf0>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f98 <_strtod_l+0xbf0>
 8009d4e:	f04f 0800 	mov.w	r8, #0
 8009d52:	4b92      	ldr	r3, [pc, #584]	; (8009f9c <_strtod_l+0xbf4>)
 8009d54:	403b      	ands	r3, r7
 8009d56:	930d      	str	r3, [sp, #52]	; 0x34
 8009d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d5a:	4b91      	ldr	r3, [pc, #580]	; (8009fa0 <_strtod_l+0xbf8>)
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	f040 80b0 	bne.w	8009ec2 <_strtod_l+0xb1a>
 8009d62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d6a:	ec4b ab10 	vmov	d0, sl, fp
 8009d6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d72:	f001 ff51 	bl	800bc18 <__ulp>
 8009d76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d7a:	ec53 2b10 	vmov	r2, r3, d0
 8009d7e:	f7f6 fc5b 	bl	8000638 <__aeabi_dmul>
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	f7f6 faa1 	bl	80002cc <__adddf3>
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4983      	ldr	r1, [pc, #524]	; (8009f9c <_strtod_l+0xbf4>)
 8009d8e:	4a85      	ldr	r2, [pc, #532]	; (8009fa4 <_strtod_l+0xbfc>)
 8009d90:	4019      	ands	r1, r3
 8009d92:	4291      	cmp	r1, r2
 8009d94:	4682      	mov	sl, r0
 8009d96:	d960      	bls.n	8009e5a <_strtod_l+0xab2>
 8009d98:	ee18 3a90 	vmov	r3, s17
 8009d9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d104      	bne.n	8009dae <_strtod_l+0xa06>
 8009da4:	ee18 3a10 	vmov	r3, s16
 8009da8:	3301      	adds	r3, #1
 8009daa:	f43f ad45 	beq.w	8009838 <_strtod_l+0x490>
 8009dae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009fb0 <_strtod_l+0xc08>
 8009db2:	f04f 3aff 	mov.w	sl, #4294967295
 8009db6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009db8:	4620      	mov	r0, r4
 8009dba:	f001 fbfb 	bl	800b5b4 <_Bfree>
 8009dbe:	9905      	ldr	r1, [sp, #20]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f001 fbf7 	bl	800b5b4 <_Bfree>
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f001 fbf3 	bl	800b5b4 <_Bfree>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f001 fbef 	bl	800b5b4 <_Bfree>
 8009dd6:	e61a      	b.n	8009a0e <_strtod_l+0x666>
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	d11b      	bne.n	8009e16 <_strtod_l+0xa6e>
 8009dde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009de2:	b9f3      	cbnz	r3, 8009e22 <_strtod_l+0xa7a>
 8009de4:	4b6c      	ldr	r3, [pc, #432]	; (8009f98 <_strtod_l+0xbf0>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	4640      	mov	r0, r8
 8009dea:	4649      	mov	r1, r9
 8009dec:	f7f6 fe96 	bl	8000b1c <__aeabi_dcmplt>
 8009df0:	b9d0      	cbnz	r0, 8009e28 <_strtod_l+0xa80>
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	4b6c      	ldr	r3, [pc, #432]	; (8009fa8 <_strtod_l+0xc00>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f7f6 fc1d 	bl	8000638 <__aeabi_dmul>
 8009dfe:	4680      	mov	r8, r0
 8009e00:	4689      	mov	r9, r1
 8009e02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e14:	e79d      	b.n	8009d52 <_strtod_l+0x9aa>
 8009e16:	f1ba 0f01 	cmp.w	sl, #1
 8009e1a:	d102      	bne.n	8009e22 <_strtod_l+0xa7a>
 8009e1c:	2f00      	cmp	r7, #0
 8009e1e:	f43f ad83 	beq.w	8009928 <_strtod_l+0x580>
 8009e22:	4b62      	ldr	r3, [pc, #392]	; (8009fac <_strtod_l+0xc04>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	e78e      	b.n	8009d46 <_strtod_l+0x99e>
 8009e28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009fa8 <_strtod_l+0xc00>
 8009e2c:	f04f 0800 	mov.w	r8, #0
 8009e30:	e7e7      	b.n	8009e02 <_strtod_l+0xa5a>
 8009e32:	4b5d      	ldr	r3, [pc, #372]	; (8009fa8 <_strtod_l+0xc00>)
 8009e34:	4640      	mov	r0, r8
 8009e36:	4649      	mov	r1, r9
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f7f6 fbfd 	bl	8000638 <__aeabi_dmul>
 8009e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e40:	4680      	mov	r8, r0
 8009e42:	4689      	mov	r9, r1
 8009e44:	b933      	cbnz	r3, 8009e54 <_strtod_l+0xaac>
 8009e46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e4a:	900e      	str	r0, [sp, #56]	; 0x38
 8009e4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e52:	e7dd      	b.n	8009e10 <_strtod_l+0xa68>
 8009e54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009e58:	e7f9      	b.n	8009e4e <_strtod_l+0xaa6>
 8009e5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1a8      	bne.n	8009db6 <_strtod_l+0xa0e>
 8009e64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e6a:	0d1b      	lsrs	r3, r3, #20
 8009e6c:	051b      	lsls	r3, r3, #20
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d1a1      	bne.n	8009db6 <_strtod_l+0xa0e>
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 ff3f 	bl	8000cf8 <__aeabi_d2lz>
 8009e7a:	f7f6 fbaf 	bl	80005dc <__aeabi_l2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fa1f 	bl	80002c8 <__aeabi_dsub>
 8009e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e90:	ea43 030a 	orr.w	r3, r3, sl
 8009e94:	4313      	orrs	r3, r2
 8009e96:	4680      	mov	r8, r0
 8009e98:	4689      	mov	r9, r1
 8009e9a:	d055      	beq.n	8009f48 <_strtod_l+0xba0>
 8009e9c:	a336      	add	r3, pc, #216	; (adr r3, 8009f78 <_strtod_l+0xbd0>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f47f acd0 	bne.w	800984c <_strtod_l+0x4a4>
 8009eac:	a334      	add	r3, pc, #208	; (adr r3, 8009f80 <_strtod_l+0xbd8>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	f7f6 fe4f 	bl	8000b58 <__aeabi_dcmpgt>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f43f af7b 	beq.w	8009db6 <_strtod_l+0xa0e>
 8009ec0:	e4c4      	b.n	800984c <_strtod_l+0x4a4>
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	b333      	cbz	r3, 8009f14 <_strtod_l+0xb6c>
 8009ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ecc:	d822      	bhi.n	8009f14 <_strtod_l+0xb6c>
 8009ece:	a32e      	add	r3, pc, #184	; (adr r3, 8009f88 <_strtod_l+0xbe0>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 fe2a 	bl	8000b30 <__aeabi_dcmple>
 8009edc:	b1a0      	cbz	r0, 8009f08 <_strtod_l+0xb60>
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	f7f6 fe81 	bl	8000be8 <__aeabi_d2uiz>
 8009ee6:	2801      	cmp	r0, #1
 8009ee8:	bf38      	it	cc
 8009eea:	2001      	movcc	r0, #1
 8009eec:	f7f6 fb2a 	bl	8000544 <__aeabi_ui2d>
 8009ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	bb23      	cbnz	r3, 8009f42 <_strtod_l+0xb9a>
 8009ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009efc:	9010      	str	r0, [sp, #64]	; 0x40
 8009efe:	9311      	str	r3, [sp, #68]	; 0x44
 8009f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	9309      	str	r3, [sp, #36]	; 0x24
 8009f14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f18:	eeb0 0a48 	vmov.f32	s0, s16
 8009f1c:	eef0 0a68 	vmov.f32	s1, s17
 8009f20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f24:	f001 fe78 	bl	800bc18 <__ulp>
 8009f28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f2c:	ec53 2b10 	vmov	r2, r3, d0
 8009f30:	f7f6 fb82 	bl	8000638 <__aeabi_dmul>
 8009f34:	ec53 2b18 	vmov	r2, r3, d8
 8009f38:	f7f6 f9c8 	bl	80002cc <__adddf3>
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	468b      	mov	fp, r1
 8009f40:	e78d      	b.n	8009e5e <_strtod_l+0xab6>
 8009f42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009f46:	e7db      	b.n	8009f00 <_strtod_l+0xb58>
 8009f48:	a311      	add	r3, pc, #68	; (adr r3, 8009f90 <_strtod_l+0xbe8>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fde5 	bl	8000b1c <__aeabi_dcmplt>
 8009f52:	e7b2      	b.n	8009eba <_strtod_l+0xb12>
 8009f54:	2300      	movs	r3, #0
 8009f56:	930a      	str	r3, [sp, #40]	; 0x28
 8009f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	f7ff ba6b 	b.w	8009438 <_strtod_l+0x90>
 8009f62:	2a65      	cmp	r2, #101	; 0x65
 8009f64:	f43f ab5f 	beq.w	8009626 <_strtod_l+0x27e>
 8009f68:	2a45      	cmp	r2, #69	; 0x45
 8009f6a:	f43f ab5c 	beq.w	8009626 <_strtod_l+0x27e>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f7ff bb94 	b.w	800969c <_strtod_l+0x2f4>
 8009f74:	f3af 8000 	nop.w
 8009f78:	94a03595 	.word	0x94a03595
 8009f7c:	3fdfffff 	.word	0x3fdfffff
 8009f80:	35afe535 	.word	0x35afe535
 8009f84:	3fe00000 	.word	0x3fe00000
 8009f88:	ffc00000 	.word	0xffc00000
 8009f8c:	41dfffff 	.word	0x41dfffff
 8009f90:	94a03595 	.word	0x94a03595
 8009f94:	3fcfffff 	.word	0x3fcfffff
 8009f98:	3ff00000 	.word	0x3ff00000
 8009f9c:	7ff00000 	.word	0x7ff00000
 8009fa0:	7fe00000 	.word	0x7fe00000
 8009fa4:	7c9fffff 	.word	0x7c9fffff
 8009fa8:	3fe00000 	.word	0x3fe00000
 8009fac:	bff00000 	.word	0xbff00000
 8009fb0:	7fefffff 	.word	0x7fefffff

08009fb4 <_strtod_r>:
 8009fb4:	4b01      	ldr	r3, [pc, #4]	; (8009fbc <_strtod_r+0x8>)
 8009fb6:	f7ff b9f7 	b.w	80093a8 <_strtod_l>
 8009fba:	bf00      	nop
 8009fbc:	20000080 	.word	0x20000080

08009fc0 <_strtol_l.constprop.0>:
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc6:	d001      	beq.n	8009fcc <_strtol_l.constprop.0+0xc>
 8009fc8:	2b24      	cmp	r3, #36	; 0x24
 8009fca:	d906      	bls.n	8009fda <_strtol_l.constprop.0+0x1a>
 8009fcc:	f7fe fafe 	bl	80085cc <__errno>
 8009fd0:	2316      	movs	r3, #22
 8009fd2:	6003      	str	r3, [r0, #0]
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0c0 <_strtol_l.constprop.0+0x100>
 8009fde:	460d      	mov	r5, r1
 8009fe0:	462e      	mov	r6, r5
 8009fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009fea:	f017 0708 	ands.w	r7, r7, #8
 8009fee:	d1f7      	bne.n	8009fe0 <_strtol_l.constprop.0+0x20>
 8009ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ff2:	d132      	bne.n	800a05a <_strtol_l.constprop.0+0x9a>
 8009ff4:	782c      	ldrb	r4, [r5, #0]
 8009ff6:	2701      	movs	r7, #1
 8009ff8:	1cb5      	adds	r5, r6, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d05b      	beq.n	800a0b6 <_strtol_l.constprop.0+0xf6>
 8009ffe:	2b10      	cmp	r3, #16
 800a000:	d109      	bne.n	800a016 <_strtol_l.constprop.0+0x56>
 800a002:	2c30      	cmp	r4, #48	; 0x30
 800a004:	d107      	bne.n	800a016 <_strtol_l.constprop.0+0x56>
 800a006:	782c      	ldrb	r4, [r5, #0]
 800a008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a00c:	2c58      	cmp	r4, #88	; 0x58
 800a00e:	d14d      	bne.n	800a0ac <_strtol_l.constprop.0+0xec>
 800a010:	786c      	ldrb	r4, [r5, #1]
 800a012:	2310      	movs	r3, #16
 800a014:	3502      	adds	r5, #2
 800a016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a01a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	fbb8 f9f3 	udiv	r9, r8, r3
 800a026:	4666      	mov	r6, ip
 800a028:	fb03 8a19 	mls	sl, r3, r9, r8
 800a02c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a030:	f1be 0f09 	cmp.w	lr, #9
 800a034:	d816      	bhi.n	800a064 <_strtol_l.constprop.0+0xa4>
 800a036:	4674      	mov	r4, lr
 800a038:	42a3      	cmp	r3, r4
 800a03a:	dd24      	ble.n	800a086 <_strtol_l.constprop.0+0xc6>
 800a03c:	f1bc 0f00 	cmp.w	ip, #0
 800a040:	db1e      	blt.n	800a080 <_strtol_l.constprop.0+0xc0>
 800a042:	45b1      	cmp	r9, r6
 800a044:	d31c      	bcc.n	800a080 <_strtol_l.constprop.0+0xc0>
 800a046:	d101      	bne.n	800a04c <_strtol_l.constprop.0+0x8c>
 800a048:	45a2      	cmp	sl, r4
 800a04a:	db19      	blt.n	800a080 <_strtol_l.constprop.0+0xc0>
 800a04c:	fb06 4603 	mla	r6, r6, r3, r4
 800a050:	f04f 0c01 	mov.w	ip, #1
 800a054:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a058:	e7e8      	b.n	800a02c <_strtol_l.constprop.0+0x6c>
 800a05a:	2c2b      	cmp	r4, #43	; 0x2b
 800a05c:	bf04      	itt	eq
 800a05e:	782c      	ldrbeq	r4, [r5, #0]
 800a060:	1cb5      	addeq	r5, r6, #2
 800a062:	e7ca      	b.n	8009ffa <_strtol_l.constprop.0+0x3a>
 800a064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a068:	f1be 0f19 	cmp.w	lr, #25
 800a06c:	d801      	bhi.n	800a072 <_strtol_l.constprop.0+0xb2>
 800a06e:	3c37      	subs	r4, #55	; 0x37
 800a070:	e7e2      	b.n	800a038 <_strtol_l.constprop.0+0x78>
 800a072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a076:	f1be 0f19 	cmp.w	lr, #25
 800a07a:	d804      	bhi.n	800a086 <_strtol_l.constprop.0+0xc6>
 800a07c:	3c57      	subs	r4, #87	; 0x57
 800a07e:	e7db      	b.n	800a038 <_strtol_l.constprop.0+0x78>
 800a080:	f04f 3cff 	mov.w	ip, #4294967295
 800a084:	e7e6      	b.n	800a054 <_strtol_l.constprop.0+0x94>
 800a086:	f1bc 0f00 	cmp.w	ip, #0
 800a08a:	da05      	bge.n	800a098 <_strtol_l.constprop.0+0xd8>
 800a08c:	2322      	movs	r3, #34	; 0x22
 800a08e:	6003      	str	r3, [r0, #0]
 800a090:	4646      	mov	r6, r8
 800a092:	b942      	cbnz	r2, 800a0a6 <_strtol_l.constprop.0+0xe6>
 800a094:	4630      	mov	r0, r6
 800a096:	e79e      	b.n	8009fd6 <_strtol_l.constprop.0+0x16>
 800a098:	b107      	cbz	r7, 800a09c <_strtol_l.constprop.0+0xdc>
 800a09a:	4276      	negs	r6, r6
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d0f9      	beq.n	800a094 <_strtol_l.constprop.0+0xd4>
 800a0a0:	f1bc 0f00 	cmp.w	ip, #0
 800a0a4:	d000      	beq.n	800a0a8 <_strtol_l.constprop.0+0xe8>
 800a0a6:	1e69      	subs	r1, r5, #1
 800a0a8:	6011      	str	r1, [r2, #0]
 800a0aa:	e7f3      	b.n	800a094 <_strtol_l.constprop.0+0xd4>
 800a0ac:	2430      	movs	r4, #48	; 0x30
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1b1      	bne.n	800a016 <_strtol_l.constprop.0+0x56>
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	e7af      	b.n	800a016 <_strtol_l.constprop.0+0x56>
 800a0b6:	2c30      	cmp	r4, #48	; 0x30
 800a0b8:	d0a5      	beq.n	800a006 <_strtol_l.constprop.0+0x46>
 800a0ba:	230a      	movs	r3, #10
 800a0bc:	e7ab      	b.n	800a016 <_strtol_l.constprop.0+0x56>
 800a0be:	bf00      	nop
 800a0c0:	0800d191 	.word	0x0800d191

0800a0c4 <_strtol_r>:
 800a0c4:	f7ff bf7c 	b.w	8009fc0 <_strtol_l.constprop.0>

0800a0c8 <_vsiprintf_r>:
 800a0c8:	b500      	push	{lr}
 800a0ca:	b09b      	sub	sp, #108	; 0x6c
 800a0cc:	9100      	str	r1, [sp, #0]
 800a0ce:	9104      	str	r1, [sp, #16]
 800a0d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	9102      	str	r1, [sp, #8]
 800a0d8:	4905      	ldr	r1, [pc, #20]	; (800a0f0 <_vsiprintf_r+0x28>)
 800a0da:	9103      	str	r1, [sp, #12]
 800a0dc:	4669      	mov	r1, sp
 800a0de:	f002 f83d 	bl	800c15c <_svfiprintf_r>
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	b01b      	add	sp, #108	; 0x6c
 800a0ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0ee:	bf00      	nop
 800a0f0:	ffff0208 	.word	0xffff0208

0800a0f4 <vsiprintf>:
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	460a      	mov	r2, r1
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4802      	ldr	r0, [pc, #8]	; (800a104 <vsiprintf+0x10>)
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f7ff bfe3 	b.w	800a0c8 <_vsiprintf_r>
 800a102:	bf00      	nop
 800a104:	20000018 	.word	0x20000018

0800a108 <quorem>:
 800a108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	6903      	ldr	r3, [r0, #16]
 800a10e:	690c      	ldr	r4, [r1, #16]
 800a110:	42a3      	cmp	r3, r4
 800a112:	4607      	mov	r7, r0
 800a114:	f2c0 8081 	blt.w	800a21a <quorem+0x112>
 800a118:	3c01      	subs	r4, #1
 800a11a:	f101 0814 	add.w	r8, r1, #20
 800a11e:	f100 0514 	add.w	r5, r0, #20
 800a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a12c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a130:	3301      	adds	r3, #1
 800a132:	429a      	cmp	r2, r3
 800a134:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a13c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a140:	d331      	bcc.n	800a1a6 <quorem+0x9e>
 800a142:	f04f 0e00 	mov.w	lr, #0
 800a146:	4640      	mov	r0, r8
 800a148:	46ac      	mov	ip, r5
 800a14a:	46f2      	mov	sl, lr
 800a14c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a150:	b293      	uxth	r3, r2
 800a152:	fb06 e303 	mla	r3, r6, r3, lr
 800a156:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ebaa 0303 	sub.w	r3, sl, r3
 800a160:	f8dc a000 	ldr.w	sl, [ip]
 800a164:	0c12      	lsrs	r2, r2, #16
 800a166:	fa13 f38a 	uxtah	r3, r3, sl
 800a16a:	fb06 e202 	mla	r2, r6, r2, lr
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a176:	b292      	uxth	r2, r2
 800a178:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a17c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a180:	f8bd 3000 	ldrh.w	r3, [sp]
 800a184:	4581      	cmp	r9, r0
 800a186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a18a:	f84c 3b04 	str.w	r3, [ip], #4
 800a18e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a192:	d2db      	bcs.n	800a14c <quorem+0x44>
 800a194:	f855 300b 	ldr.w	r3, [r5, fp]
 800a198:	b92b      	cbnz	r3, 800a1a6 <quorem+0x9e>
 800a19a:	9b01      	ldr	r3, [sp, #4]
 800a19c:	3b04      	subs	r3, #4
 800a19e:	429d      	cmp	r5, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	d32e      	bcc.n	800a202 <quorem+0xfa>
 800a1a4:	613c      	str	r4, [r7, #16]
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f001 fc90 	bl	800bacc <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	db24      	blt.n	800a1fa <quorem+0xf2>
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f04f 0c00 	mov.w	ip, #0
 800a1b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a1c0:	b293      	uxth	r3, r2
 800a1c2:	ebac 0303 	sub.w	r3, ip, r3
 800a1c6:	0c12      	lsrs	r2, r2, #16
 800a1c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a1cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1da:	45c1      	cmp	r9, r8
 800a1dc:	f840 3b04 	str.w	r3, [r0], #4
 800a1e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1e4:	d2e8      	bcs.n	800a1b8 <quorem+0xb0>
 800a1e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ee:	b922      	cbnz	r2, 800a1fa <quorem+0xf2>
 800a1f0:	3b04      	subs	r3, #4
 800a1f2:	429d      	cmp	r5, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	d30a      	bcc.n	800a20e <quorem+0x106>
 800a1f8:	613c      	str	r4, [r7, #16]
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	b003      	add	sp, #12
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	3b04      	subs	r3, #4
 800a206:	2a00      	cmp	r2, #0
 800a208:	d1cc      	bne.n	800a1a4 <quorem+0x9c>
 800a20a:	3c01      	subs	r4, #1
 800a20c:	e7c7      	b.n	800a19e <quorem+0x96>
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	3b04      	subs	r3, #4
 800a212:	2a00      	cmp	r2, #0
 800a214:	d1f0      	bne.n	800a1f8 <quorem+0xf0>
 800a216:	3c01      	subs	r4, #1
 800a218:	e7eb      	b.n	800a1f2 <quorem+0xea>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e7ee      	b.n	800a1fc <quorem+0xf4>
	...

0800a220 <_dtoa_r>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	ed2d 8b04 	vpush	{d8-d9}
 800a228:	ec57 6b10 	vmov	r6, r7, d0
 800a22c:	b093      	sub	sp, #76	; 0x4c
 800a22e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a230:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a234:	9106      	str	r1, [sp, #24]
 800a236:	ee10 aa10 	vmov	sl, s0
 800a23a:	4604      	mov	r4, r0
 800a23c:	9209      	str	r2, [sp, #36]	; 0x24
 800a23e:	930c      	str	r3, [sp, #48]	; 0x30
 800a240:	46bb      	mov	fp, r7
 800a242:	b975      	cbnz	r5, 800a262 <_dtoa_r+0x42>
 800a244:	2010      	movs	r0, #16
 800a246:	f001 f94d 	bl	800b4e4 <malloc>
 800a24a:	4602      	mov	r2, r0
 800a24c:	6260      	str	r0, [r4, #36]	; 0x24
 800a24e:	b920      	cbnz	r0, 800a25a <_dtoa_r+0x3a>
 800a250:	4ba7      	ldr	r3, [pc, #668]	; (800a4f0 <_dtoa_r+0x2d0>)
 800a252:	21ea      	movs	r1, #234	; 0xea
 800a254:	48a7      	ldr	r0, [pc, #668]	; (800a4f4 <_dtoa_r+0x2d4>)
 800a256:	f002 f8bd 	bl	800c3d4 <__assert_func>
 800a25a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a25e:	6005      	str	r5, [r0, #0]
 800a260:	60c5      	str	r5, [r0, #12]
 800a262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a264:	6819      	ldr	r1, [r3, #0]
 800a266:	b151      	cbz	r1, 800a27e <_dtoa_r+0x5e>
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	604a      	str	r2, [r1, #4]
 800a26c:	2301      	movs	r3, #1
 800a26e:	4093      	lsls	r3, r2
 800a270:	608b      	str	r3, [r1, #8]
 800a272:	4620      	mov	r0, r4
 800a274:	f001 f99e 	bl	800b5b4 <_Bfree>
 800a278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	1e3b      	subs	r3, r7, #0
 800a280:	bfaa      	itet	ge
 800a282:	2300      	movge	r3, #0
 800a284:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a288:	f8c8 3000 	strge.w	r3, [r8]
 800a28c:	4b9a      	ldr	r3, [pc, #616]	; (800a4f8 <_dtoa_r+0x2d8>)
 800a28e:	bfbc      	itt	lt
 800a290:	2201      	movlt	r2, #1
 800a292:	f8c8 2000 	strlt.w	r2, [r8]
 800a296:	ea33 030b 	bics.w	r3, r3, fp
 800a29a:	d11b      	bne.n	800a2d4 <_dtoa_r+0xb4>
 800a29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a29e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2a8:	4333      	orrs	r3, r6
 800a2aa:	f000 8592 	beq.w	800add2 <_dtoa_r+0xbb2>
 800a2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b0:	b963      	cbnz	r3, 800a2cc <_dtoa_r+0xac>
 800a2b2:	4b92      	ldr	r3, [pc, #584]	; (800a4fc <_dtoa_r+0x2dc>)
 800a2b4:	e022      	b.n	800a2fc <_dtoa_r+0xdc>
 800a2b6:	4b92      	ldr	r3, [pc, #584]	; (800a500 <_dtoa_r+0x2e0>)
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	b013      	add	sp, #76	; 0x4c
 800a2c4:	ecbd 8b04 	vpop	{d8-d9}
 800a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2cc:	4b8b      	ldr	r3, [pc, #556]	; (800a4fc <_dtoa_r+0x2dc>)
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	3303      	adds	r3, #3
 800a2d2:	e7f3      	b.n	800a2bc <_dtoa_r+0x9c>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4650      	mov	r0, sl
 800a2da:	4659      	mov	r1, fp
 800a2dc:	f7f6 fc14 	bl	8000b08 <__aeabi_dcmpeq>
 800a2e0:	ec4b ab19 	vmov	d9, sl, fp
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	b158      	cbz	r0, 800a300 <_dtoa_r+0xe0>
 800a2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 856b 	beq.w	800adcc <_dtoa_r+0xbac>
 800a2f6:	4883      	ldr	r0, [pc, #524]	; (800a504 <_dtoa_r+0x2e4>)
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	1e43      	subs	r3, r0, #1
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	e7df      	b.n	800a2c0 <_dtoa_r+0xa0>
 800a300:	ec4b ab10 	vmov	d0, sl, fp
 800a304:	aa10      	add	r2, sp, #64	; 0x40
 800a306:	a911      	add	r1, sp, #68	; 0x44
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 fd01 	bl	800bd10 <__d2b>
 800a30e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a312:	ee08 0a10 	vmov	s16, r0
 800a316:	2d00      	cmp	r5, #0
 800a318:	f000 8084 	beq.w	800a424 <_dtoa_r+0x204>
 800a31c:	ee19 3a90 	vmov	r3, s19
 800a320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a324:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a328:	4656      	mov	r6, sl
 800a32a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a332:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a336:	4b74      	ldr	r3, [pc, #464]	; (800a508 <_dtoa_r+0x2e8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ffc3 	bl	80002c8 <__aeabi_dsub>
 800a342:	a365      	add	r3, pc, #404	; (adr r3, 800a4d8 <_dtoa_r+0x2b8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f976 	bl	8000638 <__aeabi_dmul>
 800a34c:	a364      	add	r3, pc, #400	; (adr r3, 800a4e0 <_dtoa_r+0x2c0>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ffbb 	bl	80002cc <__adddf3>
 800a356:	4606      	mov	r6, r0
 800a358:	4628      	mov	r0, r5
 800a35a:	460f      	mov	r7, r1
 800a35c:	f7f6 f902 	bl	8000564 <__aeabi_i2d>
 800a360:	a361      	add	r3, pc, #388	; (adr r3, 800a4e8 <_dtoa_r+0x2c8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f967 	bl	8000638 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f5 ffab 	bl	80002cc <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f6 fc0d 	bl	8000b98 <__aeabi_d2iz>
 800a37e:	2200      	movs	r2, #0
 800a380:	9000      	str	r0, [sp, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800a38c:	b150      	cbz	r0, 800a3a4 <_dtoa_r+0x184>
 800a38e:	9800      	ldr	r0, [sp, #0]
 800a390:	f7f6 f8e8 	bl	8000564 <__aeabi_i2d>
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	f7f6 fbb6 	bl	8000b08 <__aeabi_dcmpeq>
 800a39c:	b910      	cbnz	r0, 800a3a4 <_dtoa_r+0x184>
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	2b16      	cmp	r3, #22
 800a3a8:	d85a      	bhi.n	800a460 <_dtoa_r+0x240>
 800a3aa:	9a00      	ldr	r2, [sp, #0]
 800a3ac:	4b57      	ldr	r3, [pc, #348]	; (800a50c <_dtoa_r+0x2ec>)
 800a3ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ba:	f7f6 fbaf 	bl	8000b1c <__aeabi_dcmplt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d050      	beq.n	800a464 <_dtoa_r+0x244>
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ce:	1b5d      	subs	r5, r3, r5
 800a3d0:	1e6b      	subs	r3, r5, #1
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	bf45      	ittet	mi
 800a3d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3da:	9304      	strmi	r3, [sp, #16]
 800a3dc:	2300      	movpl	r3, #0
 800a3de:	2300      	movmi	r3, #0
 800a3e0:	bf4c      	ite	mi
 800a3e2:	9305      	strmi	r3, [sp, #20]
 800a3e4:	9304      	strpl	r3, [sp, #16]
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db3d      	blt.n	800a468 <_dtoa_r+0x248>
 800a3ec:	9b05      	ldr	r3, [sp, #20]
 800a3ee:	9a00      	ldr	r2, [sp, #0]
 800a3f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f2:	4413      	add	r3, r2
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	f200 8089 	bhi.w	800a514 <_dtoa_r+0x2f4>
 800a402:	2b05      	cmp	r3, #5
 800a404:	bfc4      	itt	gt
 800a406:	3b04      	subgt	r3, #4
 800a408:	9306      	strgt	r3, [sp, #24]
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	f1a3 0302 	sub.w	r3, r3, #2
 800a410:	bfcc      	ite	gt
 800a412:	2500      	movgt	r5, #0
 800a414:	2501      	movle	r5, #1
 800a416:	2b03      	cmp	r3, #3
 800a418:	f200 8087 	bhi.w	800a52a <_dtoa_r+0x30a>
 800a41c:	e8df f003 	tbb	[pc, r3]
 800a420:	59383a2d 	.word	0x59383a2d
 800a424:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a428:	441d      	add	r5, r3
 800a42a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a42e:	2b20      	cmp	r3, #32
 800a430:	bfc1      	itttt	gt
 800a432:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a436:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a43a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a43e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a442:	bfda      	itte	le
 800a444:	f1c3 0320 	rsble	r3, r3, #32
 800a448:	fa06 f003 	lslle.w	r0, r6, r3
 800a44c:	4318      	orrgt	r0, r3
 800a44e:	f7f6 f879 	bl	8000544 <__aeabi_ui2d>
 800a452:	2301      	movs	r3, #1
 800a454:	4606      	mov	r6, r0
 800a456:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a45a:	3d01      	subs	r5, #1
 800a45c:	930e      	str	r3, [sp, #56]	; 0x38
 800a45e:	e76a      	b.n	800a336 <_dtoa_r+0x116>
 800a460:	2301      	movs	r3, #1
 800a462:	e7b2      	b.n	800a3ca <_dtoa_r+0x1aa>
 800a464:	900b      	str	r0, [sp, #44]	; 0x2c
 800a466:	e7b1      	b.n	800a3cc <_dtoa_r+0x1ac>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	9a00      	ldr	r2, [sp, #0]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	4253      	negs	r3, r2
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	2300      	movs	r3, #0
 800a476:	930a      	str	r3, [sp, #40]	; 0x28
 800a478:	e7bf      	b.n	800a3fa <_dtoa_r+0x1da>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9308      	str	r3, [sp, #32]
 800a47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	dc55      	bgt.n	800a530 <_dtoa_r+0x310>
 800a484:	2301      	movs	r3, #1
 800a486:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a48a:	461a      	mov	r2, r3
 800a48c:	9209      	str	r2, [sp, #36]	; 0x24
 800a48e:	e00c      	b.n	800a4aa <_dtoa_r+0x28a>
 800a490:	2301      	movs	r3, #1
 800a492:	e7f3      	b.n	800a47c <_dtoa_r+0x25c>
 800a494:	2300      	movs	r3, #0
 800a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a498:	9308      	str	r3, [sp, #32]
 800a49a:	9b00      	ldr	r3, [sp, #0]
 800a49c:	4413      	add	r3, r2
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	bfb8      	it	lt
 800a4a8:	2301      	movlt	r3, #1
 800a4aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	6042      	str	r2, [r0, #4]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	f102 0614 	add.w	r6, r2, #20
 800a4b6:	429e      	cmp	r6, r3
 800a4b8:	6841      	ldr	r1, [r0, #4]
 800a4ba:	d93d      	bls.n	800a538 <_dtoa_r+0x318>
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f001 f839 	bl	800b534 <_Balloc>
 800a4c2:	9001      	str	r0, [sp, #4]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d13b      	bne.n	800a540 <_dtoa_r+0x320>
 800a4c8:	4b11      	ldr	r3, [pc, #68]	; (800a510 <_dtoa_r+0x2f0>)
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4d0:	e6c0      	b.n	800a254 <_dtoa_r+0x34>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7df      	b.n	800a496 <_dtoa_r+0x276>
 800a4d6:	bf00      	nop
 800a4d8:	636f4361 	.word	0x636f4361
 800a4dc:	3fd287a7 	.word	0x3fd287a7
 800a4e0:	8b60c8b3 	.word	0x8b60c8b3
 800a4e4:	3fc68a28 	.word	0x3fc68a28
 800a4e8:	509f79fb 	.word	0x509f79fb
 800a4ec:	3fd34413 	.word	0x3fd34413
 800a4f0:	0800d29e 	.word	0x0800d29e
 800a4f4:	0800d2b5 	.word	0x0800d2b5
 800a4f8:	7ff00000 	.word	0x7ff00000
 800a4fc:	0800d29a 	.word	0x0800d29a
 800a500:	0800d291 	.word	0x0800d291
 800a504:	0800d111 	.word	0x0800d111
 800a508:	3ff80000 	.word	0x3ff80000
 800a50c:	0800d420 	.word	0x0800d420
 800a510:	0800d310 	.word	0x0800d310
 800a514:	2501      	movs	r5, #1
 800a516:	2300      	movs	r3, #0
 800a518:	9306      	str	r3, [sp, #24]
 800a51a:	9508      	str	r5, [sp, #32]
 800a51c:	f04f 33ff 	mov.w	r3, #4294967295
 800a520:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	2312      	movs	r3, #18
 800a528:	e7b0      	b.n	800a48c <_dtoa_r+0x26c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	e7f5      	b.n	800a51c <_dtoa_r+0x2fc>
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a536:	e7b8      	b.n	800a4aa <_dtoa_r+0x28a>
 800a538:	3101      	adds	r1, #1
 800a53a:	6041      	str	r1, [r0, #4]
 800a53c:	0052      	lsls	r2, r2, #1
 800a53e:	e7b8      	b.n	800a4b2 <_dtoa_r+0x292>
 800a540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a542:	9a01      	ldr	r2, [sp, #4]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	2b0e      	cmp	r3, #14
 800a54a:	f200 809d 	bhi.w	800a688 <_dtoa_r+0x468>
 800a54e:	2d00      	cmp	r5, #0
 800a550:	f000 809a 	beq.w	800a688 <_dtoa_r+0x468>
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	dd32      	ble.n	800a5c0 <_dtoa_r+0x3a0>
 800a55a:	4ab7      	ldr	r2, [pc, #732]	; (800a838 <_dtoa_r+0x618>)
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a564:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	05d8      	lsls	r0, r3, #23
 800a56c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a570:	d516      	bpl.n	800a5a0 <_dtoa_r+0x380>
 800a572:	4bb2      	ldr	r3, [pc, #712]	; (800a83c <_dtoa_r+0x61c>)
 800a574:	ec51 0b19 	vmov	r0, r1, d9
 800a578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a57c:	f7f6 f986 	bl	800088c <__aeabi_ddiv>
 800a580:	f007 070f 	and.w	r7, r7, #15
 800a584:	4682      	mov	sl, r0
 800a586:	468b      	mov	fp, r1
 800a588:	2503      	movs	r5, #3
 800a58a:	4eac      	ldr	r6, [pc, #688]	; (800a83c <_dtoa_r+0x61c>)
 800a58c:	b957      	cbnz	r7, 800a5a4 <_dtoa_r+0x384>
 800a58e:	4642      	mov	r2, r8
 800a590:	464b      	mov	r3, r9
 800a592:	4650      	mov	r0, sl
 800a594:	4659      	mov	r1, fp
 800a596:	f7f6 f979 	bl	800088c <__aeabi_ddiv>
 800a59a:	4682      	mov	sl, r0
 800a59c:	468b      	mov	fp, r1
 800a59e:	e028      	b.n	800a5f2 <_dtoa_r+0x3d2>
 800a5a0:	2502      	movs	r5, #2
 800a5a2:	e7f2      	b.n	800a58a <_dtoa_r+0x36a>
 800a5a4:	07f9      	lsls	r1, r7, #31
 800a5a6:	d508      	bpl.n	800a5ba <_dtoa_r+0x39a>
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5b0:	f7f6 f842 	bl	8000638 <__aeabi_dmul>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4689      	mov	r9, r1
 800a5ba:	107f      	asrs	r7, r7, #1
 800a5bc:	3608      	adds	r6, #8
 800a5be:	e7e5      	b.n	800a58c <_dtoa_r+0x36c>
 800a5c0:	f000 809b 	beq.w	800a6fa <_dtoa_r+0x4da>
 800a5c4:	9b00      	ldr	r3, [sp, #0]
 800a5c6:	4f9d      	ldr	r7, [pc, #628]	; (800a83c <_dtoa_r+0x61c>)
 800a5c8:	425e      	negs	r6, r3
 800a5ca:	4b9b      	ldr	r3, [pc, #620]	; (800a838 <_dtoa_r+0x618>)
 800a5cc:	f006 020f 	and.w	r2, r6, #15
 800a5d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	ec51 0b19 	vmov	r0, r1, d9
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	1136      	asrs	r6, r6, #4
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	468b      	mov	fp, r1
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2502      	movs	r5, #2
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	d17a      	bne.n	800a6e4 <_dtoa_r+0x4c4>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1d3      	bne.n	800a59a <_dtoa_r+0x37a>
 800a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8082 	beq.w	800a6fe <_dtoa_r+0x4de>
 800a5fa:	4b91      	ldr	r3, [pc, #580]	; (800a840 <_dtoa_r+0x620>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4650      	mov	r0, sl
 800a600:	4659      	mov	r1, fp
 800a602:	f7f6 fa8b 	bl	8000b1c <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d079      	beq.n	800a6fe <_dtoa_r+0x4de>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d076      	beq.n	800a6fe <_dtoa_r+0x4de>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd36      	ble.n	800a684 <_dtoa_r+0x464>
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	4650      	mov	r0, sl
 800a61a:	4659      	mov	r1, fp
 800a61c:	1e5f      	subs	r7, r3, #1
 800a61e:	2200      	movs	r2, #0
 800a620:	4b88      	ldr	r3, [pc, #544]	; (800a844 <_dtoa_r+0x624>)
 800a622:	f7f6 f809 	bl	8000638 <__aeabi_dmul>
 800a626:	9e02      	ldr	r6, [sp, #8]
 800a628:	4682      	mov	sl, r0
 800a62a:	468b      	mov	fp, r1
 800a62c:	3501      	adds	r5, #1
 800a62e:	4628      	mov	r0, r5
 800a630:	f7f5 ff98 	bl	8000564 <__aeabi_i2d>
 800a634:	4652      	mov	r2, sl
 800a636:	465b      	mov	r3, fp
 800a638:	f7f5 fffe 	bl	8000638 <__aeabi_dmul>
 800a63c:	4b82      	ldr	r3, [pc, #520]	; (800a848 <_dtoa_r+0x628>)
 800a63e:	2200      	movs	r2, #0
 800a640:	f7f5 fe44 	bl	80002cc <__adddf3>
 800a644:	46d0      	mov	r8, sl
 800a646:	46d9      	mov	r9, fp
 800a648:	4682      	mov	sl, r0
 800a64a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d158      	bne.n	800a704 <_dtoa_r+0x4e4>
 800a652:	4b7e      	ldr	r3, [pc, #504]	; (800a84c <_dtoa_r+0x62c>)
 800a654:	2200      	movs	r2, #0
 800a656:	4640      	mov	r0, r8
 800a658:	4649      	mov	r1, r9
 800a65a:	f7f5 fe35 	bl	80002c8 <__aeabi_dsub>
 800a65e:	4652      	mov	r2, sl
 800a660:	465b      	mov	r3, fp
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	f7f6 fa77 	bl	8000b58 <__aeabi_dcmpgt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f040 8295 	bne.w	800ab9a <_dtoa_r+0x97a>
 800a670:	4652      	mov	r2, sl
 800a672:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f6 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f040 8289 	bne.w	800ab96 <_dtoa_r+0x976>
 800a684:	ec5b ab19 	vmov	sl, fp, d9
 800a688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f2c0 8148 	blt.w	800a920 <_dtoa_r+0x700>
 800a690:	9a00      	ldr	r2, [sp, #0]
 800a692:	2a0e      	cmp	r2, #14
 800a694:	f300 8144 	bgt.w	800a920 <_dtoa_r+0x700>
 800a698:	4b67      	ldr	r3, [pc, #412]	; (800a838 <_dtoa_r+0x618>)
 800a69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a69e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f280 80d5 	bge.w	800a854 <_dtoa_r+0x634>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f300 80d1 	bgt.w	800a854 <_dtoa_r+0x634>
 800a6b2:	f040 826f 	bne.w	800ab94 <_dtoa_r+0x974>
 800a6b6:	4b65      	ldr	r3, [pc, #404]	; (800a84c <_dtoa_r+0x62c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f5 ffbb 	bl	8000638 <__aeabi_dmul>
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	f7f6 fa3d 	bl	8000b44 <__aeabi_dcmpge>
 800a6ca:	9e03      	ldr	r6, [sp, #12]
 800a6cc:	4637      	mov	r7, r6
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8245 	bne.w	800ab5e <_dtoa_r+0x93e>
 800a6d4:	9d01      	ldr	r5, [sp, #4]
 800a6d6:	2331      	movs	r3, #49	; 0x31
 800a6d8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	e240      	b.n	800ab66 <_dtoa_r+0x946>
 800a6e4:	07f2      	lsls	r2, r6, #31
 800a6e6:	d505      	bpl.n	800a6f4 <_dtoa_r+0x4d4>
 800a6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ec:	f7f5 ffa4 	bl	8000638 <__aeabi_dmul>
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	1076      	asrs	r6, r6, #1
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	e777      	b.n	800a5ea <_dtoa_r+0x3ca>
 800a6fa:	2502      	movs	r5, #2
 800a6fc:	e779      	b.n	800a5f2 <_dtoa_r+0x3d2>
 800a6fe:	9f00      	ldr	r7, [sp, #0]
 800a700:	9e03      	ldr	r6, [sp, #12]
 800a702:	e794      	b.n	800a62e <_dtoa_r+0x40e>
 800a704:	9901      	ldr	r1, [sp, #4]
 800a706:	4b4c      	ldr	r3, [pc, #304]	; (800a838 <_dtoa_r+0x618>)
 800a708:	4431      	add	r1, r6
 800a70a:	910d      	str	r1, [sp, #52]	; 0x34
 800a70c:	9908      	ldr	r1, [sp, #32]
 800a70e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a712:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a716:	2900      	cmp	r1, #0
 800a718:	d043      	beq.n	800a7a2 <_dtoa_r+0x582>
 800a71a:	494d      	ldr	r1, [pc, #308]	; (800a850 <_dtoa_r+0x630>)
 800a71c:	2000      	movs	r0, #0
 800a71e:	f7f6 f8b5 	bl	800088c <__aeabi_ddiv>
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	f7f5 fdcf 	bl	80002c8 <__aeabi_dsub>
 800a72a:	9d01      	ldr	r5, [sp, #4]
 800a72c:	4682      	mov	sl, r0
 800a72e:	468b      	mov	fp, r1
 800a730:	4649      	mov	r1, r9
 800a732:	4640      	mov	r0, r8
 800a734:	f7f6 fa30 	bl	8000b98 <__aeabi_d2iz>
 800a738:	4606      	mov	r6, r0
 800a73a:	f7f5 ff13 	bl	8000564 <__aeabi_i2d>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 fdbf 	bl	80002c8 <__aeabi_dsub>
 800a74a:	3630      	adds	r6, #48	; 0x30
 800a74c:	f805 6b01 	strb.w	r6, [r5], #1
 800a750:	4652      	mov	r2, sl
 800a752:	465b      	mov	r3, fp
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	f7f6 f9e0 	bl	8000b1c <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d163      	bne.n	800a828 <_dtoa_r+0x608>
 800a760:	4642      	mov	r2, r8
 800a762:	464b      	mov	r3, r9
 800a764:	4936      	ldr	r1, [pc, #216]	; (800a840 <_dtoa_r+0x620>)
 800a766:	2000      	movs	r0, #0
 800a768:	f7f5 fdae 	bl	80002c8 <__aeabi_dsub>
 800a76c:	4652      	mov	r2, sl
 800a76e:	465b      	mov	r3, fp
 800a770:	f7f6 f9d4 	bl	8000b1c <__aeabi_dcmplt>
 800a774:	2800      	cmp	r0, #0
 800a776:	f040 80b5 	bne.w	800a8e4 <_dtoa_r+0x6c4>
 800a77a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a77c:	429d      	cmp	r5, r3
 800a77e:	d081      	beq.n	800a684 <_dtoa_r+0x464>
 800a780:	4b30      	ldr	r3, [pc, #192]	; (800a844 <_dtoa_r+0x624>)
 800a782:	2200      	movs	r2, #0
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	4b2d      	ldr	r3, [pc, #180]	; (800a844 <_dtoa_r+0x624>)
 800a78e:	4682      	mov	sl, r0
 800a790:	468b      	mov	fp, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	2200      	movs	r2, #0
 800a798:	f7f5 ff4e 	bl	8000638 <__aeabi_dmul>
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	e7c6      	b.n	800a730 <_dtoa_r+0x510>
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	f7f5 ff47 	bl	8000638 <__aeabi_dmul>
 800a7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ac:	9d01      	ldr	r5, [sp, #4]
 800a7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7f6 f9ee 	bl	8000b98 <__aeabi_d2iz>
 800a7bc:	4606      	mov	r6, r0
 800a7be:	f7f5 fed1 	bl	8000564 <__aeabi_i2d>
 800a7c2:	3630      	adds	r6, #48	; 0x30
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 fd7c 	bl	80002c8 <__aeabi_dsub>
 800a7d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d6:	429d      	cmp	r5, r3
 800a7d8:	4680      	mov	r8, r0
 800a7da:	4689      	mov	r9, r1
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	d124      	bne.n	800a82c <_dtoa_r+0x60c>
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <_dtoa_r+0x630>)
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	4659      	mov	r1, fp
 800a7e8:	f7f5 fd70 	bl	80002cc <__adddf3>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	f7f6 f9b0 	bl	8000b58 <__aeabi_dcmpgt>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d173      	bne.n	800a8e4 <_dtoa_r+0x6c4>
 800a7fc:	4652      	mov	r2, sl
 800a7fe:	465b      	mov	r3, fp
 800a800:	4913      	ldr	r1, [pc, #76]	; (800a850 <_dtoa_r+0x630>)
 800a802:	2000      	movs	r0, #0
 800a804:	f7f5 fd60 	bl	80002c8 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f984 	bl	8000b1c <__aeabi_dcmplt>
 800a814:	2800      	cmp	r0, #0
 800a816:	f43f af35 	beq.w	800a684 <_dtoa_r+0x464>
 800a81a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a81c:	1e6b      	subs	r3, r5, #1
 800a81e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a820:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a824:	2b30      	cmp	r3, #48	; 0x30
 800a826:	d0f8      	beq.n	800a81a <_dtoa_r+0x5fa>
 800a828:	9700      	str	r7, [sp, #0]
 800a82a:	e049      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <_dtoa_r+0x624>)
 800a82e:	f7f5 ff03 	bl	8000638 <__aeabi_dmul>
 800a832:	4680      	mov	r8, r0
 800a834:	4689      	mov	r9, r1
 800a836:	e7bd      	b.n	800a7b4 <_dtoa_r+0x594>
 800a838:	0800d420 	.word	0x0800d420
 800a83c:	0800d3f8 	.word	0x0800d3f8
 800a840:	3ff00000 	.word	0x3ff00000
 800a844:	40240000 	.word	0x40240000
 800a848:	401c0000 	.word	0x401c0000
 800a84c:	40140000 	.word	0x40140000
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	9d01      	ldr	r5, [sp, #4]
 800a856:	4656      	mov	r6, sl
 800a858:	465f      	mov	r7, fp
 800a85a:	4642      	mov	r2, r8
 800a85c:	464b      	mov	r3, r9
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f6 f813 	bl	800088c <__aeabi_ddiv>
 800a866:	f7f6 f997 	bl	8000b98 <__aeabi_d2iz>
 800a86a:	4682      	mov	sl, r0
 800a86c:	f7f5 fe7a 	bl	8000564 <__aeabi_i2d>
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	f7f5 fee0 	bl	8000638 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a884:	f7f5 fd20 	bl	80002c8 <__aeabi_dsub>
 800a888:	f805 6b01 	strb.w	r6, [r5], #1
 800a88c:	9e01      	ldr	r6, [sp, #4]
 800a88e:	9f03      	ldr	r7, [sp, #12]
 800a890:	1bae      	subs	r6, r5, r6
 800a892:	42b7      	cmp	r7, r6
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	d135      	bne.n	800a906 <_dtoa_r+0x6e6>
 800a89a:	f7f5 fd17 	bl	80002cc <__adddf3>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	f7f6 f957 	bl	8000b58 <__aeabi_dcmpgt>
 800a8aa:	b9d0      	cbnz	r0, 800a8e2 <_dtoa_r+0x6c2>
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f6 f928 	bl	8000b08 <__aeabi_dcmpeq>
 800a8b8:	b110      	cbz	r0, 800a8c0 <_dtoa_r+0x6a0>
 800a8ba:	f01a 0f01 	tst.w	sl, #1
 800a8be:	d110      	bne.n	800a8e2 <_dtoa_r+0x6c2>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	ee18 1a10 	vmov	r1, s16
 800a8c6:	f000 fe75 	bl	800b5b4 <_Bfree>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9800      	ldr	r0, [sp, #0]
 800a8ce:	702b      	strb	r3, [r5, #0]
 800a8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	6018      	str	r0, [r3, #0]
 800a8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f43f acf1 	beq.w	800a2c0 <_dtoa_r+0xa0>
 800a8de:	601d      	str	r5, [r3, #0]
 800a8e0:	e4ee      	b.n	800a2c0 <_dtoa_r+0xa0>
 800a8e2:	9f00      	ldr	r7, [sp, #0]
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	461d      	mov	r5, r3
 800a8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8ec:	2a39      	cmp	r2, #57	; 0x39
 800a8ee:	d106      	bne.n	800a8fe <_dtoa_r+0x6de>
 800a8f0:	9a01      	ldr	r2, [sp, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d1f7      	bne.n	800a8e6 <_dtoa_r+0x6c6>
 800a8f6:	9901      	ldr	r1, [sp, #4]
 800a8f8:	2230      	movs	r2, #48	; 0x30
 800a8fa:	3701      	adds	r7, #1
 800a8fc:	700a      	strb	r2, [r1, #0]
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	3201      	adds	r2, #1
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	e790      	b.n	800a828 <_dtoa_r+0x608>
 800a906:	4ba6      	ldr	r3, [pc, #664]	; (800aba0 <_dtoa_r+0x980>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f7f5 fe95 	bl	8000638 <__aeabi_dmul>
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	4606      	mov	r6, r0
 800a914:	460f      	mov	r7, r1
 800a916:	f7f6 f8f7 	bl	8000b08 <__aeabi_dcmpeq>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d09d      	beq.n	800a85a <_dtoa_r+0x63a>
 800a91e:	e7cf      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800a920:	9a08      	ldr	r2, [sp, #32]
 800a922:	2a00      	cmp	r2, #0
 800a924:	f000 80d7 	beq.w	800aad6 <_dtoa_r+0x8b6>
 800a928:	9a06      	ldr	r2, [sp, #24]
 800a92a:	2a01      	cmp	r2, #1
 800a92c:	f300 80ba 	bgt.w	800aaa4 <_dtoa_r+0x884>
 800a930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a932:	2a00      	cmp	r2, #0
 800a934:	f000 80b2 	beq.w	800aa9c <_dtoa_r+0x87c>
 800a938:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a93c:	9e07      	ldr	r6, [sp, #28]
 800a93e:	9d04      	ldr	r5, [sp, #16]
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	441a      	add	r2, r3
 800a944:	9204      	str	r2, [sp, #16]
 800a946:	9a05      	ldr	r2, [sp, #20]
 800a948:	2101      	movs	r1, #1
 800a94a:	441a      	add	r2, r3
 800a94c:	4620      	mov	r0, r4
 800a94e:	9205      	str	r2, [sp, #20]
 800a950:	f000 ff32 	bl	800b7b8 <__i2b>
 800a954:	4607      	mov	r7, r0
 800a956:	2d00      	cmp	r5, #0
 800a958:	dd0c      	ble.n	800a974 <_dtoa_r+0x754>
 800a95a:	9b05      	ldr	r3, [sp, #20]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd09      	ble.n	800a974 <_dtoa_r+0x754>
 800a960:	42ab      	cmp	r3, r5
 800a962:	9a04      	ldr	r2, [sp, #16]
 800a964:	bfa8      	it	ge
 800a966:	462b      	movge	r3, r5
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	9204      	str	r2, [sp, #16]
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	1aed      	subs	r5, r5, r3
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	b31b      	cbz	r3, 800a9c0 <_dtoa_r+0x7a0>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 80af 	beq.w	800aade <_dtoa_r+0x8be>
 800a980:	2e00      	cmp	r6, #0
 800a982:	dd13      	ble.n	800a9ac <_dtoa_r+0x78c>
 800a984:	4639      	mov	r1, r7
 800a986:	4632      	mov	r2, r6
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 ffd5 	bl	800b938 <__pow5mult>
 800a98e:	ee18 2a10 	vmov	r2, s16
 800a992:	4601      	mov	r1, r0
 800a994:	4607      	mov	r7, r0
 800a996:	4620      	mov	r0, r4
 800a998:	f000 ff24 	bl	800b7e4 <__multiply>
 800a99c:	ee18 1a10 	vmov	r1, s16
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fe06 	bl	800b5b4 <_Bfree>
 800a9a8:	ee08 8a10 	vmov	s16, r8
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	1b9a      	subs	r2, r3, r6
 800a9b0:	d006      	beq.n	800a9c0 <_dtoa_r+0x7a0>
 800a9b2:	ee18 1a10 	vmov	r1, s16
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 ffbe 	bl	800b938 <__pow5mult>
 800a9bc:	ee08 0a10 	vmov	s16, r0
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fef8 	bl	800b7b8 <__i2b>
 800a9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	f340 8088 	ble.w	800aae2 <_dtoa_r+0x8c2>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 ffae 	bl	800b938 <__pow5mult>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	f340 8081 	ble.w	800aae8 <_dtoa_r+0x8c8>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	6933      	ldr	r3, [r6, #16]
 800a9ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9f0:	6918      	ldr	r0, [r3, #16]
 800a9f2:	f000 fe91 	bl	800b718 <__hi0bits>
 800a9f6:	f1c0 0020 	rsb	r0, r0, #32
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	4418      	add	r0, r3
 800a9fe:	f010 001f 	ands.w	r0, r0, #31
 800aa02:	f000 8092 	beq.w	800ab2a <_dtoa_r+0x90a>
 800aa06:	f1c0 0320 	rsb	r3, r0, #32
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	f340 808a 	ble.w	800ab24 <_dtoa_r+0x904>
 800aa10:	f1c0 001c 	rsb	r0, r0, #28
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	4403      	add	r3, r0
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	4403      	add	r3, r0
 800aa1e:	4405      	add	r5, r0
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	9b04      	ldr	r3, [sp, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	dd07      	ble.n	800aa38 <_dtoa_r+0x818>
 800aa28:	ee18 1a10 	vmov	r1, s16
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 ffdc 	bl	800b9ec <__lshift>
 800aa34:	ee08 0a10 	vmov	s16, r0
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd05      	ble.n	800aa4a <_dtoa_r+0x82a>
 800aa3e:	4631      	mov	r1, r6
 800aa40:	461a      	mov	r2, r3
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 ffd2 	bl	800b9ec <__lshift>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d06e      	beq.n	800ab2e <_dtoa_r+0x90e>
 800aa50:	ee18 0a10 	vmov	r0, s16
 800aa54:	4631      	mov	r1, r6
 800aa56:	f001 f839 	bl	800bacc <__mcmp>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	da67      	bge.n	800ab2e <_dtoa_r+0x90e>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	ee18 1a10 	vmov	r1, s16
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	220a      	movs	r2, #10
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fdc3 	bl	800b5f8 <__multadd>
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	ee08 0a10 	vmov	s16, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 81b1 	beq.w	800ade0 <_dtoa_r+0xbc0>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4639      	mov	r1, r7
 800aa82:	220a      	movs	r2, #10
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fdb7 	bl	800b5f8 <__multadd>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	4607      	mov	r7, r0
 800aa90:	f300 808e 	bgt.w	800abb0 <_dtoa_r+0x990>
 800aa94:	9b06      	ldr	r3, [sp, #24]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	dc51      	bgt.n	800ab3e <_dtoa_r+0x91e>
 800aa9a:	e089      	b.n	800abb0 <_dtoa_r+0x990>
 800aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaa2:	e74b      	b.n	800a93c <_dtoa_r+0x71c>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1e5e      	subs	r6, r3, #1
 800aaa8:	9b07      	ldr	r3, [sp, #28]
 800aaaa:	42b3      	cmp	r3, r6
 800aaac:	bfbf      	itttt	lt
 800aaae:	9b07      	ldrlt	r3, [sp, #28]
 800aab0:	9607      	strlt	r6, [sp, #28]
 800aab2:	1af2      	sublt	r2, r6, r3
 800aab4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aab6:	bfb6      	itet	lt
 800aab8:	189b      	addlt	r3, r3, r2
 800aaba:	1b9e      	subge	r6, r3, r6
 800aabc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	bfb8      	it	lt
 800aac2:	2600      	movlt	r6, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfb7      	itett	lt
 800aac8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aacc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aad0:	1a9d      	sublt	r5, r3, r2
 800aad2:	2300      	movlt	r3, #0
 800aad4:	e734      	b.n	800a940 <_dtoa_r+0x720>
 800aad6:	9e07      	ldr	r6, [sp, #28]
 800aad8:	9d04      	ldr	r5, [sp, #16]
 800aada:	9f08      	ldr	r7, [sp, #32]
 800aadc:	e73b      	b.n	800a956 <_dtoa_r+0x736>
 800aade:	9a07      	ldr	r2, [sp, #28]
 800aae0:	e767      	b.n	800a9b2 <_dtoa_r+0x792>
 800aae2:	9b06      	ldr	r3, [sp, #24]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	dc18      	bgt.n	800ab1a <_dtoa_r+0x8fa>
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	d115      	bne.n	800ab1a <_dtoa_r+0x8fa>
 800aaee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaf2:	b993      	cbnz	r3, 800ab1a <_dtoa_r+0x8fa>
 800aaf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaf8:	0d1b      	lsrs	r3, r3, #20
 800aafa:	051b      	lsls	r3, r3, #20
 800aafc:	b183      	cbz	r3, 800ab20 <_dtoa_r+0x900>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	3301      	adds	r3, #1
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	9b05      	ldr	r3, [sp, #20]
 800ab06:	3301      	adds	r3, #1
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	f04f 0801 	mov.w	r8, #1
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f47f af6a 	bne.w	800a9ea <_dtoa_r+0x7ca>
 800ab16:	2001      	movs	r0, #1
 800ab18:	e76f      	b.n	800a9fa <_dtoa_r+0x7da>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	e7f6      	b.n	800ab0e <_dtoa_r+0x8ee>
 800ab20:	4698      	mov	r8, r3
 800ab22:	e7f4      	b.n	800ab0e <_dtoa_r+0x8ee>
 800ab24:	f43f af7d 	beq.w	800aa22 <_dtoa_r+0x802>
 800ab28:	4618      	mov	r0, r3
 800ab2a:	301c      	adds	r0, #28
 800ab2c:	e772      	b.n	800aa14 <_dtoa_r+0x7f4>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc37      	bgt.n	800aba4 <_dtoa_r+0x984>
 800ab34:	9b06      	ldr	r3, [sp, #24]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dd34      	ble.n	800aba4 <_dtoa_r+0x984>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	b96b      	cbnz	r3, 800ab5e <_dtoa_r+0x93e>
 800ab42:	4631      	mov	r1, r6
 800ab44:	2205      	movs	r2, #5
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fd56 	bl	800b5f8 <__multadd>
 800ab4c:	4601      	mov	r1, r0
 800ab4e:	4606      	mov	r6, r0
 800ab50:	ee18 0a10 	vmov	r0, s16
 800ab54:	f000 ffba 	bl	800bacc <__mcmp>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f73f adbb 	bgt.w	800a6d4 <_dtoa_r+0x4b4>
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	9d01      	ldr	r5, [sp, #4]
 800ab62:	43db      	mvns	r3, r3
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fd21 	bl	800b5b4 <_Bfree>
 800ab72:	2f00      	cmp	r7, #0
 800ab74:	f43f aea4 	beq.w	800a8c0 <_dtoa_r+0x6a0>
 800ab78:	f1b8 0f00 	cmp.w	r8, #0
 800ab7c:	d005      	beq.n	800ab8a <_dtoa_r+0x96a>
 800ab7e:	45b8      	cmp	r8, r7
 800ab80:	d003      	beq.n	800ab8a <_dtoa_r+0x96a>
 800ab82:	4641      	mov	r1, r8
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fd15 	bl	800b5b4 <_Bfree>
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 fd11 	bl	800b5b4 <_Bfree>
 800ab92:	e695      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800ab94:	2600      	movs	r6, #0
 800ab96:	4637      	mov	r7, r6
 800ab98:	e7e1      	b.n	800ab5e <_dtoa_r+0x93e>
 800ab9a:	9700      	str	r7, [sp, #0]
 800ab9c:	4637      	mov	r7, r6
 800ab9e:	e599      	b.n	800a6d4 <_dtoa_r+0x4b4>
 800aba0:	40240000 	.word	0x40240000
 800aba4:	9b08      	ldr	r3, [sp, #32]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 80ca 	beq.w	800ad40 <_dtoa_r+0xb20>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	2d00      	cmp	r5, #0
 800abb2:	dd05      	ble.n	800abc0 <_dtoa_r+0x9a0>
 800abb4:	4639      	mov	r1, r7
 800abb6:	462a      	mov	r2, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 ff17 	bl	800b9ec <__lshift>
 800abbe:	4607      	mov	r7, r0
 800abc0:	f1b8 0f00 	cmp.w	r8, #0
 800abc4:	d05b      	beq.n	800ac7e <_dtoa_r+0xa5e>
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fcb3 	bl	800b534 <_Balloc>
 800abce:	4605      	mov	r5, r0
 800abd0:	b928      	cbnz	r0, 800abde <_dtoa_r+0x9be>
 800abd2:	4b87      	ldr	r3, [pc, #540]	; (800adf0 <_dtoa_r+0xbd0>)
 800abd4:	4602      	mov	r2, r0
 800abd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abda:	f7ff bb3b 	b.w	800a254 <_dtoa_r+0x34>
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	3202      	adds	r2, #2
 800abe2:	0092      	lsls	r2, r2, #2
 800abe4:	f107 010c 	add.w	r1, r7, #12
 800abe8:	300c      	adds	r0, #12
 800abea:	f000 fc95 	bl	800b518 <memcpy>
 800abee:	2201      	movs	r2, #1
 800abf0:	4629      	mov	r1, r5
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 fefa 	bl	800b9ec <__lshift>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	f103 0901 	add.w	r9, r3, #1
 800abfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	f00a 0301 	and.w	r3, sl, #1
 800ac0a:	46b8      	mov	r8, r7
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	4607      	mov	r7, r0
 800ac10:	4631      	mov	r1, r6
 800ac12:	ee18 0a10 	vmov	r0, s16
 800ac16:	f7ff fa77 	bl	800a108 <quorem>
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	9002      	str	r0, [sp, #8]
 800ac1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac22:	ee18 0a10 	vmov	r0, s16
 800ac26:	f000 ff51 	bl	800bacc <__mcmp>
 800ac2a:	463a      	mov	r2, r7
 800ac2c:	9003      	str	r0, [sp, #12]
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 ff67 	bl	800bb04 <__mdiff>
 800ac36:	68c2      	ldr	r2, [r0, #12]
 800ac38:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	bb02      	cbnz	r2, 800ac82 <_dtoa_r+0xa62>
 800ac40:	4601      	mov	r1, r0
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	f000 ff41 	bl	800bacc <__mcmp>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	9207      	str	r2, [sp, #28]
 800ac52:	f000 fcaf 	bl	800b5b4 <_Bfree>
 800ac56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac5a:	ea43 0102 	orr.w	r1, r3, r2
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	430b      	orrs	r3, r1
 800ac62:	464d      	mov	r5, r9
 800ac64:	d10f      	bne.n	800ac86 <_dtoa_r+0xa66>
 800ac66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac6a:	d02a      	beq.n	800acc2 <_dtoa_r+0xaa2>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd02      	ble.n	800ac78 <_dtoa_r+0xa58>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac78:	f88b a000 	strb.w	sl, [fp]
 800ac7c:	e775      	b.n	800ab6a <_dtoa_r+0x94a>
 800ac7e:	4638      	mov	r0, r7
 800ac80:	e7ba      	b.n	800abf8 <_dtoa_r+0x9d8>
 800ac82:	2201      	movs	r2, #1
 800ac84:	e7e2      	b.n	800ac4c <_dtoa_r+0xa2c>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	db04      	blt.n	800ac96 <_dtoa_r+0xa76>
 800ac8c:	9906      	ldr	r1, [sp, #24]
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	9904      	ldr	r1, [sp, #16]
 800ac92:	430b      	orrs	r3, r1
 800ac94:	d122      	bne.n	800acdc <_dtoa_r+0xabc>
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	ddee      	ble.n	800ac78 <_dtoa_r+0xa58>
 800ac9a:	ee18 1a10 	vmov	r1, s16
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fea3 	bl	800b9ec <__lshift>
 800aca6:	4631      	mov	r1, r6
 800aca8:	ee08 0a10 	vmov	s16, r0
 800acac:	f000 ff0e 	bl	800bacc <__mcmp>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	dc03      	bgt.n	800acbc <_dtoa_r+0xa9c>
 800acb4:	d1e0      	bne.n	800ac78 <_dtoa_r+0xa58>
 800acb6:	f01a 0f01 	tst.w	sl, #1
 800acba:	d0dd      	beq.n	800ac78 <_dtoa_r+0xa58>
 800acbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acc0:	d1d7      	bne.n	800ac72 <_dtoa_r+0xa52>
 800acc2:	2339      	movs	r3, #57	; 0x39
 800acc4:	f88b 3000 	strb.w	r3, [fp]
 800acc8:	462b      	mov	r3, r5
 800acca:	461d      	mov	r5, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acd2:	2a39      	cmp	r2, #57	; 0x39
 800acd4:	d071      	beq.n	800adba <_dtoa_r+0xb9a>
 800acd6:	3201      	adds	r2, #1
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e746      	b.n	800ab6a <_dtoa_r+0x94a>
 800acdc:	2a00      	cmp	r2, #0
 800acde:	dd07      	ble.n	800acf0 <_dtoa_r+0xad0>
 800ace0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ace4:	d0ed      	beq.n	800acc2 <_dtoa_r+0xaa2>
 800ace6:	f10a 0301 	add.w	r3, sl, #1
 800acea:	f88b 3000 	strb.w	r3, [fp]
 800acee:	e73c      	b.n	800ab6a <_dtoa_r+0x94a>
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acf6:	4599      	cmp	r9, r3
 800acf8:	d047      	beq.n	800ad8a <_dtoa_r+0xb6a>
 800acfa:	ee18 1a10 	vmov	r1, s16
 800acfe:	2300      	movs	r3, #0
 800ad00:	220a      	movs	r2, #10
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fc78 	bl	800b5f8 <__multadd>
 800ad08:	45b8      	cmp	r8, r7
 800ad0a:	ee08 0a10 	vmov	s16, r0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	f04f 020a 	mov.w	r2, #10
 800ad16:	4641      	mov	r1, r8
 800ad18:	4620      	mov	r0, r4
 800ad1a:	d106      	bne.n	800ad2a <_dtoa_r+0xb0a>
 800ad1c:	f000 fc6c 	bl	800b5f8 <__multadd>
 800ad20:	4680      	mov	r8, r0
 800ad22:	4607      	mov	r7, r0
 800ad24:	f109 0901 	add.w	r9, r9, #1
 800ad28:	e772      	b.n	800ac10 <_dtoa_r+0x9f0>
 800ad2a:	f000 fc65 	bl	800b5f8 <__multadd>
 800ad2e:	4639      	mov	r1, r7
 800ad30:	4680      	mov	r8, r0
 800ad32:	2300      	movs	r3, #0
 800ad34:	220a      	movs	r2, #10
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fc5e 	bl	800b5f8 <__multadd>
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	e7f1      	b.n	800ad24 <_dtoa_r+0xb04>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	9302      	str	r3, [sp, #8]
 800ad44:	9d01      	ldr	r5, [sp, #4]
 800ad46:	ee18 0a10 	vmov	r0, s16
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	f7ff f9dc 	bl	800a108 <quorem>
 800ad50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	f805 ab01 	strb.w	sl, [r5], #1
 800ad5a:	1aea      	subs	r2, r5, r3
 800ad5c:	9b02      	ldr	r3, [sp, #8]
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	dd09      	ble.n	800ad76 <_dtoa_r+0xb56>
 800ad62:	ee18 1a10 	vmov	r1, s16
 800ad66:	2300      	movs	r3, #0
 800ad68:	220a      	movs	r2, #10
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fc44 	bl	800b5f8 <__multadd>
 800ad70:	ee08 0a10 	vmov	s16, r0
 800ad74:	e7e7      	b.n	800ad46 <_dtoa_r+0xb26>
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfc8      	it	gt
 800ad7c:	461d      	movgt	r5, r3
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	bfd8      	it	le
 800ad82:	2501      	movle	r5, #1
 800ad84:	441d      	add	r5, r3
 800ad86:	f04f 0800 	mov.w	r8, #0
 800ad8a:	ee18 1a10 	vmov	r1, s16
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fe2b 	bl	800b9ec <__lshift>
 800ad96:	4631      	mov	r1, r6
 800ad98:	ee08 0a10 	vmov	s16, r0
 800ad9c:	f000 fe96 	bl	800bacc <__mcmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	dc91      	bgt.n	800acc8 <_dtoa_r+0xaa8>
 800ada4:	d102      	bne.n	800adac <_dtoa_r+0xb8c>
 800ada6:	f01a 0f01 	tst.w	sl, #1
 800adaa:	d18d      	bne.n	800acc8 <_dtoa_r+0xaa8>
 800adac:	462b      	mov	r3, r5
 800adae:	461d      	mov	r5, r3
 800adb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adb4:	2a30      	cmp	r2, #48	; 0x30
 800adb6:	d0fa      	beq.n	800adae <_dtoa_r+0xb8e>
 800adb8:	e6d7      	b.n	800ab6a <_dtoa_r+0x94a>
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d184      	bne.n	800acca <_dtoa_r+0xaaa>
 800adc0:	9b00      	ldr	r3, [sp, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	2331      	movs	r3, #49	; 0x31
 800adc8:	7013      	strb	r3, [r2, #0]
 800adca:	e6ce      	b.n	800ab6a <_dtoa_r+0x94a>
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <_dtoa_r+0xbd4>)
 800adce:	f7ff ba95 	b.w	800a2fc <_dtoa_r+0xdc>
 800add2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add4:	2b00      	cmp	r3, #0
 800add6:	f47f aa6e 	bne.w	800a2b6 <_dtoa_r+0x96>
 800adda:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <_dtoa_r+0xbd8>)
 800addc:	f7ff ba8e 	b.w	800a2fc <_dtoa_r+0xdc>
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	dcae      	bgt.n	800ad44 <_dtoa_r+0xb24>
 800ade6:	9b06      	ldr	r3, [sp, #24]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	f73f aea8 	bgt.w	800ab3e <_dtoa_r+0x91e>
 800adee:	e7a9      	b.n	800ad44 <_dtoa_r+0xb24>
 800adf0:	0800d310 	.word	0x0800d310
 800adf4:	0800d110 	.word	0x0800d110
 800adf8:	0800d291 	.word	0x0800d291

0800adfc <rshift>:
 800adfc:	6903      	ldr	r3, [r0, #16]
 800adfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae0a:	f100 0414 	add.w	r4, r0, #20
 800ae0e:	dd45      	ble.n	800ae9c <rshift+0xa0>
 800ae10:	f011 011f 	ands.w	r1, r1, #31
 800ae14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae1c:	d10c      	bne.n	800ae38 <rshift+0x3c>
 800ae1e:	f100 0710 	add.w	r7, r0, #16
 800ae22:	4629      	mov	r1, r5
 800ae24:	42b1      	cmp	r1, r6
 800ae26:	d334      	bcc.n	800ae92 <rshift+0x96>
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	1eea      	subs	r2, r5, #3
 800ae2e:	4296      	cmp	r6, r2
 800ae30:	bf38      	it	cc
 800ae32:	2300      	movcc	r3, #0
 800ae34:	4423      	add	r3, r4
 800ae36:	e015      	b.n	800ae64 <rshift+0x68>
 800ae38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae3c:	f1c1 0820 	rsb	r8, r1, #32
 800ae40:	40cf      	lsrs	r7, r1
 800ae42:	f105 0e04 	add.w	lr, r5, #4
 800ae46:	46a1      	mov	r9, r4
 800ae48:	4576      	cmp	r6, lr
 800ae4a:	46f4      	mov	ip, lr
 800ae4c:	d815      	bhi.n	800ae7a <rshift+0x7e>
 800ae4e:	1a9a      	subs	r2, r3, r2
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	3a04      	subs	r2, #4
 800ae54:	3501      	adds	r5, #1
 800ae56:	42ae      	cmp	r6, r5
 800ae58:	bf38      	it	cc
 800ae5a:	2200      	movcc	r2, #0
 800ae5c:	18a3      	adds	r3, r4, r2
 800ae5e:	50a7      	str	r7, [r4, r2]
 800ae60:	b107      	cbz	r7, 800ae64 <rshift+0x68>
 800ae62:	3304      	adds	r3, #4
 800ae64:	1b1a      	subs	r2, r3, r4
 800ae66:	42a3      	cmp	r3, r4
 800ae68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae6c:	bf08      	it	eq
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	6102      	str	r2, [r0, #16]
 800ae72:	bf08      	it	eq
 800ae74:	6143      	streq	r3, [r0, #20]
 800ae76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae7a:	f8dc c000 	ldr.w	ip, [ip]
 800ae7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae82:	ea4c 0707 	orr.w	r7, ip, r7
 800ae86:	f849 7b04 	str.w	r7, [r9], #4
 800ae8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae8e:	40cf      	lsrs	r7, r1
 800ae90:	e7da      	b.n	800ae48 <rshift+0x4c>
 800ae92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae9a:	e7c3      	b.n	800ae24 <rshift+0x28>
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	e7e1      	b.n	800ae64 <rshift+0x68>

0800aea0 <__hexdig_fun>:
 800aea0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	d802      	bhi.n	800aeae <__hexdig_fun+0xe>
 800aea8:	3820      	subs	r0, #32
 800aeaa:	b2c0      	uxtb	r0, r0
 800aeac:	4770      	bx	lr
 800aeae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	d801      	bhi.n	800aeba <__hexdig_fun+0x1a>
 800aeb6:	3847      	subs	r0, #71	; 0x47
 800aeb8:	e7f7      	b.n	800aeaa <__hexdig_fun+0xa>
 800aeba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d801      	bhi.n	800aec6 <__hexdig_fun+0x26>
 800aec2:	3827      	subs	r0, #39	; 0x27
 800aec4:	e7f1      	b.n	800aeaa <__hexdig_fun+0xa>
 800aec6:	2000      	movs	r0, #0
 800aec8:	4770      	bx	lr
	...

0800aecc <__gethex>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	ed2d 8b02 	vpush	{d8}
 800aed4:	b089      	sub	sp, #36	; 0x24
 800aed6:	ee08 0a10 	vmov	s16, r0
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	4bb4      	ldr	r3, [pc, #720]	; (800b1b0 <__gethex+0x2e4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	4618      	mov	r0, r3
 800aee4:	468b      	mov	fp, r1
 800aee6:	4690      	mov	r8, r2
 800aee8:	f7f5 f992 	bl	8000210 <strlen>
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	f8db 2000 	ldr.w	r2, [fp]
 800aef2:	4403      	add	r3, r0
 800aef4:	4682      	mov	sl, r0
 800aef6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	1c93      	adds	r3, r2, #2
 800aefe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af06:	32fe      	adds	r2, #254	; 0xfe
 800af08:	18d1      	adds	r1, r2, r3
 800af0a:	461f      	mov	r7, r3
 800af0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af10:	9100      	str	r1, [sp, #0]
 800af12:	2830      	cmp	r0, #48	; 0x30
 800af14:	d0f8      	beq.n	800af08 <__gethex+0x3c>
 800af16:	f7ff ffc3 	bl	800aea0 <__hexdig_fun>
 800af1a:	4604      	mov	r4, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d13a      	bne.n	800af96 <__gethex+0xca>
 800af20:	9901      	ldr	r1, [sp, #4]
 800af22:	4652      	mov	r2, sl
 800af24:	4638      	mov	r0, r7
 800af26:	f001 fa33 	bl	800c390 <strncmp>
 800af2a:	4605      	mov	r5, r0
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d168      	bne.n	800b002 <__gethex+0x136>
 800af30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af34:	eb07 060a 	add.w	r6, r7, sl
 800af38:	f7ff ffb2 	bl	800aea0 <__hexdig_fun>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d062      	beq.n	800b006 <__gethex+0x13a>
 800af40:	4633      	mov	r3, r6
 800af42:	7818      	ldrb	r0, [r3, #0]
 800af44:	2830      	cmp	r0, #48	; 0x30
 800af46:	461f      	mov	r7, r3
 800af48:	f103 0301 	add.w	r3, r3, #1
 800af4c:	d0f9      	beq.n	800af42 <__gethex+0x76>
 800af4e:	f7ff ffa7 	bl	800aea0 <__hexdig_fun>
 800af52:	2301      	movs	r3, #1
 800af54:	fab0 f480 	clz	r4, r0
 800af58:	0964      	lsrs	r4, r4, #5
 800af5a:	4635      	mov	r5, r6
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	463a      	mov	r2, r7
 800af60:	4616      	mov	r6, r2
 800af62:	3201      	adds	r2, #1
 800af64:	7830      	ldrb	r0, [r6, #0]
 800af66:	f7ff ff9b 	bl	800aea0 <__hexdig_fun>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d1f8      	bne.n	800af60 <__gethex+0x94>
 800af6e:	9901      	ldr	r1, [sp, #4]
 800af70:	4652      	mov	r2, sl
 800af72:	4630      	mov	r0, r6
 800af74:	f001 fa0c 	bl	800c390 <strncmp>
 800af78:	b980      	cbnz	r0, 800af9c <__gethex+0xd0>
 800af7a:	b94d      	cbnz	r5, 800af90 <__gethex+0xc4>
 800af7c:	eb06 050a 	add.w	r5, r6, sl
 800af80:	462a      	mov	r2, r5
 800af82:	4616      	mov	r6, r2
 800af84:	3201      	adds	r2, #1
 800af86:	7830      	ldrb	r0, [r6, #0]
 800af88:	f7ff ff8a 	bl	800aea0 <__hexdig_fun>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1f8      	bne.n	800af82 <__gethex+0xb6>
 800af90:	1bad      	subs	r5, r5, r6
 800af92:	00ad      	lsls	r5, r5, #2
 800af94:	e004      	b.n	800afa0 <__gethex+0xd4>
 800af96:	2400      	movs	r4, #0
 800af98:	4625      	mov	r5, r4
 800af9a:	e7e0      	b.n	800af5e <__gethex+0x92>
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	d1f7      	bne.n	800af90 <__gethex+0xc4>
 800afa0:	7833      	ldrb	r3, [r6, #0]
 800afa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afa6:	2b50      	cmp	r3, #80	; 0x50
 800afa8:	d13b      	bne.n	800b022 <__gethex+0x156>
 800afaa:	7873      	ldrb	r3, [r6, #1]
 800afac:	2b2b      	cmp	r3, #43	; 0x2b
 800afae:	d02c      	beq.n	800b00a <__gethex+0x13e>
 800afb0:	2b2d      	cmp	r3, #45	; 0x2d
 800afb2:	d02e      	beq.n	800b012 <__gethex+0x146>
 800afb4:	1c71      	adds	r1, r6, #1
 800afb6:	f04f 0900 	mov.w	r9, #0
 800afba:	7808      	ldrb	r0, [r1, #0]
 800afbc:	f7ff ff70 	bl	800aea0 <__hexdig_fun>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b18      	cmp	r3, #24
 800afc6:	d82c      	bhi.n	800b022 <__gethex+0x156>
 800afc8:	f1a0 0210 	sub.w	r2, r0, #16
 800afcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afd0:	f7ff ff66 	bl	800aea0 <__hexdig_fun>
 800afd4:	1e43      	subs	r3, r0, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b18      	cmp	r3, #24
 800afda:	d91d      	bls.n	800b018 <__gethex+0x14c>
 800afdc:	f1b9 0f00 	cmp.w	r9, #0
 800afe0:	d000      	beq.n	800afe4 <__gethex+0x118>
 800afe2:	4252      	negs	r2, r2
 800afe4:	4415      	add	r5, r2
 800afe6:	f8cb 1000 	str.w	r1, [fp]
 800afea:	b1e4      	cbz	r4, 800b026 <__gethex+0x15a>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2700      	movne	r7, #0
 800aff4:	2706      	moveq	r7, #6
 800aff6:	4638      	mov	r0, r7
 800aff8:	b009      	add	sp, #36	; 0x24
 800affa:	ecbd 8b02 	vpop	{d8}
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	463e      	mov	r6, r7
 800b004:	4625      	mov	r5, r4
 800b006:	2401      	movs	r4, #1
 800b008:	e7ca      	b.n	800afa0 <__gethex+0xd4>
 800b00a:	f04f 0900 	mov.w	r9, #0
 800b00e:	1cb1      	adds	r1, r6, #2
 800b010:	e7d3      	b.n	800afba <__gethex+0xee>
 800b012:	f04f 0901 	mov.w	r9, #1
 800b016:	e7fa      	b.n	800b00e <__gethex+0x142>
 800b018:	230a      	movs	r3, #10
 800b01a:	fb03 0202 	mla	r2, r3, r2, r0
 800b01e:	3a10      	subs	r2, #16
 800b020:	e7d4      	b.n	800afcc <__gethex+0x100>
 800b022:	4631      	mov	r1, r6
 800b024:	e7df      	b.n	800afe6 <__gethex+0x11a>
 800b026:	1bf3      	subs	r3, r6, r7
 800b028:	3b01      	subs	r3, #1
 800b02a:	4621      	mov	r1, r4
 800b02c:	2b07      	cmp	r3, #7
 800b02e:	dc0b      	bgt.n	800b048 <__gethex+0x17c>
 800b030:	ee18 0a10 	vmov	r0, s16
 800b034:	f000 fa7e 	bl	800b534 <_Balloc>
 800b038:	4604      	mov	r4, r0
 800b03a:	b940      	cbnz	r0, 800b04e <__gethex+0x182>
 800b03c:	4b5d      	ldr	r3, [pc, #372]	; (800b1b4 <__gethex+0x2e8>)
 800b03e:	4602      	mov	r2, r0
 800b040:	21de      	movs	r1, #222	; 0xde
 800b042:	485d      	ldr	r0, [pc, #372]	; (800b1b8 <__gethex+0x2ec>)
 800b044:	f001 f9c6 	bl	800c3d4 <__assert_func>
 800b048:	3101      	adds	r1, #1
 800b04a:	105b      	asrs	r3, r3, #1
 800b04c:	e7ee      	b.n	800b02c <__gethex+0x160>
 800b04e:	f100 0914 	add.w	r9, r0, #20
 800b052:	f04f 0b00 	mov.w	fp, #0
 800b056:	f1ca 0301 	rsb	r3, sl, #1
 800b05a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b05e:	f8cd b000 	str.w	fp, [sp]
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	42b7      	cmp	r7, r6
 800b066:	d340      	bcc.n	800b0ea <__gethex+0x21e>
 800b068:	9802      	ldr	r0, [sp, #8]
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	f840 3b04 	str.w	r3, [r0], #4
 800b070:	eba0 0009 	sub.w	r0, r0, r9
 800b074:	1080      	asrs	r0, r0, #2
 800b076:	0146      	lsls	r6, r0, #5
 800b078:	6120      	str	r0, [r4, #16]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fb4c 	bl	800b718 <__hi0bits>
 800b080:	1a30      	subs	r0, r6, r0
 800b082:	f8d8 6000 	ldr.w	r6, [r8]
 800b086:	42b0      	cmp	r0, r6
 800b088:	dd63      	ble.n	800b152 <__gethex+0x286>
 800b08a:	1b87      	subs	r7, r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fef0 	bl	800be74 <__any_on>
 800b094:	4682      	mov	sl, r0
 800b096:	b1a8      	cbz	r0, 800b0c4 <__gethex+0x1f8>
 800b098:	1e7b      	subs	r3, r7, #1
 800b09a:	1159      	asrs	r1, r3, #5
 800b09c:	f003 021f 	and.w	r2, r3, #31
 800b0a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0a4:	f04f 0a01 	mov.w	sl, #1
 800b0a8:	fa0a f202 	lsl.w	r2, sl, r2
 800b0ac:	420a      	tst	r2, r1
 800b0ae:	d009      	beq.n	800b0c4 <__gethex+0x1f8>
 800b0b0:	4553      	cmp	r3, sl
 800b0b2:	dd05      	ble.n	800b0c0 <__gethex+0x1f4>
 800b0b4:	1eb9      	subs	r1, r7, #2
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f000 fedc 	bl	800be74 <__any_on>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d145      	bne.n	800b14c <__gethex+0x280>
 800b0c0:	f04f 0a02 	mov.w	sl, #2
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7ff fe98 	bl	800adfc <rshift>
 800b0cc:	443d      	add	r5, r7
 800b0ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0d2:	42ab      	cmp	r3, r5
 800b0d4:	da4c      	bge.n	800b170 <__gethex+0x2a4>
 800b0d6:	ee18 0a10 	vmov	r0, s16
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f000 fa6a 	bl	800b5b4 <_Bfree>
 800b0e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	27a3      	movs	r7, #163	; 0xa3
 800b0e8:	e785      	b.n	800aff6 <__gethex+0x12a>
 800b0ea:	1e73      	subs	r3, r6, #1
 800b0ec:	9a05      	ldr	r2, [sp, #20]
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d019      	beq.n	800b12c <__gethex+0x260>
 800b0f8:	f1bb 0f20 	cmp.w	fp, #32
 800b0fc:	d107      	bne.n	800b10e <__gethex+0x242>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	9a00      	ldr	r2, [sp, #0]
 800b102:	f843 2b04 	str.w	r2, [r3], #4
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	469b      	mov	fp, r3
 800b10e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b112:	f7ff fec5 	bl	800aea0 <__hexdig_fun>
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	f000 000f 	and.w	r0, r0, #15
 800b11c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b120:	4303      	orrs	r3, r0
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	f10b 0b04 	add.w	fp, fp, #4
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	e00d      	b.n	800b148 <__gethex+0x27c>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	9a06      	ldr	r2, [sp, #24]
 800b130:	4413      	add	r3, r2
 800b132:	42bb      	cmp	r3, r7
 800b134:	d3e0      	bcc.n	800b0f8 <__gethex+0x22c>
 800b136:	4618      	mov	r0, r3
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	4652      	mov	r2, sl
 800b13e:	f001 f927 	bl	800c390 <strncmp>
 800b142:	9b07      	ldr	r3, [sp, #28]
 800b144:	2800      	cmp	r0, #0
 800b146:	d1d7      	bne.n	800b0f8 <__gethex+0x22c>
 800b148:	461e      	mov	r6, r3
 800b14a:	e78b      	b.n	800b064 <__gethex+0x198>
 800b14c:	f04f 0a03 	mov.w	sl, #3
 800b150:	e7b8      	b.n	800b0c4 <__gethex+0x1f8>
 800b152:	da0a      	bge.n	800b16a <__gethex+0x29e>
 800b154:	1a37      	subs	r7, r6, r0
 800b156:	4621      	mov	r1, r4
 800b158:	ee18 0a10 	vmov	r0, s16
 800b15c:	463a      	mov	r2, r7
 800b15e:	f000 fc45 	bl	800b9ec <__lshift>
 800b162:	1bed      	subs	r5, r5, r7
 800b164:	4604      	mov	r4, r0
 800b166:	f100 0914 	add.w	r9, r0, #20
 800b16a:	f04f 0a00 	mov.w	sl, #0
 800b16e:	e7ae      	b.n	800b0ce <__gethex+0x202>
 800b170:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b174:	42a8      	cmp	r0, r5
 800b176:	dd72      	ble.n	800b25e <__gethex+0x392>
 800b178:	1b45      	subs	r5, r0, r5
 800b17a:	42ae      	cmp	r6, r5
 800b17c:	dc36      	bgt.n	800b1ec <__gethex+0x320>
 800b17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b182:	2b02      	cmp	r3, #2
 800b184:	d02a      	beq.n	800b1dc <__gethex+0x310>
 800b186:	2b03      	cmp	r3, #3
 800b188:	d02c      	beq.n	800b1e4 <__gethex+0x318>
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d11c      	bne.n	800b1c8 <__gethex+0x2fc>
 800b18e:	42ae      	cmp	r6, r5
 800b190:	d11a      	bne.n	800b1c8 <__gethex+0x2fc>
 800b192:	2e01      	cmp	r6, #1
 800b194:	d112      	bne.n	800b1bc <__gethex+0x2f0>
 800b196:	9a04      	ldr	r2, [sp, #16]
 800b198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	2301      	movs	r3, #1
 800b1a0:	6123      	str	r3, [r4, #16]
 800b1a2:	f8c9 3000 	str.w	r3, [r9]
 800b1a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1a8:	2762      	movs	r7, #98	; 0x62
 800b1aa:	601c      	str	r4, [r3, #0]
 800b1ac:	e723      	b.n	800aff6 <__gethex+0x12a>
 800b1ae:	bf00      	nop
 800b1b0:	0800d388 	.word	0x0800d388
 800b1b4:	0800d310 	.word	0x0800d310
 800b1b8:	0800d321 	.word	0x0800d321
 800b1bc:	1e71      	subs	r1, r6, #1
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fe58 	bl	800be74 <__any_on>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1e6      	bne.n	800b196 <__gethex+0x2ca>
 800b1c8:	ee18 0a10 	vmov	r0, s16
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f000 f9f1 	bl	800b5b4 <_Bfree>
 800b1d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	2750      	movs	r7, #80	; 0x50
 800b1da:	e70c      	b.n	800aff6 <__gethex+0x12a>
 800b1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f2      	bne.n	800b1c8 <__gethex+0x2fc>
 800b1e2:	e7d8      	b.n	800b196 <__gethex+0x2ca>
 800b1e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1d5      	bne.n	800b196 <__gethex+0x2ca>
 800b1ea:	e7ed      	b.n	800b1c8 <__gethex+0x2fc>
 800b1ec:	1e6f      	subs	r7, r5, #1
 800b1ee:	f1ba 0f00 	cmp.w	sl, #0
 800b1f2:	d131      	bne.n	800b258 <__gethex+0x38c>
 800b1f4:	b127      	cbz	r7, 800b200 <__gethex+0x334>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fe3b 	bl	800be74 <__any_on>
 800b1fe:	4682      	mov	sl, r0
 800b200:	117b      	asrs	r3, r7, #5
 800b202:	2101      	movs	r1, #1
 800b204:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b208:	f007 071f 	and.w	r7, r7, #31
 800b20c:	fa01 f707 	lsl.w	r7, r1, r7
 800b210:	421f      	tst	r7, r3
 800b212:	4629      	mov	r1, r5
 800b214:	4620      	mov	r0, r4
 800b216:	bf18      	it	ne
 800b218:	f04a 0a02 	orrne.w	sl, sl, #2
 800b21c:	1b76      	subs	r6, r6, r5
 800b21e:	f7ff fded 	bl	800adfc <rshift>
 800b222:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b226:	2702      	movs	r7, #2
 800b228:	f1ba 0f00 	cmp.w	sl, #0
 800b22c:	d048      	beq.n	800b2c0 <__gethex+0x3f4>
 800b22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d015      	beq.n	800b262 <__gethex+0x396>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d017      	beq.n	800b26a <__gethex+0x39e>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d109      	bne.n	800b252 <__gethex+0x386>
 800b23e:	f01a 0f02 	tst.w	sl, #2
 800b242:	d006      	beq.n	800b252 <__gethex+0x386>
 800b244:	f8d9 0000 	ldr.w	r0, [r9]
 800b248:	ea4a 0a00 	orr.w	sl, sl, r0
 800b24c:	f01a 0f01 	tst.w	sl, #1
 800b250:	d10e      	bne.n	800b270 <__gethex+0x3a4>
 800b252:	f047 0710 	orr.w	r7, r7, #16
 800b256:	e033      	b.n	800b2c0 <__gethex+0x3f4>
 800b258:	f04f 0a01 	mov.w	sl, #1
 800b25c:	e7d0      	b.n	800b200 <__gethex+0x334>
 800b25e:	2701      	movs	r7, #1
 800b260:	e7e2      	b.n	800b228 <__gethex+0x35c>
 800b262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b264:	f1c3 0301 	rsb	r3, r3, #1
 800b268:	9315      	str	r3, [sp, #84]	; 0x54
 800b26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0f0      	beq.n	800b252 <__gethex+0x386>
 800b270:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b274:	f104 0314 	add.w	r3, r4, #20
 800b278:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b27c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b280:	f04f 0c00 	mov.w	ip, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b28e:	d01c      	beq.n	800b2ca <__gethex+0x3fe>
 800b290:	3201      	adds	r2, #1
 800b292:	6002      	str	r2, [r0, #0]
 800b294:	2f02      	cmp	r7, #2
 800b296:	f104 0314 	add.w	r3, r4, #20
 800b29a:	d13f      	bne.n	800b31c <__gethex+0x450>
 800b29c:	f8d8 2000 	ldr.w	r2, [r8]
 800b2a0:	3a01      	subs	r2, #1
 800b2a2:	42b2      	cmp	r2, r6
 800b2a4:	d10a      	bne.n	800b2bc <__gethex+0x3f0>
 800b2a6:	1171      	asrs	r1, r6, #5
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2ae:	f006 061f 	and.w	r6, r6, #31
 800b2b2:	fa02 f606 	lsl.w	r6, r2, r6
 800b2b6:	421e      	tst	r6, r3
 800b2b8:	bf18      	it	ne
 800b2ba:	4617      	movne	r7, r2
 800b2bc:	f047 0720 	orr.w	r7, r7, #32
 800b2c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2c2:	601c      	str	r4, [r3, #0]
 800b2c4:	9b04      	ldr	r3, [sp, #16]
 800b2c6:	601d      	str	r5, [r3, #0]
 800b2c8:	e695      	b.n	800aff6 <__gethex+0x12a>
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2d0:	d8d8      	bhi.n	800b284 <__gethex+0x3b8>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	459b      	cmp	fp, r3
 800b2d6:	db19      	blt.n	800b30c <__gethex+0x440>
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	ee18 0a10 	vmov	r0, s16
 800b2de:	3101      	adds	r1, #1
 800b2e0:	f000 f928 	bl	800b534 <_Balloc>
 800b2e4:	4681      	mov	r9, r0
 800b2e6:	b918      	cbnz	r0, 800b2f0 <__gethex+0x424>
 800b2e8:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <__gethex+0x488>)
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	2184      	movs	r1, #132	; 0x84
 800b2ee:	e6a8      	b.n	800b042 <__gethex+0x176>
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	3202      	adds	r2, #2
 800b2f4:	f104 010c 	add.w	r1, r4, #12
 800b2f8:	0092      	lsls	r2, r2, #2
 800b2fa:	300c      	adds	r0, #12
 800b2fc:	f000 f90c 	bl	800b518 <memcpy>
 800b300:	4621      	mov	r1, r4
 800b302:	ee18 0a10 	vmov	r0, s16
 800b306:	f000 f955 	bl	800b5b4 <_Bfree>
 800b30a:	464c      	mov	r4, r9
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b314:	6122      	str	r2, [r4, #16]
 800b316:	2201      	movs	r2, #1
 800b318:	615a      	str	r2, [r3, #20]
 800b31a:	e7bb      	b.n	800b294 <__gethex+0x3c8>
 800b31c:	6922      	ldr	r2, [r4, #16]
 800b31e:	455a      	cmp	r2, fp
 800b320:	dd0b      	ble.n	800b33a <__gethex+0x46e>
 800b322:	2101      	movs	r1, #1
 800b324:	4620      	mov	r0, r4
 800b326:	f7ff fd69 	bl	800adfc <rshift>
 800b32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b32e:	3501      	adds	r5, #1
 800b330:	42ab      	cmp	r3, r5
 800b332:	f6ff aed0 	blt.w	800b0d6 <__gethex+0x20a>
 800b336:	2701      	movs	r7, #1
 800b338:	e7c0      	b.n	800b2bc <__gethex+0x3f0>
 800b33a:	f016 061f 	ands.w	r6, r6, #31
 800b33e:	d0fa      	beq.n	800b336 <__gethex+0x46a>
 800b340:	4453      	add	r3, sl
 800b342:	f1c6 0620 	rsb	r6, r6, #32
 800b346:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b34a:	f000 f9e5 	bl	800b718 <__hi0bits>
 800b34e:	42b0      	cmp	r0, r6
 800b350:	dbe7      	blt.n	800b322 <__gethex+0x456>
 800b352:	e7f0      	b.n	800b336 <__gethex+0x46a>
 800b354:	0800d310 	.word	0x0800d310

0800b358 <L_shift>:
 800b358:	f1c2 0208 	rsb	r2, r2, #8
 800b35c:	0092      	lsls	r2, r2, #2
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	f1c2 0620 	rsb	r6, r2, #32
 800b364:	6843      	ldr	r3, [r0, #4]
 800b366:	6804      	ldr	r4, [r0, #0]
 800b368:	fa03 f506 	lsl.w	r5, r3, r6
 800b36c:	432c      	orrs	r4, r5
 800b36e:	40d3      	lsrs	r3, r2
 800b370:	6004      	str	r4, [r0, #0]
 800b372:	f840 3f04 	str.w	r3, [r0, #4]!
 800b376:	4288      	cmp	r0, r1
 800b378:	d3f4      	bcc.n	800b364 <L_shift+0xc>
 800b37a:	bd70      	pop	{r4, r5, r6, pc}

0800b37c <__match>:
 800b37c:	b530      	push	{r4, r5, lr}
 800b37e:	6803      	ldr	r3, [r0, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b386:	b914      	cbnz	r4, 800b38e <__match+0x12>
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	2001      	movs	r0, #1
 800b38c:	bd30      	pop	{r4, r5, pc}
 800b38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b396:	2d19      	cmp	r5, #25
 800b398:	bf98      	it	ls
 800b39a:	3220      	addls	r2, #32
 800b39c:	42a2      	cmp	r2, r4
 800b39e:	d0f0      	beq.n	800b382 <__match+0x6>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e7f3      	b.n	800b38c <__match+0x10>

0800b3a4 <__hexnan>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	680b      	ldr	r3, [r1, #0]
 800b3aa:	115e      	asrs	r6, r3, #5
 800b3ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3b0:	f013 031f 	ands.w	r3, r3, #31
 800b3b4:	b087      	sub	sp, #28
 800b3b6:	bf18      	it	ne
 800b3b8:	3604      	addne	r6, #4
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	1f37      	subs	r7, r6, #4
 800b3be:	4690      	mov	r8, r2
 800b3c0:	6802      	ldr	r2, [r0, #0]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3ca:	46b9      	mov	r9, r7
 800b3cc:	463c      	mov	r4, r7
 800b3ce:	9502      	str	r5, [sp, #8]
 800b3d0:	46ab      	mov	fp, r5
 800b3d2:	7851      	ldrb	r1, [r2, #1]
 800b3d4:	1c53      	adds	r3, r2, #1
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	b341      	cbz	r1, 800b42c <__hexnan+0x88>
 800b3da:	4608      	mov	r0, r1
 800b3dc:	9205      	str	r2, [sp, #20]
 800b3de:	9104      	str	r1, [sp, #16]
 800b3e0:	f7ff fd5e 	bl	800aea0 <__hexdig_fun>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d14f      	bne.n	800b488 <__hexnan+0xe4>
 800b3e8:	9904      	ldr	r1, [sp, #16]
 800b3ea:	9a05      	ldr	r2, [sp, #20]
 800b3ec:	2920      	cmp	r1, #32
 800b3ee:	d818      	bhi.n	800b422 <__hexnan+0x7e>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	459b      	cmp	fp, r3
 800b3f4:	dd13      	ble.n	800b41e <__hexnan+0x7a>
 800b3f6:	454c      	cmp	r4, r9
 800b3f8:	d206      	bcs.n	800b408 <__hexnan+0x64>
 800b3fa:	2d07      	cmp	r5, #7
 800b3fc:	dc04      	bgt.n	800b408 <__hexnan+0x64>
 800b3fe:	462a      	mov	r2, r5
 800b400:	4649      	mov	r1, r9
 800b402:	4620      	mov	r0, r4
 800b404:	f7ff ffa8 	bl	800b358 <L_shift>
 800b408:	4544      	cmp	r4, r8
 800b40a:	d950      	bls.n	800b4ae <__hexnan+0x10a>
 800b40c:	2300      	movs	r3, #0
 800b40e:	f1a4 0904 	sub.w	r9, r4, #4
 800b412:	f844 3c04 	str.w	r3, [r4, #-4]
 800b416:	f8cd b008 	str.w	fp, [sp, #8]
 800b41a:	464c      	mov	r4, r9
 800b41c:	461d      	mov	r5, r3
 800b41e:	9a03      	ldr	r2, [sp, #12]
 800b420:	e7d7      	b.n	800b3d2 <__hexnan+0x2e>
 800b422:	2929      	cmp	r1, #41	; 0x29
 800b424:	d156      	bne.n	800b4d4 <__hexnan+0x130>
 800b426:	3202      	adds	r2, #2
 800b428:	f8ca 2000 	str.w	r2, [sl]
 800b42c:	f1bb 0f00 	cmp.w	fp, #0
 800b430:	d050      	beq.n	800b4d4 <__hexnan+0x130>
 800b432:	454c      	cmp	r4, r9
 800b434:	d206      	bcs.n	800b444 <__hexnan+0xa0>
 800b436:	2d07      	cmp	r5, #7
 800b438:	dc04      	bgt.n	800b444 <__hexnan+0xa0>
 800b43a:	462a      	mov	r2, r5
 800b43c:	4649      	mov	r1, r9
 800b43e:	4620      	mov	r0, r4
 800b440:	f7ff ff8a 	bl	800b358 <L_shift>
 800b444:	4544      	cmp	r4, r8
 800b446:	d934      	bls.n	800b4b2 <__hexnan+0x10e>
 800b448:	f1a8 0204 	sub.w	r2, r8, #4
 800b44c:	4623      	mov	r3, r4
 800b44e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b452:	f842 1f04 	str.w	r1, [r2, #4]!
 800b456:	429f      	cmp	r7, r3
 800b458:	d2f9      	bcs.n	800b44e <__hexnan+0xaa>
 800b45a:	1b3b      	subs	r3, r7, r4
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	3401      	adds	r4, #1
 800b464:	3e03      	subs	r6, #3
 800b466:	42b4      	cmp	r4, r6
 800b468:	bf88      	it	hi
 800b46a:	2304      	movhi	r3, #4
 800b46c:	4443      	add	r3, r8
 800b46e:	2200      	movs	r2, #0
 800b470:	f843 2b04 	str.w	r2, [r3], #4
 800b474:	429f      	cmp	r7, r3
 800b476:	d2fb      	bcs.n	800b470 <__hexnan+0xcc>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	b91b      	cbnz	r3, 800b484 <__hexnan+0xe0>
 800b47c:	4547      	cmp	r7, r8
 800b47e:	d127      	bne.n	800b4d0 <__hexnan+0x12c>
 800b480:	2301      	movs	r3, #1
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	2005      	movs	r0, #5
 800b486:	e026      	b.n	800b4d6 <__hexnan+0x132>
 800b488:	3501      	adds	r5, #1
 800b48a:	2d08      	cmp	r5, #8
 800b48c:	f10b 0b01 	add.w	fp, fp, #1
 800b490:	dd06      	ble.n	800b4a0 <__hexnan+0xfc>
 800b492:	4544      	cmp	r4, r8
 800b494:	d9c3      	bls.n	800b41e <__hexnan+0x7a>
 800b496:	2300      	movs	r3, #0
 800b498:	f844 3c04 	str.w	r3, [r4, #-4]
 800b49c:	2501      	movs	r5, #1
 800b49e:	3c04      	subs	r4, #4
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	f000 000f 	and.w	r0, r0, #15
 800b4a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	e7b7      	b.n	800b41e <__hexnan+0x7a>
 800b4ae:	2508      	movs	r5, #8
 800b4b0:	e7b5      	b.n	800b41e <__hexnan+0x7a>
 800b4b2:	9b01      	ldr	r3, [sp, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0df      	beq.n	800b478 <__hexnan+0xd4>
 800b4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4bc:	f1c3 0320 	rsb	r3, r3, #32
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4c8:	401a      	ands	r2, r3
 800b4ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4ce:	e7d3      	b.n	800b478 <__hexnan+0xd4>
 800b4d0:	3f04      	subs	r7, #4
 800b4d2:	e7d1      	b.n	800b478 <__hexnan+0xd4>
 800b4d4:	2004      	movs	r0, #4
 800b4d6:	b007      	add	sp, #28
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4dc <_localeconv_r>:
 800b4dc:	4800      	ldr	r0, [pc, #0]	; (800b4e0 <_localeconv_r+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	20000170 	.word	0x20000170

0800b4e4 <malloc>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <malloc+0xc>)
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	f000 bd67 	b.w	800bfbc <_malloc_r>
 800b4ee:	bf00      	nop
 800b4f0:	20000018 	.word	0x20000018

0800b4f4 <__ascii_mbtowc>:
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	b901      	cbnz	r1, 800b4fa <__ascii_mbtowc+0x6>
 800b4f8:	a901      	add	r1, sp, #4
 800b4fa:	b142      	cbz	r2, 800b50e <__ascii_mbtowc+0x1a>
 800b4fc:	b14b      	cbz	r3, 800b512 <__ascii_mbtowc+0x1e>
 800b4fe:	7813      	ldrb	r3, [r2, #0]
 800b500:	600b      	str	r3, [r1, #0]
 800b502:	7812      	ldrb	r2, [r2, #0]
 800b504:	1e10      	subs	r0, r2, #0
 800b506:	bf18      	it	ne
 800b508:	2001      	movne	r0, #1
 800b50a:	b002      	add	sp, #8
 800b50c:	4770      	bx	lr
 800b50e:	4610      	mov	r0, r2
 800b510:	e7fb      	b.n	800b50a <__ascii_mbtowc+0x16>
 800b512:	f06f 0001 	mvn.w	r0, #1
 800b516:	e7f8      	b.n	800b50a <__ascii_mbtowc+0x16>

0800b518 <memcpy>:
 800b518:	440a      	add	r2, r1
 800b51a:	4291      	cmp	r1, r2
 800b51c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b520:	d100      	bne.n	800b524 <memcpy+0xc>
 800b522:	4770      	bx	lr
 800b524:	b510      	push	{r4, lr}
 800b526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b52e:	4291      	cmp	r1, r2
 800b530:	d1f9      	bne.n	800b526 <memcpy+0xe>
 800b532:	bd10      	pop	{r4, pc}

0800b534 <_Balloc>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	b976      	cbnz	r6, 800b55c <_Balloc+0x28>
 800b53e:	2010      	movs	r0, #16
 800b540:	f7ff ffd0 	bl	800b4e4 <malloc>
 800b544:	4602      	mov	r2, r0
 800b546:	6260      	str	r0, [r4, #36]	; 0x24
 800b548:	b920      	cbnz	r0, 800b554 <_Balloc+0x20>
 800b54a:	4b18      	ldr	r3, [pc, #96]	; (800b5ac <_Balloc+0x78>)
 800b54c:	4818      	ldr	r0, [pc, #96]	; (800b5b0 <_Balloc+0x7c>)
 800b54e:	2166      	movs	r1, #102	; 0x66
 800b550:	f000 ff40 	bl	800c3d4 <__assert_func>
 800b554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b558:	6006      	str	r6, [r0, #0]
 800b55a:	60c6      	str	r6, [r0, #12]
 800b55c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b55e:	68f3      	ldr	r3, [r6, #12]
 800b560:	b183      	cbz	r3, 800b584 <_Balloc+0x50>
 800b562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b56a:	b9b8      	cbnz	r0, 800b59c <_Balloc+0x68>
 800b56c:	2101      	movs	r1, #1
 800b56e:	fa01 f605 	lsl.w	r6, r1, r5
 800b572:	1d72      	adds	r2, r6, #5
 800b574:	0092      	lsls	r2, r2, #2
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fc9d 	bl	800beb6 <_calloc_r>
 800b57c:	b160      	cbz	r0, 800b598 <_Balloc+0x64>
 800b57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b582:	e00e      	b.n	800b5a2 <_Balloc+0x6e>
 800b584:	2221      	movs	r2, #33	; 0x21
 800b586:	2104      	movs	r1, #4
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 fc94 	bl	800beb6 <_calloc_r>
 800b58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b590:	60f0      	str	r0, [r6, #12]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e4      	bne.n	800b562 <_Balloc+0x2e>
 800b598:	2000      	movs	r0, #0
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	6802      	ldr	r2, [r0, #0]
 800b59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5a8:	e7f7      	b.n	800b59a <_Balloc+0x66>
 800b5aa:	bf00      	nop
 800b5ac:	0800d29e 	.word	0x0800d29e
 800b5b0:	0800d39c 	.word	0x0800d39c

0800b5b4 <_Bfree>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	b976      	cbnz	r6, 800b5dc <_Bfree+0x28>
 800b5be:	2010      	movs	r0, #16
 800b5c0:	f7ff ff90 	bl	800b4e4 <malloc>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c8:	b920      	cbnz	r0, 800b5d4 <_Bfree+0x20>
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <_Bfree+0x3c>)
 800b5cc:	4809      	ldr	r0, [pc, #36]	; (800b5f4 <_Bfree+0x40>)
 800b5ce:	218a      	movs	r1, #138	; 0x8a
 800b5d0:	f000 ff00 	bl	800c3d4 <__assert_func>
 800b5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5d8:	6006      	str	r6, [r0, #0]
 800b5da:	60c6      	str	r6, [r0, #12]
 800b5dc:	b13c      	cbz	r4, 800b5ee <_Bfree+0x3a>
 800b5de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5e0:	6862      	ldr	r2, [r4, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e8:	6021      	str	r1, [r4, #0]
 800b5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0800d29e 	.word	0x0800d29e
 800b5f4:	0800d39c 	.word	0x0800d39c

0800b5f8 <__multadd>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	690d      	ldr	r5, [r1, #16]
 800b5fe:	4607      	mov	r7, r0
 800b600:	460c      	mov	r4, r1
 800b602:	461e      	mov	r6, r3
 800b604:	f101 0c14 	add.w	ip, r1, #20
 800b608:	2000      	movs	r0, #0
 800b60a:	f8dc 3000 	ldr.w	r3, [ip]
 800b60e:	b299      	uxth	r1, r3
 800b610:	fb02 6101 	mla	r1, r2, r1, r6
 800b614:	0c1e      	lsrs	r6, r3, #16
 800b616:	0c0b      	lsrs	r3, r1, #16
 800b618:	fb02 3306 	mla	r3, r2, r6, r3
 800b61c:	b289      	uxth	r1, r1
 800b61e:	3001      	adds	r0, #1
 800b620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b624:	4285      	cmp	r5, r0
 800b626:	f84c 1b04 	str.w	r1, [ip], #4
 800b62a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b62e:	dcec      	bgt.n	800b60a <__multadd+0x12>
 800b630:	b30e      	cbz	r6, 800b676 <__multadd+0x7e>
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc19      	bgt.n	800b66c <__multadd+0x74>
 800b638:	6861      	ldr	r1, [r4, #4]
 800b63a:	4638      	mov	r0, r7
 800b63c:	3101      	adds	r1, #1
 800b63e:	f7ff ff79 	bl	800b534 <_Balloc>
 800b642:	4680      	mov	r8, r0
 800b644:	b928      	cbnz	r0, 800b652 <__multadd+0x5a>
 800b646:	4602      	mov	r2, r0
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <__multadd+0x84>)
 800b64a:	480d      	ldr	r0, [pc, #52]	; (800b680 <__multadd+0x88>)
 800b64c:	21b5      	movs	r1, #181	; 0xb5
 800b64e:	f000 fec1 	bl	800c3d4 <__assert_func>
 800b652:	6922      	ldr	r2, [r4, #16]
 800b654:	3202      	adds	r2, #2
 800b656:	f104 010c 	add.w	r1, r4, #12
 800b65a:	0092      	lsls	r2, r2, #2
 800b65c:	300c      	adds	r0, #12
 800b65e:	f7ff ff5b 	bl	800b518 <memcpy>
 800b662:	4621      	mov	r1, r4
 800b664:	4638      	mov	r0, r7
 800b666:	f7ff ffa5 	bl	800b5b4 <_Bfree>
 800b66a:	4644      	mov	r4, r8
 800b66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b670:	3501      	adds	r5, #1
 800b672:	615e      	str	r6, [r3, #20]
 800b674:	6125      	str	r5, [r4, #16]
 800b676:	4620      	mov	r0, r4
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	0800d310 	.word	0x0800d310
 800b680:	0800d39c 	.word	0x0800d39c

0800b684 <__s2b>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	460c      	mov	r4, r1
 800b68a:	4615      	mov	r5, r2
 800b68c:	461f      	mov	r7, r3
 800b68e:	2209      	movs	r2, #9
 800b690:	3308      	adds	r3, #8
 800b692:	4606      	mov	r6, r0
 800b694:	fb93 f3f2 	sdiv	r3, r3, r2
 800b698:	2100      	movs	r1, #0
 800b69a:	2201      	movs	r2, #1
 800b69c:	429a      	cmp	r2, r3
 800b69e:	db09      	blt.n	800b6b4 <__s2b+0x30>
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f7ff ff47 	bl	800b534 <_Balloc>
 800b6a6:	b940      	cbnz	r0, 800b6ba <__s2b+0x36>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b19      	ldr	r3, [pc, #100]	; (800b710 <__s2b+0x8c>)
 800b6ac:	4819      	ldr	r0, [pc, #100]	; (800b714 <__s2b+0x90>)
 800b6ae:	21ce      	movs	r1, #206	; 0xce
 800b6b0:	f000 fe90 	bl	800c3d4 <__assert_func>
 800b6b4:	0052      	lsls	r2, r2, #1
 800b6b6:	3101      	adds	r1, #1
 800b6b8:	e7f0      	b.n	800b69c <__s2b+0x18>
 800b6ba:	9b08      	ldr	r3, [sp, #32]
 800b6bc:	6143      	str	r3, [r0, #20]
 800b6be:	2d09      	cmp	r5, #9
 800b6c0:	f04f 0301 	mov.w	r3, #1
 800b6c4:	6103      	str	r3, [r0, #16]
 800b6c6:	dd16      	ble.n	800b6f6 <__s2b+0x72>
 800b6c8:	f104 0909 	add.w	r9, r4, #9
 800b6cc:	46c8      	mov	r8, r9
 800b6ce:	442c      	add	r4, r5
 800b6d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	3b30      	subs	r3, #48	; 0x30
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ff8c 	bl	800b5f8 <__multadd>
 800b6e0:	45a0      	cmp	r8, r4
 800b6e2:	d1f5      	bne.n	800b6d0 <__s2b+0x4c>
 800b6e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b6e8:	444c      	add	r4, r9
 800b6ea:	1b2d      	subs	r5, r5, r4
 800b6ec:	1963      	adds	r3, r4, r5
 800b6ee:	42bb      	cmp	r3, r7
 800b6f0:	db04      	blt.n	800b6fc <__s2b+0x78>
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	340a      	adds	r4, #10
 800b6f8:	2509      	movs	r5, #9
 800b6fa:	e7f6      	b.n	800b6ea <__s2b+0x66>
 800b6fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b700:	4601      	mov	r1, r0
 800b702:	3b30      	subs	r3, #48	; 0x30
 800b704:	220a      	movs	r2, #10
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff ff76 	bl	800b5f8 <__multadd>
 800b70c:	e7ee      	b.n	800b6ec <__s2b+0x68>
 800b70e:	bf00      	nop
 800b710:	0800d310 	.word	0x0800d310
 800b714:	0800d39c 	.word	0x0800d39c

0800b718 <__hi0bits>:
 800b718:	0c03      	lsrs	r3, r0, #16
 800b71a:	041b      	lsls	r3, r3, #16
 800b71c:	b9d3      	cbnz	r3, 800b754 <__hi0bits+0x3c>
 800b71e:	0400      	lsls	r0, r0, #16
 800b720:	2310      	movs	r3, #16
 800b722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b726:	bf04      	itt	eq
 800b728:	0200      	lsleq	r0, r0, #8
 800b72a:	3308      	addeq	r3, #8
 800b72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b730:	bf04      	itt	eq
 800b732:	0100      	lsleq	r0, r0, #4
 800b734:	3304      	addeq	r3, #4
 800b736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b73a:	bf04      	itt	eq
 800b73c:	0080      	lsleq	r0, r0, #2
 800b73e:	3302      	addeq	r3, #2
 800b740:	2800      	cmp	r0, #0
 800b742:	db05      	blt.n	800b750 <__hi0bits+0x38>
 800b744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b748:	f103 0301 	add.w	r3, r3, #1
 800b74c:	bf08      	it	eq
 800b74e:	2320      	moveq	r3, #32
 800b750:	4618      	mov	r0, r3
 800b752:	4770      	bx	lr
 800b754:	2300      	movs	r3, #0
 800b756:	e7e4      	b.n	800b722 <__hi0bits+0xa>

0800b758 <__lo0bits>:
 800b758:	6803      	ldr	r3, [r0, #0]
 800b75a:	f013 0207 	ands.w	r2, r3, #7
 800b75e:	4601      	mov	r1, r0
 800b760:	d00b      	beq.n	800b77a <__lo0bits+0x22>
 800b762:	07da      	lsls	r2, r3, #31
 800b764:	d423      	bmi.n	800b7ae <__lo0bits+0x56>
 800b766:	0798      	lsls	r0, r3, #30
 800b768:	bf49      	itett	mi
 800b76a:	085b      	lsrmi	r3, r3, #1
 800b76c:	089b      	lsrpl	r3, r3, #2
 800b76e:	2001      	movmi	r0, #1
 800b770:	600b      	strmi	r3, [r1, #0]
 800b772:	bf5c      	itt	pl
 800b774:	600b      	strpl	r3, [r1, #0]
 800b776:	2002      	movpl	r0, #2
 800b778:	4770      	bx	lr
 800b77a:	b298      	uxth	r0, r3
 800b77c:	b9a8      	cbnz	r0, 800b7aa <__lo0bits+0x52>
 800b77e:	0c1b      	lsrs	r3, r3, #16
 800b780:	2010      	movs	r0, #16
 800b782:	b2da      	uxtb	r2, r3
 800b784:	b90a      	cbnz	r2, 800b78a <__lo0bits+0x32>
 800b786:	3008      	adds	r0, #8
 800b788:	0a1b      	lsrs	r3, r3, #8
 800b78a:	071a      	lsls	r2, r3, #28
 800b78c:	bf04      	itt	eq
 800b78e:	091b      	lsreq	r3, r3, #4
 800b790:	3004      	addeq	r0, #4
 800b792:	079a      	lsls	r2, r3, #30
 800b794:	bf04      	itt	eq
 800b796:	089b      	lsreq	r3, r3, #2
 800b798:	3002      	addeq	r0, #2
 800b79a:	07da      	lsls	r2, r3, #31
 800b79c:	d403      	bmi.n	800b7a6 <__lo0bits+0x4e>
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	f100 0001 	add.w	r0, r0, #1
 800b7a4:	d005      	beq.n	800b7b2 <__lo0bits+0x5a>
 800b7a6:	600b      	str	r3, [r1, #0]
 800b7a8:	4770      	bx	lr
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	e7e9      	b.n	800b782 <__lo0bits+0x2a>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	4770      	bx	lr
 800b7b2:	2020      	movs	r0, #32
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <__i2b>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	2101      	movs	r1, #1
 800b7be:	f7ff feb9 	bl	800b534 <_Balloc>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	b928      	cbnz	r0, 800b7d2 <__i2b+0x1a>
 800b7c6:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <__i2b+0x24>)
 800b7c8:	4805      	ldr	r0, [pc, #20]	; (800b7e0 <__i2b+0x28>)
 800b7ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ce:	f000 fe01 	bl	800c3d4 <__assert_func>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	6144      	str	r4, [r0, #20]
 800b7d6:	6103      	str	r3, [r0, #16]
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	bf00      	nop
 800b7dc:	0800d310 	.word	0x0800d310
 800b7e0:	0800d39c 	.word	0x0800d39c

0800b7e4 <__multiply>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	4691      	mov	r9, r2
 800b7ea:	690a      	ldr	r2, [r1, #16]
 800b7ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	bfb8      	it	lt
 800b7f4:	460b      	movlt	r3, r1
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	bfbc      	itt	lt
 800b7fa:	464c      	movlt	r4, r9
 800b7fc:	4699      	movlt	r9, r3
 800b7fe:	6927      	ldr	r7, [r4, #16]
 800b800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b804:	68a3      	ldr	r3, [r4, #8]
 800b806:	6861      	ldr	r1, [r4, #4]
 800b808:	eb07 060a 	add.w	r6, r7, sl
 800b80c:	42b3      	cmp	r3, r6
 800b80e:	b085      	sub	sp, #20
 800b810:	bfb8      	it	lt
 800b812:	3101      	addlt	r1, #1
 800b814:	f7ff fe8e 	bl	800b534 <_Balloc>
 800b818:	b930      	cbnz	r0, 800b828 <__multiply+0x44>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4b44      	ldr	r3, [pc, #272]	; (800b930 <__multiply+0x14c>)
 800b81e:	4845      	ldr	r0, [pc, #276]	; (800b934 <__multiply+0x150>)
 800b820:	f240 115d 	movw	r1, #349	; 0x15d
 800b824:	f000 fdd6 	bl	800c3d4 <__assert_func>
 800b828:	f100 0514 	add.w	r5, r0, #20
 800b82c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b830:	462b      	mov	r3, r5
 800b832:	2200      	movs	r2, #0
 800b834:	4543      	cmp	r3, r8
 800b836:	d321      	bcc.n	800b87c <__multiply+0x98>
 800b838:	f104 0314 	add.w	r3, r4, #20
 800b83c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b840:	f109 0314 	add.w	r3, r9, #20
 800b844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b848:	9202      	str	r2, [sp, #8]
 800b84a:	1b3a      	subs	r2, r7, r4
 800b84c:	3a15      	subs	r2, #21
 800b84e:	f022 0203 	bic.w	r2, r2, #3
 800b852:	3204      	adds	r2, #4
 800b854:	f104 0115 	add.w	r1, r4, #21
 800b858:	428f      	cmp	r7, r1
 800b85a:	bf38      	it	cc
 800b85c:	2204      	movcc	r2, #4
 800b85e:	9201      	str	r2, [sp, #4]
 800b860:	9a02      	ldr	r2, [sp, #8]
 800b862:	9303      	str	r3, [sp, #12]
 800b864:	429a      	cmp	r2, r3
 800b866:	d80c      	bhi.n	800b882 <__multiply+0x9e>
 800b868:	2e00      	cmp	r6, #0
 800b86a:	dd03      	ble.n	800b874 <__multiply+0x90>
 800b86c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b870:	2b00      	cmp	r3, #0
 800b872:	d05a      	beq.n	800b92a <__multiply+0x146>
 800b874:	6106      	str	r6, [r0, #16]
 800b876:	b005      	add	sp, #20
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	f843 2b04 	str.w	r2, [r3], #4
 800b880:	e7d8      	b.n	800b834 <__multiply+0x50>
 800b882:	f8b3 a000 	ldrh.w	sl, [r3]
 800b886:	f1ba 0f00 	cmp.w	sl, #0
 800b88a:	d024      	beq.n	800b8d6 <__multiply+0xf2>
 800b88c:	f104 0e14 	add.w	lr, r4, #20
 800b890:	46a9      	mov	r9, r5
 800b892:	f04f 0c00 	mov.w	ip, #0
 800b896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b89a:	f8d9 1000 	ldr.w	r1, [r9]
 800b89e:	fa1f fb82 	uxth.w	fp, r2
 800b8a2:	b289      	uxth	r1, r1
 800b8a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b8b0:	4461      	add	r1, ip
 800b8b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8c4:	4577      	cmp	r7, lr
 800b8c6:	f849 1b04 	str.w	r1, [r9], #4
 800b8ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8ce:	d8e2      	bhi.n	800b896 <__multiply+0xb2>
 800b8d0:	9a01      	ldr	r2, [sp, #4]
 800b8d2:	f845 c002 	str.w	ip, [r5, r2]
 800b8d6:	9a03      	ldr	r2, [sp, #12]
 800b8d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	f1b9 0f00 	cmp.w	r9, #0
 800b8e2:	d020      	beq.n	800b926 <__multiply+0x142>
 800b8e4:	6829      	ldr	r1, [r5, #0]
 800b8e6:	f104 0c14 	add.w	ip, r4, #20
 800b8ea:	46ae      	mov	lr, r5
 800b8ec:	f04f 0a00 	mov.w	sl, #0
 800b8f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b8f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8f8:	fb09 220b 	mla	r2, r9, fp, r2
 800b8fc:	4492      	add	sl, r2
 800b8fe:	b289      	uxth	r1, r1
 800b900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b904:	f84e 1b04 	str.w	r1, [lr], #4
 800b908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b90c:	f8be 1000 	ldrh.w	r1, [lr]
 800b910:	0c12      	lsrs	r2, r2, #16
 800b912:	fb09 1102 	mla	r1, r9, r2, r1
 800b916:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b91a:	4567      	cmp	r7, ip
 800b91c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b920:	d8e6      	bhi.n	800b8f0 <__multiply+0x10c>
 800b922:	9a01      	ldr	r2, [sp, #4]
 800b924:	50a9      	str	r1, [r5, r2]
 800b926:	3504      	adds	r5, #4
 800b928:	e79a      	b.n	800b860 <__multiply+0x7c>
 800b92a:	3e01      	subs	r6, #1
 800b92c:	e79c      	b.n	800b868 <__multiply+0x84>
 800b92e:	bf00      	nop
 800b930:	0800d310 	.word	0x0800d310
 800b934:	0800d39c 	.word	0x0800d39c

0800b938 <__pow5mult>:
 800b938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b93c:	4615      	mov	r5, r2
 800b93e:	f012 0203 	ands.w	r2, r2, #3
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	d007      	beq.n	800b958 <__pow5mult+0x20>
 800b948:	4c25      	ldr	r4, [pc, #148]	; (800b9e0 <__pow5mult+0xa8>)
 800b94a:	3a01      	subs	r2, #1
 800b94c:	2300      	movs	r3, #0
 800b94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b952:	f7ff fe51 	bl	800b5f8 <__multadd>
 800b956:	4607      	mov	r7, r0
 800b958:	10ad      	asrs	r5, r5, #2
 800b95a:	d03d      	beq.n	800b9d8 <__pow5mult+0xa0>
 800b95c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b95e:	b97c      	cbnz	r4, 800b980 <__pow5mult+0x48>
 800b960:	2010      	movs	r0, #16
 800b962:	f7ff fdbf 	bl	800b4e4 <malloc>
 800b966:	4602      	mov	r2, r0
 800b968:	6270      	str	r0, [r6, #36]	; 0x24
 800b96a:	b928      	cbnz	r0, 800b978 <__pow5mult+0x40>
 800b96c:	4b1d      	ldr	r3, [pc, #116]	; (800b9e4 <__pow5mult+0xac>)
 800b96e:	481e      	ldr	r0, [pc, #120]	; (800b9e8 <__pow5mult+0xb0>)
 800b970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b974:	f000 fd2e 	bl	800c3d4 <__assert_func>
 800b978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b97c:	6004      	str	r4, [r0, #0]
 800b97e:	60c4      	str	r4, [r0, #12]
 800b980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b988:	b94c      	cbnz	r4, 800b99e <__pow5mult+0x66>
 800b98a:	f240 2171 	movw	r1, #625	; 0x271
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff ff12 	bl	800b7b8 <__i2b>
 800b994:	2300      	movs	r3, #0
 800b996:	f8c8 0008 	str.w	r0, [r8, #8]
 800b99a:	4604      	mov	r4, r0
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	f04f 0900 	mov.w	r9, #0
 800b9a2:	07eb      	lsls	r3, r5, #31
 800b9a4:	d50a      	bpl.n	800b9bc <__pow5mult+0x84>
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff1a 	bl	800b7e4 <__multiply>
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff fdfd 	bl	800b5b4 <_Bfree>
 800b9ba:	4647      	mov	r7, r8
 800b9bc:	106d      	asrs	r5, r5, #1
 800b9be:	d00b      	beq.n	800b9d8 <__pow5mult+0xa0>
 800b9c0:	6820      	ldr	r0, [r4, #0]
 800b9c2:	b938      	cbnz	r0, 800b9d4 <__pow5mult+0x9c>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7ff ff0b 	bl	800b7e4 <__multiply>
 800b9ce:	6020      	str	r0, [r4, #0]
 800b9d0:	f8c0 9000 	str.w	r9, [r0]
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	e7e4      	b.n	800b9a2 <__pow5mult+0x6a>
 800b9d8:	4638      	mov	r0, r7
 800b9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800d4e8 	.word	0x0800d4e8
 800b9e4:	0800d29e 	.word	0x0800d29e
 800b9e8:	0800d39c 	.word	0x0800d39c

0800b9ec <__lshift>:
 800b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	6849      	ldr	r1, [r1, #4]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	4691      	mov	r9, r2
 800ba00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba04:	f108 0601 	add.w	r6, r8, #1
 800ba08:	42b3      	cmp	r3, r6
 800ba0a:	db0b      	blt.n	800ba24 <__lshift+0x38>
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff fd91 	bl	800b534 <_Balloc>
 800ba12:	4605      	mov	r5, r0
 800ba14:	b948      	cbnz	r0, 800ba2a <__lshift+0x3e>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b2a      	ldr	r3, [pc, #168]	; (800bac4 <__lshift+0xd8>)
 800ba1a:	482b      	ldr	r0, [pc, #172]	; (800bac8 <__lshift+0xdc>)
 800ba1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba20:	f000 fcd8 	bl	800c3d4 <__assert_func>
 800ba24:	3101      	adds	r1, #1
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	e7ee      	b.n	800ba08 <__lshift+0x1c>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f100 0114 	add.w	r1, r0, #20
 800ba30:	f100 0210 	add.w	r2, r0, #16
 800ba34:	4618      	mov	r0, r3
 800ba36:	4553      	cmp	r3, sl
 800ba38:	db37      	blt.n	800baaa <__lshift+0xbe>
 800ba3a:	6920      	ldr	r0, [r4, #16]
 800ba3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba40:	f104 0314 	add.w	r3, r4, #20
 800ba44:	f019 091f 	ands.w	r9, r9, #31
 800ba48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba50:	d02f      	beq.n	800bab2 <__lshift+0xc6>
 800ba52:	f1c9 0e20 	rsb	lr, r9, #32
 800ba56:	468a      	mov	sl, r1
 800ba58:	f04f 0c00 	mov.w	ip, #0
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	fa02 f209 	lsl.w	r2, r2, r9
 800ba62:	ea42 020c 	orr.w	r2, r2, ip
 800ba66:	f84a 2b04 	str.w	r2, [sl], #4
 800ba6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba74:	d8f2      	bhi.n	800ba5c <__lshift+0x70>
 800ba76:	1b03      	subs	r3, r0, r4
 800ba78:	3b15      	subs	r3, #21
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	3304      	adds	r3, #4
 800ba80:	f104 0215 	add.w	r2, r4, #21
 800ba84:	4290      	cmp	r0, r2
 800ba86:	bf38      	it	cc
 800ba88:	2304      	movcc	r3, #4
 800ba8a:	f841 c003 	str.w	ip, [r1, r3]
 800ba8e:	f1bc 0f00 	cmp.w	ip, #0
 800ba92:	d001      	beq.n	800ba98 <__lshift+0xac>
 800ba94:	f108 0602 	add.w	r6, r8, #2
 800ba98:	3e01      	subs	r6, #1
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	612e      	str	r6, [r5, #16]
 800ba9e:	4621      	mov	r1, r4
 800baa0:	f7ff fd88 	bl	800b5b4 <_Bfree>
 800baa4:	4628      	mov	r0, r5
 800baa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800baae:	3301      	adds	r3, #1
 800bab0:	e7c1      	b.n	800ba36 <__lshift+0x4a>
 800bab2:	3904      	subs	r1, #4
 800bab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab8:	f841 2f04 	str.w	r2, [r1, #4]!
 800babc:	4298      	cmp	r0, r3
 800babe:	d8f9      	bhi.n	800bab4 <__lshift+0xc8>
 800bac0:	e7ea      	b.n	800ba98 <__lshift+0xac>
 800bac2:	bf00      	nop
 800bac4:	0800d310 	.word	0x0800d310
 800bac8:	0800d39c 	.word	0x0800d39c

0800bacc <__mcmp>:
 800bacc:	b530      	push	{r4, r5, lr}
 800bace:	6902      	ldr	r2, [r0, #16]
 800bad0:	690c      	ldr	r4, [r1, #16]
 800bad2:	1b12      	subs	r2, r2, r4
 800bad4:	d10e      	bne.n	800baf4 <__mcmp+0x28>
 800bad6:	f100 0314 	add.w	r3, r0, #20
 800bada:	3114      	adds	r1, #20
 800badc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800baec:	42a5      	cmp	r5, r4
 800baee:	d003      	beq.n	800baf8 <__mcmp+0x2c>
 800baf0:	d305      	bcc.n	800bafe <__mcmp+0x32>
 800baf2:	2201      	movs	r2, #1
 800baf4:	4610      	mov	r0, r2
 800baf6:	bd30      	pop	{r4, r5, pc}
 800baf8:	4283      	cmp	r3, r0
 800bafa:	d3f3      	bcc.n	800bae4 <__mcmp+0x18>
 800bafc:	e7fa      	b.n	800baf4 <__mcmp+0x28>
 800bafe:	f04f 32ff 	mov.w	r2, #4294967295
 800bb02:	e7f7      	b.n	800baf4 <__mcmp+0x28>

0800bb04 <__mdiff>:
 800bb04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb08:	460c      	mov	r4, r1
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4690      	mov	r8, r2
 800bb12:	f7ff ffdb 	bl	800bacc <__mcmp>
 800bb16:	1e05      	subs	r5, r0, #0
 800bb18:	d110      	bne.n	800bb3c <__mdiff+0x38>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff fd09 	bl	800b534 <_Balloc>
 800bb22:	b930      	cbnz	r0, 800bb32 <__mdiff+0x2e>
 800bb24:	4b3a      	ldr	r3, [pc, #232]	; (800bc10 <__mdiff+0x10c>)
 800bb26:	4602      	mov	r2, r0
 800bb28:	f240 2132 	movw	r1, #562	; 0x232
 800bb2c:	4839      	ldr	r0, [pc, #228]	; (800bc14 <__mdiff+0x110>)
 800bb2e:	f000 fc51 	bl	800c3d4 <__assert_func>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3c:	bfa4      	itt	ge
 800bb3e:	4643      	movge	r3, r8
 800bb40:	46a0      	movge	r8, r4
 800bb42:	4630      	mov	r0, r6
 800bb44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb48:	bfa6      	itte	ge
 800bb4a:	461c      	movge	r4, r3
 800bb4c:	2500      	movge	r5, #0
 800bb4e:	2501      	movlt	r5, #1
 800bb50:	f7ff fcf0 	bl	800b534 <_Balloc>
 800bb54:	b920      	cbnz	r0, 800bb60 <__mdiff+0x5c>
 800bb56:	4b2e      	ldr	r3, [pc, #184]	; (800bc10 <__mdiff+0x10c>)
 800bb58:	4602      	mov	r2, r0
 800bb5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb5e:	e7e5      	b.n	800bb2c <__mdiff+0x28>
 800bb60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb64:	6926      	ldr	r6, [r4, #16]
 800bb66:	60c5      	str	r5, [r0, #12]
 800bb68:	f104 0914 	add.w	r9, r4, #20
 800bb6c:	f108 0514 	add.w	r5, r8, #20
 800bb70:	f100 0e14 	add.w	lr, r0, #20
 800bb74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb7c:	f108 0210 	add.w	r2, r8, #16
 800bb80:	46f2      	mov	sl, lr
 800bb82:	2100      	movs	r1, #0
 800bb84:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb8c:	fa1f f883 	uxth.w	r8, r3
 800bb90:	fa11 f18b 	uxtah	r1, r1, fp
 800bb94:	0c1b      	lsrs	r3, r3, #16
 800bb96:	eba1 0808 	sub.w	r8, r1, r8
 800bb9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bba2:	fa1f f888 	uxth.w	r8, r8
 800bba6:	1419      	asrs	r1, r3, #16
 800bba8:	454e      	cmp	r6, r9
 800bbaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbae:	f84a 3b04 	str.w	r3, [sl], #4
 800bbb2:	d8e7      	bhi.n	800bb84 <__mdiff+0x80>
 800bbb4:	1b33      	subs	r3, r6, r4
 800bbb6:	3b15      	subs	r3, #21
 800bbb8:	f023 0303 	bic.w	r3, r3, #3
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	3415      	adds	r4, #21
 800bbc0:	42a6      	cmp	r6, r4
 800bbc2:	bf38      	it	cc
 800bbc4:	2304      	movcc	r3, #4
 800bbc6:	441d      	add	r5, r3
 800bbc8:	4473      	add	r3, lr
 800bbca:	469e      	mov	lr, r3
 800bbcc:	462e      	mov	r6, r5
 800bbce:	4566      	cmp	r6, ip
 800bbd0:	d30e      	bcc.n	800bbf0 <__mdiff+0xec>
 800bbd2:	f10c 0203 	add.w	r2, ip, #3
 800bbd6:	1b52      	subs	r2, r2, r5
 800bbd8:	f022 0203 	bic.w	r2, r2, #3
 800bbdc:	3d03      	subs	r5, #3
 800bbde:	45ac      	cmp	ip, r5
 800bbe0:	bf38      	it	cc
 800bbe2:	2200      	movcc	r2, #0
 800bbe4:	441a      	add	r2, r3
 800bbe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbea:	b17b      	cbz	r3, 800bc0c <__mdiff+0x108>
 800bbec:	6107      	str	r7, [r0, #16]
 800bbee:	e7a3      	b.n	800bb38 <__mdiff+0x34>
 800bbf0:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbf4:	fa11 f288 	uxtah	r2, r1, r8
 800bbf8:	1414      	asrs	r4, r2, #16
 800bbfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbfe:	b292      	uxth	r2, r2
 800bc00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc04:	f84e 2b04 	str.w	r2, [lr], #4
 800bc08:	1421      	asrs	r1, r4, #16
 800bc0a:	e7e0      	b.n	800bbce <__mdiff+0xca>
 800bc0c:	3f01      	subs	r7, #1
 800bc0e:	e7ea      	b.n	800bbe6 <__mdiff+0xe2>
 800bc10:	0800d310 	.word	0x0800d310
 800bc14:	0800d39c 	.word	0x0800d39c

0800bc18 <__ulp>:
 800bc18:	b082      	sub	sp, #8
 800bc1a:	ed8d 0b00 	vstr	d0, [sp]
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	4912      	ldr	r1, [pc, #72]	; (800bc6c <__ulp+0x54>)
 800bc22:	4019      	ands	r1, r3
 800bc24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc28:	2900      	cmp	r1, #0
 800bc2a:	dd05      	ble.n	800bc38 <__ulp+0x20>
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	ec43 2b10 	vmov	d0, r2, r3
 800bc34:	b002      	add	sp, #8
 800bc36:	4770      	bx	lr
 800bc38:	4249      	negs	r1, r1
 800bc3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc42:	f04f 0200 	mov.w	r2, #0
 800bc46:	f04f 0300 	mov.w	r3, #0
 800bc4a:	da04      	bge.n	800bc56 <__ulp+0x3e>
 800bc4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc50:	fa41 f300 	asr.w	r3, r1, r0
 800bc54:	e7ec      	b.n	800bc30 <__ulp+0x18>
 800bc56:	f1a0 0114 	sub.w	r1, r0, #20
 800bc5a:	291e      	cmp	r1, #30
 800bc5c:	bfda      	itte	le
 800bc5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc62:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc66:	2101      	movgt	r1, #1
 800bc68:	460a      	mov	r2, r1
 800bc6a:	e7e1      	b.n	800bc30 <__ulp+0x18>
 800bc6c:	7ff00000 	.word	0x7ff00000

0800bc70 <__b2d>:
 800bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc72:	6905      	ldr	r5, [r0, #16]
 800bc74:	f100 0714 	add.w	r7, r0, #20
 800bc78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc7c:	1f2e      	subs	r6, r5, #4
 800bc7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7ff fd48 	bl	800b718 <__hi0bits>
 800bc88:	f1c0 0320 	rsb	r3, r0, #32
 800bc8c:	280a      	cmp	r0, #10
 800bc8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd0c <__b2d+0x9c>
 800bc92:	600b      	str	r3, [r1, #0]
 800bc94:	dc14      	bgt.n	800bcc0 <__b2d+0x50>
 800bc96:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc9e:	42b7      	cmp	r7, r6
 800bca0:	ea41 030c 	orr.w	r3, r1, ip
 800bca4:	bf34      	ite	cc
 800bca6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcaa:	2100      	movcs	r1, #0
 800bcac:	3015      	adds	r0, #21
 800bcae:	fa04 f000 	lsl.w	r0, r4, r0
 800bcb2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bcb6:	ea40 0201 	orr.w	r2, r0, r1
 800bcba:	ec43 2b10 	vmov	d0, r2, r3
 800bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc0:	42b7      	cmp	r7, r6
 800bcc2:	bf3a      	itte	cc
 800bcc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcc8:	f1a5 0608 	subcc.w	r6, r5, #8
 800bccc:	2100      	movcs	r1, #0
 800bcce:	380b      	subs	r0, #11
 800bcd0:	d017      	beq.n	800bd02 <__b2d+0x92>
 800bcd2:	f1c0 0c20 	rsb	ip, r0, #32
 800bcd6:	fa04 f500 	lsl.w	r5, r4, r0
 800bcda:	42be      	cmp	r6, r7
 800bcdc:	fa21 f40c 	lsr.w	r4, r1, ip
 800bce0:	ea45 0504 	orr.w	r5, r5, r4
 800bce4:	bf8c      	ite	hi
 800bce6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bcea:	2400      	movls	r4, #0
 800bcec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bcf0:	fa01 f000 	lsl.w	r0, r1, r0
 800bcf4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bcf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcfc:	ea40 0204 	orr.w	r2, r0, r4
 800bd00:	e7db      	b.n	800bcba <__b2d+0x4a>
 800bd02:	ea44 030c 	orr.w	r3, r4, ip
 800bd06:	460a      	mov	r2, r1
 800bd08:	e7d7      	b.n	800bcba <__b2d+0x4a>
 800bd0a:	bf00      	nop
 800bd0c:	3ff00000 	.word	0x3ff00000

0800bd10 <__d2b>:
 800bd10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	4689      	mov	r9, r1
 800bd16:	2101      	movs	r1, #1
 800bd18:	ec57 6b10 	vmov	r6, r7, d0
 800bd1c:	4690      	mov	r8, r2
 800bd1e:	f7ff fc09 	bl	800b534 <_Balloc>
 800bd22:	4604      	mov	r4, r0
 800bd24:	b930      	cbnz	r0, 800bd34 <__d2b+0x24>
 800bd26:	4602      	mov	r2, r0
 800bd28:	4b25      	ldr	r3, [pc, #148]	; (800bdc0 <__d2b+0xb0>)
 800bd2a:	4826      	ldr	r0, [pc, #152]	; (800bdc4 <__d2b+0xb4>)
 800bd2c:	f240 310a 	movw	r1, #778	; 0x30a
 800bd30:	f000 fb50 	bl	800c3d4 <__assert_func>
 800bd34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd3c:	bb35      	cbnz	r5, 800bd8c <__d2b+0x7c>
 800bd3e:	2e00      	cmp	r6, #0
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	d028      	beq.n	800bd96 <__d2b+0x86>
 800bd44:	4668      	mov	r0, sp
 800bd46:	9600      	str	r6, [sp, #0]
 800bd48:	f7ff fd06 	bl	800b758 <__lo0bits>
 800bd4c:	9900      	ldr	r1, [sp, #0]
 800bd4e:	b300      	cbz	r0, 800bd92 <__d2b+0x82>
 800bd50:	9a01      	ldr	r2, [sp, #4]
 800bd52:	f1c0 0320 	rsb	r3, r0, #32
 800bd56:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5a:	430b      	orrs	r3, r1
 800bd5c:	40c2      	lsrs	r2, r0
 800bd5e:	6163      	str	r3, [r4, #20]
 800bd60:	9201      	str	r2, [sp, #4]
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	61a3      	str	r3, [r4, #24]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bf14      	ite	ne
 800bd6a:	2202      	movne	r2, #2
 800bd6c:	2201      	moveq	r2, #1
 800bd6e:	6122      	str	r2, [r4, #16]
 800bd70:	b1d5      	cbz	r5, 800bda8 <__d2b+0x98>
 800bd72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd76:	4405      	add	r5, r0
 800bd78:	f8c9 5000 	str.w	r5, [r9]
 800bd7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd80:	f8c8 0000 	str.w	r0, [r8]
 800bd84:	4620      	mov	r0, r4
 800bd86:	b003      	add	sp, #12
 800bd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd90:	e7d5      	b.n	800bd3e <__d2b+0x2e>
 800bd92:	6161      	str	r1, [r4, #20]
 800bd94:	e7e5      	b.n	800bd62 <__d2b+0x52>
 800bd96:	a801      	add	r0, sp, #4
 800bd98:	f7ff fcde 	bl	800b758 <__lo0bits>
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	6163      	str	r3, [r4, #20]
 800bda0:	2201      	movs	r2, #1
 800bda2:	6122      	str	r2, [r4, #16]
 800bda4:	3020      	adds	r0, #32
 800bda6:	e7e3      	b.n	800bd70 <__d2b+0x60>
 800bda8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdb0:	f8c9 0000 	str.w	r0, [r9]
 800bdb4:	6918      	ldr	r0, [r3, #16]
 800bdb6:	f7ff fcaf 	bl	800b718 <__hi0bits>
 800bdba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdbe:	e7df      	b.n	800bd80 <__d2b+0x70>
 800bdc0:	0800d310 	.word	0x0800d310
 800bdc4:	0800d39c 	.word	0x0800d39c

0800bdc8 <__ratio>:
 800bdc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4688      	mov	r8, r1
 800bdce:	4669      	mov	r1, sp
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	f7ff ff4d 	bl	800bc70 <__b2d>
 800bdd6:	a901      	add	r1, sp, #4
 800bdd8:	4640      	mov	r0, r8
 800bdda:	ec55 4b10 	vmov	r4, r5, d0
 800bdde:	f7ff ff47 	bl	800bc70 <__b2d>
 800bde2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bde6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdea:	eba3 0c02 	sub.w	ip, r3, r2
 800bdee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bdf8:	ec51 0b10 	vmov	r0, r1, d0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfd6      	itet	le
 800be00:	460a      	movle	r2, r1
 800be02:	462a      	movgt	r2, r5
 800be04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be08:	468b      	mov	fp, r1
 800be0a:	462f      	mov	r7, r5
 800be0c:	bfd4      	ite	le
 800be0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be16:	4620      	mov	r0, r4
 800be18:	ee10 2a10 	vmov	r2, s0
 800be1c:	465b      	mov	r3, fp
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fd34 	bl	800088c <__aeabi_ddiv>
 800be24:	ec41 0b10 	vmov	d0, r0, r1
 800be28:	b003      	add	sp, #12
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be2e <__copybits>:
 800be2e:	3901      	subs	r1, #1
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	1149      	asrs	r1, r1, #5
 800be34:	6914      	ldr	r4, [r2, #16]
 800be36:	3101      	adds	r1, #1
 800be38:	f102 0314 	add.w	r3, r2, #20
 800be3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be44:	1f05      	subs	r5, r0, #4
 800be46:	42a3      	cmp	r3, r4
 800be48:	d30c      	bcc.n	800be64 <__copybits+0x36>
 800be4a:	1aa3      	subs	r3, r4, r2
 800be4c:	3b11      	subs	r3, #17
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	3211      	adds	r2, #17
 800be54:	42a2      	cmp	r2, r4
 800be56:	bf88      	it	hi
 800be58:	2300      	movhi	r3, #0
 800be5a:	4418      	add	r0, r3
 800be5c:	2300      	movs	r3, #0
 800be5e:	4288      	cmp	r0, r1
 800be60:	d305      	bcc.n	800be6e <__copybits+0x40>
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	f853 6b04 	ldr.w	r6, [r3], #4
 800be68:	f845 6f04 	str.w	r6, [r5, #4]!
 800be6c:	e7eb      	b.n	800be46 <__copybits+0x18>
 800be6e:	f840 3b04 	str.w	r3, [r0], #4
 800be72:	e7f4      	b.n	800be5e <__copybits+0x30>

0800be74 <__any_on>:
 800be74:	f100 0214 	add.w	r2, r0, #20
 800be78:	6900      	ldr	r0, [r0, #16]
 800be7a:	114b      	asrs	r3, r1, #5
 800be7c:	4298      	cmp	r0, r3
 800be7e:	b510      	push	{r4, lr}
 800be80:	db11      	blt.n	800bea6 <__any_on+0x32>
 800be82:	dd0a      	ble.n	800be9a <__any_on+0x26>
 800be84:	f011 011f 	ands.w	r1, r1, #31
 800be88:	d007      	beq.n	800be9a <__any_on+0x26>
 800be8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be8e:	fa24 f001 	lsr.w	r0, r4, r1
 800be92:	fa00 f101 	lsl.w	r1, r0, r1
 800be96:	428c      	cmp	r4, r1
 800be98:	d10b      	bne.n	800beb2 <__any_on+0x3e>
 800be9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d803      	bhi.n	800beaa <__any_on+0x36>
 800bea2:	2000      	movs	r0, #0
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	4603      	mov	r3, r0
 800bea8:	e7f7      	b.n	800be9a <__any_on+0x26>
 800beaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beae:	2900      	cmp	r1, #0
 800beb0:	d0f5      	beq.n	800be9e <__any_on+0x2a>
 800beb2:	2001      	movs	r0, #1
 800beb4:	e7f6      	b.n	800bea4 <__any_on+0x30>

0800beb6 <_calloc_r>:
 800beb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beb8:	fba1 2402 	umull	r2, r4, r1, r2
 800bebc:	b94c      	cbnz	r4, 800bed2 <_calloc_r+0x1c>
 800bebe:	4611      	mov	r1, r2
 800bec0:	9201      	str	r2, [sp, #4]
 800bec2:	f000 f87b 	bl	800bfbc <_malloc_r>
 800bec6:	9a01      	ldr	r2, [sp, #4]
 800bec8:	4605      	mov	r5, r0
 800beca:	b930      	cbnz	r0, 800beda <_calloc_r+0x24>
 800becc:	4628      	mov	r0, r5
 800bece:	b003      	add	sp, #12
 800bed0:	bd30      	pop	{r4, r5, pc}
 800bed2:	220c      	movs	r2, #12
 800bed4:	6002      	str	r2, [r0, #0]
 800bed6:	2500      	movs	r5, #0
 800bed8:	e7f8      	b.n	800becc <_calloc_r+0x16>
 800beda:	4621      	mov	r1, r4
 800bedc:	f7fc fba0 	bl	8008620 <memset>
 800bee0:	e7f4      	b.n	800becc <_calloc_r+0x16>
	...

0800bee4 <_free_r>:
 800bee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bee6:	2900      	cmp	r1, #0
 800bee8:	d044      	beq.n	800bf74 <_free_r+0x90>
 800beea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beee:	9001      	str	r0, [sp, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f1a1 0404 	sub.w	r4, r1, #4
 800bef6:	bfb8      	it	lt
 800bef8:	18e4      	addlt	r4, r4, r3
 800befa:	f000 fab5 	bl	800c468 <__malloc_lock>
 800befe:	4a1e      	ldr	r2, [pc, #120]	; (800bf78 <_free_r+0x94>)
 800bf00:	9801      	ldr	r0, [sp, #4]
 800bf02:	6813      	ldr	r3, [r2, #0]
 800bf04:	b933      	cbnz	r3, 800bf14 <_free_r+0x30>
 800bf06:	6063      	str	r3, [r4, #4]
 800bf08:	6014      	str	r4, [r2, #0]
 800bf0a:	b003      	add	sp, #12
 800bf0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf10:	f000 bab0 	b.w	800c474 <__malloc_unlock>
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	d908      	bls.n	800bf2a <_free_r+0x46>
 800bf18:	6825      	ldr	r5, [r4, #0]
 800bf1a:	1961      	adds	r1, r4, r5
 800bf1c:	428b      	cmp	r3, r1
 800bf1e:	bf01      	itttt	eq
 800bf20:	6819      	ldreq	r1, [r3, #0]
 800bf22:	685b      	ldreq	r3, [r3, #4]
 800bf24:	1949      	addeq	r1, r1, r5
 800bf26:	6021      	streq	r1, [r4, #0]
 800bf28:	e7ed      	b.n	800bf06 <_free_r+0x22>
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	b10b      	cbz	r3, 800bf34 <_free_r+0x50>
 800bf30:	42a3      	cmp	r3, r4
 800bf32:	d9fa      	bls.n	800bf2a <_free_r+0x46>
 800bf34:	6811      	ldr	r1, [r2, #0]
 800bf36:	1855      	adds	r5, r2, r1
 800bf38:	42a5      	cmp	r5, r4
 800bf3a:	d10b      	bne.n	800bf54 <_free_r+0x70>
 800bf3c:	6824      	ldr	r4, [r4, #0]
 800bf3e:	4421      	add	r1, r4
 800bf40:	1854      	adds	r4, r2, r1
 800bf42:	42a3      	cmp	r3, r4
 800bf44:	6011      	str	r1, [r2, #0]
 800bf46:	d1e0      	bne.n	800bf0a <_free_r+0x26>
 800bf48:	681c      	ldr	r4, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	6053      	str	r3, [r2, #4]
 800bf4e:	4421      	add	r1, r4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	e7da      	b.n	800bf0a <_free_r+0x26>
 800bf54:	d902      	bls.n	800bf5c <_free_r+0x78>
 800bf56:	230c      	movs	r3, #12
 800bf58:	6003      	str	r3, [r0, #0]
 800bf5a:	e7d6      	b.n	800bf0a <_free_r+0x26>
 800bf5c:	6825      	ldr	r5, [r4, #0]
 800bf5e:	1961      	adds	r1, r4, r5
 800bf60:	428b      	cmp	r3, r1
 800bf62:	bf04      	itt	eq
 800bf64:	6819      	ldreq	r1, [r3, #0]
 800bf66:	685b      	ldreq	r3, [r3, #4]
 800bf68:	6063      	str	r3, [r4, #4]
 800bf6a:	bf04      	itt	eq
 800bf6c:	1949      	addeq	r1, r1, r5
 800bf6e:	6021      	streq	r1, [r4, #0]
 800bf70:	6054      	str	r4, [r2, #4]
 800bf72:	e7ca      	b.n	800bf0a <_free_r+0x26>
 800bf74:	b003      	add	sp, #12
 800bf76:	bd30      	pop	{r4, r5, pc}
 800bf78:	20000670 	.word	0x20000670

0800bf7c <sbrk_aligned>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	4e0e      	ldr	r6, [pc, #56]	; (800bfb8 <sbrk_aligned+0x3c>)
 800bf80:	460c      	mov	r4, r1
 800bf82:	6831      	ldr	r1, [r6, #0]
 800bf84:	4605      	mov	r5, r0
 800bf86:	b911      	cbnz	r1, 800bf8e <sbrk_aligned+0x12>
 800bf88:	f000 f9f2 	bl	800c370 <_sbrk_r>
 800bf8c:	6030      	str	r0, [r6, #0]
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f000 f9ed 	bl	800c370 <_sbrk_r>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d00a      	beq.n	800bfb0 <sbrk_aligned+0x34>
 800bf9a:	1cc4      	adds	r4, r0, #3
 800bf9c:	f024 0403 	bic.w	r4, r4, #3
 800bfa0:	42a0      	cmp	r0, r4
 800bfa2:	d007      	beq.n	800bfb4 <sbrk_aligned+0x38>
 800bfa4:	1a21      	subs	r1, r4, r0
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 f9e2 	bl	800c370 <_sbrk_r>
 800bfac:	3001      	adds	r0, #1
 800bfae:	d101      	bne.n	800bfb4 <sbrk_aligned+0x38>
 800bfb0:	f04f 34ff 	mov.w	r4, #4294967295
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	20000674 	.word	0x20000674

0800bfbc <_malloc_r>:
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	1ccd      	adds	r5, r1, #3
 800bfc2:	f025 0503 	bic.w	r5, r5, #3
 800bfc6:	3508      	adds	r5, #8
 800bfc8:	2d0c      	cmp	r5, #12
 800bfca:	bf38      	it	cc
 800bfcc:	250c      	movcc	r5, #12
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	db01      	blt.n	800bfd8 <_malloc_r+0x1c>
 800bfd4:	42a9      	cmp	r1, r5
 800bfd6:	d905      	bls.n	800bfe4 <_malloc_r+0x28>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	2600      	movs	r6, #0
 800bfde:	4630      	mov	r0, r6
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	4e2e      	ldr	r6, [pc, #184]	; (800c0a0 <_malloc_r+0xe4>)
 800bfe6:	f000 fa3f 	bl	800c468 <__malloc_lock>
 800bfea:	6833      	ldr	r3, [r6, #0]
 800bfec:	461c      	mov	r4, r3
 800bfee:	bb34      	cbnz	r4, 800c03e <_malloc_r+0x82>
 800bff0:	4629      	mov	r1, r5
 800bff2:	4638      	mov	r0, r7
 800bff4:	f7ff ffc2 	bl	800bf7c <sbrk_aligned>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	4604      	mov	r4, r0
 800bffc:	d14d      	bne.n	800c09a <_malloc_r+0xde>
 800bffe:	6834      	ldr	r4, [r6, #0]
 800c000:	4626      	mov	r6, r4
 800c002:	2e00      	cmp	r6, #0
 800c004:	d140      	bne.n	800c088 <_malloc_r+0xcc>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	4631      	mov	r1, r6
 800c00a:	4638      	mov	r0, r7
 800c00c:	eb04 0803 	add.w	r8, r4, r3
 800c010:	f000 f9ae 	bl	800c370 <_sbrk_r>
 800c014:	4580      	cmp	r8, r0
 800c016:	d13a      	bne.n	800c08e <_malloc_r+0xd2>
 800c018:	6821      	ldr	r1, [r4, #0]
 800c01a:	3503      	adds	r5, #3
 800c01c:	1a6d      	subs	r5, r5, r1
 800c01e:	f025 0503 	bic.w	r5, r5, #3
 800c022:	3508      	adds	r5, #8
 800c024:	2d0c      	cmp	r5, #12
 800c026:	bf38      	it	cc
 800c028:	250c      	movcc	r5, #12
 800c02a:	4629      	mov	r1, r5
 800c02c:	4638      	mov	r0, r7
 800c02e:	f7ff ffa5 	bl	800bf7c <sbrk_aligned>
 800c032:	3001      	adds	r0, #1
 800c034:	d02b      	beq.n	800c08e <_malloc_r+0xd2>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	442b      	add	r3, r5
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	e00e      	b.n	800c05c <_malloc_r+0xa0>
 800c03e:	6822      	ldr	r2, [r4, #0]
 800c040:	1b52      	subs	r2, r2, r5
 800c042:	d41e      	bmi.n	800c082 <_malloc_r+0xc6>
 800c044:	2a0b      	cmp	r2, #11
 800c046:	d916      	bls.n	800c076 <_malloc_r+0xba>
 800c048:	1961      	adds	r1, r4, r5
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	6025      	str	r5, [r4, #0]
 800c04e:	bf18      	it	ne
 800c050:	6059      	strne	r1, [r3, #4]
 800c052:	6863      	ldr	r3, [r4, #4]
 800c054:	bf08      	it	eq
 800c056:	6031      	streq	r1, [r6, #0]
 800c058:	5162      	str	r2, [r4, r5]
 800c05a:	604b      	str	r3, [r1, #4]
 800c05c:	4638      	mov	r0, r7
 800c05e:	f104 060b 	add.w	r6, r4, #11
 800c062:	f000 fa07 	bl	800c474 <__malloc_unlock>
 800c066:	f026 0607 	bic.w	r6, r6, #7
 800c06a:	1d23      	adds	r3, r4, #4
 800c06c:	1af2      	subs	r2, r6, r3
 800c06e:	d0b6      	beq.n	800bfde <_malloc_r+0x22>
 800c070:	1b9b      	subs	r3, r3, r6
 800c072:	50a3      	str	r3, [r4, r2]
 800c074:	e7b3      	b.n	800bfde <_malloc_r+0x22>
 800c076:	6862      	ldr	r2, [r4, #4]
 800c078:	42a3      	cmp	r3, r4
 800c07a:	bf0c      	ite	eq
 800c07c:	6032      	streq	r2, [r6, #0]
 800c07e:	605a      	strne	r2, [r3, #4]
 800c080:	e7ec      	b.n	800c05c <_malloc_r+0xa0>
 800c082:	4623      	mov	r3, r4
 800c084:	6864      	ldr	r4, [r4, #4]
 800c086:	e7b2      	b.n	800bfee <_malloc_r+0x32>
 800c088:	4634      	mov	r4, r6
 800c08a:	6876      	ldr	r6, [r6, #4]
 800c08c:	e7b9      	b.n	800c002 <_malloc_r+0x46>
 800c08e:	230c      	movs	r3, #12
 800c090:	603b      	str	r3, [r7, #0]
 800c092:	4638      	mov	r0, r7
 800c094:	f000 f9ee 	bl	800c474 <__malloc_unlock>
 800c098:	e7a1      	b.n	800bfde <_malloc_r+0x22>
 800c09a:	6025      	str	r5, [r4, #0]
 800c09c:	e7de      	b.n	800c05c <_malloc_r+0xa0>
 800c09e:	bf00      	nop
 800c0a0:	20000670 	.word	0x20000670

0800c0a4 <__ssputs_r>:
 800c0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a8:	688e      	ldr	r6, [r1, #8]
 800c0aa:	429e      	cmp	r6, r3
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	4690      	mov	r8, r2
 800c0b2:	461f      	mov	r7, r3
 800c0b4:	d838      	bhi.n	800c128 <__ssputs_r+0x84>
 800c0b6:	898a      	ldrh	r2, [r1, #12]
 800c0b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0bc:	d032      	beq.n	800c124 <__ssputs_r+0x80>
 800c0be:	6825      	ldr	r5, [r4, #0]
 800c0c0:	6909      	ldr	r1, [r1, #16]
 800c0c2:	eba5 0901 	sub.w	r9, r5, r1
 800c0c6:	6965      	ldr	r5, [r4, #20]
 800c0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	444b      	add	r3, r9
 800c0d4:	106d      	asrs	r5, r5, #1
 800c0d6:	429d      	cmp	r5, r3
 800c0d8:	bf38      	it	cc
 800c0da:	461d      	movcc	r5, r3
 800c0dc:	0553      	lsls	r3, r2, #21
 800c0de:	d531      	bpl.n	800c144 <__ssputs_r+0xa0>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7ff ff6b 	bl	800bfbc <_malloc_r>
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	b950      	cbnz	r0, 800c100 <__ssputs_r+0x5c>
 800c0ea:	230c      	movs	r3, #12
 800c0ec:	f8ca 3000 	str.w	r3, [sl]
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f6:	81a3      	strh	r3, [r4, #12]
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c100:	6921      	ldr	r1, [r4, #16]
 800c102:	464a      	mov	r2, r9
 800c104:	f7ff fa08 	bl	800b518 <memcpy>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	6126      	str	r6, [r4, #16]
 800c116:	6165      	str	r5, [r4, #20]
 800c118:	444e      	add	r6, r9
 800c11a:	eba5 0509 	sub.w	r5, r5, r9
 800c11e:	6026      	str	r6, [r4, #0]
 800c120:	60a5      	str	r5, [r4, #8]
 800c122:	463e      	mov	r6, r7
 800c124:	42be      	cmp	r6, r7
 800c126:	d900      	bls.n	800c12a <__ssputs_r+0x86>
 800c128:	463e      	mov	r6, r7
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	4632      	mov	r2, r6
 800c12e:	4641      	mov	r1, r8
 800c130:	f000 f980 	bl	800c434 <memmove>
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	1b9b      	subs	r3, r3, r6
 800c138:	60a3      	str	r3, [r4, #8]
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	4433      	add	r3, r6
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	2000      	movs	r0, #0
 800c142:	e7db      	b.n	800c0fc <__ssputs_r+0x58>
 800c144:	462a      	mov	r2, r5
 800c146:	f000 f99b 	bl	800c480 <_realloc_r>
 800c14a:	4606      	mov	r6, r0
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d1e1      	bne.n	800c114 <__ssputs_r+0x70>
 800c150:	6921      	ldr	r1, [r4, #16]
 800c152:	4650      	mov	r0, sl
 800c154:	f7ff fec6 	bl	800bee4 <_free_r>
 800c158:	e7c7      	b.n	800c0ea <__ssputs_r+0x46>
	...

0800c15c <_svfiprintf_r>:
 800c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c160:	4698      	mov	r8, r3
 800c162:	898b      	ldrh	r3, [r1, #12]
 800c164:	061b      	lsls	r3, r3, #24
 800c166:	b09d      	sub	sp, #116	; 0x74
 800c168:	4607      	mov	r7, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	d50e      	bpl.n	800c18e <_svfiprintf_r+0x32>
 800c170:	690b      	ldr	r3, [r1, #16]
 800c172:	b963      	cbnz	r3, 800c18e <_svfiprintf_r+0x32>
 800c174:	2140      	movs	r1, #64	; 0x40
 800c176:	f7ff ff21 	bl	800bfbc <_malloc_r>
 800c17a:	6028      	str	r0, [r5, #0]
 800c17c:	6128      	str	r0, [r5, #16]
 800c17e:	b920      	cbnz	r0, 800c18a <_svfiprintf_r+0x2e>
 800c180:	230c      	movs	r3, #12
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e0d1      	b.n	800c32e <_svfiprintf_r+0x1d2>
 800c18a:	2340      	movs	r3, #64	; 0x40
 800c18c:	616b      	str	r3, [r5, #20]
 800c18e:	2300      	movs	r3, #0
 800c190:	9309      	str	r3, [sp, #36]	; 0x24
 800c192:	2320      	movs	r3, #32
 800c194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c198:	f8cd 800c 	str.w	r8, [sp, #12]
 800c19c:	2330      	movs	r3, #48	; 0x30
 800c19e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c348 <_svfiprintf_r+0x1ec>
 800c1a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1a6:	f04f 0901 	mov.w	r9, #1
 800c1aa:	4623      	mov	r3, r4
 800c1ac:	469a      	mov	sl, r3
 800c1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b2:	b10a      	cbz	r2, 800c1b8 <_svfiprintf_r+0x5c>
 800c1b4:	2a25      	cmp	r2, #37	; 0x25
 800c1b6:	d1f9      	bne.n	800c1ac <_svfiprintf_r+0x50>
 800c1b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c1bc:	d00b      	beq.n	800c1d6 <_svfiprintf_r+0x7a>
 800c1be:	465b      	mov	r3, fp
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff ff6d 	bl	800c0a4 <__ssputs_r>
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	f000 80aa 	beq.w	800c324 <_svfiprintf_r+0x1c8>
 800c1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1d2:	445a      	add	r2, fp
 800c1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 80a2 	beq.w	800c324 <_svfiprintf_r+0x1c8>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ea:	f10a 0a01 	add.w	sl, sl, #1
 800c1ee:	9304      	str	r3, [sp, #16]
 800c1f0:	9307      	str	r3, [sp, #28]
 800c1f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c1f8:	4654      	mov	r4, sl
 800c1fa:	2205      	movs	r2, #5
 800c1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c200:	4851      	ldr	r0, [pc, #324]	; (800c348 <_svfiprintf_r+0x1ec>)
 800c202:	f7f4 f80d 	bl	8000220 <memchr>
 800c206:	9a04      	ldr	r2, [sp, #16]
 800c208:	b9d8      	cbnz	r0, 800c242 <_svfiprintf_r+0xe6>
 800c20a:	06d0      	lsls	r0, r2, #27
 800c20c:	bf44      	itt	mi
 800c20e:	2320      	movmi	r3, #32
 800c210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c214:	0711      	lsls	r1, r2, #28
 800c216:	bf44      	itt	mi
 800c218:	232b      	movmi	r3, #43	; 0x2b
 800c21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c21e:	f89a 3000 	ldrb.w	r3, [sl]
 800c222:	2b2a      	cmp	r3, #42	; 0x2a
 800c224:	d015      	beq.n	800c252 <_svfiprintf_r+0xf6>
 800c226:	9a07      	ldr	r2, [sp, #28]
 800c228:	4654      	mov	r4, sl
 800c22a:	2000      	movs	r0, #0
 800c22c:	f04f 0c0a 	mov.w	ip, #10
 800c230:	4621      	mov	r1, r4
 800c232:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c236:	3b30      	subs	r3, #48	; 0x30
 800c238:	2b09      	cmp	r3, #9
 800c23a:	d94e      	bls.n	800c2da <_svfiprintf_r+0x17e>
 800c23c:	b1b0      	cbz	r0, 800c26c <_svfiprintf_r+0x110>
 800c23e:	9207      	str	r2, [sp, #28]
 800c240:	e014      	b.n	800c26c <_svfiprintf_r+0x110>
 800c242:	eba0 0308 	sub.w	r3, r0, r8
 800c246:	fa09 f303 	lsl.w	r3, r9, r3
 800c24a:	4313      	orrs	r3, r2
 800c24c:	9304      	str	r3, [sp, #16]
 800c24e:	46a2      	mov	sl, r4
 800c250:	e7d2      	b.n	800c1f8 <_svfiprintf_r+0x9c>
 800c252:	9b03      	ldr	r3, [sp, #12]
 800c254:	1d19      	adds	r1, r3, #4
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	9103      	str	r1, [sp, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	bfbb      	ittet	lt
 800c25e:	425b      	neglt	r3, r3
 800c260:	f042 0202 	orrlt.w	r2, r2, #2
 800c264:	9307      	strge	r3, [sp, #28]
 800c266:	9307      	strlt	r3, [sp, #28]
 800c268:	bfb8      	it	lt
 800c26a:	9204      	strlt	r2, [sp, #16]
 800c26c:	7823      	ldrb	r3, [r4, #0]
 800c26e:	2b2e      	cmp	r3, #46	; 0x2e
 800c270:	d10c      	bne.n	800c28c <_svfiprintf_r+0x130>
 800c272:	7863      	ldrb	r3, [r4, #1]
 800c274:	2b2a      	cmp	r3, #42	; 0x2a
 800c276:	d135      	bne.n	800c2e4 <_svfiprintf_r+0x188>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	1d1a      	adds	r2, r3, #4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	9203      	str	r2, [sp, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	bfb8      	it	lt
 800c284:	f04f 33ff 	movlt.w	r3, #4294967295
 800c288:	3402      	adds	r4, #2
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c358 <_svfiprintf_r+0x1fc>
 800c290:	7821      	ldrb	r1, [r4, #0]
 800c292:	2203      	movs	r2, #3
 800c294:	4650      	mov	r0, sl
 800c296:	f7f3 ffc3 	bl	8000220 <memchr>
 800c29a:	b140      	cbz	r0, 800c2ae <_svfiprintf_r+0x152>
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	eba0 000a 	sub.w	r0, r0, sl
 800c2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	4303      	orrs	r3, r0
 800c2aa:	3401      	adds	r4, #1
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b2:	4826      	ldr	r0, [pc, #152]	; (800c34c <_svfiprintf_r+0x1f0>)
 800c2b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2b8:	2206      	movs	r2, #6
 800c2ba:	f7f3 ffb1 	bl	8000220 <memchr>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d038      	beq.n	800c334 <_svfiprintf_r+0x1d8>
 800c2c2:	4b23      	ldr	r3, [pc, #140]	; (800c350 <_svfiprintf_r+0x1f4>)
 800c2c4:	bb1b      	cbnz	r3, 800c30e <_svfiprintf_r+0x1b2>
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	3307      	adds	r3, #7
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d4:	4433      	add	r3, r6
 800c2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d8:	e767      	b.n	800c1aa <_svfiprintf_r+0x4e>
 800c2da:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2de:	460c      	mov	r4, r1
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	e7a5      	b.n	800c230 <_svfiprintf_r+0xd4>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	3401      	adds	r4, #1
 800c2e8:	9305      	str	r3, [sp, #20]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f04f 0c0a 	mov.w	ip, #10
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2f6:	3a30      	subs	r2, #48	; 0x30
 800c2f8:	2a09      	cmp	r2, #9
 800c2fa:	d903      	bls.n	800c304 <_svfiprintf_r+0x1a8>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d0c5      	beq.n	800c28c <_svfiprintf_r+0x130>
 800c300:	9105      	str	r1, [sp, #20]
 800c302:	e7c3      	b.n	800c28c <_svfiprintf_r+0x130>
 800c304:	fb0c 2101 	mla	r1, ip, r1, r2
 800c308:	4604      	mov	r4, r0
 800c30a:	2301      	movs	r3, #1
 800c30c:	e7f0      	b.n	800c2f0 <_svfiprintf_r+0x194>
 800c30e:	ab03      	add	r3, sp, #12
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	462a      	mov	r2, r5
 800c314:	4b0f      	ldr	r3, [pc, #60]	; (800c354 <_svfiprintf_r+0x1f8>)
 800c316:	a904      	add	r1, sp, #16
 800c318:	4638      	mov	r0, r7
 800c31a:	f7fc fa29 	bl	8008770 <_printf_float>
 800c31e:	1c42      	adds	r2, r0, #1
 800c320:	4606      	mov	r6, r0
 800c322:	d1d6      	bne.n	800c2d2 <_svfiprintf_r+0x176>
 800c324:	89ab      	ldrh	r3, [r5, #12]
 800c326:	065b      	lsls	r3, r3, #25
 800c328:	f53f af2c 	bmi.w	800c184 <_svfiprintf_r+0x28>
 800c32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c32e:	b01d      	add	sp, #116	; 0x74
 800c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c334:	ab03      	add	r3, sp, #12
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	462a      	mov	r2, r5
 800c33a:	4b06      	ldr	r3, [pc, #24]	; (800c354 <_svfiprintf_r+0x1f8>)
 800c33c:	a904      	add	r1, sp, #16
 800c33e:	4638      	mov	r0, r7
 800c340:	f7fc fcba 	bl	8008cb8 <_printf_i>
 800c344:	e7eb      	b.n	800c31e <_svfiprintf_r+0x1c2>
 800c346:	bf00      	nop
 800c348:	0800d4f4 	.word	0x0800d4f4
 800c34c:	0800d4fe 	.word	0x0800d4fe
 800c350:	08008771 	.word	0x08008771
 800c354:	0800c0a5 	.word	0x0800c0a5
 800c358:	0800d4fa 	.word	0x0800d4fa
 800c35c:	00000000 	.word	0x00000000

0800c360 <nan>:
 800c360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c368 <nan+0x8>
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	00000000 	.word	0x00000000
 800c36c:	7ff80000 	.word	0x7ff80000

0800c370 <_sbrk_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d06      	ldr	r5, [pc, #24]	; (800c38c <_sbrk_r+0x1c>)
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	602b      	str	r3, [r5, #0]
 800c37c:	f7f7 fbca 	bl	8003b14 <_sbrk>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_sbrk_r+0x1a>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_sbrk_r+0x1a>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20000678 	.word	0x20000678

0800c390 <strncmp>:
 800c390:	b510      	push	{r4, lr}
 800c392:	b17a      	cbz	r2, 800c3b4 <strncmp+0x24>
 800c394:	4603      	mov	r3, r0
 800c396:	3901      	subs	r1, #1
 800c398:	1884      	adds	r4, r0, r2
 800c39a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c39e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c3a2:	4290      	cmp	r0, r2
 800c3a4:	d101      	bne.n	800c3aa <strncmp+0x1a>
 800c3a6:	42a3      	cmp	r3, r4
 800c3a8:	d101      	bne.n	800c3ae <strncmp+0x1e>
 800c3aa:	1a80      	subs	r0, r0, r2
 800c3ac:	bd10      	pop	{r4, pc}
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d1f3      	bne.n	800c39a <strncmp+0xa>
 800c3b2:	e7fa      	b.n	800c3aa <strncmp+0x1a>
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	e7f9      	b.n	800c3ac <strncmp+0x1c>

0800c3b8 <__ascii_wctomb>:
 800c3b8:	b149      	cbz	r1, 800c3ce <__ascii_wctomb+0x16>
 800c3ba:	2aff      	cmp	r2, #255	; 0xff
 800c3bc:	bf85      	ittet	hi
 800c3be:	238a      	movhi	r3, #138	; 0x8a
 800c3c0:	6003      	strhi	r3, [r0, #0]
 800c3c2:	700a      	strbls	r2, [r1, #0]
 800c3c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3c8:	bf98      	it	ls
 800c3ca:	2001      	movls	r0, #1
 800c3cc:	4770      	bx	lr
 800c3ce:	4608      	mov	r0, r1
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <__assert_func>:
 800c3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3d6:	4614      	mov	r4, r2
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4b09      	ldr	r3, [pc, #36]	; (800c400 <__assert_func+0x2c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4605      	mov	r5, r0
 800c3e0:	68d8      	ldr	r0, [r3, #12]
 800c3e2:	b14c      	cbz	r4, 800c3f8 <__assert_func+0x24>
 800c3e4:	4b07      	ldr	r3, [pc, #28]	; (800c404 <__assert_func+0x30>)
 800c3e6:	9100      	str	r1, [sp, #0]
 800c3e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3ec:	4906      	ldr	r1, [pc, #24]	; (800c408 <__assert_func+0x34>)
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	f000 f80e 	bl	800c410 <fiprintf>
 800c3f4:	f000 fa8c 	bl	800c910 <abort>
 800c3f8:	4b04      	ldr	r3, [pc, #16]	; (800c40c <__assert_func+0x38>)
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	e7f3      	b.n	800c3e6 <__assert_func+0x12>
 800c3fe:	bf00      	nop
 800c400:	20000018 	.word	0x20000018
 800c404:	0800d505 	.word	0x0800d505
 800c408:	0800d512 	.word	0x0800d512
 800c40c:	0800d540 	.word	0x0800d540

0800c410 <fiprintf>:
 800c410:	b40e      	push	{r1, r2, r3}
 800c412:	b503      	push	{r0, r1, lr}
 800c414:	4601      	mov	r1, r0
 800c416:	ab03      	add	r3, sp, #12
 800c418:	4805      	ldr	r0, [pc, #20]	; (800c430 <fiprintf+0x20>)
 800c41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c41e:	6800      	ldr	r0, [r0, #0]
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	f000 f885 	bl	800c530 <_vfiprintf_r>
 800c426:	b002      	add	sp, #8
 800c428:	f85d eb04 	ldr.w	lr, [sp], #4
 800c42c:	b003      	add	sp, #12
 800c42e:	4770      	bx	lr
 800c430:	20000018 	.word	0x20000018

0800c434 <memmove>:
 800c434:	4288      	cmp	r0, r1
 800c436:	b510      	push	{r4, lr}
 800c438:	eb01 0402 	add.w	r4, r1, r2
 800c43c:	d902      	bls.n	800c444 <memmove+0x10>
 800c43e:	4284      	cmp	r4, r0
 800c440:	4623      	mov	r3, r4
 800c442:	d807      	bhi.n	800c454 <memmove+0x20>
 800c444:	1e43      	subs	r3, r0, #1
 800c446:	42a1      	cmp	r1, r4
 800c448:	d008      	beq.n	800c45c <memmove+0x28>
 800c44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c452:	e7f8      	b.n	800c446 <memmove+0x12>
 800c454:	4402      	add	r2, r0
 800c456:	4601      	mov	r1, r0
 800c458:	428a      	cmp	r2, r1
 800c45a:	d100      	bne.n	800c45e <memmove+0x2a>
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c466:	e7f7      	b.n	800c458 <memmove+0x24>

0800c468 <__malloc_lock>:
 800c468:	4801      	ldr	r0, [pc, #4]	; (800c470 <__malloc_lock+0x8>)
 800c46a:	f000 bc11 	b.w	800cc90 <__retarget_lock_acquire_recursive>
 800c46e:	bf00      	nop
 800c470:	2000067c 	.word	0x2000067c

0800c474 <__malloc_unlock>:
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <__malloc_unlock+0x8>)
 800c476:	f000 bc0c 	b.w	800cc92 <__retarget_lock_release_recursive>
 800c47a:	bf00      	nop
 800c47c:	2000067c 	.word	0x2000067c

0800c480 <_realloc_r>:
 800c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c484:	4680      	mov	r8, r0
 800c486:	4614      	mov	r4, r2
 800c488:	460e      	mov	r6, r1
 800c48a:	b921      	cbnz	r1, 800c496 <_realloc_r+0x16>
 800c48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	4611      	mov	r1, r2
 800c492:	f7ff bd93 	b.w	800bfbc <_malloc_r>
 800c496:	b92a      	cbnz	r2, 800c4a4 <_realloc_r+0x24>
 800c498:	f7ff fd24 	bl	800bee4 <_free_r>
 800c49c:	4625      	mov	r5, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	f000 fc5c 	bl	800cd60 <_malloc_usable_size_r>
 800c4a8:	4284      	cmp	r4, r0
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	d802      	bhi.n	800c4b4 <_realloc_r+0x34>
 800c4ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4b2:	d812      	bhi.n	800c4da <_realloc_r+0x5a>
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	f7ff fd80 	bl	800bfbc <_malloc_r>
 800c4bc:	4605      	mov	r5, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d0ed      	beq.n	800c49e <_realloc_r+0x1e>
 800c4c2:	42bc      	cmp	r4, r7
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	bf28      	it	cs
 800c4ca:	463a      	movcs	r2, r7
 800c4cc:	f7ff f824 	bl	800b518 <memcpy>
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	f7ff fd06 	bl	800bee4 <_free_r>
 800c4d8:	e7e1      	b.n	800c49e <_realloc_r+0x1e>
 800c4da:	4635      	mov	r5, r6
 800c4dc:	e7df      	b.n	800c49e <_realloc_r+0x1e>

0800c4de <__sfputc_r>:
 800c4de:	6893      	ldr	r3, [r2, #8]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	b410      	push	{r4}
 800c4e6:	6093      	str	r3, [r2, #8]
 800c4e8:	da08      	bge.n	800c4fc <__sfputc_r+0x1e>
 800c4ea:	6994      	ldr	r4, [r2, #24]
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	db01      	blt.n	800c4f4 <__sfputc_r+0x16>
 800c4f0:	290a      	cmp	r1, #10
 800c4f2:	d103      	bne.n	800c4fc <__sfputc_r+0x1e>
 800c4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f8:	f000 b94a 	b.w	800c790 <__swbuf_r>
 800c4fc:	6813      	ldr	r3, [r2, #0]
 800c4fe:	1c58      	adds	r0, r3, #1
 800c500:	6010      	str	r0, [r2, #0]
 800c502:	7019      	strb	r1, [r3, #0]
 800c504:	4608      	mov	r0, r1
 800c506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <__sfputs_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	4606      	mov	r6, r0
 800c510:	460f      	mov	r7, r1
 800c512:	4614      	mov	r4, r2
 800c514:	18d5      	adds	r5, r2, r3
 800c516:	42ac      	cmp	r4, r5
 800c518:	d101      	bne.n	800c51e <__sfputs_r+0x12>
 800c51a:	2000      	movs	r0, #0
 800c51c:	e007      	b.n	800c52e <__sfputs_r+0x22>
 800c51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c522:	463a      	mov	r2, r7
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff ffda 	bl	800c4de <__sfputc_r>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	d1f3      	bne.n	800c516 <__sfputs_r+0xa>
 800c52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c530 <_vfiprintf_r>:
 800c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	460d      	mov	r5, r1
 800c536:	b09d      	sub	sp, #116	; 0x74
 800c538:	4614      	mov	r4, r2
 800c53a:	4698      	mov	r8, r3
 800c53c:	4606      	mov	r6, r0
 800c53e:	b118      	cbz	r0, 800c548 <_vfiprintf_r+0x18>
 800c540:	6983      	ldr	r3, [r0, #24]
 800c542:	b90b      	cbnz	r3, 800c548 <_vfiprintf_r+0x18>
 800c544:	f000 fb06 	bl	800cb54 <__sinit>
 800c548:	4b89      	ldr	r3, [pc, #548]	; (800c770 <_vfiprintf_r+0x240>)
 800c54a:	429d      	cmp	r5, r3
 800c54c:	d11b      	bne.n	800c586 <_vfiprintf_r+0x56>
 800c54e:	6875      	ldr	r5, [r6, #4]
 800c550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c552:	07d9      	lsls	r1, r3, #31
 800c554:	d405      	bmi.n	800c562 <_vfiprintf_r+0x32>
 800c556:	89ab      	ldrh	r3, [r5, #12]
 800c558:	059a      	lsls	r2, r3, #22
 800c55a:	d402      	bmi.n	800c562 <_vfiprintf_r+0x32>
 800c55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c55e:	f000 fb97 	bl	800cc90 <__retarget_lock_acquire_recursive>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	071b      	lsls	r3, r3, #28
 800c566:	d501      	bpl.n	800c56c <_vfiprintf_r+0x3c>
 800c568:	692b      	ldr	r3, [r5, #16]
 800c56a:	b9eb      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x78>
 800c56c:	4629      	mov	r1, r5
 800c56e:	4630      	mov	r0, r6
 800c570:	f000 f960 	bl	800c834 <__swsetup_r>
 800c574:	b1c0      	cbz	r0, 800c5a8 <_vfiprintf_r+0x78>
 800c576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c578:	07dc      	lsls	r4, r3, #31
 800c57a:	d50e      	bpl.n	800c59a <_vfiprintf_r+0x6a>
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	b01d      	add	sp, #116	; 0x74
 800c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c586:	4b7b      	ldr	r3, [pc, #492]	; (800c774 <_vfiprintf_r+0x244>)
 800c588:	429d      	cmp	r5, r3
 800c58a:	d101      	bne.n	800c590 <_vfiprintf_r+0x60>
 800c58c:	68b5      	ldr	r5, [r6, #8]
 800c58e:	e7df      	b.n	800c550 <_vfiprintf_r+0x20>
 800c590:	4b79      	ldr	r3, [pc, #484]	; (800c778 <_vfiprintf_r+0x248>)
 800c592:	429d      	cmp	r5, r3
 800c594:	bf08      	it	eq
 800c596:	68f5      	ldreq	r5, [r6, #12]
 800c598:	e7da      	b.n	800c550 <_vfiprintf_r+0x20>
 800c59a:	89ab      	ldrh	r3, [r5, #12]
 800c59c:	0598      	lsls	r0, r3, #22
 800c59e:	d4ed      	bmi.n	800c57c <_vfiprintf_r+0x4c>
 800c5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5a2:	f000 fb76 	bl	800cc92 <__retarget_lock_release_recursive>
 800c5a6:	e7e9      	b.n	800c57c <_vfiprintf_r+0x4c>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ac:	2320      	movs	r3, #32
 800c5ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b6:	2330      	movs	r3, #48	; 0x30
 800c5b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c77c <_vfiprintf_r+0x24c>
 800c5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5c0:	f04f 0901 	mov.w	r9, #1
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	469a      	mov	sl, r3
 800c5c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5cc:	b10a      	cbz	r2, 800c5d2 <_vfiprintf_r+0xa2>
 800c5ce:	2a25      	cmp	r2, #37	; 0x25
 800c5d0:	d1f9      	bne.n	800c5c6 <_vfiprintf_r+0x96>
 800c5d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d6:	d00b      	beq.n	800c5f0 <_vfiprintf_r+0xc0>
 800c5d8:	465b      	mov	r3, fp
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ff94 	bl	800c50c <__sfputs_r>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	f000 80aa 	beq.w	800c73e <_vfiprintf_r+0x20e>
 800c5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5ec:	445a      	add	r2, fp
 800c5ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 80a2 	beq.w	800c73e <_vfiprintf_r+0x20e>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c604:	f10a 0a01 	add.w	sl, sl, #1
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	9307      	str	r3, [sp, #28]
 800c60c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c610:	931a      	str	r3, [sp, #104]	; 0x68
 800c612:	4654      	mov	r4, sl
 800c614:	2205      	movs	r2, #5
 800c616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61a:	4858      	ldr	r0, [pc, #352]	; (800c77c <_vfiprintf_r+0x24c>)
 800c61c:	f7f3 fe00 	bl	8000220 <memchr>
 800c620:	9a04      	ldr	r2, [sp, #16]
 800c622:	b9d8      	cbnz	r0, 800c65c <_vfiprintf_r+0x12c>
 800c624:	06d1      	lsls	r1, r2, #27
 800c626:	bf44      	itt	mi
 800c628:	2320      	movmi	r3, #32
 800c62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c62e:	0713      	lsls	r3, r2, #28
 800c630:	bf44      	itt	mi
 800c632:	232b      	movmi	r3, #43	; 0x2b
 800c634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c638:	f89a 3000 	ldrb.w	r3, [sl]
 800c63c:	2b2a      	cmp	r3, #42	; 0x2a
 800c63e:	d015      	beq.n	800c66c <_vfiprintf_r+0x13c>
 800c640:	9a07      	ldr	r2, [sp, #28]
 800c642:	4654      	mov	r4, sl
 800c644:	2000      	movs	r0, #0
 800c646:	f04f 0c0a 	mov.w	ip, #10
 800c64a:	4621      	mov	r1, r4
 800c64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c650:	3b30      	subs	r3, #48	; 0x30
 800c652:	2b09      	cmp	r3, #9
 800c654:	d94e      	bls.n	800c6f4 <_vfiprintf_r+0x1c4>
 800c656:	b1b0      	cbz	r0, 800c686 <_vfiprintf_r+0x156>
 800c658:	9207      	str	r2, [sp, #28]
 800c65a:	e014      	b.n	800c686 <_vfiprintf_r+0x156>
 800c65c:	eba0 0308 	sub.w	r3, r0, r8
 800c660:	fa09 f303 	lsl.w	r3, r9, r3
 800c664:	4313      	orrs	r3, r2
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	46a2      	mov	sl, r4
 800c66a:	e7d2      	b.n	800c612 <_vfiprintf_r+0xe2>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	1d19      	adds	r1, r3, #4
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	9103      	str	r1, [sp, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	bfbb      	ittet	lt
 800c678:	425b      	neglt	r3, r3
 800c67a:	f042 0202 	orrlt.w	r2, r2, #2
 800c67e:	9307      	strge	r3, [sp, #28]
 800c680:	9307      	strlt	r3, [sp, #28]
 800c682:	bfb8      	it	lt
 800c684:	9204      	strlt	r2, [sp, #16]
 800c686:	7823      	ldrb	r3, [r4, #0]
 800c688:	2b2e      	cmp	r3, #46	; 0x2e
 800c68a:	d10c      	bne.n	800c6a6 <_vfiprintf_r+0x176>
 800c68c:	7863      	ldrb	r3, [r4, #1]
 800c68e:	2b2a      	cmp	r3, #42	; 0x2a
 800c690:	d135      	bne.n	800c6fe <_vfiprintf_r+0x1ce>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	1d1a      	adds	r2, r3, #4
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	9203      	str	r2, [sp, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfb8      	it	lt
 800c69e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6a2:	3402      	adds	r4, #2
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c78c <_vfiprintf_r+0x25c>
 800c6aa:	7821      	ldrb	r1, [r4, #0]
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7f3 fdb6 	bl	8000220 <memchr>
 800c6b4:	b140      	cbz	r0, 800c6c8 <_vfiprintf_r+0x198>
 800c6b6:	2340      	movs	r3, #64	; 0x40
 800c6b8:	eba0 000a 	sub.w	r0, r0, sl
 800c6bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c6c0:	9b04      	ldr	r3, [sp, #16]
 800c6c2:	4303      	orrs	r3, r0
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6cc:	482c      	ldr	r0, [pc, #176]	; (800c780 <_vfiprintf_r+0x250>)
 800c6ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	f7f3 fda4 	bl	8000220 <memchr>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d03f      	beq.n	800c75c <_vfiprintf_r+0x22c>
 800c6dc:	4b29      	ldr	r3, [pc, #164]	; (800c784 <_vfiprintf_r+0x254>)
 800c6de:	bb1b      	cbnz	r3, 800c728 <_vfiprintf_r+0x1f8>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	f023 0307 	bic.w	r3, r3, #7
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ee:	443b      	add	r3, r7
 800c6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f2:	e767      	b.n	800c5c4 <_vfiprintf_r+0x94>
 800c6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7a5      	b.n	800c64a <_vfiprintf_r+0x11a>
 800c6fe:	2300      	movs	r3, #0
 800c700:	3401      	adds	r4, #1
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	4619      	mov	r1, r3
 800c706:	f04f 0c0a 	mov.w	ip, #10
 800c70a:	4620      	mov	r0, r4
 800c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c710:	3a30      	subs	r2, #48	; 0x30
 800c712:	2a09      	cmp	r2, #9
 800c714:	d903      	bls.n	800c71e <_vfiprintf_r+0x1ee>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c5      	beq.n	800c6a6 <_vfiprintf_r+0x176>
 800c71a:	9105      	str	r1, [sp, #20]
 800c71c:	e7c3      	b.n	800c6a6 <_vfiprintf_r+0x176>
 800c71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c722:	4604      	mov	r4, r0
 800c724:	2301      	movs	r3, #1
 800c726:	e7f0      	b.n	800c70a <_vfiprintf_r+0x1da>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4b16      	ldr	r3, [pc, #88]	; (800c788 <_vfiprintf_r+0x258>)
 800c730:	a904      	add	r1, sp, #16
 800c732:	4630      	mov	r0, r6
 800c734:	f7fc f81c 	bl	8008770 <_printf_float>
 800c738:	4607      	mov	r7, r0
 800c73a:	1c78      	adds	r0, r7, #1
 800c73c:	d1d6      	bne.n	800c6ec <_vfiprintf_r+0x1bc>
 800c73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c740:	07d9      	lsls	r1, r3, #31
 800c742:	d405      	bmi.n	800c750 <_vfiprintf_r+0x220>
 800c744:	89ab      	ldrh	r3, [r5, #12]
 800c746:	059a      	lsls	r2, r3, #22
 800c748:	d402      	bmi.n	800c750 <_vfiprintf_r+0x220>
 800c74a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c74c:	f000 faa1 	bl	800cc92 <__retarget_lock_release_recursive>
 800c750:	89ab      	ldrh	r3, [r5, #12]
 800c752:	065b      	lsls	r3, r3, #25
 800c754:	f53f af12 	bmi.w	800c57c <_vfiprintf_r+0x4c>
 800c758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c75a:	e711      	b.n	800c580 <_vfiprintf_r+0x50>
 800c75c:	ab03      	add	r3, sp, #12
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	462a      	mov	r2, r5
 800c762:	4b09      	ldr	r3, [pc, #36]	; (800c788 <_vfiprintf_r+0x258>)
 800c764:	a904      	add	r1, sp, #16
 800c766:	4630      	mov	r0, r6
 800c768:	f7fc faa6 	bl	8008cb8 <_printf_i>
 800c76c:	e7e4      	b.n	800c738 <_vfiprintf_r+0x208>
 800c76e:	bf00      	nop
 800c770:	0800d564 	.word	0x0800d564
 800c774:	0800d584 	.word	0x0800d584
 800c778:	0800d544 	.word	0x0800d544
 800c77c:	0800d4f4 	.word	0x0800d4f4
 800c780:	0800d4fe 	.word	0x0800d4fe
 800c784:	08008771 	.word	0x08008771
 800c788:	0800c50d 	.word	0x0800c50d
 800c78c:	0800d4fa 	.word	0x0800d4fa

0800c790 <__swbuf_r>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	460e      	mov	r6, r1
 800c794:	4614      	mov	r4, r2
 800c796:	4605      	mov	r5, r0
 800c798:	b118      	cbz	r0, 800c7a2 <__swbuf_r+0x12>
 800c79a:	6983      	ldr	r3, [r0, #24]
 800c79c:	b90b      	cbnz	r3, 800c7a2 <__swbuf_r+0x12>
 800c79e:	f000 f9d9 	bl	800cb54 <__sinit>
 800c7a2:	4b21      	ldr	r3, [pc, #132]	; (800c828 <__swbuf_r+0x98>)
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	d12b      	bne.n	800c800 <__swbuf_r+0x70>
 800c7a8:	686c      	ldr	r4, [r5, #4]
 800c7aa:	69a3      	ldr	r3, [r4, #24]
 800c7ac:	60a3      	str	r3, [r4, #8]
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	071a      	lsls	r2, r3, #28
 800c7b2:	d52f      	bpl.n	800c814 <__swbuf_r+0x84>
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	b36b      	cbz	r3, 800c814 <__swbuf_r+0x84>
 800c7b8:	6923      	ldr	r3, [r4, #16]
 800c7ba:	6820      	ldr	r0, [r4, #0]
 800c7bc:	1ac0      	subs	r0, r0, r3
 800c7be:	6963      	ldr	r3, [r4, #20]
 800c7c0:	b2f6      	uxtb	r6, r6
 800c7c2:	4283      	cmp	r3, r0
 800c7c4:	4637      	mov	r7, r6
 800c7c6:	dc04      	bgt.n	800c7d2 <__swbuf_r+0x42>
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f000 f92e 	bl	800ca2c <_fflush_r>
 800c7d0:	bb30      	cbnz	r0, 800c820 <__swbuf_r+0x90>
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	60a3      	str	r3, [r4, #8]
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	6022      	str	r2, [r4, #0]
 800c7de:	701e      	strb	r6, [r3, #0]
 800c7e0:	6963      	ldr	r3, [r4, #20]
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	4283      	cmp	r3, r0
 800c7e6:	d004      	beq.n	800c7f2 <__swbuf_r+0x62>
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	07db      	lsls	r3, r3, #31
 800c7ec:	d506      	bpl.n	800c7fc <__swbuf_r+0x6c>
 800c7ee:	2e0a      	cmp	r6, #10
 800c7f0:	d104      	bne.n	800c7fc <__swbuf_r+0x6c>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f000 f919 	bl	800ca2c <_fflush_r>
 800c7fa:	b988      	cbnz	r0, 800c820 <__swbuf_r+0x90>
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c800:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <__swbuf_r+0x9c>)
 800c802:	429c      	cmp	r4, r3
 800c804:	d101      	bne.n	800c80a <__swbuf_r+0x7a>
 800c806:	68ac      	ldr	r4, [r5, #8]
 800c808:	e7cf      	b.n	800c7aa <__swbuf_r+0x1a>
 800c80a:	4b09      	ldr	r3, [pc, #36]	; (800c830 <__swbuf_r+0xa0>)
 800c80c:	429c      	cmp	r4, r3
 800c80e:	bf08      	it	eq
 800c810:	68ec      	ldreq	r4, [r5, #12]
 800c812:	e7ca      	b.n	800c7aa <__swbuf_r+0x1a>
 800c814:	4621      	mov	r1, r4
 800c816:	4628      	mov	r0, r5
 800c818:	f000 f80c 	bl	800c834 <__swsetup_r>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d0cb      	beq.n	800c7b8 <__swbuf_r+0x28>
 800c820:	f04f 37ff 	mov.w	r7, #4294967295
 800c824:	e7ea      	b.n	800c7fc <__swbuf_r+0x6c>
 800c826:	bf00      	nop
 800c828:	0800d564 	.word	0x0800d564
 800c82c:	0800d584 	.word	0x0800d584
 800c830:	0800d544 	.word	0x0800d544

0800c834 <__swsetup_r>:
 800c834:	4b32      	ldr	r3, [pc, #200]	; (800c900 <__swsetup_r+0xcc>)
 800c836:	b570      	push	{r4, r5, r6, lr}
 800c838:	681d      	ldr	r5, [r3, #0]
 800c83a:	4606      	mov	r6, r0
 800c83c:	460c      	mov	r4, r1
 800c83e:	b125      	cbz	r5, 800c84a <__swsetup_r+0x16>
 800c840:	69ab      	ldr	r3, [r5, #24]
 800c842:	b913      	cbnz	r3, 800c84a <__swsetup_r+0x16>
 800c844:	4628      	mov	r0, r5
 800c846:	f000 f985 	bl	800cb54 <__sinit>
 800c84a:	4b2e      	ldr	r3, [pc, #184]	; (800c904 <__swsetup_r+0xd0>)
 800c84c:	429c      	cmp	r4, r3
 800c84e:	d10f      	bne.n	800c870 <__swsetup_r+0x3c>
 800c850:	686c      	ldr	r4, [r5, #4]
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c858:	0719      	lsls	r1, r3, #28
 800c85a:	d42c      	bmi.n	800c8b6 <__swsetup_r+0x82>
 800c85c:	06dd      	lsls	r5, r3, #27
 800c85e:	d411      	bmi.n	800c884 <__swsetup_r+0x50>
 800c860:	2309      	movs	r3, #9
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c868:	81a3      	strh	r3, [r4, #12]
 800c86a:	f04f 30ff 	mov.w	r0, #4294967295
 800c86e:	e03e      	b.n	800c8ee <__swsetup_r+0xba>
 800c870:	4b25      	ldr	r3, [pc, #148]	; (800c908 <__swsetup_r+0xd4>)
 800c872:	429c      	cmp	r4, r3
 800c874:	d101      	bne.n	800c87a <__swsetup_r+0x46>
 800c876:	68ac      	ldr	r4, [r5, #8]
 800c878:	e7eb      	b.n	800c852 <__swsetup_r+0x1e>
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <__swsetup_r+0xd8>)
 800c87c:	429c      	cmp	r4, r3
 800c87e:	bf08      	it	eq
 800c880:	68ec      	ldreq	r4, [r5, #12]
 800c882:	e7e6      	b.n	800c852 <__swsetup_r+0x1e>
 800c884:	0758      	lsls	r0, r3, #29
 800c886:	d512      	bpl.n	800c8ae <__swsetup_r+0x7a>
 800c888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c88a:	b141      	cbz	r1, 800c89e <__swsetup_r+0x6a>
 800c88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c890:	4299      	cmp	r1, r3
 800c892:	d002      	beq.n	800c89a <__swsetup_r+0x66>
 800c894:	4630      	mov	r0, r6
 800c896:	f7ff fb25 	bl	800bee4 <_free_r>
 800c89a:	2300      	movs	r3, #0
 800c89c:	6363      	str	r3, [r4, #52]	; 0x34
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	6063      	str	r3, [r4, #4]
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	f043 0308 	orr.w	r3, r3, #8
 800c8b4:	81a3      	strh	r3, [r4, #12]
 800c8b6:	6923      	ldr	r3, [r4, #16]
 800c8b8:	b94b      	cbnz	r3, 800c8ce <__swsetup_r+0x9a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c4:	d003      	beq.n	800c8ce <__swsetup_r+0x9a>
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f000 fa09 	bl	800cce0 <__smakebuf_r>
 800c8ce:	89a0      	ldrh	r0, [r4, #12]
 800c8d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8d4:	f010 0301 	ands.w	r3, r0, #1
 800c8d8:	d00a      	beq.n	800c8f0 <__swsetup_r+0xbc>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60a3      	str	r3, [r4, #8]
 800c8de:	6963      	ldr	r3, [r4, #20]
 800c8e0:	425b      	negs	r3, r3
 800c8e2:	61a3      	str	r3, [r4, #24]
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	b943      	cbnz	r3, 800c8fa <__swsetup_r+0xc6>
 800c8e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8ec:	d1ba      	bne.n	800c864 <__swsetup_r+0x30>
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	0781      	lsls	r1, r0, #30
 800c8f2:	bf58      	it	pl
 800c8f4:	6963      	ldrpl	r3, [r4, #20]
 800c8f6:	60a3      	str	r3, [r4, #8]
 800c8f8:	e7f4      	b.n	800c8e4 <__swsetup_r+0xb0>
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e7f7      	b.n	800c8ee <__swsetup_r+0xba>
 800c8fe:	bf00      	nop
 800c900:	20000018 	.word	0x20000018
 800c904:	0800d564 	.word	0x0800d564
 800c908:	0800d584 	.word	0x0800d584
 800c90c:	0800d544 	.word	0x0800d544

0800c910 <abort>:
 800c910:	b508      	push	{r3, lr}
 800c912:	2006      	movs	r0, #6
 800c914:	f000 fa54 	bl	800cdc0 <raise>
 800c918:	2001      	movs	r0, #1
 800c91a:	f7f7 f89f 	bl	8003a5c <_exit>
	...

0800c920 <__sflush_r>:
 800c920:	898a      	ldrh	r2, [r1, #12]
 800c922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c926:	4605      	mov	r5, r0
 800c928:	0710      	lsls	r0, r2, #28
 800c92a:	460c      	mov	r4, r1
 800c92c:	d458      	bmi.n	800c9e0 <__sflush_r+0xc0>
 800c92e:	684b      	ldr	r3, [r1, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	dc05      	bgt.n	800c940 <__sflush_r+0x20>
 800c934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c936:	2b00      	cmp	r3, #0
 800c938:	dc02      	bgt.n	800c940 <__sflush_r+0x20>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c942:	2e00      	cmp	r6, #0
 800c944:	d0f9      	beq.n	800c93a <__sflush_r+0x1a>
 800c946:	2300      	movs	r3, #0
 800c948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c94c:	682f      	ldr	r7, [r5, #0]
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	d032      	beq.n	800c9b8 <__sflush_r+0x98>
 800c952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	075a      	lsls	r2, r3, #29
 800c958:	d505      	bpl.n	800c966 <__sflush_r+0x46>
 800c95a:	6863      	ldr	r3, [r4, #4]
 800c95c:	1ac0      	subs	r0, r0, r3
 800c95e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c960:	b10b      	cbz	r3, 800c966 <__sflush_r+0x46>
 800c962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c964:	1ac0      	subs	r0, r0, r3
 800c966:	2300      	movs	r3, #0
 800c968:	4602      	mov	r2, r0
 800c96a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c96c:	6a21      	ldr	r1, [r4, #32]
 800c96e:	4628      	mov	r0, r5
 800c970:	47b0      	blx	r6
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	d106      	bne.n	800c986 <__sflush_r+0x66>
 800c978:	6829      	ldr	r1, [r5, #0]
 800c97a:	291d      	cmp	r1, #29
 800c97c:	d82c      	bhi.n	800c9d8 <__sflush_r+0xb8>
 800c97e:	4a2a      	ldr	r2, [pc, #168]	; (800ca28 <__sflush_r+0x108>)
 800c980:	40ca      	lsrs	r2, r1
 800c982:	07d6      	lsls	r6, r2, #31
 800c984:	d528      	bpl.n	800c9d8 <__sflush_r+0xb8>
 800c986:	2200      	movs	r2, #0
 800c988:	6062      	str	r2, [r4, #4]
 800c98a:	04d9      	lsls	r1, r3, #19
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	6022      	str	r2, [r4, #0]
 800c990:	d504      	bpl.n	800c99c <__sflush_r+0x7c>
 800c992:	1c42      	adds	r2, r0, #1
 800c994:	d101      	bne.n	800c99a <__sflush_r+0x7a>
 800c996:	682b      	ldr	r3, [r5, #0]
 800c998:	b903      	cbnz	r3, 800c99c <__sflush_r+0x7c>
 800c99a:	6560      	str	r0, [r4, #84]	; 0x54
 800c99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99e:	602f      	str	r7, [r5, #0]
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	d0ca      	beq.n	800c93a <__sflush_r+0x1a>
 800c9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a8:	4299      	cmp	r1, r3
 800c9aa:	d002      	beq.n	800c9b2 <__sflush_r+0x92>
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f7ff fa99 	bl	800bee4 <_free_r>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c9b6:	e7c1      	b.n	800c93c <__sflush_r+0x1c>
 800c9b8:	6a21      	ldr	r1, [r4, #32]
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	4628      	mov	r0, r5
 800c9be:	47b0      	blx	r6
 800c9c0:	1c41      	adds	r1, r0, #1
 800c9c2:	d1c7      	bne.n	800c954 <__sflush_r+0x34>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0c4      	beq.n	800c954 <__sflush_r+0x34>
 800c9ca:	2b1d      	cmp	r3, #29
 800c9cc:	d001      	beq.n	800c9d2 <__sflush_r+0xb2>
 800c9ce:	2b16      	cmp	r3, #22
 800c9d0:	d101      	bne.n	800c9d6 <__sflush_r+0xb6>
 800c9d2:	602f      	str	r7, [r5, #0]
 800c9d4:	e7b1      	b.n	800c93a <__sflush_r+0x1a>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	e7ad      	b.n	800c93c <__sflush_r+0x1c>
 800c9e0:	690f      	ldr	r7, [r1, #16]
 800c9e2:	2f00      	cmp	r7, #0
 800c9e4:	d0a9      	beq.n	800c93a <__sflush_r+0x1a>
 800c9e6:	0793      	lsls	r3, r2, #30
 800c9e8:	680e      	ldr	r6, [r1, #0]
 800c9ea:	bf08      	it	eq
 800c9ec:	694b      	ldreq	r3, [r1, #20]
 800c9ee:	600f      	str	r7, [r1, #0]
 800c9f0:	bf18      	it	ne
 800c9f2:	2300      	movne	r3, #0
 800c9f4:	eba6 0807 	sub.w	r8, r6, r7
 800c9f8:	608b      	str	r3, [r1, #8]
 800c9fa:	f1b8 0f00 	cmp.w	r8, #0
 800c9fe:	dd9c      	ble.n	800c93a <__sflush_r+0x1a>
 800ca00:	6a21      	ldr	r1, [r4, #32]
 800ca02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca04:	4643      	mov	r3, r8
 800ca06:	463a      	mov	r2, r7
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b0      	blx	r6
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	dc06      	bgt.n	800ca1e <__sflush_r+0xfe>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1c:	e78e      	b.n	800c93c <__sflush_r+0x1c>
 800ca1e:	4407      	add	r7, r0
 800ca20:	eba8 0800 	sub.w	r8, r8, r0
 800ca24:	e7e9      	b.n	800c9fa <__sflush_r+0xda>
 800ca26:	bf00      	nop
 800ca28:	20400001 	.word	0x20400001

0800ca2c <_fflush_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	690b      	ldr	r3, [r1, #16]
 800ca30:	4605      	mov	r5, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	b913      	cbnz	r3, 800ca3c <_fflush_r+0x10>
 800ca36:	2500      	movs	r5, #0
 800ca38:	4628      	mov	r0, r5
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	b118      	cbz	r0, 800ca46 <_fflush_r+0x1a>
 800ca3e:	6983      	ldr	r3, [r0, #24]
 800ca40:	b90b      	cbnz	r3, 800ca46 <_fflush_r+0x1a>
 800ca42:	f000 f887 	bl	800cb54 <__sinit>
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <_fflush_r+0x6c>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d11b      	bne.n	800ca84 <_fflush_r+0x58>
 800ca4c:	686c      	ldr	r4, [r5, #4]
 800ca4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0ef      	beq.n	800ca36 <_fflush_r+0xa>
 800ca56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca58:	07d0      	lsls	r0, r2, #31
 800ca5a:	d404      	bmi.n	800ca66 <_fflush_r+0x3a>
 800ca5c:	0599      	lsls	r1, r3, #22
 800ca5e:	d402      	bmi.n	800ca66 <_fflush_r+0x3a>
 800ca60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca62:	f000 f915 	bl	800cc90 <__retarget_lock_acquire_recursive>
 800ca66:	4628      	mov	r0, r5
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f7ff ff59 	bl	800c920 <__sflush_r>
 800ca6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca70:	07da      	lsls	r2, r3, #31
 800ca72:	4605      	mov	r5, r0
 800ca74:	d4e0      	bmi.n	800ca38 <_fflush_r+0xc>
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	059b      	lsls	r3, r3, #22
 800ca7a:	d4dd      	bmi.n	800ca38 <_fflush_r+0xc>
 800ca7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7e:	f000 f908 	bl	800cc92 <__retarget_lock_release_recursive>
 800ca82:	e7d9      	b.n	800ca38 <_fflush_r+0xc>
 800ca84:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <_fflush_r+0x70>)
 800ca86:	429c      	cmp	r4, r3
 800ca88:	d101      	bne.n	800ca8e <_fflush_r+0x62>
 800ca8a:	68ac      	ldr	r4, [r5, #8]
 800ca8c:	e7df      	b.n	800ca4e <_fflush_r+0x22>
 800ca8e:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <_fflush_r+0x74>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	bf08      	it	eq
 800ca94:	68ec      	ldreq	r4, [r5, #12]
 800ca96:	e7da      	b.n	800ca4e <_fflush_r+0x22>
 800ca98:	0800d564 	.word	0x0800d564
 800ca9c:	0800d584 	.word	0x0800d584
 800caa0:	0800d544 	.word	0x0800d544

0800caa4 <std>:
 800caa4:	2300      	movs	r3, #0
 800caa6:	b510      	push	{r4, lr}
 800caa8:	4604      	mov	r4, r0
 800caaa:	e9c0 3300 	strd	r3, r3, [r0]
 800caae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cab2:	6083      	str	r3, [r0, #8]
 800cab4:	8181      	strh	r1, [r0, #12]
 800cab6:	6643      	str	r3, [r0, #100]	; 0x64
 800cab8:	81c2      	strh	r2, [r0, #14]
 800caba:	6183      	str	r3, [r0, #24]
 800cabc:	4619      	mov	r1, r3
 800cabe:	2208      	movs	r2, #8
 800cac0:	305c      	adds	r0, #92	; 0x5c
 800cac2:	f7fb fdad 	bl	8008620 <memset>
 800cac6:	4b05      	ldr	r3, [pc, #20]	; (800cadc <std+0x38>)
 800cac8:	6263      	str	r3, [r4, #36]	; 0x24
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x3c>)
 800cacc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x40>)
 800cad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <std+0x44>)
 800cad4:	6224      	str	r4, [r4, #32]
 800cad6:	6323      	str	r3, [r4, #48]	; 0x30
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	bf00      	nop
 800cadc:	0800cdf9 	.word	0x0800cdf9
 800cae0:	0800ce1b 	.word	0x0800ce1b
 800cae4:	0800ce53 	.word	0x0800ce53
 800cae8:	0800ce77 	.word	0x0800ce77

0800caec <_cleanup_r>:
 800caec:	4901      	ldr	r1, [pc, #4]	; (800caf4 <_cleanup_r+0x8>)
 800caee:	f000 b8af 	b.w	800cc50 <_fwalk_reent>
 800caf2:	bf00      	nop
 800caf4:	0800ca2d 	.word	0x0800ca2d

0800caf8 <__sfmoreglue>:
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	2268      	movs	r2, #104	; 0x68
 800cafc:	1e4d      	subs	r5, r1, #1
 800cafe:	4355      	muls	r5, r2
 800cb00:	460e      	mov	r6, r1
 800cb02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb06:	f7ff fa59 	bl	800bfbc <_malloc_r>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	b140      	cbz	r0, 800cb20 <__sfmoreglue+0x28>
 800cb0e:	2100      	movs	r1, #0
 800cb10:	e9c0 1600 	strd	r1, r6, [r0]
 800cb14:	300c      	adds	r0, #12
 800cb16:	60a0      	str	r0, [r4, #8]
 800cb18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb1c:	f7fb fd80 	bl	8008620 <memset>
 800cb20:	4620      	mov	r0, r4
 800cb22:	bd70      	pop	{r4, r5, r6, pc}

0800cb24 <__sfp_lock_acquire>:
 800cb24:	4801      	ldr	r0, [pc, #4]	; (800cb2c <__sfp_lock_acquire+0x8>)
 800cb26:	f000 b8b3 	b.w	800cc90 <__retarget_lock_acquire_recursive>
 800cb2a:	bf00      	nop
 800cb2c:	2000067d 	.word	0x2000067d

0800cb30 <__sfp_lock_release>:
 800cb30:	4801      	ldr	r0, [pc, #4]	; (800cb38 <__sfp_lock_release+0x8>)
 800cb32:	f000 b8ae 	b.w	800cc92 <__retarget_lock_release_recursive>
 800cb36:	bf00      	nop
 800cb38:	2000067d 	.word	0x2000067d

0800cb3c <__sinit_lock_acquire>:
 800cb3c:	4801      	ldr	r0, [pc, #4]	; (800cb44 <__sinit_lock_acquire+0x8>)
 800cb3e:	f000 b8a7 	b.w	800cc90 <__retarget_lock_acquire_recursive>
 800cb42:	bf00      	nop
 800cb44:	2000067e 	.word	0x2000067e

0800cb48 <__sinit_lock_release>:
 800cb48:	4801      	ldr	r0, [pc, #4]	; (800cb50 <__sinit_lock_release+0x8>)
 800cb4a:	f000 b8a2 	b.w	800cc92 <__retarget_lock_release_recursive>
 800cb4e:	bf00      	nop
 800cb50:	2000067e 	.word	0x2000067e

0800cb54 <__sinit>:
 800cb54:	b510      	push	{r4, lr}
 800cb56:	4604      	mov	r4, r0
 800cb58:	f7ff fff0 	bl	800cb3c <__sinit_lock_acquire>
 800cb5c:	69a3      	ldr	r3, [r4, #24]
 800cb5e:	b11b      	cbz	r3, 800cb68 <__sinit+0x14>
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	f7ff bff0 	b.w	800cb48 <__sinit_lock_release>
 800cb68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb6c:	6523      	str	r3, [r4, #80]	; 0x50
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <__sinit+0x68>)
 800cb70:	4a13      	ldr	r2, [pc, #76]	; (800cbc0 <__sinit+0x6c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb76:	42a3      	cmp	r3, r4
 800cb78:	bf04      	itt	eq
 800cb7a:	2301      	moveq	r3, #1
 800cb7c:	61a3      	streq	r3, [r4, #24]
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 f820 	bl	800cbc4 <__sfp>
 800cb84:	6060      	str	r0, [r4, #4]
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 f81c 	bl	800cbc4 <__sfp>
 800cb8c:	60a0      	str	r0, [r4, #8]
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 f818 	bl	800cbc4 <__sfp>
 800cb94:	2200      	movs	r2, #0
 800cb96:	60e0      	str	r0, [r4, #12]
 800cb98:	2104      	movs	r1, #4
 800cb9a:	6860      	ldr	r0, [r4, #4]
 800cb9c:	f7ff ff82 	bl	800caa4 <std>
 800cba0:	68a0      	ldr	r0, [r4, #8]
 800cba2:	2201      	movs	r2, #1
 800cba4:	2109      	movs	r1, #9
 800cba6:	f7ff ff7d 	bl	800caa4 <std>
 800cbaa:	68e0      	ldr	r0, [r4, #12]
 800cbac:	2202      	movs	r2, #2
 800cbae:	2112      	movs	r1, #18
 800cbb0:	f7ff ff78 	bl	800caa4 <std>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	61a3      	str	r3, [r4, #24]
 800cbb8:	e7d2      	b.n	800cb60 <__sinit+0xc>
 800cbba:	bf00      	nop
 800cbbc:	0800d0fc 	.word	0x0800d0fc
 800cbc0:	0800caed 	.word	0x0800caed

0800cbc4 <__sfp>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	f7ff ffac 	bl	800cb24 <__sfp_lock_acquire>
 800cbcc:	4b1e      	ldr	r3, [pc, #120]	; (800cc48 <__sfp+0x84>)
 800cbce:	681e      	ldr	r6, [r3, #0]
 800cbd0:	69b3      	ldr	r3, [r6, #24]
 800cbd2:	b913      	cbnz	r3, 800cbda <__sfp+0x16>
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7ff ffbd 	bl	800cb54 <__sinit>
 800cbda:	3648      	adds	r6, #72	; 0x48
 800cbdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	d503      	bpl.n	800cbec <__sfp+0x28>
 800cbe4:	6833      	ldr	r3, [r6, #0]
 800cbe6:	b30b      	cbz	r3, 800cc2c <__sfp+0x68>
 800cbe8:	6836      	ldr	r6, [r6, #0]
 800cbea:	e7f7      	b.n	800cbdc <__sfp+0x18>
 800cbec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbf0:	b9d5      	cbnz	r5, 800cc28 <__sfp+0x64>
 800cbf2:	4b16      	ldr	r3, [pc, #88]	; (800cc4c <__sfp+0x88>)
 800cbf4:	60e3      	str	r3, [r4, #12]
 800cbf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbfa:	6665      	str	r5, [r4, #100]	; 0x64
 800cbfc:	f000 f847 	bl	800cc8e <__retarget_lock_init_recursive>
 800cc00:	f7ff ff96 	bl	800cb30 <__sfp_lock_release>
 800cc04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc0c:	6025      	str	r5, [r4, #0]
 800cc0e:	61a5      	str	r5, [r4, #24]
 800cc10:	2208      	movs	r2, #8
 800cc12:	4629      	mov	r1, r5
 800cc14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc18:	f7fb fd02 	bl	8008620 <memset>
 800cc1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc24:	4620      	mov	r0, r4
 800cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc28:	3468      	adds	r4, #104	; 0x68
 800cc2a:	e7d9      	b.n	800cbe0 <__sfp+0x1c>
 800cc2c:	2104      	movs	r1, #4
 800cc2e:	4638      	mov	r0, r7
 800cc30:	f7ff ff62 	bl	800caf8 <__sfmoreglue>
 800cc34:	4604      	mov	r4, r0
 800cc36:	6030      	str	r0, [r6, #0]
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d1d5      	bne.n	800cbe8 <__sfp+0x24>
 800cc3c:	f7ff ff78 	bl	800cb30 <__sfp_lock_release>
 800cc40:	230c      	movs	r3, #12
 800cc42:	603b      	str	r3, [r7, #0]
 800cc44:	e7ee      	b.n	800cc24 <__sfp+0x60>
 800cc46:	bf00      	nop
 800cc48:	0800d0fc 	.word	0x0800d0fc
 800cc4c:	ffff0001 	.word	0xffff0001

0800cc50 <_fwalk_reent>:
 800cc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc54:	4606      	mov	r6, r0
 800cc56:	4688      	mov	r8, r1
 800cc58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc5c:	2700      	movs	r7, #0
 800cc5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc62:	f1b9 0901 	subs.w	r9, r9, #1
 800cc66:	d505      	bpl.n	800cc74 <_fwalk_reent+0x24>
 800cc68:	6824      	ldr	r4, [r4, #0]
 800cc6a:	2c00      	cmp	r4, #0
 800cc6c:	d1f7      	bne.n	800cc5e <_fwalk_reent+0xe>
 800cc6e:	4638      	mov	r0, r7
 800cc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc74:	89ab      	ldrh	r3, [r5, #12]
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d907      	bls.n	800cc8a <_fwalk_reent+0x3a>
 800cc7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	d003      	beq.n	800cc8a <_fwalk_reent+0x3a>
 800cc82:	4629      	mov	r1, r5
 800cc84:	4630      	mov	r0, r6
 800cc86:	47c0      	blx	r8
 800cc88:	4307      	orrs	r7, r0
 800cc8a:	3568      	adds	r5, #104	; 0x68
 800cc8c:	e7e9      	b.n	800cc62 <_fwalk_reent+0x12>

0800cc8e <__retarget_lock_init_recursive>:
 800cc8e:	4770      	bx	lr

0800cc90 <__retarget_lock_acquire_recursive>:
 800cc90:	4770      	bx	lr

0800cc92 <__retarget_lock_release_recursive>:
 800cc92:	4770      	bx	lr

0800cc94 <__swhatbuf_r>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	460e      	mov	r6, r1
 800cc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	b096      	sub	sp, #88	; 0x58
 800cca0:	4614      	mov	r4, r2
 800cca2:	461d      	mov	r5, r3
 800cca4:	da08      	bge.n	800ccb8 <__swhatbuf_r+0x24>
 800cca6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	602a      	str	r2, [r5, #0]
 800ccae:	061a      	lsls	r2, r3, #24
 800ccb0:	d410      	bmi.n	800ccd4 <__swhatbuf_r+0x40>
 800ccb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb6:	e00e      	b.n	800ccd6 <__swhatbuf_r+0x42>
 800ccb8:	466a      	mov	r2, sp
 800ccba:	f000 f903 	bl	800cec4 <_fstat_r>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	dbf1      	blt.n	800cca6 <__swhatbuf_r+0x12>
 800ccc2:	9a01      	ldr	r2, [sp, #4]
 800ccc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cccc:	425a      	negs	r2, r3
 800ccce:	415a      	adcs	r2, r3
 800ccd0:	602a      	str	r2, [r5, #0]
 800ccd2:	e7ee      	b.n	800ccb2 <__swhatbuf_r+0x1e>
 800ccd4:	2340      	movs	r3, #64	; 0x40
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	b016      	add	sp, #88	; 0x58
 800ccdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cce0 <__smakebuf_r>:
 800cce0:	898b      	ldrh	r3, [r1, #12]
 800cce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cce4:	079d      	lsls	r5, r3, #30
 800cce6:	4606      	mov	r6, r0
 800cce8:	460c      	mov	r4, r1
 800ccea:	d507      	bpl.n	800ccfc <__smakebuf_r+0x1c>
 800ccec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	6123      	str	r3, [r4, #16]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	b002      	add	sp, #8
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	ab01      	add	r3, sp, #4
 800ccfe:	466a      	mov	r2, sp
 800cd00:	f7ff ffc8 	bl	800cc94 <__swhatbuf_r>
 800cd04:	9900      	ldr	r1, [sp, #0]
 800cd06:	4605      	mov	r5, r0
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f7ff f957 	bl	800bfbc <_malloc_r>
 800cd0e:	b948      	cbnz	r0, 800cd24 <__smakebuf_r+0x44>
 800cd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd14:	059a      	lsls	r2, r3, #22
 800cd16:	d4ef      	bmi.n	800ccf8 <__smakebuf_r+0x18>
 800cd18:	f023 0303 	bic.w	r3, r3, #3
 800cd1c:	f043 0302 	orr.w	r3, r3, #2
 800cd20:	81a3      	strh	r3, [r4, #12]
 800cd22:	e7e3      	b.n	800ccec <__smakebuf_r+0xc>
 800cd24:	4b0d      	ldr	r3, [pc, #52]	; (800cd5c <__smakebuf_r+0x7c>)
 800cd26:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	6020      	str	r0, [r4, #0]
 800cd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	9b00      	ldr	r3, [sp, #0]
 800cd34:	6163      	str	r3, [r4, #20]
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	6120      	str	r0, [r4, #16]
 800cd3a:	b15b      	cbz	r3, 800cd54 <__smakebuf_r+0x74>
 800cd3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd40:	4630      	mov	r0, r6
 800cd42:	f000 f8d1 	bl	800cee8 <_isatty_r>
 800cd46:	b128      	cbz	r0, 800cd54 <__smakebuf_r+0x74>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	f043 0301 	orr.w	r3, r3, #1
 800cd52:	81a3      	strh	r3, [r4, #12]
 800cd54:	89a0      	ldrh	r0, [r4, #12]
 800cd56:	4305      	orrs	r5, r0
 800cd58:	81a5      	strh	r5, [r4, #12]
 800cd5a:	e7cd      	b.n	800ccf8 <__smakebuf_r+0x18>
 800cd5c:	0800caed 	.word	0x0800caed

0800cd60 <_malloc_usable_size_r>:
 800cd60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd64:	1f18      	subs	r0, r3, #4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	bfbc      	itt	lt
 800cd6a:	580b      	ldrlt	r3, [r1, r0]
 800cd6c:	18c0      	addlt	r0, r0, r3
 800cd6e:	4770      	bx	lr

0800cd70 <_raise_r>:
 800cd70:	291f      	cmp	r1, #31
 800cd72:	b538      	push	{r3, r4, r5, lr}
 800cd74:	4604      	mov	r4, r0
 800cd76:	460d      	mov	r5, r1
 800cd78:	d904      	bls.n	800cd84 <_raise_r+0x14>
 800cd7a:	2316      	movs	r3, #22
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd86:	b112      	cbz	r2, 800cd8e <_raise_r+0x1e>
 800cd88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd8c:	b94b      	cbnz	r3, 800cda2 <_raise_r+0x32>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 f830 	bl	800cdf4 <_getpid_r>
 800cd94:	462a      	mov	r2, r5
 800cd96:	4601      	mov	r1, r0
 800cd98:	4620      	mov	r0, r4
 800cd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd9e:	f000 b817 	b.w	800cdd0 <_kill_r>
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d00a      	beq.n	800cdbc <_raise_r+0x4c>
 800cda6:	1c59      	adds	r1, r3, #1
 800cda8:	d103      	bne.n	800cdb2 <_raise_r+0x42>
 800cdaa:	2316      	movs	r3, #22
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	2001      	movs	r0, #1
 800cdb0:	e7e7      	b.n	800cd82 <_raise_r+0x12>
 800cdb2:	2400      	movs	r4, #0
 800cdb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdb8:	4628      	mov	r0, r5
 800cdba:	4798      	blx	r3
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	e7e0      	b.n	800cd82 <_raise_r+0x12>

0800cdc0 <raise>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	; (800cdcc <raise+0xc>)
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f7ff bfd3 	b.w	800cd70 <_raise_r>
 800cdca:	bf00      	nop
 800cdcc:	20000018 	.word	0x20000018

0800cdd0 <_kill_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d07      	ldr	r5, [pc, #28]	; (800cdf0 <_kill_r+0x20>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	4611      	mov	r1, r2
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	f7f6 fe2d 	bl	8003a3c <_kill>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	d102      	bne.n	800cdec <_kill_r+0x1c>
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	b103      	cbz	r3, 800cdec <_kill_r+0x1c>
 800cdea:	6023      	str	r3, [r4, #0]
 800cdec:	bd38      	pop	{r3, r4, r5, pc}
 800cdee:	bf00      	nop
 800cdf0:	20000678 	.word	0x20000678

0800cdf4 <_getpid_r>:
 800cdf4:	f7f6 be1a 	b.w	8003a2c <_getpid>

0800cdf8 <__sread>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce00:	f000 f894 	bl	800cf2c <_read_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	bfab      	itete	ge
 800ce08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce0c:	181b      	addge	r3, r3, r0
 800ce0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce12:	bfac      	ite	ge
 800ce14:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce16:	81a3      	strhlt	r3, [r4, #12]
 800ce18:	bd10      	pop	{r4, pc}

0800ce1a <__swrite>:
 800ce1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1e:	461f      	mov	r7, r3
 800ce20:	898b      	ldrh	r3, [r1, #12]
 800ce22:	05db      	lsls	r3, r3, #23
 800ce24:	4605      	mov	r5, r0
 800ce26:	460c      	mov	r4, r1
 800ce28:	4616      	mov	r6, r2
 800ce2a:	d505      	bpl.n	800ce38 <__swrite+0x1e>
 800ce2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce30:	2302      	movs	r3, #2
 800ce32:	2200      	movs	r2, #0
 800ce34:	f000 f868 	bl	800cf08 <_lseek_r>
 800ce38:	89a3      	ldrh	r3, [r4, #12]
 800ce3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	4632      	mov	r2, r6
 800ce46:	463b      	mov	r3, r7
 800ce48:	4628      	mov	r0, r5
 800ce4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4e:	f000 b817 	b.w	800ce80 <_write_r>

0800ce52 <__sseek>:
 800ce52:	b510      	push	{r4, lr}
 800ce54:	460c      	mov	r4, r1
 800ce56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5a:	f000 f855 	bl	800cf08 <_lseek_r>
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	bf15      	itete	ne
 800ce64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce6e:	81a3      	strheq	r3, [r4, #12]
 800ce70:	bf18      	it	ne
 800ce72:	81a3      	strhne	r3, [r4, #12]
 800ce74:	bd10      	pop	{r4, pc}

0800ce76 <__sclose>:
 800ce76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7a:	f000 b813 	b.w	800cea4 <_close_r>
	...

0800ce80 <_write_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	; (800cea0 <_write_r+0x20>)
 800ce84:	4604      	mov	r4, r0
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	602a      	str	r2, [r5, #0]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	f7f5 fb74 	bl	800257c <_write>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_write_r+0x1e>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_write_r+0x1e>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	20000678 	.word	0x20000678

0800cea4 <_close_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d06      	ldr	r5, [pc, #24]	; (800cec0 <_close_r+0x1c>)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4608      	mov	r0, r1
 800ceae:	602b      	str	r3, [r5, #0]
 800ceb0:	f7f6 fdfb 	bl	8003aaa <_close>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_close_r+0x1a>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_close_r+0x1a>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	20000678 	.word	0x20000678

0800cec4 <_fstat_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_fstat_r+0x20>)
 800cec8:	2300      	movs	r3, #0
 800ceca:	4604      	mov	r4, r0
 800cecc:	4608      	mov	r0, r1
 800cece:	4611      	mov	r1, r2
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	f7f6 fdf6 	bl	8003ac2 <_fstat>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	d102      	bne.n	800cee0 <_fstat_r+0x1c>
 800ceda:	682b      	ldr	r3, [r5, #0]
 800cedc:	b103      	cbz	r3, 800cee0 <_fstat_r+0x1c>
 800cede:	6023      	str	r3, [r4, #0]
 800cee0:	bd38      	pop	{r3, r4, r5, pc}
 800cee2:	bf00      	nop
 800cee4:	20000678 	.word	0x20000678

0800cee8 <_isatty_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d06      	ldr	r5, [pc, #24]	; (800cf04 <_isatty_r+0x1c>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	602b      	str	r3, [r5, #0]
 800cef4:	f7f6 fdf5 	bl	8003ae2 <_isatty>
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	d102      	bne.n	800cf02 <_isatty_r+0x1a>
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	b103      	cbz	r3, 800cf02 <_isatty_r+0x1a>
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	bd38      	pop	{r3, r4, r5, pc}
 800cf04:	20000678 	.word	0x20000678

0800cf08 <_lseek_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d07      	ldr	r5, [pc, #28]	; (800cf28 <_lseek_r+0x20>)
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4611      	mov	r1, r2
 800cf12:	2200      	movs	r2, #0
 800cf14:	602a      	str	r2, [r5, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f7f6 fdee 	bl	8003af8 <_lseek>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_lseek_r+0x1e>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_lseek_r+0x1e>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	20000678 	.word	0x20000678

0800cf2c <_read_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	; (800cf4c <_read_r+0x20>)
 800cf30:	4604      	mov	r4, r0
 800cf32:	4608      	mov	r0, r1
 800cf34:	4611      	mov	r1, r2
 800cf36:	2200      	movs	r2, #0
 800cf38:	602a      	str	r2, [r5, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f7f6 fd98 	bl	8003a70 <_read>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_read_r+0x1e>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_read_r+0x1e>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	20000678 	.word	0x20000678

0800cf50 <_init>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	bf00      	nop
 800cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf56:	bc08      	pop	{r3}
 800cf58:	469e      	mov	lr, r3
 800cf5a:	4770      	bx	lr

0800cf5c <_fini>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	bf00      	nop
 800cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf62:	bc08      	pop	{r3}
 800cf64:	469e      	mov	lr, r3
 800cf66:	4770      	bx	lr
