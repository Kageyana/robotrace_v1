
robotrace_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d46c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800d640  0800d640  0001d640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd18  0800dd18  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd20  0800dd20  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd20  0800dd20  0001dd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd24  0800dd24  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800dd28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000208  0800df2c  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800df2c  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c5b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bae  00000000  00000000  00039e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b83  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205c8  00000000  00000000  00068fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e45f6  00000000  00000000  0008956b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016db61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d0  00000000  00000000  0016dbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d624 	.word	0x0800d624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800d624 	.word	0x0800d624

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <lcdPut>:
// 処理概要     データ送信
// 引数         data
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPut( uint8_t data )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t word[] = { RSBIT1, data };
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	733b      	strb	r3, [r7, #12]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	737b      	strb	r3, [r7, #13]
	I2C_LCD_SEND
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	217c      	movs	r1, #124	; 0x7c
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <lcdPut+0x2c>)
 8001058:	f004 fe94 	bl	8005d84 <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200003c4 	.word	0x200003c4

08001068 <lcdCMD>:
// 処理概要     コマンド送信
// 引数         cmd
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdCMD( uint8_t cmd )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t command[] = { RSBIT0, cmd };
 8001072:	2300      	movs	r3, #0
 8001074:	733b      	strb	r3, [r7, #12]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	737b      	strb	r3, [r7, #13]
 	I2C_LCD_READ
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2302      	movs	r3, #2
 8001084:	217c      	movs	r1, #124	; 0x7c
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <lcdCMD+0x2c>)
 8001088:	f004 fe7c 	bl	8005d84 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200003c4 	.word	0x200003c4

08001098 <intiLcd>:
// 処理概要     LCDの初期化
// 引数         なし
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
 void intiLcd(void)
 {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(4);
 800109c:	2004      	movs	r0, #4
 800109e:	f003 faa9 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x38);	// function set			: データ線は8本・表示は２行・フォントは5x8ドット
 80010a2:	2038      	movs	r0, #56	; 0x38
 80010a4:	f7ff ffe0 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f003 faa3 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x39);	// function set           	: 拡張コマンドの設定を有効にする
 80010ae:	2039      	movs	r0, #57	; 0x39
 80010b0:	f7ff ffda 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f003 fa9d 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x14);	// Internal OSC frequency 	: バイアスの選択と内部OSC周波数の調整
 80010ba:	2014      	movs	r0, #20
 80010bc:	f7ff ffd4 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f003 fa97 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x70);	// Contrast set          	: コントラスト調整データ(下位4ビット)
 80010c6:	2070      	movs	r0, #112	; 0x70
 80010c8:	f7ff ffce 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f003 fa91 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x56);	// Power/ICON/Contrast control	: 昇圧回路有効、コントラスト調整データ(上位2ビット)
 80010d2:	2056      	movs	r0, #86	; 0x56
 80010d4:	f7ff ffc8 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fa8b 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x6c);	// Follower control     	: フォロア回路をON、増幅率の調整を行う
 80010de:	206c      	movs	r0, #108	; 0x6c
 80010e0:	f7ff ffc2 	bl	8001068 <lcdCMD>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f003 fa85 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x38);	// function set         	: 拡張コマンドを設定を無効にする
 80010ea:	2038      	movs	r0, #56	; 0x38
 80010ec:	f7ff ffbc 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f003 fa7f 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x0c);	// display ON/OFF control      	: 画面表示はON・カーソル表示はOFF・カーソル点滅はOFF
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ffb6 	bl	8001068 <lcdCMD>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f003 fa79 	bl	80045f4 <HAL_Delay>
	lcdCMD(0x01);	// Clear Display 		: 画面全体に20Hのｽﾍﾟｰｽで表示、ｶｰｿﾙはcol=0,row=0に移動
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ffb0 	bl	8001068 <lcdCMD>
	HAL_Delay(2);
 8001108:	2002      	movs	r0, #2
 800110a:	f003 fa73 	bl	80045f4 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <lcdLocate>:
// 処理概要     液晶カーソル移動
// 引数         x , y
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
static void lcdLocate( uint16_t x, uint16_t y )
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4613      	mov	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
    volatile uint8_t work = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	73fb      	strb	r3, [r7, #15]

    // xの計算
    work += x;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]

    // yの計算
    if( y == 1 ) {
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d105      	bne.n	8001146 <lcdLocate+0x34>
        work += 0x40;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3340      	adds	r3, #64	; 0x40
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e010      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 2 ) {
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d105      	bne.n	8001158 <lcdLocate+0x46>
        work += 0x14;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3314      	adds	r3, #20
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e007      	b.n	8001168 <lcdLocate+0x56>
    } else if( y == 3 ) {
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d104      	bne.n	8001168 <lcdLocate+0x56>
        work += 0x54;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
    }

    // カーソル移動
    lcdCMD(work);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <lcdCMD>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lcdShowProcess>:
// 引数         なし
// 戻り値       なし
// メモ         この関数は割り込みで1msごとに実行してください
//////////////////////////////////////////////////////////////////////////
void lcdShowProcess( void )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    switch( lcdMode2 ) {
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <lcdShowProcess+0xd8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d85b      	bhi.n	8001244 <lcdShowProcess+0xc8>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <lcdShowProcess+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011bd 	.word	0x080011bd
 800119c:	080011d3 	.word	0x080011d3
 80011a0:	0800120f 	.word	0x0800120f
    case 1: // データ更新されたかチェック
    	if( lcdRefreshFlag ) {
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <lcdShowProcess+0xdc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d04e      	beq.n	800124c <lcdShowProcess+0xd0>
    		lcdRefreshFlag = 0;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <lcdShowProcess+0xdc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    		lcdMode2 = 2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <lcdShowProcess+0xd8>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	801a      	strh	r2, [r3, #0]
	}
        break;
 80011ba:	e047      	b.n	800124c <lcdShowProcess+0xd0>

    case 2: // 位置初期化
	lcdNowLocate = 0;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <lcdShowProcess+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
    	lcdLocate( 0, 0 );
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ffa4 	bl	8001112 <lcdLocate>
	lcdMode2 = 3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <lcdShowProcess+0xd8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	801a      	strh	r2, [r3, #0]
        break;
 80011d0:	e03d      	b.n	800124e <lcdShowProcess+0xd2>

    case 3: // 改行位置の確認
	if( lcdNowLocate % LCD_MAX_X == 0 ) {
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <lcdShowProcess+0xe0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <lcdShowProcess+0xe4>)
 80011da:	fba3 1302 	umull	r1, r3, r3, r2
 80011de:	0919      	lsrs	r1, r3, #4
 80011e0:	460b      	mov	r3, r1
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <lcdShowProcess+0x8a>
    		lcdLocate( 0, lcdNowLocate / LCD_MAX_X );
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <lcdShowProcess+0xe0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <lcdShowProcess+0xe4>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff86 	bl	8001112 <lcdLocate>
	}
	lcdMode2 = 4;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <lcdShowProcess+0xd8>)
 8001208:	2204      	movs	r2, #4
 800120a:	801a      	strh	r2, [r3, #0]
        break;
 800120c:	e01f      	b.n	800124e <lcdShowProcess+0xd2>

    case 4: // データ表示処理
	lcdPut(buffLcdData[ lcdNowLocate++ ]);
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <lcdShowProcess+0xe0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b291      	uxth	r1, r2
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <lcdShowProcess+0xe0>)
 800121a:	8011      	strh	r1, [r2, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <lcdShowProcess+0xe8>)
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff07 	bl	8001038 <lcdPut>
	if( lcdNowLocate >= LCD_MAX_X * LCD_MAX_Y ) {
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <lcdShowProcess+0xe0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	2b21      	cmp	r3, #33	; 0x21
 8001232:	d903      	bls.n	800123c <lcdShowProcess+0xc0>
		lcdMode2 = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <lcdShowProcess+0xd8>)
 8001236:	2201      	movs	r2, #1
 8001238:	801a      	strh	r2, [r3, #0]
	} else {
		lcdMode2 = 3;
	}
	break;
 800123a:	e008      	b.n	800124e <lcdShowProcess+0xd2>
		lcdMode2 = 3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <lcdShowProcess+0xd8>)
 800123e:	2203      	movs	r2, #3
 8001240:	801a      	strh	r2, [r3, #0]
	break;
 8001242:	e004      	b.n	800124e <lcdShowProcess+0xd2>

    default:
	lcdMode2 = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <lcdShowProcess+0xd8>)
 8001246:	2201      	movs	r2, #1
 8001248:	801a      	strh	r2, [r3, #0]
   	break;
 800124a:	e000      	b.n	800124e <lcdShowProcess+0xd2>
        break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	20000242 	.word	0x20000242
 800125c:	20000240 	.word	0x20000240
 8001260:	f0f0f0f1 	.word	0xf0f0f0f1
 8001264:	20000224 	.word	0x20000224

08001268 <lcdPosition>:
// 処理概要     液晶の表示位置指定
// 引数         横位置 , 縦位置
// 戻り値       なし
//////////////////////////////////////////////////////////////////////////
void lcdPosition(uint8_t x ,uint8_t y)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
    if( x >= LCD_MAX_X ) return;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d80f      	bhi.n	800129e <lcdPosition+0x36>
    if( y >= LCD_MAX_Y ) return;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80e      	bhi.n	80012a2 <lcdPosition+0x3a>

    lcdBuffPosition = x + y * LCD_MAX_X;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	440b      	add	r3, r1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <lcdPosition+0x48>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <lcdPosition+0x3c>
    if( x >= LCD_MAX_X ) return;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <lcdPosition+0x3c>
    if( y >= LCD_MAX_Y ) return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000023e 	.word	0x2000023e

080012b4 <lcdRowPrintf>:
// 処理概要     液晶へ表示 表示位置は過去に表示した位置の次から
// 引数         printfと同じ
// 戻り値       正常時：出力した文字列 異常時：負の数
//////////////////////////////////////////////////////////////////////////
int lcdRowPrintf(uint8_t step, char *format, ...)
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
    volatile va_list argptr;
    volatile uint8_t    *p;
    volatile uint16_t     ret = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	81fb      	strh	r3, [r7, #14]

	if(step == UPROW){
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <lcdRowPrintf+0x20>
		lcdPosition( 0, 0 );
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffcb 	bl	8001268 <lcdPosition>
 80012d2:	e006      	b.n	80012e2 <lcdRowPrintf+0x2e>
	} else if (step == LOWROW){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <lcdRowPrintf+0x2e>
		lcdPosition( 0, 1 );
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffc3 	bl	8001268 <lcdPosition>
	}

    va_start(argptr, format);
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	613b      	str	r3, [r7, #16]
    ret = vsprintf( buffLcdData2, format, argptr );
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <lcdRowPrintf+0xa0>)
 80012ee:	f009 f8c1 	bl	800a474 <vsiprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	81fb      	strh	r3, [r7, #14]
    va_end(argptr);

    if( ret > 0 ) {
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <lcdRowPrintf+0x8e>
        // vsprintfが正常なら液晶バッファへ転送
        p = buffLcdData2;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <lcdRowPrintf+0xa0>)
 8001302:	617b      	str	r3, [r7, #20]
        while( *p ) {
 8001304:	e015      	b.n	8001332 <lcdRowPrintf+0x7e>
            buffLcdData[lcdBuffPosition++] = *p++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <lcdRowPrintf+0xa4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	1c51      	adds	r1, r2, #1
 8001314:	b288      	uxth	r0, r1
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <lcdRowPrintf+0xa4>)
 8001318:	8008      	strh	r0, [r1, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <lcdRowPrintf+0xa8>)
 8001320:	5499      	strb	r1, [r3, r2]
            if( lcdBuffPosition >= LCD_MAX_X * LCD_MAX_Y ) {
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <lcdRowPrintf+0xa4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d902      	bls.n	8001332 <lcdRowPrintf+0x7e>
                lcdBuffPosition = 0;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <lcdRowPrintf+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
        while( *p ) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e4      	bne.n	8001306 <lcdRowPrintf+0x52>
            }
        }
        lcdRefreshFlag = 1;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <lcdRowPrintf+0xac>)
 800133e:	2201      	movs	r2, #1
 8001340:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b003      	add	sp, #12
 8001352:	4770      	bx	lr
 8001354:	2000022c 	.word	0x2000022c
 8001358:	2000023e 	.word	0x2000023e
 800135c:	20000224 	.word	0x20000224
 8001360:	20000242 	.word	0x20000242

08001364 <systemInit>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemInit (void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	// Encoder count
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <systemInit+0xf0>)
 800136e:	f006 f8c9 	bl	8007504 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001372:	213c      	movs	r1, #60	; 0x3c
 8001374:	4838      	ldr	r0, [pc, #224]	; (8001458 <systemInit+0xf4>)
 8001376:	f006 f8c5 	bl	8007504 <HAL_TIM_Encoder_Start>

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t *) analogVal, 14) != HAL_OK)	Error_Handler();
 800137a:	220e      	movs	r2, #14
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <systemInit+0xf8>)
 800137e:	4838      	ldr	r0, [pc, #224]	; (8001460 <systemInit+0xfc>)
 8001380:	f003 f9a0 	bl	80046c4 <HAL_ADC_Start_DMA>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <systemInit+0x2a>
 800138a:	f001 fa9d 	bl	80028c8 <Error_Handler>
	// PWM
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 800138e:	2100      	movs	r1, #0
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <systemInit+0x100>)
 8001392:	f005 ff49 	bl	8007228 <HAL_TIM_PWM_Start>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <systemInit+0x3c>
 800139c:	f001 fa94 	bl	80028c8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)			Error_Handler();
 80013a0:	2104      	movs	r1, #4
 80013a2:	4830      	ldr	r0, [pc, #192]	; (8001464 <systemInit+0x100>)
 80013a4:	f005 ff40 	bl	8007228 <HAL_TIM_PWM_Start>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <systemInit+0x4e>
 80013ae:	f001 fa8b 	bl	80028c8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)			Error_Handler();
 80013b2:	2108      	movs	r1, #8
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <systemInit+0x100>)
 80013b6:	f005 ff37 	bl	8007228 <HAL_TIM_PWM_Start>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <systemInit+0x60>
 80013c0:	f001 fa82 	bl	80028c8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)			Error_Handler();
 80013c4:	210c      	movs	r1, #12
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <systemInit+0x100>)
 80013c8:	f005 ff2e 	bl	8007228 <HAL_TIM_PWM_Start>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <systemInit+0x72>
 80013d2:	f001 fa79 	bl	80028c8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)			Error_Handler();
 80013d6:	2100      	movs	r1, #0
 80013d8:	4823      	ldr	r0, [pc, #140]	; (8001468 <systemInit+0x104>)
 80013da:	f005 ff25 	bl	8007228 <HAL_TIM_PWM_Start>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <systemInit+0x84>
 80013e4:	f001 fa70 	bl	80028c8 <Error_Handler>

	// MAX22201 sleepmode ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <systemInit+0x100>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <systemInit+0x100>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <systemInit+0x100>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 500);
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <systemInit+0x100>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
	// Line sensor OFF
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <systemInit+0x104>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f003 f8ea 	bl	80045f4 <HAL_Delay>

	intiLcd();  	// LCD initialize
 8001420:	f7ff fe3a 	bl	8001098 <intiLcd>
	//initIMU();	// IMU initialize

	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <systemInit+0x108>)
 8001426:	f005 fe3f 	bl	80070a8 <HAL_TIM_Base_Start_IT>
	// while(1) {
	//   lcdRowPrintf(UPROW, "5ax %4d",analogVal[12]);
	//   lcdRowPrintf(LOWROW, "dip %4d",analogVal[13]);
	// }

	for (int i = 0; i < NUM_SENSORS; i ++) lSensors_list[i].index = i;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e008      	b.n	8001442 <systemInit+0xde>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <systemInit+0x10c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0b      	cmp	r3, #11
 8001446:	ddf3      	ble.n	8001430 <systemInit+0xcc>

	// lcdRowPrintf(UPROW, "who am i");
	// lcdRowPrintf(LOWROW, "    %#x",initBNO055());
	// HAL_Delay(700);
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000558 	.word	0x20000558
 8001458:	200005a0 	.word	0x200005a0
 800145c:	20000248 	.word	0x20000248
 8001460:	2000031c 	.word	0x2000031c
 8001464:	200004c8 	.word	0x200004c8
 8001468:	20000510 	.word	0x20000510
 800146c:	200005e8 	.word	0x200005e8
 8001470:	200002cc 	.word	0x200002cc

08001474 <systemLoop>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void systemLoop (void) {
 8001474:	b598      	push	{r3, r4, r7, lr}
 8001476:	af00      	add	r7, sp, #0

	// if (pattern > 0 )
	switch (pattern) {
 8001478:	4ba3      	ldr	r3, [pc, #652]	; (8001708 <systemLoop+0x294>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b66      	cmp	r3, #102	; 0x66
 800147e:	f000 810e 	beq.w	800169e <systemLoop+0x22a>
 8001482:	2b66      	cmp	r3, #102	; 0x66
 8001484:	f300 8136 	bgt.w	80016f4 <systemLoop+0x280>
 8001488:	2b65      	cmp	r3, #101	; 0x65
 800148a:	f000 80e1 	beq.w	8001650 <systemLoop+0x1dc>
 800148e:	2b65      	cmp	r3, #101	; 0x65
 8001490:	f300 8130 	bgt.w	80016f4 <systemLoop+0x280>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <systemLoop+0x2a>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d021      	beq.n	80014e0 <systemLoop+0x6c>
			// 	}
			// }
			break;
    
      	default:
        	break;
 800149c:	e12a      	b.n	80016f4 <systemLoop+0x280>
			setup();
 800149e:	f001 fb49 	bl	8002b34 <setup>
			if (start) {
 80014a2:	4b9a      	ldr	r3, [pc, #616]	; (800170c <systemLoop+0x298>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8126 	beq.w	80016f8 <systemLoop+0x284>
				lcdRowPrintf(UPROW, "ready   ");
 80014ac:	4998      	ldr	r1, [pc, #608]	; (8001710 <systemLoop+0x29c>)
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff00 	bl	80012b4 <lcdRowPrintf>
				lcdRowPrintf(LOWROW, "        ");
 80014b4:	4997      	ldr	r1, [pc, #604]	; (8001714 <systemLoop+0x2a0>)
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fefc 	bl	80012b4 <lcdRowPrintf>
				HAL_Delay(2000);
 80014bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c0:	f003 f898 	bl	80045f4 <HAL_Delay>
				lcdRowPrintf(LOWROW, "      Go");
 80014c4:	4994      	ldr	r1, [pc, #592]	; (8001718 <systemLoop+0x2a4>)
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fef4 	bl	80012b4 <lcdRowPrintf>
				encTotalN = 0;
 80014cc:	4b93      	ldr	r3, [pc, #588]	; (800171c <systemLoop+0x2a8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
				cnt1 = 0;
 80014d2:	4b93      	ldr	r3, [pc, #588]	; (8001720 <systemLoop+0x2ac>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
				pattern = 1;
 80014d8:	4b8b      	ldr	r3, [pc, #556]	; (8001708 <systemLoop+0x294>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			break;
 80014de:	e10b      	b.n	80016f8 <systemLoop+0x284>
			if (!modeCurve) {
 80014e0:	4b90      	ldr	r3, [pc, #576]	; (8001724 <systemLoop+0x2b0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10f      	bne.n	8001508 <systemLoop+0x94>
				targetSpeed = paramSpeed[INDEX_STRAIGHT]*PALSE_MILLIMETER/10;
 80014e8:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <systemLoop+0x2b4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f834 	bl	8000564 <__aeabi_i2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	498a      	ldr	r1, [pc, #552]	; (800172c <systemLoop+0x2b8>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
 8001506:	e00e      	b.n	8001526 <systemLoop+0xb2>
				targetSpeed = paramSpeed[INDEX_CURVE]*PALSE_MILLIMETER/10;
 8001508:	4b87      	ldr	r3, [pc, #540]	; (8001728 <systemLoop+0x2b4>)
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f824 	bl	8000564 <__aeabi_i2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4982      	ldr	r1, [pc, #520]	; (800172c <systemLoop+0x2b8>)
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 8001526:	4b82      	ldr	r3, [pc, #520]	; (8001730 <systemLoop+0x2bc>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	461a      	mov	r2, r3
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <systemLoop+0x2c0>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f001 faba 	bl	8002ab0 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <systemLoop+0x2c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(LOWROW, "   %d", SGmarker);
 8001546:	4b7d      	ldr	r3, [pc, #500]	; (800173c <systemLoop+0x2c8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	497c      	ldr	r1, [pc, #496]	; (8001740 <systemLoop+0x2cc>)
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff feb0 	bl	80012b4 <lcdRowPrintf>
			if ((lSensor[0] + lSensor[1] + lSensor[10] + lSensor[11]) < 11000) {
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <systemLoop+0x2d0>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <systemLoop+0x2d0>)
 800155c:	885b      	ldrh	r3, [r3, #2]
 800155e:	4413      	add	r3, r2
 8001560:	4a78      	ldr	r2, [pc, #480]	; (8001744 <systemLoop+0x2d0>)
 8001562:	8a92      	ldrh	r2, [r2, #20]
 8001564:	4413      	add	r3, r2
 8001566:	4a77      	ldr	r2, [pc, #476]	; (8001744 <systemLoop+0x2d0>)
 8001568:	8ad2      	ldrh	r2, [r2, #22]
 800156a:	4413      	add	r3, r2
 800156c:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8001570:	4293      	cmp	r3, r2
 8001572:	dc03      	bgt.n	800157c <systemLoop+0x108>
				encCross2 = encTotalN;
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <systemLoop+0x2a8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a73      	ldr	r2, [pc, #460]	; (8001748 <systemLoop+0x2d4>)
 800157a:	6013      	str	r3, [r2, #0]
			if (encTotalN - encCross2 >= encMM (200) ) {
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <systemLoop+0x2a8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b71      	ldr	r3, [pc, #452]	; (8001748 <systemLoop+0x2d4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad4      	subs	r4, r2, r3
 8001586:	20c8      	movs	r0, #200	; 0xc8
 8001588:	f000 f960 	bl	800184c <encMM>
 800158c:	4603      	mov	r3, r0
 800158e:	429c      	cmp	r4, r3
 8001590:	db1c      	blt.n	80015cc <systemLoop+0x158>
				if (checkMarker() == RIGHTMARKER) {
 8001592:	f001 f9cb 	bl	800292c <checkMarker>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d117      	bne.n	80015cc <systemLoop+0x158>
					if (SGmarker == 0) {
 800159c:	4b67      	ldr	r3, [pc, #412]	; (800173c <systemLoop+0x2c8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <systemLoop+0x138>
						SGmarker = STARTMARKER;
 80015a4:	4b65      	ldr	r3, [pc, #404]	; (800173c <systemLoop+0x2c8>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e00f      	b.n	80015cc <systemLoop+0x158>
					} else if (SGmarker == STARTMARKER && encTotalN > encMM(500)) {
 80015ac:	4b63      	ldr	r3, [pc, #396]	; (800173c <systemLoop+0x2c8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10b      	bne.n	80015cc <systemLoop+0x158>
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f000 f948 	bl	800184c <encMM>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <systemLoop+0x2a8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	da02      	bge.n	80015cc <systemLoop+0x158>
						SGmarker = GOALMARKER;
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <systemLoop+0x2c8>)
 80015c8:	2202      	movs	r2, #2
 80015ca:	701a      	strb	r2, [r3, #0]
			if (angleSensor > 11 || angleSensor < -11) {
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <systemLoop+0x2d8>)
 80015ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <systemLoop+0x2dc>)
 80015d8:	f7ff fabe 	bl	8000b58 <__aeabi_dcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <systemLoop+0x184>
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <systemLoop+0x2d8>)
 80015e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <systemLoop+0x2e0>)
 80015ee:	f7ff fa95 	bl	8000b1c <__aeabi_dcmplt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <systemLoop+0x18c>
				modeCurve = 1;
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <systemLoop+0x2b0>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e018      	b.n	8001632 <systemLoop+0x1be>
			} else if (angleSensor < 11 && angleSensor > -11) {
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <systemLoop+0x2d8>)
 8001602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <systemLoop+0x2dc>)
 800160c:	f7ff fa86 	bl	8000b1c <__aeabi_dcmplt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00d      	beq.n	8001632 <systemLoop+0x1be>
 8001616:	4b4d      	ldr	r3, [pc, #308]	; (800174c <systemLoop+0x2d8>)
 8001618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <systemLoop+0x2e0>)
 8001622:	f7ff fa99 	bl	8000b58 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <systemLoop+0x1be>
				modeCurve = 0;
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <systemLoop+0x2b0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
			if (SGmarker == GOALMARKER) {
 8001632:	4b42      	ldr	r3, [pc, #264]	; (800173c <systemLoop+0x2c8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d160      	bne.n	80016fc <systemLoop+0x288>
				goalTime = cnt1;
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <systemLoop+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a46      	ldr	r2, [pc, #280]	; (8001758 <systemLoop+0x2e4>)
 8001640:	6013      	str	r3, [r2, #0]
				enc1 = 0;
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <systemLoop+0x2e8>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
				pattern = 101;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <systemLoop+0x294>)
 800164a:	2265      	movs	r2, #101	; 0x65
 800164c:	701a      	strb	r2, [r3, #0]
			break;
 800164e:	e055      	b.n	80016fc <systemLoop+0x288>
			targetSpeed = paramSpeed[INDEX_STOP]*PALSE_MILLIMETER/10;
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <systemLoop+0x2b4>)
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	461a      	mov	r2, r3
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff80 	bl	8000564 <__aeabi_i2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4930      	ldr	r1, [pc, #192]	; (800172c <systemLoop+0x2b8>)
 800166a:	e9c1 2300 	strd	r2, r3, [r1]
			motorPwmOutSynth( tracePwm, speedPwm );
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <systemLoop+0x2bc>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	461a      	mov	r2, r3
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <systemLoop+0x2c0>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f001 fa16 	bl	8002ab0 <motorPwmOutSynth>
			if (enc1 >= encMM(500)) {
 8001684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001688:	f000 f8e0 	bl	800184c <encMM>
 800168c:	4602      	mov	r2, r0
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <systemLoop+0x2e8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	dc34      	bgt.n	8001700 <systemLoop+0x28c>
				pattern = 102;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <systemLoop+0x294>)
 8001698:	2266      	movs	r2, #102	; 0x66
 800169a:	701a      	strb	r2, [r3, #0]
			break;
 800169c:	e030      	b.n	8001700 <systemLoop+0x28c>
			targetSpeed = 0;
 800169e:	4923      	ldr	r1, [pc, #140]	; (800172c <systemLoop+0x2b8>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
			if (encCurrentN == 0) motorPwmOutSynth( 0, 0 );
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <systemLoop+0x2ec>)
 80016ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <systemLoop+0x24c>
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f001 f9f9 	bl	8002ab0 <motorPwmOutSynth>
 80016be:	e006      	b.n	80016ce <systemLoop+0x25a>
			else                  motorPwmOutSynth( 0, speedPwm );
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <systemLoop+0x2c0>)
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2000      	movs	r0, #0
 80016ca:	f001 f9f1 	bl	8002ab0 <motorPwmOutSynth>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <systemLoop+0x2c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
			lcdRowPrintf(UPROW, " %7d",encMarker2);
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <systemLoop+0x2f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4922      	ldr	r1, [pc, #136]	; (8001768 <systemLoop+0x2f4>)
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fde8 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, " %7d",cntmark);
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <systemLoop+0x2f8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	491f      	ldr	r1, [pc, #124]	; (8001768 <systemLoop+0x2f4>)
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fde1 	bl	80012b4 <lcdRowPrintf>
			break;
 80016f2:	e006      	b.n	8001702 <systemLoop+0x28e>
        	break;
 80016f4:	bf00      	nop
 80016f6:	e004      	b.n	8001702 <systemLoop+0x28e>
			break;
 80016f8:	bf00      	nop
 80016fa:	e002      	b.n	8001702 <systemLoop+0x28e>
			break;
 80016fc:	bf00      	nop
 80016fe:	e000      	b.n	8001702 <systemLoop+0x28e>
			break;
 8001700:	bf00      	nop
    } // switch case
}
 8001702:	bf00      	nop
 8001704:	bd98      	pop	{r3, r4, r7, pc}
 8001706:	bf00      	nop
 8001708:	20000244 	.word	0x20000244
 800170c:	20000690 	.word	0x20000690
 8001710:	0800d640 	.word	0x0800d640
 8001714:	0800d64c 	.word	0x0800d64c
 8001718:	0800d658 	.word	0x0800d658
 800171c:	2000027c 	.word	0x2000027c
 8001720:	200006ac 	.word	0x200006ac
 8001724:	20000245 	.word	0x20000245
 8001728:	20000004 	.word	0x20000004
 800172c:	200006b8 	.word	0x200006b8
 8001730:	2000030a 	.word	0x2000030a
 8001734:	200006b0 	.word	0x200006b0
 8001738:	20000510 	.word	0x20000510
 800173c:	20000674 	.word	0x20000674
 8001740:	0800d664 	.word	0x0800d664
 8001744:	200002b4 	.word	0x200002b4
 8001748:	2000068c 	.word	0x2000068c
 800174c:	20000300 	.word	0x20000300
 8001750:	40260000 	.word	0x40260000
 8001754:	c0260000 	.word	0xc0260000
 8001758:	20000264 	.word	0x20000264
 800175c:	20000280 	.word	0x20000280
 8001760:	20000270 	.word	0x20000270
 8001764:	2000067c 	.word	0x2000067c
 8001768:	0800d66c 	.word	0x0800d66c
 800176c:	20000680 	.word	0x20000680

08001770 <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
    uint16_t encRawR, encRawL;

    // エンコーダカウントを取得
    encRawR = TIM4 -> CNT;
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <getEncoder+0xb0>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <getEncoder+0xb4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encBufR - encRawR;
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <getEncoder+0xb8>)
 8001784:	881a      	ldrh	r2, [r3, #0]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <getEncoder+0xbc>)
 8001790:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <getEncoder+0xc0>)
 8001794:	881a      	ldrh	r2, [r3, #0]
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29b      	uxth	r3, r3
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <getEncoder+0xc4>)
 80017a0:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <getEncoder+0xbc>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <getEncoder+0xc4>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	4413      	add	r3, r2
 80017b2:	0fda      	lsrs	r2, r3, #31
 80017b4:	4413      	add	r3, r2
 80017b6:	105b      	asrs	r3, r3, #1
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <getEncoder+0xc8>)
 80017bc:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <getEncoder+0xbc>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <getEncoder+0xcc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a1b      	ldr	r2, [pc, #108]	; (800183c <getEncoder+0xcc>)
 80017ce:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <getEncoder+0xc4>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <getEncoder+0xd0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <getEncoder+0xd0>)
 80017e0:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <getEncoder+0xc8>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <getEncoder+0xd4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <getEncoder+0xd4>)
 80017f2:	6013      	str	r3, [r2, #0]
    enc1 += encCurrentN;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <getEncoder+0xc8>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <getEncoder+0xd8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <getEncoder+0xd8>)
 8001804:	6013      	str	r3, [r2, #0]

    // 前回値を更新
    encBufR = encRawR;
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <getEncoder+0xb8>)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	8013      	strh	r3, [r2, #0]
    encBufL = encRawL;
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <getEncoder+0xc0>)
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	8013      	strh	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40000800 	.word	0x40000800
 8001824:	40000400 	.word	0x40000400
 8001828:	20000268 	.word	0x20000268
 800182c:	2000026c 	.word	0x2000026c
 8001830:	2000026a 	.word	0x2000026a
 8001834:	2000026e 	.word	0x2000026e
 8001838:	20000270 	.word	0x20000270
 800183c:	20000274 	.word	0x20000274
 8001840:	20000278 	.word	0x20000278
 8001844:	2000027c 	.word	0x2000027c
 8001848:	20000280 	.word	0x20000280

0800184c <encMM>:
// モジュール名 encMM
// 処理概要     mmをエンコーダのパルス数に変換して返す
// 引数         mm:変換する長さ[mm]
// 戻り値       変換したパルス数
///////////////////////////////////////////////////////////////////////////
int32_t encMM( int16_t mm ) {
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
	return PALSE_MILLIMETER * abs(mm);
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	bfb8      	it	lt
 800185e:	425b      	neglt	r3, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <ledOut>:
// モジュール名 ledOut
// 処理概要     フルカラーLEDのON/OFF
// 引数         rgb 下位3ビットがそれぞれ赤緑青に対応している
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void ledOut ( uint8_t rgb ) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	if ( (rgb & 0x4) == 0x4 ) HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <ledOut+0x22>
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <ledOut+0x78>)
 8001894:	f004 f918 	bl	8005ac8 <HAL_GPIO_WritePin>
 8001898:	e005      	b.n	80018a6 <ledOut+0x2e>
	else HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <ledOut+0x78>)
 80018a2:	f004 f911 	bl	8005ac8 <HAL_GPIO_WritePin>

	if ( (rgb & 0x2) == 0x2 ) HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <ledOut+0x44>
 80018b0:	2200      	movs	r2, #0
 80018b2:	2110      	movs	r1, #16
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <ledOut+0x7c>)
 80018b6:	f004 f907 	bl	8005ac8 <HAL_GPIO_WritePin>
 80018ba:	e004      	b.n	80018c6 <ledOut+0x4e>
	else HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2110      	movs	r1, #16
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <ledOut+0x7c>)
 80018c2:	f004 f901 	bl	8005ac8 <HAL_GPIO_WritePin>

	if ( (rgb & 0x1) == 0x1 ) HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <ledOut+0x64>
 80018d0:	2200      	movs	r2, #0
 80018d2:	2120      	movs	r1, #32
 80018d4:	4807      	ldr	r0, [pc, #28]	; (80018f4 <ledOut+0x7c>)
 80018d6:	f004 f8f7 	bl	8005ac8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80018da:	e004      	b.n	80018e6 <ledOut+0x6e>
	else HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2120      	movs	r1, #32
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <ledOut+0x7c>)
 80018e2:	f004 f8f1 	bl	8005ac8 <HAL_GPIO_WritePin>
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400

080018f8 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
	uint8_t i;
	cntls++;
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <getLineSensor+0xa0>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <getLineSensor+0xa0>)
 8001908:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	e010      	b.n	8001932 <getLineSensor+0x3a>
		lSensorInt[i] += analogVal[i];
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <getLineSensor+0xa4>)
 8001914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <getLineSensor+0xa8>)
 800191c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001920:	4619      	mov	r1, r3
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	440a      	add	r2, r1
 8001926:	491d      	ldr	r1, [pc, #116]	; (800199c <getLineSensor+0xa4>)
 8001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for ( i=0;i<NUM_SENSORS;i++) {
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	3301      	adds	r3, #1
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b0b      	cmp	r3, #11
 8001936:	d9eb      	bls.n	8001910 <getLineSensor+0x18>
	}

	if (cntls > 16) {
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <getLineSensor+0xa0>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b10      	cmp	r3, #16
 800193e:	d924      	bls.n	800198a <getLineSensor+0x92>
		for ( i=0;i<NUM_SENSORS;i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	e01b      	b.n	800197e <getLineSensor+0x86>
			lSensor[i] = lSensorInt[i]>>4;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <getLineSensor+0xa4>)
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	091a      	lsrs	r2, r3, #4
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	b291      	uxth	r1, r2
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <getLineSensor+0xac>)
 8001956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensors_list[i].value = lSensor[i];
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4911      	ldr	r1, [pc, #68]	; (80019a4 <getLineSensor+0xac>)
 8001960:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <getLineSensor+0xb0>)
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	460a      	mov	r2, r1
 800196c:	805a      	strh	r2, [r3, #2]
			lSensorInt[i] = 0;
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <getLineSensor+0xa4>)
 8001972:	2100      	movs	r1, #0
 8001974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for ( i=0;i<NUM_SENSORS;i++) {
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	3301      	adds	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b0b      	cmp	r3, #11
 8001982:	d9e0      	bls.n	8001946 <getLineSensor+0x4e>
		}
		cntls = 0;
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <getLineSensor+0xa0>)
 8001986:	2200      	movs	r2, #0
 8001988:	801a      	strh	r2, [r3, #0]
	}
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000308 	.word	0x20000308
 800199c:	20000284 	.word	0x20000284
 80019a0:	20000248 	.word	0x20000248
 80019a4:	200002b4 	.word	0x200002b4
 80019a8:	200002cc 	.word	0x200002cc

080019ac <cmpare_lSensors>:
/* qsort関数に渡す比較用の関数（昇順） */
int cmpare_lSensors(const void *n1, const void *n2) {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    if (((lSensors *)n1)->value > ((lSensors *)n2)->value) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	885a      	ldrh	r2, [r3, #2]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	885b      	ldrh	r3, [r3, #2]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d901      	bls.n	80019c6 <cmpare_lSensors+0x1a>
        return 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e009      	b.n	80019da <cmpare_lSensors+0x2e>
    } else if (((lSensors *)n1)->value < ((lSensors *)n2)->value) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	885a      	ldrh	r2, [r3, #2]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d202      	bcs.n	80019d8 <cmpare_lSensors+0x2c>
        return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e000      	b.n	80019da <cmpare_lSensors+0x2e>
    }
    return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <getAngleSensor>:
// モジュール名 getAngleSensor
// 処理概要  	ラインセンサのAD値からステア角を算出する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getAngleSensor(void) {
 80019e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ec:	b08c      	sub	sp, #48	; 0x30
 80019ee:	af00      	add	r7, sp, #0
	uint16_t index, sen1, sen2;
	double nsen1, nsen2, phi, dthita;

	// 昇順ソート
	qsort(lSensors_list, NUM_SENSORS, sizeof(lSensors), cmpare_lSensors);
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <getAngleSensor+0x248>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	210c      	movs	r1, #12
 80019f6:	488f      	ldr	r0, [pc, #572]	; (8001c34 <getAngleSensor+0x24c>)
 80019f8:	f007 fd02 	bl	8009400 <qsort>
	index = lSensors_list[0].index;
 80019fc:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <getAngleSensor+0x24c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if (index !=0 && index != NUM_SENSORS -1 ) {
 8001a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80f1 	beq.w	8001bec <getAngleSensor+0x204>
 8001a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a0c:	2b0b      	cmp	r3, #11
 8001a0e:	f000 80ed 	beq.w	8001bec <getAngleSensor+0x204>
		// 白線に一番近いセンサの両隣のセンサ値を取得
		sen1 = lSensor[index-1];
 8001a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a88      	ldr	r2, [pc, #544]	; (8001c38 <getAngleSensor+0x250>)
 8001a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1c:	843b      	strh	r3, [r7, #32]
		sen2 = lSensor[index+1];
 8001a1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a85      	ldr	r2, [pc, #532]	; (8001c38 <getAngleSensor+0x250>)
 8001a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a28:	83fb      	strh	r3, [r7, #30]

		// 正規化
		nsen1 = (double)sen1 / (sen1 + sen2);
 8001a2a:	8c3b      	ldrh	r3, [r7, #32]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd89 	bl	8000544 <__aeabi_ui2d>
 8001a32:	4680      	mov	r8, r0
 8001a34:	4689      	mov	r9, r1
 8001a36:	8c3a      	ldrh	r2, [r7, #32]
 8001a38:	8bfb      	ldrh	r3, [r7, #30]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd91 	bl	8000564 <__aeabi_i2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4640      	mov	r0, r8
 8001a48:	4649      	mov	r1, r9
 8001a4a:	f7fe ff1f 	bl	800088c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 2304 	strd	r2, r3, [r7, #16]
		nsen2 = (double)sen2 / (sen1 + sen2);
 8001a56:	8bfb      	ldrh	r3, [r7, #30]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd73 	bl	8000544 <__aeabi_ui2d>
 8001a5e:	4680      	mov	r8, r0
 8001a60:	4689      	mov	r9, r1
 8001a62:	8c3a      	ldrh	r2, [r7, #32]
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd7b 	bl	8000564 <__aeabi_i2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4640      	mov	r0, r8
 8001a74:	4649      	mov	r1, r9
 8001a76:	f7fe ff09 	bl	800088c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (index >= NUM_SENSORS/2) phi = atan( (nsen1 - nsen2)/1 );		// 偏角φ計算
 8001a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d912      	bls.n	8001aae <getAngleSensor+0xc6>
 8001a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a90:	f7fe fc1a 	bl	80002c8 <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ec43 2b17 	vmov	d7, r2, r3
 8001a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa0:	eef0 0a67 	vmov.f32	s1, s15
 8001aa4:	f00b fc14 	bl	800d2d0 <atan>
 8001aa8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001aac:	e011      	b.n	8001ad2 <getAngleSensor+0xea>
		else 						phi = atan( (nsen2 - nsen1)/1 );		// 偏角φ計算
 8001aae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ab6:	f7fe fc07 	bl	80002c8 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b17 	vmov	d7, r2, r3
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f00b fc01 	bl	800d2d0 <atan>
 8001ace:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		
		dthita = (phi*THITA_SENSOR* (M_PI/180.0)/2) / (M_PI/4);	// 微小角度dθ計算
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <getAngleSensor+0x254>)
 8001ad8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001adc:	f7fe fdac 	bl	8000638 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	a34b      	add	r3, pc, #300	; (adr r3, 8001c18 <getAngleSensor+0x230>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fda3 	bl	8000638 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b02:	f7fe fec3 	bl	800088c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	a344      	add	r3, pc, #272	; (adr r3, 8001c20 <getAngleSensor+0x238>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe feba 	bl	800088c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2300 	strd	r2, r3, [r7]

		
		if (index >= NUM_SENSORS/2) {
 8001b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d928      	bls.n	8001b78 <getAngleSensor+0x190>
			angleSensor = ( (index-5.5)*THITA_SENSOR * (M_PI/180.0)) + dthita;
 8001b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd1b 	bl	8000564 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <getAngleSensor+0x258>)
 8001b34:	f7fe fbc8 	bl	80002c8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <getAngleSensor+0x254>)
 8001b46:	f7fe fd77 	bl	8000638 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	a331      	add	r3, pc, #196	; (adr r3, 8001c18 <getAngleSensor+0x230>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd6e 	bl	8000638 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b68:	f7fe fbb0 	bl	80002cc <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4934      	ldr	r1, [pc, #208]	; (8001c44 <getAngleSensor+0x25c>)
 8001b72:	e9c1 2300 	strd	r2, r3, [r1]
 8001b76:	e02c      	b.n	8001bd2 <getAngleSensor+0x1ea>
		} else {
			angleSensor = -( ( (5.5-index)*THITA_SENSOR * (M_PI/180.0)) + dthita );
 8001b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcf2 	bl	8000564 <__aeabi_i2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	492d      	ldr	r1, [pc, #180]	; (8001c40 <getAngleSensor+0x258>)
 8001b8a:	f7fe fb9d 	bl	80002c8 <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <getAngleSensor+0x254>)
 8001b9c:	f7fe fd4c 	bl	8000638 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	a31b      	add	r3, pc, #108	; (adr r3, 8001c18 <getAngleSensor+0x230>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fd43 	bl	8000638 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bbe:	f7fe fb85 	bl	80002cc <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <getAngleSensor+0x25c>)
 8001bce:	e9c3 4500 	strd	r4, r5, [r3]
		}
		angleSensor = angleSensor*(180.0/M_PI);
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <getAngleSensor+0x25c>)
 8001bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd8:	a313      	add	r3, pc, #76	; (adr r3, 8001c28 <getAngleSensor+0x240>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd2b 	bl	8000638 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4917      	ldr	r1, [pc, #92]	; (8001c44 <getAngleSensor+0x25c>)
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]
		
	}

	for (int i = 0; i < NUM_SENSORS; i ++) lSensors_list[i].index = i;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e008      	b.n	8001c04 <getAngleSensor+0x21c>
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	b2d9      	uxtb	r1, r3
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <getAngleSensor+0x24c>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	3301      	adds	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	2b0b      	cmp	r3, #11
 8001c08:	ddf3      	ble.n	8001bf2 <getAngleSensor+0x20a>

	
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c16:	bf00      	nop
 8001c18:	63f11168 	.word	0x63f11168
 8001c1c:	3f91df46 	.word	0x3f91df46
 8001c20:	fc8b007a 	.word	0xfc8b007a
 8001c24:	3fe921fa 	.word	0x3fe921fa
 8001c28:	7e61df46 	.word	0x7e61df46
 8001c2c:	404ca5dc 	.word	0x404ca5dc
 8001c30:	080019ad 	.word	0x080019ad
 8001c34:	200002cc 	.word	0x200002cc
 8001c38:	200002b4 	.word	0x200002b4
 8001c3c:	40260000 	.word	0x40260000
 8001c40:	40160000 	.word	0x40160000
 8001c44:	20000300 	.word	0x20000300

08001c48 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時サーボのPWMの計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
	// 	kp = kp1_buff;
	// 	ki = ki1_buff;
	// 	kd = kd1_buff;
	// 	Dev = lSensor[4] - lSensor[7];
	// }
	kp = kp1_buff;
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <motorControlTrace+0x148>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	623b      	str	r3, [r7, #32]
	ki = ki1_buff;
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <motorControlTrace+0x14c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	61fb      	str	r3, [r7, #28]
	kd = kd1_buff;
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <motorControlTrace+0x150>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	61bb      	str	r3, [r7, #24]
	Dev = lSensor[4] - lSensor[7];
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <motorControlTrace+0x154>)
 8001c62:	891b      	ldrh	r3, [r3, #8]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <motorControlTrace+0x154>)
 8001c68:	89db      	ldrh	r3, [r3, #14]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
	// I成分積算
	Int += (double)Dev * 0.001;
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7fe fc78 	bl	8000564 <__aeabi_i2d>
 8001c74:	a340      	add	r3, pc, #256	; (adr r3, 8001d78 <motorControlTrace+0x130>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fcdd 	bl	8000638 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <motorControlTrace+0x158>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fb1e 	bl	80002cc <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4942      	ldr	r1, [pc, #264]	; (8001da0 <motorControlTrace+0x158>)
 8001c96:	e9c1 2300 	strd	r2, r3, [r1]
	if ( Int > 10000 ) Int = 10000;		// I成分リミット
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <motorControlTrace+0x158>)
 8001c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca0:	a337      	add	r3, pc, #220	; (adr r3, 8001d80 <motorControlTrace+0x138>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe ff57 	bl	8000b58 <__aeabi_dcmpgt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <motorControlTrace+0x76>
 8001cb0:	493b      	ldr	r1, [pc, #236]	; (8001da0 <motorControlTrace+0x158>)
 8001cb2:	a333      	add	r3, pc, #204	; (adr r3, 8001d80 <motorControlTrace+0x138>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]
 8001cbc:	e010      	b.n	8001ce0 <motorControlTrace+0x98>
	else if ( Int < -10000 ) Int = -10000;
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <motorControlTrace+0x158>)
 8001cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc4:	a330      	add	r3, pc, #192	; (adr r3, 8001d88 <motorControlTrace+0x140>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe ff27 	bl	8000b1c <__aeabi_dcmplt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <motorControlTrace+0x98>
 8001cd4:	4932      	ldr	r1, [pc, #200]	; (8001da0 <motorControlTrace+0x158>)
 8001cd6:	a32c      	add	r3, pc, #176	; (adr r3, 8001d88 <motorControlTrace+0x140>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <motorControlTrace+0x15c>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	613b      	str	r3, [r7, #16]

	iP = (int32_t)kp1_buff * Dev;	// 比例
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <motorControlTrace+0x148>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
	iI = (double)ki1_buff * Int;	// 積分
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <motorControlTrace+0x14c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc1f 	bl	8000544 <__aeabi_ui2d>
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <motorControlTrace+0x158>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc94 	bl	8000638 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff3e 	bl	8000b98 <__aeabi_d2iz>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd1_buff * Dif;	// 微分
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <motorControlTrace+0x150>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4413      	add	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 6;				// PWMを0～100近傍に収める
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	119b      	asrs	r3, r3, #6
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24

	// PWMの上限の設定
	if ( iRet >  1000 ) iRet =  1000;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d46:	dd02      	ble.n	8001d4e <motorControlTrace+0x106>
 8001d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d54:	da01      	bge.n	8001d5a <motorControlTrace+0x112>
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <motorControlTrace+0x160>)
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
	
	tracePwm = iRet;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <motorControlTrace+0x164>)
 8001d60:	801a      	strh	r2, [r3, #0]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <motorControlTrace+0x15c>)
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d7c:	3f50624d 	.word	0x3f50624d
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40c38800 	.word	0x40c38800
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	c0c38800 	.word	0xc0c38800
 8001d90:	2000000e 	.word	0x2000000e
 8001d94:	20000318 	.word	0x20000318
 8001d98:	2000000f 	.word	0x2000000f
 8001d9c:	200002b4 	.word	0x200002b4
 8001da0:	20000310 	.word	0x20000310
 8001da4:	2000030c 	.word	0x2000030c
 8001da8:	fffffc18 	.word	0xfffffc18
 8001dac:	2000030a 	.word	0x2000030a

08001db0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001db8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dbc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dcc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001dd0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dd8:	e000      	b.n	8001ddc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ddc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f9      	beq.n	8001dda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001de6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e02:	f002 fb85 	bl	8004510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e06:	f000 f81d 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0a:	f000 fc69 	bl	80026e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0e:	f000 fc47 	bl	80026a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e12:	f000 f889 	bl	8001f28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e16:	f000 f991 	bl	800213c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e1a:	f000 f9bd 	bl	8002198 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001e1e:	f000 fa27 	bl	8002270 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e22:	f000 fadd 	bl	80023e0 <MX_TIM2_Init>
  MX_UART5_Init();
 8001e26:	f000 fc11 	bl	800264c <MX_UART5_Init>
  MX_TIM3_Init();
 8001e2a:	f000 fb31 	bl	8002490 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e2e:	f000 fb83 	bl	8002538 <MX_TIM4_Init>
  MX_SPI3_Init();
 8001e32:	f000 f9e7 	bl	8002204 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001e36:	f000 fbd3 	bl	80025e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8001e3a:	f7ff fa93 	bl	8001364 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    systemLoop();
 8001e3e:	f7ff fb19 	bl	8001474 <systemLoop>
 8001e42:	e7fc      	b.n	8001e3e <main+0x40>

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b094      	sub	sp, #80	; 0x50
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	2234      	movs	r2, #52	; 0x34
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 fc1a 	bl	800868c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <SystemClock_Config+0xdc>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <SystemClock_Config+0xdc>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <SystemClock_Config+0xdc>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e84:	2300      	movs	r3, #0
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <SystemClock_Config+0xe0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <SystemClock_Config+0xe0>)
 8001e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <SystemClock_Config+0xe0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001eb8:	23b4      	movs	r3, #180	; 0xb4
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fd75 	bl	80069bc <HAL_RCC_OscConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ed8:	f000 fcf6 	bl	80028c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001edc:	f004 fa5a 	bl	8006394 <HAL_PWREx_EnableOverDrive>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ee6:	f000 fcef 	bl	80028c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eea:	230f      	movs	r3, #15
 8001eec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	2105      	movs	r1, #5
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fa93 	bl	8006434 <HAL_RCC_ClockConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f14:	f000 fcd8 	bl	80028c8 <Error_Handler>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3750      	adds	r7, #80	; 0x50
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40007000 	.word	0x40007000

08001f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f2e:	463b      	mov	r3, r7
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f3a:	4b7d      	ldr	r3, [pc, #500]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f3c:	4a7d      	ldr	r2, [pc, #500]	; (8002134 <MX_ADC1_Init+0x20c>)
 8001f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f40:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f48:	4b79      	ldr	r3, [pc, #484]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f4e:	4b78      	ldr	r3, [pc, #480]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f5a:	4b75      	ldr	r3, [pc, #468]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f62:	4b73      	ldr	r3, [pc, #460]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f68:	4b71      	ldr	r3, [pc, #452]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f6a:	4a73      	ldr	r2, [pc, #460]	; (8002138 <MX_ADC1_Init+0x210>)
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f6e:	4b70      	ldr	r3, [pc, #448]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8001f74:	4b6e      	ldr	r3, [pc, #440]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f76:	220e      	movs	r2, #14
 8001f78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f82:	4b6b      	ldr	r3, [pc, #428]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f88:	4869      	ldr	r0, [pc, #420]	; (8002130 <MX_ADC1_Init+0x208>)
 8001f8a:	f002 fb57 	bl	800463c <HAL_ADC_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f94:	f000 fc98 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f98:	230b      	movs	r3, #11
 8001f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4861      	ldr	r0, [pc, #388]	; (8002130 <MX_ADC1_Init+0x208>)
 8001faa:	f002 fcaf 	bl	800490c <HAL_ADC_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fb4:	f000 fc88 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	485a      	ldr	r0, [pc, #360]	; (8002130 <MX_ADC1_Init+0x208>)
 8001fc6:	f002 fca1 	bl	800490c <HAL_ADC_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fd0:	f000 fc7a 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001fd4:	230d      	movs	r3, #13
 8001fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4853      	ldr	r0, [pc, #332]	; (8002130 <MX_ADC1_Init+0x208>)
 8001fe2:	f002 fc93 	bl	800490c <HAL_ADC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001fec:	f000 fc6c 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	484c      	ldr	r0, [pc, #304]	; (8002130 <MX_ADC1_Init+0x208>)
 8001ffe:	f002 fc85 	bl	800490c <HAL_ADC_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002008:	f000 fc5e 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800200c:	2301      	movs	r3, #1
 800200e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002010:	2305      	movs	r3, #5
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4845      	ldr	r0, [pc, #276]	; (8002130 <MX_ADC1_Init+0x208>)
 800201a:	f002 fc77 	bl	800490c <HAL_ADC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002024:	f000 fc50 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002028:	2302      	movs	r3, #2
 800202a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800202c:	2306      	movs	r3, #6
 800202e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	483e      	ldr	r0, [pc, #248]	; (8002130 <MX_ADC1_Init+0x208>)
 8002036:	f002 fc69 	bl	800490c <HAL_ADC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002040:	f000 fc42 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002044:	2303      	movs	r3, #3
 8002046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002048:	2307      	movs	r3, #7
 800204a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4837      	ldr	r0, [pc, #220]	; (8002130 <MX_ADC1_Init+0x208>)
 8002052:	f002 fc5b 	bl	800490c <HAL_ADC_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800205c:	f000 fc34 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002060:	2304      	movs	r3, #4
 8002062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002064:	2308      	movs	r3, #8
 8002066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	4830      	ldr	r0, [pc, #192]	; (8002130 <MX_ADC1_Init+0x208>)
 800206e:	f002 fc4d 	bl	800490c <HAL_ADC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002078:	f000 fc26 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800207c:	2305      	movs	r3, #5
 800207e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002080:	2309      	movs	r3, #9
 8002082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4829      	ldr	r0, [pc, #164]	; (8002130 <MX_ADC1_Init+0x208>)
 800208a:	f002 fc3f 	bl	800490c <HAL_ADC_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002094:	f000 fc18 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002098:	2306      	movs	r3, #6
 800209a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800209c:	230a      	movs	r3, #10
 800209e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	4822      	ldr	r0, [pc, #136]	; (8002130 <MX_ADC1_Init+0x208>)
 80020a6:	f002 fc31 	bl	800490c <HAL_ADC_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80020b0:	f000 fc0a 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020b4:	2307      	movs	r3, #7
 80020b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80020b8:	230b      	movs	r3, #11
 80020ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	481b      	ldr	r0, [pc, #108]	; (8002130 <MX_ADC1_Init+0x208>)
 80020c2:	f002 fc23 	bl	800490c <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80020cc:	f000 fbfc 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80020d0:	230e      	movs	r3, #14
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80020d4:	230c      	movs	r3, #12
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4814      	ldr	r0, [pc, #80]	; (8002130 <MX_ADC1_Init+0x208>)
 80020de:	f002 fc15 	bl	800490c <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80020e8:	f000 fbee 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020ec:	230a      	movs	r3, #10
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80020f0:	230d      	movs	r3, #13
 80020f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020f4:	2307      	movs	r3, #7
 80020f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_ADC1_Init+0x208>)
 80020fe:	f002 fc05 	bl	800490c <HAL_ADC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 8002108:	f000 fbde 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800210c:	230f      	movs	r3, #15
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002110:	230e      	movs	r3, #14
 8002112:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_ADC1_Init+0x208>)
 800211a:	f002 fbf7 	bl	800490c <HAL_ADC_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8002124:	f000 fbd0 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000031c 	.word	0x2000031c
 8002134:	40012000 	.word	0x40012000
 8002138:	0f000001 	.word	0x0f000001

0800213c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_I2C1_Init+0x50>)
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <MX_I2C1_Init+0x54>)
 8002144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_I2C1_Init+0x50>)
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_I2C1_Init+0x58>)
 800214a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_I2C1_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_I2C1_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_I2C1_Init+0x50>)
 800215a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <MX_I2C1_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_I2C1_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <MX_I2C1_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_I2C1_Init+0x50>)
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_I2C1_Init+0x50>)
 800217a:	f003 fcbf 	bl	8005afc <HAL_I2C_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002184:	f000 fba0 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200003c4 	.word	0x200003c4
 8002190:	40005400 	.word	0x40005400
 8002194:	00061a80 	.word	0x00061a80

08002198 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_SPI2_Init+0x64>)
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <MX_SPI2_Init+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_SPI2_Init+0x64>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_SPI2_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_SPI2_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_SPI2_Init+0x64>)
 80021b8:	2202      	movs	r2, #2
 80021ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_SPI2_Init+0x64>)
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_SPI2_Init+0x64>)
 80021c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI2_Init+0x64>)
 80021cc:	2220      	movs	r2, #32
 80021ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <MX_SPI2_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI2_Init+0x64>)
 80021e4:	220a      	movs	r2, #10
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_SPI2_Init+0x64>)
 80021ea:	f004 fe85 	bl	8006ef8 <HAL_SPI_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021f4:	f000 fb68 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000418 	.word	0x20000418
 8002200:	40003800 	.word	0x40003800

08002204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MX_SPI3_Init+0x64>)
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <MX_SPI3_Init+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <MX_SPI3_Init+0x64>)
 8002210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MX_SPI3_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_SPI3_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_SPI3_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <MX_SPI3_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_SPI3_Init+0x64>)
 8002230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002234:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_SPI3_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <MX_SPI3_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_SPI3_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <MX_SPI3_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_SPI3_Init+0x64>)
 8002250:	220a      	movs	r2, #10
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <MX_SPI3_Init+0x64>)
 8002256:	f004 fe4f 	bl	8006ef8 <HAL_SPI_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002260:	f000 fb32 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000470 	.word	0x20000470
 800226c:	40003c00 	.word	0x40003c00

08002270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b092      	sub	sp, #72	; 0x48
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2220      	movs	r2, #32
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f006 f9f6 	bl	800868c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022a2:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <MX_TIM1_Init+0x16c>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80022a6:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022a8:	220b      	movs	r2, #11
 80022aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022b4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80022b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c0:	4b45      	ldr	r3, [pc, #276]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022cc:	4842      	ldr	r0, [pc, #264]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022ce:	f004 ff5b 	bl	8007188 <HAL_TIM_PWM_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80022d8:	f000 faf6 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e8:	4619      	mov	r1, r3
 80022ea:	483b      	ldr	r0, [pc, #236]	; (80023d8 <MX_TIM1_Init+0x168>)
 80022ec:	f005 fe00 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80022f6:	f000 fae7 	bl	80028c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	4619      	mov	r1, r3
 800231e:	482e      	ldr	r0, [pc, #184]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002320:	f005 fa86 	bl	8007830 <HAL_TIM_PWM_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800232a:	f000 facd 	bl	80028c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	2204      	movs	r2, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4828      	ldr	r0, [pc, #160]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002338:	f005 fa7a 	bl	8007830 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002342:	f000 fac1 	bl	80028c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	2208      	movs	r2, #8
 800234c:	4619      	mov	r1, r3
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002350:	f005 fa6e 	bl	8007830 <HAL_TIM_PWM_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800235a:	f000 fab5 	bl	80028c8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0208 	bic.w	r2, r2, #8
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	220c      	movs	r2, #12
 8002374:	4619      	mov	r1, r3
 8002376:	4818      	ldr	r0, [pc, #96]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002378:	f005 fa5a 	bl	8007830 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002382:	f000 faa1 	bl	80028c8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_TIM1_Init+0x168>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_TIM1_Init+0x168>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002394:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MX_TIM1_Init+0x168>)
 80023ba:	f005 fe15 	bl	8007fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80023c4:	f000 fa80 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <MX_TIM1_Init+0x168>)
 80023ca:	f001 fc83 	bl	8003cd4 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3748      	adds	r7, #72	; 0x48
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200004c8 	.word	0x200004c8
 80023dc:	40010000 	.word	0x40010000

080023e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e6:	f107 0320 	add.w	r3, r7, #32
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <MX_TIM2_Init+0xac>)
 8002404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <MX_TIM2_Init+0xac>)
 800240c:	220b      	movs	r2, #11
 800240e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <MX_TIM2_Init+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_TIM2_Init+0xac>)
 8002418:	f240 52db 	movw	r2, #1499	; 0x5db
 800241c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_TIM2_Init+0xac>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM2_Init+0xac>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800242a:	4818      	ldr	r0, [pc, #96]	; (800248c <MX_TIM2_Init+0xac>)
 800242c:	f004 feac 	bl	8007188 <HAL_TIM_PWM_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002436:	f000 fa47 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002442:	f107 0320 	add.w	r3, r7, #32
 8002446:	4619      	mov	r1, r3
 8002448:	4810      	ldr	r0, [pc, #64]	; (800248c <MX_TIM2_Init+0xac>)
 800244a:	f005 fd51 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002454:	f000 fa38 	bl	80028c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002458:	2360      	movs	r3, #96	; 0x60
 800245a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <MX_TIM2_Init+0xac>)
 8002470:	f005 f9de 	bl	8007830 <HAL_TIM_PWM_ConfigChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800247a:	f000 fa25 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <MX_TIM2_Init+0xac>)
 8002480:	f001 fc28 	bl	8003cd4 <HAL_TIM_MspPostInit>

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000510 	.word	0x20000510

08002490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f006 f8f4 	bl	800868c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <MX_TIM3_Init+0xa4>)
 80024b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024d2:	2303      	movs	r3, #3
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80024e6:	2302      	movs	r3, #2
 80024e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_TIM3_Init+0xa0>)
 80024fe:	f004 ff5b 	bl	80073b8 <HAL_TIM_Encoder_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002508:	f000 f9de 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_TIM3_Init+0xa0>)
 800251a:	f005 fce9 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002524:	f000 f9d0 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000558 	.word	0x20000558
 8002534:	40000400 	.word	0x40000400

08002538 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f006 f8a0 	bl	800868c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <MX_TIM4_Init+0xa0>)
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <MX_TIM4_Init+0xa4>)
 8002558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <MX_TIM4_Init+0xa0>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <MX_TIM4_Init+0xa0>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <MX_TIM4_Init+0xa0>)
 8002568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_TIM4_Init+0xa0>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <MX_TIM4_Init+0xa0>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800257a:	2303      	movs	r3, #3
 800257c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002582:	2301      	movs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002592:	2301      	movs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4619      	mov	r1, r3
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <MX_TIM4_Init+0xa0>)
 80025a6:	f004 ff07 	bl	80073b8 <HAL_TIM_Encoder_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025b0:	f000 f98a 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_TIM4_Init+0xa0>)
 80025c2:	f005 fc95 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80025cc:	f000 f97c 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	3730      	adds	r7, #48	; 0x30
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200005a0 	.word	0x200005a0
 80025dc:	40000800 	.word	0x40000800

080025e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	463b      	mov	r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_TIM6_Init+0x64>)
 80025f0:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_TIM6_Init+0x68>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_TIM6_Init+0x64>)
 80025f6:	220b      	movs	r2, #11
 80025f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_TIM6_Init+0x64>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_TIM6_Init+0x64>)
 8002602:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8002606:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_TIM6_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <MX_TIM6_Init+0x64>)
 8002610:	f004 fcfb 	bl	800700a <HAL_TIM_Base_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800261a:	f000 f955 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002626:	463b      	mov	r3, r7
 8002628:	4619      	mov	r1, r3
 800262a:	4806      	ldr	r0, [pc, #24]	; (8002644 <MX_TIM6_Init+0x64>)
 800262c:	f005 fc60 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002636:	f000 f947 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200005e8 	.word	0x200005e8
 8002648:	40001000 	.word	0x40001000

0800264c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_UART5_Init+0x4c>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <MX_UART5_Init+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_UART5_Init+0x4c>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_UART5_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_UART5_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_UART5_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_UART5_Init+0x4c>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_UART5_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_UART5_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_UART5_Init+0x4c>)
 8002684:	f005 fd16 	bl	80080b4 <HAL_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800268e:	f000 f91b 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000630 	.word	0x20000630
 800269c:	40005000 	.word	0x40005000

080026a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_DMA_Init+0x3c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <MX_DMA_Init+0x3c>)
 80026b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_DMA_Init+0x3c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2038      	movs	r0, #56	; 0x38
 80026c8:	f002 fcab 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026cc:	2038      	movs	r0, #56	; 0x38
 80026ce:	f002 fcc4 	bl	800505a <HAL_NVIC_EnableIRQ>

}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <MX_GPIO_Init+0x18c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <MX_GPIO_Init+0x18c>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <MX_GPIO_Init+0x18c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b55      	ldr	r3, [pc, #340]	; (800286c <MX_GPIO_Init+0x18c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a54      	ldr	r2, [pc, #336]	; (800286c <MX_GPIO_Init+0x18c>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <MX_GPIO_Init+0x18c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <MX_GPIO_Init+0x18c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <MX_GPIO_Init+0x18c>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <MX_GPIO_Init+0x18c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <MX_GPIO_Init+0x18c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a46      	ldr	r2, [pc, #280]	; (800286c <MX_GPIO_Init+0x18c>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <MX_GPIO_Init+0x18c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <MX_GPIO_Init+0x18c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a3f      	ldr	r2, [pc, #252]	; (800286c <MX_GPIO_Init+0x18c>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <MX_GPIO_Init+0x18c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Output1_Pin|Output2_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002788:	4839      	ldr	r0, [pc, #228]	; (8002870 <MX_GPIO_Init+0x190>)
 800278a:	f003 f99d 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800278e:	2201      	movs	r2, #1
 8002790:	f243 0130 	movw	r1, #12336	; 0x3030
 8002794:	4837      	ldr	r0, [pc, #220]	; (8002874 <MX_GPIO_Init+0x194>)
 8002796:	f003 f997 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a0:	4835      	ldr	r0, [pc, #212]	; (8002878 <MX_GPIO_Init+0x198>)
 80027a2:	f003 f991 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sidesensor1_Pin */
  GPIO_InitStruct.Pin = Sidesensor1_Pin;
 80027a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor1_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	482d      	ldr	r0, [pc, #180]	; (8002870 <MX_GPIO_Init+0x190>)
 80027bc:	f002 ffd8 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output1_Pin Output2_Pin */
  GPIO_InitStruct.Pin = Output1_Pin|Output2_Pin;
 80027c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4825      	ldr	r0, [pc, #148]	; (8002870 <MX_GPIO_Init+0x190>)
 80027da:	f002 ffc9 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sidesensor2_Pin */
  GPIO_InitStruct.Pin = Sidesensor2_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sidesensor2_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	4820      	ldr	r0, [pc, #128]	; (8002874 <MX_GPIO_Init+0x194>)
 80027f2:	f002 ffbd 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input2_Pin */
  GPIO_InitStruct.Pin = Input2_Pin;
 80027f6:	2304      	movs	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Input2_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	481a      	ldr	r0, [pc, #104]	; (8002874 <MX_GPIO_Init+0x194>)
 800280a:	f002 ffb1 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_MSD_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_MSD_Pin|LED_G_Pin|LED_B_Pin;
 800280e:	f243 0330 	movw	r3, #12336	; 0x3030
 8002812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4813      	ldr	r0, [pc, #76]	; (8002874 <MX_GPIO_Init+0x194>)
 8002828:	f002 ffa2 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin SW_MSD_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|SW_MSD_Pin;
 800282c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <MX_GPIO_Init+0x190>)
 8002842:	f002 ff95 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <MX_GPIO_Init+0x198>)
 8002860:	f002 ff86 	bl	8005770 <HAL_GPIO_Init>

}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	40020800 	.word	0x40020800
 8002874:	40020400 	.word	0x40020400
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  getLineSensor();
 8002884:	f7ff f838 	bl	80018f8 <getLineSensor>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_write>:
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);

	return val;
}
int _write(int file, char *ptr, int len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e009      	b.n	80028b6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	60ba      	str	r2, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fa80 	bl	8001db0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbf1      	blt.n	80028a2 <_write+0x12>
  }
  return len;
 80028be:	687b      	ldr	r3, [r7, #4]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <Error_Handler+0x8>
	...

080028d4 <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 80028da:	2301      	movs	r3, #1
 80028dc:	71bb      	strb	r3, [r7, #6]
 80028de:	2301      	movs	r3, #1
 80028e0:	717b      	strb	r3, [r7, #5]
 80028e2:	2300      	movs	r3, #0
 80028e4:	71fb      	strb	r3, [r7, #7]

	r = HAL_GPIO_ReadPin(Sidesensor1_GPIO_Port,Sidesensor1_Pin);
 80028e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ea:	480e      	ldr	r0, [pc, #56]	; (8002924 <getMarkerSensor+0x50>)
 80028ec:	f003 f8d4 	bl	8005a98 <HAL_GPIO_ReadPin>
 80028f0:	4603      	mov	r3, r0
 80028f2:	71bb      	strb	r3, [r7, #6]
	l = HAL_GPIO_ReadPin(Sidesensor2_GPIO_Port,Sidesensor2_Pin);
 80028f4:	2102      	movs	r1, #2
 80028f6:	480c      	ldr	r0, [pc, #48]	; (8002928 <getMarkerSensor+0x54>)
 80028f8:	f003 f8ce 	bl	8005a98 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	717b      	strb	r3, [r7, #5]

	if (r == 0) ret += RIGHTMARKER;
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <getMarkerSensor+0x38>
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	3301      	adds	r3, #1
 800290a:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += LEFTMARKER;
 800290c:	797b      	ldrb	r3, [r7, #5]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <getMarkerSensor+0x44>
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	3302      	adds	r3, #2
 8002916:	71fb      	strb	r3, [r7, #7]

	return ret;
 8002918:	79fb      	ldrb	r3, [r7, #7]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40020800 	.word	0x40020800
 8002928:	40020400 	.word	0x40020400

0800292c <checkMarker>:
// モジュール名 checkMarker
// 処理概要     クロスラインの読み飛ばし処理を含むマーカー検知
// 引数         なし
// 戻り値       0:マーカなし 0x1:右 0x2:左 0x3:クロスライン
///////////////////////////////////////////////////////////////////////////
uint8_t checkMarker( void ) {
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]

	if (encTotalN - encCross >= encMM(40)) encCross = 0;
 8002936:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <checkMarker+0xa8>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <checkMarker+0xac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1ad4      	subs	r4, r2, r3
 8002940:	2028      	movs	r0, #40	; 0x28
 8002942:	f7fe ff83 	bl	800184c <encMM>
 8002946:	4603      	mov	r3, r0
 8002948:	429c      	cmp	r4, r3
 800294a:	db02      	blt.n	8002952 <checkMarker+0x26>
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <checkMarker+0xac>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

	if ( getMarkerSensor() != 0) {
 8002952:	f7ff ffbf 	bl	80028d4 <getMarkerSensor>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d035      	beq.n	80029c8 <checkMarker+0x9c>
		if (encMarker == 0) {
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <checkMarker+0xb0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <checkMarker+0x4e>
			mark = getMarkerSensor();
 8002964:	f7ff ffb6 	bl	80028d4 <getMarkerSensor>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <checkMarker+0xb4>)
 800296e:	601a      	str	r2, [r3, #0]
			encMarker = encTotalN;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <checkMarker+0xa8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <checkMarker+0xb0>)
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e026      	b.n	80029c8 <checkMarker+0x9c>
		} else if (encTotalN - encMarker <= encth && encTotalN - encCross <= encMM(40)) {
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <checkMarker+0xa8>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <checkMarker+0xb0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1ad2      	subs	r2, r2, r3
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <checkMarker+0xb8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	dc0a      	bgt.n	80029a2 <checkMarker+0x76>
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <checkMarker+0xa8>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <checkMarker+0xac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	1ad4      	subs	r4, r2, r3
 8002996:	2028      	movs	r0, #40	; 0x28
 8002998:	f7fe ff58 	bl	800184c <encMM>
 800299c:	4603      	mov	r3, r0
 800299e:	429c      	cmp	r4, r3
 80029a0:	dd12      	ble.n	80029c8 <checkMarker+0x9c>
			// if (mark != getMarkerSensor()) {
			// 	ret = 0;
			// 	encMarker = 0;
			// 	encCross = encTotalN;
			// }
		} else if (encTotalN - encMarker >= encth) {
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <checkMarker+0xa8>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <checkMarker+0xb0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <checkMarker+0xb8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	db09      	blt.n	80029c8 <checkMarker+0x9c>
			ret = getMarkerSensor();
 80029b4:	f7ff ff8e 	bl	80028d4 <getMarkerSensor>
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
			encMarker = 0;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <checkMarker+0xb0>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
			mark = 0;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <checkMarker+0xb4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
		}
	}

	return ret;
 80029c8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000027c 	.word	0x2000027c
 80029d8:	20000688 	.word	0x20000688
 80029dc:	20000678 	.word	0x20000678
 80029e0:	20000684 	.word	0x20000684
 80029e4:	20000014 	.word	0x20000014

080029e8 <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	460a      	mov	r2, r1
 80029f2:	80fb      	strh	r3, [r7, #6]
 80029f4:	4613      	mov	r3, r2
 80029f6:	80bb      	strh	r3, [r7, #4]

    if (pwmL > 0) {
 80029f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dd09      	ble.n	8002a14 <motorPwmOut+0x2c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <motorPwmOut+0xc4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmL);
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <motorPwmOut+0xc4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
 8002a12:	e01b      	b.n	8002a4c <motorPwmOut+0x64>
    } else if (pwmL == 0) {
 8002a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <motorPwmOut+0x4a>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <motorPwmOut+0xc4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <motorPwmOut+0xc4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a30:	e00c      	b.n	8002a4c <motorPwmOut+0x64>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwmL));
 8002a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bfb8      	it	lt
 8002a3a:	425b      	neglt	r3, r3
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <motorPwmOut+0xc4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <motorPwmOut+0xc4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    if (pwmR > 0) {
 8002a4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	dd09      	ble.n	8002a68 <motorPwmOut+0x80>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <motorPwmOut+0xc4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmR);
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <motorPwmOut+0xc4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a64:	63da      	str	r2, [r3, #60]	; 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
    }

}
 8002a66:	e01b      	b.n	8002aa0 <motorPwmOut+0xb8>
    } else if (pwmR == 0) {
 8002a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <motorPwmOut+0x9e>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <motorPwmOut+0xc4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <motorPwmOut+0xc4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a84:	e00c      	b.n	8002aa0 <motorPwmOut+0xb8>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwmR));
 8002a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bfb8      	it	lt
 8002a8e:	425b      	neglt	r3, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <motorPwmOut+0xc4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <motorPwmOut+0xc4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	200004c8 	.word	0x200004c8

08002ab0 <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	460a      	mov	r2, r1
 8002aba:	80fb      	strh	r3, [r7, #6]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80bb      	strh	r3, [r7, #4]
	int16_t pwmR, pwmL;

	if (tPwm > 0) {
 8002ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	dd14      	ble.n	8002af2 <motorPwmOutSynth+0x42>
		pwmR = sPwm - abs(tPwm);
 8002ac8:	88ba      	ldrh	r2, [r7, #4]
 8002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfb8      	it	lt
 8002ad2:	425b      	neglt	r3, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm + abs(tPwm);
 8002adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bfb8      	it	lt
 8002ae4:	425b      	neglt	r3, r3
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	88bb      	ldrh	r3, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	81bb      	strh	r3, [r7, #12]
 8002af0:	e013      	b.n	8002b1a <motorPwmOutSynth+0x6a>
	} else {
		pwmR = sPwm + abs(tPwm);
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bfb8      	it	lt
 8002afa:	425b      	neglt	r3, r3
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	81fb      	strh	r3, [r7, #14]
		pwmL = sPwm - abs(tPwm);
 8002b06:	88ba      	ldrh	r2, [r7, #4]
 8002b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bfb8      	it	lt
 8002b10:	425b      	neglt	r3, r3
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	81bb      	strh	r3, [r7, #12]
	}
	motorPwmOut(pwmL, pwmR);
 8002b1a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5f 	bl	80029e8 <motorPwmOut>
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af02      	add	r7, sp, #8
	int16_t i, j, k;
	
	// ディップスイッチで項目選択
	// if ( cntSW >= 100 ) {
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	switch ( swValRotary ) {
 8002b3a:	4bad      	ldr	r3, [pc, #692]	; (8002df0 <setup+0x2bc>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	f200 84d3 	bhi.w	80034ea <setup+0x9b6>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <setup+0x18>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	080034eb 	.word	0x080034eb
 8002b58:	080034eb 	.word	0x080034eb
 8002b5c:	080034eb 	.word	0x080034eb
 8002b60:	08002cc9 	.word	0x08002cc9
 8002b64:	08002ebd 	.word	0x08002ebd
 8002b68:	08003035 	.word	0x08003035
 8002b6c:	080034eb 	.word	0x080034eb
 8002b70:	080031bf 	.word	0x080031bf
		//------------------------------------------------------------------
		// スタート待ち
		//------------------------------------------------------------------
		case 0x0:
			data_select( &start, SW_PUSH );
 8002b74:	2102      	movs	r1, #2
 8002b76:	489f      	ldr	r0, [pc, #636]	; (8002df4 <setup+0x2c0>)
 8002b78:	f000 fcf0 	bl	800355c <data_select>
			lcdRowPrintf(UPROW, "start   ");
 8002b7c:	499e      	ldr	r1, [pc, #632]	; (8002df8 <setup+0x2c4>)
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fb98 	bl	80012b4 <lcdRowPrintf>
			lcdRowPrintf(LOWROW, "        ");
 8002b84:	499d      	ldr	r1, [pc, #628]	; (8002dfc <setup+0x2c8>)
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7fe fb94 	bl	80012b4 <lcdRowPrintf>
			break;
 8002b8c:	f000 bcc3 	b.w	8003516 <setup+0x9e2>
		//------------------------------------------------------------------
		// パラメータ調整(通常トレース)
		//------------------------------------------------------------------
		case 0x1:
			dataTuningLR( &pattern_parameter1, 1 );
 8002b90:	2101      	movs	r1, #1
 8002b92:	489b      	ldr	r0, [pc, #620]	; (8002e00 <setup+0x2cc>)
 8002b94:	f000 fd9c 	bl	80036d0 <dataTuningLR>
			
			if ( pattern_parameter1 == 6 ) pattern_parameter1 = 1;
 8002b98:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <setup+0x2cc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d103      	bne.n	8002ba8 <setup+0x74>
 8002ba0:	4b97      	ldr	r3, [pc, #604]	; (8002e00 <setup+0x2cc>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e006      	b.n	8002bb6 <setup+0x82>
			else if ( pattern_parameter1 == 0 ) pattern_parameter1 = 5;
 8002ba8:	4b95      	ldr	r3, [pc, #596]	; (8002e00 <setup+0x2cc>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <setup+0x82>
 8002bb0:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <setup+0x2cc>)
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_parameter1 ) {
 8002bb6:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <setup+0x2cc>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	f200 84a1 	bhi.w	8003504 <setup+0x9d0>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <setup+0x94>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002c0f 	.word	0x08002c0f
 8002bd0:	08002c41 	.word	0x08002c41
 8002bd4:	08002c73 	.word	0x08002c73
 8002bd8:	08002ca5 	.word	0x08002ca5
				case 1:
					// 通常走行速度
					lcdRowPrintf(UPROW, "STRAIGHT");
 8002bdc:	4989      	ldr	r1, [pc, #548]	; (8002e04 <setup+0x2d0>)
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7fe fb68 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STRAIGHT] / 10);
 8002be4:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <setup+0x2d4>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fcab 	bl	8000544 <__aeabi_ui2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b86      	ldr	r3, [pc, #536]	; (8002e0c <setup+0x2d8>)
 8002bf4:	f7fd fe4a 	bl	800088c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4984      	ldr	r1, [pc, #528]	; (8002e10 <setup+0x2dc>)
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fe fb58 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STRAIGHT], 1 );
 8002c04:	2101      	movs	r1, #1
 8002c06:	4880      	ldr	r0, [pc, #512]	; (8002e08 <setup+0x2d4>)
 8002c08:	f000 fcde 	bl	80035c8 <dataTuningUD>
					break;
 8002c0c:	e05a      	b.n	8002cc4 <setup+0x190>
				case 2:
					// 停止速度
					lcdRowPrintf(UPROW, "CURVE   ");
 8002c0e:	4981      	ldr	r1, [pc, #516]	; (8002e14 <setup+0x2e0>)
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe fb4f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVE] / 10);
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <setup+0x2d4>)
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc92 	bl	8000544 <__aeabi_ui2d>
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <setup+0x2d8>)
 8002c26:	f7fd fe31 	bl	800088c <__aeabi_ddiv>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4978      	ldr	r1, [pc, #480]	; (8002e10 <setup+0x2dc>)
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7fe fb3f 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVE], 1 );
 8002c36:	2101      	movs	r1, #1
 8002c38:	4877      	ldr	r0, [pc, #476]	; (8002e18 <setup+0x2e4>)
 8002c3a:	f000 fcc5 	bl	80035c8 <dataTuningUD>
					break;
 8002c3e:	e041      	b.n	8002cc4 <setup+0x190>
				case 3:
					// カーブブレーキ
					lcdRowPrintf(UPROW, "BRAKE   ");
 8002c40:	4976      	ldr	r1, [pc, #472]	; (8002e1c <setup+0x2e8>)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fb36 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_CURVEBREAK] / 10);
 8002c48:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <setup+0x2d4>)
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc79 	bl	8000544 <__aeabi_ui2d>
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <setup+0x2d8>)
 8002c58:	f7fd fe18 	bl	800088c <__aeabi_ddiv>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	496b      	ldr	r1, [pc, #428]	; (8002e10 <setup+0x2dc>)
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7fe fb26 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_CURVEBREAK], 1 );
 8002c68:	2101      	movs	r1, #1
 8002c6a:	486d      	ldr	r0, [pc, #436]	; (8002e20 <setup+0x2ec>)
 8002c6c:	f000 fcac 	bl	80035c8 <dataTuningUD>
					break;
 8002c70:	e028      	b.n	8002cc4 <setup+0x190>
				case 4:
					// 停止速度
					lcdRowPrintf(UPROW, "STOP    ");
 8002c72:	496c      	ldr	r1, [pc, #432]	; (8002e24 <setup+0x2f0>)
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fb1d 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %3gm/s", (double)paramSpeed[INDEX_STOP] / 10);
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <setup+0x2d4>)
 8002c7c:	789b      	ldrb	r3, [r3, #2]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc60 	bl	8000544 <__aeabi_ui2d>
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <setup+0x2d8>)
 8002c8a:	f7fd fdff 	bl	800088c <__aeabi_ddiv>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	495f      	ldr	r1, [pc, #380]	; (8002e10 <setup+0x2dc>)
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7fe fb0d 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &paramSpeed[INDEX_STOP], 1 );
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4862      	ldr	r0, [pc, #392]	; (8002e28 <setup+0x2f4>)
 8002c9e:	f000 fc93 	bl	80035c8 <dataTuningUD>
					break;
 8002ca2:	e00f      	b.n	8002cc4 <setup+0x190>
				case 5:
					// 停止速度
					lcdRowPrintf(UPROW, "enc     ");
 8002ca4:	4961      	ldr	r1, [pc, #388]	; (8002e2c <setup+0x2f8>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fb04 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "  %4d", encth);
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <setup+0x2fc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4960      	ldr	r1, [pc, #384]	; (8002e34 <setup+0x300>)
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fe fafd 	bl	80012b4 <lcdRowPrintf>
					
					dataTuningUD( &encth, 100 );
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	485c      	ldr	r0, [pc, #368]	; (8002e30 <setup+0x2fc>)
 8002cbe:	f000 fc83 	bl	80035c8 <dataTuningUD>
					break;
 8002cc2:	bf00      	nop
				
			}
			break;
 8002cc4:	f000 bc1e 	b.w	8003504 <setup+0x9d0>
		// 	break;
		//------------------------------------------------------------------
		// ゲイン調整(直線トレース)
		//------------------------------------------------------------------
		case 0x5:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002cc8:	495b      	ldr	r1, [pc, #364]	; (8002e38 <setup+0x304>)
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fe faf2 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	485a      	ldr	r0, [pc, #360]	; (8002e3c <setup+0x308>)
 8002cd4:	f000 fc42 	bl	800355c <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002cd8:	4b58      	ldr	r3, [pc, #352]	; (8002e3c <setup+0x308>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <setup+0x1c6>
				motorPwmOutSynth( tracePwm, 0 );
 8002ce0:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <setup+0x30c>)
 8002ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fee1 	bl	8002ab0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <setup+0x310>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf8:	e007      	b.n	8002d0a <setup+0x1d6>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff fed7 	bl	8002ab0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002d02:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <setup+0x310>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	484e      	ldr	r0, [pc, #312]	; (8002e48 <setup+0x314>)
 8002d0e:	f000 fcdf 	bl	80036d0 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002d12:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <setup+0x314>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d103      	bne.n	8002d22 <setup+0x1ee>
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <setup+0x314>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e006      	b.n	8002d30 <setup+0x1fc>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002d22:	4b49      	ldr	r3, [pc, #292]	; (8002e48 <setup+0x314>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <setup+0x1fc>
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <setup+0x314>)
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <setup+0x314>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	f000 8097 	beq.w	8002e68 <setup+0x334>
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	f300 83e4 	bgt.w	8003508 <setup+0x9d4>
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <setup+0x216>
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d029      	beq.n	8002d9c <setup+0x268>
					}
					
					dataTuningUD ( &kd1_buff, 1 );
					break;
			}
			break;
 8002d48:	e3de      	b.n	8003508 <setup+0x9d4>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002d4a:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <setup+0x318>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d52:	d302      	bcc.n	8002d5a <setup+0x226>
 8002d54:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <setup+0x318>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <setup+0x318>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	2bf9      	cmp	r3, #249	; 0xf9
 8002d60:	d809      	bhi.n	8002d76 <setup+0x242>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1_buff, kd1_buff);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <setup+0x31c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <setup+0x320>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	493a      	ldr	r1, [pc, #232]	; (8002e58 <setup+0x324>)
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7fe faa0 	bl	80012b4 <lcdRowPrintf>
 8002d74:	e00d      	b.n	8002d92 <setup+0x25e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <setup+0x328>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <setup+0x31c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <setup+0x320>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4935      	ldr	r1, [pc, #212]	; (8002e60 <setup+0x32c>)
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f7fe fa91 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1_buff, 1 );
 8002d92:	2101      	movs	r1, #1
 8002d94:	4831      	ldr	r0, [pc, #196]	; (8002e5c <setup+0x328>)
 8002d96:	f000 fc17 	bl	80035c8 <dataTuningUD>
					break;
 8002d9a:	e08e      	b.n	8002eba <setup+0x386>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <setup+0x318>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002da4:	d302      	bcc.n	8002dac <setup+0x278>
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <setup+0x318>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <setup+0x318>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2bf9      	cmp	r3, #249	; 0xf9
 8002db2:	d809      	bhi.n	8002dc8 <setup+0x294>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1_buff, kd1_buff);
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <setup+0x328>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <setup+0x320>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4929      	ldr	r1, [pc, #164]	; (8002e64 <setup+0x330>)
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7fe fa77 	bl	80012b4 <lcdRowPrintf>
 8002dc6:	e00d      	b.n	8002de4 <setup+0x2b0>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <setup+0x328>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <setup+0x31c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <setup+0x320>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4920      	ldr	r1, [pc, #128]	; (8002e60 <setup+0x32c>)
 8002dde:	2001      	movs	r0, #1
 8002de0:	f7fe fa68 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1_buff, 1 );
 8002de4:	2101      	movs	r1, #1
 8002de6:	481a      	ldr	r0, [pc, #104]	; (8002e50 <setup+0x31c>)
 8002de8:	f000 fbee 	bl	80035c8 <dataTuningUD>
					break;
 8002dec:	e065      	b.n	8002eba <setup+0x386>
 8002dee:	bf00      	nop
 8002df0:	200006a2 	.word	0x200006a2
 8002df4:	20000690 	.word	0x20000690
 8002df8:	0800d674 	.word	0x0800d674
 8002dfc:	0800d680 	.word	0x0800d680
 8002e00:	20000019 	.word	0x20000019
 8002e04:	0800d68c 	.word	0x0800d68c
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	40240000 	.word	0x40240000
 8002e10:	0800d698 	.word	0x0800d698
 8002e14:	0800d6a4 	.word	0x0800d6a4
 8002e18:	20000007 	.word	0x20000007
 8002e1c:	0800d6b0 	.word	0x0800d6b0
 8002e20:	20000005 	.word	0x20000005
 8002e24:	0800d6bc 	.word	0x0800d6bc
 8002e28:	20000006 	.word	0x20000006
 8002e2c:	0800d6c8 	.word	0x0800d6c8
 8002e30:	20000014 	.word	0x20000014
 8002e34:	0800d6d4 	.word	0x0800d6d4
 8002e38:	0800d6dc 	.word	0x0800d6dc
 8002e3c:	200006a0 	.word	0x200006a0
 8002e40:	2000030a 	.word	0x2000030a
 8002e44:	20000510 	.word	0x20000510
 8002e48:	2000001a 	.word	0x2000001a
 8002e4c:	20000692 	.word	0x20000692
 8002e50:	20000318 	.word	0x20000318
 8002e54:	2000000f 	.word	0x2000000f
 8002e58:	0800d6e8 	.word	0x0800d6e8
 8002e5c:	2000000e 	.word	0x2000000e
 8002e60:	0800d6f4 	.word	0x0800d6f4
 8002e64:	0800d700 	.word	0x0800d700
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002e68:	4b98      	ldr	r3, [pc, #608]	; (80030cc <setup+0x598>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e70:	d302      	bcc.n	8002e78 <setup+0x344>
 8002e72:	4b96      	ldr	r3, [pc, #600]	; (80030cc <setup+0x598>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002e78:	4b94      	ldr	r3, [pc, #592]	; (80030cc <setup+0x598>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	2bf9      	cmp	r3, #249	; 0xf9
 8002e7e:	d809      	bhi.n	8002e94 <setup+0x360>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1_buff, ki1_buff);
 8002e80:	4b93      	ldr	r3, [pc, #588]	; (80030d0 <setup+0x59c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b93      	ldr	r3, [pc, #588]	; (80030d4 <setup+0x5a0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4993      	ldr	r1, [pc, #588]	; (80030d8 <setup+0x5a4>)
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fe fa11 	bl	80012b4 <lcdRowPrintf>
 8002e92:	e00d      	b.n	8002eb0 <setup+0x37c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1_buff, ki1_buff, kd1_buff);
 8002e94:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <setup+0x59c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b8e      	ldr	r3, [pc, #568]	; (80030d4 <setup+0x5a0>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4b8e      	ldr	r3, [pc, #568]	; (80030dc <setup+0x5a8>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	498d      	ldr	r1, [pc, #564]	; (80030e0 <setup+0x5ac>)
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7fe fa02 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1_buff, 1 );
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	488a      	ldr	r0, [pc, #552]	; (80030dc <setup+0x5a8>)
 8002eb4:	f000 fb88 	bl	80035c8 <dataTuningUD>
					break;
 8002eb8:	bf00      	nop
			break;
 8002eba:	e325      	b.n	8003508 <setup+0x9d4>
		//------------------------------------------------------------------
		// ゲイン調整(カーブトレース)
		//------------------------------------------------------------------
		case 0x6:
			lcdRowPrintf(UPROW, "kp ki kd");
 8002ebc:	4989      	ldr	r1, [pc, #548]	; (80030e4 <setup+0x5b0>)
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fe f9f8 	bl	80012b4 <lcdRowPrintf>
			
			data_select( &trace_test, SW_PUSH );
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4888      	ldr	r0, [pc, #544]	; (80030e8 <setup+0x5b4>)
 8002ec8:	f000 fb48 	bl	800355c <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 8002ecc:	4b86      	ldr	r3, [pc, #536]	; (80030e8 <setup+0x5b4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <setup+0x3ba>
				motorPwmOutSynth( tracePwm, 0 );
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <setup+0x5b8>)
 8002ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fde7 	bl	8002ab0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002ee2:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <setup+0x5bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34
 8002eec:	e007      	b.n	8002efe <setup+0x3ca>
			} else {
				motorPwmOutSynth( 0, 0 );
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7ff fddd 	bl	8002ab0 <motorPwmOutSynth>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002ef6:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <setup+0x5bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
			}
			
			dataTuningLR( &pattern_gain, 1 );
 8002efe:	2101      	movs	r1, #1
 8002f00:	487c      	ldr	r0, [pc, #496]	; (80030f4 <setup+0x5c0>)
 8002f02:	f000 fbe5 	bl	80036d0 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <setup+0x5c0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d103      	bne.n	8002f16 <setup+0x3e2>
 8002f0e:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <setup+0x5c0>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e006      	b.n	8002f24 <setup+0x3f0>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8002f16:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <setup+0x5c0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <setup+0x3f0>
 8002f1e:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <setup+0x5c0>)
 8002f20:	2203      	movs	r2, #3
 8002f22:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8002f24:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <setup+0x5c0>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d059      	beq.n	8002fe0 <setup+0x4ac>
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	f300 82ed 	bgt.w	800350c <setup+0x9d8>
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d002      	beq.n	8002f3c <setup+0x408>
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d029      	beq.n	8002f8e <setup+0x45a>
					}
					
					dataTuningUD ( &kd1Curve_buff, 1 );
					break;
			}
			break;
 8002f3a:	e2e7      	b.n	800350c <setup+0x9d8>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002f3c:	4b63      	ldr	r3, [pc, #396]	; (80030cc <setup+0x598>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f44:	d302      	bcc.n	8002f4c <setup+0x418>
 8002f46:	4b61      	ldr	r3, [pc, #388]	; (80030cc <setup+0x598>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <setup+0x598>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	2bf9      	cmp	r3, #249	; 0xf9
 8002f52:	d809      	bhi.n	8002f68 <setup+0x434>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki1Curve_buff, kd1Curve_buff);
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <setup+0x5c4>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <setup+0x5c8>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	4968      	ldr	r1, [pc, #416]	; (8003100 <setup+0x5cc>)
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fe f9a7 	bl	80012b4 <lcdRowPrintf>
 8002f66:	e00d      	b.n	8002f84 <setup+0x450>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8002f68:	4b66      	ldr	r3, [pc, #408]	; (8003104 <setup+0x5d0>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <setup+0x5c4>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <setup+0x5c8>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4958      	ldr	r1, [pc, #352]	; (80030e0 <setup+0x5ac>)
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fe f998 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp1Curve_buff, 1 );
 8002f84:	2101      	movs	r1, #1
 8002f86:	485f      	ldr	r0, [pc, #380]	; (8003104 <setup+0x5d0>)
 8002f88:	f000 fb1e 	bl	80035c8 <dataTuningUD>
					break;
 8002f8c:	e051      	b.n	8003032 <setup+0x4fe>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002f8e:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <setup+0x598>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f96:	d302      	bcc.n	8002f9e <setup+0x46a>
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <setup+0x598>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002f9e:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <setup+0x598>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	2bf9      	cmp	r3, #249	; 0xf9
 8002fa4:	d809      	bhi.n	8002fba <setup+0x486>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp1Curve_buff, kd1Curve_buff);
 8002fa6:	4b57      	ldr	r3, [pc, #348]	; (8003104 <setup+0x5d0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <setup+0x5c8>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4955      	ldr	r1, [pc, #340]	; (8003108 <setup+0x5d4>)
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7fe f97e 	bl	80012b4 <lcdRowPrintf>
 8002fb8:	e00d      	b.n	8002fd6 <setup+0x4a2>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 8002fba:	4b52      	ldr	r3, [pc, #328]	; (8003104 <setup+0x5d0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b4d      	ldr	r3, [pc, #308]	; (80030f8 <setup+0x5c4>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <setup+0x5c8>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4944      	ldr	r1, [pc, #272]	; (80030e0 <setup+0x5ac>)
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fe f96f 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki1Curve_buff, 1 );
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4847      	ldr	r0, [pc, #284]	; (80030f8 <setup+0x5c4>)
 8002fda:	f000 faf5 	bl	80035c8 <dataTuningUD>
					break;
 8002fde:	e028      	b.n	8003032 <setup+0x4fe>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <setup+0x598>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fe8:	d302      	bcc.n	8002ff0 <setup+0x4bc>
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <setup+0x598>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <setup+0x598>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2bf9      	cmp	r3, #249	; 0xf9
 8002ff6:	d809      	bhi.n	800300c <setup+0x4d8>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp1Curve_buff, ki1Curve_buff);
 8002ff8:	4b42      	ldr	r3, [pc, #264]	; (8003104 <setup+0x5d0>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <setup+0x5c4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4935      	ldr	r1, [pc, #212]	; (80030d8 <setup+0x5a4>)
 8003004:	2001      	movs	r0, #1
 8003006:	f7fe f955 	bl	80012b4 <lcdRowPrintf>
 800300a:	e00d      	b.n	8003028 <setup+0x4f4>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp1Curve_buff, ki1Curve_buff, kd1Curve_buff);
 800300c:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <setup+0x5d0>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <setup+0x5c4>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
 8003018:	4b38      	ldr	r3, [pc, #224]	; (80030fc <setup+0x5c8>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	460b      	mov	r3, r1
 8003020:	492f      	ldr	r1, [pc, #188]	; (80030e0 <setup+0x5ac>)
 8003022:	2001      	movs	r0, #1
 8003024:	f7fe f946 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd1Curve_buff, 1 );
 8003028:	2101      	movs	r1, #1
 800302a:	4834      	ldr	r0, [pc, #208]	; (80030fc <setup+0x5c8>)
 800302c:	f000 facc 	bl	80035c8 <dataTuningUD>
					break;
 8003030:	bf00      	nop
			break;
 8003032:	e26b      	b.n	800350c <setup+0x9d8>
		//------------------------------------------------------------------
		// ゲイン調整(速度)
		//------------------------------------------------------------------
		case 0x7:
			lcdRowPrintf(UPROW, "kp ki kd");
 8003034:	492b      	ldr	r1, [pc, #172]	; (80030e4 <setup+0x5b0>)
 8003036:	2000      	movs	r0, #0
 8003038:	f7fe f93c 	bl	80012b4 <lcdRowPrintf>
			
			// data_select( &trace_test, SW_PUSH );
			
			dataTuningLR( &pattern_gain, 1 );
 800303c:	2101      	movs	r1, #1
 800303e:	482d      	ldr	r0, [pc, #180]	; (80030f4 <setup+0x5c0>)
 8003040:	f000 fb46 	bl	80036d0 <dataTuningLR>
			if ( pattern_gain == 4 ) pattern_gain = 1;
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <setup+0x5c0>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d103      	bne.n	8003054 <setup+0x520>
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <setup+0x5c0>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e006      	b.n	8003062 <setup+0x52e>
			else if ( pattern_gain == 0 ) pattern_gain = 3;
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <setup+0x5c0>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <setup+0x52e>
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <setup+0x5c0>)
 800305e:	2203      	movs	r2, #3
 8003060:	701a      	strb	r2, [r3, #0]
			
			switch( pattern_gain ) {
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <setup+0x5c0>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d07f      	beq.n	800316a <setup+0x636>
 800306a:	2b03      	cmp	r3, #3
 800306c:	f300 8250 	bgt.w	8003510 <setup+0x9dc>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <setup+0x546>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d04f      	beq.n	8003118 <setup+0x5e4>
					}
					
					dataTuningUD ( &kd2_buff, 1 );
					break;
			}
			break;
 8003078:	e24a      	b.n	8003510 <setup+0x9dc>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <setup+0x598>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003082:	d302      	bcc.n	800308a <setup+0x556>
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <setup+0x598>)
 8003086:	2200      	movs	r2, #0
 8003088:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <setup+0x598>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	2bf9      	cmp	r3, #249	; 0xf9
 8003090:	d809      	bhi.n	80030a6 <setup+0x572>
						lcdRowPrintf(LOWROW, "   %2d %2d", ki2_buff, kd2_buff);
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <setup+0x5d8>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <setup+0x5dc>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4918      	ldr	r1, [pc, #96]	; (8003100 <setup+0x5cc>)
 800309e:	2001      	movs	r0, #1
 80030a0:	f7fe f908 	bl	80012b4 <lcdRowPrintf>
 80030a4:	e00d      	b.n	80030c2 <setup+0x58e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <setup+0x5e0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <setup+0x5d8>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <setup+0x5dc>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	4909      	ldr	r1, [pc, #36]	; (80030e0 <setup+0x5ac>)
 80030bc:	2001      	movs	r0, #1
 80030be:	f7fe f8f9 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kp2_buff, 1 );
 80030c2:	2101      	movs	r1, #1
 80030c4:	4813      	ldr	r0, [pc, #76]	; (8003114 <setup+0x5e0>)
 80030c6:	f000 fa7f 	bl	80035c8 <dataTuningUD>
					break;
 80030ca:	e077      	b.n	80031bc <setup+0x688>
 80030cc:	20000692 	.word	0x20000692
 80030d0:	2000000e 	.word	0x2000000e
 80030d4:	20000318 	.word	0x20000318
 80030d8:	0800d70c 	.word	0x0800d70c
 80030dc:	2000000f 	.word	0x2000000f
 80030e0:	0800d6f4 	.word	0x0800d6f4
 80030e4:	0800d6dc 	.word	0x0800d6dc
 80030e8:	200006a0 	.word	0x200006a0
 80030ec:	2000030a 	.word	0x2000030a
 80030f0:	20000510 	.word	0x20000510
 80030f4:	2000001a 	.word	0x2000001a
 80030f8:	20000319 	.word	0x20000319
 80030fc:	20000011 	.word	0x20000011
 8003100:	0800d6e8 	.word	0x0800d6e8
 8003104:	20000010 	.word	0x20000010
 8003108:	0800d700 	.word	0x0800d700
 800310c:	20000025 	.word	0x20000025
 8003110:	200006d9 	.word	0x200006d9
 8003114:	20000024 	.word	0x20000024
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 8003118:	4bad      	ldr	r3, [pc, #692]	; (80033d0 <setup+0x89c>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003120:	d302      	bcc.n	8003128 <setup+0x5f4>
 8003122:	4bab      	ldr	r3, [pc, #684]	; (80033d0 <setup+0x89c>)
 8003124:	2200      	movs	r2, #0
 8003126:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 8003128:	4ba9      	ldr	r3, [pc, #676]	; (80033d0 <setup+0x89c>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2bf9      	cmp	r3, #249	; 0xf9
 800312e:	d809      	bhi.n	8003144 <setup+0x610>
						lcdRowPrintf(LOWROW, "%2d    %2d", kp2_buff, kd2_buff);
 8003130:	4ba8      	ldr	r3, [pc, #672]	; (80033d4 <setup+0x8a0>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4ba8      	ldr	r3, [pc, #672]	; (80033d8 <setup+0x8a4>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	49a8      	ldr	r1, [pc, #672]	; (80033dc <setup+0x8a8>)
 800313c:	2001      	movs	r0, #1
 800313e:	f7fe f8b9 	bl	80012b4 <lcdRowPrintf>
 8003142:	e00d      	b.n	8003160 <setup+0x62c>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003144:	4ba3      	ldr	r3, [pc, #652]	; (80033d4 <setup+0x8a0>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4ba5      	ldr	r3, [pc, #660]	; (80033e0 <setup+0x8ac>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	4ba1      	ldr	r3, [pc, #644]	; (80033d8 <setup+0x8a4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	460b      	mov	r3, r1
 8003158:	49a2      	ldr	r1, [pc, #648]	; (80033e4 <setup+0x8b0>)
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe f8aa 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &ki2_buff, 1 );
 8003160:	2101      	movs	r1, #1
 8003162:	489f      	ldr	r0, [pc, #636]	; (80033e0 <setup+0x8ac>)
 8003164:	f000 fa30 	bl	80035c8 <dataTuningUD>
					break;
 8003168:	e028      	b.n	80031bc <setup+0x688>
					if ( cntSetup1 >= 500 ) cntSetup1 = 0;
 800316a:	4b99      	ldr	r3, [pc, #612]	; (80033d0 <setup+0x89c>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003172:	d302      	bcc.n	800317a <setup+0x646>
 8003174:	4b96      	ldr	r3, [pc, #600]	; (80033d0 <setup+0x89c>)
 8003176:	2200      	movs	r2, #0
 8003178:	801a      	strh	r2, [r3, #0]
					if ( cntSetup1 < 250 ) {
 800317a:	4b95      	ldr	r3, [pc, #596]	; (80033d0 <setup+0x89c>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2bf9      	cmp	r3, #249	; 0xf9
 8003180:	d809      	bhi.n	8003196 <setup+0x662>
						lcdRowPrintf(LOWROW, "%2d %2d   ", kp2_buff, ki2_buff);
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <setup+0x8a0>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b95      	ldr	r3, [pc, #596]	; (80033e0 <setup+0x8ac>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4996      	ldr	r1, [pc, #600]	; (80033e8 <setup+0x8b4>)
 800318e:	2001      	movs	r0, #1
 8003190:	f7fe f890 	bl	80012b4 <lcdRowPrintf>
 8003194:	e00d      	b.n	80031b2 <setup+0x67e>
						lcdRowPrintf(LOWROW, "%2d %2d %2d", kp2_buff, ki2_buff, kd2_buff);
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <setup+0x8a0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	4b90      	ldr	r3, [pc, #576]	; (80033e0 <setup+0x8ac>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <setup+0x8a4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	498e      	ldr	r1, [pc, #568]	; (80033e4 <setup+0x8b0>)
 80031ac:	2001      	movs	r0, #1
 80031ae:	f7fe f881 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &kd2_buff, 1 );
 80031b2:	2101      	movs	r1, #1
 80031b4:	4888      	ldr	r0, [pc, #544]	; (80033d8 <setup+0x8a4>)
 80031b6:	f000 fa07 	bl	80035c8 <dataTuningUD>
					break;
 80031ba:	bf00      	nop
			break;
 80031bc:	e1a8      	b.n	8003510 <setup+0x9dc>
		// 	break;
		//------------------------------------------------------------------
		// Motor_test
		//------------------------------------------------------------------
		case 0x9:
			dataTuningLR( &pattern_sensor, 1 );
 80031be:	2101      	movs	r1, #1
 80031c0:	488a      	ldr	r0, [pc, #552]	; (80033ec <setup+0x8b8>)
 80031c2:	f000 fa85 	bl	80036d0 <dataTuningLR>
			
			if ( pattern_sensor == 13 ) pattern_sensor = 1;
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <setup+0x8b8>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b0d      	cmp	r3, #13
 80031cc:	d103      	bne.n	80031d6 <setup+0x6a2>
 80031ce:	4b87      	ldr	r3, [pc, #540]	; (80033ec <setup+0x8b8>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e006      	b.n	80031e4 <setup+0x6b0>
			else if ( pattern_sensor == 0 ) pattern_sensor = 12;
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <setup+0x8b8>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <setup+0x6b0>
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <setup+0x8b8>)
 80031e0:	220c      	movs	r2, #12
 80031e2:	701a      	strb	r2, [r3, #0]

			switch( pattern_sensor ) {
 80031e4:	4b81      	ldr	r3, [pc, #516]	; (80033ec <setup+0x8b8>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	2b0b      	cmp	r3, #11
 80031ec:	f200 8192 	bhi.w	8003514 <setup+0x9e0>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <setup+0x6c4>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003229 	.word	0x08003229
 80031fc:	08003271 	.word	0x08003271
 8003200:	0800329f 	.word	0x0800329f
 8003204:	080032ef 	.word	0x080032ef
 8003208:	08003309 	.word	0x08003309
 800320c:	08003331 	.word	0x08003331
 8003210:	08003359 	.word	0x08003359
 8003214:	08003381 	.word	0x08003381
 8003218:	080033a9 	.word	0x080033a9
 800321c:	08003455 	.word	0x08003455
 8003220:	0800347d 	.word	0x0800347d
 8003224:	080034b5 	.word	0x080034b5
				case 1:
					// LED
					lcdRowPrintf(UPROW, "LED     ");
 8003228:	4971      	ldr	r1, [pc, #452]	; (80033f0 <setup+0x8bc>)
 800322a:	2000      	movs	r0, #0
 800322c:	f7fe f842 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "        ");
 8003230:	4970      	ldr	r1, [pc, #448]	; (80033f4 <setup+0x8c0>)
 8003232:	2001      	movs	r0, #1
 8003234:	f7fe f83e 	bl	80012b4 <lcdRowPrintf>
					cnt_led = 0x00;
 8003238:	2300      	movs	r3, #0
 800323a:	71fb      	strb	r3, [r7, #7]
					if ( swValTact == SW_PUSH) {
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <setup+0x8c4>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	f040 814e 	bne.w	80034e2 <setup+0x9ae>
						cnt_led = 0x00;
 8003246:	2300      	movs	r3, #0
 8003248:	71fb      	strb	r3, [r7, #7]
						while( cnt_led <= 0x7 ) {
 800324a:	e00a      	b.n	8003262 <setup+0x72e>
							ledOut( cnt_led );
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fb12 	bl	8001878 <ledOut>
							cnt_led++;
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	3301      	adds	r3, #1
 8003258:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(400);
 800325a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800325e:	f001 f9c9 	bl	80045f4 <HAL_Delay>
						while( cnt_led <= 0x7 ) {
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b07      	cmp	r3, #7
 8003266:	d9f1      	bls.n	800324c <setup+0x718>
						}
						ledOut( 0 );
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe fb05 	bl	8001878 <ledOut>
					}
					break;
 800326e:	e138      	b.n	80034e2 <setup+0x9ae>
									
				case 2:
					// エンコーダ
					lcdRowPrintf(UPROW, "R %6d",encTotalR);
 8003270:	4b62      	ldr	r3, [pc, #392]	; (80033fc <setup+0x8c8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4962      	ldr	r1, [pc, #392]	; (8003400 <setup+0x8cc>)
 8003278:	2000      	movs	r0, #0
 800327a:	f7fe f81b 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L %6d",encTotalN);
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <setup+0x8d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4960      	ldr	r1, [pc, #384]	; (8003408 <setup+0x8d4>)
 8003286:	2001      	movs	r0, #1
 8003288:	f7fe f814 	bl	80012b4 <lcdRowPrintf>

					if(swValTact == SW_PUSH) encTotalN = 0;
 800328c:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <setup+0x8c4>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 8128 	bne.w	80034e6 <setup+0x9b2>
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <setup+0x8d0>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
					break;
 800329c:	e123      	b.n	80034e6 <setup+0x9b2>
							
				case 3:
					// モーターテスト
					lcdRowPrintf(UPROW, "Motor   ");
 800329e:	495b      	ldr	r1, [pc, #364]	; (800340c <setup+0x8d8>)
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fe f807 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %4d%%",motorTestPwm);
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <setup+0x8dc>)
 80032a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4959      	ldr	r1, [pc, #356]	; (8003414 <setup+0x8e0>)
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7fd ffff 	bl	80012b4 <lcdRowPrintf>
					dataTuningUD ( &motorTestPwm, 100 );
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	4855      	ldr	r0, [pc, #340]	; (8003410 <setup+0x8dc>)
 80032ba:	f000 f985 	bl	80035c8 <dataTuningUD>
					if ( motor_test == 1 ) {
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <setup+0x8e4>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10a      	bne.n	80032dc <setup+0x7a8>
						motorPwmOut(motorTestPwm,motorTestPwm);
 80032c6:	4b52      	ldr	r3, [pc, #328]	; (8003410 <setup+0x8dc>)
 80032c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032cc:	4a50      	ldr	r2, [pc, #320]	; (8003410 <setup+0x8dc>)
 80032ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fb87 	bl	80029e8 <motorPwmOut>
 80032da:	e003      	b.n	80032e4 <setup+0x7b0>
					} else {
						motorPwmOut(0, 0);
 80032dc:	2100      	movs	r1, #0
 80032de:	2000      	movs	r0, #0
 80032e0:	f7ff fb82 	bl	80029e8 <motorPwmOut>
					}
					
					data_select( &motor_test, SW_PUSH );
 80032e4:	2102      	movs	r1, #2
 80032e6:	484c      	ldr	r0, [pc, #304]	; (8003418 <setup+0x8e4>)
 80032e8:	f000 f938 	bl	800355c <data_select>
					break;
 80032ec:	e0fc      	b.n	80034e8 <setup+0x9b4>

				case 4:
					// マーカーセンサ
					lcdRowPrintf(UPROW, "Marker  ");
 80032ee:	494b      	ldr	r1, [pc, #300]	; (800341c <setup+0x8e8>)
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd ffdf 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "     0x%x", getMarkerSensor());
 80032f6:	f7ff faed 	bl	80028d4 <getMarkerSensor>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4948      	ldr	r1, [pc, #288]	; (8003420 <setup+0x8ec>)
 8003300:	2001      	movs	r0, #1
 8003302:	f7fd ffd7 	bl	80012b4 <lcdRowPrintf>
					break;
 8003306:	e0ef      	b.n	80034e8 <setup+0x9b4>

				case 5:
					lcdRowPrintf(UPROW, "L1  %4d",lSensor[0]);
 8003308:	4b46      	ldr	r3, [pc, #280]	; (8003424 <setup+0x8f0>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4946      	ldr	r1, [pc, #280]	; (8003428 <setup+0x8f4>)
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd ffcf 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L2  %4d",lSensor[1]);
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <setup+0x8f0>)
 8003318:	885b      	ldrh	r3, [r3, #2]
 800331a:	461a      	mov	r2, r3
 800331c:	4943      	ldr	r1, [pc, #268]	; (800342c <setup+0x8f8>)
 800331e:	2001      	movs	r0, #1
 8003320:	f7fd ffc8 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <setup+0x8fc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800332e:	e0db      	b.n	80034e8 <setup+0x9b4>

				case 6:
					lcdRowPrintf(UPROW, "L3  %4d",lSensor[2]);
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <setup+0x8f0>)
 8003332:	889b      	ldrh	r3, [r3, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	493f      	ldr	r1, [pc, #252]	; (8003434 <setup+0x900>)
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd ffbb 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L4  %4d",lSensor[3]);
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <setup+0x8f0>)
 8003340:	88db      	ldrh	r3, [r3, #6]
 8003342:	461a      	mov	r2, r3
 8003344:	493c      	ldr	r1, [pc, #240]	; (8003438 <setup+0x904>)
 8003346:	2001      	movs	r0, #1
 8003348:	f7fd ffb4 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800334c:	4b38      	ldr	r3, [pc, #224]	; (8003430 <setup+0x8fc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003356:	e0c7      	b.n	80034e8 <setup+0x9b4>

				case 7:
					lcdRowPrintf(UPROW, "L5  %4d",lSensor[4]);
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <setup+0x8f0>)
 800335a:	891b      	ldrh	r3, [r3, #8]
 800335c:	461a      	mov	r2, r3
 800335e:	4937      	ldr	r1, [pc, #220]	; (800343c <setup+0x908>)
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd ffa7 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "L6  %4d",lSensor[5]);
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <setup+0x8f0>)
 8003368:	895b      	ldrh	r3, [r3, #10]
 800336a:	461a      	mov	r2, r3
 800336c:	4934      	ldr	r1, [pc, #208]	; (8003440 <setup+0x90c>)
 800336e:	2001      	movs	r0, #1
 8003370:	f7fd ffa0 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <setup+0x8fc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800337e:	e0b3      	b.n	80034e8 <setup+0x9b4>
				
				case 8:
					lcdRowPrintf(UPROW, "R1  %4d",lSensor[11]);
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <setup+0x8f0>)
 8003382:	8adb      	ldrh	r3, [r3, #22]
 8003384:	461a      	mov	r2, r3
 8003386:	492f      	ldr	r1, [pc, #188]	; (8003444 <setup+0x910>)
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd ff93 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R2  %4d",lSensor[10]);
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <setup+0x8f0>)
 8003390:	8a9b      	ldrh	r3, [r3, #20]
 8003392:	461a      	mov	r2, r3
 8003394:	492c      	ldr	r1, [pc, #176]	; (8003448 <setup+0x914>)
 8003396:	2001      	movs	r0, #1
 8003398:	f7fd ff8c 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <setup+0x8fc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80033a6:	e09f      	b.n	80034e8 <setup+0x9b4>

				case 9:
					lcdRowPrintf(UPROW, "R3  %4d",lSensor[9]);
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <setup+0x8f0>)
 80033aa:	8a5b      	ldrh	r3, [r3, #18]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4927      	ldr	r1, [pc, #156]	; (800344c <setup+0x918>)
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd ff7f 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R4  %4d",lSensor[8]);
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <setup+0x8f0>)
 80033b8:	8a1b      	ldrh	r3, [r3, #16]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4924      	ldr	r1, [pc, #144]	; (8003450 <setup+0x91c>)
 80033be:	2001      	movs	r0, #1
 80033c0:	f7fd ff78 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <setup+0x8fc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80033ce:	e08b      	b.n	80034e8 <setup+0x9b4>
 80033d0:	20000692 	.word	0x20000692
 80033d4:	20000024 	.word	0x20000024
 80033d8:	200006d9 	.word	0x200006d9
 80033dc:	0800d700 	.word	0x0800d700
 80033e0:	20000025 	.word	0x20000025
 80033e4:	0800d6f4 	.word	0x0800d6f4
 80033e8:	0800d70c 	.word	0x0800d70c
 80033ec:	20000018 	.word	0x20000018
 80033f0:	0800d718 	.word	0x0800d718
 80033f4:	0800d680 	.word	0x0800d680
 80033f8:	200006a1 	.word	0x200006a1
 80033fc:	20000274 	.word	0x20000274
 8003400:	0800d724 	.word	0x0800d724
 8003404:	2000027c 	.word	0x2000027c
 8003408:	0800d72c 	.word	0x0800d72c
 800340c:	0800d734 	.word	0x0800d734
 8003410:	2000001c 	.word	0x2000001c
 8003414:	0800d740 	.word	0x0800d740
 8003418:	2000069f 	.word	0x2000069f
 800341c:	0800d74c 	.word	0x0800d74c
 8003420:	0800d758 	.word	0x0800d758
 8003424:	200002b4 	.word	0x200002b4
 8003428:	0800d764 	.word	0x0800d764
 800342c:	0800d76c 	.word	0x0800d76c
 8003430:	20000510 	.word	0x20000510
 8003434:	0800d774 	.word	0x0800d774
 8003438:	0800d77c 	.word	0x0800d77c
 800343c:	0800d784 	.word	0x0800d784
 8003440:	0800d78c 	.word	0x0800d78c
 8003444:	0800d794 	.word	0x0800d794
 8003448:	0800d79c 	.word	0x0800d79c
 800344c:	0800d7a4 	.word	0x0800d7a4
 8003450:	0800d7ac 	.word	0x0800d7ac

				case 10:
					lcdRowPrintf(UPROW, "R5  %4d",lSensor[7]);
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <setup+0x9ec>)
 8003456:	89db      	ldrh	r3, [r3, #14]
 8003458:	461a      	mov	r2, r3
 800345a:	4932      	ldr	r1, [pc, #200]	; (8003524 <setup+0x9f0>)
 800345c:	2000      	movs	r0, #0
 800345e:	f7fd ff29 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "R6  %4d",lSensor[6]);
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <setup+0x9ec>)
 8003464:	899b      	ldrh	r3, [r3, #12]
 8003466:	461a      	mov	r2, r3
 8003468:	492f      	ldr	r1, [pc, #188]	; (8003528 <setup+0x9f4>)
 800346a:	2001      	movs	r0, #1
 800346c:	f7fd ff22 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 8003470:	4b2e      	ldr	r3, [pc, #184]	; (800352c <setup+0x9f8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003478:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800347a:	e035      	b.n	80034e8 <setup+0x9b4>
				
				case 11:
					targetSpeed = 120;
 800347c:	492c      	ldr	r1, [pc, #176]	; (8003530 <setup+0x9fc>)
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <setup+0xa00>)
 8003484:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "tra%5d",tracePwm);
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <setup+0xa04>)
 800348a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800348e:	461a      	mov	r2, r3
 8003490:	492a      	ldr	r1, [pc, #168]	; (800353c <setup+0xa08>)
 8003492:	2000      	movs	r0, #0
 8003494:	f7fd ff0e 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "vel%5d",speedPwm);
 8003498:	4b29      	ldr	r3, [pc, #164]	; (8003540 <setup+0xa0c>)
 800349a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349e:	461a      	mov	r2, r3
 80034a0:	4928      	ldr	r1, [pc, #160]	; (8003544 <setup+0xa10>)
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fd ff06 	bl	80012b4 <lcdRowPrintf>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <setup+0x9f8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80034b2:	e019      	b.n	80034e8 <setup+0x9b4>
				case 12:
					targetSpeed = 120;
 80034b4:	491e      	ldr	r1, [pc, #120]	; (8003530 <setup+0x9fc>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <setup+0xa00>)
 80034bc:	e9c1 2300 	strd	r2, r3, [r1]
					lcdRowPrintf(UPROW, "Anglesen");
 80034c0:	4921      	ldr	r1, [pc, #132]	; (8003548 <setup+0xa14>)
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd fef6 	bl	80012b4 <lcdRowPrintf>
					lcdRowPrintf(LOWROW, "   %3.1lf", angleSensor);
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <setup+0xa18>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	4920      	ldr	r1, [pc, #128]	; (8003550 <setup+0xa1c>)
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7fd feef 	bl	80012b4 <lcdRowPrintf>
					// lcdRowPrintf(LOWROW, "      %2d", angleSensor);
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <setup+0x9f8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 80034e0:	e002      	b.n	80034e8 <setup+0x9b4>
					break;
 80034e2:	bf00      	nop
 80034e4:	e016      	b.n	8003514 <setup+0x9e0>
					break;
 80034e6:	bf00      	nop
			} // switch
			break;
 80034e8:	e014      	b.n	8003514 <setup+0x9e0>
		// case 0xd:
			
		// 	break;

	default:
		lcdRowPrintf(UPROW, "%#x     ", getSWrotary());
 80034ea:	f000 fcf9 	bl	8003ee0 <getSWrotary>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	4918      	ldr	r1, [pc, #96]	; (8003554 <setup+0xa20>)
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd fedd 	bl	80012b4 <lcdRowPrintf>
		lcdRowPrintf(LOWROW, "none    ");
 80034fa:	4917      	ldr	r1, [pc, #92]	; (8003558 <setup+0xa24>)
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7fd fed9 	bl	80012b4 <lcdRowPrintf>
		break;
 8003502:	e008      	b.n	8003516 <setup+0x9e2>
			break;
 8003504:	bf00      	nop
 8003506:	e006      	b.n	8003516 <setup+0x9e2>
			break;
 8003508:	bf00      	nop
 800350a:	e004      	b.n	8003516 <setup+0x9e2>
			break;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <setup+0x9e2>
			break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <setup+0x9e2>
			break;
 8003514:	bf00      	nop
	} // switch
	// } // cntSW
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200002b4 	.word	0x200002b4
 8003524:	0800d7b4 	.word	0x0800d7b4
 8003528:	0800d7bc 	.word	0x0800d7bc
 800352c:	20000510 	.word	0x20000510
 8003530:	200006b8 	.word	0x200006b8
 8003534:	405e0000 	.word	0x405e0000
 8003538:	2000030a 	.word	0x2000030a
 800353c:	0800d7c4 	.word	0x0800d7c4
 8003540:	200006b0 	.word	0x200006b0
 8003544:	0800d7cc 	.word	0x0800d7cc
 8003548:	0800d7d4 	.word	0x0800d7d4
 800354c:	20000300 	.word	0x20000300
 8003550:	0800d7e0 	.word	0x0800d7e0
 8003554:	0800d7ec 	.word	0x0800d7ec
 8003558:	0800d7f8 	.word	0x0800d7f8

0800355c <data_select>:
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
	if ( swValTact == button ) {
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <data_select+0x64>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	429a      	cmp	r2, r3
 8003570:	d11d      	bne.n	80035ae <data_select+0x52>
		if ( *data == 1 && push == 0) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10a      	bne.n	8003590 <data_select+0x34>
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <data_select+0x68>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <data_select+0x34>
			push = 1;
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <data_select+0x68>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
			*data = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 800358e:	e011      	b.n	80035b4 <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <data_select+0x58>
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <data_select+0x68>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <data_select+0x58>
			push = 1;
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <data_select+0x68>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
			*data = 1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
}
 80035ac:	e002      	b.n	80035b4 <data_select+0x58>
		push = 0;
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <data_select+0x68>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	200006a1 	.word	0x200006a1
 80035c4:	2000069e 	.word	0x2000069e

080035c8 <dataTuningUD>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( void *data, uint8_t add )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
	
	if ( cntSetup2 >= 50 ) {
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <dataTuningUD+0xf8>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	2b31      	cmp	r3, #49	; 0x31
 80035de:	d968      	bls.n	80036b2 <dataTuningUD+0xea>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 80035e0:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <dataTuningUD+0xfc>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d003      	beq.n	80035f0 <dataTuningUD+0x28>
 80035e8:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <dataTuningUD+0xfc>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d155      	bne.n	800369c <dataTuningUD+0xd4>
			cntSwitchUD++; // 長押し時間計測
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <dataTuningUD+0x100>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <dataTuningUD+0x100>)
 80035fa:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <dataTuningUD+0xfc>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d123      	bne.n	800364c <dataTuningUD+0x84>
				// インクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <dataTuningUD+0x100>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	2b13      	cmp	r3, #19
 800360a:	d90b      	bls.n	8003624 <dataTuningUD+0x5c>
					*data2 += add;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003612:	b29a      	uxth	r2, r3
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4413      	add	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	b21a      	sxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8003622:	e042      	b.n	80036aa <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <dataTuningUD+0x104>)
 8003626:	f993 3000 	ldrsb.w	r3, [r3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13d      	bne.n	80036aa <dataTuningUD+0xe2>
					pushUD = 1;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <dataTuningUD+0x104>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363a:	b29a      	uxth	r2, r3
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4413      	add	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	b21a      	sxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800364a:	e02e      	b.n	80036aa <dataTuningUD+0xe2>
				}
			} else if ( swValTact == SW_DOWN  ) {
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <dataTuningUD+0xfc>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d12a      	bne.n	80036aa <dataTuningUD+0xe2>
				// デクリメント
				if ( cntSwitchUD >= 20 ) {	// 長押し処理
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <dataTuningUD+0x100>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	2b13      	cmp	r3, #19
 800365a:	d90b      	bls.n	8003674 <dataTuningUD+0xac>
					*data2 -= add;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003662:	b29a      	uxth	r2, r3
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	b29b      	uxth	r3, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b29b      	uxth	r3, r3
 800366c:	b21a      	sxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8003672:	e01a      	b.n	80036aa <dataTuningUD+0xe2>
				} else if (pushUD == 0) {	// 1回押し処理
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <dataTuningUD+0x104>)
 8003676:	f993 3000 	ldrsb.w	r3, [r3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d115      	bne.n	80036aa <dataTuningUD+0xe2>
					pushUD = 1;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <dataTuningUD+0x104>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368a:	b29a      	uxth	r2, r3
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	b29b      	uxth	r3, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	b21a      	sxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 800369a:	e006      	b.n	80036aa <dataTuningUD+0xe2>
				}
			}
		} else {
			pushUD = 0;
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <dataTuningUD+0x104>)
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
			cntSwitchUD = 0;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <dataTuningUD+0x100>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e000      	b.n	80036ac <dataTuningUD+0xe4>
			if ( swValTact == SW_UP  ) {
 80036aa:	bf00      	nop
		}
		cntSetup2 = 0;
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <dataTuningUD+0xf8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	801a      	strh	r2, [r3, #0]
	}
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000694 	.word	0x20000694
 80036c4:	200006a1 	.word	0x200006a1
 80036c8:	20000698 	.word	0x20000698
 80036cc:	2000069d 	.word	0x2000069d

080036d0 <dataTuningLR>:
// 処理概要     タクトスイッチでdataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( void *data, uint8_t add )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
	int16_t *data2 = (int16_t*)data;	// short型ポインタにキャスト
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60fb      	str	r3, [r7, #12]

	if ( cntSetup3 >= 50 ) {
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <dataTuningLR+0xf8>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b31      	cmp	r3, #49	; 0x31
 80036e6:	d968      	bls.n	80037ba <dataTuningLR+0xea>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <dataTuningLR+0xfc>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <dataTuningLR+0x28>
 80036f0:	4b36      	ldr	r3, [pc, #216]	; (80037cc <dataTuningLR+0xfc>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d155      	bne.n	80037a4 <dataTuningLR+0xd4>
			cntSwitchLR++; // 長押し時間計測
 80036f8:	4b35      	ldr	r3, [pc, #212]	; (80037d0 <dataTuningLR+0x100>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <dataTuningLR+0x100>)
 8003702:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003704:	4b31      	ldr	r3, [pc, #196]	; (80037cc <dataTuningLR+0xfc>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d123      	bne.n	8003754 <dataTuningLR+0x84>
				// インクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <dataTuningLR+0x100>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	2b13      	cmp	r3, #19
 8003712:	d90b      	bls.n	800372c <dataTuningLR+0x5c>
					*data2 += add;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371a:	b29a      	uxth	r2, r3
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	b29b      	uxth	r3, r3
 8003720:	4413      	add	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	b21a      	sxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800372a:	e042      	b.n	80037b2 <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <dataTuningLR+0x104>)
 800372e:	f993 3000 	ldrsb.w	r3, [r3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d13d      	bne.n	80037b2 <dataTuningLR+0xe2>
					pushLR = 1;
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <dataTuningLR+0x104>)
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
					*data2 += add;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003742:	b29a      	uxth	r2, r3
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	b29b      	uxth	r3, r3
 8003748:	4413      	add	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	b21a      	sxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8003752:	e02e      	b.n	80037b2 <dataTuningLR+0xe2>
				}
			} else if ( swValTact == SW_LEFT  ) {
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <dataTuningLR+0xfc>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d12a      	bne.n	80037b2 <dataTuningLR+0xe2>
				// デクリメント
				if ( cntSwitchLR >= 20 ) {	// 長押し処理
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <dataTuningLR+0x100>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b13      	cmp	r3, #19
 8003762:	d90b      	bls.n	800377c <dataTuningLR+0xac>
					*data2 -= add;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	b29a      	uxth	r2, r3
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	b29b      	uxth	r3, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	b21a      	sxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 800377a:	e01a      	b.n	80037b2 <dataTuningLR+0xe2>
				} else if (pushLR == 0) {	// 1回押し処理
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <dataTuningLR+0x104>)
 800377e:	f993 3000 	ldrsb.w	r3, [r3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <dataTuningLR+0xe2>
					pushLR = 1;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <dataTuningLR+0x104>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
					*data2 -= add;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003792:	b29a      	uxth	r2, r3
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	b29b      	uxth	r3, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b29b      	uxth	r3, r3
 800379c:	b21a      	sxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 80037a2:	e006      	b.n	80037b2 <dataTuningLR+0xe2>
				}
			}
		} else {
			pushLR = 0;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <dataTuningLR+0x104>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
			cntSwitchLR = 0;
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <dataTuningLR+0x100>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	e000      	b.n	80037b4 <dataTuningLR+0xe4>
			if ( swValTact == SW_RIGHT  ) {
 80037b2:	bf00      	nop
		}
		cntSetup3 = 0;
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <dataTuningLR+0xf8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	801a      	strh	r2, [r3, #0]
	}
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000696 	.word	0x20000696
 80037cc:	200006a1 	.word	0x200006a1
 80037d0:	2000069a 	.word	0x2000069a
 80037d4:	2000069c 	.word	0x2000069c

080037d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_MspInit+0x4c>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_MspInit+0x4c>)
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6453      	str	r3, [r2, #68]	; 0x44
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_MspInit+0x4c>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_MspInit+0x4c>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_MspInit+0x4c>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_MspInit+0x4c>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003816:	2007      	movs	r0, #7
 8003818:	f001 fbf8 	bl	800500c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800

08003828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3c      	ldr	r2, [pc, #240]	; (8003938 <HAL_ADC_MspInit+0x110>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d171      	bne.n	800392e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a3a      	ldr	r2, [pc, #232]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <HAL_ADC_MspInit+0x114>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b34      	ldr	r3, [pc, #208]	; (800393c <HAL_ADC_MspInit+0x114>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a33      	ldr	r2, [pc, #204]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <HAL_ADC_MspInit+0x114>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_ADC_MspInit+0x114>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SW_5xis_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800389e:	233f      	movs	r3, #63	; 0x3f
 80038a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a2:	2303      	movs	r3, #3
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	4823      	ldr	r0, [pc, #140]	; (8003940 <HAL_ADC_MspInit+0x118>)
 80038b2:	f001 ff5d 	bl	8005770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80038b6:	23ff      	movs	r3, #255	; 0xff
 80038b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ba:	2303      	movs	r3, #3
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	481e      	ldr	r0, [pc, #120]	; (8003944 <HAL_ADC_MspInit+0x11c>)
 80038ca:	f001 ff51 	bl	8005770 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_ADC_MspInit+0x124>)
 80038d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038da:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_ADC_MspInit+0x120>)
 80038f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_ADC_MspInit+0x120>)
 8003900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003904:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_ADC_MspInit+0x120>)
 8003908:	2200      	movs	r2, #0
 800390a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_ADC_MspInit+0x120>)
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <HAL_ADC_MspInit+0x120>)
 8003914:	f001 fbbc 	bl	8005090 <HAL_DMA_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800391e:	f7fe ffd3 	bl	80028c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_ADC_MspInit+0x120>)
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <HAL_ADC_MspInit+0x120>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800392e:	bf00      	nop
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40012000 	.word	0x40012000
 800393c:	40023800 	.word	0x40023800
 8003940:	40020800 	.word	0x40020800
 8003944:	40020000 	.word	0x40020000
 8003948:	20000364 	.word	0x20000364
 800394c:	40026410 	.word	0x40026410

08003950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_I2C_MspInit+0x84>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12c      	bne.n	80039cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800398e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003994:	2312      	movs	r3, #18
 8003996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039a0:	2304      	movs	r3, #4
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	480c      	ldr	r0, [pc, #48]	; (80039dc <HAL_I2C_MspInit+0x8c>)
 80039ac:	f001 fee0 	bl	8005770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 80039ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039be:	6413      	str	r3, [r2, #64]	; 0x40
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_I2C_MspInit+0x88>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40005400 	.word	0x40005400
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020400 	.word	0x40020400

080039e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a42      	ldr	r2, [pc, #264]	; (8003b08 <HAL_SPI_MspInit+0x128>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d12d      	bne.n	8003a5e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003a3a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	4619      	mov	r1, r3
 8003a56:	482e      	ldr	r0, [pc, #184]	; (8003b10 <HAL_SPI_MspInit+0x130>)
 8003a58:	f001 fe8a 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a5c:	e04f      	b.n	8003afe <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2c      	ldr	r2, [pc, #176]	; (8003b14 <HAL_SPI_MspInit+0x134>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d14a      	bne.n	8003afe <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_SPI_MspInit+0x12c>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003abc:	2301      	movs	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003acc:	2307      	movs	r3, #7
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	480e      	ldr	r0, [pc, #56]	; (8003b10 <HAL_SPI_MspInit+0x130>)
 8003ad8:	f001 fe4a 	bl	8005770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003aee:	2306      	movs	r3, #6
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	4807      	ldr	r0, [pc, #28]	; (8003b18 <HAL_SPI_MspInit+0x138>)
 8003afa:	f001 fe39 	bl	8005770 <HAL_GPIO_Init>
}
 8003afe:	bf00      	nop
 8003b00:	3730      	adds	r7, #48	; 0x30
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40003800 	.word	0x40003800
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40003c00 	.word	0x40003c00
 8003b18:	40020800 	.word	0x40020800

08003b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_TIM_PWM_MspInit+0x64>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10e      	bne.n	8003b4c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b4a:	e012      	b.n	8003b72 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d10d      	bne.n	8003b72 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_TIM_PWM_MspInit+0x68>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	; 0x30
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a32      	ldr	r2, [pc, #200]	; (8003c70 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d12c      	bne.n	8003c04 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	23c0      	movs	r3, #192	; 0xc0
 8003be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	481e      	ldr	r0, [pc, #120]	; (8003c78 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003bfe:	f001 fdb7 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c02:	e030      	b.n	8003c66 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12b      	bne.n	8003c66 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c46:	23c0      	movs	r3, #192	; 0xc0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c56:	2302      	movs	r3, #2
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f107 031c 	add.w	r3, r7, #28
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4807      	ldr	r0, [pc, #28]	; (8003c80 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003c62:	f001 fd85 	bl	8005770 <HAL_GPIO_Init>
}
 8003c66:	bf00      	nop
 8003c68:	3730      	adds	r7, #48	; 0x30
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40020400 	.word	0x40020400

08003c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <HAL_TIM_Base_MspInit+0x48>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d115      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2036      	movs	r0, #54	; 0x36
 8003cb8:	f001 f9b3 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cbc:	2036      	movs	r0, #54	; 0x36
 8003cbe:	f001 f9cc 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40001000 	.word	0x40001000
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <HAL_TIM_MspPostInit+0xb4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d11f      	bne.n	8003d36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003d12:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4818      	ldr	r0, [pc, #96]	; (8003d90 <HAL_TIM_MspPostInit+0xbc>)
 8003d30:	f001 fd1e 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d34:	e023      	b.n	8003d7e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d11e      	bne.n	8003d7e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_TIM_MspPostInit+0xb8>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	; (8003d90 <HAL_TIM_MspPostInit+0xbc>)
 8003d7a:	f001 fcf9 	bl	8005770 <HAL_GPIO_Init>
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020000 	.word	0x40020000

08003d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <HAL_UART_MspInit+0xc0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d14a      	bne.n	8003e4c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_UART_MspInit+0xc4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	2302      	movs	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4619      	mov	r1, r3
 8003e26:	480d      	ldr	r0, [pc, #52]	; (8003e5c <HAL_UART_MspInit+0xc8>)
 8003e28:	f001 fca2 	bl	8005770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	4619      	mov	r1, r3
 8003e46:	4806      	ldr	r0, [pc, #24]	; (8003e60 <HAL_UART_MspInit+0xcc>)
 8003e48:	f001 fc92 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003e4c:	bf00      	nop
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40005000 	.word	0x40005000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00

08003e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <NMI_Handler+0x4>

08003e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6e:	e7fe      	b.n	8003e6e <HardFault_Handler+0x4>

08003e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e74:	e7fe      	b.n	8003e74 <MemManage_Handler+0x4>

08003e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7a:	e7fe      	b.n	8003e7a <BusFault_Handler+0x4>

08003e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <UsageFault_Handler+0x4>

08003e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb0:	f000 fb80 	bl	80045b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb4:	bf00      	nop
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <TIM6_DAC_IRQHandler+0x10>)
 8003ebe:	f003 fbaf 	bl	8007620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200005e8 	.word	0x200005e8

08003ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <DMA2_Stream0_IRQHandler+0x10>)
 8003ed2:	f001 f9e3 	bl	800529c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000364 	.word	0x20000364

08003ee0 <getSWrotary>:
// モジュール名 getSWrotary
// 処理概要  ロータリスイッチのアナログ入力から2進数への変換
// 引数     なし
// 戻り値    ロータリスイッチのカウント
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary() {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[13];
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <getSWrotary+0x19c>)
 8003ee8:	8b5b      	ldrh	r3, [r3, #26]
 8003eea:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 8003ef0:	88bb      	ldrh	r3, [r7, #4]
 8003ef2:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d902      	bls.n	8003f00 <getSWrotary+0x20>
 8003efa:	2300      	movs	r3, #0
 8003efc:	71fb      	strb	r3, [r7, #7]
 8003efe:	e0b6      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 3681 && ad > 3653 ) 	ret = 0x1;
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 8003f06:	d807      	bhi.n	8003f18 <getSWrotary+0x38>
 8003f08:	88bb      	ldrh	r3, [r7, #4]
 8003f0a:	f640 6245 	movw	r2, #3653	; 0xe45
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d902      	bls.n	8003f18 <getSWrotary+0x38>
 8003f12:	2301      	movs	r3, #1
 8003f14:	71fb      	strb	r3, [r7, #7]
 8003f16:	e0aa      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 2784 && ad > 2746 ) 	ret = 0x2;
 8003f18:	88bb      	ldrh	r3, [r7, #4]
 8003f1a:	f5b3 6f2e 	cmp.w	r3, #2784	; 0xae0
 8003f1e:	d207      	bcs.n	8003f30 <getSWrotary+0x50>
 8003f20:	88bb      	ldrh	r3, [r7, #4]
 8003f22:	f640 22ba 	movw	r2, #2746	; 0xaba
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d902      	bls.n	8003f30 <getSWrotary+0x50>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	71fb      	strb	r3, [r7, #7]
 8003f2e:	e09e      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 2592 && ad > 2543 ) 	ret = 0x3;
 8003f30:	88bb      	ldrh	r3, [r7, #4]
 8003f32:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8003f36:	d206      	bcs.n	8003f46 <getSWrotary+0x66>
 8003f38:	88bb      	ldrh	r3, [r7, #4]
 8003f3a:	f5b3 6f1f 	cmp.w	r3, #2544	; 0x9f0
 8003f3e:	d302      	bcc.n	8003f46 <getSWrotary+0x66>
 8003f40:	2303      	movs	r3, #3
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	e093      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 2360 && ad > 2310 ) 	ret = 0x4;
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	f640 1237 	movw	r2, #2359	; 0x937
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d807      	bhi.n	8003f60 <getSWrotary+0x80>
 8003f50:	88bb      	ldrh	r3, [r7, #4]
 8003f52:	f640 1206 	movw	r2, #2310	; 0x906
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d902      	bls.n	8003f60 <getSWrotary+0x80>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	e086      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 2215 && ad > 2164 ) 	ret = 0x5;
 8003f60:	88bb      	ldrh	r3, [r7, #4]
 8003f62:	f640 02a6 	movw	r2, #2214	; 0x8a6
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d807      	bhi.n	8003f7a <getSWrotary+0x9a>
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	f640 0274 	movw	r2, #2164	; 0x874
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d902      	bls.n	8003f7a <getSWrotary+0x9a>
 8003f74:	2305      	movs	r3, #5
 8003f76:	71fb      	strb	r3, [r7, #7]
 8003f78:	e079      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1859 && ad > 1809 ) 	ret = 0x6;
 8003f7a:	88bb      	ldrh	r3, [r7, #4]
 8003f7c:	f240 7242 	movw	r2, #1858	; 0x742
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d807      	bhi.n	8003f94 <getSWrotary+0xb4>
 8003f84:	88bb      	ldrh	r3, [r7, #4]
 8003f86:	f240 7211 	movw	r2, #1809	; 0x711
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d902      	bls.n	8003f94 <getSWrotary+0xb4>
 8003f8e:	2306      	movs	r3, #6
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	e06c      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1768 && ad > 1718 ) 	ret = 0x7;
 8003f94:	88bb      	ldrh	r3, [r7, #4]
 8003f96:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8003f9a:	d207      	bcs.n	8003fac <getSWrotary+0xcc>
 8003f9c:	88bb      	ldrh	r3, [r7, #4]
 8003f9e:	f240 62b6 	movw	r2, #1718	; 0x6b6
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d902      	bls.n	8003fac <getSWrotary+0xcc>
 8003fa6:	2307      	movs	r3, #7
 8003fa8:	71fb      	strb	r3, [r7, #7]
 8003faa:	e060      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1626 && ad > 1576 ) 	ret = 0x8;
 8003fac:	88bb      	ldrh	r3, [r7, #4]
 8003fae:	f240 6259 	movw	r2, #1625	; 0x659
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d806      	bhi.n	8003fc4 <getSWrotary+0xe4>
 8003fb6:	88bb      	ldrh	r3, [r7, #4]
 8003fb8:	f5b3 6fc5 	cmp.w	r3, #1576	; 0x628
 8003fbc:	d902      	bls.n	8003fc4 <getSWrotary+0xe4>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	e054      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1556 && ad > 1407 ) 	ret = 0x9;
 8003fc4:	88bb      	ldrh	r3, [r7, #4]
 8003fc6:	f240 6213 	movw	r2, #1555	; 0x613
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d806      	bhi.n	8003fdc <getSWrotary+0xfc>
 8003fce:	88bb      	ldrh	r3, [r7, #4]
 8003fd0:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003fd4:	d302      	bcc.n	8003fdc <getSWrotary+0xfc>
 8003fd6:	2309      	movs	r3, #9
 8003fd8:	71fb      	strb	r3, [r7, #7]
 8003fda:	e048      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1373 && ad > 1325 ) 	ret = 0xa;
 8003fdc:	88bb      	ldrh	r3, [r7, #4]
 8003fde:	f240 525c 	movw	r2, #1372	; 0x55c
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d807      	bhi.n	8003ff6 <getSWrotary+0x116>
 8003fe6:	88bb      	ldrh	r3, [r7, #4]
 8003fe8:	f240 522d 	movw	r2, #1325	; 0x52d
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d902      	bls.n	8003ff6 <getSWrotary+0x116>
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	71fb      	strb	r3, [r7, #7]
 8003ff4:	e03b      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1323 && ad > 1275 ) 	ret = 0xb;
 8003ff6:	88bb      	ldrh	r3, [r7, #4]
 8003ff8:	f240 522a 	movw	r2, #1322	; 0x52a
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d807      	bhi.n	8004010 <getSWrotary+0x130>
 8004000:	88bb      	ldrh	r3, [r7, #4]
 8004002:	f240 42fb 	movw	r2, #1275	; 0x4fb
 8004006:	4293      	cmp	r3, r2
 8004008:	d902      	bls.n	8004010 <getSWrotary+0x130>
 800400a:	230b      	movs	r3, #11
 800400c:	71fb      	strb	r3, [r7, #7]
 800400e:	e02e      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1261 && ad > 1213 ) 	ret = 0xc;
 8004010:	88bb      	ldrh	r3, [r7, #4]
 8004012:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8004016:	4293      	cmp	r3, r2
 8004018:	d807      	bhi.n	800402a <getSWrotary+0x14a>
 800401a:	88bb      	ldrh	r3, [r7, #4]
 800401c:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8004020:	4293      	cmp	r3, r2
 8004022:	d902      	bls.n	800402a <getSWrotary+0x14a>
 8004024:	230c      	movs	r3, #12
 8004026:	71fb      	strb	r3, [r7, #7]
 8004028:	e021      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1209 && ad > 1162 ) 	ret = 0xd;
 800402a:	88bb      	ldrh	r3, [r7, #4]
 800402c:	f5b3 6f97 	cmp.w	r3, #1208	; 0x4b8
 8004030:	d807      	bhi.n	8004042 <getSWrotary+0x162>
 8004032:	88bb      	ldrh	r3, [r7, #4]
 8004034:	f240 428a 	movw	r2, #1162	; 0x48a
 8004038:	4293      	cmp	r3, r2
 800403a:	d902      	bls.n	8004042 <getSWrotary+0x162>
 800403c:	230d      	movs	r3, #13
 800403e:	71fb      	strb	r3, [r7, #7]
 8004040:	e015      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1104 && ad > 1058 ) 	ret = 0xe;
 8004042:	88bb      	ldrh	r3, [r7, #4]
 8004044:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004048:	d207      	bcs.n	800405a <getSWrotary+0x17a>
 800404a:	88bb      	ldrh	r3, [r7, #4]
 800404c:	f240 4222 	movw	r2, #1058	; 0x422
 8004050:	4293      	cmp	r3, r2
 8004052:	d902      	bls.n	800405a <getSWrotary+0x17a>
 8004054:	230e      	movs	r3, #14
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	e009      	b.n	800406e <getSWrotary+0x18e>
	else if ( ad < 1057 && ad > 1016 ) 	ret = 0xf;
 800405a:	88bb      	ldrh	r3, [r7, #4]
 800405c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8004060:	d805      	bhi.n	800406e <getSWrotary+0x18e>
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8004068:	d901      	bls.n	800406e <getSWrotary+0x18e>
 800406a:	230f      	movs	r3, #15
 800406c:	71fb      	strb	r3, [r7, #7]

	return ret;
 800406e:	79fb      	ldrb	r3, [r7, #7]
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	20000248 	.word	0x20000248

08004080 <getSWtact>:
// モジュール名 getSWtact
// 処理概要  5方向タクトスイッチのアナログ入力から5方向の入力に変換
// 引数      なし
// 戻り値     スイッチの方向
/////////////////////////////////////////////////////////////////////
uint8_t getSWtact() {
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
	uint16_t ad = analogVal[12];
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <getSWtact+0xa0>)
 8004088:	8b1b      	ldrh	r3, [r3, #24]
 800408a:	80bb      	strh	r3, [r7, #4]
	uint8_t ret = SW_NONE;
 800408c:	2300      	movs	r3, #0
 800408e:	71fb      	strb	r3, [r7, #7]

	if ( ad > 3900 ) 					ret = 0x0;
 8004090:	88bb      	ldrh	r3, [r7, #4]
 8004092:	f640 723c 	movw	r2, #3900	; 0xf3c
 8004096:	4293      	cmp	r3, r2
 8004098:	d902      	bls.n	80040a0 <getSWtact+0x20>
 800409a:	2300      	movs	r3, #0
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	e037      	b.n	8004110 <getSWtact+0x90>
	else if ( ad < 3541 && ad > 3116 ) 	ret = SW_DOWN;
 80040a0:	88bb      	ldrh	r3, [r7, #4]
 80040a2:	f640 52d4 	movw	r2, #3540	; 0xdd4
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d807      	bhi.n	80040ba <getSWtact+0x3a>
 80040aa:	88bb      	ldrh	r3, [r7, #4]
 80040ac:	f640 422c 	movw	r2, #3116	; 0xc2c
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d902      	bls.n	80040ba <getSWtact+0x3a>
 80040b4:	2305      	movs	r3, #5
 80040b6:	71fb      	strb	r3, [r7, #7]
 80040b8:	e02a      	b.n	8004110 <getSWtact+0x90>
	else if ( ad < 3038 && ad > 2603 ) 	ret = SW_RIGHT;
 80040ba:	88bb      	ldrh	r3, [r7, #4]
 80040bc:	f640 32dd 	movw	r2, #3037	; 0xbdd
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d807      	bhi.n	80040d4 <getSWtact+0x54>
 80040c4:	88bb      	ldrh	r3, [r7, #4]
 80040c6:	f640 222b 	movw	r2, #2603	; 0xa2b
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d902      	bls.n	80040d4 <getSWtact+0x54>
 80040ce:	2304      	movs	r3, #4
 80040d0:	71fb      	strb	r3, [r7, #7]
 80040d2:	e01d      	b.n	8004110 <getSWtact+0x90>
	else if ( ad < 2391 && ad > 1950 ) 	ret = SW_LEFT;
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	f640 1256 	movw	r2, #2390	; 0x956
 80040da:	4293      	cmp	r3, r2
 80040dc:	d807      	bhi.n	80040ee <getSWtact+0x6e>
 80040de:	88bb      	ldrh	r3, [r7, #4]
 80040e0:	f240 729e 	movw	r2, #1950	; 0x79e
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d902      	bls.n	80040ee <getSWtact+0x6e>
 80040e8:	2303      	movs	r3, #3
 80040ea:	71fb      	strb	r3, [r7, #7]
 80040ec:	e010      	b.n	8004110 <getSWtact+0x90>
	else if ( ad < 1440 && ad > 1006 ) 	ret = SW_PUSH;
 80040ee:	88bb      	ldrh	r3, [r7, #4]
 80040f0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80040f4:	d207      	bcs.n	8004106 <getSWtact+0x86>
 80040f6:	88bb      	ldrh	r3, [r7, #4]
 80040f8:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d902      	bls.n	8004106 <getSWtact+0x86>
 8004100:	2302      	movs	r3, #2
 8004102:	71fb      	strb	r3, [r7, #7]
 8004104:	e004      	b.n	8004110 <getSWtact+0x90>
	else if ( ad < 150 && ad >= 0 ) 	ret = SW_UP;
 8004106:	88bb      	ldrh	r3, [r7, #4]
 8004108:	2b95      	cmp	r3, #149	; 0x95
 800410a:	d801      	bhi.n	8004110 <getSWtact+0x90>
 800410c:	2301      	movs	r3, #1
 800410e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000248 	.word	0x20000248

08004124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
	return 1;
 8004128:	2301      	movs	r3, #1
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_kill>:

int _kill(int pid, int sig)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800413e:	f004 fa7b 	bl	8008638 <__errno>
 8004142:	4603      	mov	r3, r0
 8004144:	2216      	movs	r2, #22
 8004146:	601a      	str	r2, [r3, #0]
	return -1;
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_exit>:

void _exit (int status)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ffe7 	bl	8004134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004166:	e7fe      	b.n	8004166 <_exit+0x12>

08004168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e00a      	b.n	8004190 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800417a:	f3af 8000 	nop.w
 800417e:	4601      	mov	r1, r0
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	60ba      	str	r2, [r7, #8]
 8004186:	b2ca      	uxtb	r2, r1
 8004188:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3301      	adds	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	dbf0      	blt.n	800417a <_read+0x12>
	}

return len;
 8004198:	687b      	ldr	r3, [r7, #4]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
	return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ca:	605a      	str	r2, [r3, #4]
	return 0;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_isatty>:

int _isatty(int file)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	return 1;
 80041e2:	2301      	movs	r3, #1
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	return 0;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <_sbrk+0x5c>)
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <_sbrk+0x60>)
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <_sbrk+0x64>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <_sbrk+0x64>)
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <_sbrk+0x68>)
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <_sbrk+0x64>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d207      	bcs.n	800424c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800423c:	f004 f9fc 	bl	8008638 <__errno>
 8004240:	4603      	mov	r3, r0
 8004242:	220c      	movs	r2, #12
 8004244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	e009      	b.n	8004260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <_sbrk+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <_sbrk+0x64>)
 800425c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800425e:	68fb      	ldr	r3, [r7, #12]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20020000 	.word	0x20020000
 800426c:	00000400 	.word	0x00000400
 8004270:	200006a8 	.word	0x200006a8
 8004274:	200006f0 	.word	0x200006f0

08004278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <SystemInit+0x20>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <SystemInit+0x20>)
 8004284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <HAL_TIM_PeriodElapsedCallback>:
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	cnt1++;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042ac:	6013      	str	r3, [r2, #0]
    cntSW++;
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80042b8:	801a      	strh	r2, [r3, #0]
    cntSetup1++;
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042c4:	801a      	strh	r2, [r3, #0]
    cntSetup2++;
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80042d0:	801a      	strh	r2, [r3, #0]
    cntSetup3++;
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80042dc:	801a      	strh	r2, [r3, #0]

    // スイッチの入力を取得
    if (cntSW >= 100) {
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	2b63      	cmp	r3, #99	; 0x63
 80042e4:	d90e      	bls.n	8004304 <HAL_TIM_PeriodElapsedCallback+0x68>
        swValTact = getSWtact();
 80042e6:	f7ff fecb 	bl	8004080 <getSWtact>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80042f0:	701a      	strb	r2, [r3, #0]
        swValRotary = getSWrotary();
 80042f2:	f7ff fdf5 	bl	8003ee0 <getSWrotary>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80042fc:	701a      	strb	r2, [r3, #0]
        cntSW = 0;
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
    //     logMarker[cnt1] = getMarkerSensor();
    //     logEncoder[cnt1] = encTotalN - encMarker;
    // }
    
    // 仮想センサステア計算
    getAngleSensor();
 8004304:	f7fd fb70 	bl	80019e8 <getAngleSensor>
    // LCD
    lcdShowProcess();
 8004308:	f7fc ff38 	bl	800117c <lcdShowProcess>
    // Encoder
    getEncoder();
 800430c:	f7fd fa30 	bl	8001770 <getEncoder>
    // PWM
    motorControlTrace();
 8004310:	f7fd fc9a 	bl	8001c48 <motorControlTrace>
    motorControlSpeed();
 8004314:	f000 f814 	bl	8004340 <motorControlSpeed>

 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200006ac 	.word	0x200006ac
 8004324:	200006a4 	.word	0x200006a4
 8004328:	20000692 	.word	0x20000692
 800432c:	20000694 	.word	0x20000694
 8004330:	20000696 	.word	0x20000696
 8004334:	200006a1 	.word	0x200006a1
 8004338:	200006a2 	.word	0x200006a2
 800433c:	00000000 	.word	0x00000000

08004340 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターのPWM計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
	int32_t i, j, iRet, Dif, iP, iI, iD, Dev;
	int8_t kp2, ki2, kd2;
	
	i = (int32_t)targetSpeed;		// 目標値
 8004346:	4b54      	ldr	r3, [pc, #336]	; (8004498 <motorControlSpeed+0x158>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fc22 	bl	8000b98 <__aeabi_d2iz>
 8004354:	4603      	mov	r3, r0
 8004356:	61fb      	str	r3, [r7, #28]
	j = encCurrentN;				// 現在値 targetSpeedはエンコーダのパルス数*10のため
 8004358:	4b50      	ldr	r3, [pc, #320]	; (800449c <motorControlSpeed+0x15c>)
 800435a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435e:	61bb      	str	r3, [r7, #24]
									// 現在位置も10倍する

	// デモモードのときゲイン変更
	if ( demo ) {
 8004360:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <motorControlSpeed+0x160>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <motorControlSpeed+0x42>
		kp2 = kp2_buff;
 8004368:	4b4e      	ldr	r3, [pc, #312]	; (80044a4 <motorControlSpeed+0x164>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 8004370:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <motorControlSpeed+0x168>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8004378:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <motorControlSpeed+0x16c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004380:	e00b      	b.n	800439a <motorControlSpeed+0x5a>
	} else {
		kp2 = kp2_buff;
 8004382:	4b48      	ldr	r3, [pc, #288]	; (80044a4 <motorControlSpeed+0x164>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ki2 = ki2_buff;
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <motorControlSpeed+0x168>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		kd2 = kd2_buff;
 8004392:	4b46      	ldr	r3, [pc, #280]	; (80044ac <motorControlSpeed+0x16c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	// 駆動モーター用PWM値計算
	Dev = i - j;	// 偏差
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
	// 目標値を変更したらI成分リセット
	if ( i != targetSpeedBefore ) Int2 = 0;
 80043a2:	69f8      	ldr	r0, [r7, #28]
 80043a4:	f7fc f8de 	bl	8000564 <__aeabi_i2d>
 80043a8:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <motorControlSpeed+0x170>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fc fbab 	bl	8000b08 <__aeabi_dcmpeq>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <motorControlSpeed+0x86>
 80043b8:	493e      	ldr	r1, [pc, #248]	; (80044b4 <motorControlSpeed+0x174>)
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9c1 2300 	strd	r2, r3, [r1]
	
	Int2 += (double)Dev * 0.001;	// 時間積分
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7fc f8cc 	bl	8000564 <__aeabi_i2d>
 80043cc:	a330      	add	r3, pc, #192	; (adr r3, 8004490 <motorControlSpeed+0x150>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc f931 	bl	8000638 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	4b35      	ldr	r3, [pc, #212]	; (80044b4 <motorControlSpeed+0x174>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f7fb ff72 	bl	80002cc <__adddf3>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4931      	ldr	r1, [pc, #196]	; (80044b4 <motorControlSpeed+0x174>)
 80043ee:	e9c1 2300 	strd	r2, r3, [r1]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <motorControlSpeed+0x178>)
 80043f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f8:	461a      	mov	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
	
	iP = (int32_t)kp2 * Dev;		// 比例
 8004400:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	60fb      	str	r3, [r7, #12]
	iI = (double)ki2 * Int2;		// 積分
 800440c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc f8a7 	bl	8000564 <__aeabi_i2d>
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <motorControlSpeed+0x174>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc f90c 	bl	8000638 <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f7fc fbb6 	bl	8000b98 <__aeabi_d2iz>
 800442c:	4603      	mov	r3, r0
 800442e:	60bb      	str	r3, [r7, #8]
	iD = (int32_t)kd2 * Dif;		// 微分
 8004430:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	607b      	str	r3, [r7, #4]
	iRet = iP + iI + iD;
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
	iRet = iRet >> 1;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	105b      	asrs	r3, r3, #1
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
	
	// PWMの上限の設定
	if ( iRet >  1000 ) iRet = 1000;
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004454:	dd02      	ble.n	800445c <motorControlSpeed+0x11c>
 8004456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
	if ( iRet <  -1000 ) iRet = -1000;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004462:	da01      	bge.n	8004468 <motorControlSpeed+0x128>
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <motorControlSpeed+0x17c>)
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
	
	speedPwm = iRet;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	b21a      	sxth	r2, r3
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <motorControlSpeed+0x180>)
 800446e:	801a      	strh	r2, [r3, #0]
	encoderBefore = Dev;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	b21a      	sxth	r2, r3
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <motorControlSpeed+0x178>)
 8004476:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = i;
 8004478:	69f8      	ldr	r0, [r7, #28]
 800447a:	f7fc f873 	bl	8000564 <__aeabi_i2d>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	490b      	ldr	r1, [pc, #44]	; (80044b0 <motorControlSpeed+0x170>)
 8004484:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004488:	bf00      	nop
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	d2f1a9fc 	.word	0xd2f1a9fc
 8004494:	3f50624d 	.word	0x3f50624d
 8004498:	200006b8 	.word	0x200006b8
 800449c:	20000270 	.word	0x20000270
 80044a0:	200006d8 	.word	0x200006d8
 80044a4:	20000024 	.word	0x20000024
 80044a8:	20000025 	.word	0x20000025
 80044ac:	200006d9 	.word	0x200006d9
 80044b0:	200006c8 	.word	0x200006c8
 80044b4:	200006d0 	.word	0x200006d0
 80044b8:	200006c0 	.word	0x200006c0
 80044bc:	fffffc18 	.word	0xfffffc18
 80044c0:	200006b0 	.word	0x200006b0

080044c4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
@@  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044c4:	480c      	ldr	r0, [pc, #48]	; (80044f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044c6:	490d      	ldr	r1, [pc, #52]	; (80044fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044c8:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044cc:	e002      	b.n	80044d4 <LoopCopyDataInit>

080044ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d2:	3304      	adds	r3, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d8:	d3f9      	bcc.n	80044ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e0:	e001      	b.n	80044e6 <LoopFillZerobss>

080044e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e4:	3204      	adds	r2, #4

080044e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e8:	d3fb      	bcc.n	80044e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044ea:	f7ff fec5 	bl	8004278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ee:	f004 f8a9 	bl	8008644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f2:	f7fd fc84 	bl	8001dfe <main>
  bx  lr    
 80044f6:	4770      	bx	lr
  ldr r0, =_sdata
 80044f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044fc:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004500:	0800dd28 	.word	0x0800dd28
  ldr r2, =_sbss
 8004504:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004508:	200006f0 	.word	0x200006f0

0800450c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800450c:	e7fe      	b.n	800450c <ADC_IRQHandler>
	...

08004510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_Init+0x40>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0d      	ldr	r2, [pc, #52]	; (8004550 <HAL_Init+0x40>)
 800451a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800451e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <HAL_Init+0x40>)
 8004526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800452a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_Init+0x40>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_Init+0x40>)
 8004532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004538:	2003      	movs	r0, #3
 800453a:	f000 fd67 	bl	800500c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800453e:	2000      	movs	r0, #0
 8004540:	f000 f808 	bl	8004554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004544:	f7ff f948 	bl	80037d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023c00 	.word	0x40023c00

08004554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_InitTick+0x54>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_InitTick+0x58>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456a:	fbb3 f3f1 	udiv	r3, r3, r1
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd7f 	bl	8005076 <HAL_SYSTICK_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e00e      	b.n	80045a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b0f      	cmp	r3, #15
 8004586:	d80a      	bhi.n	800459e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004588:	2200      	movs	r2, #0
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f000 fd47 	bl	8005022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <HAL_InitTick+0x5c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000020 	.word	0x20000020
 80045ac:	2000002c 	.word	0x2000002c
 80045b0:	20000028 	.word	0x20000028

080045b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_IncTick+0x20>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_IncTick+0x24>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_IncTick+0x24>)
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000002c 	.word	0x2000002c
 80045d8:	200006dc 	.word	0x200006dc

080045dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return uwTick;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <HAL_GetTick+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	200006dc 	.word	0x200006dc

080045f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7ff ffee 	bl	80045dc <HAL_GetTick>
 8004600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d005      	beq.n	800461a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_Delay+0x44>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800461a:	bf00      	nop
 800461c:	f7ff ffde 	bl	80045dc <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d8f7      	bhi.n	800461c <HAL_Delay+0x28>
  {
  }
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	2000002c 	.word	0x2000002c

0800463c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e033      	b.n	80046ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff f8e4 	bl	8003828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d118      	bne.n	80046ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004682:	f023 0302 	bic.w	r3, r3, #2
 8004686:	f043 0202 	orr.w	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa6e 	bl	8004b70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	f043 0201 	orr.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
 80046aa:	e001      	b.n	80046b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_Start_DMA+0x1e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0e9      	b.n	80048b6 <HAL_ADC_Start_DMA+0x1f2>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d018      	beq.n	800472a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004708:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <HAL_ADC_Start_DMA+0x1fc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6d      	ldr	r2, [pc, #436]	; (80048c4 <HAL_ADC_Start_DMA+0x200>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0c9a      	lsrs	r2, r3, #18
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800471c:	e002      	b.n	8004724 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3b01      	subs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f9      	bne.n	800471e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d107      	bne.n	800474a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004748:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	f040 80a1 	bne.w	800489c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004784:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d106      	bne.n	80047a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f023 0206 	bic.w	r2, r3, #6
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
 80047a6:	e002      	b.n	80047ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047b6:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <HAL_ADC_Start_DMA+0x204>)
 80047b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4a43      	ldr	r2, [pc, #268]	; (80048cc <HAL_ADC_Start_DMA+0x208>)
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	4a42      	ldr	r2, [pc, #264]	; (80048d0 <HAL_ADC_Start_DMA+0x20c>)
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4a41      	ldr	r2, [pc, #260]	; (80048d4 <HAL_ADC_Start_DMA+0x210>)
 80047d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	334c      	adds	r3, #76	; 0x4c
 8004806:	4619      	mov	r1, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f000 fcee 	bl	80051ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2b00      	cmp	r3, #0
 800481a:	d12a      	bne.n	8004872 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <HAL_ADC_Start_DMA+0x214>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d015      	beq.n	8004852 <HAL_ADC_Start_DMA+0x18e>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <HAL_ADC_Start_DMA+0x218>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d105      	bne.n	800483c <HAL_ADC_Start_DMA+0x178>
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_ADC_Start_DMA+0x204>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <HAL_ADC_Start_DMA+0x21c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d136      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_ADC_Start_DMA+0x204>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d130      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d129      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e020      	b.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_ADC_Start_DMA+0x214>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d11b      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d114      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004898:	609a      	str	r2, [r3, #8]
 800489a:	e00b      	b.n	80048b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000020 	.word	0x20000020
 80048c4:	431bde83 	.word	0x431bde83
 80048c8:	40012300 	.word	0x40012300
 80048cc:	08004d69 	.word	0x08004d69
 80048d0:	08004e23 	.word	0x08004e23
 80048d4:	08004e3f 	.word	0x08004e3f
 80048d8:	40012000 	.word	0x40012000
 80048dc:	40012100 	.word	0x40012100
 80048e0:	40012200 	.word	0x40012200

080048e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x1c>
 8004924:	2302      	movs	r3, #2
 8004926:	e113      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x244>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b09      	cmp	r3, #9
 8004936:	d925      	bls.n	8004984 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	3b1e      	subs	r3, #30
 800494e:	2207      	movs	r2, #7
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43da      	mvns	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	400a      	ands	r2, r1
 800495c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68d9      	ldr	r1, [r3, #12]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4618      	mov	r0, r3
 8004970:	4603      	mov	r3, r0
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4403      	add	r3, r0
 8004976:	3b1e      	subs	r3, #30
 8004978:	409a      	lsls	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e022      	b.n	80049ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6919      	ldr	r1, [r3, #16]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	2207      	movs	r2, #7
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	400a      	ands	r2, r1
 80049a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6919      	ldr	r1, [r3, #16]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4618      	mov	r0, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4403      	add	r3, r0
 80049c0:	409a      	lsls	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d824      	bhi.n	8004a1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	3b05      	subs	r3, #5
 80049e4:	221f      	movs	r2, #31
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	400a      	ands	r2, r1
 80049f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4618      	mov	r0, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3b05      	subs	r3, #5
 8004a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34
 8004a1a:	e04c      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d824      	bhi.n	8004a6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	3b23      	subs	r3, #35	; 0x23
 8004a36:	221f      	movs	r2, #31
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	4618      	mov	r0, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3b23      	subs	r3, #35	; 0x23
 8004a60:	fa00 f203 	lsl.w	r2, r0, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a6c:	e023      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3b41      	subs	r3, #65	; 0x41
 8004a80:	221f      	movs	r2, #31
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43da      	mvns	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b41      	subs	r3, #65	; 0x41
 8004aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ab6:	4b29      	ldr	r3, [pc, #164]	; (8004b5c <HAL_ADC_ConfigChannel+0x250>)
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <HAL_ADC_ConfigChannel+0x254>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1d8>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b12      	cmp	r3, #18
 8004aca:	d10b      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_ADC_ConfigChannel+0x254>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d12b      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x23a>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_ADC_ConfigChannel+0x258>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <HAL_ADC_ConfigChannel+0x1f4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b11      	cmp	r3, #17
 8004afe:	d122      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <HAL_ADC_ConfigChannel+0x258>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d111      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_ADC_ConfigChannel+0x25c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a11      	ldr	r2, [pc, #68]	; (8004b6c <HAL_ADC_ConfigChannel+0x260>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0c9a      	lsrs	r2, r3, #18
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b38:	e002      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f9      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40012300 	.word	0x40012300
 8004b60:	40012000 	.word	0x40012000
 8004b64:	10000012 	.word	0x10000012
 8004b68:	20000020 	.word	0x20000020
 8004b6c:	431bde83 	.word	0x431bde83

08004b70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <ADC_Init+0x1f0>)
 8004b7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <ADC_Init+0x1f4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	e00f      	b.n	8004c6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0202 	bic.w	r2, r2, #2
 8004c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6899      	ldr	r1, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	005a      	lsls	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004caa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	035a      	lsls	r2, r3, #13
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e007      	b.n	8004ce4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	051a      	lsls	r2, r3, #20
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d26:	025a      	lsls	r2, r3, #9
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	029a      	lsls	r2, r3, #10
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40012300 	.word	0x40012300
 8004d64:	0f000001 	.word	0x0f000001

08004d68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d13c      	bne.n	8004dfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d12b      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d127      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d119      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0220 	bic.w	r2, r2, #32
 8004dce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7fd fd41 	bl	800287c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dfa:	e00e      	b.n	8004e1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fd75 	bl	80048f8 <HAL_ADC_ErrorCallback>
}
 8004e0e:	e004      	b.n	8004e1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fd57 	bl	80048e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff fd4a 	bl	80048f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <__NVIC_SetPriorityGrouping>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <__NVIC_GetPriorityGrouping>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <__NVIC_GetPriorityGrouping+0x18>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	f003 0307 	and.w	r3, r3, #7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_EnableIRQ>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db0b      	blt.n	8004efa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <__NVIC_EnableIRQ+0x38>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e100 	.word	0xe000e100

08004f0c <__NVIC_SetPriority>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	db0a      	blt.n	8004f36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	490c      	ldr	r1, [pc, #48]	; (8004f58 <__NVIC_SetPriority+0x4c>)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	0112      	lsls	r2, r2, #4
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f34:	e00a      	b.n	8004f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <__NVIC_SetPriority+0x50>)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3b04      	subs	r3, #4
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	440b      	add	r3, r1
 8004f4a:	761a      	strb	r2, [r3, #24]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000e100 	.word	0xe000e100
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <NVIC_EncodePriority>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf28      	it	cs
 8004f7e:	2304      	movcs	r3, #4
 8004f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3304      	adds	r3, #4
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d902      	bls.n	8004f90 <NVIC_EncodePriority+0x30>
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3b03      	subs	r3, #3
 8004f8e:	e000      	b.n	8004f92 <NVIC_EncodePriority+0x32>
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43d9      	mvns	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	4313      	orrs	r3, r2
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	; 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <SysTick_Config>:
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd8:	d301      	bcc.n	8004fde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00f      	b.n	8004ffe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <SysTick_Config+0x40>)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	f7ff ff8e 	bl	8004f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <SysTick_Config+0x40>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <SysTick_Config+0x40>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e010 	.word	0xe000e010

0800500c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff29 	bl	8004e6c <__NVIC_SetPriorityGrouping>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005034:	f7ff ff3e 	bl	8004eb4 <__NVIC_GetPriorityGrouping>
 8005038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff8e 	bl	8004f60 <NVIC_EncodePriority>
 8005044:	4602      	mov	r2, r0
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff5d 	bl	8004f0c <__NVIC_SetPriority>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff31 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffa2 	bl	8004fc8 <SysTick_Config>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800509c:	f7ff fa9e 	bl	80045dc <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e099      	b.n	80051e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050cc:	e00f      	b.n	80050ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ce:	f7ff fa85 	bl	80045dc <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d908      	bls.n	80050ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2203      	movs	r2, #3
 80050e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e078      	b.n	80051e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e8      	bne.n	80050ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_DMA_Init+0x158>)
 8005108:	4013      	ands	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800511a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b04      	cmp	r3, #4
 8005146:	d107      	bne.n	8005158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	4313      	orrs	r3, r2
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b04      	cmp	r3, #4
 8005180:	d117      	bne.n	80051b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa6f 	bl	8005678 <DMA_CheckFifoParam>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051ae:	2301      	movs	r3, #1
 80051b0:	e016      	b.n	80051e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa26 	bl	800560c <DMA_CalcBaseAndBitshift>
 80051c0:	4603      	mov	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	223f      	movs	r2, #63	; 0x3f
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	f010803f 	.word	0xf010803f

080051ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_DMA_Start_IT+0x26>
 800520e:	2302      	movs	r3, #2
 8005210:	e040      	b.n	8005294 <HAL_DMA_Start_IT+0xa8>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	d12f      	bne.n	8005286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f9b8 	bl	80055b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	223f      	movs	r2, #63	; 0x3f
 8005246:	409a      	lsls	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0216 	orr.w	r2, r2, #22
 800525a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e005      	b.n	8005292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052a8:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <HAL_DMA_IRQHandler+0x248>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a8e      	ldr	r2, [pc, #568]	; (80054e8 <HAL_DMA_IRQHandler+0x24c>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0a9b      	lsrs	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	2208      	movs	r2, #8
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	2208      	movs	r2, #8
 80052f6:	409a      	lsls	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	2201      	movs	r2, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f043 0202 	orr.w	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005342:	2204      	movs	r2, #4
 8005344:	409a      	lsls	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d012      	beq.n	8005374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	2210      	movs	r2, #16
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d043      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d03c      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	2210      	movs	r2, #16
 8005398:	409a      	lsls	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d018      	beq.n	80053de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
 80053ca:	e01f      	b.n	800540c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01b      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
 80053dc:	e016      	b.n	800540c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d107      	bne.n	80053fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0208 	bic.w	r2, r2, #8
 80053fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	2220      	movs	r2, #32
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 808f 	beq.w	800553c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8087 	beq.w	800553c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005432:	2220      	movs	r2, #32
 8005434:	409a      	lsls	r2, r3
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b05      	cmp	r3, #5
 8005444:	d136      	bne.n	80054b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0216 	bic.w	r2, r2, #22
 8005454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_DMA_IRQHandler+0x1da>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0208 	bic.w	r2, r2, #8
 8005484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	223f      	movs	r2, #63	; 0x3f
 800548c:	409a      	lsls	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d07e      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
        }
        return;
 80054b2:	e079      	b.n	80055a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01d      	beq.n	80054fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d031      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
 80054e0:	e02c      	b.n	800553c <HAL_DMA_IRQHandler+0x2a0>
 80054e2:	bf00      	nop
 80054e4:	20000020 	.word	0x20000020
 80054e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d023      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
 80054fc:	e01e      	b.n	800553c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10f      	bne.n	800552c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0210 	bic.w	r2, r2, #16
 800551a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	2b00      	cmp	r3, #0
 8005542:	d032      	beq.n	80055aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d022      	beq.n	8005596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2205      	movs	r2, #5
 8005554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3301      	adds	r3, #1
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d307      	bcc.n	8005584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f2      	bne.n	8005568 <HAL_DMA_IRQHandler+0x2cc>
 8005582:	e000      	b.n	8005586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	e000      	b.n	80055aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80055a8:	bf00      	nop
    }
  }
}
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d108      	bne.n	80055f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055ee:	e007      	b.n	8005600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	3b10      	subs	r3, #16
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <DMA_CalcBaseAndBitshift+0x64>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <DMA_CalcBaseAndBitshift+0x68>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d909      	bls.n	800564e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	659a      	str	r2, [r3, #88]	; 0x58
 800564c:	e007      	b.n	800565e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	aaaaaaab 	.word	0xaaaaaaab
 8005674:	0800d81c 	.word	0x0800d81c

08005678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11f      	bne.n	80056d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d856      	bhi.n	8005746 <DMA_CheckFifoParam+0xce>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <DMA_CheckFifoParam+0x28>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056c3 	.word	0x080056c3
 80056a8:	080056b1 	.word	0x080056b1
 80056ac:	08005747 	.word	0x08005747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d046      	beq.n	800574a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e043      	b.n	800574a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056ca:	d140      	bne.n	800574e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d0:	e03d      	b.n	800574e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d121      	bne.n	8005720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d837      	bhi.n	8005752 <DMA_CheckFifoParam+0xda>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <DMA_CheckFifoParam+0x70>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	080056f9 	.word	0x080056f9
 80056ec:	080056ff 	.word	0x080056ff
 80056f0:	080056f9 	.word	0x080056f9
 80056f4:	08005711 	.word	0x08005711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e030      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d025      	beq.n	8005756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570e:	e022      	b.n	8005756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005718:	d11f      	bne.n	800575a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800571e:	e01c      	b.n	800575a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d903      	bls.n	800572e <DMA_CheckFifoParam+0xb6>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d003      	beq.n	8005734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800572c:	e018      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e015      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      break;
 8005744:	e00b      	b.n	800575e <DMA_CheckFifoParam+0xe6>
      break;
 8005746:	bf00      	nop
 8005748:	e00a      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800574a:	bf00      	nop
 800574c:	e008      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800574e:	bf00      	nop
 8005750:	e006      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 8005752:	bf00      	nop
 8005754:	e004      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;   
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800575e:	bf00      	nop
    }
  } 
  
  return status; 
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e165      	b.n	8005a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800578c:	2201      	movs	r2, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4013      	ands	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f040 8154 	bne.w	8005a52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d005      	beq.n	80057c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d130      	bne.n	8005824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057f8:	2201      	movs	r2, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 0201 	and.w	r2, r3, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b03      	cmp	r3, #3
 800582e:	d017      	beq.n	8005860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d123      	bne.n	80058b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	08da      	lsrs	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3208      	adds	r2, #8
 8005874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	220f      	movs	r2, #15
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	69b9      	ldr	r1, [r7, #24]
 80058b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2203      	movs	r2, #3
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80ae 	beq.w	8005a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4b5d      	ldr	r3, [pc, #372]	; (8005a70 <HAL_GPIO_Init+0x300>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	4a5c      	ldr	r2, [pc, #368]	; (8005a70 <HAL_GPIO_Init+0x300>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005904:	6453      	str	r3, [r2, #68]	; 0x44
 8005906:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <HAL_GPIO_Init+0x300>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005912:	4a58      	ldr	r2, [pc, #352]	; (8005a74 <HAL_GPIO_Init+0x304>)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	3302      	adds	r3, #2
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	220f      	movs	r2, #15
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4f      	ldr	r2, [pc, #316]	; (8005a78 <HAL_GPIO_Init+0x308>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d025      	beq.n	800598a <HAL_GPIO_Init+0x21a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4e      	ldr	r2, [pc, #312]	; (8005a7c <HAL_GPIO_Init+0x30c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01f      	beq.n	8005986 <HAL_GPIO_Init+0x216>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4d      	ldr	r2, [pc, #308]	; (8005a80 <HAL_GPIO_Init+0x310>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d019      	beq.n	8005982 <HAL_GPIO_Init+0x212>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4c      	ldr	r2, [pc, #304]	; (8005a84 <HAL_GPIO_Init+0x314>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_GPIO_Init+0x20e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4b      	ldr	r2, [pc, #300]	; (8005a88 <HAL_GPIO_Init+0x318>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00d      	beq.n	800597a <HAL_GPIO_Init+0x20a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a4a      	ldr	r2, [pc, #296]	; (8005a8c <HAL_GPIO_Init+0x31c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d007      	beq.n	8005976 <HAL_GPIO_Init+0x206>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a49      	ldr	r2, [pc, #292]	; (8005a90 <HAL_GPIO_Init+0x320>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <HAL_GPIO_Init+0x202>
 800596e:	2306      	movs	r3, #6
 8005970:	e00c      	b.n	800598c <HAL_GPIO_Init+0x21c>
 8005972:	2307      	movs	r3, #7
 8005974:	e00a      	b.n	800598c <HAL_GPIO_Init+0x21c>
 8005976:	2305      	movs	r3, #5
 8005978:	e008      	b.n	800598c <HAL_GPIO_Init+0x21c>
 800597a:	2304      	movs	r3, #4
 800597c:	e006      	b.n	800598c <HAL_GPIO_Init+0x21c>
 800597e:	2303      	movs	r3, #3
 8005980:	e004      	b.n	800598c <HAL_GPIO_Init+0x21c>
 8005982:	2302      	movs	r3, #2
 8005984:	e002      	b.n	800598c <HAL_GPIO_Init+0x21c>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_GPIO_Init+0x21c>
 800598a:	2300      	movs	r3, #0
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	f002 0203 	and.w	r2, r2, #3
 8005992:	0092      	lsls	r2, r2, #2
 8005994:	4093      	lsls	r3, r2
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800599c:	4935      	ldr	r1, [pc, #212]	; (8005a74 <HAL_GPIO_Init+0x304>)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	089b      	lsrs	r3, r3, #2
 80059a2:	3302      	adds	r3, #2
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059aa:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <HAL_GPIO_Init+0x324>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ce:	4a31      	ldr	r2, [pc, #196]	; (8005a94 <HAL_GPIO_Init+0x324>)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059d4:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <HAL_GPIO_Init+0x324>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_GPIO_Init+0x324>)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059fe:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <HAL_GPIO_Init+0x324>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_GPIO_Init+0x324>)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <HAL_GPIO_Init+0x324>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_GPIO_Init+0x324>)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	f67f ae96 	bls.w	800578c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40013800 	.word	0x40013800
 8005a78:	40020000 	.word	0x40020000
 8005a7c:	40020400 	.word	0x40020400
 8005a80:	40020800 	.word	0x40020800
 8005a84:	40020c00 	.word	0x40020c00
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40021400 	.word	0x40021400
 8005a90:	40021800 	.word	0x40021800
 8005a94:	40013c00 	.word	0x40013c00

08005a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	e001      	b.n	8005aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ad8:	787b      	ldrb	r3, [r7, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ade:	887a      	ldrh	r2, [r7, #2]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ae4:	e003      	b.n	8005aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	041a      	lsls	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	619a      	str	r2, [r3, #24]
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e12b      	b.n	8005d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fd ff14 	bl	8003950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b60:	f000 fd5a 	bl	8006618 <HAL_RCC_GetPCLK1Freq>
 8005b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4a81      	ldr	r2, [pc, #516]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d807      	bhi.n	8005b80 <HAL_I2C_Init+0x84>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a80      	ldr	r2, [pc, #512]	; (8005d74 <HAL_I2C_Init+0x278>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bf94      	ite	ls
 8005b78:	2301      	movls	r3, #1
 8005b7a:	2300      	movhi	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e006      	b.n	8005b8e <HAL_I2C_Init+0x92>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a7d      	ldr	r2, [pc, #500]	; (8005d78 <HAL_I2C_Init+0x27c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bf94      	ite	ls
 8005b88:	2301      	movls	r3, #1
 8005b8a:	2300      	movhi	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e0e7      	b.n	8005d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a78      	ldr	r2, [pc, #480]	; (8005d7c <HAL_I2C_Init+0x280>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0c9b      	lsrs	r3, r3, #18
 8005ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d802      	bhi.n	8005bd0 <HAL_I2C_Init+0xd4>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	e009      	b.n	8005be4 <HAL_I2C_Init+0xe8>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	4a69      	ldr	r2, [pc, #420]	; (8005d80 <HAL_I2C_Init+0x284>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	3301      	adds	r3, #1
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	495c      	ldr	r1, [pc, #368]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005c00:	428b      	cmp	r3, r1
 8005c02:	d819      	bhi.n	8005c38 <HAL_I2C_Init+0x13c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1e59      	subs	r1, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c18:	400b      	ands	r3, r1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_I2C_Init+0x138>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1e59      	subs	r1, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c32:	e051      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c34:	2304      	movs	r3, #4
 8005c36:	e04f      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <HAL_I2C_Init+0x168>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1e58      	subs	r0, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e012      	b.n	8005c8a <HAL_I2C_Init+0x18e>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1e58      	subs	r0, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	0099      	lsls	r1, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Init+0x196>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e022      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <HAL_I2C_Init+0x1bc>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1e58      	subs	r0, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	e00f      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e58      	subs	r0, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	0099      	lsls	r1, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6809      	ldr	r1, [r1, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6911      	ldr	r1, [r2, #16]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	000186a0 	.word	0x000186a0
 8005d74:	001e847f 	.word	0x001e847f
 8005d78:	003d08ff 	.word	0x003d08ff
 8005d7c:	431bde83 	.word	0x431bde83
 8005d80:	10624dd3 	.word	0x10624dd3

08005d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	460b      	mov	r3, r1
 8005d92:	817b      	strh	r3, [r7, #10]
 8005d94:	4613      	mov	r3, r2
 8005d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d98:	f7fe fc20 	bl	80045dc <HAL_GetTick>
 8005d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80e0 	bne.w	8005f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2319      	movs	r3, #25
 8005db2:	2201      	movs	r2, #1
 8005db4:	4970      	ldr	r1, [pc, #448]	; (8005f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f964 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0d3      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x50>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0cc      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d007      	beq.n	8005dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2221      	movs	r2, #33	; 0x21
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2210      	movs	r2, #16
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	893a      	ldrh	r2, [r7, #8]
 8005e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a50      	ldr	r2, [pc, #320]	; (8005f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e3c:	8979      	ldrh	r1, [r7, #10]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f89c 	bl	8005f80 <I2C_MasterRequestWrite>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e08d      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e68:	e066      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f9de 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d107      	bne.n	8005e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e06b      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11b      	bne.n	8005f0c <HAL_I2C_Master_Transmit+0x188>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d017      	beq.n	8005f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6a39      	ldr	r1, [r7, #32]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f9ce 	bl	80062b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d107      	bne.n	8005f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01a      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d194      	bne.n	8005e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	00100002 	.word	0x00100002
 8005f7c:	ffff0000 	.word	0xffff0000

08005f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d006      	beq.n	8005faa <I2C_MasterRequestWrite+0x2a>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d003      	beq.n	8005faa <I2C_MasterRequestWrite+0x2a>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fa8:	d108      	bne.n	8005fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e00b      	b.n	8005fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	2b12      	cmp	r3, #18
 8005fc2:	d107      	bne.n	8005fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f84f 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	d103      	bne.n	8006004 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e035      	b.n	8006074 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006010:	d108      	bne.n	8006024 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006020:	611a      	str	r2, [r3, #16]
 8006022:	e01b      	b.n	800605c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006024:	897b      	ldrh	r3, [r7, #10]
 8006026:	11db      	asrs	r3, r3, #7
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f063 030f 	orn	r3, r3, #15
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	490e      	ldr	r1, [pc, #56]	; (800607c <I2C_MasterRequestWrite+0xfc>)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f875 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e010      	b.n	8006074 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4907      	ldr	r1, [pc, #28]	; (8006080 <I2C_MasterRequestWrite+0x100>)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f865 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	00010008 	.word	0x00010008
 8006080:	00010002 	.word	0x00010002

08006084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006094:	e025      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d021      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fe fa9d 	bl	80045dc <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e023      	b.n	800612a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10d      	bne.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	43da      	mvns	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	e00c      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	43da      	mvns	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	429a      	cmp	r2, r3
 8006126:	d0b6      	beq.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006140:	e051      	b.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d123      	bne.n	800619a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800616a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e046      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d021      	beq.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fe fa1b 	bl	80045dc <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e020      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10c      	bne.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e00b      	b.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d18d      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800623c:	e02d      	b.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f878 	bl	8006334 <I2C_IsAcknowledgeFailed>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e02d      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d021      	beq.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fe f9c1 	bl	80045dc <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e007      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d1ca      	bne.n	800623e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062be:	e02d      	b.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f837 	bl	8006334 <I2C_IsAcknowledgeFailed>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02d      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d021      	beq.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fe f980 	bl	80045dc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e007      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d1ca      	bne.n	80062c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634a:	d11b      	bne.n	8006384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4b20      	ldr	r3, [pc, #128]	; (8006424 <HAL_PWREx_EnableOverDrive+0x90>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a1f      	ldr	r2, [pc, #124]	; (8006424 <HAL_PWREx_EnableOverDrive+0x90>)
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	6413      	str	r3, [r2, #64]	; 0x40
 80063ae:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <HAL_PWREx_EnableOverDrive+0x90>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_PWREx_EnableOverDrive+0x94>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063c0:	f7fe f90c 	bl	80045dc <HAL_GetTick>
 80063c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063c6:	e009      	b.n	80063dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063c8:	f7fe f908 	bl	80045dc <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d6:	d901      	bls.n	80063dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e01f      	b.n	800641c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_PWREx_EnableOverDrive+0x98>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d1ee      	bne.n	80063c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f0:	f7fe f8f4 	bl	80045dc <HAL_GetTick>
 80063f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063f6:	e009      	b.n	800640c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063f8:	f7fe f8f0 	bl	80045dc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006406:	d901      	bls.n	800640c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e007      	b.n	800641c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <HAL_PWREx_EnableOverDrive+0x98>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006418:	d1ee      	bne.n	80063f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40023800 	.word	0x40023800
 8006428:	420e0040 	.word	0x420e0040
 800642c:	40007000 	.word	0x40007000
 8006430:	420e0044 	.word	0x420e0044

08006434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0cc      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006448:	4b68      	ldr	r3, [pc, #416]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90c      	bls.n	8006470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b65      	ldr	r3, [pc, #404]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b63      	ldr	r3, [pc, #396]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0b8      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d020      	beq.n	80064be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064a0:	4b53      	ldr	r3, [pc, #332]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a52      	ldr	r2, [pc, #328]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ac:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	494d      	ldr	r1, [pc, #308]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d044      	beq.n	8006554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b47      	ldr	r3, [pc, #284]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d003      	beq.n	80064f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f2:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e06f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006502:	4b3b      	ldr	r3, [pc, #236]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e067      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 0203 	bic.w	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4934      	ldr	r1, [pc, #208]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	4313      	orrs	r3, r2
 8006522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006524:	f7fe f85a 	bl	80045dc <HAL_GetTick>
 8006528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652a:	e00a      	b.n	8006542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800652c:	f7fe f856 	bl	80045dc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e04f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 020c 	and.w	r2, r3, #12
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	429a      	cmp	r2, r3
 8006552:	d1eb      	bne.n	800652c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d20c      	bcs.n	800657c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b22      	ldr	r3, [pc, #136]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e032      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4916      	ldr	r1, [pc, #88]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	490e      	ldr	r1, [pc, #56]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ba:	f000 f855 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	490a      	ldr	r1, [pc, #40]	; (80065f4 <HAL_RCC_ClockConfig+0x1c0>)
 80065cc:	5ccb      	ldrb	r3, [r1, r3]
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <HAL_RCC_ClockConfig+0x1c4>)
 80065d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_RCC_ClockConfig+0x1c8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fd ffba 	bl	8004554 <HAL_InitTick>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40023c00 	.word	0x40023c00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0800d804 	.word	0x0800d804
 80065f8:	20000020 	.word	0x20000020
 80065fc:	20000028 	.word	0x20000028

08006600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <HAL_RCC_GetHCLKFreq+0x14>)
 8006606:	681b      	ldr	r3, [r3, #0]
}
 8006608:	4618      	mov	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000020 	.word	0x20000020

08006618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800661c:	f7ff fff0 	bl	8006600 <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0a9b      	lsrs	r3, r3, #10
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4903      	ldr	r1, [pc, #12]	; (800663c <HAL_RCC_GetPCLK1Freq+0x24>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40023800 	.word	0x40023800
 800663c:	0800d814 	.word	0x0800d814

08006640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006644:	f7ff ffdc 	bl	8006600 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	0b5b      	lsrs	r3, r3, #13
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4903      	ldr	r1, [pc, #12]	; (8006664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	0800d814 	.word	0x0800d814

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800666c:	b0a6      	sub	sp, #152	; 0x98
 800666e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800668e:	4bc8      	ldr	r3, [pc, #800]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b0c      	cmp	r3, #12
 8006698:	f200 817e 	bhi.w	8006998 <HAL_RCC_GetSysClockFreq+0x330>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	08006999 	.word	0x08006999
 80066ac:	08006999 	.word	0x08006999
 80066b0:	08006999 	.word	0x08006999
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	08006999 	.word	0x08006999
 80066bc:	08006999 	.word	0x08006999
 80066c0:	08006999 	.word	0x08006999
 80066c4:	080066e9 	.word	0x080066e9
 80066c8:	08006999 	.word	0x08006999
 80066cc:	08006999 	.word	0x08006999
 80066d0:	08006999 	.word	0x08006999
 80066d4:	08006853 	.word	0x08006853
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4bb6      	ldr	r3, [pc, #728]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80066da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80066de:	e15f      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066e0:	4bb5      	ldr	r3, [pc, #724]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x350>)
 80066e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80066e6:	e15b      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e8:	4bb1      	ldr	r3, [pc, #708]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066f4:	4bae      	ldr	r3, [pc, #696]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d031      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006700:	4bab      	ldr	r3, [pc, #684]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	2200      	movs	r2, #0
 8006708:	66bb      	str	r3, [r7, #104]	; 0x68
 800670a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800670c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	663b      	str	r3, [r7, #96]	; 0x60
 8006714:	2300      	movs	r3, #0
 8006716:	667b      	str	r3, [r7, #100]	; 0x64
 8006718:	4ba7      	ldr	r3, [pc, #668]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800671a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800671e:	462a      	mov	r2, r5
 8006720:	fb03 f202 	mul.w	r2, r3, r2
 8006724:	2300      	movs	r3, #0
 8006726:	4621      	mov	r1, r4
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	4aa2      	ldr	r2, [pc, #648]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006730:	4621      	mov	r1, r4
 8006732:	fba1 1202 	umull	r1, r2, r1, r2
 8006736:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006738:	460a      	mov	r2, r1
 800673a:	67ba      	str	r2, [r7, #120]	; 0x78
 800673c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800673e:	4413      	add	r3, r2
 8006740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006746:	2200      	movs	r2, #0
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800674c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006750:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006754:	f7fa fab8 	bl	8000cc8 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4613      	mov	r3, r2
 800675e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006762:	e064      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006764:	4b92      	ldr	r3, [pc, #584]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	2200      	movs	r2, #0
 800676c:	653b      	str	r3, [r7, #80]	; 0x50
 800676e:	657a      	str	r2, [r7, #84]	; 0x54
 8006770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	64bb      	str	r3, [r7, #72]	; 0x48
 8006778:	2300      	movs	r3, #0
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	0159      	lsls	r1, r3, #5
 800678e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006792:	0150      	lsls	r0, r2, #5
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4621      	mov	r1, r4
 800679a:	1a51      	subs	r1, r2, r1
 800679c:	6139      	str	r1, [r7, #16]
 800679e:	4629      	mov	r1, r5
 80067a0:	eb63 0301 	sbc.w	r3, r3, r1
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b2:	4659      	mov	r1, fp
 80067b4:	018b      	lsls	r3, r1, #6
 80067b6:	4651      	mov	r1, sl
 80067b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067bc:	4651      	mov	r1, sl
 80067be:	018a      	lsls	r2, r1, #6
 80067c0:	4651      	mov	r1, sl
 80067c2:	ebb2 0801 	subs.w	r8, r2, r1
 80067c6:	4659      	mov	r1, fp
 80067c8:	eb63 0901 	sbc.w	r9, r3, r1
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067e0:	4690      	mov	r8, r2
 80067e2:	4699      	mov	r9, r3
 80067e4:	4623      	mov	r3, r4
 80067e6:	eb18 0303 	adds.w	r3, r8, r3
 80067ea:	60bb      	str	r3, [r7, #8]
 80067ec:	462b      	mov	r3, r5
 80067ee:	eb49 0303 	adc.w	r3, r9, r3
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006800:	4629      	mov	r1, r5
 8006802:	028b      	lsls	r3, r1, #10
 8006804:	4621      	mov	r1, r4
 8006806:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800680a:	4621      	mov	r1, r4
 800680c:	028a      	lsls	r2, r1, #10
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006816:	2200      	movs	r2, #0
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
 800681a:	647a      	str	r2, [r7, #68]	; 0x44
 800681c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006820:	f7fa fa52 	bl	8000cc8 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4613      	mov	r3, r2
 800682a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800682e:	4b60      	ldr	r3, [pc, #384]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	3301      	adds	r3, #1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006840:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006850:	e0a6      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006852:	4b57      	ldr	r3, [pc, #348]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800685a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800685e:	4b54      	ldr	r3, [pc, #336]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02a      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686a:	4b51      	ldr	r3, [pc, #324]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	2200      	movs	r2, #0
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
 8006874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800687c:	2100      	movs	r1, #0
 800687e:	4b4e      	ldr	r3, [pc, #312]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006880:	fb03 f201 	mul.w	r2, r3, r1
 8006884:	2300      	movs	r3, #0
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	4413      	add	r3, r2
 800688c:	4a4a      	ldr	r2, [pc, #296]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800688e:	fba0 1202 	umull	r1, r2, r0, r2
 8006892:	677a      	str	r2, [r7, #116]	; 0x74
 8006894:	460a      	mov	r2, r1
 8006896:	673a      	str	r2, [r7, #112]	; 0x70
 8006898:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800689a:	4413      	add	r3, r2
 800689c:	677b      	str	r3, [r7, #116]	; 0x74
 800689e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068a2:	2200      	movs	r2, #0
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
 80068a6:	637a      	str	r2, [r7, #52]	; 0x34
 80068a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80068b0:	f7fa fa0a 	bl	8000cc8 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068be:	e05b      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c0:	4b3b      	ldr	r3, [pc, #236]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	2200      	movs	r2, #0
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	623b      	str	r3, [r7, #32]
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	f04f 0000 	mov.w	r0, #0
 80068e4:	f04f 0100 	mov.w	r1, #0
 80068e8:	0159      	lsls	r1, r3, #5
 80068ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ee:	0150      	lsls	r0, r2, #5
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4641      	mov	r1, r8
 80068f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068fa:	4649      	mov	r1, r9
 80068fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800690c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006914:	ebb2 040a 	subs.w	r4, r2, sl
 8006918:	eb63 050b 	sbc.w	r5, r3, fp
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	00eb      	lsls	r3, r5, #3
 8006926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800692a:	00e2      	lsls	r2, r4, #3
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	4643      	mov	r3, r8
 8006932:	18e3      	adds	r3, r4, r3
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	464b      	mov	r3, r9
 8006938:	eb45 0303 	adc.w	r3, r5, r3
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800694a:	4629      	mov	r1, r5
 800694c:	028b      	lsls	r3, r1, #10
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006954:	4621      	mov	r1, r4
 8006956:	028a      	lsls	r2, r1, #10
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006960:	2200      	movs	r2, #0
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	61fa      	str	r2, [r7, #28]
 8006966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800696a:	f7fa f9ad 	bl	8000cc8 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4613      	mov	r3, r2
 8006974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	0f1b      	lsrs	r3, r3, #28
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800698a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006996:	e003      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800699a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800699e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3798      	adds	r7, #152	; 0x98
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	00b71b00 	.word	0x00b71b00

080069bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e28d      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8083 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069dc:	4b94      	ldr	r3, [pc, #592]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 030c 	and.w	r3, r3, #12
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d019      	beq.n	8006a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069e8:	4b91      	ldr	r3, [pc, #580]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d106      	bne.n	8006a02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80069f4:	4b8e      	ldr	r3, [pc, #568]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a00:	d00c      	beq.n	8006a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a02:	4b8b      	ldr	r3, [pc, #556]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d112      	bne.n	8006a34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a0e:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a1c:	4b84      	ldr	r3, [pc, #528]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d05b      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x124>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d157      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e25a      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCC_OscConfig+0x90>
 8006a3e:	4b7c      	ldr	r3, [pc, #496]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7b      	ldr	r2, [pc, #492]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e01d      	b.n	8006a88 <HAL_RCC_OscConfig+0xcc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCC_OscConfig+0xb4>
 8006a56:	4b76      	ldr	r3, [pc, #472]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a75      	ldr	r2, [pc, #468]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a72      	ldr	r2, [pc, #456]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e00b      	b.n	8006a88 <HAL_RCC_OscConfig+0xcc>
 8006a70:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4b6c      	ldr	r3, [pc, #432]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a6b      	ldr	r2, [pc, #428]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d013      	beq.n	8006ab8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fd fda4 	bl	80045dc <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a98:	f7fd fda0 	bl	80045dc <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e21f      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	4b61      	ldr	r3, [pc, #388]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0xdc>
 8006ab6:	e014      	b.n	8006ae2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fd fd90 	bl	80045dc <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac0:	f7fd fd8c 	bl	80045dc <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	; 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e20b      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad2:	4b57      	ldr	r3, [pc, #348]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x104>
 8006ade:	e000      	b.n	8006ae2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d06f      	beq.n	8006bce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006aee:	4b50      	ldr	r3, [pc, #320]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d017      	beq.n	8006b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006afa:	4b4d      	ldr	r3, [pc, #308]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d105      	bne.n	8006b12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b06:	4b4a      	ldr	r3, [pc, #296]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b12:	4b47      	ldr	r3, [pc, #284]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	d11c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1e:	4b44      	ldr	r3, [pc, #272]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d116      	bne.n	8006b58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2a:	4b41      	ldr	r3, [pc, #260]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_RCC_OscConfig+0x186>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e1d3      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b42:	4b3b      	ldr	r3, [pc, #236]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4937      	ldr	r1, [pc, #220]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b56:	e03a      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b60:	4b34      	ldr	r3, [pc, #208]	; (8006c34 <HAL_RCC_OscConfig+0x278>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fd fd39 	bl	80045dc <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6e:	f7fd fd35 	bl	80045dc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e1b4      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b80:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4925      	ldr	r1, [pc, #148]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	e015      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba2:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <HAL_RCC_OscConfig+0x278>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fd fd18 	bl	80045dc <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb0:	f7fd fd14 	bl	80045dc <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e193      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d036      	beq.n	8006c48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <HAL_RCC_OscConfig+0x27c>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fd fcf8 	bl	80045dc <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf0:	f7fd fcf4 	bl	80045dc <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e173      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCC_OscConfig+0x274>)
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x234>
 8006c0e:	e01b      	b.n	8006c48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <HAL_RCC_OscConfig+0x27c>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c16:	f7fd fce1 	bl	80045dc <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1c:	e00e      	b.n	8006c3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c1e:	f7fd fcdd 	bl	80045dc <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d907      	bls.n	8006c3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e15c      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
 8006c30:	40023800 	.word	0x40023800
 8006c34:	42470000 	.word	0x42470000
 8006c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ea      	bne.n	8006c1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8097 	beq.w	8006d84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10f      	bne.n	8006c86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4a7e      	ldr	r2, [pc, #504]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6413      	str	r3, [r2, #64]	; 0x40
 8006c76:	4b7c      	ldr	r3, [pc, #496]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c86:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCC_OscConfig+0x4b0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c92:	4b76      	ldr	r3, [pc, #472]	; (8006e6c <HAL_RCC_OscConfig+0x4b0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <HAL_RCC_OscConfig+0x4b0>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9e:	f7fd fc9d 	bl	80045dc <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fd fc99 	bl	80045dc <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e118      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb8:	4b6c      	ldr	r3, [pc, #432]	; (8006e6c <HAL_RCC_OscConfig+0x4b0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x31e>
 8006ccc:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	4a65      	ldr	r2, [pc, #404]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd8:	e01c      	b.n	8006d14 <HAL_RCC_OscConfig+0x358>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x340>
 8006ce2:	4b61      	ldr	r3, [pc, #388]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	4a60      	ldr	r2, [pc, #384]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006ce8:	f043 0304 	orr.w	r3, r3, #4
 8006cec:	6713      	str	r3, [r2, #112]	; 0x70
 8006cee:	4b5e      	ldr	r3, [pc, #376]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	4a5d      	ldr	r2, [pc, #372]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCC_OscConfig+0x358>
 8006cfc:	4b5a      	ldr	r3, [pc, #360]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	4a59      	ldr	r2, [pc, #356]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	6713      	str	r3, [r2, #112]	; 0x70
 8006d08:	4b57      	ldr	r3, [pc, #348]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	4a56      	ldr	r2, [pc, #344]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d0e:	f023 0304 	bic.w	r3, r3, #4
 8006d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1c:	f7fd fc5e 	bl	80045dc <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d22:	e00a      	b.n	8006d3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d24:	f7fd fc5a 	bl	80045dc <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e0d7      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3a:	4b4b      	ldr	r3, [pc, #300]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0ee      	beq.n	8006d24 <HAL_RCC_OscConfig+0x368>
 8006d46:	e014      	b.n	8006d72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fd fc48 	bl	80045dc <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d50:	f7fd fc44 	bl	80045dc <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e0c1      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d66:	4b40      	ldr	r3, [pc, #256]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ee      	bne.n	8006d50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d105      	bne.n	8006d84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	4a3a      	ldr	r2, [pc, #232]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80ad 	beq.w	8006ee8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d8e:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d060      	beq.n	8006e5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d145      	bne.n	8006e2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <HAL_RCC_OscConfig+0x4b4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fd fc18 	bl	80045dc <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fd fc14 	bl	80045dc <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e093      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	071b      	lsls	r3, r3, #28
 8006dfa:	491b      	ldr	r1, [pc, #108]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e00:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x4b4>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e06:	f7fd fbe9 	bl	80045dc <HAL_GetTick>
 8006e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e0e:	f7fd fbe5 	bl	80045dc <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e064      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e20:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCC_OscConfig+0x452>
 8006e2c:	e05c      	b.n	8006ee8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2e:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <HAL_RCC_OscConfig+0x4b4>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fd fbd2 	bl	80045dc <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fd fbce 	bl	80045dc <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e04d      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <HAL_RCC_OscConfig+0x4ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x480>
 8006e5a:	e045      	b.n	8006ee8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e040      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <HAL_RCC_OscConfig+0x538>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d030      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d129      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d122      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d119      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d10f      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800

08006ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07b      	b.n	8007002 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d108      	bne.n	8006f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1a:	d009      	beq.n	8006f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	61da      	str	r2, [r3, #28]
 8006f22:	e005      	b.n	8006f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fc fd48 	bl	80039e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	f003 0104 	and.w	r1, r3, #4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0210 	and.w	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e041      	b.n	80070a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fc fe27 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f000 fcdb 	bl	8007a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e04e      	b.n	800715e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <HAL_TIM_Base_Start_IT+0xc4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d01d      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <HAL_TIM_Base_Start_IT+0xc8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HAL_TIM_Base_Start_IT+0xcc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <HAL_TIM_Base_Start_IT+0xd0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1b      	ldr	r2, [pc, #108]	; (800717c <HAL_TIM_Base_Start_IT+0xd4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_TIM_Base_Start_IT+0xd8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x80>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_TIM_Base_Start_IT+0xdc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d111      	bne.n	800714c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b06      	cmp	r3, #6
 8007138:	d010      	beq.n	800715c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	e007      	b.n	800715c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40010400 	.word	0x40010400
 8007180:	40014000 	.word	0x40014000
 8007184:	40001800 	.word	0x40001800

08007188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e041      	b.n	800721e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fc fcb4 	bl	8003b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f000 fc1c 	bl	8007a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_TIM_PWM_Start+0x24>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e022      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d109      	bne.n	8007266 <HAL_TIM_PWM_Start+0x3e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e015      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d109      	bne.n	8007280 <HAL_TIM_PWM_Start+0x58>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e008      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e07c      	b.n	8007394 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_PWM_Start+0x82>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	e013      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_PWM_Start+0x92>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_PWM_Start+0xa2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	e003      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2201      	movs	r2, #1
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fde2 	bl	8007ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2d      	ldr	r2, [pc, #180]	; (800739c <HAL_TIM_PWM_Start+0x174>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_PWM_Start+0xcc>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2c      	ldr	r2, [pc, #176]	; (80073a0 <HAL_TIM_PWM_Start+0x178>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_PWM_Start+0xd0>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_TIM_PWM_Start+0xd2>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800730c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a22      	ldr	r2, [pc, #136]	; (800739c <HAL_TIM_PWM_Start+0x174>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007320:	d01d      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1f      	ldr	r2, [pc, #124]	; (80073a4 <HAL_TIM_PWM_Start+0x17c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_TIM_PWM_Start+0x180>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <HAL_TIM_PWM_Start+0x184>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <HAL_TIM_PWM_Start+0x178>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <HAL_TIM_PWM_Start+0x188>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_PWM_Start+0x136>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <HAL_TIM_PWM_Start+0x18c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d111      	bne.n	8007382 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d010      	beq.n	8007392 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	e007      	b.n	8007392 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0201 	orr.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40010000 	.word	0x40010000
 80073a0:	40010400 	.word	0x40010400
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40001800 	.word	0x40001800

080073b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e097      	b.n	80074fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fc fbd1 	bl	8003b88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073fc:	f023 0307 	bic.w	r3, r3, #7
 8007400:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f000 faf9 	bl	8007a04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	4313      	orrs	r3, r2
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007458:	f023 030c 	bic.w	r3, r3, #12
 800745c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	4313      	orrs	r3, r2
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	011a      	lsls	r2, r3, #4
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	031b      	lsls	r3, r3, #12
 8007488:	4313      	orrs	r3, r2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800749e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	4313      	orrs	r3, r2
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007514:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800751c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007524:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800752c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d110      	bne.n	8007556 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d102      	bne.n	8007540 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800753a:	7b7b      	ldrb	r3, [r7, #13]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d001      	beq.n	8007544 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e069      	b.n	8007618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007554:	e031      	b.n	80075ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d110      	bne.n	800757e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d102      	bne.n	8007568 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007562:	7b3b      	ldrb	r3, [r7, #12]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d001      	beq.n	800756c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e055      	b.n	8007618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800757c:	e01d      	b.n	80075ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d108      	bne.n	8007596 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d105      	bne.n	8007596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800758a:	7b7b      	ldrb	r3, [r7, #13]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007590:	7b3b      	ldrb	r3, [r7, #12]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d001      	beq.n	800759a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e03e      	b.n	8007618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_TIM_Encoder_Start+0xc4>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d008      	beq.n	80075d8 <HAL_TIM_Encoder_Start+0xd4>
 80075c6:	e00f      	b.n	80075e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fc67 	bl	8007ea4 <TIM_CCxChannelCmd>
      break;
 80075d6:	e016      	b.n	8007606 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2201      	movs	r2, #1
 80075de:	2104      	movs	r1, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fc5f 	bl	8007ea4 <TIM_CCxChannelCmd>
      break;
 80075e6:	e00e      	b.n	8007606 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2201      	movs	r2, #1
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fc57 	bl	8007ea4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	2104      	movs	r1, #4
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fc50 	bl	8007ea4 <TIM_CCxChannelCmd>
      break;
 8007604:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b02      	cmp	r3, #2
 8007634:	d122      	bne.n	800767c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b02      	cmp	r3, #2
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0202 	mvn.w	r2, #2
 800764c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f9b0 	bl	80079c8 <HAL_TIM_IC_CaptureCallback>
 8007668:	e005      	b.n	8007676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f9a2 	bl	80079b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9b3 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b04      	cmp	r3, #4
 8007688:	d122      	bne.n	80076d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b04      	cmp	r3, #4
 8007696:	d11b      	bne.n	80076d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0204 	mvn.w	r2, #4
 80076a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f986 	bl	80079c8 <HAL_TIM_IC_CaptureCallback>
 80076bc:	e005      	b.n	80076ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f978 	bl	80079b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f989 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d122      	bne.n	8007724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d11b      	bne.n	8007724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0208 	mvn.w	r2, #8
 80076f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2204      	movs	r2, #4
 80076fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f95c 	bl	80079c8 <HAL_TIM_IC_CaptureCallback>
 8007710:	e005      	b.n	800771e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f94e 	bl	80079b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f95f 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b10      	cmp	r3, #16
 8007730:	d122      	bne.n	8007778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b10      	cmp	r3, #16
 800773e:	d11b      	bne.n	8007778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0210 	mvn.w	r2, #16
 8007748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2208      	movs	r2, #8
 800774e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f932 	bl	80079c8 <HAL_TIM_IC_CaptureCallback>
 8007764:	e005      	b.n	8007772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f924 	bl	80079b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f935 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d10e      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	d107      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0201 	mvn.w	r2, #1
 800779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fc fd7c 	bl	800429c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b80      	cmp	r3, #128	; 0x80
 80077b0:	d10e      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077bc:	2b80      	cmp	r3, #128	; 0x80
 80077be:	d107      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc68 	bl	80080a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d10e      	bne.n	80077fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d107      	bne.n	80077fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8fa 	bl	80079f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b20      	cmp	r3, #32
 8007808:	d10e      	bne.n	8007828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b20      	cmp	r3, #32
 8007816:	d107      	bne.n	8007828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0220 	mvn.w	r2, #32
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc32 	bl	800808c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800784a:	2302      	movs	r3, #2
 800784c:	e0ae      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	f200 809f 	bhi.w	800799c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007899 	.word	0x08007899
 8007868:	0800799d 	.word	0x0800799d
 800786c:	0800799d 	.word	0x0800799d
 8007870:	0800799d 	.word	0x0800799d
 8007874:	080078d9 	.word	0x080078d9
 8007878:	0800799d 	.word	0x0800799d
 800787c:	0800799d 	.word	0x0800799d
 8007880:	0800799d 	.word	0x0800799d
 8007884:	0800791b 	.word	0x0800791b
 8007888:	0800799d 	.word	0x0800799d
 800788c:	0800799d 	.word	0x0800799d
 8007890:	0800799d 	.word	0x0800799d
 8007894:	0800795b 	.word	0x0800795b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f950 	bl	8007b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0208 	orr.w	r2, r2, #8
 80078b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0204 	bic.w	r2, r2, #4
 80078c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6999      	ldr	r1, [r3, #24]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	619a      	str	r2, [r3, #24]
      break;
 80078d6:	e064      	b.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f9a0 	bl	8007c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6999      	ldr	r1, [r3, #24]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	021a      	lsls	r2, r3, #8
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	619a      	str	r2, [r3, #24]
      break;
 8007918:	e043      	b.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f9f5 	bl	8007d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0208 	orr.w	r2, r2, #8
 8007934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0204 	bic.w	r2, r2, #4
 8007944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69d9      	ldr	r1, [r3, #28]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	61da      	str	r2, [r3, #28]
      break;
 8007958:	e023      	b.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fa49 	bl	8007df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69da      	ldr	r2, [r3, #28]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69d9      	ldr	r1, [r3, #28]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	021a      	lsls	r2, r3, #8
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	61da      	str	r2, [r3, #28]
      break;
 800799a:	e002      	b.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	75fb      	strb	r3, [r7, #23]
      break;
 80079a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a40      	ldr	r2, [pc, #256]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d00f      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3d      	ldr	r2, [pc, #244]	; (8007b1c <TIM_Base_SetConfig+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3c      	ldr	r2, [pc, #240]	; (8007b20 <TIM_Base_SetConfig+0x11c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a3b      	ldr	r2, [pc, #236]	; (8007b24 <TIM_Base_SetConfig+0x120>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a3a      	ldr	r2, [pc, #232]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d108      	bne.n	8007a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2f      	ldr	r2, [pc, #188]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d02b      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d027      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2c      	ldr	r2, [pc, #176]	; (8007b1c <TIM_Base_SetConfig+0x118>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d023      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2b      	ldr	r2, [pc, #172]	; (8007b20 <TIM_Base_SetConfig+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d01f      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2a      	ldr	r2, [pc, #168]	; (8007b24 <TIM_Base_SetConfig+0x120>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01b      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d017      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <TIM_Base_SetConfig+0x128>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <TIM_Base_SetConfig+0x12c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00f      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a26      	ldr	r2, [pc, #152]	; (8007b34 <TIM_Base_SetConfig+0x130>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <TIM_Base_SetConfig+0x134>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a24      	ldr	r2, [pc, #144]	; (8007b3c <TIM_Base_SetConfig+0x138>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a23      	ldr	r2, [pc, #140]	; (8007b40 <TIM_Base_SetConfig+0x13c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a0a      	ldr	r2, [pc, #40]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_Base_SetConfig+0xf8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d103      	bne.n	8007b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	615a      	str	r2, [r3, #20]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800
 8007b38:	40001800 	.word	0x40001800
 8007b3c:	40001c00 	.word	0x40001c00
 8007b40:	40002000 	.word	0x40002000

08007b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0201 	bic.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 0302 	bic.w	r3, r3, #2
 8007b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <TIM_OC1_SetConfig+0xd8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC1_SetConfig+0x64>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <TIM_OC1_SetConfig+0xdc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d10c      	bne.n	8007bc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0308 	bic.w	r3, r3, #8
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f023 0304 	bic.w	r3, r3, #4
 8007bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a15      	ldr	r2, [pc, #84]	; (8007c1c <TIM_OC1_SetConfig+0xd8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_OC1_SetConfig+0x8e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <TIM_OC1_SetConfig+0xdc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d111      	bne.n	8007bf6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	bf00      	nop
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40010400 	.word	0x40010400

08007c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f023 0210 	bic.w	r2, r3, #16
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0320 	bic.w	r3, r3, #32
 8007c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a22      	ldr	r2, [pc, #136]	; (8007d08 <TIM_OC2_SetConfig+0xe4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_OC2_SetConfig+0x68>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a21      	ldr	r2, [pc, #132]	; (8007d0c <TIM_OC2_SetConfig+0xe8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d10d      	bne.n	8007ca8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <TIM_OC2_SetConfig+0xe4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC2_SetConfig+0x94>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <TIM_OC2_SetConfig+0xe8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d113      	bne.n	8007ce0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400

08007d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0303 	bic.w	r3, r3, #3
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a21      	ldr	r2, [pc, #132]	; (8007df0 <TIM_OC3_SetConfig+0xe0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_OC3_SetConfig+0x66>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a20      	ldr	r2, [pc, #128]	; (8007df4 <TIM_OC3_SetConfig+0xe4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10d      	bne.n	8007d92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <TIM_OC3_SetConfig+0xe0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <TIM_OC3_SetConfig+0x92>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <TIM_OC3_SetConfig+0xe4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d113      	bne.n	8007dca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	621a      	str	r2, [r3, #32]
}
 8007de4:	bf00      	nop
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400

08007df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	031b      	lsls	r3, r3, #12
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a12      	ldr	r2, [pc, #72]	; (8007e9c <TIM_OC4_SetConfig+0xa4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d003      	beq.n	8007e60 <TIM_OC4_SetConfig+0x68>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a11      	ldr	r2, [pc, #68]	; (8007ea0 <TIM_OC4_SetConfig+0xa8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d109      	bne.n	8007e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	019b      	lsls	r3, r3, #6
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400

08007ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	401a      	ands	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1a      	ldr	r2, [r3, #32]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e05a      	b.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d022      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d01d      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1d      	ldr	r2, [pc, #116]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d018      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1a      	ldr	r2, [pc, #104]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00e      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a18      	ldr	r2, [pc, #96]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d009      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10c      	bne.n	8007fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40010000 	.word	0x40010000
 8007fd0:	40000400 	.word	0x40000400
 8007fd4:	40000800 	.word	0x40000800
 8007fd8:	40000c00 	.word	0x40000c00
 8007fdc:	40010400 	.word	0x40010400
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40001800 	.word	0x40001800

08007fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008000:	2302      	movs	r3, #2
 8008002:	e03d      	b.n	8008080 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e03f      	b.n	8008146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d106      	bne.n	80080e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fb fe5a 	bl	8003d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	; 0x24
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f829 	bl	8008150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800810c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	695a      	ldr	r2, [r3, #20]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800811c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800812c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008154:	b0c0      	sub	sp, #256	; 0x100
 8008156:	af00      	add	r7, sp, #0
 8008158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	68d9      	ldr	r1, [r3, #12]
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	ea40 0301 	orr.w	r3, r0, r1
 8008178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	431a      	orrs	r2, r3
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	431a      	orrs	r2, r3
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	4313      	orrs	r3, r2
 8008198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800819c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081a8:	f021 010c 	bic.w	r1, r1, #12
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081b6:	430b      	orrs	r3, r1
 80081b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ca:	6999      	ldr	r1, [r3, #24]
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	ea40 0301 	orr.w	r3, r0, r1
 80081d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b8f      	ldr	r3, [pc, #572]	; (800841c <UART_SetConfig+0x2cc>)
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d005      	beq.n	80081f0 <UART_SetConfig+0xa0>
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b8d      	ldr	r3, [pc, #564]	; (8008420 <UART_SetConfig+0x2d0>)
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d104      	bne.n	80081fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081f0:	f7fe fa26 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 80081f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80081f8:	e003      	b.n	8008202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081fa:	f7fe fa0d 	bl	8006618 <HAL_RCC_GetPCLK1Freq>
 80081fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	f040 810c 	bne.w	8008428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008214:	2200      	movs	r2, #0
 8008216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800821a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800821e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	1891      	adds	r1, r2, r2
 8008228:	65b9      	str	r1, [r7, #88]	; 0x58
 800822a:	415b      	adcs	r3, r3
 800822c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800822e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008232:	4621      	mov	r1, r4
 8008234:	eb12 0801 	adds.w	r8, r2, r1
 8008238:	4629      	mov	r1, r5
 800823a:	eb43 0901 	adc.w	r9, r3, r1
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800824a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800824e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008252:	4690      	mov	r8, r2
 8008254:	4699      	mov	r9, r3
 8008256:	4623      	mov	r3, r4
 8008258:	eb18 0303 	adds.w	r3, r8, r3
 800825c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008260:	462b      	mov	r3, r5
 8008262:	eb49 0303 	adc.w	r3, r9, r3
 8008266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800827a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800827e:	460b      	mov	r3, r1
 8008280:	18db      	adds	r3, r3, r3
 8008282:	653b      	str	r3, [r7, #80]	; 0x50
 8008284:	4613      	mov	r3, r2
 8008286:	eb42 0303 	adc.w	r3, r2, r3
 800828a:	657b      	str	r3, [r7, #84]	; 0x54
 800828c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008294:	f7f8 fd18 	bl	8000cc8 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4b61      	ldr	r3, [pc, #388]	; (8008424 <UART_SetConfig+0x2d4>)
 800829e:	fba3 2302 	umull	r2, r3, r3, r2
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	011c      	lsls	r4, r3, #4
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	1891      	adds	r1, r2, r2
 80082be:	64b9      	str	r1, [r7, #72]	; 0x48
 80082c0:	415b      	adcs	r3, r3
 80082c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082c8:	4641      	mov	r1, r8
 80082ca:	eb12 0a01 	adds.w	sl, r2, r1
 80082ce:	4649      	mov	r1, r9
 80082d0:	eb43 0b01 	adc.w	fp, r3, r1
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082e8:	4692      	mov	sl, r2
 80082ea:	469b      	mov	fp, r3
 80082ec:	4643      	mov	r3, r8
 80082ee:	eb1a 0303 	adds.w	r3, sl, r3
 80082f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082f6:	464b      	mov	r3, r9
 80082f8:	eb4b 0303 	adc.w	r3, fp, r3
 80082fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800830c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008314:	460b      	mov	r3, r1
 8008316:	18db      	adds	r3, r3, r3
 8008318:	643b      	str	r3, [r7, #64]	; 0x40
 800831a:	4613      	mov	r3, r2
 800831c:	eb42 0303 	adc.w	r3, r2, r3
 8008320:	647b      	str	r3, [r7, #68]	; 0x44
 8008322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800832a:	f7f8 fccd 	bl	8000cc8 <__aeabi_uldivmod>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4611      	mov	r1, r2
 8008334:	4b3b      	ldr	r3, [pc, #236]	; (8008424 <UART_SetConfig+0x2d4>)
 8008336:	fba3 2301 	umull	r2, r3, r3, r1
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	2264      	movs	r2, #100	; 0x64
 800833e:	fb02 f303 	mul.w	r3, r2, r3
 8008342:	1acb      	subs	r3, r1, r3
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800834a:	4b36      	ldr	r3, [pc, #216]	; (8008424 <UART_SetConfig+0x2d4>)
 800834c:	fba3 2302 	umull	r2, r3, r3, r2
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008358:	441c      	add	r4, r3
 800835a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800836c:	4642      	mov	r2, r8
 800836e:	464b      	mov	r3, r9
 8008370:	1891      	adds	r1, r2, r2
 8008372:	63b9      	str	r1, [r7, #56]	; 0x38
 8008374:	415b      	adcs	r3, r3
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800837c:	4641      	mov	r1, r8
 800837e:	1851      	adds	r1, r2, r1
 8008380:	6339      	str	r1, [r7, #48]	; 0x30
 8008382:	4649      	mov	r1, r9
 8008384:	414b      	adcs	r3, r1
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008394:	4659      	mov	r1, fp
 8008396:	00cb      	lsls	r3, r1, #3
 8008398:	4651      	mov	r1, sl
 800839a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800839e:	4651      	mov	r1, sl
 80083a0:	00ca      	lsls	r2, r1, #3
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	4642      	mov	r2, r8
 80083aa:	189b      	adds	r3, r3, r2
 80083ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b0:	464b      	mov	r3, r9
 80083b2:	460a      	mov	r2, r1
 80083b4:	eb42 0303 	adc.w	r3, r2, r3
 80083b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80083cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083d0:	460b      	mov	r3, r1
 80083d2:	18db      	adds	r3, r3, r3
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083d6:	4613      	mov	r3, r2
 80083d8:	eb42 0303 	adc.w	r3, r2, r3
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083e6:	f7f8 fc6f 	bl	8000cc8 <__aeabi_uldivmod>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <UART_SetConfig+0x2d4>)
 80083f0:	fba3 1302 	umull	r1, r3, r3, r2
 80083f4:	095b      	lsrs	r3, r3, #5
 80083f6:	2164      	movs	r1, #100	; 0x64
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	3332      	adds	r3, #50	; 0x32
 8008402:	4a08      	ldr	r2, [pc, #32]	; (8008424 <UART_SetConfig+0x2d4>)
 8008404:	fba2 2303 	umull	r2, r3, r2, r3
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	f003 0207 	and.w	r2, r3, #7
 800840e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4422      	add	r2, r4
 8008416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008418:	e105      	b.n	8008626 <UART_SetConfig+0x4d6>
 800841a:	bf00      	nop
 800841c:	40011000 	.word	0x40011000
 8008420:	40011400 	.word	0x40011400
 8008424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842c:	2200      	movs	r2, #0
 800842e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800843a:	4642      	mov	r2, r8
 800843c:	464b      	mov	r3, r9
 800843e:	1891      	adds	r1, r2, r2
 8008440:	6239      	str	r1, [r7, #32]
 8008442:	415b      	adcs	r3, r3
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
 8008446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800844a:	4641      	mov	r1, r8
 800844c:	1854      	adds	r4, r2, r1
 800844e:	4649      	mov	r1, r9
 8008450:	eb43 0501 	adc.w	r5, r3, r1
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	00eb      	lsls	r3, r5, #3
 800845e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008462:	00e2      	lsls	r2, r4, #3
 8008464:	4614      	mov	r4, r2
 8008466:	461d      	mov	r5, r3
 8008468:	4643      	mov	r3, r8
 800846a:	18e3      	adds	r3, r4, r3
 800846c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008470:	464b      	mov	r3, r9
 8008472:	eb45 0303 	adc.w	r3, r5, r3
 8008476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800847a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008496:	4629      	mov	r1, r5
 8008498:	008b      	lsls	r3, r1, #2
 800849a:	4621      	mov	r1, r4
 800849c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a0:	4621      	mov	r1, r4
 80084a2:	008a      	lsls	r2, r1, #2
 80084a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084a8:	f7f8 fc0e 	bl	8000cc8 <__aeabi_uldivmod>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4b60      	ldr	r3, [pc, #384]	; (8008634 <UART_SetConfig+0x4e4>)
 80084b2:	fba3 2302 	umull	r2, r3, r3, r2
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	011c      	lsls	r4, r3, #4
 80084ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80084cc:	4642      	mov	r2, r8
 80084ce:	464b      	mov	r3, r9
 80084d0:	1891      	adds	r1, r2, r2
 80084d2:	61b9      	str	r1, [r7, #24]
 80084d4:	415b      	adcs	r3, r3
 80084d6:	61fb      	str	r3, [r7, #28]
 80084d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084dc:	4641      	mov	r1, r8
 80084de:	1851      	adds	r1, r2, r1
 80084e0:	6139      	str	r1, [r7, #16]
 80084e2:	4649      	mov	r1, r9
 80084e4:	414b      	adcs	r3, r1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084f4:	4659      	mov	r1, fp
 80084f6:	00cb      	lsls	r3, r1, #3
 80084f8:	4651      	mov	r1, sl
 80084fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084fe:	4651      	mov	r1, sl
 8008500:	00ca      	lsls	r2, r1, #3
 8008502:	4610      	mov	r0, r2
 8008504:	4619      	mov	r1, r3
 8008506:	4603      	mov	r3, r0
 8008508:	4642      	mov	r2, r8
 800850a:	189b      	adds	r3, r3, r2
 800850c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008510:	464b      	mov	r3, r9
 8008512:	460a      	mov	r2, r1
 8008514:	eb42 0303 	adc.w	r3, r2, r3
 8008518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	67bb      	str	r3, [r7, #120]	; 0x78
 8008526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008534:	4649      	mov	r1, r9
 8008536:	008b      	lsls	r3, r1, #2
 8008538:	4641      	mov	r1, r8
 800853a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800853e:	4641      	mov	r1, r8
 8008540:	008a      	lsls	r2, r1, #2
 8008542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008546:	f7f8 fbbf 	bl	8000cc8 <__aeabi_uldivmod>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4b39      	ldr	r3, [pc, #228]	; (8008634 <UART_SetConfig+0x4e4>)
 8008550:	fba3 1302 	umull	r1, r3, r3, r2
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	2164      	movs	r1, #100	; 0x64
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	3332      	adds	r3, #50	; 0x32
 8008562:	4a34      	ldr	r2, [pc, #208]	; (8008634 <UART_SetConfig+0x4e4>)
 8008564:	fba2 2303 	umull	r2, r3, r2, r3
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800856e:	441c      	add	r4, r3
 8008570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008574:	2200      	movs	r2, #0
 8008576:	673b      	str	r3, [r7, #112]	; 0x70
 8008578:	677a      	str	r2, [r7, #116]	; 0x74
 800857a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800857e:	4642      	mov	r2, r8
 8008580:	464b      	mov	r3, r9
 8008582:	1891      	adds	r1, r2, r2
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	415b      	adcs	r3, r3
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800858e:	4641      	mov	r1, r8
 8008590:	1851      	adds	r1, r2, r1
 8008592:	6039      	str	r1, [r7, #0]
 8008594:	4649      	mov	r1, r9
 8008596:	414b      	adcs	r3, r1
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	f04f 0300 	mov.w	r3, #0
 80085a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085a6:	4659      	mov	r1, fp
 80085a8:	00cb      	lsls	r3, r1, #3
 80085aa:	4651      	mov	r1, sl
 80085ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085b0:	4651      	mov	r1, sl
 80085b2:	00ca      	lsls	r2, r1, #3
 80085b4:	4610      	mov	r0, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	4642      	mov	r2, r8
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c0:	464b      	mov	r3, r9
 80085c2:	460a      	mov	r2, r1
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	663b      	str	r3, [r7, #96]	; 0x60
 80085d4:	667a      	str	r2, [r7, #100]	; 0x64
 80085d6:	f04f 0200 	mov.w	r2, #0
 80085da:	f04f 0300 	mov.w	r3, #0
 80085de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80085e2:	4649      	mov	r1, r9
 80085e4:	008b      	lsls	r3, r1, #2
 80085e6:	4641      	mov	r1, r8
 80085e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ec:	4641      	mov	r1, r8
 80085ee:	008a      	lsls	r2, r1, #2
 80085f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085f4:	f7f8 fb68 	bl	8000cc8 <__aeabi_uldivmod>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <UART_SetConfig+0x4e4>)
 80085fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	2164      	movs	r1, #100	; 0x64
 8008606:	fb01 f303 	mul.w	r3, r1, r3
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	3332      	adds	r3, #50	; 0x32
 8008610:	4a08      	ldr	r2, [pc, #32]	; (8008634 <UART_SetConfig+0x4e4>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	f003 020f 	and.w	r2, r3, #15
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4422      	add	r2, r4
 8008624:	609a      	str	r2, [r3, #8]
}
 8008626:	bf00      	nop
 8008628:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800862c:	46bd      	mov	sp, r7
 800862e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008632:	bf00      	nop
 8008634:	51eb851f 	.word	0x51eb851f

08008638 <__errno>:
 8008638:	4b01      	ldr	r3, [pc, #4]	; (8008640 <__errno+0x8>)
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000030 	.word	0x20000030

08008644 <__libc_init_array>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4d0d      	ldr	r5, [pc, #52]	; (800867c <__libc_init_array+0x38>)
 8008648:	4c0d      	ldr	r4, [pc, #52]	; (8008680 <__libc_init_array+0x3c>)
 800864a:	1b64      	subs	r4, r4, r5
 800864c:	10a4      	asrs	r4, r4, #2
 800864e:	2600      	movs	r6, #0
 8008650:	42a6      	cmp	r6, r4
 8008652:	d109      	bne.n	8008668 <__libc_init_array+0x24>
 8008654:	4d0b      	ldr	r5, [pc, #44]	; (8008684 <__libc_init_array+0x40>)
 8008656:	4c0c      	ldr	r4, [pc, #48]	; (8008688 <__libc_init_array+0x44>)
 8008658:	f004 ffe4 	bl	800d624 <_init>
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	10a4      	asrs	r4, r4, #2
 8008660:	2600      	movs	r6, #0
 8008662:	42a6      	cmp	r6, r4
 8008664:	d105      	bne.n	8008672 <__libc_init_array+0x2e>
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	f855 3b04 	ldr.w	r3, [r5], #4
 800866c:	4798      	blx	r3
 800866e:	3601      	adds	r6, #1
 8008670:	e7ee      	b.n	8008650 <__libc_init_array+0xc>
 8008672:	f855 3b04 	ldr.w	r3, [r5], #4
 8008676:	4798      	blx	r3
 8008678:	3601      	adds	r6, #1
 800867a:	e7f2      	b.n	8008662 <__libc_init_array+0x1e>
 800867c:	0800dd20 	.word	0x0800dd20
 8008680:	0800dd20 	.word	0x0800dd20
 8008684:	0800dd20 	.word	0x0800dd20
 8008688:	0800dd24 	.word	0x0800dd24

0800868c <memset>:
 800868c:	4402      	add	r2, r0
 800868e:	4603      	mov	r3, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <memset+0xa>
 8008694:	4770      	bx	lr
 8008696:	f803 1b01 	strb.w	r1, [r3], #1
 800869a:	e7f9      	b.n	8008690 <memset+0x4>

0800869c <__cvt>:
 800869c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	ec55 4b10 	vmov	r4, r5, d0
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	460e      	mov	r6, r1
 80086a8:	4619      	mov	r1, r3
 80086aa:	462b      	mov	r3, r5
 80086ac:	bfbb      	ittet	lt
 80086ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086b2:	461d      	movlt	r5, r3
 80086b4:	2300      	movge	r3, #0
 80086b6:	232d      	movlt	r3, #45	; 0x2d
 80086b8:	700b      	strb	r3, [r1, #0]
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086c0:	4691      	mov	r9, r2
 80086c2:	f023 0820 	bic.w	r8, r3, #32
 80086c6:	bfbc      	itt	lt
 80086c8:	4622      	movlt	r2, r4
 80086ca:	4614      	movlt	r4, r2
 80086cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086d0:	d005      	beq.n	80086de <__cvt+0x42>
 80086d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086d6:	d100      	bne.n	80086da <__cvt+0x3e>
 80086d8:	3601      	adds	r6, #1
 80086da:	2102      	movs	r1, #2
 80086dc:	e000      	b.n	80086e0 <__cvt+0x44>
 80086de:	2103      	movs	r1, #3
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	ab02      	add	r3, sp, #8
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	ec45 4b10 	vmov	d0, r4, r5
 80086ec:	4653      	mov	r3, sl
 80086ee:	4632      	mov	r2, r6
 80086f0:	f002 f816 	bl	800a720 <_dtoa_r>
 80086f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086f8:	4607      	mov	r7, r0
 80086fa:	d102      	bne.n	8008702 <__cvt+0x66>
 80086fc:	f019 0f01 	tst.w	r9, #1
 8008700:	d022      	beq.n	8008748 <__cvt+0xac>
 8008702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008706:	eb07 0906 	add.w	r9, r7, r6
 800870a:	d110      	bne.n	800872e <__cvt+0x92>
 800870c:	783b      	ldrb	r3, [r7, #0]
 800870e:	2b30      	cmp	r3, #48	; 0x30
 8008710:	d10a      	bne.n	8008728 <__cvt+0x8c>
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	f7f8 f9f5 	bl	8000b08 <__aeabi_dcmpeq>
 800871e:	b918      	cbnz	r0, 8008728 <__cvt+0x8c>
 8008720:	f1c6 0601 	rsb	r6, r6, #1
 8008724:	f8ca 6000 	str.w	r6, [sl]
 8008728:	f8da 3000 	ldr.w	r3, [sl]
 800872c:	4499      	add	r9, r3
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f8 f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800873a:	b108      	cbz	r0, 8008740 <__cvt+0xa4>
 800873c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008740:	2230      	movs	r2, #48	; 0x30
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	454b      	cmp	r3, r9
 8008746:	d307      	bcc.n	8008758 <__cvt+0xbc>
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800874c:	1bdb      	subs	r3, r3, r7
 800874e:	4638      	mov	r0, r7
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	b004      	add	sp, #16
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	1c59      	adds	r1, r3, #1
 800875a:	9103      	str	r1, [sp, #12]
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e7f0      	b.n	8008742 <__cvt+0xa6>

08008760 <__exponent>:
 8008760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008762:	4603      	mov	r3, r0
 8008764:	2900      	cmp	r1, #0
 8008766:	bfb8      	it	lt
 8008768:	4249      	neglt	r1, r1
 800876a:	f803 2b02 	strb.w	r2, [r3], #2
 800876e:	bfb4      	ite	lt
 8008770:	222d      	movlt	r2, #45	; 0x2d
 8008772:	222b      	movge	r2, #43	; 0x2b
 8008774:	2909      	cmp	r1, #9
 8008776:	7042      	strb	r2, [r0, #1]
 8008778:	dd2a      	ble.n	80087d0 <__exponent+0x70>
 800877a:	f10d 0407 	add.w	r4, sp, #7
 800877e:	46a4      	mov	ip, r4
 8008780:	270a      	movs	r7, #10
 8008782:	46a6      	mov	lr, r4
 8008784:	460a      	mov	r2, r1
 8008786:	fb91 f6f7 	sdiv	r6, r1, r7
 800878a:	fb07 1516 	mls	r5, r7, r6, r1
 800878e:	3530      	adds	r5, #48	; 0x30
 8008790:	2a63      	cmp	r2, #99	; 0x63
 8008792:	f104 34ff 	add.w	r4, r4, #4294967295
 8008796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800879a:	4631      	mov	r1, r6
 800879c:	dcf1      	bgt.n	8008782 <__exponent+0x22>
 800879e:	3130      	adds	r1, #48	; 0x30
 80087a0:	f1ae 0502 	sub.w	r5, lr, #2
 80087a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087a8:	1c44      	adds	r4, r0, #1
 80087aa:	4629      	mov	r1, r5
 80087ac:	4561      	cmp	r1, ip
 80087ae:	d30a      	bcc.n	80087c6 <__exponent+0x66>
 80087b0:	f10d 0209 	add.w	r2, sp, #9
 80087b4:	eba2 020e 	sub.w	r2, r2, lr
 80087b8:	4565      	cmp	r5, ip
 80087ba:	bf88      	it	hi
 80087bc:	2200      	movhi	r2, #0
 80087be:	4413      	add	r3, r2
 80087c0:	1a18      	subs	r0, r3, r0
 80087c2:	b003      	add	sp, #12
 80087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087ce:	e7ed      	b.n	80087ac <__exponent+0x4c>
 80087d0:	2330      	movs	r3, #48	; 0x30
 80087d2:	3130      	adds	r1, #48	; 0x30
 80087d4:	7083      	strb	r3, [r0, #2]
 80087d6:	70c1      	strb	r1, [r0, #3]
 80087d8:	1d03      	adds	r3, r0, #4
 80087da:	e7f1      	b.n	80087c0 <__exponent+0x60>

080087dc <_printf_float>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	ed2d 8b02 	vpush	{d8}
 80087e4:	b08d      	sub	sp, #52	; 0x34
 80087e6:	460c      	mov	r4, r1
 80087e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087ec:	4616      	mov	r6, r2
 80087ee:	461f      	mov	r7, r3
 80087f0:	4605      	mov	r5, r0
 80087f2:	f003 faa9 	bl	800bd48 <_localeconv_r>
 80087f6:	f8d0 a000 	ldr.w	sl, [r0]
 80087fa:	4650      	mov	r0, sl
 80087fc:	f7f7 fd08 	bl	8000210 <strlen>
 8008800:	2300      	movs	r3, #0
 8008802:	930a      	str	r3, [sp, #40]	; 0x28
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8d8 3000 	ldr.w	r3, [r8]
 800880c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008810:	3307      	adds	r3, #7
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	f103 0208 	add.w	r2, r3, #8
 800881a:	f8c8 2000 	str.w	r2, [r8]
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008826:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800882a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	f8cd 8018 	str.w	r8, [sp, #24]
 8008834:	ee08 0a10 	vmov	s16, r0
 8008838:	4b9f      	ldr	r3, [pc, #636]	; (8008ab8 <_printf_float+0x2dc>)
 800883a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	f7f8 f993 	bl	8000b6c <__aeabi_dcmpun>
 8008846:	bb88      	cbnz	r0, 80088ac <_printf_float+0xd0>
 8008848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800884c:	4b9a      	ldr	r3, [pc, #616]	; (8008ab8 <_printf_float+0x2dc>)
 800884e:	f04f 32ff 	mov.w	r2, #4294967295
 8008852:	f7f8 f96d 	bl	8000b30 <__aeabi_dcmple>
 8008856:	bb48      	cbnz	r0, 80088ac <_printf_float+0xd0>
 8008858:	2200      	movs	r2, #0
 800885a:	2300      	movs	r3, #0
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f8 f95c 	bl	8000b1c <__aeabi_dcmplt>
 8008864:	b110      	cbz	r0, 800886c <_printf_float+0x90>
 8008866:	232d      	movs	r3, #45	; 0x2d
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	4b93      	ldr	r3, [pc, #588]	; (8008abc <_printf_float+0x2e0>)
 800886e:	4894      	ldr	r0, [pc, #592]	; (8008ac0 <_printf_float+0x2e4>)
 8008870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008874:	bf94      	ite	ls
 8008876:	4698      	movls	r8, r3
 8008878:	4680      	movhi	r8, r0
 800887a:	2303      	movs	r3, #3
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	9b05      	ldr	r3, [sp, #20]
 8008880:	f023 0204 	bic.w	r2, r3, #4
 8008884:	6022      	str	r2, [r4, #0]
 8008886:	f04f 0900 	mov.w	r9, #0
 800888a:	9700      	str	r7, [sp, #0]
 800888c:	4633      	mov	r3, r6
 800888e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008890:	4621      	mov	r1, r4
 8008892:	4628      	mov	r0, r5
 8008894:	f000 f9d8 	bl	8008c48 <_printf_common>
 8008898:	3001      	adds	r0, #1
 800889a:	f040 8090 	bne.w	80089be <_printf_float+0x1e2>
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	b00d      	add	sp, #52	; 0x34
 80088a4:	ecbd 8b02 	vpop	{d8}
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f8 f95a 	bl	8000b6c <__aeabi_dcmpun>
 80088b8:	b140      	cbz	r0, 80088cc <_printf_float+0xf0>
 80088ba:	464b      	mov	r3, r9
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bfbc      	itt	lt
 80088c0:	232d      	movlt	r3, #45	; 0x2d
 80088c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088c6:	487f      	ldr	r0, [pc, #508]	; (8008ac4 <_printf_float+0x2e8>)
 80088c8:	4b7f      	ldr	r3, [pc, #508]	; (8008ac8 <_printf_float+0x2ec>)
 80088ca:	e7d1      	b.n	8008870 <_printf_float+0x94>
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088d2:	9206      	str	r2, [sp, #24]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	d13f      	bne.n	8008958 <_printf_float+0x17c>
 80088d8:	2306      	movs	r3, #6
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	9b05      	ldr	r3, [sp, #20]
 80088de:	6861      	ldr	r1, [r4, #4]
 80088e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088e4:	2300      	movs	r3, #0
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	ab0a      	add	r3, sp, #40	; 0x28
 80088ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088ee:	ab09      	add	r3, sp, #36	; 0x24
 80088f0:	ec49 8b10 	vmov	d0, r8, r9
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7ff fecd 	bl	800869c <__cvt>
 8008902:	9b06      	ldr	r3, [sp, #24]
 8008904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008906:	2b47      	cmp	r3, #71	; 0x47
 8008908:	4680      	mov	r8, r0
 800890a:	d108      	bne.n	800891e <_printf_float+0x142>
 800890c:	1cc8      	adds	r0, r1, #3
 800890e:	db02      	blt.n	8008916 <_printf_float+0x13a>
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	4299      	cmp	r1, r3
 8008914:	dd41      	ble.n	800899a <_printf_float+0x1be>
 8008916:	f1ab 0b02 	sub.w	fp, fp, #2
 800891a:	fa5f fb8b 	uxtb.w	fp, fp
 800891e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008922:	d820      	bhi.n	8008966 <_printf_float+0x18a>
 8008924:	3901      	subs	r1, #1
 8008926:	465a      	mov	r2, fp
 8008928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800892c:	9109      	str	r1, [sp, #36]	; 0x24
 800892e:	f7ff ff17 	bl	8008760 <__exponent>
 8008932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008934:	1813      	adds	r3, r2, r0
 8008936:	2a01      	cmp	r2, #1
 8008938:	4681      	mov	r9, r0
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	dc02      	bgt.n	8008944 <_printf_float+0x168>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	07d2      	lsls	r2, r2, #31
 8008942:	d501      	bpl.n	8008948 <_printf_float+0x16c>
 8008944:	3301      	adds	r3, #1
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800894c:	2b00      	cmp	r3, #0
 800894e:	d09c      	beq.n	800888a <_printf_float+0xae>
 8008950:	232d      	movs	r3, #45	; 0x2d
 8008952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008956:	e798      	b.n	800888a <_printf_float+0xae>
 8008958:	9a06      	ldr	r2, [sp, #24]
 800895a:	2a47      	cmp	r2, #71	; 0x47
 800895c:	d1be      	bne.n	80088dc <_printf_float+0x100>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1bc      	bne.n	80088dc <_printf_float+0x100>
 8008962:	2301      	movs	r3, #1
 8008964:	e7b9      	b.n	80088da <_printf_float+0xfe>
 8008966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800896a:	d118      	bne.n	800899e <_printf_float+0x1c2>
 800896c:	2900      	cmp	r1, #0
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	dd0b      	ble.n	800898a <_printf_float+0x1ae>
 8008972:	6121      	str	r1, [r4, #16]
 8008974:	b913      	cbnz	r3, 800897c <_printf_float+0x1a0>
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	07d0      	lsls	r0, r2, #31
 800897a:	d502      	bpl.n	8008982 <_printf_float+0x1a6>
 800897c:	3301      	adds	r3, #1
 800897e:	440b      	add	r3, r1
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	65a1      	str	r1, [r4, #88]	; 0x58
 8008984:	f04f 0900 	mov.w	r9, #0
 8008988:	e7de      	b.n	8008948 <_printf_float+0x16c>
 800898a:	b913      	cbnz	r3, 8008992 <_printf_float+0x1b6>
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	07d2      	lsls	r2, r2, #31
 8008990:	d501      	bpl.n	8008996 <_printf_float+0x1ba>
 8008992:	3302      	adds	r3, #2
 8008994:	e7f4      	b.n	8008980 <_printf_float+0x1a4>
 8008996:	2301      	movs	r3, #1
 8008998:	e7f2      	b.n	8008980 <_printf_float+0x1a4>
 800899a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	4299      	cmp	r1, r3
 80089a2:	db05      	blt.n	80089b0 <_printf_float+0x1d4>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	6121      	str	r1, [r4, #16]
 80089a8:	07d8      	lsls	r0, r3, #31
 80089aa:	d5ea      	bpl.n	8008982 <_printf_float+0x1a6>
 80089ac:	1c4b      	adds	r3, r1, #1
 80089ae:	e7e7      	b.n	8008980 <_printf_float+0x1a4>
 80089b0:	2900      	cmp	r1, #0
 80089b2:	bfd4      	ite	le
 80089b4:	f1c1 0202 	rsble	r2, r1, #2
 80089b8:	2201      	movgt	r2, #1
 80089ba:	4413      	add	r3, r2
 80089bc:	e7e0      	b.n	8008980 <_printf_float+0x1a4>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	055a      	lsls	r2, r3, #21
 80089c2:	d407      	bmi.n	80089d4 <_printf_float+0x1f8>
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	4642      	mov	r2, r8
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	d12c      	bne.n	8008a2c <_printf_float+0x250>
 80089d2:	e764      	b.n	800889e <_printf_float+0xc2>
 80089d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089d8:	f240 80e0 	bls.w	8008b9c <_printf_float+0x3c0>
 80089dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089e0:	2200      	movs	r2, #0
 80089e2:	2300      	movs	r3, #0
 80089e4:	f7f8 f890 	bl	8000b08 <__aeabi_dcmpeq>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d034      	beq.n	8008a56 <_printf_float+0x27a>
 80089ec:	4a37      	ldr	r2, [pc, #220]	; (8008acc <_printf_float+0x2f0>)
 80089ee:	2301      	movs	r3, #1
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af51 	beq.w	800889e <_printf_float+0xc2>
 80089fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a00:	429a      	cmp	r2, r3
 8008a02:	db02      	blt.n	8008a0a <_printf_float+0x22e>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07d8      	lsls	r0, r3, #31
 8008a08:	d510      	bpl.n	8008a2c <_printf_float+0x250>
 8008a0a:	ee18 3a10 	vmov	r3, s16
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af41 	beq.w	800889e <_printf_float+0xc2>
 8008a1c:	f04f 0800 	mov.w	r8, #0
 8008a20:	f104 091a 	add.w	r9, r4, #26
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	3b01      	subs	r3, #1
 8008a28:	4543      	cmp	r3, r8
 8008a2a:	dc09      	bgt.n	8008a40 <_printf_float+0x264>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	f100 8105 	bmi.w	8008c3e <_printf_float+0x462>
 8008a34:	68e0      	ldr	r0, [r4, #12]
 8008a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a38:	4298      	cmp	r0, r3
 8008a3a:	bfb8      	it	lt
 8008a3c:	4618      	movlt	r0, r3
 8008a3e:	e730      	b.n	80088a2 <_printf_float+0xc6>
 8008a40:	2301      	movs	r3, #1
 8008a42:	464a      	mov	r2, r9
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	f43f af27 	beq.w	800889e <_printf_float+0xc2>
 8008a50:	f108 0801 	add.w	r8, r8, #1
 8008a54:	e7e6      	b.n	8008a24 <_printf_float+0x248>
 8008a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc39      	bgt.n	8008ad0 <_printf_float+0x2f4>
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <_printf_float+0x2f0>)
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4631      	mov	r1, r6
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	f43f af19 	beq.w	800889e <_printf_float+0xc2>
 8008a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d102      	bne.n	8008a7a <_printf_float+0x29e>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d5d8      	bpl.n	8008a2c <_printf_float+0x250>
 8008a7a:	ee18 3a10 	vmov	r3, s16
 8008a7e:	4652      	mov	r2, sl
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af09 	beq.w	800889e <_printf_float+0xc2>
 8008a8c:	f04f 0900 	mov.w	r9, #0
 8008a90:	f104 0a1a 	add.w	sl, r4, #26
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	425b      	negs	r3, r3
 8008a98:	454b      	cmp	r3, r9
 8008a9a:	dc01      	bgt.n	8008aa0 <_printf_float+0x2c4>
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9e:	e792      	b.n	80089c6 <_printf_float+0x1ea>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f aef7 	beq.w	800889e <_printf_float+0xc2>
 8008ab0:	f109 0901 	add.w	r9, r9, #1
 8008ab4:	e7ee      	b.n	8008a94 <_printf_float+0x2b8>
 8008ab6:	bf00      	nop
 8008ab8:	7fefffff 	.word	0x7fefffff
 8008abc:	0800d828 	.word	0x0800d828
 8008ac0:	0800d82c 	.word	0x0800d82c
 8008ac4:	0800d834 	.word	0x0800d834
 8008ac8:	0800d830 	.word	0x0800d830
 8008acc:	0800d838 	.word	0x0800d838
 8008ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	bfa8      	it	ge
 8008ad8:	461a      	movge	r2, r3
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	4691      	mov	r9, r2
 8008ade:	dc37      	bgt.n	8008b50 <_printf_float+0x374>
 8008ae0:	f04f 0b00 	mov.w	fp, #0
 8008ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ae8:	f104 021a 	add.w	r2, r4, #26
 8008aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aee:	9305      	str	r3, [sp, #20]
 8008af0:	eba3 0309 	sub.w	r3, r3, r9
 8008af4:	455b      	cmp	r3, fp
 8008af6:	dc33      	bgt.n	8008b60 <_printf_float+0x384>
 8008af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008afc:	429a      	cmp	r2, r3
 8008afe:	db3b      	blt.n	8008b78 <_printf_float+0x39c>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	07da      	lsls	r2, r3, #31
 8008b04:	d438      	bmi.n	8008b78 <_printf_float+0x39c>
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	9a05      	ldr	r2, [sp, #20]
 8008b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0c:	1a9a      	subs	r2, r3, r2
 8008b0e:	eba3 0901 	sub.w	r9, r3, r1
 8008b12:	4591      	cmp	r9, r2
 8008b14:	bfa8      	it	ge
 8008b16:	4691      	movge	r9, r2
 8008b18:	f1b9 0f00 	cmp.w	r9, #0
 8008b1c:	dc35      	bgt.n	8008b8a <_printf_float+0x3ae>
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b26:	f104 0a1a 	add.w	sl, r4, #26
 8008b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	eba3 0309 	sub.w	r3, r3, r9
 8008b34:	4543      	cmp	r3, r8
 8008b36:	f77f af79 	ble.w	8008a2c <_printf_float+0x250>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4652      	mov	r2, sl
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f aeaa 	beq.w	800889e <_printf_float+0xc2>
 8008b4a:	f108 0801 	add.w	r8, r8, #1
 8008b4e:	e7ec      	b.n	8008b2a <_printf_float+0x34e>
 8008b50:	4613      	mov	r3, r2
 8008b52:	4631      	mov	r1, r6
 8008b54:	4642      	mov	r2, r8
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d1c0      	bne.n	8008ae0 <_printf_float+0x304>
 8008b5e:	e69e      	b.n	800889e <_printf_float+0xc2>
 8008b60:	2301      	movs	r3, #1
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	f43f ae97 	beq.w	800889e <_printf_float+0xc2>
 8008b70:	9a05      	ldr	r2, [sp, #20]
 8008b72:	f10b 0b01 	add.w	fp, fp, #1
 8008b76:	e7b9      	b.n	8008aec <_printf_float+0x310>
 8008b78:	ee18 3a10 	vmov	r3, s16
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	d1be      	bne.n	8008b06 <_printf_float+0x32a>
 8008b88:	e689      	b.n	800889e <_printf_float+0xc2>
 8008b8a:	9a05      	ldr	r2, [sp, #20]
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	4442      	add	r2, r8
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	d1c1      	bne.n	8008b1e <_printf_float+0x342>
 8008b9a:	e680      	b.n	800889e <_printf_float+0xc2>
 8008b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b9e:	2a01      	cmp	r2, #1
 8008ba0:	dc01      	bgt.n	8008ba6 <_printf_float+0x3ca>
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d538      	bpl.n	8008c18 <_printf_float+0x43c>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4642      	mov	r2, r8
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	f43f ae74 	beq.w	800889e <_printf_float+0xc2>
 8008bb6:	ee18 3a10 	vmov	r3, s16
 8008bba:	4652      	mov	r2, sl
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f ae6b 	beq.w	800889e <_printf_float+0xc2>
 8008bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f7f7 ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 8008bd4:	b9d8      	cbnz	r0, 8008c0e <_printf_float+0x432>
 8008bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd8:	f108 0201 	add.w	r2, r8, #1
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	d10e      	bne.n	8008c06 <_printf_float+0x42a>
 8008be8:	e659      	b.n	800889e <_printf_float+0xc2>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f ae52 	beq.w	800889e <_printf_float+0xc2>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c00:	3b01      	subs	r3, #1
 8008c02:	4543      	cmp	r3, r8
 8008c04:	dcf1      	bgt.n	8008bea <_printf_float+0x40e>
 8008c06:	464b      	mov	r3, r9
 8008c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c0c:	e6dc      	b.n	80089c8 <_printf_float+0x1ec>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	f104 0a1a 	add.w	sl, r4, #26
 8008c16:	e7f2      	b.n	8008bfe <_printf_float+0x422>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	e7df      	b.n	8008bde <_printf_float+0x402>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	464a      	mov	r2, r9
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f ae38 	beq.w	800889e <_printf_float+0xc2>
 8008c2e:	f108 0801 	add.w	r8, r8, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	4543      	cmp	r3, r8
 8008c3a:	dcf0      	bgt.n	8008c1e <_printf_float+0x442>
 8008c3c:	e6fa      	b.n	8008a34 <_printf_float+0x258>
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	f104 0919 	add.w	r9, r4, #25
 8008c46:	e7f4      	b.n	8008c32 <_printf_float+0x456>

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc26      	bgt.n	8008cde <_printf_common+0x96>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42b      	bmi.n	8008cf8 <_printf_common+0xb0>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d01e      	beq.n	8008cec <_printf_common+0xa4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	68e5      	ldr	r5, [r4, #12]
 8008cb2:	6832      	ldr	r2, [r6, #0]
 8008cb4:	f003 0306 	and.w	r3, r3, #6
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	bf08      	it	eq
 8008cbc:	1aad      	subeq	r5, r5, r2
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	6922      	ldr	r2, [r4, #16]
 8008cc2:	bf0c      	ite	eq
 8008cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc8:	2500      	movne	r5, #0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bfc4      	itt	gt
 8008cce:	1a9b      	subgt	r3, r3, r2
 8008cd0:	18ed      	addgt	r5, r5, r3
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xc8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xa8>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xac>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c6      	b.n	8008c86 <_printf_common+0x3e>
 8008cf8:	18e1      	adds	r1, r4, r3
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d02:	4422      	add	r2, r4
 8008d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7c7      	b.n	8008ca0 <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa4>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x8e>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	7e0f      	ldrb	r7, [r1, #24]
 8008d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d2c:	2f78      	cmp	r7, #120	; 0x78
 8008d2e:	4691      	mov	r9, r2
 8008d30:	4680      	mov	r8, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	469a      	mov	sl, r3
 8008d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	; 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d8 	beq.w	8008ef6 <_printf_i+0x1d2>
 8008d46:	2f58      	cmp	r7, #88	; 0x58
 8008d48:	f000 80a3 	beq.w	8008e92 <_printf_i+0x16e>
 8008d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a101      	add	r1, pc, #4	; (adr r1, 8008d64 <_printf_i+0x40>)
 8008d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008edd 	.word	0x08008edd
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008ebf 	.word	0x08008ebf
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008eff 	.word	0x08008eff
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008ec7 	.word	0x08008ec7
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	602a      	str	r2, [r5, #0]
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0a3      	b.n	8008f18 <_printf_i+0x1f4>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	6829      	ldr	r1, [r5, #0]
 8008dd4:	0606      	lsls	r6, r0, #24
 8008dd6:	f101 0304 	add.w	r3, r1, #4
 8008dda:	d50a      	bpl.n	8008df2 <_printf_i+0xce>
 8008ddc:	680e      	ldr	r6, [r1, #0]
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	2e00      	cmp	r6, #0
 8008de2:	da03      	bge.n	8008dec <_printf_i+0xc8>
 8008de4:	232d      	movs	r3, #45	; 0x2d
 8008de6:	4276      	negs	r6, r6
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	485e      	ldr	r0, [pc, #376]	; (8008f68 <_printf_i+0x244>)
 8008dee:	230a      	movs	r3, #10
 8008df0:	e019      	b.n	8008e26 <_printf_i+0x102>
 8008df2:	680e      	ldr	r6, [r1, #0]
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dfa:	bf18      	it	ne
 8008dfc:	b236      	sxthne	r6, r6
 8008dfe:	e7ef      	b.n	8008de0 <_printf_i+0xbc>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	1d19      	adds	r1, r3, #4
 8008e06:	6029      	str	r1, [r5, #0]
 8008e08:	0601      	lsls	r1, r0, #24
 8008e0a:	d501      	bpl.n	8008e10 <_printf_i+0xec>
 8008e0c:	681e      	ldr	r6, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <_printf_i+0xf2>
 8008e10:	0646      	lsls	r6, r0, #25
 8008e12:	d5fb      	bpl.n	8008e0c <_printf_i+0xe8>
 8008e14:	881e      	ldrh	r6, [r3, #0]
 8008e16:	4854      	ldr	r0, [pc, #336]	; (8008f68 <_printf_i+0x244>)
 8008e18:	2f6f      	cmp	r7, #111	; 0x6f
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2308      	moveq	r3, #8
 8008e1e:	230a      	movne	r3, #10
 8008e20:	2100      	movs	r1, #0
 8008e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e26:	6865      	ldr	r5, [r4, #4]
 8008e28:	60a5      	str	r5, [r4, #8]
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	bfa2      	ittt	ge
 8008e2e:	6821      	ldrge	r1, [r4, #0]
 8008e30:	f021 0104 	bicge.w	r1, r1, #4
 8008e34:	6021      	strge	r1, [r4, #0]
 8008e36:	b90e      	cbnz	r6, 8008e3c <_printf_i+0x118>
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	d04d      	beq.n	8008ed8 <_printf_i+0x1b4>
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e42:	fb03 6711 	mls	r7, r3, r1, r6
 8008e46:	5dc7      	ldrb	r7, [r0, r7]
 8008e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e4c:	4637      	mov	r7, r6
 8008e4e:	42bb      	cmp	r3, r7
 8008e50:	460e      	mov	r6, r1
 8008e52:	d9f4      	bls.n	8008e3e <_printf_i+0x11a>
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d10b      	bne.n	8008e70 <_printf_i+0x14c>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	07de      	lsls	r6, r3, #31
 8008e5c:	d508      	bpl.n	8008e70 <_printf_i+0x14c>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	6861      	ldr	r1, [r4, #4]
 8008e62:	4299      	cmp	r1, r3
 8008e64:	bfde      	ittt	le
 8008e66:	2330      	movle	r3, #48	; 0x30
 8008e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e70:	1b52      	subs	r2, r2, r5
 8008e72:	6122      	str	r2, [r4, #16]
 8008e74:	f8cd a000 	str.w	sl, [sp]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	aa03      	add	r2, sp, #12
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f7ff fee2 	bl	8008c48 <_printf_common>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d14c      	bne.n	8008f22 <_printf_i+0x1fe>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	b004      	add	sp, #16
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	4835      	ldr	r0, [pc, #212]	; (8008f68 <_printf_i+0x244>)
 8008e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e98:	6829      	ldr	r1, [r5, #0]
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ea0:	6029      	str	r1, [r5, #0]
 8008ea2:	061d      	lsls	r5, r3, #24
 8008ea4:	d514      	bpl.n	8008ed0 <_printf_i+0x1ac>
 8008ea6:	07df      	lsls	r7, r3, #31
 8008ea8:	bf44      	itt	mi
 8008eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8008eae:	6023      	strmi	r3, [r4, #0]
 8008eb0:	b91e      	cbnz	r6, 8008eba <_printf_i+0x196>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f023 0320 	bic.w	r3, r3, #32
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e7b0      	b.n	8008e20 <_printf_i+0xfc>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f043 0320 	orr.w	r3, r3, #32
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2378      	movs	r3, #120	; 0x78
 8008ec8:	4828      	ldr	r0, [pc, #160]	; (8008f6c <_printf_i+0x248>)
 8008eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ece:	e7e3      	b.n	8008e98 <_printf_i+0x174>
 8008ed0:	0659      	lsls	r1, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2b6      	uxthmi	r6, r6
 8008ed6:	e7e6      	b.n	8008ea6 <_printf_i+0x182>
 8008ed8:	4615      	mov	r5, r2
 8008eda:	e7bb      	b.n	8008e54 <_printf_i+0x130>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	6826      	ldr	r6, [r4, #0]
 8008ee0:	6961      	ldr	r1, [r4, #20]
 8008ee2:	1d18      	adds	r0, r3, #4
 8008ee4:	6028      	str	r0, [r5, #0]
 8008ee6:	0635      	lsls	r5, r6, #24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0x1cc>
 8008eec:	6019      	str	r1, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0x1d2>
 8008ef0:	0670      	lsls	r0, r6, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0x1c8>
 8008ef4:	8019      	strh	r1, [r3, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	4615      	mov	r5, r2
 8008efc:	e7ba      	b.n	8008e74 <_printf_i+0x150>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	602a      	str	r2, [r5, #0]
 8008f04:	681d      	ldr	r5, [r3, #0]
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7f7 f988 	bl	8000220 <memchr>
 8008f10:	b108      	cbz	r0, 8008f16 <_printf_i+0x1f2>
 8008f12:	1b40      	subs	r0, r0, r5
 8008f14:	6060      	str	r0, [r4, #4]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f20:	e7a8      	b.n	8008e74 <_printf_i+0x150>
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4649      	mov	r1, r9
 8008f28:	4640      	mov	r0, r8
 8008f2a:	47d0      	blx	sl
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0ab      	beq.n	8008e88 <_printf_i+0x164>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	079b      	lsls	r3, r3, #30
 8008f34:	d413      	bmi.n	8008f5e <_printf_i+0x23a>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	bfb8      	it	lt
 8008f3e:	4618      	movlt	r0, r3
 8008f40:	e7a4      	b.n	8008e8c <_printf_i+0x168>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4632      	mov	r2, r6
 8008f46:	4649      	mov	r1, r9
 8008f48:	4640      	mov	r0, r8
 8008f4a:	47d0      	blx	sl
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d09b      	beq.n	8008e88 <_printf_i+0x164>
 8008f50:	3501      	adds	r5, #1
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	9903      	ldr	r1, [sp, #12]
 8008f56:	1a5b      	subs	r3, r3, r1
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dcf2      	bgt.n	8008f42 <_printf_i+0x21e>
 8008f5c:	e7eb      	b.n	8008f36 <_printf_i+0x212>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f104 0619 	add.w	r6, r4, #25
 8008f64:	e7f5      	b.n	8008f52 <_printf_i+0x22e>
 8008f66:	bf00      	nop
 8008f68:	0800d83a 	.word	0x0800d83a
 8008f6c:	0800d84b 	.word	0x0800d84b

08008f70 <_scanf_float>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b087      	sub	sp, #28
 8008f76:	4617      	mov	r7, r2
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	688b      	ldr	r3, [r1, #8]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f82:	bf83      	ittte	hi
 8008f84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f88:	195b      	addhi	r3, r3, r5
 8008f8a:	9302      	strhi	r3, [sp, #8]
 8008f8c:	2300      	movls	r3, #0
 8008f8e:	bf86      	itte	hi
 8008f90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f94:	608b      	strhi	r3, [r1, #8]
 8008f96:	9302      	strls	r3, [sp, #8]
 8008f98:	680b      	ldr	r3, [r1, #0]
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	2500      	movs	r5, #0
 8008f9e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008fa2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008fa6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008faa:	4680      	mov	r8, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	465e      	mov	r6, fp
 8008fb0:	46aa      	mov	sl, r5
 8008fb2:	46a9      	mov	r9, r5
 8008fb4:	9501      	str	r5, [sp, #4]
 8008fb6:	68a2      	ldr	r2, [r4, #8]
 8008fb8:	b152      	cbz	r2, 8008fd0 <_scanf_float+0x60>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b4e      	cmp	r3, #78	; 0x4e
 8008fc0:	d864      	bhi.n	800908c <_scanf_float+0x11c>
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d83c      	bhi.n	8009040 <_scanf_float+0xd0>
 8008fc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fca:	b2c8      	uxtb	r0, r1
 8008fcc:	280e      	cmp	r0, #14
 8008fce:	d93a      	bls.n	8009046 <_scanf_float+0xd6>
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	d003      	beq.n	8008fde <_scanf_float+0x6e>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fe2:	f1ba 0f01 	cmp.w	sl, #1
 8008fe6:	f200 8113 	bhi.w	8009210 <_scanf_float+0x2a0>
 8008fea:	455e      	cmp	r6, fp
 8008fec:	f200 8105 	bhi.w	80091fa <_scanf_float+0x28a>
 8008ff0:	2501      	movs	r5, #1
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	b007      	add	sp, #28
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ffe:	2a0d      	cmp	r2, #13
 8009000:	d8e6      	bhi.n	8008fd0 <_scanf_float+0x60>
 8009002:	a101      	add	r1, pc, #4	; (adr r1, 8009008 <_scanf_float+0x98>)
 8009004:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009008:	08009147 	.word	0x08009147
 800900c:	08008fd1 	.word	0x08008fd1
 8009010:	08008fd1 	.word	0x08008fd1
 8009014:	08008fd1 	.word	0x08008fd1
 8009018:	080091a7 	.word	0x080091a7
 800901c:	0800917f 	.word	0x0800917f
 8009020:	08008fd1 	.word	0x08008fd1
 8009024:	08008fd1 	.word	0x08008fd1
 8009028:	08009155 	.word	0x08009155
 800902c:	08008fd1 	.word	0x08008fd1
 8009030:	08008fd1 	.word	0x08008fd1
 8009034:	08008fd1 	.word	0x08008fd1
 8009038:	08008fd1 	.word	0x08008fd1
 800903c:	0800910d 	.word	0x0800910d
 8009040:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009044:	e7db      	b.n	8008ffe <_scanf_float+0x8e>
 8009046:	290e      	cmp	r1, #14
 8009048:	d8c2      	bhi.n	8008fd0 <_scanf_float+0x60>
 800904a:	a001      	add	r0, pc, #4	; (adr r0, 8009050 <_scanf_float+0xe0>)
 800904c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009050:	080090ff 	.word	0x080090ff
 8009054:	08008fd1 	.word	0x08008fd1
 8009058:	080090ff 	.word	0x080090ff
 800905c:	08009193 	.word	0x08009193
 8009060:	08008fd1 	.word	0x08008fd1
 8009064:	080090ad 	.word	0x080090ad
 8009068:	080090e9 	.word	0x080090e9
 800906c:	080090e9 	.word	0x080090e9
 8009070:	080090e9 	.word	0x080090e9
 8009074:	080090e9 	.word	0x080090e9
 8009078:	080090e9 	.word	0x080090e9
 800907c:	080090e9 	.word	0x080090e9
 8009080:	080090e9 	.word	0x080090e9
 8009084:	080090e9 	.word	0x080090e9
 8009088:	080090e9 	.word	0x080090e9
 800908c:	2b6e      	cmp	r3, #110	; 0x6e
 800908e:	d809      	bhi.n	80090a4 <_scanf_float+0x134>
 8009090:	2b60      	cmp	r3, #96	; 0x60
 8009092:	d8b2      	bhi.n	8008ffa <_scanf_float+0x8a>
 8009094:	2b54      	cmp	r3, #84	; 0x54
 8009096:	d077      	beq.n	8009188 <_scanf_float+0x218>
 8009098:	2b59      	cmp	r3, #89	; 0x59
 800909a:	d199      	bne.n	8008fd0 <_scanf_float+0x60>
 800909c:	2d07      	cmp	r5, #7
 800909e:	d197      	bne.n	8008fd0 <_scanf_float+0x60>
 80090a0:	2508      	movs	r5, #8
 80090a2:	e029      	b.n	80090f8 <_scanf_float+0x188>
 80090a4:	2b74      	cmp	r3, #116	; 0x74
 80090a6:	d06f      	beq.n	8009188 <_scanf_float+0x218>
 80090a8:	2b79      	cmp	r3, #121	; 0x79
 80090aa:	e7f6      	b.n	800909a <_scanf_float+0x12a>
 80090ac:	6821      	ldr	r1, [r4, #0]
 80090ae:	05c8      	lsls	r0, r1, #23
 80090b0:	d51a      	bpl.n	80090e8 <_scanf_float+0x178>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80090b8:	6021      	str	r1, [r4, #0]
 80090ba:	f109 0901 	add.w	r9, r9, #1
 80090be:	b11b      	cbz	r3, 80090c8 <_scanf_float+0x158>
 80090c0:	3b01      	subs	r3, #1
 80090c2:	3201      	adds	r2, #1
 80090c4:	9302      	str	r3, [sp, #8]
 80090c6:	60a2      	str	r2, [r4, #8]
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	3301      	adds	r3, #1
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	f340 8084 	ble.w	80091e8 <_scanf_float+0x278>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	603b      	str	r3, [r7, #0]
 80090e6:	e766      	b.n	8008fb6 <_scanf_float+0x46>
 80090e8:	eb1a 0f05 	cmn.w	sl, r5
 80090ec:	f47f af70 	bne.w	8008fd0 <_scanf_float+0x60>
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	f806 3b01 	strb.w	r3, [r6], #1
 80090fc:	e7e4      	b.n	80090c8 <_scanf_float+0x158>
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	0610      	lsls	r0, r2, #24
 8009102:	f57f af65 	bpl.w	8008fd0 <_scanf_float+0x60>
 8009106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800910a:	e7f4      	b.n	80090f6 <_scanf_float+0x186>
 800910c:	f1ba 0f00 	cmp.w	sl, #0
 8009110:	d10e      	bne.n	8009130 <_scanf_float+0x1c0>
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	d10e      	bne.n	8009136 <_scanf_float+0x1c6>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800911e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009122:	d108      	bne.n	8009136 <_scanf_float+0x1c6>
 8009124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	f04f 0a01 	mov.w	sl, #1
 800912e:	e7e3      	b.n	80090f8 <_scanf_float+0x188>
 8009130:	f1ba 0f02 	cmp.w	sl, #2
 8009134:	d055      	beq.n	80091e2 <_scanf_float+0x272>
 8009136:	2d01      	cmp	r5, #1
 8009138:	d002      	beq.n	8009140 <_scanf_float+0x1d0>
 800913a:	2d04      	cmp	r5, #4
 800913c:	f47f af48 	bne.w	8008fd0 <_scanf_float+0x60>
 8009140:	3501      	adds	r5, #1
 8009142:	b2ed      	uxtb	r5, r5
 8009144:	e7d8      	b.n	80090f8 <_scanf_float+0x188>
 8009146:	f1ba 0f01 	cmp.w	sl, #1
 800914a:	f47f af41 	bne.w	8008fd0 <_scanf_float+0x60>
 800914e:	f04f 0a02 	mov.w	sl, #2
 8009152:	e7d1      	b.n	80090f8 <_scanf_float+0x188>
 8009154:	b97d      	cbnz	r5, 8009176 <_scanf_float+0x206>
 8009156:	f1b9 0f00 	cmp.w	r9, #0
 800915a:	f47f af3c 	bne.w	8008fd6 <_scanf_float+0x66>
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009164:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009168:	f47f af39 	bne.w	8008fde <_scanf_float+0x6e>
 800916c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	2501      	movs	r5, #1
 8009174:	e7c0      	b.n	80090f8 <_scanf_float+0x188>
 8009176:	2d03      	cmp	r5, #3
 8009178:	d0e2      	beq.n	8009140 <_scanf_float+0x1d0>
 800917a:	2d05      	cmp	r5, #5
 800917c:	e7de      	b.n	800913c <_scanf_float+0x1cc>
 800917e:	2d02      	cmp	r5, #2
 8009180:	f47f af26 	bne.w	8008fd0 <_scanf_float+0x60>
 8009184:	2503      	movs	r5, #3
 8009186:	e7b7      	b.n	80090f8 <_scanf_float+0x188>
 8009188:	2d06      	cmp	r5, #6
 800918a:	f47f af21 	bne.w	8008fd0 <_scanf_float+0x60>
 800918e:	2507      	movs	r5, #7
 8009190:	e7b2      	b.n	80090f8 <_scanf_float+0x188>
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	0591      	lsls	r1, r2, #22
 8009196:	f57f af1b 	bpl.w	8008fd0 <_scanf_float+0x60>
 800919a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80091a4:	e7a8      	b.n	80090f8 <_scanf_float+0x188>
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80091ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80091b0:	d006      	beq.n	80091c0 <_scanf_float+0x250>
 80091b2:	0550      	lsls	r0, r2, #21
 80091b4:	f57f af0c 	bpl.w	8008fd0 <_scanf_float+0x60>
 80091b8:	f1b9 0f00 	cmp.w	r9, #0
 80091bc:	f43f af0f 	beq.w	8008fde <_scanf_float+0x6e>
 80091c0:	0591      	lsls	r1, r2, #22
 80091c2:	bf58      	it	pl
 80091c4:	9901      	ldrpl	r1, [sp, #4]
 80091c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091ca:	bf58      	it	pl
 80091cc:	eba9 0101 	subpl.w	r1, r9, r1
 80091d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091d4:	bf58      	it	pl
 80091d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091da:	6022      	str	r2, [r4, #0]
 80091dc:	f04f 0900 	mov.w	r9, #0
 80091e0:	e78a      	b.n	80090f8 <_scanf_float+0x188>
 80091e2:	f04f 0a03 	mov.w	sl, #3
 80091e6:	e787      	b.n	80090f8 <_scanf_float+0x188>
 80091e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091ec:	4639      	mov	r1, r7
 80091ee:	4640      	mov	r0, r8
 80091f0:	4798      	blx	r3
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f43f aedf 	beq.w	8008fb6 <_scanf_float+0x46>
 80091f8:	e6ea      	b.n	8008fd0 <_scanf_float+0x60>
 80091fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009202:	463a      	mov	r2, r7
 8009204:	4640      	mov	r0, r8
 8009206:	4798      	blx	r3
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	3b01      	subs	r3, #1
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	e6ec      	b.n	8008fea <_scanf_float+0x7a>
 8009210:	1e6b      	subs	r3, r5, #1
 8009212:	2b06      	cmp	r3, #6
 8009214:	d825      	bhi.n	8009262 <_scanf_float+0x2f2>
 8009216:	2d02      	cmp	r5, #2
 8009218:	d836      	bhi.n	8009288 <_scanf_float+0x318>
 800921a:	455e      	cmp	r6, fp
 800921c:	f67f aee8 	bls.w	8008ff0 <_scanf_float+0x80>
 8009220:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009224:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009228:	463a      	mov	r2, r7
 800922a:	4640      	mov	r0, r8
 800922c:	4798      	blx	r3
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	3b01      	subs	r3, #1
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	e7f1      	b.n	800921a <_scanf_float+0x2aa>
 8009236:	9802      	ldr	r0, [sp, #8]
 8009238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800923c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009240:	9002      	str	r0, [sp, #8]
 8009242:	463a      	mov	r2, r7
 8009244:	4640      	mov	r0, r8
 8009246:	4798      	blx	r3
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	3b01      	subs	r3, #1
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009252:	fa5f fa8a 	uxtb.w	sl, sl
 8009256:	f1ba 0f02 	cmp.w	sl, #2
 800925a:	d1ec      	bne.n	8009236 <_scanf_float+0x2c6>
 800925c:	3d03      	subs	r5, #3
 800925e:	b2ed      	uxtb	r5, r5
 8009260:	1b76      	subs	r6, r6, r5
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	05da      	lsls	r2, r3, #23
 8009266:	d52f      	bpl.n	80092c8 <_scanf_float+0x358>
 8009268:	055b      	lsls	r3, r3, #21
 800926a:	d510      	bpl.n	800928e <_scanf_float+0x31e>
 800926c:	455e      	cmp	r6, fp
 800926e:	f67f aebf 	bls.w	8008ff0 <_scanf_float+0x80>
 8009272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009276:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800927a:	463a      	mov	r2, r7
 800927c:	4640      	mov	r0, r8
 800927e:	4798      	blx	r3
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	3b01      	subs	r3, #1
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	e7f1      	b.n	800926c <_scanf_float+0x2fc>
 8009288:	46aa      	mov	sl, r5
 800928a:	9602      	str	r6, [sp, #8]
 800928c:	e7df      	b.n	800924e <_scanf_float+0x2de>
 800928e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	2965      	cmp	r1, #101	; 0x65
 8009296:	f103 33ff 	add.w	r3, r3, #4294967295
 800929a:	f106 35ff 	add.w	r5, r6, #4294967295
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	d00c      	beq.n	80092bc <_scanf_float+0x34c>
 80092a2:	2945      	cmp	r1, #69	; 0x45
 80092a4:	d00a      	beq.n	80092bc <_scanf_float+0x34c>
 80092a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092aa:	463a      	mov	r2, r7
 80092ac:	4640      	mov	r0, r8
 80092ae:	4798      	blx	r3
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	1eb5      	subs	r5, r6, #2
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092c0:	463a      	mov	r2, r7
 80092c2:	4640      	mov	r0, r8
 80092c4:	4798      	blx	r3
 80092c6:	462e      	mov	r6, r5
 80092c8:	6825      	ldr	r5, [r4, #0]
 80092ca:	f015 0510 	ands.w	r5, r5, #16
 80092ce:	d159      	bne.n	8009384 <_scanf_float+0x414>
 80092d0:	7035      	strb	r5, [r6, #0]
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092dc:	d11b      	bne.n	8009316 <_scanf_float+0x3a6>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	454b      	cmp	r3, r9
 80092e2:	eba3 0209 	sub.w	r2, r3, r9
 80092e6:	d123      	bne.n	8009330 <_scanf_float+0x3c0>
 80092e8:	2200      	movs	r2, #0
 80092ea:	4659      	mov	r1, fp
 80092ec:	4640      	mov	r0, r8
 80092ee:	f001 f821 	bl	800a334 <_strtod_r>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	f012 0f02 	tst.w	r2, #2
 80092fa:	ec57 6b10 	vmov	r6, r7, d0
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	d021      	beq.n	8009346 <_scanf_float+0x3d6>
 8009302:	9903      	ldr	r1, [sp, #12]
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	600a      	str	r2, [r1, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	e9c3 6700 	strd	r6, r7, [r3]
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60e3      	str	r3, [r4, #12]
 8009314:	e66d      	b.n	8008ff2 <_scanf_float+0x82>
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0e5      	beq.n	80092e8 <_scanf_float+0x378>
 800931c:	9905      	ldr	r1, [sp, #20]
 800931e:	230a      	movs	r3, #10
 8009320:	462a      	mov	r2, r5
 8009322:	3101      	adds	r1, #1
 8009324:	4640      	mov	r0, r8
 8009326:	f001 f88d 	bl	800a444 <_strtol_r>
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	9e05      	ldr	r6, [sp, #20]
 800932e:	1ac2      	subs	r2, r0, r3
 8009330:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009334:	429e      	cmp	r6, r3
 8009336:	bf28      	it	cs
 8009338:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800933c:	4912      	ldr	r1, [pc, #72]	; (8009388 <_scanf_float+0x418>)
 800933e:	4630      	mov	r0, r6
 8009340:	f000 f9b4 	bl	80096ac <siprintf>
 8009344:	e7d0      	b.n	80092e8 <_scanf_float+0x378>
 8009346:	9903      	ldr	r1, [sp, #12]
 8009348:	f012 0f04 	tst.w	r2, #4
 800934c:	f103 0204 	add.w	r2, r3, #4
 8009350:	600a      	str	r2, [r1, #0]
 8009352:	d1d9      	bne.n	8009308 <_scanf_float+0x398>
 8009354:	f8d3 8000 	ldr.w	r8, [r3]
 8009358:	ee10 2a10 	vmov	r2, s0
 800935c:	ee10 0a10 	vmov	r0, s0
 8009360:	463b      	mov	r3, r7
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 fc02 	bl	8000b6c <__aeabi_dcmpun>
 8009368:	b128      	cbz	r0, 8009376 <_scanf_float+0x406>
 800936a:	4808      	ldr	r0, [pc, #32]	; (800938c <_scanf_float+0x41c>)
 800936c:	f000 f998 	bl	80096a0 <nanf>
 8009370:	ed88 0a00 	vstr	s0, [r8]
 8009374:	e7cb      	b.n	800930e <_scanf_float+0x39e>
 8009376:	4630      	mov	r0, r6
 8009378:	4639      	mov	r1, r7
 800937a:	f7f7 fc55 	bl	8000c28 <__aeabi_d2f>
 800937e:	f8c8 0000 	str.w	r0, [r8]
 8009382:	e7c4      	b.n	800930e <_scanf_float+0x39e>
 8009384:	2500      	movs	r5, #0
 8009386:	e634      	b.n	8008ff2 <_scanf_float+0x82>
 8009388:	0800d85c 	.word	0x0800d85c
 800938c:	0800dcd0 	.word	0x0800dcd0

08009390 <swapfunc>:
 8009390:	2b02      	cmp	r3, #2
 8009392:	b510      	push	{r4, lr}
 8009394:	d00a      	beq.n	80093ac <swapfunc+0x1c>
 8009396:	0892      	lsrs	r2, r2, #2
 8009398:	3a01      	subs	r2, #1
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	680c      	ldr	r4, [r1, #0]
 800939e:	f840 4b04 	str.w	r4, [r0], #4
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	f841 3b04 	str.w	r3, [r1], #4
 80093a8:	dcf6      	bgt.n	8009398 <swapfunc+0x8>
 80093aa:	bd10      	pop	{r4, pc}
 80093ac:	4402      	add	r2, r0
 80093ae:	780c      	ldrb	r4, [r1, #0]
 80093b0:	7803      	ldrb	r3, [r0, #0]
 80093b2:	f800 4b01 	strb.w	r4, [r0], #1
 80093b6:	f801 3b01 	strb.w	r3, [r1], #1
 80093ba:	1a13      	subs	r3, r2, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dcf6      	bgt.n	80093ae <swapfunc+0x1e>
 80093c0:	e7f3      	b.n	80093aa <swapfunc+0x1a>

080093c2 <med3.constprop.0>:
 80093c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	4615      	mov	r5, r2
 80093c8:	4607      	mov	r7, r0
 80093ca:	461e      	mov	r6, r3
 80093cc:	4798      	blx	r3
 80093ce:	2800      	cmp	r0, #0
 80093d0:	4629      	mov	r1, r5
 80093d2:	4620      	mov	r0, r4
 80093d4:	da0a      	bge.n	80093ec <med3.constprop.0+0x2a>
 80093d6:	47b0      	blx	r6
 80093d8:	2800      	cmp	r0, #0
 80093da:	db05      	blt.n	80093e8 <med3.constprop.0+0x26>
 80093dc:	4629      	mov	r1, r5
 80093de:	4638      	mov	r0, r7
 80093e0:	47b0      	blx	r6
 80093e2:	2800      	cmp	r0, #0
 80093e4:	db0a      	blt.n	80093fc <med3.constprop.0+0x3a>
 80093e6:	463c      	mov	r4, r7
 80093e8:	4620      	mov	r0, r4
 80093ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ec:	47b0      	blx	r6
 80093ee:	2800      	cmp	r0, #0
 80093f0:	dcfa      	bgt.n	80093e8 <med3.constprop.0+0x26>
 80093f2:	4629      	mov	r1, r5
 80093f4:	4638      	mov	r0, r7
 80093f6:	47b0      	blx	r6
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dbf4      	blt.n	80093e6 <med3.constprop.0+0x24>
 80093fc:	462c      	mov	r4, r5
 80093fe:	e7f3      	b.n	80093e8 <med3.constprop.0+0x26>

08009400 <qsort>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	469a      	mov	sl, r3
 8009406:	ea40 0302 	orr.w	r3, r0, r2
 800940a:	079b      	lsls	r3, r3, #30
 800940c:	b097      	sub	sp, #92	; 0x5c
 800940e:	4606      	mov	r6, r0
 8009410:	4614      	mov	r4, r2
 8009412:	d11a      	bne.n	800944a <qsort+0x4a>
 8009414:	f1b2 0804 	subs.w	r8, r2, #4
 8009418:	bf18      	it	ne
 800941a:	f04f 0801 	movne.w	r8, #1
 800941e:	2300      	movs	r3, #0
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	1933      	adds	r3, r6, r4
 8009424:	fb04 f701 	mul.w	r7, r4, r1
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	2906      	cmp	r1, #6
 800942c:	eb06 0307 	add.w	r3, r6, r7
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	d82a      	bhi.n	800948a <qsort+0x8a>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	9a03      	ldr	r2, [sp, #12]
 8009438:	4293      	cmp	r3, r2
 800943a:	d310      	bcc.n	800945e <qsort+0x5e>
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 811e 	bne.w	8009680 <qsort+0x280>
 8009444:	b017      	add	sp, #92	; 0x5c
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	f04f 0802 	mov.w	r8, #2
 800944e:	e7e6      	b.n	800941e <qsort+0x1e>
 8009450:	4643      	mov	r3, r8
 8009452:	4622      	mov	r2, r4
 8009454:	4639      	mov	r1, r7
 8009456:	4628      	mov	r0, r5
 8009458:	f7ff ff9a 	bl	8009390 <swapfunc>
 800945c:	e00e      	b.n	800947c <qsort+0x7c>
 800945e:	9d01      	ldr	r5, [sp, #4]
 8009460:	e00d      	b.n	800947e <qsort+0x7e>
 8009462:	1b2f      	subs	r7, r5, r4
 8009464:	4629      	mov	r1, r5
 8009466:	4638      	mov	r0, r7
 8009468:	47d0      	blx	sl
 800946a:	2800      	cmp	r0, #0
 800946c:	dd09      	ble.n	8009482 <qsort+0x82>
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	d1ed      	bne.n	8009450 <qsort+0x50>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	463d      	mov	r5, r7
 800947e:	42ae      	cmp	r6, r5
 8009480:	d3ef      	bcc.n	8009462 <qsort+0x62>
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	4423      	add	r3, r4
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	e7d4      	b.n	8009434 <qsort+0x34>
 800948a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800948e:	1b3f      	subs	r7, r7, r4
 8009490:	2907      	cmp	r1, #7
 8009492:	fb04 6909 	mla	r9, r4, r9, r6
 8009496:	4437      	add	r7, r6
 8009498:	d022      	beq.n	80094e0 <qsort+0xe0>
 800949a:	2928      	cmp	r1, #40	; 0x28
 800949c:	d945      	bls.n	800952a <qsort+0x12a>
 800949e:	08c9      	lsrs	r1, r1, #3
 80094a0:	fb04 f501 	mul.w	r5, r4, r1
 80094a4:	4653      	mov	r3, sl
 80094a6:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80094aa:	1971      	adds	r1, r6, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff ff88 	bl	80093c2 <med3.constprop.0>
 80094b2:	4649      	mov	r1, r9
 80094b4:	eb09 0205 	add.w	r2, r9, r5
 80094b8:	4653      	mov	r3, sl
 80094ba:	4683      	mov	fp, r0
 80094bc:	1b48      	subs	r0, r1, r5
 80094be:	f7ff ff80 	bl	80093c2 <med3.constprop.0>
 80094c2:	463a      	mov	r2, r7
 80094c4:	4681      	mov	r9, r0
 80094c6:	4653      	mov	r3, sl
 80094c8:	1b79      	subs	r1, r7, r5
 80094ca:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80094ce:	f7ff ff78 	bl	80093c2 <med3.constprop.0>
 80094d2:	4602      	mov	r2, r0
 80094d4:	4649      	mov	r1, r9
 80094d6:	4653      	mov	r3, sl
 80094d8:	4658      	mov	r0, fp
 80094da:	f7ff ff72 	bl	80093c2 <med3.constprop.0>
 80094de:	4681      	mov	r9, r0
 80094e0:	f1b8 0f00 	cmp.w	r8, #0
 80094e4:	d124      	bne.n	8009530 <qsort+0x130>
 80094e6:	6833      	ldr	r3, [r6, #0]
 80094e8:	f8d9 2000 	ldr.w	r2, [r9]
 80094ec:	6032      	str	r2, [r6, #0]
 80094ee:	f8c9 3000 	str.w	r3, [r9]
 80094f2:	eb06 0b04 	add.w	fp, r6, r4
 80094f6:	46b9      	mov	r9, r7
 80094f8:	465d      	mov	r5, fp
 80094fa:	2300      	movs	r3, #0
 80094fc:	45bb      	cmp	fp, r7
 80094fe:	d835      	bhi.n	800956c <qsort+0x16c>
 8009500:	4631      	mov	r1, r6
 8009502:	4658      	mov	r0, fp
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	47d0      	blx	sl
 8009508:	2800      	cmp	r0, #0
 800950a:	9b04      	ldr	r3, [sp, #16]
 800950c:	dc3e      	bgt.n	800958c <qsort+0x18c>
 800950e:	d10a      	bne.n	8009526 <qsort+0x126>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d113      	bne.n	800953e <qsort+0x13e>
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	f8db 2000 	ldr.w	r2, [fp]
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	f8cb 3000 	str.w	r3, [fp]
 8009522:	4425      	add	r5, r4
 8009524:	2301      	movs	r3, #1
 8009526:	44a3      	add	fp, r4
 8009528:	e7e8      	b.n	80094fc <qsort+0xfc>
 800952a:	463a      	mov	r2, r7
 800952c:	46b3      	mov	fp, r6
 800952e:	e7d1      	b.n	80094d4 <qsort+0xd4>
 8009530:	4643      	mov	r3, r8
 8009532:	4622      	mov	r2, r4
 8009534:	4649      	mov	r1, r9
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ff2a 	bl	8009390 <swapfunc>
 800953c:	e7d9      	b.n	80094f2 <qsort+0xf2>
 800953e:	4643      	mov	r3, r8
 8009540:	4622      	mov	r2, r4
 8009542:	4659      	mov	r1, fp
 8009544:	4628      	mov	r0, r5
 8009546:	f7ff ff23 	bl	8009390 <swapfunc>
 800954a:	e7ea      	b.n	8009522 <qsort+0x122>
 800954c:	d10b      	bne.n	8009566 <qsort+0x166>
 800954e:	f1b8 0f00 	cmp.w	r8, #0
 8009552:	d114      	bne.n	800957e <qsort+0x17e>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f8d9 2000 	ldr.w	r2, [r9]
 800955a:	603a      	str	r2, [r7, #0]
 800955c:	f8c9 3000 	str.w	r3, [r9]
 8009560:	eba9 0904 	sub.w	r9, r9, r4
 8009564:	2301      	movs	r3, #1
 8009566:	9f04      	ldr	r7, [sp, #16]
 8009568:	45bb      	cmp	fp, r7
 800956a:	d90f      	bls.n	800958c <qsort+0x18c>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d143      	bne.n	80095f8 <qsort+0x1f8>
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	9a03      	ldr	r2, [sp, #12]
 8009574:	4293      	cmp	r3, r2
 8009576:	f4bf af61 	bcs.w	800943c <qsort+0x3c>
 800957a:	9d01      	ldr	r5, [sp, #4]
 800957c:	e036      	b.n	80095ec <qsort+0x1ec>
 800957e:	4643      	mov	r3, r8
 8009580:	4622      	mov	r2, r4
 8009582:	4649      	mov	r1, r9
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ff03 	bl	8009390 <swapfunc>
 800958a:	e7e9      	b.n	8009560 <qsort+0x160>
 800958c:	4631      	mov	r1, r6
 800958e:	4638      	mov	r0, r7
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	47d0      	blx	sl
 8009594:	1b3b      	subs	r3, r7, r4
 8009596:	2800      	cmp	r0, #0
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	dad6      	bge.n	800954c <qsort+0x14c>
 800959e:	f1b8 0f00 	cmp.w	r8, #0
 80095a2:	d006      	beq.n	80095b2 <qsort+0x1b2>
 80095a4:	4643      	mov	r3, r8
 80095a6:	4622      	mov	r2, r4
 80095a8:	4639      	mov	r1, r7
 80095aa:	4658      	mov	r0, fp
 80095ac:	f7ff fef0 	bl	8009390 <swapfunc>
 80095b0:	e005      	b.n	80095be <qsort+0x1be>
 80095b2:	f8db 3000 	ldr.w	r3, [fp]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	f8cb 2000 	str.w	r2, [fp]
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	9f04      	ldr	r7, [sp, #16]
 80095c0:	e7b0      	b.n	8009524 <qsort+0x124>
 80095c2:	4643      	mov	r3, r8
 80095c4:	4622      	mov	r2, r4
 80095c6:	4639      	mov	r1, r7
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7ff fee1 	bl	8009390 <swapfunc>
 80095ce:	e00c      	b.n	80095ea <qsort+0x1ea>
 80095d0:	1b2f      	subs	r7, r5, r4
 80095d2:	4629      	mov	r1, r5
 80095d4:	4638      	mov	r0, r7
 80095d6:	47d0      	blx	sl
 80095d8:	2800      	cmp	r0, #0
 80095da:	dd09      	ble.n	80095f0 <qsort+0x1f0>
 80095dc:	f1b8 0f00 	cmp.w	r8, #0
 80095e0:	d1ef      	bne.n	80095c2 <qsort+0x1c2>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	602a      	str	r2, [r5, #0]
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	463d      	mov	r5, r7
 80095ec:	42ae      	cmp	r6, r5
 80095ee:	d3ef      	bcc.n	80095d0 <qsort+0x1d0>
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	4423      	add	r3, r4
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	e7bb      	b.n	8009570 <qsort+0x170>
 80095f8:	ebab 0305 	sub.w	r3, fp, r5
 80095fc:	1baa      	subs	r2, r5, r6
 80095fe:	429a      	cmp	r2, r3
 8009600:	bfa8      	it	ge
 8009602:	461a      	movge	r2, r3
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	b12a      	cbz	r2, 8009614 <qsort+0x214>
 8009608:	4643      	mov	r3, r8
 800960a:	ebab 0102 	sub.w	r1, fp, r2
 800960e:	4630      	mov	r0, r6
 8009610:	f7ff febe 	bl	8009390 <swapfunc>
 8009614:	9b03      	ldr	r3, [sp, #12]
 8009616:	eba3 0209 	sub.w	r2, r3, r9
 800961a:	eba9 0707 	sub.w	r7, r9, r7
 800961e:	1b12      	subs	r2, r2, r4
 8009620:	42ba      	cmp	r2, r7
 8009622:	bf28      	it	cs
 8009624:	463a      	movcs	r2, r7
 8009626:	b12a      	cbz	r2, 8009634 <qsort+0x234>
 8009628:	9903      	ldr	r1, [sp, #12]
 800962a:	4643      	mov	r3, r8
 800962c:	1a89      	subs	r1, r1, r2
 800962e:	4658      	mov	r0, fp
 8009630:	f7ff feae 	bl	8009390 <swapfunc>
 8009634:	9d01      	ldr	r5, [sp, #4]
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	42af      	cmp	r7, r5
 800963a:	eba3 0007 	sub.w	r0, r3, r7
 800963e:	d904      	bls.n	800964a <qsort+0x24a>
 8009640:	4633      	mov	r3, r6
 8009642:	463d      	mov	r5, r7
 8009644:	9f01      	ldr	r7, [sp, #4]
 8009646:	4606      	mov	r6, r0
 8009648:	4618      	mov	r0, r3
 800964a:	42a7      	cmp	r7, r4
 800964c:	d921      	bls.n	8009692 <qsort+0x292>
 800964e:	fbb7 f1f4 	udiv	r1, r7, r4
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	2b07      	cmp	r3, #7
 8009656:	d80d      	bhi.n	8009674 <qsort+0x274>
 8009658:	fbb5 f5f4 	udiv	r5, r5, r4
 800965c:	aa16      	add	r2, sp, #88	; 0x58
 800965e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009662:	f843 6c40 	str.w	r6, [r3, #-64]
 8009666:	f843 5c3c 	str.w	r5, [r3, #-60]
 800966a:	9b02      	ldr	r3, [sp, #8]
 800966c:	3301      	adds	r3, #1
 800966e:	9302      	str	r3, [sp, #8]
 8009670:	4606      	mov	r6, r0
 8009672:	e6d6      	b.n	8009422 <qsort+0x22>
 8009674:	4653      	mov	r3, sl
 8009676:	4622      	mov	r2, r4
 8009678:	f7ff fec2 	bl	8009400 <qsort>
 800967c:	42a5      	cmp	r5, r4
 800967e:	d80b      	bhi.n	8009698 <qsort+0x298>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	aa16      	add	r2, sp, #88	; 0x58
 8009684:	3b01      	subs	r3, #1
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800968c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009690:	e7ee      	b.n	8009670 <qsort+0x270>
 8009692:	42a5      	cmp	r5, r4
 8009694:	f67f aed2 	bls.w	800943c <qsort+0x3c>
 8009698:	fbb5 f1f4 	udiv	r1, r5, r4
 800969c:	4630      	mov	r0, r6
 800969e:	e7e7      	b.n	8009670 <qsort+0x270>

080096a0 <nanf>:
 80096a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096a8 <nanf+0x8>
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	7fc00000 	.word	0x7fc00000

080096ac <siprintf>:
 80096ac:	b40e      	push	{r1, r2, r3}
 80096ae:	b500      	push	{lr}
 80096b0:	b09c      	sub	sp, #112	; 0x70
 80096b2:	ab1d      	add	r3, sp, #116	; 0x74
 80096b4:	9002      	str	r0, [sp, #8]
 80096b6:	9006      	str	r0, [sp, #24]
 80096b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096bc:	4809      	ldr	r0, [pc, #36]	; (80096e4 <siprintf+0x38>)
 80096be:	9107      	str	r1, [sp, #28]
 80096c0:	9104      	str	r1, [sp, #16]
 80096c2:	4909      	ldr	r1, [pc, #36]	; (80096e8 <siprintf+0x3c>)
 80096c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	a902      	add	r1, sp, #8
 80096d0:	f003 f9e2 	bl	800ca98 <_svfiprintf_r>
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	b01c      	add	sp, #112	; 0x70
 80096dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e0:	b003      	add	sp, #12
 80096e2:	4770      	bx	lr
 80096e4:	20000030 	.word	0x20000030
 80096e8:	ffff0208 	.word	0xffff0208

080096ec <sulp>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	4604      	mov	r4, r0
 80096f0:	460d      	mov	r5, r1
 80096f2:	ec45 4b10 	vmov	d0, r4, r5
 80096f6:	4616      	mov	r6, r2
 80096f8:	f002 ff2c 	bl	800c554 <__ulp>
 80096fc:	ec51 0b10 	vmov	r0, r1, d0
 8009700:	b17e      	cbz	r6, 8009722 <sulp+0x36>
 8009702:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009706:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800970a:	2b00      	cmp	r3, #0
 800970c:	dd09      	ble.n	8009722 <sulp+0x36>
 800970e:	051b      	lsls	r3, r3, #20
 8009710:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009714:	2400      	movs	r4, #0
 8009716:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800971a:	4622      	mov	r2, r4
 800971c:	462b      	mov	r3, r5
 800971e:	f7f6 ff8b 	bl	8000638 <__aeabi_dmul>
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	0000      	movs	r0, r0
	...

08009728 <_strtod_l>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	ed2d 8b02 	vpush	{d8}
 8009730:	b09d      	sub	sp, #116	; 0x74
 8009732:	461f      	mov	r7, r3
 8009734:	2300      	movs	r3, #0
 8009736:	9318      	str	r3, [sp, #96]	; 0x60
 8009738:	4ba2      	ldr	r3, [pc, #648]	; (80099c4 <_strtod_l+0x29c>)
 800973a:	9213      	str	r2, [sp, #76]	; 0x4c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	9305      	str	r3, [sp, #20]
 8009740:	4604      	mov	r4, r0
 8009742:	4618      	mov	r0, r3
 8009744:	4688      	mov	r8, r1
 8009746:	f7f6 fd63 	bl	8000210 <strlen>
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	4605      	mov	r5, r0
 8009750:	f04f 0b00 	mov.w	fp, #0
 8009754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	2a2b      	cmp	r2, #43	; 0x2b
 800975e:	d04e      	beq.n	80097fe <_strtod_l+0xd6>
 8009760:	d83b      	bhi.n	80097da <_strtod_l+0xb2>
 8009762:	2a0d      	cmp	r2, #13
 8009764:	d834      	bhi.n	80097d0 <_strtod_l+0xa8>
 8009766:	2a08      	cmp	r2, #8
 8009768:	d834      	bhi.n	80097d4 <_strtod_l+0xac>
 800976a:	2a00      	cmp	r2, #0
 800976c:	d03e      	beq.n	80097ec <_strtod_l+0xc4>
 800976e:	2300      	movs	r3, #0
 8009770:	930a      	str	r3, [sp, #40]	; 0x28
 8009772:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009774:	7833      	ldrb	r3, [r6, #0]
 8009776:	2b30      	cmp	r3, #48	; 0x30
 8009778:	f040 80b0 	bne.w	80098dc <_strtod_l+0x1b4>
 800977c:	7873      	ldrb	r3, [r6, #1]
 800977e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009782:	2b58      	cmp	r3, #88	; 0x58
 8009784:	d168      	bne.n	8009858 <_strtod_l+0x130>
 8009786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	ab18      	add	r3, sp, #96	; 0x60
 800978c:	9702      	str	r7, [sp, #8]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4a8d      	ldr	r2, [pc, #564]	; (80099c8 <_strtod_l+0x2a0>)
 8009792:	ab19      	add	r3, sp, #100	; 0x64
 8009794:	a917      	add	r1, sp, #92	; 0x5c
 8009796:	4620      	mov	r0, r4
 8009798:	f001 ffce 	bl	800b738 <__gethex>
 800979c:	f010 0707 	ands.w	r7, r0, #7
 80097a0:	4605      	mov	r5, r0
 80097a2:	d005      	beq.n	80097b0 <_strtod_l+0x88>
 80097a4:	2f06      	cmp	r7, #6
 80097a6:	d12c      	bne.n	8009802 <_strtod_l+0xda>
 80097a8:	3601      	adds	r6, #1
 80097aa:	2300      	movs	r3, #0
 80097ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80097ae:	930a      	str	r3, [sp, #40]	; 0x28
 80097b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 8590 	bne.w	800a2d8 <_strtod_l+0xbb0>
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	b1eb      	cbz	r3, 80097f8 <_strtod_l+0xd0>
 80097bc:	4652      	mov	r2, sl
 80097be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097c2:	ec43 2b10 	vmov	d0, r2, r3
 80097c6:	b01d      	add	sp, #116	; 0x74
 80097c8:	ecbd 8b02 	vpop	{d8}
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	2a20      	cmp	r2, #32
 80097d2:	d1cc      	bne.n	800976e <_strtod_l+0x46>
 80097d4:	3301      	adds	r3, #1
 80097d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80097d8:	e7be      	b.n	8009758 <_strtod_l+0x30>
 80097da:	2a2d      	cmp	r2, #45	; 0x2d
 80097dc:	d1c7      	bne.n	800976e <_strtod_l+0x46>
 80097de:	2201      	movs	r2, #1
 80097e0:	920a      	str	r2, [sp, #40]	; 0x28
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e6:	785b      	ldrb	r3, [r3, #1]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1c2      	bne.n	8009772 <_strtod_l+0x4a>
 80097ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 856e 	bne.w	800a2d4 <_strtod_l+0xbac>
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	e7e1      	b.n	80097c2 <_strtod_l+0x9a>
 80097fe:	2200      	movs	r2, #0
 8009800:	e7ee      	b.n	80097e0 <_strtod_l+0xb8>
 8009802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009804:	b13a      	cbz	r2, 8009816 <_strtod_l+0xee>
 8009806:	2135      	movs	r1, #53	; 0x35
 8009808:	a81a      	add	r0, sp, #104	; 0x68
 800980a:	f002 ffae 	bl	800c76a <__copybits>
 800980e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009810:	4620      	mov	r0, r4
 8009812:	f002 fb6d 	bl	800bef0 <_Bfree>
 8009816:	3f01      	subs	r7, #1
 8009818:	2f04      	cmp	r7, #4
 800981a:	d806      	bhi.n	800982a <_strtod_l+0x102>
 800981c:	e8df f007 	tbb	[pc, r7]
 8009820:	1714030a 	.word	0x1714030a
 8009824:	0a          	.byte	0x0a
 8009825:	00          	.byte	0x00
 8009826:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800982a:	0728      	lsls	r0, r5, #28
 800982c:	d5c0      	bpl.n	80097b0 <_strtod_l+0x88>
 800982e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009832:	e7bd      	b.n	80097b0 <_strtod_l+0x88>
 8009834:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800983a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800983e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009842:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009846:	e7f0      	b.n	800982a <_strtod_l+0x102>
 8009848:	f8df b180 	ldr.w	fp, [pc, #384]	; 80099cc <_strtod_l+0x2a4>
 800984c:	e7ed      	b.n	800982a <_strtod_l+0x102>
 800984e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009852:	f04f 3aff 	mov.w	sl, #4294967295
 8009856:	e7e8      	b.n	800982a <_strtod_l+0x102>
 8009858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	9217      	str	r2, [sp, #92]	; 0x5c
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	2b30      	cmp	r3, #48	; 0x30
 8009862:	d0f9      	beq.n	8009858 <_strtod_l+0x130>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0a3      	beq.n	80097b0 <_strtod_l+0x88>
 8009868:	2301      	movs	r3, #1
 800986a:	f04f 0900 	mov.w	r9, #0
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	9308      	str	r3, [sp, #32]
 8009874:	f8cd 901c 	str.w	r9, [sp, #28]
 8009878:	464f      	mov	r7, r9
 800987a:	220a      	movs	r2, #10
 800987c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800987e:	7806      	ldrb	r6, [r0, #0]
 8009880:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009884:	b2d9      	uxtb	r1, r3
 8009886:	2909      	cmp	r1, #9
 8009888:	d92a      	bls.n	80098e0 <_strtod_l+0x1b8>
 800988a:	9905      	ldr	r1, [sp, #20]
 800988c:	462a      	mov	r2, r5
 800988e:	f003 fbba 	bl	800d006 <strncmp>
 8009892:	b398      	cbz	r0, 80098fc <_strtod_l+0x1d4>
 8009894:	2000      	movs	r0, #0
 8009896:	4632      	mov	r2, r6
 8009898:	463d      	mov	r5, r7
 800989a:	9005      	str	r0, [sp, #20]
 800989c:	4603      	mov	r3, r0
 800989e:	2a65      	cmp	r2, #101	; 0x65
 80098a0:	d001      	beq.n	80098a6 <_strtod_l+0x17e>
 80098a2:	2a45      	cmp	r2, #69	; 0x45
 80098a4:	d118      	bne.n	80098d8 <_strtod_l+0x1b0>
 80098a6:	b91d      	cbnz	r5, 80098b0 <_strtod_l+0x188>
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	4302      	orrs	r2, r0
 80098ac:	d09e      	beq.n	80097ec <_strtod_l+0xc4>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80098b4:	f108 0201 	add.w	r2, r8, #1
 80098b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80098ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098be:	2a2b      	cmp	r2, #43	; 0x2b
 80098c0:	d075      	beq.n	80099ae <_strtod_l+0x286>
 80098c2:	2a2d      	cmp	r2, #45	; 0x2d
 80098c4:	d07b      	beq.n	80099be <_strtod_l+0x296>
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098ce:	2909      	cmp	r1, #9
 80098d0:	f240 8082 	bls.w	80099d8 <_strtod_l+0x2b0>
 80098d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098d8:	2600      	movs	r6, #0
 80098da:	e09d      	b.n	8009a18 <_strtod_l+0x2f0>
 80098dc:	2300      	movs	r3, #0
 80098de:	e7c4      	b.n	800986a <_strtod_l+0x142>
 80098e0:	2f08      	cmp	r7, #8
 80098e2:	bfd8      	it	le
 80098e4:	9907      	ldrle	r1, [sp, #28]
 80098e6:	f100 0001 	add.w	r0, r0, #1
 80098ea:	bfda      	itte	le
 80098ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80098f0:	9307      	strle	r3, [sp, #28]
 80098f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80098f6:	3701      	adds	r7, #1
 80098f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80098fa:	e7bf      	b.n	800987c <_strtod_l+0x154>
 80098fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098fe:	195a      	adds	r2, r3, r5
 8009900:	9217      	str	r2, [sp, #92]	; 0x5c
 8009902:	5d5a      	ldrb	r2, [r3, r5]
 8009904:	2f00      	cmp	r7, #0
 8009906:	d037      	beq.n	8009978 <_strtod_l+0x250>
 8009908:	9005      	str	r0, [sp, #20]
 800990a:	463d      	mov	r5, r7
 800990c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009910:	2b09      	cmp	r3, #9
 8009912:	d912      	bls.n	800993a <_strtod_l+0x212>
 8009914:	2301      	movs	r3, #1
 8009916:	e7c2      	b.n	800989e <_strtod_l+0x176>
 8009918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	9217      	str	r2, [sp, #92]	; 0x5c
 800991e:	785a      	ldrb	r2, [r3, #1]
 8009920:	3001      	adds	r0, #1
 8009922:	2a30      	cmp	r2, #48	; 0x30
 8009924:	d0f8      	beq.n	8009918 <_strtod_l+0x1f0>
 8009926:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800992a:	2b08      	cmp	r3, #8
 800992c:	f200 84d9 	bhi.w	800a2e2 <_strtod_l+0xbba>
 8009930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009932:	9005      	str	r0, [sp, #20]
 8009934:	2000      	movs	r0, #0
 8009936:	9308      	str	r3, [sp, #32]
 8009938:	4605      	mov	r5, r0
 800993a:	3a30      	subs	r2, #48	; 0x30
 800993c:	f100 0301 	add.w	r3, r0, #1
 8009940:	d014      	beq.n	800996c <_strtod_l+0x244>
 8009942:	9905      	ldr	r1, [sp, #20]
 8009944:	4419      	add	r1, r3
 8009946:	9105      	str	r1, [sp, #20]
 8009948:	462b      	mov	r3, r5
 800994a:	eb00 0e05 	add.w	lr, r0, r5
 800994e:	210a      	movs	r1, #10
 8009950:	4573      	cmp	r3, lr
 8009952:	d113      	bne.n	800997c <_strtod_l+0x254>
 8009954:	182b      	adds	r3, r5, r0
 8009956:	2b08      	cmp	r3, #8
 8009958:	f105 0501 	add.w	r5, r5, #1
 800995c:	4405      	add	r5, r0
 800995e:	dc1c      	bgt.n	800999a <_strtod_l+0x272>
 8009960:	9907      	ldr	r1, [sp, #28]
 8009962:	230a      	movs	r3, #10
 8009964:	fb03 2301 	mla	r3, r3, r1, r2
 8009968:	9307      	str	r3, [sp, #28]
 800996a:	2300      	movs	r3, #0
 800996c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800996e:	1c51      	adds	r1, r2, #1
 8009970:	9117      	str	r1, [sp, #92]	; 0x5c
 8009972:	7852      	ldrb	r2, [r2, #1]
 8009974:	4618      	mov	r0, r3
 8009976:	e7c9      	b.n	800990c <_strtod_l+0x1e4>
 8009978:	4638      	mov	r0, r7
 800997a:	e7d2      	b.n	8009922 <_strtod_l+0x1fa>
 800997c:	2b08      	cmp	r3, #8
 800997e:	dc04      	bgt.n	800998a <_strtod_l+0x262>
 8009980:	9e07      	ldr	r6, [sp, #28]
 8009982:	434e      	muls	r6, r1
 8009984:	9607      	str	r6, [sp, #28]
 8009986:	3301      	adds	r3, #1
 8009988:	e7e2      	b.n	8009950 <_strtod_l+0x228>
 800998a:	f103 0c01 	add.w	ip, r3, #1
 800998e:	f1bc 0f10 	cmp.w	ip, #16
 8009992:	bfd8      	it	le
 8009994:	fb01 f909 	mulle.w	r9, r1, r9
 8009998:	e7f5      	b.n	8009986 <_strtod_l+0x25e>
 800999a:	2d10      	cmp	r5, #16
 800999c:	bfdc      	itt	le
 800999e:	230a      	movle	r3, #10
 80099a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80099a4:	e7e1      	b.n	800996a <_strtod_l+0x242>
 80099a6:	2300      	movs	r3, #0
 80099a8:	9305      	str	r3, [sp, #20]
 80099aa:	2301      	movs	r3, #1
 80099ac:	e77c      	b.n	80098a8 <_strtod_l+0x180>
 80099ae:	f04f 0c00 	mov.w	ip, #0
 80099b2:	f108 0202 	add.w	r2, r8, #2
 80099b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80099b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099bc:	e785      	b.n	80098ca <_strtod_l+0x1a2>
 80099be:	f04f 0c01 	mov.w	ip, #1
 80099c2:	e7f6      	b.n	80099b2 <_strtod_l+0x28a>
 80099c4:	0800db14 	.word	0x0800db14
 80099c8:	0800d864 	.word	0x0800d864
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099d2:	1c51      	adds	r1, r2, #1
 80099d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80099d6:	7852      	ldrb	r2, [r2, #1]
 80099d8:	2a30      	cmp	r2, #48	; 0x30
 80099da:	d0f9      	beq.n	80099d0 <_strtod_l+0x2a8>
 80099dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099e0:	2908      	cmp	r1, #8
 80099e2:	f63f af79 	bhi.w	80098d8 <_strtod_l+0x1b0>
 80099e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80099ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099ec:	9206      	str	r2, [sp, #24]
 80099ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099f0:	1c51      	adds	r1, r2, #1
 80099f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80099f4:	7852      	ldrb	r2, [r2, #1]
 80099f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80099fa:	2e09      	cmp	r6, #9
 80099fc:	d937      	bls.n	8009a6e <_strtod_l+0x346>
 80099fe:	9e06      	ldr	r6, [sp, #24]
 8009a00:	1b89      	subs	r1, r1, r6
 8009a02:	2908      	cmp	r1, #8
 8009a04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a08:	dc02      	bgt.n	8009a10 <_strtod_l+0x2e8>
 8009a0a:	4576      	cmp	r6, lr
 8009a0c:	bfa8      	it	ge
 8009a0e:	4676      	movge	r6, lr
 8009a10:	f1bc 0f00 	cmp.w	ip, #0
 8009a14:	d000      	beq.n	8009a18 <_strtod_l+0x2f0>
 8009a16:	4276      	negs	r6, r6
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	d14d      	bne.n	8009ab8 <_strtod_l+0x390>
 8009a1c:	9904      	ldr	r1, [sp, #16]
 8009a1e:	4301      	orrs	r1, r0
 8009a20:	f47f aec6 	bne.w	80097b0 <_strtod_l+0x88>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f aee1 	bne.w	80097ec <_strtod_l+0xc4>
 8009a2a:	2a69      	cmp	r2, #105	; 0x69
 8009a2c:	d027      	beq.n	8009a7e <_strtod_l+0x356>
 8009a2e:	dc24      	bgt.n	8009a7a <_strtod_l+0x352>
 8009a30:	2a49      	cmp	r2, #73	; 0x49
 8009a32:	d024      	beq.n	8009a7e <_strtod_l+0x356>
 8009a34:	2a4e      	cmp	r2, #78	; 0x4e
 8009a36:	f47f aed9 	bne.w	80097ec <_strtod_l+0xc4>
 8009a3a:	499f      	ldr	r1, [pc, #636]	; (8009cb8 <_strtod_l+0x590>)
 8009a3c:	a817      	add	r0, sp, #92	; 0x5c
 8009a3e:	f002 f8d3 	bl	800bbe8 <__match>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f aed2 	beq.w	80097ec <_strtod_l+0xc4>
 8009a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b28      	cmp	r3, #40	; 0x28
 8009a4e:	d12d      	bne.n	8009aac <_strtod_l+0x384>
 8009a50:	499a      	ldr	r1, [pc, #616]	; (8009cbc <_strtod_l+0x594>)
 8009a52:	aa1a      	add	r2, sp, #104	; 0x68
 8009a54:	a817      	add	r0, sp, #92	; 0x5c
 8009a56:	f002 f8db 	bl	800bc10 <__hexnan>
 8009a5a:	2805      	cmp	r0, #5
 8009a5c:	d126      	bne.n	8009aac <_strtod_l+0x384>
 8009a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a6c:	e6a0      	b.n	80097b0 <_strtod_l+0x88>
 8009a6e:	210a      	movs	r1, #10
 8009a70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009a74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a78:	e7b9      	b.n	80099ee <_strtod_l+0x2c6>
 8009a7a:	2a6e      	cmp	r2, #110	; 0x6e
 8009a7c:	e7db      	b.n	8009a36 <_strtod_l+0x30e>
 8009a7e:	4990      	ldr	r1, [pc, #576]	; (8009cc0 <_strtod_l+0x598>)
 8009a80:	a817      	add	r0, sp, #92	; 0x5c
 8009a82:	f002 f8b1 	bl	800bbe8 <__match>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f aeb0 	beq.w	80097ec <_strtod_l+0xc4>
 8009a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a8e:	498d      	ldr	r1, [pc, #564]	; (8009cc4 <_strtod_l+0x59c>)
 8009a90:	3b01      	subs	r3, #1
 8009a92:	a817      	add	r0, sp, #92	; 0x5c
 8009a94:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a96:	f002 f8a7 	bl	800bbe8 <__match>
 8009a9a:	b910      	cbnz	r0, 8009aa2 <_strtod_l+0x37a>
 8009a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aa2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009cd4 <_strtod_l+0x5ac>
 8009aa6:	f04f 0a00 	mov.w	sl, #0
 8009aaa:	e681      	b.n	80097b0 <_strtod_l+0x88>
 8009aac:	4886      	ldr	r0, [pc, #536]	; (8009cc8 <_strtod_l+0x5a0>)
 8009aae:	f003 fa4f 	bl	800cf50 <nan>
 8009ab2:	ec5b ab10 	vmov	sl, fp, d0
 8009ab6:	e67b      	b.n	80097b0 <_strtod_l+0x88>
 8009ab8:	9b05      	ldr	r3, [sp, #20]
 8009aba:	9807      	ldr	r0, [sp, #28]
 8009abc:	1af3      	subs	r3, r6, r3
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	bf08      	it	eq
 8009ac2:	462f      	moveq	r7, r5
 8009ac4:	2d10      	cmp	r5, #16
 8009ac6:	9306      	str	r3, [sp, #24]
 8009ac8:	46a8      	mov	r8, r5
 8009aca:	bfa8      	it	ge
 8009acc:	f04f 0810 	movge.w	r8, #16
 8009ad0:	f7f6 fd38 	bl	8000544 <__aeabi_ui2d>
 8009ad4:	2d09      	cmp	r5, #9
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	dd13      	ble.n	8009b04 <_strtod_l+0x3dc>
 8009adc:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <_strtod_l+0x5a4>)
 8009ade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ae2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ae6:	f7f6 fda7 	bl	8000638 <__aeabi_dmul>
 8009aea:	4682      	mov	sl, r0
 8009aec:	4648      	mov	r0, r9
 8009aee:	468b      	mov	fp, r1
 8009af0:	f7f6 fd28 	bl	8000544 <__aeabi_ui2d>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4650      	mov	r0, sl
 8009afa:	4659      	mov	r1, fp
 8009afc:	f7f6 fbe6 	bl	80002cc <__adddf3>
 8009b00:	4682      	mov	sl, r0
 8009b02:	468b      	mov	fp, r1
 8009b04:	2d0f      	cmp	r5, #15
 8009b06:	dc38      	bgt.n	8009b7a <_strtod_l+0x452>
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f43f ae50 	beq.w	80097b0 <_strtod_l+0x88>
 8009b10:	dd24      	ble.n	8009b5c <_strtod_l+0x434>
 8009b12:	2b16      	cmp	r3, #22
 8009b14:	dc0b      	bgt.n	8009b2e <_strtod_l+0x406>
 8009b16:	496d      	ldr	r1, [pc, #436]	; (8009ccc <_strtod_l+0x5a4>)
 8009b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b20:	4652      	mov	r2, sl
 8009b22:	465b      	mov	r3, fp
 8009b24:	f7f6 fd88 	bl	8000638 <__aeabi_dmul>
 8009b28:	4682      	mov	sl, r0
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	e640      	b.n	80097b0 <_strtod_l+0x88>
 8009b2e:	9a06      	ldr	r2, [sp, #24]
 8009b30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b34:	4293      	cmp	r3, r2
 8009b36:	db20      	blt.n	8009b7a <_strtod_l+0x452>
 8009b38:	4c64      	ldr	r4, [pc, #400]	; (8009ccc <_strtod_l+0x5a4>)
 8009b3a:	f1c5 050f 	rsb	r5, r5, #15
 8009b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4a:	f7f6 fd75 	bl	8000638 <__aeabi_dmul>
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	1b5d      	subs	r5, r3, r5
 8009b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b5a:	e7e3      	b.n	8009b24 <_strtod_l+0x3fc>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	3316      	adds	r3, #22
 8009b60:	db0b      	blt.n	8009b7a <_strtod_l+0x452>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	1b9e      	subs	r6, r3, r6
 8009b66:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <_strtod_l+0x5a4>)
 8009b68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b70:	4650      	mov	r0, sl
 8009b72:	4659      	mov	r1, fp
 8009b74:	f7f6 fe8a 	bl	800088c <__aeabi_ddiv>
 8009b78:	e7d6      	b.n	8009b28 <_strtod_l+0x400>
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	eba5 0808 	sub.w	r8, r5, r8
 8009b80:	4498      	add	r8, r3
 8009b82:	f1b8 0f00 	cmp.w	r8, #0
 8009b86:	dd74      	ble.n	8009c72 <_strtod_l+0x54a>
 8009b88:	f018 030f 	ands.w	r3, r8, #15
 8009b8c:	d00a      	beq.n	8009ba4 <_strtod_l+0x47c>
 8009b8e:	494f      	ldr	r1, [pc, #316]	; (8009ccc <_strtod_l+0x5a4>)
 8009b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b9c:	f7f6 fd4c 	bl	8000638 <__aeabi_dmul>
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	f038 080f 	bics.w	r8, r8, #15
 8009ba8:	d04f      	beq.n	8009c4a <_strtod_l+0x522>
 8009baa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bae:	dd22      	ble.n	8009bf6 <_strtod_l+0x4ce>
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	462e      	mov	r6, r5
 8009bb4:	9507      	str	r5, [sp, #28]
 8009bb6:	9505      	str	r5, [sp, #20]
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009cd4 <_strtod_l+0x5ac>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	f04f 0a00 	mov.w	sl, #0
 8009bc4:	9b07      	ldr	r3, [sp, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f43f adf2 	beq.w	80097b0 <_strtod_l+0x88>
 8009bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 f98e 	bl	800bef0 <_Bfree>
 8009bd4:	9905      	ldr	r1, [sp, #20]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f002 f98a 	bl	800bef0 <_Bfree>
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4620      	mov	r0, r4
 8009be0:	f002 f986 	bl	800bef0 <_Bfree>
 8009be4:	9907      	ldr	r1, [sp, #28]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f002 f982 	bl	800bef0 <_Bfree>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f002 f97e 	bl	800bef0 <_Bfree>
 8009bf4:	e5dc      	b.n	80097b0 <_strtod_l+0x88>
 8009bf6:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <_strtod_l+0x5a8>)
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c00:	4650      	mov	r0, sl
 8009c02:	4659      	mov	r1, fp
 8009c04:	4699      	mov	r9, r3
 8009c06:	f1b8 0f01 	cmp.w	r8, #1
 8009c0a:	dc21      	bgt.n	8009c50 <_strtod_l+0x528>
 8009c0c:	b10b      	cbz	r3, 8009c12 <_strtod_l+0x4ea>
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <_strtod_l+0x5a8>)
 8009c14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	465b      	mov	r3, fp
 8009c20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <_strtod_l+0x5ac>)
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	492a      	ldr	r1, [pc, #168]	; (8009cd8 <_strtod_l+0x5b0>)
 8009c30:	428b      	cmp	r3, r1
 8009c32:	4682      	mov	sl, r0
 8009c34:	d8bc      	bhi.n	8009bb0 <_strtod_l+0x488>
 8009c36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	bf86      	itte	hi
 8009c3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009cdc <_strtod_l+0x5b4>
 8009c42:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	e084      	b.n	8009d5a <_strtod_l+0x632>
 8009c50:	f018 0f01 	tst.w	r8, #1
 8009c54:	d005      	beq.n	8009c62 <_strtod_l+0x53a>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fcec 	bl	8000638 <__aeabi_dmul>
 8009c60:	2301      	movs	r3, #1
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	3208      	adds	r2, #8
 8009c66:	f109 0901 	add.w	r9, r9, #1
 8009c6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c6e:	9204      	str	r2, [sp, #16]
 8009c70:	e7c9      	b.n	8009c06 <_strtod_l+0x4de>
 8009c72:	d0ea      	beq.n	8009c4a <_strtod_l+0x522>
 8009c74:	f1c8 0800 	rsb	r8, r8, #0
 8009c78:	f018 020f 	ands.w	r2, r8, #15
 8009c7c:	d00a      	beq.n	8009c94 <_strtod_l+0x56c>
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <_strtod_l+0x5a4>)
 8009c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c84:	4650      	mov	r0, sl
 8009c86:	4659      	mov	r1, fp
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fdfe 	bl	800088c <__aeabi_ddiv>
 8009c90:	4682      	mov	sl, r0
 8009c92:	468b      	mov	fp, r1
 8009c94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c98:	d0d7      	beq.n	8009c4a <_strtod_l+0x522>
 8009c9a:	f1b8 0f1f 	cmp.w	r8, #31
 8009c9e:	dd1f      	ble.n	8009ce0 <_strtod_l+0x5b8>
 8009ca0:	2500      	movs	r5, #0
 8009ca2:	462e      	mov	r6, r5
 8009ca4:	9507      	str	r5, [sp, #28]
 8009ca6:	9505      	str	r5, [sp, #20]
 8009ca8:	2322      	movs	r3, #34	; 0x22
 8009caa:	f04f 0a00 	mov.w	sl, #0
 8009cae:	f04f 0b00 	mov.w	fp, #0
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	e786      	b.n	8009bc4 <_strtod_l+0x49c>
 8009cb6:	bf00      	nop
 8009cb8:	0800d835 	.word	0x0800d835
 8009cbc:	0800d878 	.word	0x0800d878
 8009cc0:	0800d82d 	.word	0x0800d82d
 8009cc4:	0800d9bc 	.word	0x0800d9bc
 8009cc8:	0800dcd0 	.word	0x0800dcd0
 8009ccc:	0800dbb0 	.word	0x0800dbb0
 8009cd0:	0800db88 	.word	0x0800db88
 8009cd4:	7ff00000 	.word	0x7ff00000
 8009cd8:	7ca00000 	.word	0x7ca00000
 8009cdc:	7fefffff 	.word	0x7fefffff
 8009ce0:	f018 0310 	ands.w	r3, r8, #16
 8009ce4:	bf18      	it	ne
 8009ce6:	236a      	movne	r3, #106	; 0x6a
 8009ce8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a098 <_strtod_l+0x970>
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	4650      	mov	r0, sl
 8009cf0:	4659      	mov	r1, fp
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f018 0f01 	tst.w	r8, #1
 8009cf8:	d004      	beq.n	8009d04 <_strtod_l+0x5dc>
 8009cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009cfe:	f7f6 fc9b 	bl	8000638 <__aeabi_dmul>
 8009d02:	2301      	movs	r3, #1
 8009d04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d08:	f109 0908 	add.w	r9, r9, #8
 8009d0c:	d1f2      	bne.n	8009cf4 <_strtod_l+0x5cc>
 8009d0e:	b10b      	cbz	r3, 8009d14 <_strtod_l+0x5ec>
 8009d10:	4682      	mov	sl, r0
 8009d12:	468b      	mov	fp, r1
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	b1c3      	cbz	r3, 8009d4a <_strtod_l+0x622>
 8009d18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4659      	mov	r1, fp
 8009d24:	dd11      	ble.n	8009d4a <_strtod_l+0x622>
 8009d26:	2b1f      	cmp	r3, #31
 8009d28:	f340 8124 	ble.w	8009f74 <_strtod_l+0x84c>
 8009d2c:	2b34      	cmp	r3, #52	; 0x34
 8009d2e:	bfde      	ittt	le
 8009d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d34:	f04f 33ff 	movle.w	r3, #4294967295
 8009d38:	fa03 f202 	lslle.w	r2, r3, r2
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	bfcc      	ite	gt
 8009d42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d46:	ea02 0b01 	andle.w	fp, r2, r1
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	f7f6 fed9 	bl	8000b08 <__aeabi_dcmpeq>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1a2      	bne.n	8009ca0 <_strtod_l+0x578>
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	9908      	ldr	r1, [sp, #32]
 8009d60:	462b      	mov	r3, r5
 8009d62:	463a      	mov	r2, r7
 8009d64:	4620      	mov	r0, r4
 8009d66:	f002 f92b 	bl	800bfc0 <__s2b>
 8009d6a:	9007      	str	r0, [sp, #28]
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f43f af1f 	beq.w	8009bb0 <_strtod_l+0x488>
 8009d72:	9b05      	ldr	r3, [sp, #20]
 8009d74:	1b9e      	subs	r6, r3, r6
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfb4      	ite	lt
 8009d7c:	4633      	movlt	r3, r6
 8009d7e:	2300      	movge	r3, #0
 8009d80:	930c      	str	r3, [sp, #48]	; 0x30
 8009d82:	9b06      	ldr	r3, [sp, #24]
 8009d84:	2500      	movs	r5, #0
 8009d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d8c:	462e      	mov	r6, r5
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	4620      	mov	r0, r4
 8009d92:	6859      	ldr	r1, [r3, #4]
 8009d94:	f002 f86c 	bl	800be70 <_Balloc>
 8009d98:	9005      	str	r0, [sp, #20]
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f af0c 	beq.w	8009bb8 <_strtod_l+0x490>
 8009da0:	9b07      	ldr	r3, [sp, #28]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	3202      	adds	r2, #2
 8009da6:	f103 010c 	add.w	r1, r3, #12
 8009daa:	0092      	lsls	r2, r2, #2
 8009dac:	300c      	adds	r0, #12
 8009dae:	f002 f851 	bl	800be54 <memcpy>
 8009db2:	ec4b ab10 	vmov	d0, sl, fp
 8009db6:	aa1a      	add	r2, sp, #104	; 0x68
 8009db8:	a919      	add	r1, sp, #100	; 0x64
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f002 fc46 	bl	800c64c <__d2b>
 8009dc0:	ec4b ab18 	vmov	d8, sl, fp
 8009dc4:	9018      	str	r0, [sp, #96]	; 0x60
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f aef6 	beq.w	8009bb8 <_strtod_l+0x490>
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f002 f990 	bl	800c0f4 <__i2b>
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f aeee 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dde:	9904      	ldr	r1, [sp, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfab      	itete	ge
 8009de4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009de6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009de8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009dea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009dee:	bfac      	ite	ge
 8009df0:	eb03 0902 	addge.w	r9, r3, r2
 8009df4:	1ad7      	sublt	r7, r2, r3
 8009df6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009df8:	eba3 0801 	sub.w	r8, r3, r1
 8009dfc:	4490      	add	r8, r2
 8009dfe:	4ba1      	ldr	r3, [pc, #644]	; (800a084 <_strtod_l+0x95c>)
 8009e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e04:	4598      	cmp	r8, r3
 8009e06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e0a:	f280 80c7 	bge.w	8009f9c <_strtod_l+0x874>
 8009e0e:	eba3 0308 	sub.w	r3, r3, r8
 8009e12:	2b1f      	cmp	r3, #31
 8009e14:	eba2 0203 	sub.w	r2, r2, r3
 8009e18:	f04f 0101 	mov.w	r1, #1
 8009e1c:	f300 80b1 	bgt.w	8009f82 <_strtod_l+0x85a>
 8009e20:	fa01 f303 	lsl.w	r3, r1, r3
 8009e24:	930d      	str	r3, [sp, #52]	; 0x34
 8009e26:	2300      	movs	r3, #0
 8009e28:	9308      	str	r3, [sp, #32]
 8009e2a:	eb09 0802 	add.w	r8, r9, r2
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	45c1      	cmp	r9, r8
 8009e32:	4417      	add	r7, r2
 8009e34:	441f      	add	r7, r3
 8009e36:	464b      	mov	r3, r9
 8009e38:	bfa8      	it	ge
 8009e3a:	4643      	movge	r3, r8
 8009e3c:	42bb      	cmp	r3, r7
 8009e3e:	bfa8      	it	ge
 8009e40:	463b      	movge	r3, r7
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	bfc2      	ittt	gt
 8009e46:	eba8 0803 	subgt.w	r8, r8, r3
 8009e4a:	1aff      	subgt	r7, r7, r3
 8009e4c:	eba9 0903 	subgt.w	r9, r9, r3
 8009e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd17      	ble.n	8009e86 <_strtod_l+0x75e>
 8009e56:	4631      	mov	r1, r6
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f002 fa0a 	bl	800c274 <__pow5mult>
 8009e60:	4606      	mov	r6, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aea8 	beq.w	8009bb8 <_strtod_l+0x490>
 8009e68:	4601      	mov	r1, r0
 8009e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f002 f957 	bl	800c120 <__multiply>
 8009e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f43f ae9f 	beq.w	8009bb8 <_strtod_l+0x490>
 8009e7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f002 f837 	bl	800bef0 <_Bfree>
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	9318      	str	r3, [sp, #96]	; 0x60
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	f300 808c 	bgt.w	8009fa6 <_strtod_l+0x87e>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dd08      	ble.n	8009ea6 <_strtod_l+0x77e>
 8009e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e96:	9905      	ldr	r1, [sp, #20]
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f002 f9eb 	bl	800c274 <__pow5mult>
 8009e9e:	9005      	str	r0, [sp, #20]
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f ae89 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	dd08      	ble.n	8009ebc <_strtod_l+0x794>
 8009eaa:	9905      	ldr	r1, [sp, #20]
 8009eac:	463a      	mov	r2, r7
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f002 fa3a 	bl	800c328 <__lshift>
 8009eb4:	9005      	str	r0, [sp, #20]
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f ae7e 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x7ac>
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f002 fa2e 	bl	800c328 <__lshift>
 8009ecc:	4606      	mov	r6, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae72 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ed4:	9a05      	ldr	r2, [sp, #20]
 8009ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f002 fab1 	bl	800c440 <__mdiff>
 8009ede:	4605      	mov	r5, r0
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	f43f ae69 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ee6:	68c3      	ldr	r3, [r0, #12]
 8009ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eea:	2300      	movs	r3, #0
 8009eec:	60c3      	str	r3, [r0, #12]
 8009eee:	4631      	mov	r1, r6
 8009ef0:	f002 fa8a 	bl	800c408 <__mcmp>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	da60      	bge.n	8009fba <_strtod_l+0x892>
 8009ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009efa:	ea53 030a 	orrs.w	r3, r3, sl
 8009efe:	f040 8082 	bne.w	800a006 <_strtod_l+0x8de>
 8009f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d17d      	bne.n	800a006 <_strtod_l+0x8de>
 8009f0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f0e:	0d1b      	lsrs	r3, r3, #20
 8009f10:	051b      	lsls	r3, r3, #20
 8009f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f16:	d976      	bls.n	800a006 <_strtod_l+0x8de>
 8009f18:	696b      	ldr	r3, [r5, #20]
 8009f1a:	b913      	cbnz	r3, 8009f22 <_strtod_l+0x7fa>
 8009f1c:	692b      	ldr	r3, [r5, #16]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	dd71      	ble.n	800a006 <_strtod_l+0x8de>
 8009f22:	4629      	mov	r1, r5
 8009f24:	2201      	movs	r2, #1
 8009f26:	4620      	mov	r0, r4
 8009f28:	f002 f9fe 	bl	800c328 <__lshift>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4605      	mov	r5, r0
 8009f30:	f002 fa6a 	bl	800c408 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dd66      	ble.n	800a006 <_strtod_l+0x8de>
 8009f38:	9904      	ldr	r1, [sp, #16]
 8009f3a:	4a53      	ldr	r2, [pc, #332]	; (800a088 <_strtod_l+0x960>)
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	f000 8081 	beq.w	800a046 <_strtod_l+0x91e>
 8009f44:	ea02 010b 	and.w	r1, r2, fp
 8009f48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f4c:	dc7b      	bgt.n	800a046 <_strtod_l+0x91e>
 8009f4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f52:	f77f aea9 	ble.w	8009ca8 <_strtod_l+0x580>
 8009f56:	4b4d      	ldr	r3, [pc, #308]	; (800a08c <_strtod_l+0x964>)
 8009f58:	4650      	mov	r0, sl
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f7f6 fb6b 	bl	8000638 <__aeabi_dmul>
 8009f62:	460b      	mov	r3, r1
 8009f64:	4303      	orrs	r3, r0
 8009f66:	bf08      	it	eq
 8009f68:	2322      	moveq	r3, #34	; 0x22
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	468b      	mov	fp, r1
 8009f6e:	bf08      	it	eq
 8009f70:	6023      	streq	r3, [r4, #0]
 8009f72:	e62b      	b.n	8009bcc <_strtod_l+0x4a4>
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295
 8009f78:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f80:	e6e3      	b.n	8009d4a <_strtod_l+0x622>
 8009f82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f92:	fa01 f308 	lsl.w	r3, r1, r8
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	910d      	str	r1, [sp, #52]	; 0x34
 8009f9a:	e746      	b.n	8009e2a <_strtod_l+0x702>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9308      	str	r3, [sp, #32]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fa4:	e741      	b.n	8009e2a <_strtod_l+0x702>
 8009fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fa8:	4642      	mov	r2, r8
 8009faa:	4620      	mov	r0, r4
 8009fac:	f002 f9bc 	bl	800c328 <__lshift>
 8009fb0:	9018      	str	r0, [sp, #96]	; 0x60
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f47f af6b 	bne.w	8009e8e <_strtod_l+0x766>
 8009fb8:	e5fe      	b.n	8009bb8 <_strtod_l+0x490>
 8009fba:	465f      	mov	r7, fp
 8009fbc:	d16e      	bne.n	800a09c <_strtod_l+0x974>
 8009fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc4:	b342      	cbz	r2, 800a018 <_strtod_l+0x8f0>
 8009fc6:	4a32      	ldr	r2, [pc, #200]	; (800a090 <_strtod_l+0x968>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d128      	bne.n	800a01e <_strtod_l+0x8f6>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4651      	mov	r1, sl
 8009fd0:	b1eb      	cbz	r3, 800a00e <_strtod_l+0x8e6>
 8009fd2:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <_strtod_l+0x960>)
 8009fd4:	403b      	ands	r3, r7
 8009fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295
 8009fde:	d819      	bhi.n	800a014 <_strtod_l+0x8ec>
 8009fe0:	0d1b      	lsrs	r3, r3, #20
 8009fe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d117      	bne.n	800a01e <_strtod_l+0x8f6>
 8009fee:	4b29      	ldr	r3, [pc, #164]	; (800a094 <_strtod_l+0x96c>)
 8009ff0:	429f      	cmp	r7, r3
 8009ff2:	d102      	bne.n	8009ffa <_strtod_l+0x8d2>
 8009ff4:	3101      	adds	r1, #1
 8009ff6:	f43f addf 	beq.w	8009bb8 <_strtod_l+0x490>
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <_strtod_l+0x960>)
 8009ffc:	403b      	ands	r3, r7
 8009ffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a002:	f04f 0a00 	mov.w	sl, #0
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1a4      	bne.n	8009f56 <_strtod_l+0x82e>
 800a00c:	e5de      	b.n	8009bcc <_strtod_l+0x4a4>
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
 800a012:	e7ea      	b.n	8009fea <_strtod_l+0x8c2>
 800a014:	4613      	mov	r3, r2
 800a016:	e7e8      	b.n	8009fea <_strtod_l+0x8c2>
 800a018:	ea53 030a 	orrs.w	r3, r3, sl
 800a01c:	d08c      	beq.n	8009f38 <_strtod_l+0x810>
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	b1db      	cbz	r3, 800a05a <_strtod_l+0x932>
 800a022:	423b      	tst	r3, r7
 800a024:	d0ef      	beq.n	800a006 <_strtod_l+0x8de>
 800a026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a028:	9a04      	ldr	r2, [sp, #16]
 800a02a:	4650      	mov	r0, sl
 800a02c:	4659      	mov	r1, fp
 800a02e:	b1c3      	cbz	r3, 800a062 <_strtod_l+0x93a>
 800a030:	f7ff fb5c 	bl	80096ec <sulp>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	ec51 0b18 	vmov	r0, r1, d8
 800a03c:	f7f6 f946 	bl	80002cc <__adddf3>
 800a040:	4682      	mov	sl, r0
 800a042:	468b      	mov	fp, r1
 800a044:	e7df      	b.n	800a006 <_strtod_l+0x8de>
 800a046:	4013      	ands	r3, r2
 800a048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a04c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a050:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a054:	f04f 3aff 	mov.w	sl, #4294967295
 800a058:	e7d5      	b.n	800a006 <_strtod_l+0x8de>
 800a05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a05c:	ea13 0f0a 	tst.w	r3, sl
 800a060:	e7e0      	b.n	800a024 <_strtod_l+0x8fc>
 800a062:	f7ff fb43 	bl	80096ec <sulp>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	ec51 0b18 	vmov	r0, r1, d8
 800a06e:	f7f6 f92b 	bl	80002c8 <__aeabi_dsub>
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4682      	mov	sl, r0
 800a078:	468b      	mov	fp, r1
 800a07a:	f7f6 fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0c1      	beq.n	800a006 <_strtod_l+0x8de>
 800a082:	e611      	b.n	8009ca8 <_strtod_l+0x580>
 800a084:	fffffc02 	.word	0xfffffc02
 800a088:	7ff00000 	.word	0x7ff00000
 800a08c:	39500000 	.word	0x39500000
 800a090:	000fffff 	.word	0x000fffff
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800d890 	.word	0x0800d890
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f002 fb30 	bl	800c704 <__ratio>
 800a0a4:	ec59 8b10 	vmov	r8, r9, d0
 800a0a8:	ee10 0a10 	vmov	r0, s0
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 fd3c 	bl	8000b30 <__aeabi_dcmple>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d07a      	beq.n	800a1b2 <_strtod_l+0xa8a>
 800a0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d04a      	beq.n	800a158 <_strtod_l+0xa30>
 800a0c2:	4b95      	ldr	r3, [pc, #596]	; (800a318 <_strtod_l+0xbf0>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a318 <_strtod_l+0xbf0>
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	4b92      	ldr	r3, [pc, #584]	; (800a31c <_strtod_l+0xbf4>)
 800a0d4:	403b      	ands	r3, r7
 800a0d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0da:	4b91      	ldr	r3, [pc, #580]	; (800a320 <_strtod_l+0xbf8>)
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f040 80b0 	bne.w	800a242 <_strtod_l+0xb1a>
 800a0e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a0ea:	ec4b ab10 	vmov	d0, sl, fp
 800a0ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0f2:	f002 fa2f 	bl	800c554 <__ulp>
 800a0f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0fa:	ec53 2b10 	vmov	r2, r3, d0
 800a0fe:	f7f6 fa9b 	bl	8000638 <__aeabi_dmul>
 800a102:	4652      	mov	r2, sl
 800a104:	465b      	mov	r3, fp
 800a106:	f7f6 f8e1 	bl	80002cc <__adddf3>
 800a10a:	460b      	mov	r3, r1
 800a10c:	4983      	ldr	r1, [pc, #524]	; (800a31c <_strtod_l+0xbf4>)
 800a10e:	4a85      	ldr	r2, [pc, #532]	; (800a324 <_strtod_l+0xbfc>)
 800a110:	4019      	ands	r1, r3
 800a112:	4291      	cmp	r1, r2
 800a114:	4682      	mov	sl, r0
 800a116:	d960      	bls.n	800a1da <_strtod_l+0xab2>
 800a118:	ee18 3a90 	vmov	r3, s17
 800a11c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a120:	4293      	cmp	r3, r2
 800a122:	d104      	bne.n	800a12e <_strtod_l+0xa06>
 800a124:	ee18 3a10 	vmov	r3, s16
 800a128:	3301      	adds	r3, #1
 800a12a:	f43f ad45 	beq.w	8009bb8 <_strtod_l+0x490>
 800a12e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a330 <_strtod_l+0xc08>
 800a132:	f04f 3aff 	mov.w	sl, #4294967295
 800a136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a138:	4620      	mov	r0, r4
 800a13a:	f001 fed9 	bl	800bef0 <_Bfree>
 800a13e:	9905      	ldr	r1, [sp, #20]
 800a140:	4620      	mov	r0, r4
 800a142:	f001 fed5 	bl	800bef0 <_Bfree>
 800a146:	4631      	mov	r1, r6
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 fed1 	bl	800bef0 <_Bfree>
 800a14e:	4629      	mov	r1, r5
 800a150:	4620      	mov	r0, r4
 800a152:	f001 fecd 	bl	800bef0 <_Bfree>
 800a156:	e61a      	b.n	8009d8e <_strtod_l+0x666>
 800a158:	f1ba 0f00 	cmp.w	sl, #0
 800a15c:	d11b      	bne.n	800a196 <_strtod_l+0xa6e>
 800a15e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a162:	b9f3      	cbnz	r3, 800a1a2 <_strtod_l+0xa7a>
 800a164:	4b6c      	ldr	r3, [pc, #432]	; (800a318 <_strtod_l+0xbf0>)
 800a166:	2200      	movs	r2, #0
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 800a170:	b9d0      	cbnz	r0, 800a1a8 <_strtod_l+0xa80>
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	4b6c      	ldr	r3, [pc, #432]	; (800a328 <_strtod_l+0xc00>)
 800a178:	2200      	movs	r2, #0
 800a17a:	f7f6 fa5d 	bl	8000638 <__aeabi_dmul>
 800a17e:	4680      	mov	r8, r0
 800a180:	4689      	mov	r9, r1
 800a182:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a186:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a18a:	9315      	str	r3, [sp, #84]	; 0x54
 800a18c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a194:	e79d      	b.n	800a0d2 <_strtod_l+0x9aa>
 800a196:	f1ba 0f01 	cmp.w	sl, #1
 800a19a:	d102      	bne.n	800a1a2 <_strtod_l+0xa7a>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f43f ad83 	beq.w	8009ca8 <_strtod_l+0x580>
 800a1a2:	4b62      	ldr	r3, [pc, #392]	; (800a32c <_strtod_l+0xc04>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	e78e      	b.n	800a0c6 <_strtod_l+0x99e>
 800a1a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a328 <_strtod_l+0xc00>
 800a1ac:	f04f 0800 	mov.w	r8, #0
 800a1b0:	e7e7      	b.n	800a182 <_strtod_l+0xa5a>
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	; (800a328 <_strtod_l+0xc00>)
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7f6 fa3d 	bl	8000638 <__aeabi_dmul>
 800a1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4689      	mov	r9, r1
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_strtod_l+0xaac>
 800a1c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ca:	900e      	str	r0, [sp, #56]	; 0x38
 800a1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a1d2:	e7dd      	b.n	800a190 <_strtod_l+0xa68>
 800a1d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a1d8:	e7f9      	b.n	800a1ce <_strtod_l+0xaa6>
 800a1da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1a8      	bne.n	800a136 <_strtod_l+0xa0e>
 800a1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ea:	0d1b      	lsrs	r3, r3, #20
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d1a1      	bne.n	800a136 <_strtod_l+0xa0e>
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	f7f6 fd7f 	bl	8000cf8 <__aeabi_d2lz>
 800a1fa:	f7f6 f9ef 	bl	80005dc <__aeabi_l2d>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 f85f 	bl	80002c8 <__aeabi_dsub>
 800a20a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a20c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a210:	ea43 030a 	orr.w	r3, r3, sl
 800a214:	4313      	orrs	r3, r2
 800a216:	4680      	mov	r8, r0
 800a218:	4689      	mov	r9, r1
 800a21a:	d055      	beq.n	800a2c8 <_strtod_l+0xba0>
 800a21c:	a336      	add	r3, pc, #216	; (adr r3, 800a2f8 <_strtod_l+0xbd0>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f7f6 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 800a226:	2800      	cmp	r0, #0
 800a228:	f47f acd0 	bne.w	8009bcc <_strtod_l+0x4a4>
 800a22c:	a334      	add	r3, pc, #208	; (adr r3, 800a300 <_strtod_l+0xbd8>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 fc8f 	bl	8000b58 <__aeabi_dcmpgt>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	f43f af7b 	beq.w	800a136 <_strtod_l+0xa0e>
 800a240:	e4c4      	b.n	8009bcc <_strtod_l+0x4a4>
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	b333      	cbz	r3, 800a294 <_strtod_l+0xb6c>
 800a246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a248:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a24c:	d822      	bhi.n	800a294 <_strtod_l+0xb6c>
 800a24e:	a32e      	add	r3, pc, #184	; (adr r3, 800a308 <_strtod_l+0xbe0>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 fc6a 	bl	8000b30 <__aeabi_dcmple>
 800a25c:	b1a0      	cbz	r0, 800a288 <_strtod_l+0xb60>
 800a25e:	4649      	mov	r1, r9
 800a260:	4640      	mov	r0, r8
 800a262:	f7f6 fcc1 	bl	8000be8 <__aeabi_d2uiz>
 800a266:	2801      	cmp	r0, #1
 800a268:	bf38      	it	cc
 800a26a:	2001      	movcc	r0, #1
 800a26c:	f7f6 f96a 	bl	8000544 <__aeabi_ui2d>
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	4680      	mov	r8, r0
 800a274:	4689      	mov	r9, r1
 800a276:	bb23      	cbnz	r3, 800a2c2 <_strtod_l+0xb9a>
 800a278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a27c:	9010      	str	r0, [sp, #64]	; 0x40
 800a27e:	9311      	str	r3, [sp, #68]	; 0x44
 800a280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a28c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
 800a294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a298:	eeb0 0a48 	vmov.f32	s0, s16
 800a29c:	eef0 0a68 	vmov.f32	s1, s17
 800a2a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2a4:	f002 f956 	bl	800c554 <__ulp>
 800a2a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2ac:	ec53 2b10 	vmov	r2, r3, d0
 800a2b0:	f7f6 f9c2 	bl	8000638 <__aeabi_dmul>
 800a2b4:	ec53 2b18 	vmov	r2, r3, d8
 800a2b8:	f7f6 f808 	bl	80002cc <__adddf3>
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	e78d      	b.n	800a1de <_strtod_l+0xab6>
 800a2c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a2c6:	e7db      	b.n	800a280 <_strtod_l+0xb58>
 800a2c8:	a311      	add	r3, pc, #68	; (adr r3, 800a310 <_strtod_l+0xbe8>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 fc25 	bl	8000b1c <__aeabi_dcmplt>
 800a2d2:	e7b2      	b.n	800a23a <_strtod_l+0xb12>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	f7ff ba6b 	b.w	80097b8 <_strtod_l+0x90>
 800a2e2:	2a65      	cmp	r2, #101	; 0x65
 800a2e4:	f43f ab5f 	beq.w	80099a6 <_strtod_l+0x27e>
 800a2e8:	2a45      	cmp	r2, #69	; 0x45
 800a2ea:	f43f ab5c 	beq.w	80099a6 <_strtod_l+0x27e>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f7ff bb94 	b.w	8009a1c <_strtod_l+0x2f4>
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	94a03595 	.word	0x94a03595
 800a2fc:	3fdfffff 	.word	0x3fdfffff
 800a300:	35afe535 	.word	0x35afe535
 800a304:	3fe00000 	.word	0x3fe00000
 800a308:	ffc00000 	.word	0xffc00000
 800a30c:	41dfffff 	.word	0x41dfffff
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fcfffff 	.word	0x3fcfffff
 800a318:	3ff00000 	.word	0x3ff00000
 800a31c:	7ff00000 	.word	0x7ff00000
 800a320:	7fe00000 	.word	0x7fe00000
 800a324:	7c9fffff 	.word	0x7c9fffff
 800a328:	3fe00000 	.word	0x3fe00000
 800a32c:	bff00000 	.word	0xbff00000
 800a330:	7fefffff 	.word	0x7fefffff

0800a334 <_strtod_r>:
 800a334:	4b01      	ldr	r3, [pc, #4]	; (800a33c <_strtod_r+0x8>)
 800a336:	f7ff b9f7 	b.w	8009728 <_strtod_l>
 800a33a:	bf00      	nop
 800a33c:	20000098 	.word	0x20000098

0800a340 <_strtol_l.constprop.0>:
 800a340:	2b01      	cmp	r3, #1
 800a342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a346:	d001      	beq.n	800a34c <_strtol_l.constprop.0+0xc>
 800a348:	2b24      	cmp	r3, #36	; 0x24
 800a34a:	d906      	bls.n	800a35a <_strtol_l.constprop.0+0x1a>
 800a34c:	f7fe f974 	bl	8008638 <__errno>
 800a350:	2316      	movs	r3, #22
 800a352:	6003      	str	r3, [r0, #0]
 800a354:	2000      	movs	r0, #0
 800a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a440 <_strtol_l.constprop.0+0x100>
 800a35e:	460d      	mov	r5, r1
 800a360:	462e      	mov	r6, r5
 800a362:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a366:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a36a:	f017 0708 	ands.w	r7, r7, #8
 800a36e:	d1f7      	bne.n	800a360 <_strtol_l.constprop.0+0x20>
 800a370:	2c2d      	cmp	r4, #45	; 0x2d
 800a372:	d132      	bne.n	800a3da <_strtol_l.constprop.0+0x9a>
 800a374:	782c      	ldrb	r4, [r5, #0]
 800a376:	2701      	movs	r7, #1
 800a378:	1cb5      	adds	r5, r6, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d05b      	beq.n	800a436 <_strtol_l.constprop.0+0xf6>
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d109      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a382:	2c30      	cmp	r4, #48	; 0x30
 800a384:	d107      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a386:	782c      	ldrb	r4, [r5, #0]
 800a388:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a38c:	2c58      	cmp	r4, #88	; 0x58
 800a38e:	d14d      	bne.n	800a42c <_strtol_l.constprop.0+0xec>
 800a390:	786c      	ldrb	r4, [r5, #1]
 800a392:	2310      	movs	r3, #16
 800a394:	3502      	adds	r5, #2
 800a396:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a39a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a39e:	f04f 0c00 	mov.w	ip, #0
 800a3a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a3a6:	4666      	mov	r6, ip
 800a3a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a3b0:	f1be 0f09 	cmp.w	lr, #9
 800a3b4:	d816      	bhi.n	800a3e4 <_strtol_l.constprop.0+0xa4>
 800a3b6:	4674      	mov	r4, lr
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	dd24      	ble.n	800a406 <_strtol_l.constprop.0+0xc6>
 800a3bc:	f1bc 0f00 	cmp.w	ip, #0
 800a3c0:	db1e      	blt.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3c2:	45b1      	cmp	r9, r6
 800a3c4:	d31c      	bcc.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3c6:	d101      	bne.n	800a3cc <_strtol_l.constprop.0+0x8c>
 800a3c8:	45a2      	cmp	sl, r4
 800a3ca:	db19      	blt.n	800a400 <_strtol_l.constprop.0+0xc0>
 800a3cc:	fb06 4603 	mla	r6, r6, r3, r4
 800a3d0:	f04f 0c01 	mov.w	ip, #1
 800a3d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3d8:	e7e8      	b.n	800a3ac <_strtol_l.constprop.0+0x6c>
 800a3da:	2c2b      	cmp	r4, #43	; 0x2b
 800a3dc:	bf04      	itt	eq
 800a3de:	782c      	ldrbeq	r4, [r5, #0]
 800a3e0:	1cb5      	addeq	r5, r6, #2
 800a3e2:	e7ca      	b.n	800a37a <_strtol_l.constprop.0+0x3a>
 800a3e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a3e8:	f1be 0f19 	cmp.w	lr, #25
 800a3ec:	d801      	bhi.n	800a3f2 <_strtol_l.constprop.0+0xb2>
 800a3ee:	3c37      	subs	r4, #55	; 0x37
 800a3f0:	e7e2      	b.n	800a3b8 <_strtol_l.constprop.0+0x78>
 800a3f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a3f6:	f1be 0f19 	cmp.w	lr, #25
 800a3fa:	d804      	bhi.n	800a406 <_strtol_l.constprop.0+0xc6>
 800a3fc:	3c57      	subs	r4, #87	; 0x57
 800a3fe:	e7db      	b.n	800a3b8 <_strtol_l.constprop.0+0x78>
 800a400:	f04f 3cff 	mov.w	ip, #4294967295
 800a404:	e7e6      	b.n	800a3d4 <_strtol_l.constprop.0+0x94>
 800a406:	f1bc 0f00 	cmp.w	ip, #0
 800a40a:	da05      	bge.n	800a418 <_strtol_l.constprop.0+0xd8>
 800a40c:	2322      	movs	r3, #34	; 0x22
 800a40e:	6003      	str	r3, [r0, #0]
 800a410:	4646      	mov	r6, r8
 800a412:	b942      	cbnz	r2, 800a426 <_strtol_l.constprop.0+0xe6>
 800a414:	4630      	mov	r0, r6
 800a416:	e79e      	b.n	800a356 <_strtol_l.constprop.0+0x16>
 800a418:	b107      	cbz	r7, 800a41c <_strtol_l.constprop.0+0xdc>
 800a41a:	4276      	negs	r6, r6
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	d0f9      	beq.n	800a414 <_strtol_l.constprop.0+0xd4>
 800a420:	f1bc 0f00 	cmp.w	ip, #0
 800a424:	d000      	beq.n	800a428 <_strtol_l.constprop.0+0xe8>
 800a426:	1e69      	subs	r1, r5, #1
 800a428:	6011      	str	r1, [r2, #0]
 800a42a:	e7f3      	b.n	800a414 <_strtol_l.constprop.0+0xd4>
 800a42c:	2430      	movs	r4, #48	; 0x30
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1b1      	bne.n	800a396 <_strtol_l.constprop.0+0x56>
 800a432:	2308      	movs	r3, #8
 800a434:	e7af      	b.n	800a396 <_strtol_l.constprop.0+0x56>
 800a436:	2c30      	cmp	r4, #48	; 0x30
 800a438:	d0a5      	beq.n	800a386 <_strtol_l.constprop.0+0x46>
 800a43a:	230a      	movs	r3, #10
 800a43c:	e7ab      	b.n	800a396 <_strtol_l.constprop.0+0x56>
 800a43e:	bf00      	nop
 800a440:	0800d8b9 	.word	0x0800d8b9

0800a444 <_strtol_r>:
 800a444:	f7ff bf7c 	b.w	800a340 <_strtol_l.constprop.0>

0800a448 <_vsiprintf_r>:
 800a448:	b500      	push	{lr}
 800a44a:	b09b      	sub	sp, #108	; 0x6c
 800a44c:	9100      	str	r1, [sp, #0]
 800a44e:	9104      	str	r1, [sp, #16]
 800a450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	9102      	str	r1, [sp, #8]
 800a458:	4905      	ldr	r1, [pc, #20]	; (800a470 <_vsiprintf_r+0x28>)
 800a45a:	9103      	str	r1, [sp, #12]
 800a45c:	4669      	mov	r1, sp
 800a45e:	f002 fb1b 	bl	800ca98 <_svfiprintf_r>
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	b01b      	add	sp, #108	; 0x6c
 800a46a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a46e:	bf00      	nop
 800a470:	ffff0208 	.word	0xffff0208

0800a474 <vsiprintf>:
 800a474:	4613      	mov	r3, r2
 800a476:	460a      	mov	r2, r1
 800a478:	4601      	mov	r1, r0
 800a47a:	4802      	ldr	r0, [pc, #8]	; (800a484 <vsiprintf+0x10>)
 800a47c:	6800      	ldr	r0, [r0, #0]
 800a47e:	f7ff bfe3 	b.w	800a448 <_vsiprintf_r>
 800a482:	bf00      	nop
 800a484:	20000030 	.word	0x20000030

0800a488 <__swbuf_r>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	4614      	mov	r4, r2
 800a48e:	4605      	mov	r5, r0
 800a490:	b118      	cbz	r0, 800a49a <__swbuf_r+0x12>
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	b90b      	cbnz	r3, 800a49a <__swbuf_r+0x12>
 800a496:	f001 f84b 	bl	800b530 <__sinit>
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <__swbuf_r+0x98>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d12b      	bne.n	800a4f8 <__swbuf_r+0x70>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	69a3      	ldr	r3, [r4, #24]
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	071a      	lsls	r2, r3, #28
 800a4aa:	d52f      	bpl.n	800a50c <__swbuf_r+0x84>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b36b      	cbz	r3, 800a50c <__swbuf_r+0x84>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	6820      	ldr	r0, [r4, #0]
 800a4b4:	1ac0      	subs	r0, r0, r3
 800a4b6:	6963      	ldr	r3, [r4, #20]
 800a4b8:	b2f6      	uxtb	r6, r6
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	4637      	mov	r7, r6
 800a4be:	dc04      	bgt.n	800a4ca <__swbuf_r+0x42>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 ffa0 	bl	800b408 <_fflush_r>
 800a4c8:	bb30      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6022      	str	r2, [r4, #0]
 800a4d6:	701e      	strb	r6, [r3, #0]
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	3001      	adds	r0, #1
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	d004      	beq.n	800a4ea <__swbuf_r+0x62>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d506      	bpl.n	800a4f4 <__swbuf_r+0x6c>
 800a4e6:	2e0a      	cmp	r6, #10
 800a4e8:	d104      	bne.n	800a4f4 <__swbuf_r+0x6c>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 ff8b 	bl	800b408 <_fflush_r>
 800a4f2:	b988      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <__swbuf_r+0x9c>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d101      	bne.n	800a502 <__swbuf_r+0x7a>
 800a4fe:	68ac      	ldr	r4, [r5, #8]
 800a500:	e7cf      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <__swbuf_r+0xa0>)
 800a504:	429c      	cmp	r4, r3
 800a506:	bf08      	it	eq
 800a508:	68ec      	ldreq	r4, [r5, #12]
 800a50a:	e7ca      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f80c 	bl	800a52c <__swsetup_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d0cb      	beq.n	800a4b0 <__swbuf_r+0x28>
 800a518:	f04f 37ff 	mov.w	r7, #4294967295
 800a51c:	e7ea      	b.n	800a4f4 <__swbuf_r+0x6c>
 800a51e:	bf00      	nop
 800a520:	0800da6c 	.word	0x0800da6c
 800a524:	0800da8c 	.word	0x0800da8c
 800a528:	0800da4c 	.word	0x0800da4c

0800a52c <__swsetup_r>:
 800a52c:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <__swsetup_r+0xcc>)
 800a52e:	b570      	push	{r4, r5, r6, lr}
 800a530:	681d      	ldr	r5, [r3, #0]
 800a532:	4606      	mov	r6, r0
 800a534:	460c      	mov	r4, r1
 800a536:	b125      	cbz	r5, 800a542 <__swsetup_r+0x16>
 800a538:	69ab      	ldr	r3, [r5, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__swsetup_r+0x16>
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 fff7 	bl	800b530 <__sinit>
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <__swsetup_r+0xd0>)
 800a544:	429c      	cmp	r4, r3
 800a546:	d10f      	bne.n	800a568 <__swsetup_r+0x3c>
 800a548:	686c      	ldr	r4, [r5, #4]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a550:	0719      	lsls	r1, r3, #28
 800a552:	d42c      	bmi.n	800a5ae <__swsetup_r+0x82>
 800a554:	06dd      	lsls	r5, r3, #27
 800a556:	d411      	bmi.n	800a57c <__swsetup_r+0x50>
 800a558:	2309      	movs	r3, #9
 800a55a:	6033      	str	r3, [r6, #0]
 800a55c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	e03e      	b.n	800a5e6 <__swsetup_r+0xba>
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <__swsetup_r+0xd4>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d101      	bne.n	800a572 <__swsetup_r+0x46>
 800a56e:	68ac      	ldr	r4, [r5, #8]
 800a570:	e7eb      	b.n	800a54a <__swsetup_r+0x1e>
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <__swsetup_r+0xd8>)
 800a574:	429c      	cmp	r4, r3
 800a576:	bf08      	it	eq
 800a578:	68ec      	ldreq	r4, [r5, #12]
 800a57a:	e7e6      	b.n	800a54a <__swsetup_r+0x1e>
 800a57c:	0758      	lsls	r0, r3, #29
 800a57e:	d512      	bpl.n	800a5a6 <__swsetup_r+0x7a>
 800a580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a582:	b141      	cbz	r1, 800a596 <__swsetup_r+0x6a>
 800a584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a588:	4299      	cmp	r1, r3
 800a58a:	d002      	beq.n	800a592 <__swsetup_r+0x66>
 800a58c:	4630      	mov	r0, r6
 800a58e:	f002 f947 	bl	800c820 <_free_r>
 800a592:	2300      	movs	r3, #0
 800a594:	6363      	str	r3, [r4, #52]	; 0x34
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f043 0308 	orr.w	r3, r3, #8
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	b94b      	cbnz	r3, 800a5c6 <__swsetup_r+0x9a>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5bc:	d003      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f001 fbed 	bl	800bda0 <__smakebuf_r>
 800a5c6:	89a0      	ldrh	r0, [r4, #12]
 800a5c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5cc:	f010 0301 	ands.w	r3, r0, #1
 800a5d0:	d00a      	beq.n	800a5e8 <__swsetup_r+0xbc>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6963      	ldr	r3, [r4, #20]
 800a5d8:	425b      	negs	r3, r3
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b943      	cbnz	r3, 800a5f2 <__swsetup_r+0xc6>
 800a5e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e4:	d1ba      	bne.n	800a55c <__swsetup_r+0x30>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	0781      	lsls	r1, r0, #30
 800a5ea:	bf58      	it	pl
 800a5ec:	6963      	ldrpl	r3, [r4, #20]
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	e7f4      	b.n	800a5dc <__swsetup_r+0xb0>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e7f7      	b.n	800a5e6 <__swsetup_r+0xba>
 800a5f6:	bf00      	nop
 800a5f8:	20000030 	.word	0x20000030
 800a5fc:	0800da6c 	.word	0x0800da6c
 800a600:	0800da8c 	.word	0x0800da8c
 800a604:	0800da4c 	.word	0x0800da4c

0800a608 <quorem>:
 800a608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	6903      	ldr	r3, [r0, #16]
 800a60e:	690c      	ldr	r4, [r1, #16]
 800a610:	42a3      	cmp	r3, r4
 800a612:	4607      	mov	r7, r0
 800a614:	f2c0 8081 	blt.w	800a71a <quorem+0x112>
 800a618:	3c01      	subs	r4, #1
 800a61a:	f101 0814 	add.w	r8, r1, #20
 800a61e:	f100 0514 	add.w	r5, r0, #20
 800a622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a62c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a630:	3301      	adds	r3, #1
 800a632:	429a      	cmp	r2, r3
 800a634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a63c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a640:	d331      	bcc.n	800a6a6 <quorem+0x9e>
 800a642:	f04f 0e00 	mov.w	lr, #0
 800a646:	4640      	mov	r0, r8
 800a648:	46ac      	mov	ip, r5
 800a64a:	46f2      	mov	sl, lr
 800a64c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a650:	b293      	uxth	r3, r2
 800a652:	fb06 e303 	mla	r3, r6, r3, lr
 800a656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	ebaa 0303 	sub.w	r3, sl, r3
 800a660:	f8dc a000 	ldr.w	sl, [ip]
 800a664:	0c12      	lsrs	r2, r2, #16
 800a666:	fa13 f38a 	uxtah	r3, r3, sl
 800a66a:	fb06 e202 	mla	r2, r6, r2, lr
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	9b00      	ldr	r3, [sp, #0]
 800a672:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a676:	b292      	uxth	r2, r2
 800a678:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a680:	f8bd 3000 	ldrh.w	r3, [sp]
 800a684:	4581      	cmp	r9, r0
 800a686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a68a:	f84c 3b04 	str.w	r3, [ip], #4
 800a68e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a692:	d2db      	bcs.n	800a64c <quorem+0x44>
 800a694:	f855 300b 	ldr.w	r3, [r5, fp]
 800a698:	b92b      	cbnz	r3, 800a6a6 <quorem+0x9e>
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	3b04      	subs	r3, #4
 800a69e:	429d      	cmp	r5, r3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	d32e      	bcc.n	800a702 <quorem+0xfa>
 800a6a4:	613c      	str	r4, [r7, #16]
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f001 feae 	bl	800c408 <__mcmp>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	db24      	blt.n	800a6fa <quorem+0xf2>
 800a6b0:	3601      	adds	r6, #1
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f04f 0c00 	mov.w	ip, #0
 800a6b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a6c0:	b293      	uxth	r3, r2
 800a6c2:	ebac 0303 	sub.w	r3, ip, r3
 800a6c6:	0c12      	lsrs	r2, r2, #16
 800a6c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6da:	45c1      	cmp	r9, r8
 800a6dc:	f840 3b04 	str.w	r3, [r0], #4
 800a6e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6e4:	d2e8      	bcs.n	800a6b8 <quorem+0xb0>
 800a6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6ee:	b922      	cbnz	r2, 800a6fa <quorem+0xf2>
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	d30a      	bcc.n	800a70e <quorem+0x106>
 800a6f8:	613c      	str	r4, [r7, #16]
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	3b04      	subs	r3, #4
 800a706:	2a00      	cmp	r2, #0
 800a708:	d1cc      	bne.n	800a6a4 <quorem+0x9c>
 800a70a:	3c01      	subs	r4, #1
 800a70c:	e7c7      	b.n	800a69e <quorem+0x96>
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	3b04      	subs	r3, #4
 800a712:	2a00      	cmp	r2, #0
 800a714:	d1f0      	bne.n	800a6f8 <quorem+0xf0>
 800a716:	3c01      	subs	r4, #1
 800a718:	e7eb      	b.n	800a6f2 <quorem+0xea>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e7ee      	b.n	800a6fc <quorem+0xf4>
	...

0800a720 <_dtoa_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	ed2d 8b04 	vpush	{d8-d9}
 800a728:	ec57 6b10 	vmov	r6, r7, d0
 800a72c:	b093      	sub	sp, #76	; 0x4c
 800a72e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a734:	9106      	str	r1, [sp, #24]
 800a736:	ee10 aa10 	vmov	sl, s0
 800a73a:	4604      	mov	r4, r0
 800a73c:	9209      	str	r2, [sp, #36]	; 0x24
 800a73e:	930c      	str	r3, [sp, #48]	; 0x30
 800a740:	46bb      	mov	fp, r7
 800a742:	b975      	cbnz	r5, 800a762 <_dtoa_r+0x42>
 800a744:	2010      	movs	r0, #16
 800a746:	f001 fb6b 	bl	800be20 <malloc>
 800a74a:	4602      	mov	r2, r0
 800a74c:	6260      	str	r0, [r4, #36]	; 0x24
 800a74e:	b920      	cbnz	r0, 800a75a <_dtoa_r+0x3a>
 800a750:	4ba7      	ldr	r3, [pc, #668]	; (800a9f0 <_dtoa_r+0x2d0>)
 800a752:	21ea      	movs	r1, #234	; 0xea
 800a754:	48a7      	ldr	r0, [pc, #668]	; (800a9f4 <_dtoa_r+0x2d4>)
 800a756:	f002 fc89 	bl	800d06c <__assert_func>
 800a75a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a75e:	6005      	str	r5, [r0, #0]
 800a760:	60c5      	str	r5, [r0, #12]
 800a762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	b151      	cbz	r1, 800a77e <_dtoa_r+0x5e>
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	604a      	str	r2, [r1, #4]
 800a76c:	2301      	movs	r3, #1
 800a76e:	4093      	lsls	r3, r2
 800a770:	608b      	str	r3, [r1, #8]
 800a772:	4620      	mov	r0, r4
 800a774:	f001 fbbc 	bl	800bef0 <_Bfree>
 800a778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	1e3b      	subs	r3, r7, #0
 800a780:	bfaa      	itet	ge
 800a782:	2300      	movge	r3, #0
 800a784:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a788:	f8c8 3000 	strge.w	r3, [r8]
 800a78c:	4b9a      	ldr	r3, [pc, #616]	; (800a9f8 <_dtoa_r+0x2d8>)
 800a78e:	bfbc      	itt	lt
 800a790:	2201      	movlt	r2, #1
 800a792:	f8c8 2000 	strlt.w	r2, [r8]
 800a796:	ea33 030b 	bics.w	r3, r3, fp
 800a79a:	d11b      	bne.n	800a7d4 <_dtoa_r+0xb4>
 800a79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a79e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a8:	4333      	orrs	r3, r6
 800a7aa:	f000 8592 	beq.w	800b2d2 <_dtoa_r+0xbb2>
 800a7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7b0:	b963      	cbnz	r3, 800a7cc <_dtoa_r+0xac>
 800a7b2:	4b92      	ldr	r3, [pc, #584]	; (800a9fc <_dtoa_r+0x2dc>)
 800a7b4:	e022      	b.n	800a7fc <_dtoa_r+0xdc>
 800a7b6:	4b92      	ldr	r3, [pc, #584]	; (800aa00 <_dtoa_r+0x2e0>)
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	9801      	ldr	r0, [sp, #4]
 800a7c2:	b013      	add	sp, #76	; 0x4c
 800a7c4:	ecbd 8b04 	vpop	{d8-d9}
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	4b8b      	ldr	r3, [pc, #556]	; (800a9fc <_dtoa_r+0x2dc>)
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	3303      	adds	r3, #3
 800a7d2:	e7f3      	b.n	800a7bc <_dtoa_r+0x9c>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4650      	mov	r0, sl
 800a7da:	4659      	mov	r1, fp
 800a7dc:	f7f6 f994 	bl	8000b08 <__aeabi_dcmpeq>
 800a7e0:	ec4b ab19 	vmov	d9, sl, fp
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	b158      	cbz	r0, 800a800 <_dtoa_r+0xe0>
 800a7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 856b 	beq.w	800b2cc <_dtoa_r+0xbac>
 800a7f6:	4883      	ldr	r0, [pc, #524]	; (800aa04 <_dtoa_r+0x2e4>)
 800a7f8:	6018      	str	r0, [r3, #0]
 800a7fa:	1e43      	subs	r3, r0, #1
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	e7df      	b.n	800a7c0 <_dtoa_r+0xa0>
 800a800:	ec4b ab10 	vmov	d0, sl, fp
 800a804:	aa10      	add	r2, sp, #64	; 0x40
 800a806:	a911      	add	r1, sp, #68	; 0x44
 800a808:	4620      	mov	r0, r4
 800a80a:	f001 ff1f 	bl	800c64c <__d2b>
 800a80e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a812:	ee08 0a10 	vmov	s16, r0
 800a816:	2d00      	cmp	r5, #0
 800a818:	f000 8084 	beq.w	800a924 <_dtoa_r+0x204>
 800a81c:	ee19 3a90 	vmov	r3, s19
 800a820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a824:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a828:	4656      	mov	r6, sl
 800a82a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a82e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a832:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a836:	4b74      	ldr	r3, [pc, #464]	; (800aa08 <_dtoa_r+0x2e8>)
 800a838:	2200      	movs	r2, #0
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f5 fd43 	bl	80002c8 <__aeabi_dsub>
 800a842:	a365      	add	r3, pc, #404	; (adr r3, 800a9d8 <_dtoa_r+0x2b8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fef6 	bl	8000638 <__aeabi_dmul>
 800a84c:	a364      	add	r3, pc, #400	; (adr r3, 800a9e0 <_dtoa_r+0x2c0>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 fd3b 	bl	80002cc <__adddf3>
 800a856:	4606      	mov	r6, r0
 800a858:	4628      	mov	r0, r5
 800a85a:	460f      	mov	r7, r1
 800a85c:	f7f5 fe82 	bl	8000564 <__aeabi_i2d>
 800a860:	a361      	add	r3, pc, #388	; (adr r3, 800a9e8 <_dtoa_r+0x2c8>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fee7 	bl	8000638 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fd2b 	bl	80002cc <__adddf3>
 800a876:	4606      	mov	r6, r0
 800a878:	460f      	mov	r7, r1
 800a87a:	f7f6 f98d 	bl	8000b98 <__aeabi_d2iz>
 800a87e:	2200      	movs	r2, #0
 800a880:	9000      	str	r0, [sp, #0]
 800a882:	2300      	movs	r3, #0
 800a884:	4630      	mov	r0, r6
 800a886:	4639      	mov	r1, r7
 800a888:	f7f6 f948 	bl	8000b1c <__aeabi_dcmplt>
 800a88c:	b150      	cbz	r0, 800a8a4 <_dtoa_r+0x184>
 800a88e:	9800      	ldr	r0, [sp, #0]
 800a890:	f7f5 fe68 	bl	8000564 <__aeabi_i2d>
 800a894:	4632      	mov	r2, r6
 800a896:	463b      	mov	r3, r7
 800a898:	f7f6 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800a89c:	b910      	cbnz	r0, 800a8a4 <_dtoa_r+0x184>
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	9b00      	ldr	r3, [sp, #0]
 800a8a6:	2b16      	cmp	r3, #22
 800a8a8:	d85a      	bhi.n	800a960 <_dtoa_r+0x240>
 800a8aa:	9a00      	ldr	r2, [sp, #0]
 800a8ac:	4b57      	ldr	r3, [pc, #348]	; (800aa0c <_dtoa_r+0x2ec>)
 800a8ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	ec51 0b19 	vmov	r0, r1, d9
 800a8ba:	f7f6 f92f 	bl	8000b1c <__aeabi_dcmplt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d050      	beq.n	800a964 <_dtoa_r+0x244>
 800a8c2:	9b00      	ldr	r3, [sp, #0]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ce:	1b5d      	subs	r5, r3, r5
 800a8d0:	1e6b      	subs	r3, r5, #1
 800a8d2:	9305      	str	r3, [sp, #20]
 800a8d4:	bf45      	ittet	mi
 800a8d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a8da:	9304      	strmi	r3, [sp, #16]
 800a8dc:	2300      	movpl	r3, #0
 800a8de:	2300      	movmi	r3, #0
 800a8e0:	bf4c      	ite	mi
 800a8e2:	9305      	strmi	r3, [sp, #20]
 800a8e4:	9304      	strpl	r3, [sp, #16]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	db3d      	blt.n	800a968 <_dtoa_r+0x248>
 800a8ec:	9b05      	ldr	r3, [sp, #20]
 800a8ee:	9a00      	ldr	r2, [sp, #0]
 800a8f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8f2:	4413      	add	r3, r2
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9307      	str	r3, [sp, #28]
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	f200 8089 	bhi.w	800aa14 <_dtoa_r+0x2f4>
 800a902:	2b05      	cmp	r3, #5
 800a904:	bfc4      	itt	gt
 800a906:	3b04      	subgt	r3, #4
 800a908:	9306      	strgt	r3, [sp, #24]
 800a90a:	9b06      	ldr	r3, [sp, #24]
 800a90c:	f1a3 0302 	sub.w	r3, r3, #2
 800a910:	bfcc      	ite	gt
 800a912:	2500      	movgt	r5, #0
 800a914:	2501      	movle	r5, #1
 800a916:	2b03      	cmp	r3, #3
 800a918:	f200 8087 	bhi.w	800aa2a <_dtoa_r+0x30a>
 800a91c:	e8df f003 	tbb	[pc, r3]
 800a920:	59383a2d 	.word	0x59383a2d
 800a924:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a928:	441d      	add	r5, r3
 800a92a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a92e:	2b20      	cmp	r3, #32
 800a930:	bfc1      	itttt	gt
 800a932:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a936:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a93a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a93e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a942:	bfda      	itte	le
 800a944:	f1c3 0320 	rsble	r3, r3, #32
 800a948:	fa06 f003 	lslle.w	r0, r6, r3
 800a94c:	4318      	orrgt	r0, r3
 800a94e:	f7f5 fdf9 	bl	8000544 <__aeabi_ui2d>
 800a952:	2301      	movs	r3, #1
 800a954:	4606      	mov	r6, r0
 800a956:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a95a:	3d01      	subs	r5, #1
 800a95c:	930e      	str	r3, [sp, #56]	; 0x38
 800a95e:	e76a      	b.n	800a836 <_dtoa_r+0x116>
 800a960:	2301      	movs	r3, #1
 800a962:	e7b2      	b.n	800a8ca <_dtoa_r+0x1aa>
 800a964:	900b      	str	r0, [sp, #44]	; 0x2c
 800a966:	e7b1      	b.n	800a8cc <_dtoa_r+0x1ac>
 800a968:	9b04      	ldr	r3, [sp, #16]
 800a96a:	9a00      	ldr	r2, [sp, #0]
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	4253      	negs	r3, r2
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	2300      	movs	r3, #0
 800a976:	930a      	str	r3, [sp, #40]	; 0x28
 800a978:	e7bf      	b.n	800a8fa <_dtoa_r+0x1da>
 800a97a:	2300      	movs	r3, #0
 800a97c:	9308      	str	r3, [sp, #32]
 800a97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc55      	bgt.n	800aa30 <_dtoa_r+0x310>
 800a984:	2301      	movs	r3, #1
 800a986:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a98a:	461a      	mov	r2, r3
 800a98c:	9209      	str	r2, [sp, #36]	; 0x24
 800a98e:	e00c      	b.n	800a9aa <_dtoa_r+0x28a>
 800a990:	2301      	movs	r3, #1
 800a992:	e7f3      	b.n	800a97c <_dtoa_r+0x25c>
 800a994:	2300      	movs	r3, #0
 800a996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a998:	9308      	str	r3, [sp, #32]
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	4413      	add	r3, r2
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	bfb8      	it	lt
 800a9a8:	2301      	movlt	r3, #1
 800a9aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	6042      	str	r2, [r0, #4]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	f102 0614 	add.w	r6, r2, #20
 800a9b6:	429e      	cmp	r6, r3
 800a9b8:	6841      	ldr	r1, [r0, #4]
 800a9ba:	d93d      	bls.n	800aa38 <_dtoa_r+0x318>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f001 fa57 	bl	800be70 <_Balloc>
 800a9c2:	9001      	str	r0, [sp, #4]
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d13b      	bne.n	800aa40 <_dtoa_r+0x320>
 800a9c8:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <_dtoa_r+0x2f0>)
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9d0:	e6c0      	b.n	800a754 <_dtoa_r+0x34>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e7df      	b.n	800a996 <_dtoa_r+0x276>
 800a9d6:	bf00      	nop
 800a9d8:	636f4361 	.word	0x636f4361
 800a9dc:	3fd287a7 	.word	0x3fd287a7
 800a9e0:	8b60c8b3 	.word	0x8b60c8b3
 800a9e4:	3fc68a28 	.word	0x3fc68a28
 800a9e8:	509f79fb 	.word	0x509f79fb
 800a9ec:	3fd34413 	.word	0x3fd34413
 800a9f0:	0800d9c6 	.word	0x0800d9c6
 800a9f4:	0800d9dd 	.word	0x0800d9dd
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	0800d9c2 	.word	0x0800d9c2
 800aa00:	0800d9b9 	.word	0x0800d9b9
 800aa04:	0800d839 	.word	0x0800d839
 800aa08:	3ff80000 	.word	0x3ff80000
 800aa0c:	0800dbb0 	.word	0x0800dbb0
 800aa10:	0800da38 	.word	0x0800da38
 800aa14:	2501      	movs	r5, #1
 800aa16:	2300      	movs	r3, #0
 800aa18:	9306      	str	r3, [sp, #24]
 800aa1a:	9508      	str	r5, [sp, #32]
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa24:	2200      	movs	r2, #0
 800aa26:	2312      	movs	r3, #18
 800aa28:	e7b0      	b.n	800a98c <_dtoa_r+0x26c>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	9308      	str	r3, [sp, #32]
 800aa2e:	e7f5      	b.n	800aa1c <_dtoa_r+0x2fc>
 800aa30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa36:	e7b8      	b.n	800a9aa <_dtoa_r+0x28a>
 800aa38:	3101      	adds	r1, #1
 800aa3a:	6041      	str	r1, [r0, #4]
 800aa3c:	0052      	lsls	r2, r2, #1
 800aa3e:	e7b8      	b.n	800a9b2 <_dtoa_r+0x292>
 800aa40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa42:	9a01      	ldr	r2, [sp, #4]
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	2b0e      	cmp	r3, #14
 800aa4a:	f200 809d 	bhi.w	800ab88 <_dtoa_r+0x468>
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	f000 809a 	beq.w	800ab88 <_dtoa_r+0x468>
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dd32      	ble.n	800aac0 <_dtoa_r+0x3a0>
 800aa5a:	4ab7      	ldr	r2, [pc, #732]	; (800ad38 <_dtoa_r+0x618>)
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	05d8      	lsls	r0, r3, #23
 800aa6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa70:	d516      	bpl.n	800aaa0 <_dtoa_r+0x380>
 800aa72:	4bb2      	ldr	r3, [pc, #712]	; (800ad3c <_dtoa_r+0x61c>)
 800aa74:	ec51 0b19 	vmov	r0, r1, d9
 800aa78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa7c:	f7f5 ff06 	bl	800088c <__aeabi_ddiv>
 800aa80:	f007 070f 	and.w	r7, r7, #15
 800aa84:	4682      	mov	sl, r0
 800aa86:	468b      	mov	fp, r1
 800aa88:	2503      	movs	r5, #3
 800aa8a:	4eac      	ldr	r6, [pc, #688]	; (800ad3c <_dtoa_r+0x61c>)
 800aa8c:	b957      	cbnz	r7, 800aaa4 <_dtoa_r+0x384>
 800aa8e:	4642      	mov	r2, r8
 800aa90:	464b      	mov	r3, r9
 800aa92:	4650      	mov	r0, sl
 800aa94:	4659      	mov	r1, fp
 800aa96:	f7f5 fef9 	bl	800088c <__aeabi_ddiv>
 800aa9a:	4682      	mov	sl, r0
 800aa9c:	468b      	mov	fp, r1
 800aa9e:	e028      	b.n	800aaf2 <_dtoa_r+0x3d2>
 800aaa0:	2502      	movs	r5, #2
 800aaa2:	e7f2      	b.n	800aa8a <_dtoa_r+0x36a>
 800aaa4:	07f9      	lsls	r1, r7, #31
 800aaa6:	d508      	bpl.n	800aaba <_dtoa_r+0x39a>
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	4649      	mov	r1, r9
 800aaac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aab0:	f7f5 fdc2 	bl	8000638 <__aeabi_dmul>
 800aab4:	3501      	adds	r5, #1
 800aab6:	4680      	mov	r8, r0
 800aab8:	4689      	mov	r9, r1
 800aaba:	107f      	asrs	r7, r7, #1
 800aabc:	3608      	adds	r6, #8
 800aabe:	e7e5      	b.n	800aa8c <_dtoa_r+0x36c>
 800aac0:	f000 809b 	beq.w	800abfa <_dtoa_r+0x4da>
 800aac4:	9b00      	ldr	r3, [sp, #0]
 800aac6:	4f9d      	ldr	r7, [pc, #628]	; (800ad3c <_dtoa_r+0x61c>)
 800aac8:	425e      	negs	r6, r3
 800aaca:	4b9b      	ldr	r3, [pc, #620]	; (800ad38 <_dtoa_r+0x618>)
 800aacc:	f006 020f 	and.w	r2, r6, #15
 800aad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	ec51 0b19 	vmov	r0, r1, d9
 800aadc:	f7f5 fdac 	bl	8000638 <__aeabi_dmul>
 800aae0:	1136      	asrs	r6, r6, #4
 800aae2:	4682      	mov	sl, r0
 800aae4:	468b      	mov	fp, r1
 800aae6:	2300      	movs	r3, #0
 800aae8:	2502      	movs	r5, #2
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d17a      	bne.n	800abe4 <_dtoa_r+0x4c4>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1d3      	bne.n	800aa9a <_dtoa_r+0x37a>
 800aaf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8082 	beq.w	800abfe <_dtoa_r+0x4de>
 800aafa:	4b91      	ldr	r3, [pc, #580]	; (800ad40 <_dtoa_r+0x620>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	4650      	mov	r0, sl
 800ab00:	4659      	mov	r1, fp
 800ab02:	f7f6 f80b 	bl	8000b1c <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d079      	beq.n	800abfe <_dtoa_r+0x4de>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d076      	beq.n	800abfe <_dtoa_r+0x4de>
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dd36      	ble.n	800ab84 <_dtoa_r+0x464>
 800ab16:	9b00      	ldr	r3, [sp, #0]
 800ab18:	4650      	mov	r0, sl
 800ab1a:	4659      	mov	r1, fp
 800ab1c:	1e5f      	subs	r7, r3, #1
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4b88      	ldr	r3, [pc, #544]	; (800ad44 <_dtoa_r+0x624>)
 800ab22:	f7f5 fd89 	bl	8000638 <__aeabi_dmul>
 800ab26:	9e02      	ldr	r6, [sp, #8]
 800ab28:	4682      	mov	sl, r0
 800ab2a:	468b      	mov	fp, r1
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f7f5 fd18 	bl	8000564 <__aeabi_i2d>
 800ab34:	4652      	mov	r2, sl
 800ab36:	465b      	mov	r3, fp
 800ab38:	f7f5 fd7e 	bl	8000638 <__aeabi_dmul>
 800ab3c:	4b82      	ldr	r3, [pc, #520]	; (800ad48 <_dtoa_r+0x628>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f7f5 fbc4 	bl	80002cc <__adddf3>
 800ab44:	46d0      	mov	r8, sl
 800ab46:	46d9      	mov	r9, fp
 800ab48:	4682      	mov	sl, r0
 800ab4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ab4e:	2e00      	cmp	r6, #0
 800ab50:	d158      	bne.n	800ac04 <_dtoa_r+0x4e4>
 800ab52:	4b7e      	ldr	r3, [pc, #504]	; (800ad4c <_dtoa_r+0x62c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	4640      	mov	r0, r8
 800ab58:	4649      	mov	r1, r9
 800ab5a:	f7f5 fbb5 	bl	80002c8 <__aeabi_dsub>
 800ab5e:	4652      	mov	r2, sl
 800ab60:	465b      	mov	r3, fp
 800ab62:	4680      	mov	r8, r0
 800ab64:	4689      	mov	r9, r1
 800ab66:	f7f5 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	f040 8295 	bne.w	800b09a <_dtoa_r+0x97a>
 800ab70:	4652      	mov	r2, sl
 800ab72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	f7f5 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8289 	bne.w	800b096 <_dtoa_r+0x976>
 800ab84:	ec5b ab19 	vmov	sl, fp, d9
 800ab88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f2c0 8148 	blt.w	800ae20 <_dtoa_r+0x700>
 800ab90:	9a00      	ldr	r2, [sp, #0]
 800ab92:	2a0e      	cmp	r2, #14
 800ab94:	f300 8144 	bgt.w	800ae20 <_dtoa_r+0x700>
 800ab98:	4b67      	ldr	r3, [pc, #412]	; (800ad38 <_dtoa_r+0x618>)
 800ab9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f280 80d5 	bge.w	800ad54 <_dtoa_r+0x634>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f300 80d1 	bgt.w	800ad54 <_dtoa_r+0x634>
 800abb2:	f040 826f 	bne.w	800b094 <_dtoa_r+0x974>
 800abb6:	4b65      	ldr	r3, [pc, #404]	; (800ad4c <_dtoa_r+0x62c>)
 800abb8:	2200      	movs	r2, #0
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 fd3b 	bl	8000638 <__aeabi_dmul>
 800abc2:	4652      	mov	r2, sl
 800abc4:	465b      	mov	r3, fp
 800abc6:	f7f5 ffbd 	bl	8000b44 <__aeabi_dcmpge>
 800abca:	9e03      	ldr	r6, [sp, #12]
 800abcc:	4637      	mov	r7, r6
 800abce:	2800      	cmp	r0, #0
 800abd0:	f040 8245 	bne.w	800b05e <_dtoa_r+0x93e>
 800abd4:	9d01      	ldr	r5, [sp, #4]
 800abd6:	2331      	movs	r3, #49	; 0x31
 800abd8:	f805 3b01 	strb.w	r3, [r5], #1
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	3301      	adds	r3, #1
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	e240      	b.n	800b066 <_dtoa_r+0x946>
 800abe4:	07f2      	lsls	r2, r6, #31
 800abe6:	d505      	bpl.n	800abf4 <_dtoa_r+0x4d4>
 800abe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abec:	f7f5 fd24 	bl	8000638 <__aeabi_dmul>
 800abf0:	3501      	adds	r5, #1
 800abf2:	2301      	movs	r3, #1
 800abf4:	1076      	asrs	r6, r6, #1
 800abf6:	3708      	adds	r7, #8
 800abf8:	e777      	b.n	800aaea <_dtoa_r+0x3ca>
 800abfa:	2502      	movs	r5, #2
 800abfc:	e779      	b.n	800aaf2 <_dtoa_r+0x3d2>
 800abfe:	9f00      	ldr	r7, [sp, #0]
 800ac00:	9e03      	ldr	r6, [sp, #12]
 800ac02:	e794      	b.n	800ab2e <_dtoa_r+0x40e>
 800ac04:	9901      	ldr	r1, [sp, #4]
 800ac06:	4b4c      	ldr	r3, [pc, #304]	; (800ad38 <_dtoa_r+0x618>)
 800ac08:	4431      	add	r1, r6
 800ac0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ac0c:	9908      	ldr	r1, [sp, #32]
 800ac0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac16:	2900      	cmp	r1, #0
 800ac18:	d043      	beq.n	800aca2 <_dtoa_r+0x582>
 800ac1a:	494d      	ldr	r1, [pc, #308]	; (800ad50 <_dtoa_r+0x630>)
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f7f5 fe35 	bl	800088c <__aeabi_ddiv>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	f7f5 fb4f 	bl	80002c8 <__aeabi_dsub>
 800ac2a:	9d01      	ldr	r5, [sp, #4]
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	468b      	mov	fp, r1
 800ac30:	4649      	mov	r1, r9
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7f5 ffb0 	bl	8000b98 <__aeabi_d2iz>
 800ac38:	4606      	mov	r6, r0
 800ac3a:	f7f5 fc93 	bl	8000564 <__aeabi_i2d>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	f7f5 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ac4a:	3630      	adds	r6, #48	; 0x30
 800ac4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac50:	4652      	mov	r2, sl
 800ac52:	465b      	mov	r3, fp
 800ac54:	4680      	mov	r8, r0
 800ac56:	4689      	mov	r9, r1
 800ac58:	f7f5 ff60 	bl	8000b1c <__aeabi_dcmplt>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d163      	bne.n	800ad28 <_dtoa_r+0x608>
 800ac60:	4642      	mov	r2, r8
 800ac62:	464b      	mov	r3, r9
 800ac64:	4936      	ldr	r1, [pc, #216]	; (800ad40 <_dtoa_r+0x620>)
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7f5 fb2e 	bl	80002c8 <__aeabi_dsub>
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	465b      	mov	r3, fp
 800ac70:	f7f5 ff54 	bl	8000b1c <__aeabi_dcmplt>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f040 80b5 	bne.w	800ade4 <_dtoa_r+0x6c4>
 800ac7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	d081      	beq.n	800ab84 <_dtoa_r+0x464>
 800ac80:	4b30      	ldr	r3, [pc, #192]	; (800ad44 <_dtoa_r+0x624>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	4650      	mov	r0, sl
 800ac86:	4659      	mov	r1, fp
 800ac88:	f7f5 fcd6 	bl	8000638 <__aeabi_dmul>
 800ac8c:	4b2d      	ldr	r3, [pc, #180]	; (800ad44 <_dtoa_r+0x624>)
 800ac8e:	4682      	mov	sl, r0
 800ac90:	468b      	mov	fp, r1
 800ac92:	4640      	mov	r0, r8
 800ac94:	4649      	mov	r1, r9
 800ac96:	2200      	movs	r2, #0
 800ac98:	f7f5 fcce 	bl	8000638 <__aeabi_dmul>
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	4689      	mov	r9, r1
 800aca0:	e7c6      	b.n	800ac30 <_dtoa_r+0x510>
 800aca2:	4650      	mov	r0, sl
 800aca4:	4659      	mov	r1, fp
 800aca6:	f7f5 fcc7 	bl	8000638 <__aeabi_dmul>
 800acaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acac:	9d01      	ldr	r5, [sp, #4]
 800acae:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb0:	4682      	mov	sl, r0
 800acb2:	468b      	mov	fp, r1
 800acb4:	4649      	mov	r1, r9
 800acb6:	4640      	mov	r0, r8
 800acb8:	f7f5 ff6e 	bl	8000b98 <__aeabi_d2iz>
 800acbc:	4606      	mov	r6, r0
 800acbe:	f7f5 fc51 	bl	8000564 <__aeabi_i2d>
 800acc2:	3630      	adds	r6, #48	; 0x30
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 fafc 	bl	80002c8 <__aeabi_dsub>
 800acd0:	f805 6b01 	strb.w	r6, [r5], #1
 800acd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acd6:	429d      	cmp	r5, r3
 800acd8:	4680      	mov	r8, r0
 800acda:	4689      	mov	r9, r1
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	d124      	bne.n	800ad2c <_dtoa_r+0x60c>
 800ace2:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <_dtoa_r+0x630>)
 800ace4:	4650      	mov	r0, sl
 800ace6:	4659      	mov	r1, fp
 800ace8:	f7f5 faf0 	bl	80002cc <__adddf3>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 ff30 	bl	8000b58 <__aeabi_dcmpgt>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d173      	bne.n	800ade4 <_dtoa_r+0x6c4>
 800acfc:	4652      	mov	r2, sl
 800acfe:	465b      	mov	r3, fp
 800ad00:	4913      	ldr	r1, [pc, #76]	; (800ad50 <_dtoa_r+0x630>)
 800ad02:	2000      	movs	r0, #0
 800ad04:	f7f5 fae0 	bl	80002c8 <__aeabi_dsub>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 ff04 	bl	8000b1c <__aeabi_dcmplt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f af35 	beq.w	800ab84 <_dtoa_r+0x464>
 800ad1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad1c:	1e6b      	subs	r3, r5, #1
 800ad1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad24:	2b30      	cmp	r3, #48	; 0x30
 800ad26:	d0f8      	beq.n	800ad1a <_dtoa_r+0x5fa>
 800ad28:	9700      	str	r7, [sp, #0]
 800ad2a:	e049      	b.n	800adc0 <_dtoa_r+0x6a0>
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <_dtoa_r+0x624>)
 800ad2e:	f7f5 fc83 	bl	8000638 <__aeabi_dmul>
 800ad32:	4680      	mov	r8, r0
 800ad34:	4689      	mov	r9, r1
 800ad36:	e7bd      	b.n	800acb4 <_dtoa_r+0x594>
 800ad38:	0800dbb0 	.word	0x0800dbb0
 800ad3c:	0800db88 	.word	0x0800db88
 800ad40:	3ff00000 	.word	0x3ff00000
 800ad44:	40240000 	.word	0x40240000
 800ad48:	401c0000 	.word	0x401c0000
 800ad4c:	40140000 	.word	0x40140000
 800ad50:	3fe00000 	.word	0x3fe00000
 800ad54:	9d01      	ldr	r5, [sp, #4]
 800ad56:	4656      	mov	r6, sl
 800ad58:	465f      	mov	r7, fp
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 fd93 	bl	800088c <__aeabi_ddiv>
 800ad66:	f7f5 ff17 	bl	8000b98 <__aeabi_d2iz>
 800ad6a:	4682      	mov	sl, r0
 800ad6c:	f7f5 fbfa 	bl	8000564 <__aeabi_i2d>
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	f7f5 fc60 	bl	8000638 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	4639      	mov	r1, r7
 800ad80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad84:	f7f5 faa0 	bl	80002c8 <__aeabi_dsub>
 800ad88:	f805 6b01 	strb.w	r6, [r5], #1
 800ad8c:	9e01      	ldr	r6, [sp, #4]
 800ad8e:	9f03      	ldr	r7, [sp, #12]
 800ad90:	1bae      	subs	r6, r5, r6
 800ad92:	42b7      	cmp	r7, r6
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	d135      	bne.n	800ae06 <_dtoa_r+0x6e6>
 800ad9a:	f7f5 fa97 	bl	80002cc <__adddf3>
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	f7f5 fed7 	bl	8000b58 <__aeabi_dcmpgt>
 800adaa:	b9d0      	cbnz	r0, 800ade2 <_dtoa_r+0x6c2>
 800adac:	4642      	mov	r2, r8
 800adae:	464b      	mov	r3, r9
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 fea8 	bl	8000b08 <__aeabi_dcmpeq>
 800adb8:	b110      	cbz	r0, 800adc0 <_dtoa_r+0x6a0>
 800adba:	f01a 0f01 	tst.w	sl, #1
 800adbe:	d110      	bne.n	800ade2 <_dtoa_r+0x6c2>
 800adc0:	4620      	mov	r0, r4
 800adc2:	ee18 1a10 	vmov	r1, s16
 800adc6:	f001 f893 	bl	800bef0 <_Bfree>
 800adca:	2300      	movs	r3, #0
 800adcc:	9800      	ldr	r0, [sp, #0]
 800adce:	702b      	strb	r3, [r5, #0]
 800add0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800add2:	3001      	adds	r0, #1
 800add4:	6018      	str	r0, [r3, #0]
 800add6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add8:	2b00      	cmp	r3, #0
 800adda:	f43f acf1 	beq.w	800a7c0 <_dtoa_r+0xa0>
 800adde:	601d      	str	r5, [r3, #0]
 800ade0:	e4ee      	b.n	800a7c0 <_dtoa_r+0xa0>
 800ade2:	9f00      	ldr	r7, [sp, #0]
 800ade4:	462b      	mov	r3, r5
 800ade6:	461d      	mov	r5, r3
 800ade8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adec:	2a39      	cmp	r2, #57	; 0x39
 800adee:	d106      	bne.n	800adfe <_dtoa_r+0x6de>
 800adf0:	9a01      	ldr	r2, [sp, #4]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d1f7      	bne.n	800ade6 <_dtoa_r+0x6c6>
 800adf6:	9901      	ldr	r1, [sp, #4]
 800adf8:	2230      	movs	r2, #48	; 0x30
 800adfa:	3701      	adds	r7, #1
 800adfc:	700a      	strb	r2, [r1, #0]
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	3201      	adds	r2, #1
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	e790      	b.n	800ad28 <_dtoa_r+0x608>
 800ae06:	4ba6      	ldr	r3, [pc, #664]	; (800b0a0 <_dtoa_r+0x980>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f7f5 fc15 	bl	8000638 <__aeabi_dmul>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	4606      	mov	r6, r0
 800ae14:	460f      	mov	r7, r1
 800ae16:	f7f5 fe77 	bl	8000b08 <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d09d      	beq.n	800ad5a <_dtoa_r+0x63a>
 800ae1e:	e7cf      	b.n	800adc0 <_dtoa_r+0x6a0>
 800ae20:	9a08      	ldr	r2, [sp, #32]
 800ae22:	2a00      	cmp	r2, #0
 800ae24:	f000 80d7 	beq.w	800afd6 <_dtoa_r+0x8b6>
 800ae28:	9a06      	ldr	r2, [sp, #24]
 800ae2a:	2a01      	cmp	r2, #1
 800ae2c:	f300 80ba 	bgt.w	800afa4 <_dtoa_r+0x884>
 800ae30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	f000 80b2 	beq.w	800af9c <_dtoa_r+0x87c>
 800ae38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae3c:	9e07      	ldr	r6, [sp, #28]
 800ae3e:	9d04      	ldr	r5, [sp, #16]
 800ae40:	9a04      	ldr	r2, [sp, #16]
 800ae42:	441a      	add	r2, r3
 800ae44:	9204      	str	r2, [sp, #16]
 800ae46:	9a05      	ldr	r2, [sp, #20]
 800ae48:	2101      	movs	r1, #1
 800ae4a:	441a      	add	r2, r3
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	9205      	str	r2, [sp, #20]
 800ae50:	f001 f950 	bl	800c0f4 <__i2b>
 800ae54:	4607      	mov	r7, r0
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	dd0c      	ble.n	800ae74 <_dtoa_r+0x754>
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd09      	ble.n	800ae74 <_dtoa_r+0x754>
 800ae60:	42ab      	cmp	r3, r5
 800ae62:	9a04      	ldr	r2, [sp, #16]
 800ae64:	bfa8      	it	ge
 800ae66:	462b      	movge	r3, r5
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	9204      	str	r2, [sp, #16]
 800ae6c:	9a05      	ldr	r2, [sp, #20]
 800ae6e:	1aed      	subs	r5, r5, r3
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	b31b      	cbz	r3, 800aec0 <_dtoa_r+0x7a0>
 800ae78:	9b08      	ldr	r3, [sp, #32]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f000 80af 	beq.w	800afde <_dtoa_r+0x8be>
 800ae80:	2e00      	cmp	r6, #0
 800ae82:	dd13      	ble.n	800aeac <_dtoa_r+0x78c>
 800ae84:	4639      	mov	r1, r7
 800ae86:	4632      	mov	r2, r6
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f001 f9f3 	bl	800c274 <__pow5mult>
 800ae8e:	ee18 2a10 	vmov	r2, s16
 800ae92:	4601      	mov	r1, r0
 800ae94:	4607      	mov	r7, r0
 800ae96:	4620      	mov	r0, r4
 800ae98:	f001 f942 	bl	800c120 <__multiply>
 800ae9c:	ee18 1a10 	vmov	r1, s16
 800aea0:	4680      	mov	r8, r0
 800aea2:	4620      	mov	r0, r4
 800aea4:	f001 f824 	bl	800bef0 <_Bfree>
 800aea8:	ee08 8a10 	vmov	s16, r8
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	1b9a      	subs	r2, r3, r6
 800aeb0:	d006      	beq.n	800aec0 <_dtoa_r+0x7a0>
 800aeb2:	ee18 1a10 	vmov	r1, s16
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f001 f9dc 	bl	800c274 <__pow5mult>
 800aebc:	ee08 0a10 	vmov	s16, r0
 800aec0:	2101      	movs	r1, #1
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 f916 	bl	800c0f4 <__i2b>
 800aec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	4606      	mov	r6, r0
 800aece:	f340 8088 	ble.w	800afe2 <_dtoa_r+0x8c2>
 800aed2:	461a      	mov	r2, r3
 800aed4:	4601      	mov	r1, r0
 800aed6:	4620      	mov	r0, r4
 800aed8:	f001 f9cc 	bl	800c274 <__pow5mult>
 800aedc:	9b06      	ldr	r3, [sp, #24]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	4606      	mov	r6, r0
 800aee2:	f340 8081 	ble.w	800afe8 <_dtoa_r+0x8c8>
 800aee6:	f04f 0800 	mov.w	r8, #0
 800aeea:	6933      	ldr	r3, [r6, #16]
 800aeec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aef0:	6918      	ldr	r0, [r3, #16]
 800aef2:	f001 f8af 	bl	800c054 <__hi0bits>
 800aef6:	f1c0 0020 	rsb	r0, r0, #32
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	4418      	add	r0, r3
 800aefe:	f010 001f 	ands.w	r0, r0, #31
 800af02:	f000 8092 	beq.w	800b02a <_dtoa_r+0x90a>
 800af06:	f1c0 0320 	rsb	r3, r0, #32
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	f340 808a 	ble.w	800b024 <_dtoa_r+0x904>
 800af10:	f1c0 001c 	rsb	r0, r0, #28
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	4403      	add	r3, r0
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	9b05      	ldr	r3, [sp, #20]
 800af1c:	4403      	add	r3, r0
 800af1e:	4405      	add	r5, r0
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	9b04      	ldr	r3, [sp, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd07      	ble.n	800af38 <_dtoa_r+0x818>
 800af28:	ee18 1a10 	vmov	r1, s16
 800af2c:	461a      	mov	r2, r3
 800af2e:	4620      	mov	r0, r4
 800af30:	f001 f9fa 	bl	800c328 <__lshift>
 800af34:	ee08 0a10 	vmov	s16, r0
 800af38:	9b05      	ldr	r3, [sp, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd05      	ble.n	800af4a <_dtoa_r+0x82a>
 800af3e:	4631      	mov	r1, r6
 800af40:	461a      	mov	r2, r3
 800af42:	4620      	mov	r0, r4
 800af44:	f001 f9f0 	bl	800c328 <__lshift>
 800af48:	4606      	mov	r6, r0
 800af4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d06e      	beq.n	800b02e <_dtoa_r+0x90e>
 800af50:	ee18 0a10 	vmov	r0, s16
 800af54:	4631      	mov	r1, r6
 800af56:	f001 fa57 	bl	800c408 <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	da67      	bge.n	800b02e <_dtoa_r+0x90e>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	3b01      	subs	r3, #1
 800af62:	ee18 1a10 	vmov	r1, s16
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	220a      	movs	r2, #10
 800af6a:	2300      	movs	r3, #0
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 ffe1 	bl	800bf34 <__multadd>
 800af72:	9b08      	ldr	r3, [sp, #32]
 800af74:	ee08 0a10 	vmov	s16, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 81b1 	beq.w	800b2e0 <_dtoa_r+0xbc0>
 800af7e:	2300      	movs	r3, #0
 800af80:	4639      	mov	r1, r7
 800af82:	220a      	movs	r2, #10
 800af84:	4620      	mov	r0, r4
 800af86:	f000 ffd5 	bl	800bf34 <__multadd>
 800af8a:	9b02      	ldr	r3, [sp, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	4607      	mov	r7, r0
 800af90:	f300 808e 	bgt.w	800b0b0 <_dtoa_r+0x990>
 800af94:	9b06      	ldr	r3, [sp, #24]
 800af96:	2b02      	cmp	r3, #2
 800af98:	dc51      	bgt.n	800b03e <_dtoa_r+0x91e>
 800af9a:	e089      	b.n	800b0b0 <_dtoa_r+0x990>
 800af9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afa2:	e74b      	b.n	800ae3c <_dtoa_r+0x71c>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	1e5e      	subs	r6, r3, #1
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	42b3      	cmp	r3, r6
 800afac:	bfbf      	itttt	lt
 800afae:	9b07      	ldrlt	r3, [sp, #28]
 800afb0:	9607      	strlt	r6, [sp, #28]
 800afb2:	1af2      	sublt	r2, r6, r3
 800afb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afb6:	bfb6      	itet	lt
 800afb8:	189b      	addlt	r3, r3, r2
 800afba:	1b9e      	subge	r6, r3, r6
 800afbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	bfb8      	it	lt
 800afc2:	2600      	movlt	r6, #0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfb7      	itett	lt
 800afc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800afcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800afd0:	1a9d      	sublt	r5, r3, r2
 800afd2:	2300      	movlt	r3, #0
 800afd4:	e734      	b.n	800ae40 <_dtoa_r+0x720>
 800afd6:	9e07      	ldr	r6, [sp, #28]
 800afd8:	9d04      	ldr	r5, [sp, #16]
 800afda:	9f08      	ldr	r7, [sp, #32]
 800afdc:	e73b      	b.n	800ae56 <_dtoa_r+0x736>
 800afde:	9a07      	ldr	r2, [sp, #28]
 800afe0:	e767      	b.n	800aeb2 <_dtoa_r+0x792>
 800afe2:	9b06      	ldr	r3, [sp, #24]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	dc18      	bgt.n	800b01a <_dtoa_r+0x8fa>
 800afe8:	f1ba 0f00 	cmp.w	sl, #0
 800afec:	d115      	bne.n	800b01a <_dtoa_r+0x8fa>
 800afee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aff2:	b993      	cbnz	r3, 800b01a <_dtoa_r+0x8fa>
 800aff4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aff8:	0d1b      	lsrs	r3, r3, #20
 800affa:	051b      	lsls	r3, r3, #20
 800affc:	b183      	cbz	r3, 800b020 <_dtoa_r+0x900>
 800affe:	9b04      	ldr	r3, [sp, #16]
 800b000:	3301      	adds	r3, #1
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	9b05      	ldr	r3, [sp, #20]
 800b006:	3301      	adds	r3, #1
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	f04f 0801 	mov.w	r8, #1
 800b00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b010:	2b00      	cmp	r3, #0
 800b012:	f47f af6a 	bne.w	800aeea <_dtoa_r+0x7ca>
 800b016:	2001      	movs	r0, #1
 800b018:	e76f      	b.n	800aefa <_dtoa_r+0x7da>
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	e7f6      	b.n	800b00e <_dtoa_r+0x8ee>
 800b020:	4698      	mov	r8, r3
 800b022:	e7f4      	b.n	800b00e <_dtoa_r+0x8ee>
 800b024:	f43f af7d 	beq.w	800af22 <_dtoa_r+0x802>
 800b028:	4618      	mov	r0, r3
 800b02a:	301c      	adds	r0, #28
 800b02c:	e772      	b.n	800af14 <_dtoa_r+0x7f4>
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	dc37      	bgt.n	800b0a4 <_dtoa_r+0x984>
 800b034:	9b06      	ldr	r3, [sp, #24]
 800b036:	2b02      	cmp	r3, #2
 800b038:	dd34      	ble.n	800b0a4 <_dtoa_r+0x984>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	9302      	str	r3, [sp, #8]
 800b03e:	9b02      	ldr	r3, [sp, #8]
 800b040:	b96b      	cbnz	r3, 800b05e <_dtoa_r+0x93e>
 800b042:	4631      	mov	r1, r6
 800b044:	2205      	movs	r2, #5
 800b046:	4620      	mov	r0, r4
 800b048:	f000 ff74 	bl	800bf34 <__multadd>
 800b04c:	4601      	mov	r1, r0
 800b04e:	4606      	mov	r6, r0
 800b050:	ee18 0a10 	vmov	r0, s16
 800b054:	f001 f9d8 	bl	800c408 <__mcmp>
 800b058:	2800      	cmp	r0, #0
 800b05a:	f73f adbb 	bgt.w	800abd4 <_dtoa_r+0x4b4>
 800b05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b060:	9d01      	ldr	r5, [sp, #4]
 800b062:	43db      	mvns	r3, r3
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	4631      	mov	r1, r6
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 ff3f 	bl	800bef0 <_Bfree>
 800b072:	2f00      	cmp	r7, #0
 800b074:	f43f aea4 	beq.w	800adc0 <_dtoa_r+0x6a0>
 800b078:	f1b8 0f00 	cmp.w	r8, #0
 800b07c:	d005      	beq.n	800b08a <_dtoa_r+0x96a>
 800b07e:	45b8      	cmp	r8, r7
 800b080:	d003      	beq.n	800b08a <_dtoa_r+0x96a>
 800b082:	4641      	mov	r1, r8
 800b084:	4620      	mov	r0, r4
 800b086:	f000 ff33 	bl	800bef0 <_Bfree>
 800b08a:	4639      	mov	r1, r7
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 ff2f 	bl	800bef0 <_Bfree>
 800b092:	e695      	b.n	800adc0 <_dtoa_r+0x6a0>
 800b094:	2600      	movs	r6, #0
 800b096:	4637      	mov	r7, r6
 800b098:	e7e1      	b.n	800b05e <_dtoa_r+0x93e>
 800b09a:	9700      	str	r7, [sp, #0]
 800b09c:	4637      	mov	r7, r6
 800b09e:	e599      	b.n	800abd4 <_dtoa_r+0x4b4>
 800b0a0:	40240000 	.word	0x40240000
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 80ca 	beq.w	800b240 <_dtoa_r+0xb20>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	9302      	str	r3, [sp, #8]
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	dd05      	ble.n	800b0c0 <_dtoa_r+0x9a0>
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f001 f935 	bl	800c328 <__lshift>
 800b0be:	4607      	mov	r7, r0
 800b0c0:	f1b8 0f00 	cmp.w	r8, #0
 800b0c4:	d05b      	beq.n	800b17e <_dtoa_r+0xa5e>
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fed1 	bl	800be70 <_Balloc>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <_dtoa_r+0x9be>
 800b0d2:	4b87      	ldr	r3, [pc, #540]	; (800b2f0 <_dtoa_r+0xbd0>)
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0da:	f7ff bb3b 	b.w	800a754 <_dtoa_r+0x34>
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	3202      	adds	r2, #2
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	f107 010c 	add.w	r1, r7, #12
 800b0e8:	300c      	adds	r0, #12
 800b0ea:	f000 feb3 	bl	800be54 <memcpy>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f001 f918 	bl	800c328 <__lshift>
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	f103 0901 	add.w	r9, r3, #1
 800b0fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b102:	4413      	add	r3, r2
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	f00a 0301 	and.w	r3, sl, #1
 800b10a:	46b8      	mov	r8, r7
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	4607      	mov	r7, r0
 800b110:	4631      	mov	r1, r6
 800b112:	ee18 0a10 	vmov	r0, s16
 800b116:	f7ff fa77 	bl	800a608 <quorem>
 800b11a:	4641      	mov	r1, r8
 800b11c:	9002      	str	r0, [sp, #8]
 800b11e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b122:	ee18 0a10 	vmov	r0, s16
 800b126:	f001 f96f 	bl	800c408 <__mcmp>
 800b12a:	463a      	mov	r2, r7
 800b12c:	9003      	str	r0, [sp, #12]
 800b12e:	4631      	mov	r1, r6
 800b130:	4620      	mov	r0, r4
 800b132:	f001 f985 	bl	800c440 <__mdiff>
 800b136:	68c2      	ldr	r2, [r0, #12]
 800b138:	f109 3bff 	add.w	fp, r9, #4294967295
 800b13c:	4605      	mov	r5, r0
 800b13e:	bb02      	cbnz	r2, 800b182 <_dtoa_r+0xa62>
 800b140:	4601      	mov	r1, r0
 800b142:	ee18 0a10 	vmov	r0, s16
 800b146:	f001 f95f 	bl	800c408 <__mcmp>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4629      	mov	r1, r5
 800b14e:	4620      	mov	r0, r4
 800b150:	9207      	str	r2, [sp, #28]
 800b152:	f000 fecd 	bl	800bef0 <_Bfree>
 800b156:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b15a:	ea43 0102 	orr.w	r1, r3, r2
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	430b      	orrs	r3, r1
 800b162:	464d      	mov	r5, r9
 800b164:	d10f      	bne.n	800b186 <_dtoa_r+0xa66>
 800b166:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b16a:	d02a      	beq.n	800b1c2 <_dtoa_r+0xaa2>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dd02      	ble.n	800b178 <_dtoa_r+0xa58>
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b178:	f88b a000 	strb.w	sl, [fp]
 800b17c:	e775      	b.n	800b06a <_dtoa_r+0x94a>
 800b17e:	4638      	mov	r0, r7
 800b180:	e7ba      	b.n	800b0f8 <_dtoa_r+0x9d8>
 800b182:	2201      	movs	r2, #1
 800b184:	e7e2      	b.n	800b14c <_dtoa_r+0xa2c>
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	db04      	blt.n	800b196 <_dtoa_r+0xa76>
 800b18c:	9906      	ldr	r1, [sp, #24]
 800b18e:	430b      	orrs	r3, r1
 800b190:	9904      	ldr	r1, [sp, #16]
 800b192:	430b      	orrs	r3, r1
 800b194:	d122      	bne.n	800b1dc <_dtoa_r+0xabc>
 800b196:	2a00      	cmp	r2, #0
 800b198:	ddee      	ble.n	800b178 <_dtoa_r+0xa58>
 800b19a:	ee18 1a10 	vmov	r1, s16
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 f8c1 	bl	800c328 <__lshift>
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	ee08 0a10 	vmov	s16, r0
 800b1ac:	f001 f92c 	bl	800c408 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	dc03      	bgt.n	800b1bc <_dtoa_r+0xa9c>
 800b1b4:	d1e0      	bne.n	800b178 <_dtoa_r+0xa58>
 800b1b6:	f01a 0f01 	tst.w	sl, #1
 800b1ba:	d0dd      	beq.n	800b178 <_dtoa_r+0xa58>
 800b1bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1c0:	d1d7      	bne.n	800b172 <_dtoa_r+0xa52>
 800b1c2:	2339      	movs	r3, #57	; 0x39
 800b1c4:	f88b 3000 	strb.w	r3, [fp]
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	461d      	mov	r5, r3
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1d2:	2a39      	cmp	r2, #57	; 0x39
 800b1d4:	d071      	beq.n	800b2ba <_dtoa_r+0xb9a>
 800b1d6:	3201      	adds	r2, #1
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	e746      	b.n	800b06a <_dtoa_r+0x94a>
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	dd07      	ble.n	800b1f0 <_dtoa_r+0xad0>
 800b1e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1e4:	d0ed      	beq.n	800b1c2 <_dtoa_r+0xaa2>
 800b1e6:	f10a 0301 	add.w	r3, sl, #1
 800b1ea:	f88b 3000 	strb.w	r3, [fp]
 800b1ee:	e73c      	b.n	800b06a <_dtoa_r+0x94a>
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b1f6:	4599      	cmp	r9, r3
 800b1f8:	d047      	beq.n	800b28a <_dtoa_r+0xb6a>
 800b1fa:	ee18 1a10 	vmov	r1, s16
 800b1fe:	2300      	movs	r3, #0
 800b200:	220a      	movs	r2, #10
 800b202:	4620      	mov	r0, r4
 800b204:	f000 fe96 	bl	800bf34 <__multadd>
 800b208:	45b8      	cmp	r8, r7
 800b20a:	ee08 0a10 	vmov	s16, r0
 800b20e:	f04f 0300 	mov.w	r3, #0
 800b212:	f04f 020a 	mov.w	r2, #10
 800b216:	4641      	mov	r1, r8
 800b218:	4620      	mov	r0, r4
 800b21a:	d106      	bne.n	800b22a <_dtoa_r+0xb0a>
 800b21c:	f000 fe8a 	bl	800bf34 <__multadd>
 800b220:	4680      	mov	r8, r0
 800b222:	4607      	mov	r7, r0
 800b224:	f109 0901 	add.w	r9, r9, #1
 800b228:	e772      	b.n	800b110 <_dtoa_r+0x9f0>
 800b22a:	f000 fe83 	bl	800bf34 <__multadd>
 800b22e:	4639      	mov	r1, r7
 800b230:	4680      	mov	r8, r0
 800b232:	2300      	movs	r3, #0
 800b234:	220a      	movs	r2, #10
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fe7c 	bl	800bf34 <__multadd>
 800b23c:	4607      	mov	r7, r0
 800b23e:	e7f1      	b.n	800b224 <_dtoa_r+0xb04>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	9d01      	ldr	r5, [sp, #4]
 800b246:	ee18 0a10 	vmov	r0, s16
 800b24a:	4631      	mov	r1, r6
 800b24c:	f7ff f9dc 	bl	800a608 <quorem>
 800b250:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	f805 ab01 	strb.w	sl, [r5], #1
 800b25a:	1aea      	subs	r2, r5, r3
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	4293      	cmp	r3, r2
 800b260:	dd09      	ble.n	800b276 <_dtoa_r+0xb56>
 800b262:	ee18 1a10 	vmov	r1, s16
 800b266:	2300      	movs	r3, #0
 800b268:	220a      	movs	r2, #10
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fe62 	bl	800bf34 <__multadd>
 800b270:	ee08 0a10 	vmov	s16, r0
 800b274:	e7e7      	b.n	800b246 <_dtoa_r+0xb26>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bfc8      	it	gt
 800b27c:	461d      	movgt	r5, r3
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	bfd8      	it	le
 800b282:	2501      	movle	r5, #1
 800b284:	441d      	add	r5, r3
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	ee18 1a10 	vmov	r1, s16
 800b28e:	2201      	movs	r2, #1
 800b290:	4620      	mov	r0, r4
 800b292:	f001 f849 	bl	800c328 <__lshift>
 800b296:	4631      	mov	r1, r6
 800b298:	ee08 0a10 	vmov	s16, r0
 800b29c:	f001 f8b4 	bl	800c408 <__mcmp>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	dc91      	bgt.n	800b1c8 <_dtoa_r+0xaa8>
 800b2a4:	d102      	bne.n	800b2ac <_dtoa_r+0xb8c>
 800b2a6:	f01a 0f01 	tst.w	sl, #1
 800b2aa:	d18d      	bne.n	800b1c8 <_dtoa_r+0xaa8>
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2b4:	2a30      	cmp	r2, #48	; 0x30
 800b2b6:	d0fa      	beq.n	800b2ae <_dtoa_r+0xb8e>
 800b2b8:	e6d7      	b.n	800b06a <_dtoa_r+0x94a>
 800b2ba:	9a01      	ldr	r2, [sp, #4]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d184      	bne.n	800b1ca <_dtoa_r+0xaaa>
 800b2c0:	9b00      	ldr	r3, [sp, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	2331      	movs	r3, #49	; 0x31
 800b2c8:	7013      	strb	r3, [r2, #0]
 800b2ca:	e6ce      	b.n	800b06a <_dtoa_r+0x94a>
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <_dtoa_r+0xbd4>)
 800b2ce:	f7ff ba95 	b.w	800a7fc <_dtoa_r+0xdc>
 800b2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f47f aa6e 	bne.w	800a7b6 <_dtoa_r+0x96>
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <_dtoa_r+0xbd8>)
 800b2dc:	f7ff ba8e 	b.w	800a7fc <_dtoa_r+0xdc>
 800b2e0:	9b02      	ldr	r3, [sp, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dcae      	bgt.n	800b244 <_dtoa_r+0xb24>
 800b2e6:	9b06      	ldr	r3, [sp, #24]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	f73f aea8 	bgt.w	800b03e <_dtoa_r+0x91e>
 800b2ee:	e7a9      	b.n	800b244 <_dtoa_r+0xb24>
 800b2f0:	0800da38 	.word	0x0800da38
 800b2f4:	0800d838 	.word	0x0800d838
 800b2f8:	0800d9b9 	.word	0x0800d9b9

0800b2fc <__sflush_r>:
 800b2fc:	898a      	ldrh	r2, [r1, #12]
 800b2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b302:	4605      	mov	r5, r0
 800b304:	0710      	lsls	r0, r2, #28
 800b306:	460c      	mov	r4, r1
 800b308:	d458      	bmi.n	800b3bc <__sflush_r+0xc0>
 800b30a:	684b      	ldr	r3, [r1, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc05      	bgt.n	800b31c <__sflush_r+0x20>
 800b310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	dc02      	bgt.n	800b31c <__sflush_r+0x20>
 800b316:	2000      	movs	r0, #0
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b31e:	2e00      	cmp	r6, #0
 800b320:	d0f9      	beq.n	800b316 <__sflush_r+0x1a>
 800b322:	2300      	movs	r3, #0
 800b324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b328:	682f      	ldr	r7, [r5, #0]
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	d032      	beq.n	800b394 <__sflush_r+0x98>
 800b32e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	075a      	lsls	r2, r3, #29
 800b334:	d505      	bpl.n	800b342 <__sflush_r+0x46>
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	1ac0      	subs	r0, r0, r3
 800b33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b33c:	b10b      	cbz	r3, 800b342 <__sflush_r+0x46>
 800b33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b340:	1ac0      	subs	r0, r0, r3
 800b342:	2300      	movs	r3, #0
 800b344:	4602      	mov	r2, r0
 800b346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b348:	6a21      	ldr	r1, [r4, #32]
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b0      	blx	r6
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	d106      	bne.n	800b362 <__sflush_r+0x66>
 800b354:	6829      	ldr	r1, [r5, #0]
 800b356:	291d      	cmp	r1, #29
 800b358:	d82c      	bhi.n	800b3b4 <__sflush_r+0xb8>
 800b35a:	4a2a      	ldr	r2, [pc, #168]	; (800b404 <__sflush_r+0x108>)
 800b35c:	40ca      	lsrs	r2, r1
 800b35e:	07d6      	lsls	r6, r2, #31
 800b360:	d528      	bpl.n	800b3b4 <__sflush_r+0xb8>
 800b362:	2200      	movs	r2, #0
 800b364:	6062      	str	r2, [r4, #4]
 800b366:	04d9      	lsls	r1, r3, #19
 800b368:	6922      	ldr	r2, [r4, #16]
 800b36a:	6022      	str	r2, [r4, #0]
 800b36c:	d504      	bpl.n	800b378 <__sflush_r+0x7c>
 800b36e:	1c42      	adds	r2, r0, #1
 800b370:	d101      	bne.n	800b376 <__sflush_r+0x7a>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	b903      	cbnz	r3, 800b378 <__sflush_r+0x7c>
 800b376:	6560      	str	r0, [r4, #84]	; 0x54
 800b378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b37a:	602f      	str	r7, [r5, #0]
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d0ca      	beq.n	800b316 <__sflush_r+0x1a>
 800b380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b384:	4299      	cmp	r1, r3
 800b386:	d002      	beq.n	800b38e <__sflush_r+0x92>
 800b388:	4628      	mov	r0, r5
 800b38a:	f001 fa49 	bl	800c820 <_free_r>
 800b38e:	2000      	movs	r0, #0
 800b390:	6360      	str	r0, [r4, #52]	; 0x34
 800b392:	e7c1      	b.n	800b318 <__sflush_r+0x1c>
 800b394:	6a21      	ldr	r1, [r4, #32]
 800b396:	2301      	movs	r3, #1
 800b398:	4628      	mov	r0, r5
 800b39a:	47b0      	blx	r6
 800b39c:	1c41      	adds	r1, r0, #1
 800b39e:	d1c7      	bne.n	800b330 <__sflush_r+0x34>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c4      	beq.n	800b330 <__sflush_r+0x34>
 800b3a6:	2b1d      	cmp	r3, #29
 800b3a8:	d001      	beq.n	800b3ae <__sflush_r+0xb2>
 800b3aa:	2b16      	cmp	r3, #22
 800b3ac:	d101      	bne.n	800b3b2 <__sflush_r+0xb6>
 800b3ae:	602f      	str	r7, [r5, #0]
 800b3b0:	e7b1      	b.n	800b316 <__sflush_r+0x1a>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	e7ad      	b.n	800b318 <__sflush_r+0x1c>
 800b3bc:	690f      	ldr	r7, [r1, #16]
 800b3be:	2f00      	cmp	r7, #0
 800b3c0:	d0a9      	beq.n	800b316 <__sflush_r+0x1a>
 800b3c2:	0793      	lsls	r3, r2, #30
 800b3c4:	680e      	ldr	r6, [r1, #0]
 800b3c6:	bf08      	it	eq
 800b3c8:	694b      	ldreq	r3, [r1, #20]
 800b3ca:	600f      	str	r7, [r1, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	2300      	movne	r3, #0
 800b3d0:	eba6 0807 	sub.w	r8, r6, r7
 800b3d4:	608b      	str	r3, [r1, #8]
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	dd9c      	ble.n	800b316 <__sflush_r+0x1a>
 800b3dc:	6a21      	ldr	r1, [r4, #32]
 800b3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3e0:	4643      	mov	r3, r8
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b0      	blx	r6
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	dc06      	bgt.n	800b3fa <__sflush_r+0xfe>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	e78e      	b.n	800b318 <__sflush_r+0x1c>
 800b3fa:	4407      	add	r7, r0
 800b3fc:	eba8 0800 	sub.w	r8, r8, r0
 800b400:	e7e9      	b.n	800b3d6 <__sflush_r+0xda>
 800b402:	bf00      	nop
 800b404:	20400001 	.word	0x20400001

0800b408 <_fflush_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	690b      	ldr	r3, [r1, #16]
 800b40c:	4605      	mov	r5, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	b913      	cbnz	r3, 800b418 <_fflush_r+0x10>
 800b412:	2500      	movs	r5, #0
 800b414:	4628      	mov	r0, r5
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	b118      	cbz	r0, 800b422 <_fflush_r+0x1a>
 800b41a:	6983      	ldr	r3, [r0, #24]
 800b41c:	b90b      	cbnz	r3, 800b422 <_fflush_r+0x1a>
 800b41e:	f000 f887 	bl	800b530 <__sinit>
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <_fflush_r+0x6c>)
 800b424:	429c      	cmp	r4, r3
 800b426:	d11b      	bne.n	800b460 <_fflush_r+0x58>
 800b428:	686c      	ldr	r4, [r5, #4]
 800b42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0ef      	beq.n	800b412 <_fflush_r+0xa>
 800b432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b434:	07d0      	lsls	r0, r2, #31
 800b436:	d404      	bmi.n	800b442 <_fflush_r+0x3a>
 800b438:	0599      	lsls	r1, r3, #22
 800b43a:	d402      	bmi.n	800b442 <_fflush_r+0x3a>
 800b43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43e:	f000 fc88 	bl	800bd52 <__retarget_lock_acquire_recursive>
 800b442:	4628      	mov	r0, r5
 800b444:	4621      	mov	r1, r4
 800b446:	f7ff ff59 	bl	800b2fc <__sflush_r>
 800b44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b44c:	07da      	lsls	r2, r3, #31
 800b44e:	4605      	mov	r5, r0
 800b450:	d4e0      	bmi.n	800b414 <_fflush_r+0xc>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	059b      	lsls	r3, r3, #22
 800b456:	d4dd      	bmi.n	800b414 <_fflush_r+0xc>
 800b458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b45a:	f000 fc7b 	bl	800bd54 <__retarget_lock_release_recursive>
 800b45e:	e7d9      	b.n	800b414 <_fflush_r+0xc>
 800b460:	4b05      	ldr	r3, [pc, #20]	; (800b478 <_fflush_r+0x70>)
 800b462:	429c      	cmp	r4, r3
 800b464:	d101      	bne.n	800b46a <_fflush_r+0x62>
 800b466:	68ac      	ldr	r4, [r5, #8]
 800b468:	e7df      	b.n	800b42a <_fflush_r+0x22>
 800b46a:	4b04      	ldr	r3, [pc, #16]	; (800b47c <_fflush_r+0x74>)
 800b46c:	429c      	cmp	r4, r3
 800b46e:	bf08      	it	eq
 800b470:	68ec      	ldreq	r4, [r5, #12]
 800b472:	e7da      	b.n	800b42a <_fflush_r+0x22>
 800b474:	0800da6c 	.word	0x0800da6c
 800b478:	0800da8c 	.word	0x0800da8c
 800b47c:	0800da4c 	.word	0x0800da4c

0800b480 <std>:
 800b480:	2300      	movs	r3, #0
 800b482:	b510      	push	{r4, lr}
 800b484:	4604      	mov	r4, r0
 800b486:	e9c0 3300 	strd	r3, r3, [r0]
 800b48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b48e:	6083      	str	r3, [r0, #8]
 800b490:	8181      	strh	r1, [r0, #12]
 800b492:	6643      	str	r3, [r0, #100]	; 0x64
 800b494:	81c2      	strh	r2, [r0, #14]
 800b496:	6183      	str	r3, [r0, #24]
 800b498:	4619      	mov	r1, r3
 800b49a:	2208      	movs	r2, #8
 800b49c:	305c      	adds	r0, #92	; 0x5c
 800b49e:	f7fd f8f5 	bl	800868c <memset>
 800b4a2:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <std+0x38>)
 800b4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <std+0x3c>)
 800b4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <std+0x40>)
 800b4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <std+0x44>)
 800b4b0:	6224      	str	r4, [r4, #32]
 800b4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	bf00      	nop
 800b4b8:	0800cf81 	.word	0x0800cf81
 800b4bc:	0800cfa3 	.word	0x0800cfa3
 800b4c0:	0800cfdb 	.word	0x0800cfdb
 800b4c4:	0800cfff 	.word	0x0800cfff

0800b4c8 <_cleanup_r>:
 800b4c8:	4901      	ldr	r1, [pc, #4]	; (800b4d0 <_cleanup_r+0x8>)
 800b4ca:	f000 b8af 	b.w	800b62c <_fwalk_reent>
 800b4ce:	bf00      	nop
 800b4d0:	0800b409 	.word	0x0800b409

0800b4d4 <__sfmoreglue>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	2268      	movs	r2, #104	; 0x68
 800b4d8:	1e4d      	subs	r5, r1, #1
 800b4da:	4355      	muls	r5, r2
 800b4dc:	460e      	mov	r6, r1
 800b4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4e2:	f001 fa09 	bl	800c8f8 <_malloc_r>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	b140      	cbz	r0, 800b4fc <__sfmoreglue+0x28>
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b4f0:	300c      	adds	r0, #12
 800b4f2:	60a0      	str	r0, [r4, #8]
 800b4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4f8:	f7fd f8c8 	bl	800868c <memset>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}

0800b500 <__sfp_lock_acquire>:
 800b500:	4801      	ldr	r0, [pc, #4]	; (800b508 <__sfp_lock_acquire+0x8>)
 800b502:	f000 bc26 	b.w	800bd52 <__retarget_lock_acquire_recursive>
 800b506:	bf00      	nop
 800b508:	200006e1 	.word	0x200006e1

0800b50c <__sfp_lock_release>:
 800b50c:	4801      	ldr	r0, [pc, #4]	; (800b514 <__sfp_lock_release+0x8>)
 800b50e:	f000 bc21 	b.w	800bd54 <__retarget_lock_release_recursive>
 800b512:	bf00      	nop
 800b514:	200006e1 	.word	0x200006e1

0800b518 <__sinit_lock_acquire>:
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <__sinit_lock_acquire+0x8>)
 800b51a:	f000 bc1a 	b.w	800bd52 <__retarget_lock_acquire_recursive>
 800b51e:	bf00      	nop
 800b520:	200006e2 	.word	0x200006e2

0800b524 <__sinit_lock_release>:
 800b524:	4801      	ldr	r0, [pc, #4]	; (800b52c <__sinit_lock_release+0x8>)
 800b526:	f000 bc15 	b.w	800bd54 <__retarget_lock_release_recursive>
 800b52a:	bf00      	nop
 800b52c:	200006e2 	.word	0x200006e2

0800b530 <__sinit>:
 800b530:	b510      	push	{r4, lr}
 800b532:	4604      	mov	r4, r0
 800b534:	f7ff fff0 	bl	800b518 <__sinit_lock_acquire>
 800b538:	69a3      	ldr	r3, [r4, #24]
 800b53a:	b11b      	cbz	r3, 800b544 <__sinit+0x14>
 800b53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b540:	f7ff bff0 	b.w	800b524 <__sinit_lock_release>
 800b544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b548:	6523      	str	r3, [r4, #80]	; 0x50
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <__sinit+0x68>)
 800b54c:	4a13      	ldr	r2, [pc, #76]	; (800b59c <__sinit+0x6c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	62a2      	str	r2, [r4, #40]	; 0x28
 800b552:	42a3      	cmp	r3, r4
 800b554:	bf04      	itt	eq
 800b556:	2301      	moveq	r3, #1
 800b558:	61a3      	streq	r3, [r4, #24]
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 f820 	bl	800b5a0 <__sfp>
 800b560:	6060      	str	r0, [r4, #4]
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f81c 	bl	800b5a0 <__sfp>
 800b568:	60a0      	str	r0, [r4, #8]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 f818 	bl	800b5a0 <__sfp>
 800b570:	2200      	movs	r2, #0
 800b572:	60e0      	str	r0, [r4, #12]
 800b574:	2104      	movs	r1, #4
 800b576:	6860      	ldr	r0, [r4, #4]
 800b578:	f7ff ff82 	bl	800b480 <std>
 800b57c:	68a0      	ldr	r0, [r4, #8]
 800b57e:	2201      	movs	r2, #1
 800b580:	2109      	movs	r1, #9
 800b582:	f7ff ff7d 	bl	800b480 <std>
 800b586:	68e0      	ldr	r0, [r4, #12]
 800b588:	2202      	movs	r2, #2
 800b58a:	2112      	movs	r1, #18
 800b58c:	f7ff ff78 	bl	800b480 <std>
 800b590:	2301      	movs	r3, #1
 800b592:	61a3      	str	r3, [r4, #24]
 800b594:	e7d2      	b.n	800b53c <__sinit+0xc>
 800b596:	bf00      	nop
 800b598:	0800d824 	.word	0x0800d824
 800b59c:	0800b4c9 	.word	0x0800b4c9

0800b5a0 <__sfp>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	f7ff ffac 	bl	800b500 <__sfp_lock_acquire>
 800b5a8:	4b1e      	ldr	r3, [pc, #120]	; (800b624 <__sfp+0x84>)
 800b5aa:	681e      	ldr	r6, [r3, #0]
 800b5ac:	69b3      	ldr	r3, [r6, #24]
 800b5ae:	b913      	cbnz	r3, 800b5b6 <__sfp+0x16>
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff ffbd 	bl	800b530 <__sinit>
 800b5b6:	3648      	adds	r6, #72	; 0x48
 800b5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	d503      	bpl.n	800b5c8 <__sfp+0x28>
 800b5c0:	6833      	ldr	r3, [r6, #0]
 800b5c2:	b30b      	cbz	r3, 800b608 <__sfp+0x68>
 800b5c4:	6836      	ldr	r6, [r6, #0]
 800b5c6:	e7f7      	b.n	800b5b8 <__sfp+0x18>
 800b5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5cc:	b9d5      	cbnz	r5, 800b604 <__sfp+0x64>
 800b5ce:	4b16      	ldr	r3, [pc, #88]	; (800b628 <__sfp+0x88>)
 800b5d0:	60e3      	str	r3, [r4, #12]
 800b5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5d8:	f000 fbba 	bl	800bd50 <__retarget_lock_init_recursive>
 800b5dc:	f7ff ff96 	bl	800b50c <__sfp_lock_release>
 800b5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5e8:	6025      	str	r5, [r4, #0]
 800b5ea:	61a5      	str	r5, [r4, #24]
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5f4:	f7fd f84a 	bl	800868c <memset>
 800b5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b600:	4620      	mov	r0, r4
 800b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b604:	3468      	adds	r4, #104	; 0x68
 800b606:	e7d9      	b.n	800b5bc <__sfp+0x1c>
 800b608:	2104      	movs	r1, #4
 800b60a:	4638      	mov	r0, r7
 800b60c:	f7ff ff62 	bl	800b4d4 <__sfmoreglue>
 800b610:	4604      	mov	r4, r0
 800b612:	6030      	str	r0, [r6, #0]
 800b614:	2800      	cmp	r0, #0
 800b616:	d1d5      	bne.n	800b5c4 <__sfp+0x24>
 800b618:	f7ff ff78 	bl	800b50c <__sfp_lock_release>
 800b61c:	230c      	movs	r3, #12
 800b61e:	603b      	str	r3, [r7, #0]
 800b620:	e7ee      	b.n	800b600 <__sfp+0x60>
 800b622:	bf00      	nop
 800b624:	0800d824 	.word	0x0800d824
 800b628:	ffff0001 	.word	0xffff0001

0800b62c <_fwalk_reent>:
 800b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b630:	4606      	mov	r6, r0
 800b632:	4688      	mov	r8, r1
 800b634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b638:	2700      	movs	r7, #0
 800b63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b63e:	f1b9 0901 	subs.w	r9, r9, #1
 800b642:	d505      	bpl.n	800b650 <_fwalk_reent+0x24>
 800b644:	6824      	ldr	r4, [r4, #0]
 800b646:	2c00      	cmp	r4, #0
 800b648:	d1f7      	bne.n	800b63a <_fwalk_reent+0xe>
 800b64a:	4638      	mov	r0, r7
 800b64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b650:	89ab      	ldrh	r3, [r5, #12]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d907      	bls.n	800b666 <_fwalk_reent+0x3a>
 800b656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b65a:	3301      	adds	r3, #1
 800b65c:	d003      	beq.n	800b666 <_fwalk_reent+0x3a>
 800b65e:	4629      	mov	r1, r5
 800b660:	4630      	mov	r0, r6
 800b662:	47c0      	blx	r8
 800b664:	4307      	orrs	r7, r0
 800b666:	3568      	adds	r5, #104	; 0x68
 800b668:	e7e9      	b.n	800b63e <_fwalk_reent+0x12>

0800b66a <rshift>:
 800b66a:	6903      	ldr	r3, [r0, #16]
 800b66c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b674:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b678:	f100 0414 	add.w	r4, r0, #20
 800b67c:	dd45      	ble.n	800b70a <rshift+0xa0>
 800b67e:	f011 011f 	ands.w	r1, r1, #31
 800b682:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b686:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b68a:	d10c      	bne.n	800b6a6 <rshift+0x3c>
 800b68c:	f100 0710 	add.w	r7, r0, #16
 800b690:	4629      	mov	r1, r5
 800b692:	42b1      	cmp	r1, r6
 800b694:	d334      	bcc.n	800b700 <rshift+0x96>
 800b696:	1a9b      	subs	r3, r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	1eea      	subs	r2, r5, #3
 800b69c:	4296      	cmp	r6, r2
 800b69e:	bf38      	it	cc
 800b6a0:	2300      	movcc	r3, #0
 800b6a2:	4423      	add	r3, r4
 800b6a4:	e015      	b.n	800b6d2 <rshift+0x68>
 800b6a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6aa:	f1c1 0820 	rsb	r8, r1, #32
 800b6ae:	40cf      	lsrs	r7, r1
 800b6b0:	f105 0e04 	add.w	lr, r5, #4
 800b6b4:	46a1      	mov	r9, r4
 800b6b6:	4576      	cmp	r6, lr
 800b6b8:	46f4      	mov	ip, lr
 800b6ba:	d815      	bhi.n	800b6e8 <rshift+0x7e>
 800b6bc:	1a9a      	subs	r2, r3, r2
 800b6be:	0092      	lsls	r2, r2, #2
 800b6c0:	3a04      	subs	r2, #4
 800b6c2:	3501      	adds	r5, #1
 800b6c4:	42ae      	cmp	r6, r5
 800b6c6:	bf38      	it	cc
 800b6c8:	2200      	movcc	r2, #0
 800b6ca:	18a3      	adds	r3, r4, r2
 800b6cc:	50a7      	str	r7, [r4, r2]
 800b6ce:	b107      	cbz	r7, 800b6d2 <rshift+0x68>
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	1b1a      	subs	r2, r3, r4
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6da:	bf08      	it	eq
 800b6dc:	2300      	moveq	r3, #0
 800b6de:	6102      	str	r2, [r0, #16]
 800b6e0:	bf08      	it	eq
 800b6e2:	6143      	streq	r3, [r0, #20]
 800b6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e8:	f8dc c000 	ldr.w	ip, [ip]
 800b6ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6f0:	ea4c 0707 	orr.w	r7, ip, r7
 800b6f4:	f849 7b04 	str.w	r7, [r9], #4
 800b6f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6fc:	40cf      	lsrs	r7, r1
 800b6fe:	e7da      	b.n	800b6b6 <rshift+0x4c>
 800b700:	f851 cb04 	ldr.w	ip, [r1], #4
 800b704:	f847 cf04 	str.w	ip, [r7, #4]!
 800b708:	e7c3      	b.n	800b692 <rshift+0x28>
 800b70a:	4623      	mov	r3, r4
 800b70c:	e7e1      	b.n	800b6d2 <rshift+0x68>

0800b70e <__hexdig_fun>:
 800b70e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b712:	2b09      	cmp	r3, #9
 800b714:	d802      	bhi.n	800b71c <__hexdig_fun+0xe>
 800b716:	3820      	subs	r0, #32
 800b718:	b2c0      	uxtb	r0, r0
 800b71a:	4770      	bx	lr
 800b71c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b720:	2b05      	cmp	r3, #5
 800b722:	d801      	bhi.n	800b728 <__hexdig_fun+0x1a>
 800b724:	3847      	subs	r0, #71	; 0x47
 800b726:	e7f7      	b.n	800b718 <__hexdig_fun+0xa>
 800b728:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b72c:	2b05      	cmp	r3, #5
 800b72e:	d801      	bhi.n	800b734 <__hexdig_fun+0x26>
 800b730:	3827      	subs	r0, #39	; 0x27
 800b732:	e7f1      	b.n	800b718 <__hexdig_fun+0xa>
 800b734:	2000      	movs	r0, #0
 800b736:	4770      	bx	lr

0800b738 <__gethex>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	ed2d 8b02 	vpush	{d8}
 800b740:	b089      	sub	sp, #36	; 0x24
 800b742:	ee08 0a10 	vmov	s16, r0
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	4bb4      	ldr	r3, [pc, #720]	; (800ba1c <__gethex+0x2e4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	4618      	mov	r0, r3
 800b750:	468b      	mov	fp, r1
 800b752:	4690      	mov	r8, r2
 800b754:	f7f4 fd5c 	bl	8000210 <strlen>
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	f8db 2000 	ldr.w	r2, [fp]
 800b75e:	4403      	add	r3, r0
 800b760:	4682      	mov	sl, r0
 800b762:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b766:	9305      	str	r3, [sp, #20]
 800b768:	1c93      	adds	r3, r2, #2
 800b76a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b76e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b772:	32fe      	adds	r2, #254	; 0xfe
 800b774:	18d1      	adds	r1, r2, r3
 800b776:	461f      	mov	r7, r3
 800b778:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b77c:	9100      	str	r1, [sp, #0]
 800b77e:	2830      	cmp	r0, #48	; 0x30
 800b780:	d0f8      	beq.n	800b774 <__gethex+0x3c>
 800b782:	f7ff ffc4 	bl	800b70e <__hexdig_fun>
 800b786:	4604      	mov	r4, r0
 800b788:	2800      	cmp	r0, #0
 800b78a:	d13a      	bne.n	800b802 <__gethex+0xca>
 800b78c:	9901      	ldr	r1, [sp, #4]
 800b78e:	4652      	mov	r2, sl
 800b790:	4638      	mov	r0, r7
 800b792:	f001 fc38 	bl	800d006 <strncmp>
 800b796:	4605      	mov	r5, r0
 800b798:	2800      	cmp	r0, #0
 800b79a:	d168      	bne.n	800b86e <__gethex+0x136>
 800b79c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b7a0:	eb07 060a 	add.w	r6, r7, sl
 800b7a4:	f7ff ffb3 	bl	800b70e <__hexdig_fun>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d062      	beq.n	800b872 <__gethex+0x13a>
 800b7ac:	4633      	mov	r3, r6
 800b7ae:	7818      	ldrb	r0, [r3, #0]
 800b7b0:	2830      	cmp	r0, #48	; 0x30
 800b7b2:	461f      	mov	r7, r3
 800b7b4:	f103 0301 	add.w	r3, r3, #1
 800b7b8:	d0f9      	beq.n	800b7ae <__gethex+0x76>
 800b7ba:	f7ff ffa8 	bl	800b70e <__hexdig_fun>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	fab0 f480 	clz	r4, r0
 800b7c4:	0964      	lsrs	r4, r4, #5
 800b7c6:	4635      	mov	r5, r6
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	463a      	mov	r2, r7
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	3201      	adds	r2, #1
 800b7d0:	7830      	ldrb	r0, [r6, #0]
 800b7d2:	f7ff ff9c 	bl	800b70e <__hexdig_fun>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d1f8      	bne.n	800b7cc <__gethex+0x94>
 800b7da:	9901      	ldr	r1, [sp, #4]
 800b7dc:	4652      	mov	r2, sl
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f001 fc11 	bl	800d006 <strncmp>
 800b7e4:	b980      	cbnz	r0, 800b808 <__gethex+0xd0>
 800b7e6:	b94d      	cbnz	r5, 800b7fc <__gethex+0xc4>
 800b7e8:	eb06 050a 	add.w	r5, r6, sl
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4616      	mov	r6, r2
 800b7f0:	3201      	adds	r2, #1
 800b7f2:	7830      	ldrb	r0, [r6, #0]
 800b7f4:	f7ff ff8b 	bl	800b70e <__hexdig_fun>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d1f8      	bne.n	800b7ee <__gethex+0xb6>
 800b7fc:	1bad      	subs	r5, r5, r6
 800b7fe:	00ad      	lsls	r5, r5, #2
 800b800:	e004      	b.n	800b80c <__gethex+0xd4>
 800b802:	2400      	movs	r4, #0
 800b804:	4625      	mov	r5, r4
 800b806:	e7e0      	b.n	800b7ca <__gethex+0x92>
 800b808:	2d00      	cmp	r5, #0
 800b80a:	d1f7      	bne.n	800b7fc <__gethex+0xc4>
 800b80c:	7833      	ldrb	r3, [r6, #0]
 800b80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b812:	2b50      	cmp	r3, #80	; 0x50
 800b814:	d13b      	bne.n	800b88e <__gethex+0x156>
 800b816:	7873      	ldrb	r3, [r6, #1]
 800b818:	2b2b      	cmp	r3, #43	; 0x2b
 800b81a:	d02c      	beq.n	800b876 <__gethex+0x13e>
 800b81c:	2b2d      	cmp	r3, #45	; 0x2d
 800b81e:	d02e      	beq.n	800b87e <__gethex+0x146>
 800b820:	1c71      	adds	r1, r6, #1
 800b822:	f04f 0900 	mov.w	r9, #0
 800b826:	7808      	ldrb	r0, [r1, #0]
 800b828:	f7ff ff71 	bl	800b70e <__hexdig_fun>
 800b82c:	1e43      	subs	r3, r0, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b18      	cmp	r3, #24
 800b832:	d82c      	bhi.n	800b88e <__gethex+0x156>
 800b834:	f1a0 0210 	sub.w	r2, r0, #16
 800b838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b83c:	f7ff ff67 	bl	800b70e <__hexdig_fun>
 800b840:	1e43      	subs	r3, r0, #1
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b18      	cmp	r3, #24
 800b846:	d91d      	bls.n	800b884 <__gethex+0x14c>
 800b848:	f1b9 0f00 	cmp.w	r9, #0
 800b84c:	d000      	beq.n	800b850 <__gethex+0x118>
 800b84e:	4252      	negs	r2, r2
 800b850:	4415      	add	r5, r2
 800b852:	f8cb 1000 	str.w	r1, [fp]
 800b856:	b1e4      	cbz	r4, 800b892 <__gethex+0x15a>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bf14      	ite	ne
 800b85e:	2700      	movne	r7, #0
 800b860:	2706      	moveq	r7, #6
 800b862:	4638      	mov	r0, r7
 800b864:	b009      	add	sp, #36	; 0x24
 800b866:	ecbd 8b02 	vpop	{d8}
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	463e      	mov	r6, r7
 800b870:	4625      	mov	r5, r4
 800b872:	2401      	movs	r4, #1
 800b874:	e7ca      	b.n	800b80c <__gethex+0xd4>
 800b876:	f04f 0900 	mov.w	r9, #0
 800b87a:	1cb1      	adds	r1, r6, #2
 800b87c:	e7d3      	b.n	800b826 <__gethex+0xee>
 800b87e:	f04f 0901 	mov.w	r9, #1
 800b882:	e7fa      	b.n	800b87a <__gethex+0x142>
 800b884:	230a      	movs	r3, #10
 800b886:	fb03 0202 	mla	r2, r3, r2, r0
 800b88a:	3a10      	subs	r2, #16
 800b88c:	e7d4      	b.n	800b838 <__gethex+0x100>
 800b88e:	4631      	mov	r1, r6
 800b890:	e7df      	b.n	800b852 <__gethex+0x11a>
 800b892:	1bf3      	subs	r3, r6, r7
 800b894:	3b01      	subs	r3, #1
 800b896:	4621      	mov	r1, r4
 800b898:	2b07      	cmp	r3, #7
 800b89a:	dc0b      	bgt.n	800b8b4 <__gethex+0x17c>
 800b89c:	ee18 0a10 	vmov	r0, s16
 800b8a0:	f000 fae6 	bl	800be70 <_Balloc>
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	b940      	cbnz	r0, 800b8ba <__gethex+0x182>
 800b8a8:	4b5d      	ldr	r3, [pc, #372]	; (800ba20 <__gethex+0x2e8>)
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	21de      	movs	r1, #222	; 0xde
 800b8ae:	485d      	ldr	r0, [pc, #372]	; (800ba24 <__gethex+0x2ec>)
 800b8b0:	f001 fbdc 	bl	800d06c <__assert_func>
 800b8b4:	3101      	adds	r1, #1
 800b8b6:	105b      	asrs	r3, r3, #1
 800b8b8:	e7ee      	b.n	800b898 <__gethex+0x160>
 800b8ba:	f100 0914 	add.w	r9, r0, #20
 800b8be:	f04f 0b00 	mov.w	fp, #0
 800b8c2:	f1ca 0301 	rsb	r3, sl, #1
 800b8c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8ca:	f8cd b000 	str.w	fp, [sp]
 800b8ce:	9306      	str	r3, [sp, #24]
 800b8d0:	42b7      	cmp	r7, r6
 800b8d2:	d340      	bcc.n	800b956 <__gethex+0x21e>
 800b8d4:	9802      	ldr	r0, [sp, #8]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	f840 3b04 	str.w	r3, [r0], #4
 800b8dc:	eba0 0009 	sub.w	r0, r0, r9
 800b8e0:	1080      	asrs	r0, r0, #2
 800b8e2:	0146      	lsls	r6, r0, #5
 800b8e4:	6120      	str	r0, [r4, #16]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fbb4 	bl	800c054 <__hi0bits>
 800b8ec:	1a30      	subs	r0, r6, r0
 800b8ee:	f8d8 6000 	ldr.w	r6, [r8]
 800b8f2:	42b0      	cmp	r0, r6
 800b8f4:	dd63      	ble.n	800b9be <__gethex+0x286>
 800b8f6:	1b87      	subs	r7, r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 ff58 	bl	800c7b0 <__any_on>
 800b900:	4682      	mov	sl, r0
 800b902:	b1a8      	cbz	r0, 800b930 <__gethex+0x1f8>
 800b904:	1e7b      	subs	r3, r7, #1
 800b906:	1159      	asrs	r1, r3, #5
 800b908:	f003 021f 	and.w	r2, r3, #31
 800b90c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b910:	f04f 0a01 	mov.w	sl, #1
 800b914:	fa0a f202 	lsl.w	r2, sl, r2
 800b918:	420a      	tst	r2, r1
 800b91a:	d009      	beq.n	800b930 <__gethex+0x1f8>
 800b91c:	4553      	cmp	r3, sl
 800b91e:	dd05      	ble.n	800b92c <__gethex+0x1f4>
 800b920:	1eb9      	subs	r1, r7, #2
 800b922:	4620      	mov	r0, r4
 800b924:	f000 ff44 	bl	800c7b0 <__any_on>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d145      	bne.n	800b9b8 <__gethex+0x280>
 800b92c:	f04f 0a02 	mov.w	sl, #2
 800b930:	4639      	mov	r1, r7
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff fe99 	bl	800b66a <rshift>
 800b938:	443d      	add	r5, r7
 800b93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b93e:	42ab      	cmp	r3, r5
 800b940:	da4c      	bge.n	800b9dc <__gethex+0x2a4>
 800b942:	ee18 0a10 	vmov	r0, s16
 800b946:	4621      	mov	r1, r4
 800b948:	f000 fad2 	bl	800bef0 <_Bfree>
 800b94c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b94e:	2300      	movs	r3, #0
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	27a3      	movs	r7, #163	; 0xa3
 800b954:	e785      	b.n	800b862 <__gethex+0x12a>
 800b956:	1e73      	subs	r3, r6, #1
 800b958:	9a05      	ldr	r2, [sp, #20]
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b960:	4293      	cmp	r3, r2
 800b962:	d019      	beq.n	800b998 <__gethex+0x260>
 800b964:	f1bb 0f20 	cmp.w	fp, #32
 800b968:	d107      	bne.n	800b97a <__gethex+0x242>
 800b96a:	9b02      	ldr	r3, [sp, #8]
 800b96c:	9a00      	ldr	r2, [sp, #0]
 800b96e:	f843 2b04 	str.w	r2, [r3], #4
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	2300      	movs	r3, #0
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	469b      	mov	fp, r3
 800b97a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b97e:	f7ff fec6 	bl	800b70e <__hexdig_fun>
 800b982:	9b00      	ldr	r3, [sp, #0]
 800b984:	f000 000f 	and.w	r0, r0, #15
 800b988:	fa00 f00b 	lsl.w	r0, r0, fp
 800b98c:	4303      	orrs	r3, r0
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	f10b 0b04 	add.w	fp, fp, #4
 800b994:	9b03      	ldr	r3, [sp, #12]
 800b996:	e00d      	b.n	800b9b4 <__gethex+0x27c>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	9a06      	ldr	r2, [sp, #24]
 800b99c:	4413      	add	r3, r2
 800b99e:	42bb      	cmp	r3, r7
 800b9a0:	d3e0      	bcc.n	800b964 <__gethex+0x22c>
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	9901      	ldr	r1, [sp, #4]
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	f001 fb2c 	bl	800d006 <strncmp>
 800b9ae:	9b07      	ldr	r3, [sp, #28]
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1d7      	bne.n	800b964 <__gethex+0x22c>
 800b9b4:	461e      	mov	r6, r3
 800b9b6:	e78b      	b.n	800b8d0 <__gethex+0x198>
 800b9b8:	f04f 0a03 	mov.w	sl, #3
 800b9bc:	e7b8      	b.n	800b930 <__gethex+0x1f8>
 800b9be:	da0a      	bge.n	800b9d6 <__gethex+0x29e>
 800b9c0:	1a37      	subs	r7, r6, r0
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	ee18 0a10 	vmov	r0, s16
 800b9c8:	463a      	mov	r2, r7
 800b9ca:	f000 fcad 	bl	800c328 <__lshift>
 800b9ce:	1bed      	subs	r5, r5, r7
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	f100 0914 	add.w	r9, r0, #20
 800b9d6:	f04f 0a00 	mov.w	sl, #0
 800b9da:	e7ae      	b.n	800b93a <__gethex+0x202>
 800b9dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9e0:	42a8      	cmp	r0, r5
 800b9e2:	dd72      	ble.n	800baca <__gethex+0x392>
 800b9e4:	1b45      	subs	r5, r0, r5
 800b9e6:	42ae      	cmp	r6, r5
 800b9e8:	dc36      	bgt.n	800ba58 <__gethex+0x320>
 800b9ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d02a      	beq.n	800ba48 <__gethex+0x310>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d02c      	beq.n	800ba50 <__gethex+0x318>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d11c      	bne.n	800ba34 <__gethex+0x2fc>
 800b9fa:	42ae      	cmp	r6, r5
 800b9fc:	d11a      	bne.n	800ba34 <__gethex+0x2fc>
 800b9fe:	2e01      	cmp	r6, #1
 800ba00:	d112      	bne.n	800ba28 <__gethex+0x2f0>
 800ba02:	9a04      	ldr	r2, [sp, #16]
 800ba04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	f8c9 3000 	str.w	r3, [r9]
 800ba12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba14:	2762      	movs	r7, #98	; 0x62
 800ba16:	601c      	str	r4, [r3, #0]
 800ba18:	e723      	b.n	800b862 <__gethex+0x12a>
 800ba1a:	bf00      	nop
 800ba1c:	0800db14 	.word	0x0800db14
 800ba20:	0800da38 	.word	0x0800da38
 800ba24:	0800daac 	.word	0x0800daac
 800ba28:	1e71      	subs	r1, r6, #1
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fec0 	bl	800c7b0 <__any_on>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d1e6      	bne.n	800ba02 <__gethex+0x2ca>
 800ba34:	ee18 0a10 	vmov	r0, s16
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f000 fa59 	bl	800bef0 <_Bfree>
 800ba3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba40:	2300      	movs	r3, #0
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	2750      	movs	r7, #80	; 0x50
 800ba46:	e70c      	b.n	800b862 <__gethex+0x12a>
 800ba48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f2      	bne.n	800ba34 <__gethex+0x2fc>
 800ba4e:	e7d8      	b.n	800ba02 <__gethex+0x2ca>
 800ba50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1d5      	bne.n	800ba02 <__gethex+0x2ca>
 800ba56:	e7ed      	b.n	800ba34 <__gethex+0x2fc>
 800ba58:	1e6f      	subs	r7, r5, #1
 800ba5a:	f1ba 0f00 	cmp.w	sl, #0
 800ba5e:	d131      	bne.n	800bac4 <__gethex+0x38c>
 800ba60:	b127      	cbz	r7, 800ba6c <__gethex+0x334>
 800ba62:	4639      	mov	r1, r7
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fea3 	bl	800c7b0 <__any_on>
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	117b      	asrs	r3, r7, #5
 800ba6e:	2101      	movs	r1, #1
 800ba70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ba74:	f007 071f 	and.w	r7, r7, #31
 800ba78:	fa01 f707 	lsl.w	r7, r1, r7
 800ba7c:	421f      	tst	r7, r3
 800ba7e:	4629      	mov	r1, r5
 800ba80:	4620      	mov	r0, r4
 800ba82:	bf18      	it	ne
 800ba84:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba88:	1b76      	subs	r6, r6, r5
 800ba8a:	f7ff fdee 	bl	800b66a <rshift>
 800ba8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba92:	2702      	movs	r7, #2
 800ba94:	f1ba 0f00 	cmp.w	sl, #0
 800ba98:	d048      	beq.n	800bb2c <__gethex+0x3f4>
 800ba9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d015      	beq.n	800bace <__gethex+0x396>
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d017      	beq.n	800bad6 <__gethex+0x39e>
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d109      	bne.n	800babe <__gethex+0x386>
 800baaa:	f01a 0f02 	tst.w	sl, #2
 800baae:	d006      	beq.n	800babe <__gethex+0x386>
 800bab0:	f8d9 0000 	ldr.w	r0, [r9]
 800bab4:	ea4a 0a00 	orr.w	sl, sl, r0
 800bab8:	f01a 0f01 	tst.w	sl, #1
 800babc:	d10e      	bne.n	800badc <__gethex+0x3a4>
 800babe:	f047 0710 	orr.w	r7, r7, #16
 800bac2:	e033      	b.n	800bb2c <__gethex+0x3f4>
 800bac4:	f04f 0a01 	mov.w	sl, #1
 800bac8:	e7d0      	b.n	800ba6c <__gethex+0x334>
 800baca:	2701      	movs	r7, #1
 800bacc:	e7e2      	b.n	800ba94 <__gethex+0x35c>
 800bace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bad0:	f1c3 0301 	rsb	r3, r3, #1
 800bad4:	9315      	str	r3, [sp, #84]	; 0x54
 800bad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0f0      	beq.n	800babe <__gethex+0x386>
 800badc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bae0:	f104 0314 	add.w	r3, r4, #20
 800bae4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bae8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baec:	f04f 0c00 	mov.w	ip, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bafa:	d01c      	beq.n	800bb36 <__gethex+0x3fe>
 800bafc:	3201      	adds	r2, #1
 800bafe:	6002      	str	r2, [r0, #0]
 800bb00:	2f02      	cmp	r7, #2
 800bb02:	f104 0314 	add.w	r3, r4, #20
 800bb06:	d13f      	bne.n	800bb88 <__gethex+0x450>
 800bb08:	f8d8 2000 	ldr.w	r2, [r8]
 800bb0c:	3a01      	subs	r2, #1
 800bb0e:	42b2      	cmp	r2, r6
 800bb10:	d10a      	bne.n	800bb28 <__gethex+0x3f0>
 800bb12:	1171      	asrs	r1, r6, #5
 800bb14:	2201      	movs	r2, #1
 800bb16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb1a:	f006 061f 	and.w	r6, r6, #31
 800bb1e:	fa02 f606 	lsl.w	r6, r2, r6
 800bb22:	421e      	tst	r6, r3
 800bb24:	bf18      	it	ne
 800bb26:	4617      	movne	r7, r2
 800bb28:	f047 0720 	orr.w	r7, r7, #32
 800bb2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb2e:	601c      	str	r4, [r3, #0]
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	601d      	str	r5, [r3, #0]
 800bb34:	e695      	b.n	800b862 <__gethex+0x12a>
 800bb36:	4299      	cmp	r1, r3
 800bb38:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb3c:	d8d8      	bhi.n	800baf0 <__gethex+0x3b8>
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	459b      	cmp	fp, r3
 800bb42:	db19      	blt.n	800bb78 <__gethex+0x440>
 800bb44:	6861      	ldr	r1, [r4, #4]
 800bb46:	ee18 0a10 	vmov	r0, s16
 800bb4a:	3101      	adds	r1, #1
 800bb4c:	f000 f990 	bl	800be70 <_Balloc>
 800bb50:	4681      	mov	r9, r0
 800bb52:	b918      	cbnz	r0, 800bb5c <__gethex+0x424>
 800bb54:	4b1a      	ldr	r3, [pc, #104]	; (800bbc0 <__gethex+0x488>)
 800bb56:	4602      	mov	r2, r0
 800bb58:	2184      	movs	r1, #132	; 0x84
 800bb5a:	e6a8      	b.n	800b8ae <__gethex+0x176>
 800bb5c:	6922      	ldr	r2, [r4, #16]
 800bb5e:	3202      	adds	r2, #2
 800bb60:	f104 010c 	add.w	r1, r4, #12
 800bb64:	0092      	lsls	r2, r2, #2
 800bb66:	300c      	adds	r0, #12
 800bb68:	f000 f974 	bl	800be54 <memcpy>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	ee18 0a10 	vmov	r0, s16
 800bb72:	f000 f9bd 	bl	800bef0 <_Bfree>
 800bb76:	464c      	mov	r4, r9
 800bb78:	6923      	ldr	r3, [r4, #16]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb80:	6122      	str	r2, [r4, #16]
 800bb82:	2201      	movs	r2, #1
 800bb84:	615a      	str	r2, [r3, #20]
 800bb86:	e7bb      	b.n	800bb00 <__gethex+0x3c8>
 800bb88:	6922      	ldr	r2, [r4, #16]
 800bb8a:	455a      	cmp	r2, fp
 800bb8c:	dd0b      	ble.n	800bba6 <__gethex+0x46e>
 800bb8e:	2101      	movs	r1, #1
 800bb90:	4620      	mov	r0, r4
 800bb92:	f7ff fd6a 	bl	800b66a <rshift>
 800bb96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb9a:	3501      	adds	r5, #1
 800bb9c:	42ab      	cmp	r3, r5
 800bb9e:	f6ff aed0 	blt.w	800b942 <__gethex+0x20a>
 800bba2:	2701      	movs	r7, #1
 800bba4:	e7c0      	b.n	800bb28 <__gethex+0x3f0>
 800bba6:	f016 061f 	ands.w	r6, r6, #31
 800bbaa:	d0fa      	beq.n	800bba2 <__gethex+0x46a>
 800bbac:	4453      	add	r3, sl
 800bbae:	f1c6 0620 	rsb	r6, r6, #32
 800bbb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bbb6:	f000 fa4d 	bl	800c054 <__hi0bits>
 800bbba:	42b0      	cmp	r0, r6
 800bbbc:	dbe7      	blt.n	800bb8e <__gethex+0x456>
 800bbbe:	e7f0      	b.n	800bba2 <__gethex+0x46a>
 800bbc0:	0800da38 	.word	0x0800da38

0800bbc4 <L_shift>:
 800bbc4:	f1c2 0208 	rsb	r2, r2, #8
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	b570      	push	{r4, r5, r6, lr}
 800bbcc:	f1c2 0620 	rsb	r6, r2, #32
 800bbd0:	6843      	ldr	r3, [r0, #4]
 800bbd2:	6804      	ldr	r4, [r0, #0]
 800bbd4:	fa03 f506 	lsl.w	r5, r3, r6
 800bbd8:	432c      	orrs	r4, r5
 800bbda:	40d3      	lsrs	r3, r2
 800bbdc:	6004      	str	r4, [r0, #0]
 800bbde:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbe2:	4288      	cmp	r0, r1
 800bbe4:	d3f4      	bcc.n	800bbd0 <L_shift+0xc>
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}

0800bbe8 <__match>:
 800bbe8:	b530      	push	{r4, r5, lr}
 800bbea:	6803      	ldr	r3, [r0, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf2:	b914      	cbnz	r4, 800bbfa <__match+0x12>
 800bbf4:	6003      	str	r3, [r0, #0]
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	bd30      	pop	{r4, r5, pc}
 800bbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc02:	2d19      	cmp	r5, #25
 800bc04:	bf98      	it	ls
 800bc06:	3220      	addls	r2, #32
 800bc08:	42a2      	cmp	r2, r4
 800bc0a:	d0f0      	beq.n	800bbee <__match+0x6>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	e7f3      	b.n	800bbf8 <__match+0x10>

0800bc10 <__hexnan>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	680b      	ldr	r3, [r1, #0]
 800bc16:	115e      	asrs	r6, r3, #5
 800bc18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc1c:	f013 031f 	ands.w	r3, r3, #31
 800bc20:	b087      	sub	sp, #28
 800bc22:	bf18      	it	ne
 800bc24:	3604      	addne	r6, #4
 800bc26:	2500      	movs	r5, #0
 800bc28:	1f37      	subs	r7, r6, #4
 800bc2a:	4690      	mov	r8, r2
 800bc2c:	6802      	ldr	r2, [r0, #0]
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	4682      	mov	sl, r0
 800bc32:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc36:	46b9      	mov	r9, r7
 800bc38:	463c      	mov	r4, r7
 800bc3a:	9502      	str	r5, [sp, #8]
 800bc3c:	46ab      	mov	fp, r5
 800bc3e:	7851      	ldrb	r1, [r2, #1]
 800bc40:	1c53      	adds	r3, r2, #1
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	b341      	cbz	r1, 800bc98 <__hexnan+0x88>
 800bc46:	4608      	mov	r0, r1
 800bc48:	9205      	str	r2, [sp, #20]
 800bc4a:	9104      	str	r1, [sp, #16]
 800bc4c:	f7ff fd5f 	bl	800b70e <__hexdig_fun>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d14f      	bne.n	800bcf4 <__hexnan+0xe4>
 800bc54:	9904      	ldr	r1, [sp, #16]
 800bc56:	9a05      	ldr	r2, [sp, #20]
 800bc58:	2920      	cmp	r1, #32
 800bc5a:	d818      	bhi.n	800bc8e <__hexnan+0x7e>
 800bc5c:	9b02      	ldr	r3, [sp, #8]
 800bc5e:	459b      	cmp	fp, r3
 800bc60:	dd13      	ble.n	800bc8a <__hexnan+0x7a>
 800bc62:	454c      	cmp	r4, r9
 800bc64:	d206      	bcs.n	800bc74 <__hexnan+0x64>
 800bc66:	2d07      	cmp	r5, #7
 800bc68:	dc04      	bgt.n	800bc74 <__hexnan+0x64>
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f7ff ffa8 	bl	800bbc4 <L_shift>
 800bc74:	4544      	cmp	r4, r8
 800bc76:	d950      	bls.n	800bd1a <__hexnan+0x10a>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f1a4 0904 	sub.w	r9, r4, #4
 800bc7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc82:	f8cd b008 	str.w	fp, [sp, #8]
 800bc86:	464c      	mov	r4, r9
 800bc88:	461d      	mov	r5, r3
 800bc8a:	9a03      	ldr	r2, [sp, #12]
 800bc8c:	e7d7      	b.n	800bc3e <__hexnan+0x2e>
 800bc8e:	2929      	cmp	r1, #41	; 0x29
 800bc90:	d156      	bne.n	800bd40 <__hexnan+0x130>
 800bc92:	3202      	adds	r2, #2
 800bc94:	f8ca 2000 	str.w	r2, [sl]
 800bc98:	f1bb 0f00 	cmp.w	fp, #0
 800bc9c:	d050      	beq.n	800bd40 <__hexnan+0x130>
 800bc9e:	454c      	cmp	r4, r9
 800bca0:	d206      	bcs.n	800bcb0 <__hexnan+0xa0>
 800bca2:	2d07      	cmp	r5, #7
 800bca4:	dc04      	bgt.n	800bcb0 <__hexnan+0xa0>
 800bca6:	462a      	mov	r2, r5
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7ff ff8a 	bl	800bbc4 <L_shift>
 800bcb0:	4544      	cmp	r4, r8
 800bcb2:	d934      	bls.n	800bd1e <__hexnan+0x10e>
 800bcb4:	f1a8 0204 	sub.w	r2, r8, #4
 800bcb8:	4623      	mov	r3, r4
 800bcba:	f853 1b04 	ldr.w	r1, [r3], #4
 800bcbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800bcc2:	429f      	cmp	r7, r3
 800bcc4:	d2f9      	bcs.n	800bcba <__hexnan+0xaa>
 800bcc6:	1b3b      	subs	r3, r7, r4
 800bcc8:	f023 0303 	bic.w	r3, r3, #3
 800bccc:	3304      	adds	r3, #4
 800bcce:	3401      	adds	r4, #1
 800bcd0:	3e03      	subs	r6, #3
 800bcd2:	42b4      	cmp	r4, r6
 800bcd4:	bf88      	it	hi
 800bcd6:	2304      	movhi	r3, #4
 800bcd8:	4443      	add	r3, r8
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f843 2b04 	str.w	r2, [r3], #4
 800bce0:	429f      	cmp	r7, r3
 800bce2:	d2fb      	bcs.n	800bcdc <__hexnan+0xcc>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	b91b      	cbnz	r3, 800bcf0 <__hexnan+0xe0>
 800bce8:	4547      	cmp	r7, r8
 800bcea:	d127      	bne.n	800bd3c <__hexnan+0x12c>
 800bcec:	2301      	movs	r3, #1
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	2005      	movs	r0, #5
 800bcf2:	e026      	b.n	800bd42 <__hexnan+0x132>
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	2d08      	cmp	r5, #8
 800bcf8:	f10b 0b01 	add.w	fp, fp, #1
 800bcfc:	dd06      	ble.n	800bd0c <__hexnan+0xfc>
 800bcfe:	4544      	cmp	r4, r8
 800bd00:	d9c3      	bls.n	800bc8a <__hexnan+0x7a>
 800bd02:	2300      	movs	r3, #0
 800bd04:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd08:	2501      	movs	r5, #1
 800bd0a:	3c04      	subs	r4, #4
 800bd0c:	6822      	ldr	r2, [r4, #0]
 800bd0e:	f000 000f 	and.w	r0, r0, #15
 800bd12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	e7b7      	b.n	800bc8a <__hexnan+0x7a>
 800bd1a:	2508      	movs	r5, #8
 800bd1c:	e7b5      	b.n	800bc8a <__hexnan+0x7a>
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0df      	beq.n	800bce4 <__hexnan+0xd4>
 800bd24:	f04f 32ff 	mov.w	r2, #4294967295
 800bd28:	f1c3 0320 	rsb	r3, r3, #32
 800bd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd34:	401a      	ands	r2, r3
 800bd36:	f846 2c04 	str.w	r2, [r6, #-4]
 800bd3a:	e7d3      	b.n	800bce4 <__hexnan+0xd4>
 800bd3c:	3f04      	subs	r7, #4
 800bd3e:	e7d1      	b.n	800bce4 <__hexnan+0xd4>
 800bd40:	2004      	movs	r0, #4
 800bd42:	b007      	add	sp, #28
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd48 <_localeconv_r>:
 800bd48:	4800      	ldr	r0, [pc, #0]	; (800bd4c <_localeconv_r+0x4>)
 800bd4a:	4770      	bx	lr
 800bd4c:	20000188 	.word	0x20000188

0800bd50 <__retarget_lock_init_recursive>:
 800bd50:	4770      	bx	lr

0800bd52 <__retarget_lock_acquire_recursive>:
 800bd52:	4770      	bx	lr

0800bd54 <__retarget_lock_release_recursive>:
 800bd54:	4770      	bx	lr

0800bd56 <__swhatbuf_r>:
 800bd56:	b570      	push	{r4, r5, r6, lr}
 800bd58:	460e      	mov	r6, r1
 800bd5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	b096      	sub	sp, #88	; 0x58
 800bd62:	4614      	mov	r4, r2
 800bd64:	461d      	mov	r5, r3
 800bd66:	da08      	bge.n	800bd7a <__swhatbuf_r+0x24>
 800bd68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	602a      	str	r2, [r5, #0]
 800bd70:	061a      	lsls	r2, r3, #24
 800bd72:	d410      	bmi.n	800bd96 <__swhatbuf_r+0x40>
 800bd74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd78:	e00e      	b.n	800bd98 <__swhatbuf_r+0x42>
 800bd7a:	466a      	mov	r2, sp
 800bd7c:	f001 f9b6 	bl	800d0ec <_fstat_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	dbf1      	blt.n	800bd68 <__swhatbuf_r+0x12>
 800bd84:	9a01      	ldr	r2, [sp, #4]
 800bd86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd8e:	425a      	negs	r2, r3
 800bd90:	415a      	adcs	r2, r3
 800bd92:	602a      	str	r2, [r5, #0]
 800bd94:	e7ee      	b.n	800bd74 <__swhatbuf_r+0x1e>
 800bd96:	2340      	movs	r3, #64	; 0x40
 800bd98:	2000      	movs	r0, #0
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	b016      	add	sp, #88	; 0x58
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <__smakebuf_r>:
 800bda0:	898b      	ldrh	r3, [r1, #12]
 800bda2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda4:	079d      	lsls	r5, r3, #30
 800bda6:	4606      	mov	r6, r0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	d507      	bpl.n	800bdbc <__smakebuf_r+0x1c>
 800bdac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	6123      	str	r3, [r4, #16]
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	6163      	str	r3, [r4, #20]
 800bdb8:	b002      	add	sp, #8
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	ab01      	add	r3, sp, #4
 800bdbe:	466a      	mov	r2, sp
 800bdc0:	f7ff ffc9 	bl	800bd56 <__swhatbuf_r>
 800bdc4:	9900      	ldr	r1, [sp, #0]
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 fd95 	bl	800c8f8 <_malloc_r>
 800bdce:	b948      	cbnz	r0, 800bde4 <__smakebuf_r+0x44>
 800bdd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd4:	059a      	lsls	r2, r3, #22
 800bdd6:	d4ef      	bmi.n	800bdb8 <__smakebuf_r+0x18>
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	f043 0302 	orr.w	r3, r3, #2
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	e7e3      	b.n	800bdac <__smakebuf_r+0xc>
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <__smakebuf_r+0x7c>)
 800bde6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	6163      	str	r3, [r4, #20]
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	6120      	str	r0, [r4, #16]
 800bdfa:	b15b      	cbz	r3, 800be14 <__smakebuf_r+0x74>
 800bdfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be00:	4630      	mov	r0, r6
 800be02:	f001 f985 	bl	800d110 <_isatty_r>
 800be06:	b128      	cbz	r0, 800be14 <__smakebuf_r+0x74>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	f023 0303 	bic.w	r3, r3, #3
 800be0e:	f043 0301 	orr.w	r3, r3, #1
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	89a0      	ldrh	r0, [r4, #12]
 800be16:	4305      	orrs	r5, r0
 800be18:	81a5      	strh	r5, [r4, #12]
 800be1a:	e7cd      	b.n	800bdb8 <__smakebuf_r+0x18>
 800be1c:	0800b4c9 	.word	0x0800b4c9

0800be20 <malloc>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <malloc+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f000 bd67 	b.w	800c8f8 <_malloc_r>
 800be2a:	bf00      	nop
 800be2c:	20000030 	.word	0x20000030

0800be30 <__ascii_mbtowc>:
 800be30:	b082      	sub	sp, #8
 800be32:	b901      	cbnz	r1, 800be36 <__ascii_mbtowc+0x6>
 800be34:	a901      	add	r1, sp, #4
 800be36:	b142      	cbz	r2, 800be4a <__ascii_mbtowc+0x1a>
 800be38:	b14b      	cbz	r3, 800be4e <__ascii_mbtowc+0x1e>
 800be3a:	7813      	ldrb	r3, [r2, #0]
 800be3c:	600b      	str	r3, [r1, #0]
 800be3e:	7812      	ldrb	r2, [r2, #0]
 800be40:	1e10      	subs	r0, r2, #0
 800be42:	bf18      	it	ne
 800be44:	2001      	movne	r0, #1
 800be46:	b002      	add	sp, #8
 800be48:	4770      	bx	lr
 800be4a:	4610      	mov	r0, r2
 800be4c:	e7fb      	b.n	800be46 <__ascii_mbtowc+0x16>
 800be4e:	f06f 0001 	mvn.w	r0, #1
 800be52:	e7f8      	b.n	800be46 <__ascii_mbtowc+0x16>

0800be54 <memcpy>:
 800be54:	440a      	add	r2, r1
 800be56:	4291      	cmp	r1, r2
 800be58:	f100 33ff 	add.w	r3, r0, #4294967295
 800be5c:	d100      	bne.n	800be60 <memcpy+0xc>
 800be5e:	4770      	bx	lr
 800be60:	b510      	push	{r4, lr}
 800be62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be6a:	4291      	cmp	r1, r2
 800be6c:	d1f9      	bne.n	800be62 <memcpy+0xe>
 800be6e:	bd10      	pop	{r4, pc}

0800be70 <_Balloc>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be74:	4604      	mov	r4, r0
 800be76:	460d      	mov	r5, r1
 800be78:	b976      	cbnz	r6, 800be98 <_Balloc+0x28>
 800be7a:	2010      	movs	r0, #16
 800be7c:	f7ff ffd0 	bl	800be20 <malloc>
 800be80:	4602      	mov	r2, r0
 800be82:	6260      	str	r0, [r4, #36]	; 0x24
 800be84:	b920      	cbnz	r0, 800be90 <_Balloc+0x20>
 800be86:	4b18      	ldr	r3, [pc, #96]	; (800bee8 <_Balloc+0x78>)
 800be88:	4818      	ldr	r0, [pc, #96]	; (800beec <_Balloc+0x7c>)
 800be8a:	2166      	movs	r1, #102	; 0x66
 800be8c:	f001 f8ee 	bl	800d06c <__assert_func>
 800be90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be94:	6006      	str	r6, [r0, #0]
 800be96:	60c6      	str	r6, [r0, #12]
 800be98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be9a:	68f3      	ldr	r3, [r6, #12]
 800be9c:	b183      	cbz	r3, 800bec0 <_Balloc+0x50>
 800be9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bea6:	b9b8      	cbnz	r0, 800bed8 <_Balloc+0x68>
 800bea8:	2101      	movs	r1, #1
 800beaa:	fa01 f605 	lsl.w	r6, r1, r5
 800beae:	1d72      	adds	r2, r6, #5
 800beb0:	0092      	lsls	r2, r2, #2
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fc9d 	bl	800c7f2 <_calloc_r>
 800beb8:	b160      	cbz	r0, 800bed4 <_Balloc+0x64>
 800beba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bebe:	e00e      	b.n	800bede <_Balloc+0x6e>
 800bec0:	2221      	movs	r2, #33	; 0x21
 800bec2:	2104      	movs	r1, #4
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fc94 	bl	800c7f2 <_calloc_r>
 800beca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800becc:	60f0      	str	r0, [r6, #12]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e4      	bne.n	800be9e <_Balloc+0x2e>
 800bed4:	2000      	movs	r0, #0
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	6802      	ldr	r2, [r0, #0]
 800beda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bede:	2300      	movs	r3, #0
 800bee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bee4:	e7f7      	b.n	800bed6 <_Balloc+0x66>
 800bee6:	bf00      	nop
 800bee8:	0800d9c6 	.word	0x0800d9c6
 800beec:	0800db28 	.word	0x0800db28

0800bef0 <_Bfree>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef4:	4605      	mov	r5, r0
 800bef6:	460c      	mov	r4, r1
 800bef8:	b976      	cbnz	r6, 800bf18 <_Bfree+0x28>
 800befa:	2010      	movs	r0, #16
 800befc:	f7ff ff90 	bl	800be20 <malloc>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6268      	str	r0, [r5, #36]	; 0x24
 800bf04:	b920      	cbnz	r0, 800bf10 <_Bfree+0x20>
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <_Bfree+0x3c>)
 800bf08:	4809      	ldr	r0, [pc, #36]	; (800bf30 <_Bfree+0x40>)
 800bf0a:	218a      	movs	r1, #138	; 0x8a
 800bf0c:	f001 f8ae 	bl	800d06c <__assert_func>
 800bf10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf14:	6006      	str	r6, [r0, #0]
 800bf16:	60c6      	str	r6, [r0, #12]
 800bf18:	b13c      	cbz	r4, 800bf2a <_Bfree+0x3a>
 800bf1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf1c:	6862      	ldr	r2, [r4, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf24:	6021      	str	r1, [r4, #0]
 800bf26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	0800d9c6 	.word	0x0800d9c6
 800bf30:	0800db28 	.word	0x0800db28

0800bf34 <__multadd>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	690d      	ldr	r5, [r1, #16]
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	461e      	mov	r6, r3
 800bf40:	f101 0c14 	add.w	ip, r1, #20
 800bf44:	2000      	movs	r0, #0
 800bf46:	f8dc 3000 	ldr.w	r3, [ip]
 800bf4a:	b299      	uxth	r1, r3
 800bf4c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf50:	0c1e      	lsrs	r6, r3, #16
 800bf52:	0c0b      	lsrs	r3, r1, #16
 800bf54:	fb02 3306 	mla	r3, r2, r6, r3
 800bf58:	b289      	uxth	r1, r1
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf60:	4285      	cmp	r5, r0
 800bf62:	f84c 1b04 	str.w	r1, [ip], #4
 800bf66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf6a:	dcec      	bgt.n	800bf46 <__multadd+0x12>
 800bf6c:	b30e      	cbz	r6, 800bfb2 <__multadd+0x7e>
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	42ab      	cmp	r3, r5
 800bf72:	dc19      	bgt.n	800bfa8 <__multadd+0x74>
 800bf74:	6861      	ldr	r1, [r4, #4]
 800bf76:	4638      	mov	r0, r7
 800bf78:	3101      	adds	r1, #1
 800bf7a:	f7ff ff79 	bl	800be70 <_Balloc>
 800bf7e:	4680      	mov	r8, r0
 800bf80:	b928      	cbnz	r0, 800bf8e <__multadd+0x5a>
 800bf82:	4602      	mov	r2, r0
 800bf84:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <__multadd+0x84>)
 800bf86:	480d      	ldr	r0, [pc, #52]	; (800bfbc <__multadd+0x88>)
 800bf88:	21b5      	movs	r1, #181	; 0xb5
 800bf8a:	f001 f86f 	bl	800d06c <__assert_func>
 800bf8e:	6922      	ldr	r2, [r4, #16]
 800bf90:	3202      	adds	r2, #2
 800bf92:	f104 010c 	add.w	r1, r4, #12
 800bf96:	0092      	lsls	r2, r2, #2
 800bf98:	300c      	adds	r0, #12
 800bf9a:	f7ff ff5b 	bl	800be54 <memcpy>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7ff ffa5 	bl	800bef0 <_Bfree>
 800bfa6:	4644      	mov	r4, r8
 800bfa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfac:	3501      	adds	r5, #1
 800bfae:	615e      	str	r6, [r3, #20]
 800bfb0:	6125      	str	r5, [r4, #16]
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	0800da38 	.word	0x0800da38
 800bfbc:	0800db28 	.word	0x0800db28

0800bfc0 <__s2b>:
 800bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	4615      	mov	r5, r2
 800bfc8:	461f      	mov	r7, r3
 800bfca:	2209      	movs	r2, #9
 800bfcc:	3308      	adds	r3, #8
 800bfce:	4606      	mov	r6, r0
 800bfd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	db09      	blt.n	800bff0 <__s2b+0x30>
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7ff ff47 	bl	800be70 <_Balloc>
 800bfe2:	b940      	cbnz	r0, 800bff6 <__s2b+0x36>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	4b19      	ldr	r3, [pc, #100]	; (800c04c <__s2b+0x8c>)
 800bfe8:	4819      	ldr	r0, [pc, #100]	; (800c050 <__s2b+0x90>)
 800bfea:	21ce      	movs	r1, #206	; 0xce
 800bfec:	f001 f83e 	bl	800d06c <__assert_func>
 800bff0:	0052      	lsls	r2, r2, #1
 800bff2:	3101      	adds	r1, #1
 800bff4:	e7f0      	b.n	800bfd8 <__s2b+0x18>
 800bff6:	9b08      	ldr	r3, [sp, #32]
 800bff8:	6143      	str	r3, [r0, #20]
 800bffa:	2d09      	cmp	r5, #9
 800bffc:	f04f 0301 	mov.w	r3, #1
 800c000:	6103      	str	r3, [r0, #16]
 800c002:	dd16      	ble.n	800c032 <__s2b+0x72>
 800c004:	f104 0909 	add.w	r9, r4, #9
 800c008:	46c8      	mov	r8, r9
 800c00a:	442c      	add	r4, r5
 800c00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c010:	4601      	mov	r1, r0
 800c012:	3b30      	subs	r3, #48	; 0x30
 800c014:	220a      	movs	r2, #10
 800c016:	4630      	mov	r0, r6
 800c018:	f7ff ff8c 	bl	800bf34 <__multadd>
 800c01c:	45a0      	cmp	r8, r4
 800c01e:	d1f5      	bne.n	800c00c <__s2b+0x4c>
 800c020:	f1a5 0408 	sub.w	r4, r5, #8
 800c024:	444c      	add	r4, r9
 800c026:	1b2d      	subs	r5, r5, r4
 800c028:	1963      	adds	r3, r4, r5
 800c02a:	42bb      	cmp	r3, r7
 800c02c:	db04      	blt.n	800c038 <__s2b+0x78>
 800c02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c032:	340a      	adds	r4, #10
 800c034:	2509      	movs	r5, #9
 800c036:	e7f6      	b.n	800c026 <__s2b+0x66>
 800c038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c03c:	4601      	mov	r1, r0
 800c03e:	3b30      	subs	r3, #48	; 0x30
 800c040:	220a      	movs	r2, #10
 800c042:	4630      	mov	r0, r6
 800c044:	f7ff ff76 	bl	800bf34 <__multadd>
 800c048:	e7ee      	b.n	800c028 <__s2b+0x68>
 800c04a:	bf00      	nop
 800c04c:	0800da38 	.word	0x0800da38
 800c050:	0800db28 	.word	0x0800db28

0800c054 <__hi0bits>:
 800c054:	0c03      	lsrs	r3, r0, #16
 800c056:	041b      	lsls	r3, r3, #16
 800c058:	b9d3      	cbnz	r3, 800c090 <__hi0bits+0x3c>
 800c05a:	0400      	lsls	r0, r0, #16
 800c05c:	2310      	movs	r3, #16
 800c05e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c062:	bf04      	itt	eq
 800c064:	0200      	lsleq	r0, r0, #8
 800c066:	3308      	addeq	r3, #8
 800c068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c06c:	bf04      	itt	eq
 800c06e:	0100      	lsleq	r0, r0, #4
 800c070:	3304      	addeq	r3, #4
 800c072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c076:	bf04      	itt	eq
 800c078:	0080      	lsleq	r0, r0, #2
 800c07a:	3302      	addeq	r3, #2
 800c07c:	2800      	cmp	r0, #0
 800c07e:	db05      	blt.n	800c08c <__hi0bits+0x38>
 800c080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c084:	f103 0301 	add.w	r3, r3, #1
 800c088:	bf08      	it	eq
 800c08a:	2320      	moveq	r3, #32
 800c08c:	4618      	mov	r0, r3
 800c08e:	4770      	bx	lr
 800c090:	2300      	movs	r3, #0
 800c092:	e7e4      	b.n	800c05e <__hi0bits+0xa>

0800c094 <__lo0bits>:
 800c094:	6803      	ldr	r3, [r0, #0]
 800c096:	f013 0207 	ands.w	r2, r3, #7
 800c09a:	4601      	mov	r1, r0
 800c09c:	d00b      	beq.n	800c0b6 <__lo0bits+0x22>
 800c09e:	07da      	lsls	r2, r3, #31
 800c0a0:	d423      	bmi.n	800c0ea <__lo0bits+0x56>
 800c0a2:	0798      	lsls	r0, r3, #30
 800c0a4:	bf49      	itett	mi
 800c0a6:	085b      	lsrmi	r3, r3, #1
 800c0a8:	089b      	lsrpl	r3, r3, #2
 800c0aa:	2001      	movmi	r0, #1
 800c0ac:	600b      	strmi	r3, [r1, #0]
 800c0ae:	bf5c      	itt	pl
 800c0b0:	600b      	strpl	r3, [r1, #0]
 800c0b2:	2002      	movpl	r0, #2
 800c0b4:	4770      	bx	lr
 800c0b6:	b298      	uxth	r0, r3
 800c0b8:	b9a8      	cbnz	r0, 800c0e6 <__lo0bits+0x52>
 800c0ba:	0c1b      	lsrs	r3, r3, #16
 800c0bc:	2010      	movs	r0, #16
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	b90a      	cbnz	r2, 800c0c6 <__lo0bits+0x32>
 800c0c2:	3008      	adds	r0, #8
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	071a      	lsls	r2, r3, #28
 800c0c8:	bf04      	itt	eq
 800c0ca:	091b      	lsreq	r3, r3, #4
 800c0cc:	3004      	addeq	r0, #4
 800c0ce:	079a      	lsls	r2, r3, #30
 800c0d0:	bf04      	itt	eq
 800c0d2:	089b      	lsreq	r3, r3, #2
 800c0d4:	3002      	addeq	r0, #2
 800c0d6:	07da      	lsls	r2, r3, #31
 800c0d8:	d403      	bmi.n	800c0e2 <__lo0bits+0x4e>
 800c0da:	085b      	lsrs	r3, r3, #1
 800c0dc:	f100 0001 	add.w	r0, r0, #1
 800c0e0:	d005      	beq.n	800c0ee <__lo0bits+0x5a>
 800c0e2:	600b      	str	r3, [r1, #0]
 800c0e4:	4770      	bx	lr
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	e7e9      	b.n	800c0be <__lo0bits+0x2a>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	4770      	bx	lr
 800c0ee:	2020      	movs	r0, #32
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <__i2b>:
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	f7ff feb9 	bl	800be70 <_Balloc>
 800c0fe:	4602      	mov	r2, r0
 800c100:	b928      	cbnz	r0, 800c10e <__i2b+0x1a>
 800c102:	4b05      	ldr	r3, [pc, #20]	; (800c118 <__i2b+0x24>)
 800c104:	4805      	ldr	r0, [pc, #20]	; (800c11c <__i2b+0x28>)
 800c106:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c10a:	f000 ffaf 	bl	800d06c <__assert_func>
 800c10e:	2301      	movs	r3, #1
 800c110:	6144      	str	r4, [r0, #20]
 800c112:	6103      	str	r3, [r0, #16]
 800c114:	bd10      	pop	{r4, pc}
 800c116:	bf00      	nop
 800c118:	0800da38 	.word	0x0800da38
 800c11c:	0800db28 	.word	0x0800db28

0800c120 <__multiply>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	4691      	mov	r9, r2
 800c126:	690a      	ldr	r2, [r1, #16]
 800c128:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	bfb8      	it	lt
 800c130:	460b      	movlt	r3, r1
 800c132:	460c      	mov	r4, r1
 800c134:	bfbc      	itt	lt
 800c136:	464c      	movlt	r4, r9
 800c138:	4699      	movlt	r9, r3
 800c13a:	6927      	ldr	r7, [r4, #16]
 800c13c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	6861      	ldr	r1, [r4, #4]
 800c144:	eb07 060a 	add.w	r6, r7, sl
 800c148:	42b3      	cmp	r3, r6
 800c14a:	b085      	sub	sp, #20
 800c14c:	bfb8      	it	lt
 800c14e:	3101      	addlt	r1, #1
 800c150:	f7ff fe8e 	bl	800be70 <_Balloc>
 800c154:	b930      	cbnz	r0, 800c164 <__multiply+0x44>
 800c156:	4602      	mov	r2, r0
 800c158:	4b44      	ldr	r3, [pc, #272]	; (800c26c <__multiply+0x14c>)
 800c15a:	4845      	ldr	r0, [pc, #276]	; (800c270 <__multiply+0x150>)
 800c15c:	f240 115d 	movw	r1, #349	; 0x15d
 800c160:	f000 ff84 	bl	800d06c <__assert_func>
 800c164:	f100 0514 	add.w	r5, r0, #20
 800c168:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c16c:	462b      	mov	r3, r5
 800c16e:	2200      	movs	r2, #0
 800c170:	4543      	cmp	r3, r8
 800c172:	d321      	bcc.n	800c1b8 <__multiply+0x98>
 800c174:	f104 0314 	add.w	r3, r4, #20
 800c178:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c17c:	f109 0314 	add.w	r3, r9, #20
 800c180:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c184:	9202      	str	r2, [sp, #8]
 800c186:	1b3a      	subs	r2, r7, r4
 800c188:	3a15      	subs	r2, #21
 800c18a:	f022 0203 	bic.w	r2, r2, #3
 800c18e:	3204      	adds	r2, #4
 800c190:	f104 0115 	add.w	r1, r4, #21
 800c194:	428f      	cmp	r7, r1
 800c196:	bf38      	it	cc
 800c198:	2204      	movcc	r2, #4
 800c19a:	9201      	str	r2, [sp, #4]
 800c19c:	9a02      	ldr	r2, [sp, #8]
 800c19e:	9303      	str	r3, [sp, #12]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d80c      	bhi.n	800c1be <__multiply+0x9e>
 800c1a4:	2e00      	cmp	r6, #0
 800c1a6:	dd03      	ble.n	800c1b0 <__multiply+0x90>
 800c1a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d05a      	beq.n	800c266 <__multiply+0x146>
 800c1b0:	6106      	str	r6, [r0, #16]
 800c1b2:	b005      	add	sp, #20
 800c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b8:	f843 2b04 	str.w	r2, [r3], #4
 800c1bc:	e7d8      	b.n	800c170 <__multiply+0x50>
 800c1be:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1c2:	f1ba 0f00 	cmp.w	sl, #0
 800c1c6:	d024      	beq.n	800c212 <__multiply+0xf2>
 800c1c8:	f104 0e14 	add.w	lr, r4, #20
 800c1cc:	46a9      	mov	r9, r5
 800c1ce:	f04f 0c00 	mov.w	ip, #0
 800c1d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1d6:	f8d9 1000 	ldr.w	r1, [r9]
 800c1da:	fa1f fb82 	uxth.w	fp, r2
 800c1de:	b289      	uxth	r1, r1
 800c1e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c1ec:	4461      	add	r1, ip
 800c1ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1fa:	b289      	uxth	r1, r1
 800c1fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c200:	4577      	cmp	r7, lr
 800c202:	f849 1b04 	str.w	r1, [r9], #4
 800c206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c20a:	d8e2      	bhi.n	800c1d2 <__multiply+0xb2>
 800c20c:	9a01      	ldr	r2, [sp, #4]
 800c20e:	f845 c002 	str.w	ip, [r5, r2]
 800c212:	9a03      	ldr	r2, [sp, #12]
 800c214:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c218:	3304      	adds	r3, #4
 800c21a:	f1b9 0f00 	cmp.w	r9, #0
 800c21e:	d020      	beq.n	800c262 <__multiply+0x142>
 800c220:	6829      	ldr	r1, [r5, #0]
 800c222:	f104 0c14 	add.w	ip, r4, #20
 800c226:	46ae      	mov	lr, r5
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	f8bc b000 	ldrh.w	fp, [ip]
 800c230:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c234:	fb09 220b 	mla	r2, r9, fp, r2
 800c238:	4492      	add	sl, r2
 800c23a:	b289      	uxth	r1, r1
 800c23c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c240:	f84e 1b04 	str.w	r1, [lr], #4
 800c244:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c248:	f8be 1000 	ldrh.w	r1, [lr]
 800c24c:	0c12      	lsrs	r2, r2, #16
 800c24e:	fb09 1102 	mla	r1, r9, r2, r1
 800c252:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c256:	4567      	cmp	r7, ip
 800c258:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c25c:	d8e6      	bhi.n	800c22c <__multiply+0x10c>
 800c25e:	9a01      	ldr	r2, [sp, #4]
 800c260:	50a9      	str	r1, [r5, r2]
 800c262:	3504      	adds	r5, #4
 800c264:	e79a      	b.n	800c19c <__multiply+0x7c>
 800c266:	3e01      	subs	r6, #1
 800c268:	e79c      	b.n	800c1a4 <__multiply+0x84>
 800c26a:	bf00      	nop
 800c26c:	0800da38 	.word	0x0800da38
 800c270:	0800db28 	.word	0x0800db28

0800c274 <__pow5mult>:
 800c274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c278:	4615      	mov	r5, r2
 800c27a:	f012 0203 	ands.w	r2, r2, #3
 800c27e:	4606      	mov	r6, r0
 800c280:	460f      	mov	r7, r1
 800c282:	d007      	beq.n	800c294 <__pow5mult+0x20>
 800c284:	4c25      	ldr	r4, [pc, #148]	; (800c31c <__pow5mult+0xa8>)
 800c286:	3a01      	subs	r2, #1
 800c288:	2300      	movs	r3, #0
 800c28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c28e:	f7ff fe51 	bl	800bf34 <__multadd>
 800c292:	4607      	mov	r7, r0
 800c294:	10ad      	asrs	r5, r5, #2
 800c296:	d03d      	beq.n	800c314 <__pow5mult+0xa0>
 800c298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c29a:	b97c      	cbnz	r4, 800c2bc <__pow5mult+0x48>
 800c29c:	2010      	movs	r0, #16
 800c29e:	f7ff fdbf 	bl	800be20 <malloc>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	6270      	str	r0, [r6, #36]	; 0x24
 800c2a6:	b928      	cbnz	r0, 800c2b4 <__pow5mult+0x40>
 800c2a8:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <__pow5mult+0xac>)
 800c2aa:	481e      	ldr	r0, [pc, #120]	; (800c324 <__pow5mult+0xb0>)
 800c2ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2b0:	f000 fedc 	bl	800d06c <__assert_func>
 800c2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2b8:	6004      	str	r4, [r0, #0]
 800c2ba:	60c4      	str	r4, [r0, #12]
 800c2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2c4:	b94c      	cbnz	r4, 800c2da <__pow5mult+0x66>
 800c2c6:	f240 2171 	movw	r1, #625	; 0x271
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7ff ff12 	bl	800c0f4 <__i2b>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	6003      	str	r3, [r0, #0]
 800c2da:	f04f 0900 	mov.w	r9, #0
 800c2de:	07eb      	lsls	r3, r5, #31
 800c2e0:	d50a      	bpl.n	800c2f8 <__pow5mult+0x84>
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7ff ff1a 	bl	800c120 <__multiply>
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4680      	mov	r8, r0
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff fdfd 	bl	800bef0 <_Bfree>
 800c2f6:	4647      	mov	r7, r8
 800c2f8:	106d      	asrs	r5, r5, #1
 800c2fa:	d00b      	beq.n	800c314 <__pow5mult+0xa0>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	b938      	cbnz	r0, 800c310 <__pow5mult+0x9c>
 800c300:	4622      	mov	r2, r4
 800c302:	4621      	mov	r1, r4
 800c304:	4630      	mov	r0, r6
 800c306:	f7ff ff0b 	bl	800c120 <__multiply>
 800c30a:	6020      	str	r0, [r4, #0]
 800c30c:	f8c0 9000 	str.w	r9, [r0]
 800c310:	4604      	mov	r4, r0
 800c312:	e7e4      	b.n	800c2de <__pow5mult+0x6a>
 800c314:	4638      	mov	r0, r7
 800c316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31a:	bf00      	nop
 800c31c:	0800dc78 	.word	0x0800dc78
 800c320:	0800d9c6 	.word	0x0800d9c6
 800c324:	0800db28 	.word	0x0800db28

0800c328 <__lshift>:
 800c328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c32c:	460c      	mov	r4, r1
 800c32e:	6849      	ldr	r1, [r1, #4]
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	4607      	mov	r7, r0
 800c33a:	4691      	mov	r9, r2
 800c33c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c340:	f108 0601 	add.w	r6, r8, #1
 800c344:	42b3      	cmp	r3, r6
 800c346:	db0b      	blt.n	800c360 <__lshift+0x38>
 800c348:	4638      	mov	r0, r7
 800c34a:	f7ff fd91 	bl	800be70 <_Balloc>
 800c34e:	4605      	mov	r5, r0
 800c350:	b948      	cbnz	r0, 800c366 <__lshift+0x3e>
 800c352:	4602      	mov	r2, r0
 800c354:	4b2a      	ldr	r3, [pc, #168]	; (800c400 <__lshift+0xd8>)
 800c356:	482b      	ldr	r0, [pc, #172]	; (800c404 <__lshift+0xdc>)
 800c358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c35c:	f000 fe86 	bl	800d06c <__assert_func>
 800c360:	3101      	adds	r1, #1
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	e7ee      	b.n	800c344 <__lshift+0x1c>
 800c366:	2300      	movs	r3, #0
 800c368:	f100 0114 	add.w	r1, r0, #20
 800c36c:	f100 0210 	add.w	r2, r0, #16
 800c370:	4618      	mov	r0, r3
 800c372:	4553      	cmp	r3, sl
 800c374:	db37      	blt.n	800c3e6 <__lshift+0xbe>
 800c376:	6920      	ldr	r0, [r4, #16]
 800c378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c37c:	f104 0314 	add.w	r3, r4, #20
 800c380:	f019 091f 	ands.w	r9, r9, #31
 800c384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c38c:	d02f      	beq.n	800c3ee <__lshift+0xc6>
 800c38e:	f1c9 0e20 	rsb	lr, r9, #32
 800c392:	468a      	mov	sl, r1
 800c394:	f04f 0c00 	mov.w	ip, #0
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	fa02 f209 	lsl.w	r2, r2, r9
 800c39e:	ea42 020c 	orr.w	r2, r2, ip
 800c3a2:	f84a 2b04 	str.w	r2, [sl], #4
 800c3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3aa:	4298      	cmp	r0, r3
 800c3ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3b0:	d8f2      	bhi.n	800c398 <__lshift+0x70>
 800c3b2:	1b03      	subs	r3, r0, r4
 800c3b4:	3b15      	subs	r3, #21
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	f104 0215 	add.w	r2, r4, #21
 800c3c0:	4290      	cmp	r0, r2
 800c3c2:	bf38      	it	cc
 800c3c4:	2304      	movcc	r3, #4
 800c3c6:	f841 c003 	str.w	ip, [r1, r3]
 800c3ca:	f1bc 0f00 	cmp.w	ip, #0
 800c3ce:	d001      	beq.n	800c3d4 <__lshift+0xac>
 800c3d0:	f108 0602 	add.w	r6, r8, #2
 800c3d4:	3e01      	subs	r6, #1
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	612e      	str	r6, [r5, #16]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f7ff fd88 	bl	800bef0 <_Bfree>
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	e7c1      	b.n	800c372 <__lshift+0x4a>
 800c3ee:	3904      	subs	r1, #4
 800c3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	d8f9      	bhi.n	800c3f0 <__lshift+0xc8>
 800c3fc:	e7ea      	b.n	800c3d4 <__lshift+0xac>
 800c3fe:	bf00      	nop
 800c400:	0800da38 	.word	0x0800da38
 800c404:	0800db28 	.word	0x0800db28

0800c408 <__mcmp>:
 800c408:	b530      	push	{r4, r5, lr}
 800c40a:	6902      	ldr	r2, [r0, #16]
 800c40c:	690c      	ldr	r4, [r1, #16]
 800c40e:	1b12      	subs	r2, r2, r4
 800c410:	d10e      	bne.n	800c430 <__mcmp+0x28>
 800c412:	f100 0314 	add.w	r3, r0, #20
 800c416:	3114      	adds	r1, #20
 800c418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c41c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c428:	42a5      	cmp	r5, r4
 800c42a:	d003      	beq.n	800c434 <__mcmp+0x2c>
 800c42c:	d305      	bcc.n	800c43a <__mcmp+0x32>
 800c42e:	2201      	movs	r2, #1
 800c430:	4610      	mov	r0, r2
 800c432:	bd30      	pop	{r4, r5, pc}
 800c434:	4283      	cmp	r3, r0
 800c436:	d3f3      	bcc.n	800c420 <__mcmp+0x18>
 800c438:	e7fa      	b.n	800c430 <__mcmp+0x28>
 800c43a:	f04f 32ff 	mov.w	r2, #4294967295
 800c43e:	e7f7      	b.n	800c430 <__mcmp+0x28>

0800c440 <__mdiff>:
 800c440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	460c      	mov	r4, r1
 800c446:	4606      	mov	r6, r0
 800c448:	4611      	mov	r1, r2
 800c44a:	4620      	mov	r0, r4
 800c44c:	4690      	mov	r8, r2
 800c44e:	f7ff ffdb 	bl	800c408 <__mcmp>
 800c452:	1e05      	subs	r5, r0, #0
 800c454:	d110      	bne.n	800c478 <__mdiff+0x38>
 800c456:	4629      	mov	r1, r5
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff fd09 	bl	800be70 <_Balloc>
 800c45e:	b930      	cbnz	r0, 800c46e <__mdiff+0x2e>
 800c460:	4b3a      	ldr	r3, [pc, #232]	; (800c54c <__mdiff+0x10c>)
 800c462:	4602      	mov	r2, r0
 800c464:	f240 2132 	movw	r1, #562	; 0x232
 800c468:	4839      	ldr	r0, [pc, #228]	; (800c550 <__mdiff+0x110>)
 800c46a:	f000 fdff 	bl	800d06c <__assert_func>
 800c46e:	2301      	movs	r3, #1
 800c470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	bfa4      	itt	ge
 800c47a:	4643      	movge	r3, r8
 800c47c:	46a0      	movge	r8, r4
 800c47e:	4630      	mov	r0, r6
 800c480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c484:	bfa6      	itte	ge
 800c486:	461c      	movge	r4, r3
 800c488:	2500      	movge	r5, #0
 800c48a:	2501      	movlt	r5, #1
 800c48c:	f7ff fcf0 	bl	800be70 <_Balloc>
 800c490:	b920      	cbnz	r0, 800c49c <__mdiff+0x5c>
 800c492:	4b2e      	ldr	r3, [pc, #184]	; (800c54c <__mdiff+0x10c>)
 800c494:	4602      	mov	r2, r0
 800c496:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c49a:	e7e5      	b.n	800c468 <__mdiff+0x28>
 800c49c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4a0:	6926      	ldr	r6, [r4, #16]
 800c4a2:	60c5      	str	r5, [r0, #12]
 800c4a4:	f104 0914 	add.w	r9, r4, #20
 800c4a8:	f108 0514 	add.w	r5, r8, #20
 800c4ac:	f100 0e14 	add.w	lr, r0, #20
 800c4b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4b8:	f108 0210 	add.w	r2, r8, #16
 800c4bc:	46f2      	mov	sl, lr
 800c4be:	2100      	movs	r1, #0
 800c4c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4c8:	fa1f f883 	uxth.w	r8, r3
 800c4cc:	fa11 f18b 	uxtah	r1, r1, fp
 800c4d0:	0c1b      	lsrs	r3, r3, #16
 800c4d2:	eba1 0808 	sub.w	r8, r1, r8
 800c4d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4de:	fa1f f888 	uxth.w	r8, r8
 800c4e2:	1419      	asrs	r1, r3, #16
 800c4e4:	454e      	cmp	r6, r9
 800c4e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4ea:	f84a 3b04 	str.w	r3, [sl], #4
 800c4ee:	d8e7      	bhi.n	800c4c0 <__mdiff+0x80>
 800c4f0:	1b33      	subs	r3, r6, r4
 800c4f2:	3b15      	subs	r3, #21
 800c4f4:	f023 0303 	bic.w	r3, r3, #3
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	3415      	adds	r4, #21
 800c4fc:	42a6      	cmp	r6, r4
 800c4fe:	bf38      	it	cc
 800c500:	2304      	movcc	r3, #4
 800c502:	441d      	add	r5, r3
 800c504:	4473      	add	r3, lr
 800c506:	469e      	mov	lr, r3
 800c508:	462e      	mov	r6, r5
 800c50a:	4566      	cmp	r6, ip
 800c50c:	d30e      	bcc.n	800c52c <__mdiff+0xec>
 800c50e:	f10c 0203 	add.w	r2, ip, #3
 800c512:	1b52      	subs	r2, r2, r5
 800c514:	f022 0203 	bic.w	r2, r2, #3
 800c518:	3d03      	subs	r5, #3
 800c51a:	45ac      	cmp	ip, r5
 800c51c:	bf38      	it	cc
 800c51e:	2200      	movcc	r2, #0
 800c520:	441a      	add	r2, r3
 800c522:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c526:	b17b      	cbz	r3, 800c548 <__mdiff+0x108>
 800c528:	6107      	str	r7, [r0, #16]
 800c52a:	e7a3      	b.n	800c474 <__mdiff+0x34>
 800c52c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c530:	fa11 f288 	uxtah	r2, r1, r8
 800c534:	1414      	asrs	r4, r2, #16
 800c536:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c53a:	b292      	uxth	r2, r2
 800c53c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c540:	f84e 2b04 	str.w	r2, [lr], #4
 800c544:	1421      	asrs	r1, r4, #16
 800c546:	e7e0      	b.n	800c50a <__mdiff+0xca>
 800c548:	3f01      	subs	r7, #1
 800c54a:	e7ea      	b.n	800c522 <__mdiff+0xe2>
 800c54c:	0800da38 	.word	0x0800da38
 800c550:	0800db28 	.word	0x0800db28

0800c554 <__ulp>:
 800c554:	b082      	sub	sp, #8
 800c556:	ed8d 0b00 	vstr	d0, [sp]
 800c55a:	9b01      	ldr	r3, [sp, #4]
 800c55c:	4912      	ldr	r1, [pc, #72]	; (800c5a8 <__ulp+0x54>)
 800c55e:	4019      	ands	r1, r3
 800c560:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c564:	2900      	cmp	r1, #0
 800c566:	dd05      	ble.n	800c574 <__ulp+0x20>
 800c568:	2200      	movs	r2, #0
 800c56a:	460b      	mov	r3, r1
 800c56c:	ec43 2b10 	vmov	d0, r2, r3
 800c570:	b002      	add	sp, #8
 800c572:	4770      	bx	lr
 800c574:	4249      	negs	r1, r1
 800c576:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c57a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	f04f 0300 	mov.w	r3, #0
 800c586:	da04      	bge.n	800c592 <__ulp+0x3e>
 800c588:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c58c:	fa41 f300 	asr.w	r3, r1, r0
 800c590:	e7ec      	b.n	800c56c <__ulp+0x18>
 800c592:	f1a0 0114 	sub.w	r1, r0, #20
 800c596:	291e      	cmp	r1, #30
 800c598:	bfda      	itte	le
 800c59a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c59e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c5a2:	2101      	movgt	r1, #1
 800c5a4:	460a      	mov	r2, r1
 800c5a6:	e7e1      	b.n	800c56c <__ulp+0x18>
 800c5a8:	7ff00000 	.word	0x7ff00000

0800c5ac <__b2d>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	6905      	ldr	r5, [r0, #16]
 800c5b0:	f100 0714 	add.w	r7, r0, #20
 800c5b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c5b8:	1f2e      	subs	r6, r5, #4
 800c5ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7ff fd48 	bl	800c054 <__hi0bits>
 800c5c4:	f1c0 0320 	rsb	r3, r0, #32
 800c5c8:	280a      	cmp	r0, #10
 800c5ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c648 <__b2d+0x9c>
 800c5ce:	600b      	str	r3, [r1, #0]
 800c5d0:	dc14      	bgt.n	800c5fc <__b2d+0x50>
 800c5d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c5d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c5da:	42b7      	cmp	r7, r6
 800c5dc:	ea41 030c 	orr.w	r3, r1, ip
 800c5e0:	bf34      	ite	cc
 800c5e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c5e6:	2100      	movcs	r1, #0
 800c5e8:	3015      	adds	r0, #21
 800c5ea:	fa04 f000 	lsl.w	r0, r4, r0
 800c5ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800c5f2:	ea40 0201 	orr.w	r2, r0, r1
 800c5f6:	ec43 2b10 	vmov	d0, r2, r3
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5fc:	42b7      	cmp	r7, r6
 800c5fe:	bf3a      	itte	cc
 800c600:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c604:	f1a5 0608 	subcc.w	r6, r5, #8
 800c608:	2100      	movcs	r1, #0
 800c60a:	380b      	subs	r0, #11
 800c60c:	d017      	beq.n	800c63e <__b2d+0x92>
 800c60e:	f1c0 0c20 	rsb	ip, r0, #32
 800c612:	fa04 f500 	lsl.w	r5, r4, r0
 800c616:	42be      	cmp	r6, r7
 800c618:	fa21 f40c 	lsr.w	r4, r1, ip
 800c61c:	ea45 0504 	orr.w	r5, r5, r4
 800c620:	bf8c      	ite	hi
 800c622:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c626:	2400      	movls	r4, #0
 800c628:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c62c:	fa01 f000 	lsl.w	r0, r1, r0
 800c630:	fa24 f40c 	lsr.w	r4, r4, ip
 800c634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c638:	ea40 0204 	orr.w	r2, r0, r4
 800c63c:	e7db      	b.n	800c5f6 <__b2d+0x4a>
 800c63e:	ea44 030c 	orr.w	r3, r4, ip
 800c642:	460a      	mov	r2, r1
 800c644:	e7d7      	b.n	800c5f6 <__b2d+0x4a>
 800c646:	bf00      	nop
 800c648:	3ff00000 	.word	0x3ff00000

0800c64c <__d2b>:
 800c64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c650:	4689      	mov	r9, r1
 800c652:	2101      	movs	r1, #1
 800c654:	ec57 6b10 	vmov	r6, r7, d0
 800c658:	4690      	mov	r8, r2
 800c65a:	f7ff fc09 	bl	800be70 <_Balloc>
 800c65e:	4604      	mov	r4, r0
 800c660:	b930      	cbnz	r0, 800c670 <__d2b+0x24>
 800c662:	4602      	mov	r2, r0
 800c664:	4b25      	ldr	r3, [pc, #148]	; (800c6fc <__d2b+0xb0>)
 800c666:	4826      	ldr	r0, [pc, #152]	; (800c700 <__d2b+0xb4>)
 800c668:	f240 310a 	movw	r1, #778	; 0x30a
 800c66c:	f000 fcfe 	bl	800d06c <__assert_func>
 800c670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c678:	bb35      	cbnz	r5, 800c6c8 <__d2b+0x7c>
 800c67a:	2e00      	cmp	r6, #0
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	d028      	beq.n	800c6d2 <__d2b+0x86>
 800c680:	4668      	mov	r0, sp
 800c682:	9600      	str	r6, [sp, #0]
 800c684:	f7ff fd06 	bl	800c094 <__lo0bits>
 800c688:	9900      	ldr	r1, [sp, #0]
 800c68a:	b300      	cbz	r0, 800c6ce <__d2b+0x82>
 800c68c:	9a01      	ldr	r2, [sp, #4]
 800c68e:	f1c0 0320 	rsb	r3, r0, #32
 800c692:	fa02 f303 	lsl.w	r3, r2, r3
 800c696:	430b      	orrs	r3, r1
 800c698:	40c2      	lsrs	r2, r0
 800c69a:	6163      	str	r3, [r4, #20]
 800c69c:	9201      	str	r2, [sp, #4]
 800c69e:	9b01      	ldr	r3, [sp, #4]
 800c6a0:	61a3      	str	r3, [r4, #24]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bf14      	ite	ne
 800c6a6:	2202      	movne	r2, #2
 800c6a8:	2201      	moveq	r2, #1
 800c6aa:	6122      	str	r2, [r4, #16]
 800c6ac:	b1d5      	cbz	r5, 800c6e4 <__d2b+0x98>
 800c6ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6b2:	4405      	add	r5, r0
 800c6b4:	f8c9 5000 	str.w	r5, [r9]
 800c6b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6bc:	f8c8 0000 	str.w	r0, [r8]
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	b003      	add	sp, #12
 800c6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6cc:	e7d5      	b.n	800c67a <__d2b+0x2e>
 800c6ce:	6161      	str	r1, [r4, #20]
 800c6d0:	e7e5      	b.n	800c69e <__d2b+0x52>
 800c6d2:	a801      	add	r0, sp, #4
 800c6d4:	f7ff fcde 	bl	800c094 <__lo0bits>
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	6163      	str	r3, [r4, #20]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	6122      	str	r2, [r4, #16]
 800c6e0:	3020      	adds	r0, #32
 800c6e2:	e7e3      	b.n	800c6ac <__d2b+0x60>
 800c6e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6ec:	f8c9 0000 	str.w	r0, [r9]
 800c6f0:	6918      	ldr	r0, [r3, #16]
 800c6f2:	f7ff fcaf 	bl	800c054 <__hi0bits>
 800c6f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6fa:	e7df      	b.n	800c6bc <__d2b+0x70>
 800c6fc:	0800da38 	.word	0x0800da38
 800c700:	0800db28 	.word	0x0800db28

0800c704 <__ratio>:
 800c704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	4688      	mov	r8, r1
 800c70a:	4669      	mov	r1, sp
 800c70c:	4681      	mov	r9, r0
 800c70e:	f7ff ff4d 	bl	800c5ac <__b2d>
 800c712:	a901      	add	r1, sp, #4
 800c714:	4640      	mov	r0, r8
 800c716:	ec55 4b10 	vmov	r4, r5, d0
 800c71a:	f7ff ff47 	bl	800c5ac <__b2d>
 800c71e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c722:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c726:	eba3 0c02 	sub.w	ip, r3, r2
 800c72a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c734:	ec51 0b10 	vmov	r0, r1, d0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfd6      	itet	le
 800c73c:	460a      	movle	r2, r1
 800c73e:	462a      	movgt	r2, r5
 800c740:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c744:	468b      	mov	fp, r1
 800c746:	462f      	mov	r7, r5
 800c748:	bfd4      	ite	le
 800c74a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c74e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c752:	4620      	mov	r0, r4
 800c754:	ee10 2a10 	vmov	r2, s0
 800c758:	465b      	mov	r3, fp
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f4 f896 	bl	800088c <__aeabi_ddiv>
 800c760:	ec41 0b10 	vmov	d0, r0, r1
 800c764:	b003      	add	sp, #12
 800c766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c76a <__copybits>:
 800c76a:	3901      	subs	r1, #1
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	1149      	asrs	r1, r1, #5
 800c770:	6914      	ldr	r4, [r2, #16]
 800c772:	3101      	adds	r1, #1
 800c774:	f102 0314 	add.w	r3, r2, #20
 800c778:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c77c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c780:	1f05      	subs	r5, r0, #4
 800c782:	42a3      	cmp	r3, r4
 800c784:	d30c      	bcc.n	800c7a0 <__copybits+0x36>
 800c786:	1aa3      	subs	r3, r4, r2
 800c788:	3b11      	subs	r3, #17
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	3211      	adds	r2, #17
 800c790:	42a2      	cmp	r2, r4
 800c792:	bf88      	it	hi
 800c794:	2300      	movhi	r3, #0
 800c796:	4418      	add	r0, r3
 800c798:	2300      	movs	r3, #0
 800c79a:	4288      	cmp	r0, r1
 800c79c:	d305      	bcc.n	800c7aa <__copybits+0x40>
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7a8:	e7eb      	b.n	800c782 <__copybits+0x18>
 800c7aa:	f840 3b04 	str.w	r3, [r0], #4
 800c7ae:	e7f4      	b.n	800c79a <__copybits+0x30>

0800c7b0 <__any_on>:
 800c7b0:	f100 0214 	add.w	r2, r0, #20
 800c7b4:	6900      	ldr	r0, [r0, #16]
 800c7b6:	114b      	asrs	r3, r1, #5
 800c7b8:	4298      	cmp	r0, r3
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	db11      	blt.n	800c7e2 <__any_on+0x32>
 800c7be:	dd0a      	ble.n	800c7d6 <__any_on+0x26>
 800c7c0:	f011 011f 	ands.w	r1, r1, #31
 800c7c4:	d007      	beq.n	800c7d6 <__any_on+0x26>
 800c7c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7ca:	fa24 f001 	lsr.w	r0, r4, r1
 800c7ce:	fa00 f101 	lsl.w	r1, r0, r1
 800c7d2:	428c      	cmp	r4, r1
 800c7d4:	d10b      	bne.n	800c7ee <__any_on+0x3e>
 800c7d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d803      	bhi.n	800c7e6 <__any_on+0x36>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	bd10      	pop	{r4, pc}
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	e7f7      	b.n	800c7d6 <__any_on+0x26>
 800c7e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7ea:	2900      	cmp	r1, #0
 800c7ec:	d0f5      	beq.n	800c7da <__any_on+0x2a>
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	e7f6      	b.n	800c7e0 <__any_on+0x30>

0800c7f2 <_calloc_r>:
 800c7f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7f4:	fba1 2402 	umull	r2, r4, r1, r2
 800c7f8:	b94c      	cbnz	r4, 800c80e <_calloc_r+0x1c>
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	9201      	str	r2, [sp, #4]
 800c7fe:	f000 f87b 	bl	800c8f8 <_malloc_r>
 800c802:	9a01      	ldr	r2, [sp, #4]
 800c804:	4605      	mov	r5, r0
 800c806:	b930      	cbnz	r0, 800c816 <_calloc_r+0x24>
 800c808:	4628      	mov	r0, r5
 800c80a:	b003      	add	sp, #12
 800c80c:	bd30      	pop	{r4, r5, pc}
 800c80e:	220c      	movs	r2, #12
 800c810:	6002      	str	r2, [r0, #0]
 800c812:	2500      	movs	r5, #0
 800c814:	e7f8      	b.n	800c808 <_calloc_r+0x16>
 800c816:	4621      	mov	r1, r4
 800c818:	f7fb ff38 	bl	800868c <memset>
 800c81c:	e7f4      	b.n	800c808 <_calloc_r+0x16>
	...

0800c820 <_free_r>:
 800c820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c822:	2900      	cmp	r1, #0
 800c824:	d044      	beq.n	800c8b0 <_free_r+0x90>
 800c826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c82a:	9001      	str	r0, [sp, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f1a1 0404 	sub.w	r4, r1, #4
 800c832:	bfb8      	it	lt
 800c834:	18e4      	addlt	r4, r4, r3
 800c836:	f000 fca7 	bl	800d188 <__malloc_lock>
 800c83a:	4a1e      	ldr	r2, [pc, #120]	; (800c8b4 <_free_r+0x94>)
 800c83c:	9801      	ldr	r0, [sp, #4]
 800c83e:	6813      	ldr	r3, [r2, #0]
 800c840:	b933      	cbnz	r3, 800c850 <_free_r+0x30>
 800c842:	6063      	str	r3, [r4, #4]
 800c844:	6014      	str	r4, [r2, #0]
 800c846:	b003      	add	sp, #12
 800c848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c84c:	f000 bca2 	b.w	800d194 <__malloc_unlock>
 800c850:	42a3      	cmp	r3, r4
 800c852:	d908      	bls.n	800c866 <_free_r+0x46>
 800c854:	6825      	ldr	r5, [r4, #0]
 800c856:	1961      	adds	r1, r4, r5
 800c858:	428b      	cmp	r3, r1
 800c85a:	bf01      	itttt	eq
 800c85c:	6819      	ldreq	r1, [r3, #0]
 800c85e:	685b      	ldreq	r3, [r3, #4]
 800c860:	1949      	addeq	r1, r1, r5
 800c862:	6021      	streq	r1, [r4, #0]
 800c864:	e7ed      	b.n	800c842 <_free_r+0x22>
 800c866:	461a      	mov	r2, r3
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	b10b      	cbz	r3, 800c870 <_free_r+0x50>
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	d9fa      	bls.n	800c866 <_free_r+0x46>
 800c870:	6811      	ldr	r1, [r2, #0]
 800c872:	1855      	adds	r5, r2, r1
 800c874:	42a5      	cmp	r5, r4
 800c876:	d10b      	bne.n	800c890 <_free_r+0x70>
 800c878:	6824      	ldr	r4, [r4, #0]
 800c87a:	4421      	add	r1, r4
 800c87c:	1854      	adds	r4, r2, r1
 800c87e:	42a3      	cmp	r3, r4
 800c880:	6011      	str	r1, [r2, #0]
 800c882:	d1e0      	bne.n	800c846 <_free_r+0x26>
 800c884:	681c      	ldr	r4, [r3, #0]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	6053      	str	r3, [r2, #4]
 800c88a:	4421      	add	r1, r4
 800c88c:	6011      	str	r1, [r2, #0]
 800c88e:	e7da      	b.n	800c846 <_free_r+0x26>
 800c890:	d902      	bls.n	800c898 <_free_r+0x78>
 800c892:	230c      	movs	r3, #12
 800c894:	6003      	str	r3, [r0, #0]
 800c896:	e7d6      	b.n	800c846 <_free_r+0x26>
 800c898:	6825      	ldr	r5, [r4, #0]
 800c89a:	1961      	adds	r1, r4, r5
 800c89c:	428b      	cmp	r3, r1
 800c89e:	bf04      	itt	eq
 800c8a0:	6819      	ldreq	r1, [r3, #0]
 800c8a2:	685b      	ldreq	r3, [r3, #4]
 800c8a4:	6063      	str	r3, [r4, #4]
 800c8a6:	bf04      	itt	eq
 800c8a8:	1949      	addeq	r1, r1, r5
 800c8aa:	6021      	streq	r1, [r4, #0]
 800c8ac:	6054      	str	r4, [r2, #4]
 800c8ae:	e7ca      	b.n	800c846 <_free_r+0x26>
 800c8b0:	b003      	add	sp, #12
 800c8b2:	bd30      	pop	{r4, r5, pc}
 800c8b4:	200006e4 	.word	0x200006e4

0800c8b8 <sbrk_aligned>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	4e0e      	ldr	r6, [pc, #56]	; (800c8f4 <sbrk_aligned+0x3c>)
 800c8bc:	460c      	mov	r4, r1
 800c8be:	6831      	ldr	r1, [r6, #0]
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	b911      	cbnz	r1, 800c8ca <sbrk_aligned+0x12>
 800c8c4:	f000 fb4c 	bl	800cf60 <_sbrk_r>
 800c8c8:	6030      	str	r0, [r6, #0]
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f000 fb47 	bl	800cf60 <_sbrk_r>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	d00a      	beq.n	800c8ec <sbrk_aligned+0x34>
 800c8d6:	1cc4      	adds	r4, r0, #3
 800c8d8:	f024 0403 	bic.w	r4, r4, #3
 800c8dc:	42a0      	cmp	r0, r4
 800c8de:	d007      	beq.n	800c8f0 <sbrk_aligned+0x38>
 800c8e0:	1a21      	subs	r1, r4, r0
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 fb3c 	bl	800cf60 <_sbrk_r>
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d101      	bne.n	800c8f0 <sbrk_aligned+0x38>
 800c8ec:	f04f 34ff 	mov.w	r4, #4294967295
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	200006e8 	.word	0x200006e8

0800c8f8 <_malloc_r>:
 800c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	1ccd      	adds	r5, r1, #3
 800c8fe:	f025 0503 	bic.w	r5, r5, #3
 800c902:	3508      	adds	r5, #8
 800c904:	2d0c      	cmp	r5, #12
 800c906:	bf38      	it	cc
 800c908:	250c      	movcc	r5, #12
 800c90a:	2d00      	cmp	r5, #0
 800c90c:	4607      	mov	r7, r0
 800c90e:	db01      	blt.n	800c914 <_malloc_r+0x1c>
 800c910:	42a9      	cmp	r1, r5
 800c912:	d905      	bls.n	800c920 <_malloc_r+0x28>
 800c914:	230c      	movs	r3, #12
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	2600      	movs	r6, #0
 800c91a:	4630      	mov	r0, r6
 800c91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c920:	4e2e      	ldr	r6, [pc, #184]	; (800c9dc <_malloc_r+0xe4>)
 800c922:	f000 fc31 	bl	800d188 <__malloc_lock>
 800c926:	6833      	ldr	r3, [r6, #0]
 800c928:	461c      	mov	r4, r3
 800c92a:	bb34      	cbnz	r4, 800c97a <_malloc_r+0x82>
 800c92c:	4629      	mov	r1, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	f7ff ffc2 	bl	800c8b8 <sbrk_aligned>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	4604      	mov	r4, r0
 800c938:	d14d      	bne.n	800c9d6 <_malloc_r+0xde>
 800c93a:	6834      	ldr	r4, [r6, #0]
 800c93c:	4626      	mov	r6, r4
 800c93e:	2e00      	cmp	r6, #0
 800c940:	d140      	bne.n	800c9c4 <_malloc_r+0xcc>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	4631      	mov	r1, r6
 800c946:	4638      	mov	r0, r7
 800c948:	eb04 0803 	add.w	r8, r4, r3
 800c94c:	f000 fb08 	bl	800cf60 <_sbrk_r>
 800c950:	4580      	cmp	r8, r0
 800c952:	d13a      	bne.n	800c9ca <_malloc_r+0xd2>
 800c954:	6821      	ldr	r1, [r4, #0]
 800c956:	3503      	adds	r5, #3
 800c958:	1a6d      	subs	r5, r5, r1
 800c95a:	f025 0503 	bic.w	r5, r5, #3
 800c95e:	3508      	adds	r5, #8
 800c960:	2d0c      	cmp	r5, #12
 800c962:	bf38      	it	cc
 800c964:	250c      	movcc	r5, #12
 800c966:	4629      	mov	r1, r5
 800c968:	4638      	mov	r0, r7
 800c96a:	f7ff ffa5 	bl	800c8b8 <sbrk_aligned>
 800c96e:	3001      	adds	r0, #1
 800c970:	d02b      	beq.n	800c9ca <_malloc_r+0xd2>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	442b      	add	r3, r5
 800c976:	6023      	str	r3, [r4, #0]
 800c978:	e00e      	b.n	800c998 <_malloc_r+0xa0>
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	1b52      	subs	r2, r2, r5
 800c97e:	d41e      	bmi.n	800c9be <_malloc_r+0xc6>
 800c980:	2a0b      	cmp	r2, #11
 800c982:	d916      	bls.n	800c9b2 <_malloc_r+0xba>
 800c984:	1961      	adds	r1, r4, r5
 800c986:	42a3      	cmp	r3, r4
 800c988:	6025      	str	r5, [r4, #0]
 800c98a:	bf18      	it	ne
 800c98c:	6059      	strne	r1, [r3, #4]
 800c98e:	6863      	ldr	r3, [r4, #4]
 800c990:	bf08      	it	eq
 800c992:	6031      	streq	r1, [r6, #0]
 800c994:	5162      	str	r2, [r4, r5]
 800c996:	604b      	str	r3, [r1, #4]
 800c998:	4638      	mov	r0, r7
 800c99a:	f104 060b 	add.w	r6, r4, #11
 800c99e:	f000 fbf9 	bl	800d194 <__malloc_unlock>
 800c9a2:	f026 0607 	bic.w	r6, r6, #7
 800c9a6:	1d23      	adds	r3, r4, #4
 800c9a8:	1af2      	subs	r2, r6, r3
 800c9aa:	d0b6      	beq.n	800c91a <_malloc_r+0x22>
 800c9ac:	1b9b      	subs	r3, r3, r6
 800c9ae:	50a3      	str	r3, [r4, r2]
 800c9b0:	e7b3      	b.n	800c91a <_malloc_r+0x22>
 800c9b2:	6862      	ldr	r2, [r4, #4]
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	bf0c      	ite	eq
 800c9b8:	6032      	streq	r2, [r6, #0]
 800c9ba:	605a      	strne	r2, [r3, #4]
 800c9bc:	e7ec      	b.n	800c998 <_malloc_r+0xa0>
 800c9be:	4623      	mov	r3, r4
 800c9c0:	6864      	ldr	r4, [r4, #4]
 800c9c2:	e7b2      	b.n	800c92a <_malloc_r+0x32>
 800c9c4:	4634      	mov	r4, r6
 800c9c6:	6876      	ldr	r6, [r6, #4]
 800c9c8:	e7b9      	b.n	800c93e <_malloc_r+0x46>
 800c9ca:	230c      	movs	r3, #12
 800c9cc:	603b      	str	r3, [r7, #0]
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f000 fbe0 	bl	800d194 <__malloc_unlock>
 800c9d4:	e7a1      	b.n	800c91a <_malloc_r+0x22>
 800c9d6:	6025      	str	r5, [r4, #0]
 800c9d8:	e7de      	b.n	800c998 <_malloc_r+0xa0>
 800c9da:	bf00      	nop
 800c9dc:	200006e4 	.word	0x200006e4

0800c9e0 <__ssputs_r>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	688e      	ldr	r6, [r1, #8]
 800c9e6:	429e      	cmp	r6, r3
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	4690      	mov	r8, r2
 800c9ee:	461f      	mov	r7, r3
 800c9f0:	d838      	bhi.n	800ca64 <__ssputs_r+0x84>
 800c9f2:	898a      	ldrh	r2, [r1, #12]
 800c9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9f8:	d032      	beq.n	800ca60 <__ssputs_r+0x80>
 800c9fa:	6825      	ldr	r5, [r4, #0]
 800c9fc:	6909      	ldr	r1, [r1, #16]
 800c9fe:	eba5 0901 	sub.w	r9, r5, r1
 800ca02:	6965      	ldr	r5, [r4, #20]
 800ca04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	444b      	add	r3, r9
 800ca10:	106d      	asrs	r5, r5, #1
 800ca12:	429d      	cmp	r5, r3
 800ca14:	bf38      	it	cc
 800ca16:	461d      	movcc	r5, r3
 800ca18:	0553      	lsls	r3, r2, #21
 800ca1a:	d531      	bpl.n	800ca80 <__ssputs_r+0xa0>
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	f7ff ff6b 	bl	800c8f8 <_malloc_r>
 800ca22:	4606      	mov	r6, r0
 800ca24:	b950      	cbnz	r0, 800ca3c <__ssputs_r+0x5c>
 800ca26:	230c      	movs	r3, #12
 800ca28:	f8ca 3000 	str.w	r3, [sl]
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	f04f 30ff 	mov.w	r0, #4294967295
 800ca38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca3c:	6921      	ldr	r1, [r4, #16]
 800ca3e:	464a      	mov	r2, r9
 800ca40:	f7ff fa08 	bl	800be54 <memcpy>
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca4e:	81a3      	strh	r3, [r4, #12]
 800ca50:	6126      	str	r6, [r4, #16]
 800ca52:	6165      	str	r5, [r4, #20]
 800ca54:	444e      	add	r6, r9
 800ca56:	eba5 0509 	sub.w	r5, r5, r9
 800ca5a:	6026      	str	r6, [r4, #0]
 800ca5c:	60a5      	str	r5, [r4, #8]
 800ca5e:	463e      	mov	r6, r7
 800ca60:	42be      	cmp	r6, r7
 800ca62:	d900      	bls.n	800ca66 <__ssputs_r+0x86>
 800ca64:	463e      	mov	r6, r7
 800ca66:	6820      	ldr	r0, [r4, #0]
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4641      	mov	r1, r8
 800ca6c:	f000 fb72 	bl	800d154 <memmove>
 800ca70:	68a3      	ldr	r3, [r4, #8]
 800ca72:	1b9b      	subs	r3, r3, r6
 800ca74:	60a3      	str	r3, [r4, #8]
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	4433      	add	r3, r6
 800ca7a:	6023      	str	r3, [r4, #0]
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7db      	b.n	800ca38 <__ssputs_r+0x58>
 800ca80:	462a      	mov	r2, r5
 800ca82:	f000 fb8d 	bl	800d1a0 <_realloc_r>
 800ca86:	4606      	mov	r6, r0
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d1e1      	bne.n	800ca50 <__ssputs_r+0x70>
 800ca8c:	6921      	ldr	r1, [r4, #16]
 800ca8e:	4650      	mov	r0, sl
 800ca90:	f7ff fec6 	bl	800c820 <_free_r>
 800ca94:	e7c7      	b.n	800ca26 <__ssputs_r+0x46>
	...

0800ca98 <_svfiprintf_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	4698      	mov	r8, r3
 800ca9e:	898b      	ldrh	r3, [r1, #12]
 800caa0:	061b      	lsls	r3, r3, #24
 800caa2:	b09d      	sub	sp, #116	; 0x74
 800caa4:	4607      	mov	r7, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	4614      	mov	r4, r2
 800caaa:	d50e      	bpl.n	800caca <_svfiprintf_r+0x32>
 800caac:	690b      	ldr	r3, [r1, #16]
 800caae:	b963      	cbnz	r3, 800caca <_svfiprintf_r+0x32>
 800cab0:	2140      	movs	r1, #64	; 0x40
 800cab2:	f7ff ff21 	bl	800c8f8 <_malloc_r>
 800cab6:	6028      	str	r0, [r5, #0]
 800cab8:	6128      	str	r0, [r5, #16]
 800caba:	b920      	cbnz	r0, 800cac6 <_svfiprintf_r+0x2e>
 800cabc:	230c      	movs	r3, #12
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	e0d1      	b.n	800cc6a <_svfiprintf_r+0x1d2>
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	616b      	str	r3, [r5, #20]
 800caca:	2300      	movs	r3, #0
 800cacc:	9309      	str	r3, [sp, #36]	; 0x24
 800cace:	2320      	movs	r3, #32
 800cad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cad8:	2330      	movs	r3, #48	; 0x30
 800cada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc84 <_svfiprintf_r+0x1ec>
 800cade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae2:	f04f 0901 	mov.w	r9, #1
 800cae6:	4623      	mov	r3, r4
 800cae8:	469a      	mov	sl, r3
 800caea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caee:	b10a      	cbz	r2, 800caf4 <_svfiprintf_r+0x5c>
 800caf0:	2a25      	cmp	r2, #37	; 0x25
 800caf2:	d1f9      	bne.n	800cae8 <_svfiprintf_r+0x50>
 800caf4:	ebba 0b04 	subs.w	fp, sl, r4
 800caf8:	d00b      	beq.n	800cb12 <_svfiprintf_r+0x7a>
 800cafa:	465b      	mov	r3, fp
 800cafc:	4622      	mov	r2, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ff6d 	bl	800c9e0 <__ssputs_r>
 800cb06:	3001      	adds	r0, #1
 800cb08:	f000 80aa 	beq.w	800cc60 <_svfiprintf_r+0x1c8>
 800cb0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb0e:	445a      	add	r2, fp
 800cb10:	9209      	str	r2, [sp, #36]	; 0x24
 800cb12:	f89a 3000 	ldrb.w	r3, [sl]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 80a2 	beq.w	800cc60 <_svfiprintf_r+0x1c8>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb26:	f10a 0a01 	add.w	sl, sl, #1
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	9307      	str	r3, [sp, #28]
 800cb2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb32:	931a      	str	r3, [sp, #104]	; 0x68
 800cb34:	4654      	mov	r4, sl
 800cb36:	2205      	movs	r2, #5
 800cb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3c:	4851      	ldr	r0, [pc, #324]	; (800cc84 <_svfiprintf_r+0x1ec>)
 800cb3e:	f7f3 fb6f 	bl	8000220 <memchr>
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	b9d8      	cbnz	r0, 800cb7e <_svfiprintf_r+0xe6>
 800cb46:	06d0      	lsls	r0, r2, #27
 800cb48:	bf44      	itt	mi
 800cb4a:	2320      	movmi	r3, #32
 800cb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb50:	0711      	lsls	r1, r2, #28
 800cb52:	bf44      	itt	mi
 800cb54:	232b      	movmi	r3, #43	; 0x2b
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb60:	d015      	beq.n	800cb8e <_svfiprintf_r+0xf6>
 800cb62:	9a07      	ldr	r2, [sp, #28]
 800cb64:	4654      	mov	r4, sl
 800cb66:	2000      	movs	r0, #0
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb72:	3b30      	subs	r3, #48	; 0x30
 800cb74:	2b09      	cmp	r3, #9
 800cb76:	d94e      	bls.n	800cc16 <_svfiprintf_r+0x17e>
 800cb78:	b1b0      	cbz	r0, 800cba8 <_svfiprintf_r+0x110>
 800cb7a:	9207      	str	r2, [sp, #28]
 800cb7c:	e014      	b.n	800cba8 <_svfiprintf_r+0x110>
 800cb7e:	eba0 0308 	sub.w	r3, r0, r8
 800cb82:	fa09 f303 	lsl.w	r3, r9, r3
 800cb86:	4313      	orrs	r3, r2
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	46a2      	mov	sl, r4
 800cb8c:	e7d2      	b.n	800cb34 <_svfiprintf_r+0x9c>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	1d19      	adds	r1, r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	9103      	str	r1, [sp, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bfbb      	ittet	lt
 800cb9a:	425b      	neglt	r3, r3
 800cb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cba0:	9307      	strge	r3, [sp, #28]
 800cba2:	9307      	strlt	r3, [sp, #28]
 800cba4:	bfb8      	it	lt
 800cba6:	9204      	strlt	r2, [sp, #16]
 800cba8:	7823      	ldrb	r3, [r4, #0]
 800cbaa:	2b2e      	cmp	r3, #46	; 0x2e
 800cbac:	d10c      	bne.n	800cbc8 <_svfiprintf_r+0x130>
 800cbae:	7863      	ldrb	r3, [r4, #1]
 800cbb0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb2:	d135      	bne.n	800cc20 <_svfiprintf_r+0x188>
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	1d1a      	adds	r2, r3, #4
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	9203      	str	r2, [sp, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bfb8      	it	lt
 800cbc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbc4:	3402      	adds	r4, #2
 800cbc6:	9305      	str	r3, [sp, #20]
 800cbc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc94 <_svfiprintf_r+0x1fc>
 800cbcc:	7821      	ldrb	r1, [r4, #0]
 800cbce:	2203      	movs	r2, #3
 800cbd0:	4650      	mov	r0, sl
 800cbd2:	f7f3 fb25 	bl	8000220 <memchr>
 800cbd6:	b140      	cbz	r0, 800cbea <_svfiprintf_r+0x152>
 800cbd8:	2340      	movs	r3, #64	; 0x40
 800cbda:	eba0 000a 	sub.w	r0, r0, sl
 800cbde:	fa03 f000 	lsl.w	r0, r3, r0
 800cbe2:	9b04      	ldr	r3, [sp, #16]
 800cbe4:	4303      	orrs	r3, r0
 800cbe6:	3401      	adds	r4, #1
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbee:	4826      	ldr	r0, [pc, #152]	; (800cc88 <_svfiprintf_r+0x1f0>)
 800cbf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbf4:	2206      	movs	r2, #6
 800cbf6:	f7f3 fb13 	bl	8000220 <memchr>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d038      	beq.n	800cc70 <_svfiprintf_r+0x1d8>
 800cbfe:	4b23      	ldr	r3, [pc, #140]	; (800cc8c <_svfiprintf_r+0x1f4>)
 800cc00:	bb1b      	cbnz	r3, 800cc4a <_svfiprintf_r+0x1b2>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	3307      	adds	r3, #7
 800cc06:	f023 0307 	bic.w	r3, r3, #7
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc10:	4433      	add	r3, r6
 800cc12:	9309      	str	r3, [sp, #36]	; 0x24
 800cc14:	e767      	b.n	800cae6 <_svfiprintf_r+0x4e>
 800cc16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	e7a5      	b.n	800cb6c <_svfiprintf_r+0xd4>
 800cc20:	2300      	movs	r3, #0
 800cc22:	3401      	adds	r4, #1
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	4619      	mov	r1, r3
 800cc28:	f04f 0c0a 	mov.w	ip, #10
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc32:	3a30      	subs	r2, #48	; 0x30
 800cc34:	2a09      	cmp	r2, #9
 800cc36:	d903      	bls.n	800cc40 <_svfiprintf_r+0x1a8>
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0c5      	beq.n	800cbc8 <_svfiprintf_r+0x130>
 800cc3c:	9105      	str	r1, [sp, #20]
 800cc3e:	e7c3      	b.n	800cbc8 <_svfiprintf_r+0x130>
 800cc40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc44:	4604      	mov	r4, r0
 800cc46:	2301      	movs	r3, #1
 800cc48:	e7f0      	b.n	800cc2c <_svfiprintf_r+0x194>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4b0f      	ldr	r3, [pc, #60]	; (800cc90 <_svfiprintf_r+0x1f8>)
 800cc52:	a904      	add	r1, sp, #16
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7fb fdc1 	bl	80087dc <_printf_float>
 800cc5a:	1c42      	adds	r2, r0, #1
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	d1d6      	bne.n	800cc0e <_svfiprintf_r+0x176>
 800cc60:	89ab      	ldrh	r3, [r5, #12]
 800cc62:	065b      	lsls	r3, r3, #25
 800cc64:	f53f af2c 	bmi.w	800cac0 <_svfiprintf_r+0x28>
 800cc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc6a:	b01d      	add	sp, #116	; 0x74
 800cc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc70:	ab03      	add	r3, sp, #12
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	462a      	mov	r2, r5
 800cc76:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <_svfiprintf_r+0x1f8>)
 800cc78:	a904      	add	r1, sp, #16
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	f7fc f852 	bl	8008d24 <_printf_i>
 800cc80:	e7eb      	b.n	800cc5a <_svfiprintf_r+0x1c2>
 800cc82:	bf00      	nop
 800cc84:	0800dc84 	.word	0x0800dc84
 800cc88:	0800dc8e 	.word	0x0800dc8e
 800cc8c:	080087dd 	.word	0x080087dd
 800cc90:	0800c9e1 	.word	0x0800c9e1
 800cc94:	0800dc8a 	.word	0x0800dc8a

0800cc98 <__sfputc_r>:
 800cc98:	6893      	ldr	r3, [r2, #8]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	b410      	push	{r4}
 800cca0:	6093      	str	r3, [r2, #8]
 800cca2:	da08      	bge.n	800ccb6 <__sfputc_r+0x1e>
 800cca4:	6994      	ldr	r4, [r2, #24]
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	db01      	blt.n	800ccae <__sfputc_r+0x16>
 800ccaa:	290a      	cmp	r1, #10
 800ccac:	d103      	bne.n	800ccb6 <__sfputc_r+0x1e>
 800ccae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccb2:	f7fd bbe9 	b.w	800a488 <__swbuf_r>
 800ccb6:	6813      	ldr	r3, [r2, #0]
 800ccb8:	1c58      	adds	r0, r3, #1
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	7019      	strb	r1, [r3, #0]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <__sfputs_r>:
 800ccc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc8:	4606      	mov	r6, r0
 800ccca:	460f      	mov	r7, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	18d5      	adds	r5, r2, r3
 800ccd0:	42ac      	cmp	r4, r5
 800ccd2:	d101      	bne.n	800ccd8 <__sfputs_r+0x12>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e007      	b.n	800cce8 <__sfputs_r+0x22>
 800ccd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccdc:	463a      	mov	r2, r7
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff ffda 	bl	800cc98 <__sfputc_r>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d1f3      	bne.n	800ccd0 <__sfputs_r+0xa>
 800cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccec <_vfiprintf_r>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	b09d      	sub	sp, #116	; 0x74
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4698      	mov	r8, r3
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	b118      	cbz	r0, 800cd04 <_vfiprintf_r+0x18>
 800ccfc:	6983      	ldr	r3, [r0, #24]
 800ccfe:	b90b      	cbnz	r3, 800cd04 <_vfiprintf_r+0x18>
 800cd00:	f7fe fc16 	bl	800b530 <__sinit>
 800cd04:	4b89      	ldr	r3, [pc, #548]	; (800cf2c <_vfiprintf_r+0x240>)
 800cd06:	429d      	cmp	r5, r3
 800cd08:	d11b      	bne.n	800cd42 <_vfiprintf_r+0x56>
 800cd0a:	6875      	ldr	r5, [r6, #4]
 800cd0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd0e:	07d9      	lsls	r1, r3, #31
 800cd10:	d405      	bmi.n	800cd1e <_vfiprintf_r+0x32>
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	059a      	lsls	r2, r3, #22
 800cd16:	d402      	bmi.n	800cd1e <_vfiprintf_r+0x32>
 800cd18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1a:	f7ff f81a 	bl	800bd52 <__retarget_lock_acquire_recursive>
 800cd1e:	89ab      	ldrh	r3, [r5, #12]
 800cd20:	071b      	lsls	r3, r3, #28
 800cd22:	d501      	bpl.n	800cd28 <_vfiprintf_r+0x3c>
 800cd24:	692b      	ldr	r3, [r5, #16]
 800cd26:	b9eb      	cbnz	r3, 800cd64 <_vfiprintf_r+0x78>
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7fd fbfe 	bl	800a52c <__swsetup_r>
 800cd30:	b1c0      	cbz	r0, 800cd64 <_vfiprintf_r+0x78>
 800cd32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd34:	07dc      	lsls	r4, r3, #31
 800cd36:	d50e      	bpl.n	800cd56 <_vfiprintf_r+0x6a>
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	b01d      	add	sp, #116	; 0x74
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	4b7b      	ldr	r3, [pc, #492]	; (800cf30 <_vfiprintf_r+0x244>)
 800cd44:	429d      	cmp	r5, r3
 800cd46:	d101      	bne.n	800cd4c <_vfiprintf_r+0x60>
 800cd48:	68b5      	ldr	r5, [r6, #8]
 800cd4a:	e7df      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cd4c:	4b79      	ldr	r3, [pc, #484]	; (800cf34 <_vfiprintf_r+0x248>)
 800cd4e:	429d      	cmp	r5, r3
 800cd50:	bf08      	it	eq
 800cd52:	68f5      	ldreq	r5, [r6, #12]
 800cd54:	e7da      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	0598      	lsls	r0, r3, #22
 800cd5a:	d4ed      	bmi.n	800cd38 <_vfiprintf_r+0x4c>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd5e:	f7fe fff9 	bl	800bd54 <__retarget_lock_release_recursive>
 800cd62:	e7e9      	b.n	800cd38 <_vfiprintf_r+0x4c>
 800cd64:	2300      	movs	r3, #0
 800cd66:	9309      	str	r3, [sp, #36]	; 0x24
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	2330      	movs	r3, #48	; 0x30
 800cd74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf38 <_vfiprintf_r+0x24c>
 800cd78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd7c:	f04f 0901 	mov.w	r9, #1
 800cd80:	4623      	mov	r3, r4
 800cd82:	469a      	mov	sl, r3
 800cd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd88:	b10a      	cbz	r2, 800cd8e <_vfiprintf_r+0xa2>
 800cd8a:	2a25      	cmp	r2, #37	; 0x25
 800cd8c:	d1f9      	bne.n	800cd82 <_vfiprintf_r+0x96>
 800cd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd92:	d00b      	beq.n	800cdac <_vfiprintf_r+0xc0>
 800cd94:	465b      	mov	r3, fp
 800cd96:	4622      	mov	r2, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ff93 	bl	800ccc6 <__sfputs_r>
 800cda0:	3001      	adds	r0, #1
 800cda2:	f000 80aa 	beq.w	800cefa <_vfiprintf_r+0x20e>
 800cda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda8:	445a      	add	r2, fp
 800cdaa:	9209      	str	r2, [sp, #36]	; 0x24
 800cdac:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 80a2 	beq.w	800cefa <_vfiprintf_r+0x20e>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc0:	f10a 0a01 	add.w	sl, sl, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	9307      	str	r3, [sp, #28]
 800cdc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdcc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdce:	4654      	mov	r4, sl
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd6:	4858      	ldr	r0, [pc, #352]	; (800cf38 <_vfiprintf_r+0x24c>)
 800cdd8:	f7f3 fa22 	bl	8000220 <memchr>
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	b9d8      	cbnz	r0, 800ce18 <_vfiprintf_r+0x12c>
 800cde0:	06d1      	lsls	r1, r2, #27
 800cde2:	bf44      	itt	mi
 800cde4:	2320      	movmi	r3, #32
 800cde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdea:	0713      	lsls	r3, r2, #28
 800cdec:	bf44      	itt	mi
 800cdee:	232b      	movmi	r3, #43	; 0x2b
 800cdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfa:	d015      	beq.n	800ce28 <_vfiprintf_r+0x13c>
 800cdfc:	9a07      	ldr	r2, [sp, #28]
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2000      	movs	r0, #0
 800ce02:	f04f 0c0a 	mov.w	ip, #10
 800ce06:	4621      	mov	r1, r4
 800ce08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0c:	3b30      	subs	r3, #48	; 0x30
 800ce0e:	2b09      	cmp	r3, #9
 800ce10:	d94e      	bls.n	800ceb0 <_vfiprintf_r+0x1c4>
 800ce12:	b1b0      	cbz	r0, 800ce42 <_vfiprintf_r+0x156>
 800ce14:	9207      	str	r2, [sp, #28]
 800ce16:	e014      	b.n	800ce42 <_vfiprintf_r+0x156>
 800ce18:	eba0 0308 	sub.w	r3, r0, r8
 800ce1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce20:	4313      	orrs	r3, r2
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	46a2      	mov	sl, r4
 800ce26:	e7d2      	b.n	800cdce <_vfiprintf_r+0xe2>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	1d19      	adds	r1, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	9103      	str	r1, [sp, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfbb      	ittet	lt
 800ce34:	425b      	neglt	r3, r3
 800ce36:	f042 0202 	orrlt.w	r2, r2, #2
 800ce3a:	9307      	strge	r3, [sp, #28]
 800ce3c:	9307      	strlt	r3, [sp, #28]
 800ce3e:	bfb8      	it	lt
 800ce40:	9204      	strlt	r2, [sp, #16]
 800ce42:	7823      	ldrb	r3, [r4, #0]
 800ce44:	2b2e      	cmp	r3, #46	; 0x2e
 800ce46:	d10c      	bne.n	800ce62 <_vfiprintf_r+0x176>
 800ce48:	7863      	ldrb	r3, [r4, #1]
 800ce4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4c:	d135      	bne.n	800ceba <_vfiprintf_r+0x1ce>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	9203      	str	r2, [sp, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	bfb8      	it	lt
 800ce5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce5e:	3402      	adds	r4, #2
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf48 <_vfiprintf_r+0x25c>
 800ce66:	7821      	ldrb	r1, [r4, #0]
 800ce68:	2203      	movs	r2, #3
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	f7f3 f9d8 	bl	8000220 <memchr>
 800ce70:	b140      	cbz	r0, 800ce84 <_vfiprintf_r+0x198>
 800ce72:	2340      	movs	r3, #64	; 0x40
 800ce74:	eba0 000a 	sub.w	r0, r0, sl
 800ce78:	fa03 f000 	lsl.w	r0, r3, r0
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	4303      	orrs	r3, r0
 800ce80:	3401      	adds	r4, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce88:	482c      	ldr	r0, [pc, #176]	; (800cf3c <_vfiprintf_r+0x250>)
 800ce8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce8e:	2206      	movs	r2, #6
 800ce90:	f7f3 f9c6 	bl	8000220 <memchr>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d03f      	beq.n	800cf18 <_vfiprintf_r+0x22c>
 800ce98:	4b29      	ldr	r3, [pc, #164]	; (800cf40 <_vfiprintf_r+0x254>)
 800ce9a:	bb1b      	cbnz	r3, 800cee4 <_vfiprintf_r+0x1f8>
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	3307      	adds	r3, #7
 800cea0:	f023 0307 	bic.w	r3, r3, #7
 800cea4:	3308      	adds	r3, #8
 800cea6:	9303      	str	r3, [sp, #12]
 800cea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceaa:	443b      	add	r3, r7
 800ceac:	9309      	str	r3, [sp, #36]	; 0x24
 800ceae:	e767      	b.n	800cd80 <_vfiprintf_r+0x94>
 800ceb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	e7a5      	b.n	800ce06 <_vfiprintf_r+0x11a>
 800ceba:	2300      	movs	r3, #0
 800cebc:	3401      	adds	r4, #1
 800cebe:	9305      	str	r3, [sp, #20]
 800cec0:	4619      	mov	r1, r3
 800cec2:	f04f 0c0a 	mov.w	ip, #10
 800cec6:	4620      	mov	r0, r4
 800cec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cecc:	3a30      	subs	r2, #48	; 0x30
 800cece:	2a09      	cmp	r2, #9
 800ced0:	d903      	bls.n	800ceda <_vfiprintf_r+0x1ee>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0c5      	beq.n	800ce62 <_vfiprintf_r+0x176>
 800ced6:	9105      	str	r1, [sp, #20]
 800ced8:	e7c3      	b.n	800ce62 <_vfiprintf_r+0x176>
 800ceda:	fb0c 2101 	mla	r1, ip, r1, r2
 800cede:	4604      	mov	r4, r0
 800cee0:	2301      	movs	r3, #1
 800cee2:	e7f0      	b.n	800cec6 <_vfiprintf_r+0x1da>
 800cee4:	ab03      	add	r3, sp, #12
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	462a      	mov	r2, r5
 800ceea:	4b16      	ldr	r3, [pc, #88]	; (800cf44 <_vfiprintf_r+0x258>)
 800ceec:	a904      	add	r1, sp, #16
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7fb fc74 	bl	80087dc <_printf_float>
 800cef4:	4607      	mov	r7, r0
 800cef6:	1c78      	adds	r0, r7, #1
 800cef8:	d1d6      	bne.n	800cea8 <_vfiprintf_r+0x1bc>
 800cefa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cefc:	07d9      	lsls	r1, r3, #31
 800cefe:	d405      	bmi.n	800cf0c <_vfiprintf_r+0x220>
 800cf00:	89ab      	ldrh	r3, [r5, #12]
 800cf02:	059a      	lsls	r2, r3, #22
 800cf04:	d402      	bmi.n	800cf0c <_vfiprintf_r+0x220>
 800cf06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf08:	f7fe ff24 	bl	800bd54 <__retarget_lock_release_recursive>
 800cf0c:	89ab      	ldrh	r3, [r5, #12]
 800cf0e:	065b      	lsls	r3, r3, #25
 800cf10:	f53f af12 	bmi.w	800cd38 <_vfiprintf_r+0x4c>
 800cf14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf16:	e711      	b.n	800cd3c <_vfiprintf_r+0x50>
 800cf18:	ab03      	add	r3, sp, #12
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	462a      	mov	r2, r5
 800cf1e:	4b09      	ldr	r3, [pc, #36]	; (800cf44 <_vfiprintf_r+0x258>)
 800cf20:	a904      	add	r1, sp, #16
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7fb fefe 	bl	8008d24 <_printf_i>
 800cf28:	e7e4      	b.n	800cef4 <_vfiprintf_r+0x208>
 800cf2a:	bf00      	nop
 800cf2c:	0800da6c 	.word	0x0800da6c
 800cf30:	0800da8c 	.word	0x0800da8c
 800cf34:	0800da4c 	.word	0x0800da4c
 800cf38:	0800dc84 	.word	0x0800dc84
 800cf3c:	0800dc8e 	.word	0x0800dc8e
 800cf40:	080087dd 	.word	0x080087dd
 800cf44:	0800ccc7 	.word	0x0800ccc7
 800cf48:	0800dc8a 	.word	0x0800dc8a
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <nan>:
 800cf50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf58 <nan+0x8>
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	00000000 	.word	0x00000000
 800cf5c:	7ff80000 	.word	0x7ff80000

0800cf60 <_sbrk_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d06      	ldr	r5, [pc, #24]	; (800cf7c <_sbrk_r+0x1c>)
 800cf64:	2300      	movs	r3, #0
 800cf66:	4604      	mov	r4, r0
 800cf68:	4608      	mov	r0, r1
 800cf6a:	602b      	str	r3, [r5, #0]
 800cf6c:	f7f7 f94e 	bl	800420c <_sbrk>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_sbrk_r+0x1a>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_sbrk_r+0x1a>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	200006ec 	.word	0x200006ec

0800cf80 <__sread>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	460c      	mov	r4, r1
 800cf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf88:	f000 f93a 	bl	800d200 <_read_r>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	bfab      	itete	ge
 800cf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf92:	89a3      	ldrhlt	r3, [r4, #12]
 800cf94:	181b      	addge	r3, r3, r0
 800cf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf9a:	bfac      	ite	ge
 800cf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf9e:	81a3      	strhlt	r3, [r4, #12]
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <__swrite>:
 800cfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa6:	461f      	mov	r7, r3
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	05db      	lsls	r3, r3, #23
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	d505      	bpl.n	800cfc0 <__swrite+0x1e>
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	2302      	movs	r3, #2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f000 f8b8 	bl	800d130 <_lseek_r>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	f000 b837 	b.w	800d048 <_write_r>

0800cfda <__sseek>:
 800cfda:	b510      	push	{r4, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe2:	f000 f8a5 	bl	800d130 <_lseek_r>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	bf15      	itete	ne
 800cfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cff6:	81a3      	strheq	r3, [r4, #12]
 800cff8:	bf18      	it	ne
 800cffa:	81a3      	strhne	r3, [r4, #12]
 800cffc:	bd10      	pop	{r4, pc}

0800cffe <__sclose>:
 800cffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d002:	f000 b851 	b.w	800d0a8 <_close_r>

0800d006 <strncmp>:
 800d006:	b510      	push	{r4, lr}
 800d008:	b17a      	cbz	r2, 800d02a <strncmp+0x24>
 800d00a:	4603      	mov	r3, r0
 800d00c:	3901      	subs	r1, #1
 800d00e:	1884      	adds	r4, r0, r2
 800d010:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d014:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d018:	4290      	cmp	r0, r2
 800d01a:	d101      	bne.n	800d020 <strncmp+0x1a>
 800d01c:	42a3      	cmp	r3, r4
 800d01e:	d101      	bne.n	800d024 <strncmp+0x1e>
 800d020:	1a80      	subs	r0, r0, r2
 800d022:	bd10      	pop	{r4, pc}
 800d024:	2800      	cmp	r0, #0
 800d026:	d1f3      	bne.n	800d010 <strncmp+0xa>
 800d028:	e7fa      	b.n	800d020 <strncmp+0x1a>
 800d02a:	4610      	mov	r0, r2
 800d02c:	e7f9      	b.n	800d022 <strncmp+0x1c>

0800d02e <__ascii_wctomb>:
 800d02e:	b149      	cbz	r1, 800d044 <__ascii_wctomb+0x16>
 800d030:	2aff      	cmp	r2, #255	; 0xff
 800d032:	bf85      	ittet	hi
 800d034:	238a      	movhi	r3, #138	; 0x8a
 800d036:	6003      	strhi	r3, [r0, #0]
 800d038:	700a      	strbls	r2, [r1, #0]
 800d03a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d03e:	bf98      	it	ls
 800d040:	2001      	movls	r0, #1
 800d042:	4770      	bx	lr
 800d044:	4608      	mov	r0, r1
 800d046:	4770      	bx	lr

0800d048 <_write_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d07      	ldr	r5, [pc, #28]	; (800d068 <_write_r+0x20>)
 800d04c:	4604      	mov	r4, r0
 800d04e:	4608      	mov	r0, r1
 800d050:	4611      	mov	r1, r2
 800d052:	2200      	movs	r2, #0
 800d054:	602a      	str	r2, [r5, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	f7f5 fc1a 	bl	8002890 <_write>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_write_r+0x1e>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_write_r+0x1e>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	200006ec 	.word	0x200006ec

0800d06c <__assert_func>:
 800d06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d06e:	4614      	mov	r4, r2
 800d070:	461a      	mov	r2, r3
 800d072:	4b09      	ldr	r3, [pc, #36]	; (800d098 <__assert_func+0x2c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4605      	mov	r5, r0
 800d078:	68d8      	ldr	r0, [r3, #12]
 800d07a:	b14c      	cbz	r4, 800d090 <__assert_func+0x24>
 800d07c:	4b07      	ldr	r3, [pc, #28]	; (800d09c <__assert_func+0x30>)
 800d07e:	9100      	str	r1, [sp, #0]
 800d080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d084:	4906      	ldr	r1, [pc, #24]	; (800d0a0 <__assert_func+0x34>)
 800d086:	462b      	mov	r3, r5
 800d088:	f000 f81e 	bl	800d0c8 <fiprintf>
 800d08c:	f000 f8ca 	bl	800d224 <abort>
 800d090:	4b04      	ldr	r3, [pc, #16]	; (800d0a4 <__assert_func+0x38>)
 800d092:	461c      	mov	r4, r3
 800d094:	e7f3      	b.n	800d07e <__assert_func+0x12>
 800d096:	bf00      	nop
 800d098:	20000030 	.word	0x20000030
 800d09c:	0800dc95 	.word	0x0800dc95
 800d0a0:	0800dca2 	.word	0x0800dca2
 800d0a4:	0800dcd0 	.word	0x0800dcd0

0800d0a8 <_close_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	; (800d0c4 <_close_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f7 f875 	bl	80041a2 <_close>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_close_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_close_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	200006ec 	.word	0x200006ec

0800d0c8 <fiprintf>:
 800d0c8:	b40e      	push	{r1, r2, r3}
 800d0ca:	b503      	push	{r0, r1, lr}
 800d0cc:	4601      	mov	r1, r0
 800d0ce:	ab03      	add	r3, sp, #12
 800d0d0:	4805      	ldr	r0, [pc, #20]	; (800d0e8 <fiprintf+0x20>)
 800d0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d6:	6800      	ldr	r0, [r0, #0]
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	f7ff fe07 	bl	800ccec <_vfiprintf_r>
 800d0de:	b002      	add	sp, #8
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	b003      	add	sp, #12
 800d0e6:	4770      	bx	lr
 800d0e8:	20000030 	.word	0x20000030

0800d0ec <_fstat_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	; (800d10c <_fstat_r+0x20>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f7f7 f85e 	bl	80041ba <_fstat>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d102      	bne.n	800d108 <_fstat_r+0x1c>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	b103      	cbz	r3, 800d108 <_fstat_r+0x1c>
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	bd38      	pop	{r3, r4, r5, pc}
 800d10a:	bf00      	nop
 800d10c:	200006ec 	.word	0x200006ec

0800d110 <_isatty_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d06      	ldr	r5, [pc, #24]	; (800d12c <_isatty_r+0x1c>)
 800d114:	2300      	movs	r3, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	f7f7 f85d 	bl	80041da <_isatty>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d102      	bne.n	800d12a <_isatty_r+0x1a>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	b103      	cbz	r3, 800d12a <_isatty_r+0x1a>
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	200006ec 	.word	0x200006ec

0800d130 <_lseek_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d07      	ldr	r5, [pc, #28]	; (800d150 <_lseek_r+0x20>)
 800d134:	4604      	mov	r4, r0
 800d136:	4608      	mov	r0, r1
 800d138:	4611      	mov	r1, r2
 800d13a:	2200      	movs	r2, #0
 800d13c:	602a      	str	r2, [r5, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	f7f7 f856 	bl	80041f0 <_lseek>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d102      	bne.n	800d14e <_lseek_r+0x1e>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b103      	cbz	r3, 800d14e <_lseek_r+0x1e>
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	200006ec 	.word	0x200006ec

0800d154 <memmove>:
 800d154:	4288      	cmp	r0, r1
 800d156:	b510      	push	{r4, lr}
 800d158:	eb01 0402 	add.w	r4, r1, r2
 800d15c:	d902      	bls.n	800d164 <memmove+0x10>
 800d15e:	4284      	cmp	r4, r0
 800d160:	4623      	mov	r3, r4
 800d162:	d807      	bhi.n	800d174 <memmove+0x20>
 800d164:	1e43      	subs	r3, r0, #1
 800d166:	42a1      	cmp	r1, r4
 800d168:	d008      	beq.n	800d17c <memmove+0x28>
 800d16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d172:	e7f8      	b.n	800d166 <memmove+0x12>
 800d174:	4402      	add	r2, r0
 800d176:	4601      	mov	r1, r0
 800d178:	428a      	cmp	r2, r1
 800d17a:	d100      	bne.n	800d17e <memmove+0x2a>
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d186:	e7f7      	b.n	800d178 <memmove+0x24>

0800d188 <__malloc_lock>:
 800d188:	4801      	ldr	r0, [pc, #4]	; (800d190 <__malloc_lock+0x8>)
 800d18a:	f7fe bde2 	b.w	800bd52 <__retarget_lock_acquire_recursive>
 800d18e:	bf00      	nop
 800d190:	200006e0 	.word	0x200006e0

0800d194 <__malloc_unlock>:
 800d194:	4801      	ldr	r0, [pc, #4]	; (800d19c <__malloc_unlock+0x8>)
 800d196:	f7fe bddd 	b.w	800bd54 <__retarget_lock_release_recursive>
 800d19a:	bf00      	nop
 800d19c:	200006e0 	.word	0x200006e0

0800d1a0 <_realloc_r>:
 800d1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	4614      	mov	r4, r2
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	b921      	cbnz	r1, 800d1b6 <_realloc_r+0x16>
 800d1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	f7ff bba1 	b.w	800c8f8 <_malloc_r>
 800d1b6:	b92a      	cbnz	r2, 800d1c4 <_realloc_r+0x24>
 800d1b8:	f7ff fb32 	bl	800c820 <_free_r>
 800d1bc:	4625      	mov	r5, r4
 800d1be:	4628      	mov	r0, r5
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c4:	f000 f835 	bl	800d232 <_malloc_usable_size_r>
 800d1c8:	4284      	cmp	r4, r0
 800d1ca:	4607      	mov	r7, r0
 800d1cc:	d802      	bhi.n	800d1d4 <_realloc_r+0x34>
 800d1ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1d2:	d812      	bhi.n	800d1fa <_realloc_r+0x5a>
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	f7ff fb8e 	bl	800c8f8 <_malloc_r>
 800d1dc:	4605      	mov	r5, r0
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d0ed      	beq.n	800d1be <_realloc_r+0x1e>
 800d1e2:	42bc      	cmp	r4, r7
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	bf28      	it	cs
 800d1ea:	463a      	movcs	r2, r7
 800d1ec:	f7fe fe32 	bl	800be54 <memcpy>
 800d1f0:	4631      	mov	r1, r6
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	f7ff fb14 	bl	800c820 <_free_r>
 800d1f8:	e7e1      	b.n	800d1be <_realloc_r+0x1e>
 800d1fa:	4635      	mov	r5, r6
 800d1fc:	e7df      	b.n	800d1be <_realloc_r+0x1e>
	...

0800d200 <_read_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_read_r+0x20>)
 800d204:	4604      	mov	r4, r0
 800d206:	4608      	mov	r0, r1
 800d208:	4611      	mov	r1, r2
 800d20a:	2200      	movs	r2, #0
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f7f6 ffaa 	bl	8004168 <_read>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_read_r+0x1e>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_read_r+0x1e>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	200006ec 	.word	0x200006ec

0800d224 <abort>:
 800d224:	b508      	push	{r3, lr}
 800d226:	2006      	movs	r0, #6
 800d228:	f000 f834 	bl	800d294 <raise>
 800d22c:	2001      	movs	r0, #1
 800d22e:	f7f6 ff91 	bl	8004154 <_exit>

0800d232 <_malloc_usable_size_r>:
 800d232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d236:	1f18      	subs	r0, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bfbc      	itt	lt
 800d23c:	580b      	ldrlt	r3, [r1, r0]
 800d23e:	18c0      	addlt	r0, r0, r3
 800d240:	4770      	bx	lr

0800d242 <_raise_r>:
 800d242:	291f      	cmp	r1, #31
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	d904      	bls.n	800d256 <_raise_r+0x14>
 800d24c:	2316      	movs	r3, #22
 800d24e:	6003      	str	r3, [r0, #0]
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d258:	b112      	cbz	r2, 800d260 <_raise_r+0x1e>
 800d25a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d25e:	b94b      	cbnz	r3, 800d274 <_raise_r+0x32>
 800d260:	4620      	mov	r0, r4
 800d262:	f000 f831 	bl	800d2c8 <_getpid_r>
 800d266:	462a      	mov	r2, r5
 800d268:	4601      	mov	r1, r0
 800d26a:	4620      	mov	r0, r4
 800d26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d270:	f000 b818 	b.w	800d2a4 <_kill_r>
 800d274:	2b01      	cmp	r3, #1
 800d276:	d00a      	beq.n	800d28e <_raise_r+0x4c>
 800d278:	1c59      	adds	r1, r3, #1
 800d27a:	d103      	bne.n	800d284 <_raise_r+0x42>
 800d27c:	2316      	movs	r3, #22
 800d27e:	6003      	str	r3, [r0, #0]
 800d280:	2001      	movs	r0, #1
 800d282:	e7e7      	b.n	800d254 <_raise_r+0x12>
 800d284:	2400      	movs	r4, #0
 800d286:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d28a:	4628      	mov	r0, r5
 800d28c:	4798      	blx	r3
 800d28e:	2000      	movs	r0, #0
 800d290:	e7e0      	b.n	800d254 <_raise_r+0x12>
	...

0800d294 <raise>:
 800d294:	4b02      	ldr	r3, [pc, #8]	; (800d2a0 <raise+0xc>)
 800d296:	4601      	mov	r1, r0
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	f7ff bfd2 	b.w	800d242 <_raise_r>
 800d29e:	bf00      	nop
 800d2a0:	20000030 	.word	0x20000030

0800d2a4 <_kill_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d07      	ldr	r5, [pc, #28]	; (800d2c4 <_kill_r+0x20>)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	4608      	mov	r0, r1
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	602b      	str	r3, [r5, #0]
 800d2b2:	f7f6 ff3f 	bl	8004134 <_kill>
 800d2b6:	1c43      	adds	r3, r0, #1
 800d2b8:	d102      	bne.n	800d2c0 <_kill_r+0x1c>
 800d2ba:	682b      	ldr	r3, [r5, #0]
 800d2bc:	b103      	cbz	r3, 800d2c0 <_kill_r+0x1c>
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	bd38      	pop	{r3, r4, r5, pc}
 800d2c2:	bf00      	nop
 800d2c4:	200006ec 	.word	0x200006ec

0800d2c8 <_getpid_r>:
 800d2c8:	f7f6 bf2c 	b.w	8004124 <_getpid>
 800d2cc:	0000      	movs	r0, r0
	...

0800d2d0 <atan>:
 800d2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	ec55 4b10 	vmov	r4, r5, d0
 800d2d8:	4bc3      	ldr	r3, [pc, #780]	; (800d5e8 <atan+0x318>)
 800d2da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d2de:	429e      	cmp	r6, r3
 800d2e0:	46ab      	mov	fp, r5
 800d2e2:	dd18      	ble.n	800d316 <atan+0x46>
 800d2e4:	4bc1      	ldr	r3, [pc, #772]	; (800d5ec <atan+0x31c>)
 800d2e6:	429e      	cmp	r6, r3
 800d2e8:	dc01      	bgt.n	800d2ee <atan+0x1e>
 800d2ea:	d109      	bne.n	800d300 <atan+0x30>
 800d2ec:	b144      	cbz	r4, 800d300 <atan+0x30>
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	f7f2 ffe9 	bl	80002cc <__adddf3>
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	e006      	b.n	800d30e <atan+0x3e>
 800d300:	f1bb 0f00 	cmp.w	fp, #0
 800d304:	f300 8131 	bgt.w	800d56a <atan+0x29a>
 800d308:	a59b      	add	r5, pc, #620	; (adr r5, 800d578 <atan+0x2a8>)
 800d30a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d30e:	ec45 4b10 	vmov	d0, r4, r5
 800d312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d316:	4bb6      	ldr	r3, [pc, #728]	; (800d5f0 <atan+0x320>)
 800d318:	429e      	cmp	r6, r3
 800d31a:	dc14      	bgt.n	800d346 <atan+0x76>
 800d31c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d320:	429e      	cmp	r6, r3
 800d322:	dc0d      	bgt.n	800d340 <atan+0x70>
 800d324:	a396      	add	r3, pc, #600	; (adr r3, 800d580 <atan+0x2b0>)
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	ee10 0a10 	vmov	r0, s0
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f2 ffcc 	bl	80002cc <__adddf3>
 800d334:	4baf      	ldr	r3, [pc, #700]	; (800d5f4 <atan+0x324>)
 800d336:	2200      	movs	r2, #0
 800d338:	f7f3 fc0e 	bl	8000b58 <__aeabi_dcmpgt>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d1e6      	bne.n	800d30e <atan+0x3e>
 800d340:	f04f 3aff 	mov.w	sl, #4294967295
 800d344:	e02b      	b.n	800d39e <atan+0xce>
 800d346:	f000 f963 	bl	800d610 <fabs>
 800d34a:	4bab      	ldr	r3, [pc, #684]	; (800d5f8 <atan+0x328>)
 800d34c:	429e      	cmp	r6, r3
 800d34e:	ec55 4b10 	vmov	r4, r5, d0
 800d352:	f300 80bf 	bgt.w	800d4d4 <atan+0x204>
 800d356:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d35a:	429e      	cmp	r6, r3
 800d35c:	f300 80a0 	bgt.w	800d4a0 <atan+0x1d0>
 800d360:	ee10 2a10 	vmov	r2, s0
 800d364:	ee10 0a10 	vmov	r0, s0
 800d368:	462b      	mov	r3, r5
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f2 ffae 	bl	80002cc <__adddf3>
 800d370:	4ba0      	ldr	r3, [pc, #640]	; (800d5f4 <atan+0x324>)
 800d372:	2200      	movs	r2, #0
 800d374:	f7f2 ffa8 	bl	80002c8 <__aeabi_dsub>
 800d378:	2200      	movs	r2, #0
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
 800d386:	f7f2 ffa1 	bl	80002cc <__adddf3>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4630      	mov	r0, r6
 800d390:	4639      	mov	r1, r7
 800d392:	f7f3 fa7b 	bl	800088c <__aeabi_ddiv>
 800d396:	f04f 0a00 	mov.w	sl, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	460d      	mov	r5, r1
 800d39e:	4622      	mov	r2, r4
 800d3a0:	462b      	mov	r3, r5
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	f7f3 f947 	bl	8000638 <__aeabi_dmul>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4680      	mov	r8, r0
 800d3b0:	4689      	mov	r9, r1
 800d3b2:	f7f3 f941 	bl	8000638 <__aeabi_dmul>
 800d3b6:	a374      	add	r3, pc, #464	; (adr r3, 800d588 <atan+0x2b8>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	4606      	mov	r6, r0
 800d3be:	460f      	mov	r7, r1
 800d3c0:	f7f3 f93a 	bl	8000638 <__aeabi_dmul>
 800d3c4:	a372      	add	r3, pc, #456	; (adr r3, 800d590 <atan+0x2c0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff7f 	bl	80002cc <__adddf3>
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	463b      	mov	r3, r7
 800d3d2:	f7f3 f931 	bl	8000638 <__aeabi_dmul>
 800d3d6:	a370      	add	r3, pc, #448	; (adr r3, 800d598 <atan+0x2c8>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f2 ff76 	bl	80002cc <__adddf3>
 800d3e0:	4632      	mov	r2, r6
 800d3e2:	463b      	mov	r3, r7
 800d3e4:	f7f3 f928 	bl	8000638 <__aeabi_dmul>
 800d3e8:	a36d      	add	r3, pc, #436	; (adr r3, 800d5a0 <atan+0x2d0>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 ff6d 	bl	80002cc <__adddf3>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	f7f3 f91f 	bl	8000638 <__aeabi_dmul>
 800d3fa:	a36b      	add	r3, pc, #428	; (adr r3, 800d5a8 <atan+0x2d8>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f2 ff64 	bl	80002cc <__adddf3>
 800d404:	4632      	mov	r2, r6
 800d406:	463b      	mov	r3, r7
 800d408:	f7f3 f916 	bl	8000638 <__aeabi_dmul>
 800d40c:	a368      	add	r3, pc, #416	; (adr r3, 800d5b0 <atan+0x2e0>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	f7f2 ff5b 	bl	80002cc <__adddf3>
 800d416:	4642      	mov	r2, r8
 800d418:	464b      	mov	r3, r9
 800d41a:	f7f3 f90d 	bl	8000638 <__aeabi_dmul>
 800d41e:	a366      	add	r3, pc, #408	; (adr r3, 800d5b8 <atan+0x2e8>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	4680      	mov	r8, r0
 800d426:	4689      	mov	r9, r1
 800d428:	4630      	mov	r0, r6
 800d42a:	4639      	mov	r1, r7
 800d42c:	f7f3 f904 	bl	8000638 <__aeabi_dmul>
 800d430:	a363      	add	r3, pc, #396	; (adr r3, 800d5c0 <atan+0x2f0>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	f7f2 ff47 	bl	80002c8 <__aeabi_dsub>
 800d43a:	4632      	mov	r2, r6
 800d43c:	463b      	mov	r3, r7
 800d43e:	f7f3 f8fb 	bl	8000638 <__aeabi_dmul>
 800d442:	a361      	add	r3, pc, #388	; (adr r3, 800d5c8 <atan+0x2f8>)
 800d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d448:	f7f2 ff3e 	bl	80002c8 <__aeabi_dsub>
 800d44c:	4632      	mov	r2, r6
 800d44e:	463b      	mov	r3, r7
 800d450:	f7f3 f8f2 	bl	8000638 <__aeabi_dmul>
 800d454:	a35e      	add	r3, pc, #376	; (adr r3, 800d5d0 <atan+0x300>)
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f7f2 ff35 	bl	80002c8 <__aeabi_dsub>
 800d45e:	4632      	mov	r2, r6
 800d460:	463b      	mov	r3, r7
 800d462:	f7f3 f8e9 	bl	8000638 <__aeabi_dmul>
 800d466:	a35c      	add	r3, pc, #368	; (adr r3, 800d5d8 <atan+0x308>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	f7f2 ff2c 	bl	80002c8 <__aeabi_dsub>
 800d470:	4632      	mov	r2, r6
 800d472:	463b      	mov	r3, r7
 800d474:	f7f3 f8e0 	bl	8000638 <__aeabi_dmul>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4640      	mov	r0, r8
 800d47e:	4649      	mov	r1, r9
 800d480:	f7f2 ff24 	bl	80002cc <__adddf3>
 800d484:	4622      	mov	r2, r4
 800d486:	462b      	mov	r3, r5
 800d488:	f7f3 f8d6 	bl	8000638 <__aeabi_dmul>
 800d48c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	d14b      	bne.n	800d52e <atan+0x25e>
 800d496:	4620      	mov	r0, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	f7f2 ff15 	bl	80002c8 <__aeabi_dsub>
 800d49e:	e72c      	b.n	800d2fa <atan+0x2a>
 800d4a0:	ee10 0a10 	vmov	r0, s0
 800d4a4:	4b53      	ldr	r3, [pc, #332]	; (800d5f4 <atan+0x324>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	f7f2 ff0d 	bl	80002c8 <__aeabi_dsub>
 800d4ae:	4b51      	ldr	r3, [pc, #324]	; (800d5f4 <atan+0x324>)
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460f      	mov	r7, r1
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7f2 ff07 	bl	80002cc <__adddf3>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	4639      	mov	r1, r7
 800d4c6:	f7f3 f9e1 	bl	800088c <__aeabi_ddiv>
 800d4ca:	f04f 0a01 	mov.w	sl, #1
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	e764      	b.n	800d39e <atan+0xce>
 800d4d4:	4b49      	ldr	r3, [pc, #292]	; (800d5fc <atan+0x32c>)
 800d4d6:	429e      	cmp	r6, r3
 800d4d8:	da1d      	bge.n	800d516 <atan+0x246>
 800d4da:	ee10 0a10 	vmov	r0, s0
 800d4de:	4b48      	ldr	r3, [pc, #288]	; (800d600 <atan+0x330>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f2 fef0 	bl	80002c8 <__aeabi_dsub>
 800d4e8:	4b45      	ldr	r3, [pc, #276]	; (800d600 <atan+0x330>)
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7f3 f8a0 	bl	8000638 <__aeabi_dmul>
 800d4f8:	4b3e      	ldr	r3, [pc, #248]	; (800d5f4 <atan+0x324>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f7f2 fee6 	bl	80002cc <__adddf3>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 f9c0 	bl	800088c <__aeabi_ddiv>
 800d50c:	f04f 0a02 	mov.w	sl, #2
 800d510:	4604      	mov	r4, r0
 800d512:	460d      	mov	r5, r1
 800d514:	e743      	b.n	800d39e <atan+0xce>
 800d516:	462b      	mov	r3, r5
 800d518:	ee10 2a10 	vmov	r2, s0
 800d51c:	4939      	ldr	r1, [pc, #228]	; (800d604 <atan+0x334>)
 800d51e:	2000      	movs	r0, #0
 800d520:	f7f3 f9b4 	bl	800088c <__aeabi_ddiv>
 800d524:	f04f 0a03 	mov.w	sl, #3
 800d528:	4604      	mov	r4, r0
 800d52a:	460d      	mov	r5, r1
 800d52c:	e737      	b.n	800d39e <atan+0xce>
 800d52e:	4b36      	ldr	r3, [pc, #216]	; (800d608 <atan+0x338>)
 800d530:	4e36      	ldr	r6, [pc, #216]	; (800d60c <atan+0x33c>)
 800d532:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d536:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d53a:	e9da 2300 	ldrd	r2, r3, [sl]
 800d53e:	f7f2 fec3 	bl	80002c8 <__aeabi_dsub>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	f7f2 febf 	bl	80002c8 <__aeabi_dsub>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d552:	f7f2 feb9 	bl	80002c8 <__aeabi_dsub>
 800d556:	f1bb 0f00 	cmp.w	fp, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	f6bf aed6 	bge.w	800d30e <atan+0x3e>
 800d562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d566:	461d      	mov	r5, r3
 800d568:	e6d1      	b.n	800d30e <atan+0x3e>
 800d56a:	a51d      	add	r5, pc, #116	; (adr r5, 800d5e0 <atan+0x310>)
 800d56c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d570:	e6cd      	b.n	800d30e <atan+0x3e>
 800d572:	bf00      	nop
 800d574:	f3af 8000 	nop.w
 800d578:	54442d18 	.word	0x54442d18
 800d57c:	bff921fb 	.word	0xbff921fb
 800d580:	8800759c 	.word	0x8800759c
 800d584:	7e37e43c 	.word	0x7e37e43c
 800d588:	e322da11 	.word	0xe322da11
 800d58c:	3f90ad3a 	.word	0x3f90ad3a
 800d590:	24760deb 	.word	0x24760deb
 800d594:	3fa97b4b 	.word	0x3fa97b4b
 800d598:	a0d03d51 	.word	0xa0d03d51
 800d59c:	3fb10d66 	.word	0x3fb10d66
 800d5a0:	c54c206e 	.word	0xc54c206e
 800d5a4:	3fb745cd 	.word	0x3fb745cd
 800d5a8:	920083ff 	.word	0x920083ff
 800d5ac:	3fc24924 	.word	0x3fc24924
 800d5b0:	5555550d 	.word	0x5555550d
 800d5b4:	3fd55555 	.word	0x3fd55555
 800d5b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d5bc:	bfa2b444 	.word	0xbfa2b444
 800d5c0:	52defd9a 	.word	0x52defd9a
 800d5c4:	3fadde2d 	.word	0x3fadde2d
 800d5c8:	af749a6d 	.word	0xaf749a6d
 800d5cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d5d0:	fe231671 	.word	0xfe231671
 800d5d4:	3fbc71c6 	.word	0x3fbc71c6
 800d5d8:	9998ebc4 	.word	0x9998ebc4
 800d5dc:	3fc99999 	.word	0x3fc99999
 800d5e0:	54442d18 	.word	0x54442d18
 800d5e4:	3ff921fb 	.word	0x3ff921fb
 800d5e8:	440fffff 	.word	0x440fffff
 800d5ec:	7ff00000 	.word	0x7ff00000
 800d5f0:	3fdbffff 	.word	0x3fdbffff
 800d5f4:	3ff00000 	.word	0x3ff00000
 800d5f8:	3ff2ffff 	.word	0x3ff2ffff
 800d5fc:	40038000 	.word	0x40038000
 800d600:	3ff80000 	.word	0x3ff80000
 800d604:	bff00000 	.word	0xbff00000
 800d608:	0800dcf8 	.word	0x0800dcf8
 800d60c:	0800dcd8 	.word	0x0800dcd8

0800d610 <fabs>:
 800d610:	ec51 0b10 	vmov	r0, r1, d0
 800d614:	ee10 2a10 	vmov	r2, s0
 800d618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d61c:	ec43 2b10 	vmov	d0, r2, r3
 800d620:	4770      	bx	lr
	...

0800d624 <_init>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	bf00      	nop
 800d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62a:	bc08      	pop	{r3}
 800d62c:	469e      	mov	lr, r3
 800d62e:	4770      	bx	lr

0800d630 <_fini>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	bf00      	nop
 800d634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d636:	bc08      	pop	{r3}
 800d638:	469e      	mov	lr, r3
 800d63a:	4770      	bx	lr
